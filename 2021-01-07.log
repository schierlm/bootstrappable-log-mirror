<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000143"><span class="nick" style="color:#389600"><a href="#000143" label="[00:01:43]">&lt;bauen1&gt;</a></span><span class="message">fossy: on the plus side, it should be a somewhat easier to port to other architectures since i've properly used size_t, uintptr_t where necessary, it already supports i686 and x86_64</span></div><div class="line" id="000228"><span class="nick" style="color:#389600"><a href="#000228" label="[00:02:28]">&lt;bauen1&gt;</a></span><span class="message">fossy: it does require a multiboot bootloader, but if you can read a file, load an elf file, and setup some memory maps you will be fine, that should be easy to do from assembly too if you want</span></div><div class="line" id="000502"><span class="nick" style="color:#389600"><a href="#000502" label="[00:05:02]">&lt;bauen1&gt;</a></span><span class="message">klange actually made a simple multiboot bootloader for toaruos, which i modified slightly to load myunix v2 i believe, so yes simple enough</span></div><div class="line" id="000617"><span class="nick" style="color:#2e2a4a"><a href="#000617" label="[00:06:17]">&lt;OriansJ&gt;</a></span><span class="message">There is a very good reason why M2-Planet was designed to run on bare metal; it makes the kernel bootstrap problem so much easier.</span></div><div class="line" id="000845"><span class="nick" style="color:#2e2a4a"><a href="#000845" label="[00:08:45]">&lt;OriansJ&gt;</a></span><span class="message">6 upvotes; nice that is better coverage than we got when I hand wrote a C compiler in x86 assembly.</span></div><div class="line" id="002835"><span class="nick" style="color:#2e2a4a"><a href="#002835" label="[00:28:35]">&lt;OriansJ&gt;</a></span><span class="message">yt_: one thing we could do is enable #define statements by converting them into CONSTANT statements. Then the rule in M2-Planet is use the last defined CONSTANT as correct.</span></div><div class="line" id="002905"><span class="nick" style="color:#2e2a4a"><a href="#002905" label="[00:29:05]">&lt;OriansJ&gt;</a></span><span class="message">that way we can do #define foo 1 // CONSTANT foo sizeof(int) and it'll continue to do the correct thing</span></div><div class="line" id="002923"><span class="nick" style="color:#6b8072"><a href="#002923" label="[00:29:23]">&lt;yt_&gt;</a></span><span class="message">OriansJ: hmm I hadn't considered that</span></div><div class="line" id="002932"><span class="nick" style="color:#2e2a4a"><a href="#002932" label="[00:29:32]">&lt;OriansJ&gt;</a></span><span class="message">until we fix pointer arithmetic in M2-Planet and can simply drop the // CONSTANT statements</span></div><div class="line" id="002936"><span class="nick" style="color:#6b8072"><a href="#002936" label="[00:29:36]">&lt;yt_&gt;</a></span><span class="message">thing is, I'm about 80% there on #define XD</span></div><div class="line" id="003106"><span class="nick" style="color:#2e2a4a"><a href="#003106" label="[00:31:06]">&lt;OriansJ&gt;</a></span><span class="message">I'll try to whip together a hacky solution.</span></div><div class="line" id="003113"><span class="nick" style="color:#6b8072"><a href="#003113" label="[00:31:13]">&lt;yt_&gt;</a></span><span class="message">well, I say that, but I'm not. I'm about 80% on #if defined(FOO) :-)</span></div><div class="line" id="003157"><span class="nick" style="color:#6b8072"><a href="#003157" label="[00:31:57]">&lt;yt_&gt;</a></span><span class="message">OriansJ: sure</span></div><div class="line" id="003311"><span class="nick" style="color:#2e2a4a"><a href="#003311" label="[00:33:11]">&lt;OriansJ&gt;</a></span><span class="message">well right now #define foo 1 just eats the line; which is a reasonable thing</span></div><div class="line" id="003503"><span class="nick" style="color:#6b8072"><a href="#003503" label="[00:35:03]">&lt;yt_&gt;</a></span><span class="message">yes, agreed, so I guess you're saying that the next step is translating #define foo 1 to CONSTANT foo 1, which sounds very reasonable to me</span></div><div class="line" id="003527"><span class="nick" style="color:#6b8072"><a href="#003527" label="[00:35:27]">&lt;yt_&gt;</a></span><span class="message">in the absence of proper macro expansion</span></div><div class="line" id="003621"><span class="nick" style="color:#2e2a4a"><a href="#003621" label="[00:36:21]">&lt;OriansJ&gt;</a></span><span class="message">yep</span></div><div class="line" id="003707"><span class="nick" style="color:#6b8072"><a href="#003707" label="[00:37:07]">&lt;yt_&gt;</a></span><span class="message">then the next step would be IMO to get #if foo (or at least #if defined(foo), which is easier) working</span></div><div class="line" id="003759"><span class="nick" style="color:#6b8072"><a href="#003759" label="[00:37:59]">&lt;yt_&gt;</a></span><span class="message">having that could help a lot with M2libc, I'd say</span></div><div class="line" id="003801"><span class="nick" style="color:#2e2a4a"><a href="#003801" label="[00:38:01]">&lt;OriansJ&gt;</a></span><span class="message">yt_: only support the parts of C you like</span></div><div class="line" id="003816"><span class="nick" style="color:#2e2a4a"><a href="#003816" label="[00:38:16]">&lt;OriansJ&gt;</a></span><span class="message">and you are always free to be strict on your input</span></div><div class="line" id="003822"><span class="nick" style="color:#6b8072"><a href="#003822" label="[00:38:22]">&lt;yt_&gt;</a></span><span class="message">OriansJ: joke's on you, I'm having too much fun XD</span></div><div class="line" id="003842"><span class="nick" style="color:#2e2a4a"><a href="#003842" label="[00:38:42]">&lt;OriansJ&gt;</a></span><span class="message">wait until you see my latest commits to M2libc</span></div><div class="line" id="004029"><span class="nick" style="color:#2e2a4a"><a href="#004029" label="[00:40:29]">&lt;OriansJ&gt;</a></span><span class="message">I'll whip up a libc-full.M1 to make it work nicely once I figure out my little CONSTANT hack to get it working right</span></div><div class="line" id="004055"><span class="nick" style="color:#80b1d3"><a href="#004055" label="[00:40:55]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://lwn.net/SubscriberLink/841797/f4c0502afdac32e4/">https://lwn.net/SubscriberLink/841797/f4c0502afdac32e4/</a> </span></div><div class="line" id="004110"><span class="nick" style="color:#80b1d3"><a href="#004110" label="[00:41:10]">&lt;pabs3&gt;</a></span><span class="message">^ LWN article about bootstrappable</span></div><div class="line" id="004601"><span class="nick" style="color:#6d2462"><a href="#004601" label="[00:46:01]">&lt;rain1&gt;</a></span><span class="message">it is a good article!</span></div><div class="line" id="004901"><span class="nick" style="color:#6b8072"><a href="#004901" label="[00:49:01]">&lt;yt_&gt;</a></span><span class="message">OriansJ: this now works for me: <a rel="nofollow" href="https://pastebin.com/1g2rfggR">https://pastebin.com/1g2rfggR</a> </span></div><div class="line" id="005114"><span class="nick" style="color:#6b8072"><a href="#005114" label="[00:51:14]">&lt;yt_&gt;</a></span><span class="message">PR hopefully tomorrow, if I can manage to get the tests to pass again</span></div><div class="line" id="005135"><span class="nick" style="color:#2e2a4a"><a href="#005135" label="[00:51:35]">&lt;OriansJ&gt;</a></span><span class="message">yt_: mine was a little more ugly <a rel="nofollow" href="https://paste.debian.net/1179959/">https://paste.debian.net/1179959/</a> </span></div><div class="line" id="005235"><span class="nick" style="color:#2e2a4a"><a href="#005235" label="[00:52:35]">&lt;OriansJ&gt;</a></span><span class="message">the only thing needed would be to move the // CONSTANT after the #define</span></div><div class="line" id="005347"><span class="nick" style="color:#6b8072"><a href="#005347" label="[00:53:47]">&lt;yt_&gt;</a></span><span class="message">would the // CONSTANT still be necessary?  wouldn't the #define be enough?</span></div><div class="line" id="005416"><span class="nick" style="color:#2e2a4a"><a href="#005416" label="[00:54:16]">&lt;OriansJ&gt;</a></span><span class="message">oh in the future could you use paste.debian.net as it doesn't require javascript to view?</span></div><div class="line" id="005454"><span class="nick" style="color:#6b8072"><a href="#005454" label="[00:54:54]">&lt;yt_&gt;</a></span><span class="message">OriansJ: sure, no problem</span></div><div class="line" id="005533"><span class="nick" style="color:#2e2a4a"><a href="#005533" label="[00:55:33]">&lt;OriansJ&gt;</a></span><span class="message">well foo isn't a function or a type and thus wouldn't be a valid thing in the global space</span></div><div class="line" id="005544"><span class="nick" style="color:#2e2a4a"><a href="#005544" label="[00:55:44]">&lt;OriansJ&gt;</a></span><span class="message">CONSTANT is a type</span></div><div class="line" id="005559"><span class="nick" style="color:#2e2a4a"><a href="#005559" label="[00:55:59]">&lt;OriansJ&gt;</a></span><span class="message">with compile time behavior</span></div><div class="line" id="005645"><span class="nick" style="color:#6b8072"><a href="#005645" label="[00:56:45]">&lt;yt_&gt;</a></span><span class="message">ah I see what you mean now.  // CONSTANT can be removed from source, but the preprocessor reinserts them in place of the #define</span></div><div class="line" id="005700"><span class="nick" style="color:#2e2a4a"><a href="#005700" label="[00:57:00]">&lt;OriansJ&gt;</a></span><span class="message">yep</span></div><div class="line" id="005812"><span class="nick" style="color:#6b8072"><a href="#005812" label="[00:58:12]">&lt;yt_&gt;</a></span><span class="message">I think that hack can coexist with my partial implementation of #define</span></div><div class="line" id="005814"><span class="nick" style="color:#2e2a4a"><a href="#005814" label="[00:58:14]">&lt;OriansJ&gt;</a></span><span class="message">it also gives us an escape valve if we need a #define for GCC but a different value for M2-Planet #define foo 1 // CONSTANT foo sizeof(struct pointer)</span></div><div class="line" id="005828"><span class="nick" style="color:#2e2a4a"><a href="#005828" label="[00:58:28]">&lt;OriansJ&gt;</a></span><span class="message">as the later CONSTANT will be used.</span></div><div class="line" id="005925"><span class="nick" style="color:#6b8072"><a href="#005925" label="[00:59:25]">&lt;yt_&gt;</a></span><span class="message">heh sneaky</span></div><div class="line" id="005925"><span class="nick" style="color:#2e2a4a"><a href="#005925" label="[00:59:25]">&lt;OriansJ&gt;</a></span><span class="message">oh my; my patch works without any code changes for any of the tests</span></div><div class="line" id="010117"><span class="nick" style="color:#234e69"><a href="#010117" label="[01:01:17]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a>  probably needs some kind of license file...</span></div><div class="line" id="010205"><span class="nick" style="color:#234e69"><a href="#010205" label="[01:02:05]">&lt;stikonas&gt;</a></span><span class="message">either at the top level or we need to add some comments to all shipped scripts...</span></div><div class="line" id="010538"><span class="nick" style="color:#6c3d55"><a href="#010538" label="[01:05:38]">&lt;fossy&gt;</a></span><span class="message">stikonas: ah yes</span></div><div class="line" id="010727"><span class="nick" style="color:#6b8072"><a href="#010727" label="[01:07:27]">&lt;yt_&gt;</a></span><span class="message">OriansJ: M2-Planet's test1000 (the self-hosting test) gives me nightmares now XD</span></div><div class="line" id="010816"><span class="nick" style="color:#d9d9d9"><a href="#010816" label="[01:08:16]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="010905"><span class="nick" style="color:#6b8072"><a href="#010905" label="[01:09:05]">&lt;yt_&gt;</a></span><span class="message">but this time round I managed to not use any unsupported C features, phew</span></div><div class="line" id="010915"><span class="nick" style="color:#2e2a4a"><a href="#010915" label="[01:09:15]">&lt;OriansJ&gt;</a></span><span class="message">yt_: well that is why I have to really do alot of work on --bootstrap-mode soon</span></div><div class="line" id="010938"><span class="nick" style="color:#2e2a4a"><a href="#010938" label="[01:09:38]">&lt;OriansJ&gt;</a></span><span class="message">then it'll become trivially obvious</span></div><div class="line" id="011001"><span class="nick" style="color:#6b8072"><a href="#011001" label="[01:10:01]">&lt;yt_&gt;</a></span><span class="message">OriansJ: is the idea that --bootstrap-mode matches cc_* behaviour?</span></div><div class="line" id="011006"><span class="nick" style="color:#2e2a4a"><a href="#011006" label="[01:10:06]">&lt;OriansJ&gt;</a></span><span class="message">and then we can add features and know that they didn't use them in a way that would break the bootstrap</span></div><div class="line" id="011037"><span class="nick" style="color:#2e2a4a"><a href="#011037" label="[01:10:37]">&lt;OriansJ&gt;</a></span><span class="message">yt_: short version it should throw a big fat line error when enabled on EVERY feature not in cc_*</span></div><div class="line" id="011256"><span class="nick" style="color:#6b8072"><a href="#011256" label="[01:12:56]">&lt;yt_&gt;</a></span><span class="message">OriansJ: that sounds very useful.  I wonder how we'd handle for example the preprocessor: at the moment we rely on cc_* and M2-Planet ignoring preprocessor directives, but they do need to be in the source for gcc compilation</span></div><div class="line" id="011557"><span class="nick" style="color:#2e2a4a"><a href="#011557" label="[01:15:57]">&lt;OriansJ&gt;</a></span><span class="message">well I was just going to skip the preprocess step entirely and go back to just dropping everything after # until newline</span></div><div class="line" id="011614"><span class="nick" style="color:#2e2a4a"><a href="#011614" label="[01:16:14]">&lt;OriansJ&gt;</a></span><span class="message">or perhaps make a compatibilyt function to do just that.</span></div><div class="line" id="011710"><span class="nick" style="color:#6b8072"><a href="#011710" label="[01:17:10]">&lt;yt_&gt;</a></span><span class="message">OriansJ: makes sense</span></div><div class="line" id="011826"><span class="nick" style="color:#2e2a4a"><a href="#011826" label="[01:18:26]">&lt;OriansJ&gt;</a></span><span class="message">I'll hack something together later tonight to make it work in a useful fashion.</span></div><div class="line" id="011931"><span class="nick" style="color:#6b8072"><a href="#011931" label="[01:19:31]">&lt;yt_&gt;</a></span><span class="message">OriansJ: anyway, enough from me today. I'll have a PR tomorrow; debugging went smoothly at least!</span></div><div class="line" id="012302"><span class="nick" style="color:#2e2a4a"><a href="#012302" label="[01:23:02]">&lt;OriansJ&gt;</a></span><span class="message">sounds like fun</span></div><div class="line" id="012310"><span class="nick" style="color:#2e2a4a"><a href="#012310" label="[01:23:10]">&lt;OriansJ&gt;</a></span><span class="message">sweet dreams</span></div><div class="line" id="012901"><span class="nick" style="color:#d9d9d9"><a href="#012901" label="[01:29:01]">&lt;xentrac&gt;</a></span><span class="message">goodnight yt_!  congratulations!</span></div><div class="line" id="033223"><span class="nick" style="color:#2e2a4a"><a href="#033223" label="[03:32:23]">&lt;OriansJ&gt;</a></span><span class="message">god, all the string to integer functions in stdlib.h suck</span></div><div class="line" id="035833"><span class="nick" style="color:#d9d9d9"><a href="#035833" label="[03:58:33]">&lt;xentrac&gt;</a></span><span class="message">usually you can implement them all in terms of strtoq, or strtoll if you don't have that, or strtol if you don't have that</span></div><div class="line" id="040239"><span class="nick" style="color:#2e2a4a"><a href="#040239" label="[04:02:39]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: except strtol sucks</span></div><div class="line" id="040400"><span class="nick" style="color:#d9d9d9"><a href="#040400" label="[04:04:00]">&lt;xentrac&gt;</a></span><span class="message">shyeah</span></div><div class="line" id="040451"><span class="nick" style="color:#d9d9d9"><a href="#040451" label="[04:04:51]">&lt;xentrac&gt;</a></span><span class="message">I guess strtol doesn't give you strtoul</span></div><div class="line" id="040501"><span class="nick" style="color:#2e2a4a"><a href="#040501" label="[04:05:01]">&lt;OriansJ&gt;</a></span><span class="message">well compare it to M2-Planet's numerate_string</span></div><div class="line" id="040550"><span class="nick" style="color:#d9d9d9"><a href="#040550" label="[04:05:50]">&lt;xentrac&gt;</a></span><span class="message">I mean of course strtol sucks</span></div><div class="line" id="041128"><span class="nick" style="color:#2e2a4a"><a href="#041128" label="[04:11:28]">&lt;OriansJ&gt;</a></span><span class="message">there are far better C programmers than I; so how did I write a better function that for converting a string to an int</span></div><div class="line" id="041143"><span class="nick" style="color:#2e2a4a"><a href="#041143" label="[04:11:43]">&lt;OriansJ&gt;</a></span><span class="message">oh and FYI <a rel="nofollow" href="https://paste.debian.net/1179984/">https://paste.debian.net/1179984/</a> </span></div><div class="line" id="041158"><span class="nick" style="color:#2e2a4a"><a href="#041158" label="[04:11:58]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture x86 -f x86/Linux/unistd.h -f stdlib.c -f x86/Linux/fcntl.h -f stdio.c -f foo.c -o foo.M1 --debug &amp;&amp; blood-elf -f foo.M1 -o foo-footer.M1 &amp;&amp; M1 --architecture x86 --little-endian -f x86/x86_defs.M1 -f x86/libc-full.M1 -f foo.M1 -f foo-footer.M1 -o foo.hex2 &amp;&amp; hex2 --architecture x86 --little-endian --base-address 0x10000 -f x86/ELF-i386-debug.hex2 -f foo.hex2 -o foo &amp;&amp; ./foo</span></div><div class="line" id="041242"><span class="nick" style="color:#2e2a4a"><a href="#041242" label="[04:12:42]">&lt;OriansJ&gt;</a></span><span class="message">M2libc upgrades</span></div><div class="line" id="041536"><span class="nick" style="color:#d9d9d9"><a href="#041536" label="[04:15:36]">&lt;xentrac&gt;</a></span><span class="message">well, you weren't trying to be compatible with BSD code from 1979</span></div><div class="line" id="041720"><span class="nick" style="color:#2e2a4a"><a href="#041720" label="[04:17:20]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well GNU C Language Extensions don't have to be either</span></div><div class="line" id="041802"><span class="nick" style="color:#d9d9d9"><a href="#041802" label="[04:18:02]">&lt;xentrac&gt;</a></span><span class="message">strtol is from 4.3BSD tho</span></div><div class="line" id="041814"><span class="nick" style="color:#2e2a4a"><a href="#041814" label="[04:18:14]">&lt;OriansJ&gt;</a></span><span class="message">or the FreeBSD C Extensions like strtonum</span></div><div class="line" id="041833"><span class="nick" style="color:#d9d9d9"><a href="#041833" label="[04:18:33]">&lt;xentrac&gt;</a></span><span class="message">and, to be totally evenhanded, it can do things numerate_string can't</span></div><div class="line" id="041919"><span class="nick" style="color:#d9d9d9"><a href="#041919" label="[04:19:19]">&lt;xentrac&gt;</a></span><span class="message">and the implementation is probably about four times faster than set_reader</span></div><div class="line" id="041946"><span class="nick" style="color:#2e2a4a"><a href="#041946" label="[04:19:46]">&lt;OriansJ&gt;</a></span><span class="message">true; speed is an easy goal</span></div><div class="line" id="042026"><span class="nick" style="color:#d9d9d9"><a href="#042026" label="[04:20:26]">&lt;xentrac&gt;</a></span><span class="message">numerate_string is more to my taste</span></div><div class="line" id="042200"><span class="nick" style="color:#2e2a4a"><a href="#042200" label="[04:22:00]">&lt;OriansJ&gt;</a></span><span class="message">well I hate having to think about what the input is when I am expecting an int</span></div><div class="line" id="042356"><span class="nick" style="color:#2e2a4a"><a href="#042356" label="[04:23:56]">&lt;OriansJ&gt;</a></span><span class="message">I wonder if I should make a bootstrappable.h lib in M2libc to cover these sorts of pieces with more C standard names</span></div><div class="line" id="042447"><span class="nick" style="color:#d9d9d9"><a href="#042447" label="[04:24:47]">&lt;xentrac&gt;</a></span><span class="message">cover them?</span></div><div class="line" id="042558"><span class="nick" style="color:#2e2a4a"><a href="#042558" label="[04:25:58]">&lt;OriansJ&gt;</a></span><span class="message">so that I can pull the functions folders out of M2-Planet, mescc-tools and blynn-compiler</span></div><div class="line" id="043104"><span class="nick" style="color:#d9d9d9"><a href="#043104" label="[04:31:04]">&lt;xentrac&gt;</a></span><span class="message">do you mean to provide implementations of things like numerate_string on top of standard C library functions?  you'd still have to have an implementation of numerate_string in that case, it would just be calling atoi instead of set_reader</span></div><div class="line" id="043128"><span class="nick" style="color:#d9d9d9"><a href="#043128" label="[04:31:28]">&lt;xentrac&gt;</a></span><span class="message">or implementations of things like atoi on top of things like numerate_string?</span></div><div class="line" id="043246"><span class="nick" style="color:#2e2a4a"><a href="#043246" label="[04:32:46]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: or I could just leverage janneke's atoi and other stdlib primitives</span></div><div class="line" id="043846"><span class="nick" style="color:#d9d9d9"><a href="#043846" label="[04:38:46]">&lt;xentrac&gt;</a></span><span class="message">that sounds like a reasonable thing to do but I still don't understand what you mean by &quot;cover&quot;</span></div><div class="line" id="044314"><span class="nick" style="color:#2e2a4a"><a href="#044314" label="[04:43:14]">&lt;OriansJ&gt;</a></span><span class="message">as in create a standard library bootstrappable.h that contains functions like numerate_string</span></div><div class="line" id="044417"><span class="nick" style="color:#d9d9d9"><a href="#044417" label="[04:44:17]">&lt;xentrac&gt;</a></span><span class="message">oh, move numerate_string and friends to M2libc instead of having separate copies in the three places?</span></div><div class="line" id="044453"><span class="nick" style="color:#d9d9d9"><a href="#044453" label="[04:44:53]">&lt;xentrac&gt;</a></span><span class="message">what do you mean by &quot;more C standard names&quot;?  fortunately we no longer have to suffer linkers that only support six significant letters for a global symbol :)</span></div><div class="line" id="044454"><span class="nick" style="color:#2e2a4a"><a href="#044454" label="[04:44:54]">&lt;OriansJ&gt;</a></span><span class="message">yes</span></div><div class="line" id="044511"><span class="nick" style="color:#d9d9d9"><a href="#044511" label="[04:45:11]">&lt;xentrac&gt;</a></span><span class="message">that sounds like a reasonable thing to do to me</span></div><div class="line" id="044559"><span class="nick" style="color:#2e2a4a"><a href="#044559" label="[04:45:59]">&lt;OriansJ&gt;</a></span><span class="message">as for what I mean by more C standard names is name them something easy for a C programmer to guess</span></div><div class="line" id="044634"><span class="nick" style="color:#d9d9d9"><a href="#044634" label="[04:46:34]">&lt;xentrac&gt;</a></span><span class="message">what, like dxzqphnd?</span></div><div class="line" id="044639"><span class="nick" style="color:#2e2a4a"><a href="#044639" label="[04:46:39]">&lt;OriansJ&gt;</a></span><span class="message">strtoin?</span></div><div class="line" id="044653"><span class="nick" style="color:#2e2a4a"><a href="#044653" label="[04:46:53]">&lt;OriansJ&gt;</a></span><span class="message">strtoint?</span></div><div class="line" id="044710"><span class="nick" style="color:#d9d9d9"><a href="#044710" label="[04:47:10]">&lt;xentrac&gt;</a></span><span class="message">str2int?</span></div><div class="line" id="044716"><span class="nick" style="color:#2e2a4a"><a href="#044716" label="[04:47:16]">&lt;OriansJ&gt;</a></span><span class="message">bacon2mouth</span></div><div class="line" id="044825"><span class="nick" style="color:#2e2a4a"><a href="#044825" label="[04:48:25]">&lt;OriansJ&gt;</a></span><span class="message">omm-nom-nom-nom</span></div><div class="line" id="044836"><span class="nick" style="color:#d9d9d9"><a href="#044836" label="[04:48:36]">&lt;xentrac&gt;</a></span><span class="message">str2omnom</span></div><div class="line" id="044902"><span class="nick" style="color:#2e2a4a"><a href="#044902" label="[04:49:02]">&lt;OriansJ&gt;</a></span><span class="message">bacon2omnom</span></div><div class="line" id="044915"><span class="nick" style="color:#d9d9d9"><a href="#044915" label="[04:49:15]">&lt;xentrac&gt;</a></span><span class="message">strtoint or str_to_int or those other variations probably are clearer than numerate_string</span></div><div class="line" id="044943"><span class="nick" style="color:#d9d9d9"><a href="#044943" label="[04:49:43]">&lt;xentrac&gt;</a></span><span class="message">which is more easily interpreted as the antonym of innumerate_string</span></div><div class="line" id="045017"><span class="nick" style="color:#d9d9d9"><a href="#045017" label="[04:50:17]">&lt;xentrac&gt;</a></span><span class="message">but I think a comment in the header file is probably more important than changing the name</span></div><div class="line" id="045040"><span class="nick" style="color:#d9d9d9"><a href="#045040" label="[04:50:40]">&lt;xentrac&gt;</a></span><span class="message">I mean, once you know what it means, you probably aren't going to forget.  It numberifies the string</span></div><div class="line" id="045133"><span class="nick" style="color:#2e2a4a"><a href="#045133" label="[04:51:33]">&lt;OriansJ&gt;</a></span><span class="message">huh, it is a Delphi function name</span></div><div class="line" id="045210"><span class="nick" style="color:#d9d9d9"><a href="#045210" label="[04:52:10]">&lt;xentrac&gt;</a></span><span class="message">is that where you got it?  I've never used delphi</span></div><div class="line" id="045232"><span class="nick" style="color:#2e2a4a"><a href="#045232" label="[04:52:32]">&lt;OriansJ&gt;</a></span><span class="message">but not a claimed c or c++ name; *DIBS*</span></div><div class="line" id="045239"><span class="nick" style="color:#d9d9d9"><a href="#045239" label="[04:52:39]">&lt;xentrac&gt;</a></span><span class="message">oh, ou mean strtoint</span></div><div class="line" id="050305"><span class="nick" style="color:#2e2a4a"><a href="#050305" label="[05:03:05]">&lt;OriansJ&gt;</a></span><span class="message">now hopefully someone finds an improvement for M2libc's __init_io</span></div><div class="line" id="053354"><span class="nick" style="color:#bc80bd"><a href="#053354" label="[05:33:54]">&lt;siraben&gt;</a></span><span class="message">pder: sounds great!</span></div><div class="line" id="060205"><span class="nick" style="color:#bc80bd"><a href="#060205" label="[06:02:05]">&lt;siraben&gt;</a></span><span class="message">Can't get more idiomatic haskell than `queens' n k = [x:xs | xs &lt;- queens' n (k - 1), x &lt;- [1..n], isSafeColumn x xs, isSafeDiagonal x xs]`</span></div><div class="line" id="061727"><span class="nick" style="color:#3c5b35"><a href="#061727" label="[06:17:27]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="http://datacolada.org/95">http://datacolada.org/95</a>  &quot;Groundhog: Addressing The Threat That R Poses To Reproducible Research&quot;</span></div><div class="line" id="081603"><span class="nick" style="color:#af8d2f"><a href="#081603" label="[08:16:03]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: you should really maintain a TODO-list somewhere, even for &quot;small&quot; things like the M2libc's __init_io</span></div><div class="line" id="081730"><span class="nick" style="color:#af8d2f"><a href="#081730" label="[08:17:30]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: maybe divided up into &quot;small changes/big changes/ideas&quot;...</span></div><div class="line" id="081755"><span class="nick" style="color:#af8d2f"><a href="#081755" label="[08:17:55]">&lt;gforce_de1977&gt;</a></span><span class="message">(good morning everyone!)</span></div><div class="line" id="101515"><span class="nick" style="color:#bc80bd"><a href="#101515" label="[10:15:15]">&lt;siraben&gt;</a></span><span class="message">good morning to you</span></div><div class="line" id="120117"><span class="nick" style="color:#2e2a4a"><a href="#120117" label="[12:01:17]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: good to see the R community starting to address those issues</span></div><div class="line" id="120525"><span class="nick" style="color:#2e2a4a"><a href="#120525" label="[12:05:25]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: yes I could; that would certainly point directly to known flaws, such as the lacking documentation and general disorganization of it all. However it might discourage people from trying to fix what annoys them if it isn't on the list.</span></div><div class="line" id="122457"><span class="nick" style="color:#389600"><a href="#122457" label="[12:24:57]">&lt;janneke&gt;</a></span><span class="message">cd -</span></div><div class="line" id="122541"><span class="nick" style="color:#2e2a4a"><a href="#122541" label="[12:25:41]">&lt;OriansJ&gt;</a></span><span class="message">janneke: directory not found ;-p</span></div><div class="line" id="122625"><span class="nick" style="color:#389600"><a href="#122625" label="[12:26:25]">&lt;janneke&gt;</a></span><span class="message">OriansJ: thanks!</span></div><div class="line" id="122739"><span class="nick" style="color:#389600"><a href="#122739" label="[12:27:39]">&lt;janneke&gt;</a></span><span class="message">(nginx-location-configuration</span></div><div class="line" id="122742"><span class="nick" style="color:#389600"><a href="#122742" label="[12:27:42]">&lt;janneke&gt;</a></span><span class="message">          (uri &quot;/download&quot;)</span></div><div class="line" id="122742"><span class="nick" style="color:#389600"><a href="#122742" label="[12:27:42]">&lt;janneke&gt;</a></span><span class="message">          (body '(&quot;root /srv/doc.verum.com;&quot;</span></div><div class="line" id="122808"><span class="nick" style="color:#389600"><a href="#122808" label="[12:28:08]">&lt;janneke&gt;</a></span><span class="message">good busy, sorry</span></div><div class="line" id="123141"><span class="nick" style="color:#6c3d55"><a href="#123141" label="[12:31:41]">&lt;fossy&gt;</a></span><span class="message">janneke: is at a guix thing there?</span></div><div class="line" id="123222"><span class="nick" style="color:#389600"><a href="#123222" label="[12:32:22]">&lt;janneke&gt;</a></span><span class="message">no, i'm selecting the wrong emacs windows this morning, very sorry</span></div><div class="line" id="123303"><span class="nick" style="color:#6c3d55"><a href="#123303" label="[12:33:03]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="123307"><span class="nick" style="color:#6c3d55"><a href="#123307" label="[12:33:07]">&lt;fossy&gt;</a></span><span class="message">what is that, i am very interested</span></div><div class="line" id="123525"><span class="nick" style="color:#8dd3c7"><a href="#123525" label="[12:35:25]">&lt;civodul&gt;</a></span><span class="message">hmm doesn't look like a password</span></div><div class="line" id="123604"><span class="nick" style="color:#389600"><a href="#123604" label="[12:36:04]">&lt;janneke&gt;</a></span><span class="message">those are the best, right</span></div><div class="line" id="125305"><span class="nick" style="color:#bc80bd"><a href="#125305" label="[12:53:05]">&lt;siraben&gt;</a></span><span class="message">OriansJ: i'm sure over time we'll converge on some standard doc format that describes which stage each component is for and so on</span></div><div class="line" id="125401"><span class="nick" style="color:#bc80bd"><a href="#125401" label="[12:54:01]">&lt;siraben&gt;</a></span><span class="message">I tried to do that in blynn-compiler's readme, for instance</span></div><div class="line" id="125423"><span class="nick" style="color:#6d2462"><a href="#125423" label="[12:54:23]">&lt;rain1&gt;</a></span><span class="message">it helps a lot</span></div><div class="line" id="131716"><span class="nick" style="color:#bc80bd"><a href="#131716" label="[13:17:16]">&lt;siraben&gt;</a></span><span class="message">pder: modulo the prelude, the n-queens code is 100% compatible with GHC</span></div><div class="line" id="131742"><span class="nick" style="color:#bc80bd"><a href="#131742" label="[13:17:42]">&lt;siraben&gt;</a></span><span class="message">and wrapping it with GHC would just be #include from another file like the wrappers in site/</span></div><div class="line" id="134055"><span class="nick" style="color:#8dd3c7"><a href="#134055" label="[13:40:55]">&lt;civodul&gt;</a></span><span class="message">rekado: i noticed that <a rel="nofollow" href="https://bootstrappable.org/projects/mes.html">https://bootstrappable.org/projects/mes.html</a>  mentions &quot;GuixSD&quot;; can you fix it?</span></div><div class="line" id="134100"><span class="nick" style="color:#8dd3c7"><a href="#134100" label="[13:41:00]">&lt;civodul&gt;</a></span><span class="message">or can i, actually?</span></div><div class="line" id="134111"><span class="nick" style="color:#8dd3c7"><a href="#134111" label="[13:41:11]">&lt;civodul&gt;</a></span><span class="message">not sure where the repo is</span></div><div class="line" id="134124"><span class="nick" style="color:#8dd3c7"><a href="#134124" label="[13:41:24]">&lt;civodul&gt;</a></span><span class="message">oh i see</span></div><div class="line" id="134232"><span class="nick" style="color:#bc80bd"><a href="#134232" label="[13:42:32]">&lt;siraben&gt;</a></span><span class="message">civodul: where's the repo?</span></div><div class="line" id="134426"><span class="nick" style="color:#8dd3c7"><a href="#134426" label="[13:44:26]">&lt;civodul&gt;</a></span><span class="message">there's a link at the bottom</span></div><div class="line" id="134545"><span class="nick" style="color:#bc80bd"><a href="#134545" label="[13:45:45]">&lt;siraben&gt;</a></span><span class="message">thanks</span></div><div class="line" id="135413"><span class="nick" style="color:#8dd3c7"><a href="#135413" label="[13:54:13]">&lt;civodul&gt;</a></span><span class="message">rekado, janneke &amp; all: i've pushed a fix for &quot;GuixSD&quot; and an update to mes.md, which was lagging behind (you folks work too fast :-))</span></div><div class="line" id="135433"><span class="nick" style="color:#8dd3c7"><a href="#135433" label="[13:54:33]">&lt;civodul&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/log/">https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/log/</a> </span></div><div class="line" id="135445"><span class="nick" style="color:#389600"><a href="#135445" label="[13:54:45]">&lt;janneke&gt;</a></span><span class="message">civodul: it will never happen again ;-) -- i mean, ty!</span></div><div class="line" id="135559"><span class="nick" style="color:#8dd3c7"><a href="#135559" label="[13:55:59]">&lt;civodul&gt;</a></span><span class="message">heh, that's my contribution ;-)</span></div><div class="line" id="135628"><span class="nick" style="color:#8dd3c7"><a href="#135628" label="[13:56:28]">&lt;civodul&gt;</a></span><span class="message">rekado: should we change bootstrappable.org to use static-web-site in berlin.scm, so that it gets updated automatically?</span></div><div class="line" id="135644"><span class="nick" style="color:#389600"><a href="#135644" label="[13:56:44]">&lt;janneke&gt;</a></span><span class="message">./pre-inst-env dzn code -l c++ew test/all/hello/hello.dzn</span></div><div class="line" id="135717"><span class="nick" style="color:#389600"><a href="#135717" label="[13:57:17]">&lt;janneke&gt;</a></span><span class="message">sorry, 3rd time today</span></div><div class="line" id="135731"><span class="nick" style="color:#2e2a4a"><a href="#135731" label="[13:57:31]">*</a></span><span class="message">janneke is waaay too busy today</span></div><div class="line" id="154711"><span class="nick">***</span><span class="message notice">ericonr- is now known as ericonr</span></div><div class="line" id="200025"><span class="nick" style="color:#6b8072"><a href="#200025" label="[20:00:25]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I patched the M2-Planet test suite to allow parallel execution. It needs a couple of tweaks, but I'll send you a first draft/RFC soon.</span></div><div class="line" id="200301"><span class="nick" style="color:#d9d9d9"><a href="#200301" label="[20:03:01]">&lt;xentrac&gt;</a></span><span class="message">deesix: hooray!</span></div><div class="line" id="200341"><span class="nick" style="color:#3c5b35"><a href="#200341" label="[20:03:41]">&lt;Hagfish&gt;</a></span><span class="message">fantastic</span></div><div class="line" id="223029"><span class="nick" style="color:#80b1d3"><a href="#223029" label="[22:30:29]">&lt;pder&gt;</a></span><span class="message">Since there is a desire to have a C preprocessor for M2-Planet, has anyone looked at <a rel="nofollow" href="https://hackage.haskell.org/package/cpphs?">https://hackage.haskell.org/package/cpphs?</a>   Its a stand alone C Preprocessor written in Haskell.  According to cloc it is only 1389 lines of Haskell code.  Maybe it could be ported to run on blynn-compiler?</span></div><div class="line" id="231226"><span class="nick" style="color:#6d2462"><a href="#231226" label="[23:12:26]">&lt;amirouche&gt;</a></span><span class="message">I guess I am the last one to read <a rel="nofollow" href="https://lwn.net/SubscriberLink/841797/6742a0742f6160ef/">https://lwn.net/SubscriberLink/841797/6742a0742f6160ef/</a> </span></div><br /></div></body></html>