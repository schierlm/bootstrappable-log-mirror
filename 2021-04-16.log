<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004018"><span class="nick" style="color:#8dd3c7"><a href="#004018" label="[00:40:18]">&lt;bauen1&gt;</a></span><span class="message">stikonas: your rootfs.py script is nice, but lacks some feedback (more on that tomorrow)</span></div><div class="line" id="004811"><span class="nick" style="color:#2e2a4a"><a href="#004811" label="[00:48:11]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh, what kind of feedback?</span></div><div class="line" id="004836"><span class="nick" style="color:#2e2a4a"><a href="#004836" label="[00:48:36]">&lt;stikonas&gt;</a></span><span class="message">if it wasn't present in rootfs.sh, it's not regression :)</span></div><div class="line" id="005847"><span class="nick" style="color:#6b8072"><a href="#005847" label="[00:58:47]">&lt;OriansJ`&gt;</a></span><span class="message">well I got tests 000 to 009 working in mes-m2</span></div><div class="line" id="005857"><span class="nick" style="color:#6b8072"><a href="#005857" label="[00:58:57]">&lt;OriansJ`&gt;</a></span><span class="message">So it isn't completely borked</span></div><div class="line" id="005946"><span class="nick" style="color:#6b8072"><a href="#005946" label="[00:59:46]">&lt;OriansJ`&gt;</a></span><span class="message">test010 however is a bit of a problem because quasiquote isn't implemented in mes.c but I guess I'll deal with that later</span></div><div class="line" id="010019"><span class="nick" style="color:#6b8072"><a href="#010019" label="[01:00:19]">&lt;OriansJ`&gt;</a></span><span class="message">(probably have to define a minimal boot.scm which provides quasiquote)</span></div><div class="line" id="010338"><span class="nick" style="color:#6b8072"><a href="#010338" label="[01:03:38]">&lt;OriansJ`&gt;</a></span><span class="message">(or I'll have to port the C version of quasiquote that I previously wrote to mes-m2)</span></div><div class="line" id="012700"><span class="nick" style="color:#6b8072"><a href="#012700" label="[01:27:00]">&lt;OriansJ`&gt;</a></span><span class="message">I guess cond isn't a primitive either, so guess I need to fix test017</span></div><div class="line" id="012834"><span class="nick" style="color:#6b8072"><a href="#012834" label="[01:28:34]">&lt;OriansJ`&gt;</a></span><span class="message">or move load-module to test010 and write a cond definition in terms of if and stick to pure guile syntax for the remaining tests</span></div><div class="line" id="014704"><span class="nick" style="color:#6b8072"><a href="#014704" label="[01:47:04]">&lt;OriansJ`&gt;</a></span><span class="message">although guile can't do (define (display n) (display n)); mes.c can so why do core:display when you can define display in terms of a more primitive display?</span></div><div class="line" id="032331"><span class="nick" style="color:#6b8072"><a href="#032331" label="[03:23:31]">&lt;OriansJ`&gt;</a></span><span class="message">ok mes/module/mes/boot-02.scm loads just fine but mes/module/mes/boot-03.scm segfaults</span></div><div class="line" id="035001"><span class="nick" style="color:#6b8072"><a href="#035001" label="[03:50:01]">&lt;OriansJ`&gt;</a></span><span class="message">ok boot-03.scm fixed by doing (primitive-load (open-input-file &quot;/dev/stdin&quot;)) instead of (primitive-load 0)</span></div><div class="line" id="035153"><span class="nick" style="color:#6b8072"><a href="#035153" label="[03:51:53]">&lt;OriansJ`&gt;</a></span><span class="message">or even just plain (primitive-load &quot;/dev/stdin&quot;)</span></div><div class="line" id="052422"><span class="nick" style="color:#6b8072"><a href="#052422" label="[05:24:22]">&lt;OriansJ`&gt;</a></span><span class="message">up to test017 working (except 10 of course)</span></div><div class="line" id="052449"><span class="nick" style="color:#6b8072"><a href="#052449" label="[05:24:49]">&lt;OriansJ`&gt;</a></span><span class="message">So progress being made; just haven't figured out the cause of the segfault yet.</span></div><div class="line" id="052515"><span class="nick" style="color:#6b8072"><a href="#052515" label="[05:25:15]">&lt;OriansJ`&gt;</a></span><span class="message">I guess I'll hammer more tomorrow (unless someone else spots the problem first)</span></div><div class="line" id="093305"><span class="nick" style="color:#80b1d3"><a href="#093305" label="[09:33:05]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: i again simplified my PR: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/104">https://github.com/fosslinux/live-bootstrap/pull/104</a> </span></div><div class="line" id="102344"><span class="nick" style="color:#8dd3c7"><a href="#102344" label="[10:23:44]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: so rootfs.sh was verbose and actually showed me what is was doing, the python one doesn't</span></div><div class="line" id="124012"><span class="nick" style="color:#2e2a4a"><a href="#124012" label="[12:40:12]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh I see what you mean. Yes, we can add some more print() stagements to make things more verbose</span></div><div class="line" id="130536"><span class="nick" style="color:#8dd3c7"><a href="#130536" label="[13:05:36]">&lt;bauen1&gt;</a></span><span class="message">also i've noticed that live-bootstrap has this odd dependency on env = { PATH=&quot;/bin&quot; } ; not sure why</span></div><div class="line" id="131059"><span class="nick" style="color:#2e2a4a"><a href="#131059" label="[13:10:59]">&lt;stikonas&gt;</a></span><span class="message">bauen1: chroot mode?</span></div><div class="line" id="131140"><span class="nick" style="color:#2e2a4a"><a href="#131140" label="[13:11:40]">&lt;stikonas&gt;</a></span><span class="message">bauen1: this is known and fix is clear, I just didn't get to it yet</span></div><div class="line" id="131144"><span class="nick" style="color:#2e2a4a"><a href="#131144" label="[13:11:44]">&lt;stikonas&gt;</a></span><span class="message">feel free to fix this</span></div><div class="line" id="131214"><span class="nick" style="color:#2e2a4a"><a href="#131214" label="[13:12:14]">&lt;stikonas&gt;</a></span><span class="message">that's PATH=/bin is needed to find chroot binary</span></div><div class="line" id="131235"><span class="nick" style="color:#2e2a4a"><a href="#131235" label="[13:12:35]">&lt;stikonas&gt;</a></span><span class="message">ideally we would run in empty environment with just env -i</span></div><div class="line" id="131250"><span class="nick" style="color:#2e2a4a"><a href="#131250" label="[13:12:50]">&lt;stikonas&gt;</a></span><span class="message">so we need to find where chroot binary is located and use absolute path</span></div><div class="line" id="131303"><span class="nick" style="color:#2e2a4a"><a href="#131303" label="[13:13:03]">&lt;stikonas&gt;</a></span><span class="message">rootfs.sh had similar problem</span></div><div class="line" id="131313"><span class="nick" style="color:#2e2a4a"><a href="#131313" label="[13:13:13]">&lt;stikonas&gt;</a></span><span class="message">it was actaully running with even more poluted environment</span></div><div class="line" id="133343"><span class="nick" style="color:#8dd3c7"><a href="#133343" label="[13:33:43]">&lt;bauen1&gt;</a></span><span class="message">stikonas: if you hardcode chroot path and remove the PATH= then the chroot and initial few steps of build will succeed but eventually kaem will terminate with failure during the early stages (long before bash)</span></div><div class="line" id="133508"><span class="nick" style="color:#2e2a4a"><a href="#133508" label="[13:35:08]">&lt;stikonas&gt;</a></span><span class="message">hmm,  that is strange...</span></div><div class="line" id="133524"><span class="nick" style="color:#2e2a4a"><a href="#133524" label="[13:35:24]">&lt;stikonas&gt;</a></span><span class="message">because it runs just fine in qemu which clearly has no initial environment</span></div><div class="line" id="134620"><span class="nick" style="color:#8dd3c7"><a href="#134620" label="[13:46:20]">&lt;bauen1&gt;</a></span><span class="message">stikonas: are you sure ?</span></div><div class="line" id="134833"><span class="nick" style="color:#2e2a4a"><a href="#134833" label="[13:48:33]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, what would set the environment in qemu?</span></div><div class="line" id="134844"><span class="nick" style="color:#2e2a4a"><a href="#134844" label="[13:48:44]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is pid 1 there</span></div><div class="line" id="134905"><span class="nick" style="color:#8dd3c7"><a href="#134905" label="[13:49:05]">&lt;bauen1&gt;</a></span><span class="message">i wouldn't be surprised if the kernel does it</span></div><div class="line" id="135108"><span class="nick" style="color:#2e2a4a"><a href="#135108" label="[13:51:08]">&lt;stikonas&gt;</a></span><span class="message">at least on my current system environment of pid 1 is really small</span></div><div class="line" id="135124"><span class="nick" style="color:#2e2a4a"><a href="#135124" label="[13:51:24]">&lt;stikonas&gt;</a></span><span class="message">TERM=linuxBOOT_IMAGE=/rootfs/boot/vmlinuz-5.10.27-gentoo-gnuintel_iommu=on</span></div><div class="line" id="135131"><span class="nick" style="color:#2e2a4a"><a href="#135131" label="[13:51:31]">&lt;stikonas&gt;</a></span><span class="message">nothing that can affect bootstrap</span></div><div class="line" id="140241"><span class="nick" style="color:#80b1d3"><a href="#140241" label="[14:02:41]">&lt;gforce_d11977&gt;</a></span><span class="message">this is the output of kernel-5.11.15+busybox_as_PID1 and the output of 'env' + 'set': i think the PATH comes from busybox: <a rel="nofollow" href="https://paste.debian.net/1193968/">https://paste.debian.net/1193968/</a> </span></div><div class="line" id="140309"><span class="nick" style="color:#8dd3c7"><a href="#140309" label="[14:03:09]">&lt;bauen1&gt;</a></span><span class="message">i'll look into what exactly went wrong</span></div><div class="line" id="140745"><span class="nick" style="color:#2e2a4a"><a href="#140745" label="[14:07:45]">&lt;stikonas&gt;</a></span><span class="message">(my output was from cat /proc/1/environ but inside live-bootstrap /proc is not mounted)</span></div><div class="line" id="140802"><span class="nick" style="color:#2e2a4a"><a href="#140802" label="[14:08:02]">&lt;stikonas&gt;</a></span><span class="message">with busybox you can mount it though</span></div><div class="line" id="141150"><span class="nick" style="color:#80b1d3"><a href="#141150" label="[14:11:50]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: i have not compiled in /proc 8-))))</span></div><div class="line" id="154800"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="162646"><span class="nick" style="color:#2e2a4a"><a href="#162646" label="[16:26:46]">&lt;stikonas&gt;</a></span><span class="message">pder: maybe it's worth upstreaming your mes crt1 fix?</span></div><div class="line" id="170157"><span class="nick" style="color:#6d2462"><a href="#170157" label="[17:01:57]">&lt;dongcarl&gt;</a></span><span class="message">In case you guys didn't see (riscv mescc can generate assembly, compile the minilibc, as well as a working ELF binary): <a rel="nofollow" href="https://twitter.com/orionwl/status/1382947841413414913">https://twitter.com/orionwl/status/1382947841413414913</a> </span></div><div class="line" id="170217"><span class="nick" style="color:#6d2462"><a href="#170217" label="[17:02:17]">&lt;dongcarl&gt;</a></span><span class="message">All wumpus' doing</span></div><div class="line" id="170317"><span class="nick" style="color:#234e69"><a href="#170317" label="[17:03:17]">&lt;vancz&gt;</a></span><span class="message">beware the wumpus</span></div><div class="line" id="170646"><span class="nick" style="color:#6c3d55"><a href="#170646" label="[17:06:46]">&lt;fitzsim&gt;</a></span><span class="message">is anyone working on ppc64le support for mescc?</span></div><div class="line" id="170805"><span class="nick" style="color:#6c3d55"><a href="#170805" label="[17:08:05]">&lt;fitzsim&gt;</a></span><span class="message">Guix ppc64le support is making progress, which I was happy to see</span></div><div class="line" id="173019"><span class="nick" style="color:#2e2a4a"><a href="#173019" label="[17:30:19]">&lt;stikonas&gt;</a></span><span class="message">hmm, riscv will probably be trickier in later bootstrap stages</span></div><div class="line" id="173157"><span class="nick" style="color:#2e2a4a"><a href="#173157" label="[17:31:57]">&lt;stikonas&gt;</a></span><span class="message">(tcc, binutils-2.14, and gcc I guess don't support it)</span></div><div class="line" id="173420"><span class="nick" style="color:#8dd3c7"><a href="#173420" label="[17:34:20]">&lt;bauen1&gt;</a></span><span class="message">tcc has some support for risc-v in mob</span></div><div class="line" id="173526"><span class="nick" style="color:#8dd3c7"><a href="#173526" label="[17:35:26]">&lt;bauen1&gt;</a></span><span class="message">or you could do some x86-to-risc-v emulation layer up until you have a gcc that can cross compile to risc-v again</span></div><div class="line" id="173842"><span class="nick" style="color:#8dd3c7"><a href="#173842" label="[17:38:42]">&lt;bauen1&gt;</a></span><span class="message">funny, i could work on a &quot;risc-v to x86 transpiler for static binaries&quot; this semester so maybe lol</span></div><div class="line" id="173914"><span class="nick" style="color:#8dd3c7"><a href="#173914" label="[17:39:14]">&lt;bauen1&gt;</a></span><span class="message">wait no that's the wrong way around</span></div><div class="line" id="191831"><span class="nick" style="color:#d9d9d9"><a href="#191831" label="[19:18:31]">&lt;wumpus&gt;</a></span><span class="message">yup i noticed that tcc has been adding riscv support (64 bit, the same i'm focusing on), agree gcc is likely going to be an obstacle; also thought of the x86 transpiler thing but thought it would be too circuitous, but if it is acceptable as a temporary solution at least, it seems more straightforward than porting fully fledged riscv support so far back</span></div><div class="line" id="200654"><span class="nick" style="color:#8dd3c7"><a href="#200654" label="[20:06:54]">&lt;bauen1&gt;</a></span><span class="message">that's the nice thing about having all the pieces laid out in front of you: you now know where changes are necessary, and in the best case can optimise the bootstrap or change it to add new architectures more easily</span></div><div class="line" id="202002"><span class="nick" style="color:#d9d9d9"><a href="#202002" label="[20:20:02]">&lt;wumpus&gt;</a></span><span class="message">absolutely!</span></div><div class="line" id="203545"><span class="nick" style="color:#2e2a4a"><a href="#203545" label="[20:35:45]">&lt;stikonas&gt;</a></span><span class="message">wumpus: well, gcc 4 might be doable, it's not too old</span></div><div class="line" id="203608"><span class="nick" style="color:#2e2a4a"><a href="#203608" label="[20:36:08]">&lt;stikonas&gt;</a></span><span class="message">although, probably still not easy</span></div><div class="line" id="204547"><span class="nick" style="color:#d9d9d9"><a href="#204547" label="[20:45:47]">&lt;wumpus&gt;</a></span><span class="message">very likely less bad than 2.95, is the problem that tcc cannot compile it directly</span></div><div class="line" id="204601"><span class="nick" style="color:#d9d9d9"><a href="#204601" label="[20:46:01]">&lt;wumpus&gt;</a></span><span class="message">i mean, gcc 4.x ?</span></div><div class="line" id="210534"><span class="nick" style="color:#2e2a4a"><a href="#210534" label="[21:05:34]">&lt;stikonas&gt;</a></span><span class="message">wumpus: yes, gcc 4.x</span></div><div class="line" id="210544"><span class="nick" style="color:#2e2a4a"><a href="#210544" label="[21:05:44]">&lt;stikonas&gt;</a></span><span class="message">wumpus: and tcc can compile it directly just fine</span></div><div class="line" id="210611"><span class="nick" style="color:#2e2a4a"><a href="#210611" label="[21:06:11]">&lt;stikonas&gt;</a></span><span class="message">at least 4.0.4 is known to work</span></div><div class="line" id="211244"><span class="nick" style="color:#2e2a4a"><a href="#211244" label="[21:12:44]">&lt;stikonas&gt;</a></span><span class="message">I've built 4.0.4 directly and with no pregenerated files</span></div><div class="line" id="211321"><span class="nick" style="color:#2e2a4a"><a href="#211321" label="[21:13:21]">&lt;stikonas&gt;</a></span><span class="message">that means not using shipped configure, Makefile.in, config.h files, no bison/flex prebuilt files</span></div><div class="line" id="211424"><span class="nick" style="color:#2e2a4a"><a href="#211424" label="[21:14:24]">&lt;stikonas&gt;</a></span><span class="message">wumpus: that's a rough representation of dependencies <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="211759"><span class="nick" style="color:#d9d9d9"><a href="#211759" label="[21:17:59]">&lt;wumpus&gt;</a></span><span class="message">oh perfect that's very enlightening</span></div><div class="line" id="211857"><span class="nick" style="color:#2e2a4a"><a href="#211857" label="[21:18:57]">&lt;stikonas&gt;</a></span><span class="message">it's slightly out of date though, and was never 100% accurate</span></div><div class="line" id="211942"><span class="nick" style="color:#2e2a4a"><a href="#211942" label="[21:19:42]">&lt;stikonas&gt;</a></span><span class="message">bottom of the graph has much better dependency arrows, but later, once autotools are used, it's probably quite inaccurate</span></div><div class="line" id="212021"><span class="nick" style="color:#d9d9d9"><a href="#212021" label="[21:20:21]">&lt;wumpus&gt;</a></span><span class="message">understandable, it becomes so complex there</span></div><div class="line" id="212130"><span class="nick" style="color:#2e2a4a"><a href="#212130" label="[21:21:30]">&lt;stikonas&gt;</a></span><span class="message">that's dot file <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a> </span></div><div class="line" id="212147"><span class="nick" style="color:#8dd3c7"><a href="#212147" label="[21:21:47]">&lt;bauen1&gt;</a></span><span class="message">stikonas: if you want to improve the autotools part you can take a look at my add-gnu-stow branch that specifies the concrete version of autotools used in every script</span></div><div class="line" id="214123"><span class="nick" style="color:#2e2a4a"><a href="#214123" label="[21:41:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, I probably won't update that graph right now...</span></div><div class="line" id="214135"><span class="nick" style="color:#2e2a4a"><a href="#214135" label="[21:41:35]">&lt;stikonas&gt;</a></span><span class="message">and I'm doing some refactoring at the bottom</span></div><div class="line" id="214906"><span class="nick" style="color:#bc80bd"><a href="#214906" label="[21:49:06]">&lt;Hagfish&gt;</a></span><span class="message">i've not kept track of all the great ideas being implemented right now</span></div><div class="line" id="214929"><span class="nick" style="color:#bc80bd"><a href="#214929" label="[21:49:29]">&lt;Hagfish&gt;</a></span><span class="message">is stow actively being pursued as something like a package/dependency manager?</span></div><div class="line" id="214946"><span class="nick" style="color:#bc80bd"><a href="#214946" label="[21:49:46]">&lt;Hagfish&gt;</a></span><span class="message">and what is the refactoring that's planned for the bottom steps in the graph?</span></div><div class="line" id="215219"><span class="nick" style="color:#8dd3c7"><a href="#215219" label="[21:52:19]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="215249"><span class="nick" style="color:#8dd3c7"><a href="#215249" label="[21:52:49]">&lt;bauen1&gt;</a></span><span class="message">stow is my doing, current work is at <a rel="nofollow" href="https://github.com/bauen1/live-bootstrap/tree/add-gnu-stow">https://github.com/bauen1/live-bootstrap/tree/add-gnu-stow</a> </span></div><div class="line" id="215417"><span class="nick" style="color:#bc80bd"><a href="#215417" label="[21:54:17]">&lt;Hagfish&gt;</a></span><span class="message">cool, thank you</span></div><div class="line" id="215542"><span class="nick" style="color:#8dd3c7"><a href="#215542" label="[21:55:42]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: if you want to test something with stow i can also pr my commits that add stow and chroot to live-bootstrap</span></div><div class="line" id="215849"><span class="nick" style="color:#bc80bd"><a href="#215849" label="[21:58:49]">&lt;Hagfish&gt;</a></span><span class="message">i don't really have an environment for testing things, but i've enjoyed reading the diff</span></div><div class="line" id="215904"><span class="nick" style="color:#bc80bd"><a href="#215904" label="[21:59:04]">&lt;Hagfish&gt;</a></span><span class="message">nice use of the &quot;local&quot; keyword</span></div><div class="line" id="220153"><span class="nick" style="color:#8dd3c7"><a href="#220153" label="[22:01:53]">&lt;bauen1&gt;</a></span><span class="message">oof i messed up rebase and now github thinks i've made all those commits by other people ...</span></div><div class="line" id="220209"><span class="nick" style="color:#8dd3c7"><a href="#220209" label="[22:02:09]">&lt;bauen1&gt;</a></span><span class="message">well i'll be pushing a rebased onto latest master with rootfs.py momentarely</span></div><div class="line" id="220441"><span class="nick" style="color:#bc80bd"><a href="#220441" label="[22:04:41]">&lt;Hagfish&gt;</a></span><span class="message">what is rootfs.py for?</span></div><div class="line" id="220454"><span class="nick" style="color:#8dd3c7"><a href="#220454" label="[22:04:54]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: a replacement for rootfs.sh</span></div><div class="line" id="220537"><span class="nick" style="color:#bc80bd"><a href="#220537" label="[22:05:37]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="220555"><span class="nick" style="color:#bc80bd"><a href="#220555" label="[22:05:55]">&lt;Hagfish&gt;</a></span><span class="message">it actually has some great comments in it too, thank you</span></div><div class="line" id="220618"><span class="nick" style="color:#2e2a4a"><a href="#220618" label="[22:06:18]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: rootfs.py is just because shell is not really ideal language for anything more complicated</span></div><div class="line" id="220629"><span class="nick" style="color:#bc80bd"><a href="#220629" label="[22:06:29]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's fair</span></div><div class="line" id="220636"><span class="nick" style="color:#2e2a4a"><a href="#220636" label="[22:06:36]">&lt;stikonas&gt;</a></span><span class="message">for small scripts it might be very good</span></div><div class="line" id="220639"><span class="nick" style="color:#2e2a4a"><a href="#220639" label="[22:06:39]">&lt;stikonas&gt;</a></span><span class="message">but once things start growing</span></div><div class="line" id="220649"><span class="nick" style="color:#bc80bd"><a href="#220649" label="[22:06:49]">&lt;Hagfish&gt;</a></span><span class="message">what version of python does it need?</span></div><div class="line" id="220653"><span class="nick" style="color:#8dd3c7"><a href="#220653" label="[22:06:53]">&lt;bauen1&gt;</a></span><span class="message">stikonas: so i've reproduced the error, not sure if it's due to wrong user namespace / chroot setup, but `../bin/kaem --verbose --strict -f mescc-tools-full-kaem.kaem` exits with an error (without any additional output) when the env used to enter the chroot is empty</span></div><div class="line" id="220704"><span class="nick" style="color:#bc80bd"><a href="#220704" label="[22:07:04]">&lt;Hagfish&gt;</a></span><span class="message">at least v3, i see</span></div><div class="line" id="220711"><span class="nick" style="color:#2e2a4a"><a href="#220711" label="[22:07:11]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: not sure, I guess any recent 3.x would work</span></div><div class="line" id="220757"><span class="nick" style="color:#2e2a4a"><a href="#220757" label="[22:07:57]">&lt;stikonas&gt;</a></span><span class="message">bauen1: hmm, so that's even in stage0-posix...</span></div><div class="line" id="220804"><span class="nick" style="color:#2e2a4a"><a href="#220804" label="[22:08:04]">&lt;stikonas&gt;</a></span><span class="message">that's really early</span></div><div class="line" id="220924"><span class="nick" style="color:#bc80bd"><a href="#220924" label="[22:09:24]">&lt;Hagfish&gt;</a></span><span class="message">i was mostly wondering in terms of how &quot;self-hosting&quot; the repo is, even if that's not something that's needed in practice</span></div><div class="line" id="220948"><span class="nick" style="color:#2e2a4a"><a href="#220948" label="[22:09:48]">&lt;stikonas&gt;</a></span><span class="message">well, we haven't bootstrapped python yet...</span></div><div class="line" id="221001"><span class="nick" style="color:#2e2a4a"><a href="#221001" label="[22:10:01]">&lt;stikonas&gt;</a></span><span class="message">but in any case live-bootstrap system is not really ready yet</span></div><div class="line" id="221003"><span class="nick" style="color:#bc80bd"><a href="#221003" label="[22:10:03]">&lt;Hagfish&gt;</a></span><span class="message">python looks relatively sane in terms of bootstrapping</span></div><div class="line" id="221013"><span class="nick" style="color:#2e2a4a"><a href="#221013" label="[22:10:13]">&lt;stikonas&gt;</a></span><span class="message">we just reached gcc (C only)</span></div><div class="line" id="221033"><span class="nick" style="color:#2e2a4a"><a href="#221033" label="[22:10:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, python should be almost buildable (might need to build some dependencies like openssl first)</span></div><div class="line" id="221039"><span class="nick" style="color:#bc80bd"><a href="#221039" label="[22:10:39]">&lt;Hagfish&gt;</a></span><span class="message">cool</span></div><div class="line" id="230714"><span class="nick" style="color:#3c5b35"><a href="#230714" label="[23:07:14]">&lt;xentrac&gt;</a></span><span class="message">yaay</span></div><div class="line" id="232311"><span class="nick" style="color:#8dd3c7"><a href="#232311" label="[23:23:11]">&lt;bauen1&gt;</a></span><span class="message">alright, properly rebased now</span></div><div class="line" id="232324"><span class="nick" style="color:#8dd3c7"><a href="#232324" label="[23:23:24]">&lt;bauen1&gt;</a></span><span class="message">let's actually test it then, see you in ~1-2h lol</span></div><br /></div></body></html>