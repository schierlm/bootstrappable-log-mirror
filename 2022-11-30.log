<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-11-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="191841"><span class="nick" style="color:#389600"><a href="#191841" label="[19:18:41]">&lt;rickmasters&gt;</a></span><span class="message">I have another update on stage0-posix and live-bootstrap on the fiwix kernel (x86).</span></div><div class="line" id="191852"><span class="nick" style="color:#389600"><a href="#191852" label="[19:18:52]">&lt;rickmasters&gt;</a></span><span class="message">So far, these are the packages that fiwix can build beyond what builder-hex0 can build:</span></div><div class="line" id="191900"><span class="nick" style="color:#389600"><a href="#191900" label="[19:19:00]">&lt;rickmasters&gt;</a></span><span class="message">gzip, tar, sed, patch, bzip2, tcc-0.9.27, coreutils, heirloom-devtools, bash,</span></div><div class="line" id="191909"><span class="nick" style="color:#389600"><a href="#191909" label="[19:19:09]">&lt;rickmasters&gt;</a></span><span class="message">flex-2.5.11, musl-1.1.24, tcc-0.9.27 (musl pass 1), musl-1.1.24 (using tcc-musl),</span></div><div class="line" id="191917"><span class="nick" style="color:#389600"><a href="#191917" label="[19:19:17]">&lt;rickmasters&gt;</a></span><span class="message">tcc-0.9.27 (musl pass 2), sed-4.0.9 (with musl), bzip2-1.0.8 (with musl), m4-1.4.7, and flex-2.6.4.</span></div><div class="line" id="191926"><span class="nick" style="color:#389600"><a href="#191926" label="[19:19:26]">&lt;rickmasters&gt;</a></span><span class="message">It currently fails on bison-3.4.1 stage1.</span></div><div class="line" id="191939"><span class="nick" style="color:#389600"><a href="#191939" label="[19:19:39]">&lt;rickmasters&gt;</a></span><span class="message">I had to implement these syscalls so far: mmap2, readv, writev, stat64, lstat64, and utimes and I had to fix mmap.</span></div><div class="line" id="191948"><span class="nick" style="color:#389600"><a href="#191948" label="[19:19:48]">&lt;rickmasters&gt;</a></span><span class="message">I had to modify musl to bypass kernel supported thread local storage.</span></div><div class="line" id="192002"><span class="nick" style="color:#389600"><a href="#192002" label="[19:20:02]">&lt;rickmasters&gt;</a></span><span class="message">I have documented all of the system calls invoked by stage0-posix/live-bootstrap,</span></div><div class="line" id="192012"><span class="nick" style="color:#389600"><a href="#192012" label="[19:20:12]">&lt;rickmasters&gt;</a></span><span class="message">by the process that first invokes it here: <a rel="nofollow" href="https://gist.github.com/rick-masters/b915e540ec064060541687bd3ec7eb36">https://gist.github.com/rick-masters/b915e540ec064060541687bd3ec7eb36</a> </span></div><div class="line" id="192024"><span class="nick" style="color:#389600"><a href="#192024" label="[19:20:24]">&lt;rickmasters&gt;</a></span><span class="message">It typically takes many hours to track down and resolve each build failure, which is exhausting work.</span></div><div class="line" id="192033"><span class="nick" style="color:#389600"><a href="#192033" label="[19:20:33]">&lt;rickmasters&gt;</a></span><span class="message">Getting to a booted linux is still far away.</span></div><div class="line" id="192041"><span class="nick" style="color:#389600"><a href="#192041" label="[19:20:41]">&lt;rickmasters&gt;</a></span><span class="message">And I still need to build and boot fiwix inside live-bootstrap which will also be a lot of work.</span></div><div class="line" id="192048"><span class="nick" style="color:#389600"><a href="#192048" label="[19:20:48]">&lt;rickmasters&gt;</a></span><span class="message">But I'm still chipping away and will continue to provide regular updates here.</span></div><div class="line" id="201304"><span class="nick" style="color:#8dd3c7"><a href="#201304" label="[20:13:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed, looks like a lit of work but slowly moving...</span></div><div class="line" id="201336"><span class="nick" style="color:#8dd3c7"><a href="#201336" label="[20:13:36]">&lt;stikonas[m]&gt;</a></span><span class="message">I was hoping that the number of new syscalls used will start to decrease</span></div><div class="line" id="201509"><span class="nick" style="color:#8dd3c7"><a href="#201509" label="[20:15:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it possibly will... After bison there is perl that might still be using something, but then a lot of packages are autotools which I hope are lighter on new syscalls</span></div><div class="line" id="201657"><span class="nick" style="color:#8dd3c7"><a href="#201657" label="[20:16:57]">&lt;stikonas[m]&gt;</a></span><span class="message">I'm slowly working on adding (u)int*_t types to M2-Planet. A bit more work than I initially hoped but should be doable</span></div><div class="line" id="201722"><span class="nick" style="color:#8dd3c7"><a href="#201722" label="[20:17:22]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, for now I'm focussing on just amd64, will do other arches later</span></div><div class="line" id="205348"><span class="nick" style="color:#389600"><a href="#205348" label="[20:53:48]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I haven't been tracking. What was the reason for enhancing M2-Planet? Will it help with UEFI?</span></div><div class="line" id="205618"><span class="nick" style="color:#2e2a4a"><a href="#205618" label="[20:56:18]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, it will help with UEFI structs</span></div><div class="line" id="205653"><span class="nick" style="color:#2e2a4a"><a href="#205653" label="[20:56:53]">&lt;stikonas&gt;</a></span><span class="message">some of the UEFI structs have narrower elements, i.e. uint16_t or uint32_t which is a bit hard to access from M2-Planet</span></div><div class="line" id="205819"><span class="nick" style="color:#2e2a4a"><a href="#205819" label="[20:58:19]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: e.g. this struct <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/efi/device_path_protocol.h#L9">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/efi/device_path_protocol.h#L9</a> </span></div><div class="line" id="205858"><span class="nick" style="color:#389600"><a href="#205858" label="[20:58:58]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: sounds good. M2-Planet enhancements might also make is easier to implement other compilers down the road</span></div><div class="line" id="205908"><span class="nick" style="color:#2e2a4a"><a href="#205908" label="[20:59:08]">&lt;stikonas&gt;</a></span><span class="message">right now in M2-Planet I would have to do something like char length_1, char length_2</span></div><div class="line" id="205921"><span class="nick" style="color:#2e2a4a"><a href="#205921" label="[20:59:21]">&lt;stikonas&gt;</a></span><span class="message">yes, I've already added support for global structs and structs on the stack</span></div><div class="line" id="205931"><span class="nick" style="color:#2e2a4a"><a href="#205931" label="[20:59:31]">&lt;stikonas&gt;</a></span><span class="message">before that only struct pointers were supported</span></div><div class="line" id="205952"><span class="nick" style="color:#2e2a4a"><a href="#205952" label="[20:59:52]">&lt;stikonas&gt;</a></span><span class="message">but that was not sufficient to implement smarter malloc</span></div><div class="line" id="205953"><span class="nick" style="color:#389600"><a href="#205953" label="[20:59:53]">&lt;rickmasters&gt;</a></span><span class="message">nice</span></div><div class="line" id="210110"><span class="nick" style="color:#2e2a4a"><a href="#210110" label="[21:01:10]">&lt;stikonas&gt;</a></span><span class="message">struct pointers are mostly fine in general but they depend on having malloc</span></div><div class="line" id="210402"><span class="nick" style="color:#6b8072"><a href="#210402" label="[21:04:02]">&lt;muurkha&gt;</a></span><span class="message">why?</span></div><div class="line" id="210435"><span class="nick" style="color:#6b8072"><a href="#210435" label="[21:04:35]">&lt;muurkha&gt;</a></span><span class="message">struct n { .val = 3 } a; struct n { .val = 4, .next = &amp;a } b;</span></div><div class="line" id="210500"><span class="nick" style="color:#6b8072"><a href="#210500" label="[21:05:00]">&lt;muurkha&gt;</a></span><span class="message">f(&amp;m);</span></div><div class="line" id="210504"><span class="nick" style="color:#6b8072"><a href="#210504" label="[21:05:04]">&lt;muurkha&gt;</a></span><span class="message">oops</span></div><div class="line" id="210507"><span class="nick" style="color:#6b8072"><a href="#210507" label="[21:05:07]">&lt;muurkha&gt;</a></span><span class="message">I mean f(&amp;b);</span></div><div class="line" id="210535"><span class="nick" style="color:#6b8072"><a href="#210535" label="[21:05:35]">&lt;muurkha&gt;</a></span><span class="message">rickmasters: that's great!</span></div><div class="line" id="215304"><span class="nick" style="color:#2e2a4a"><a href="#215304" label="[21:53:04]">&lt;stikonas&gt;</a></span><span class="message">muurkha: that definitely wouldn't compile in M2-Planet</span></div><div class="line" id="215344"><span class="nick" style="color:#2e2a4a"><a href="#215344" label="[21:53:44]">&lt;stikonas&gt;</a></span><span class="message">before those changes, you could only use struct n*; n = calloc(1, sizeof(struct n));</span></div><div class="line" id="215915"><span class="nick" style="color:#6b8072"><a href="#215915" label="[21:59:15]">&lt;muurkha&gt;</a></span><span class="message">that doesn't look like parseable C</span></div><div class="line" id="215930"><span class="nick" style="color:#6b8072"><a href="#215930" label="[21:59:30]">&lt;muurkha&gt;</a></span><span class="message">when can you say &quot;struct n*;&quot;?</span></div><div class="line" id="220036"><span class="nick" style="color:#6b8072"><a href="#220036" label="[22:00:36]">&lt;muurkha&gt;</a></span><span class="message">maybe you mean &quot;struct s *n;&quot;?</span></div><div class="line" id="220100"><span class="nick" style="color:#6b8072"><a href="#220100" label="[22:01:00]">&lt;muurkha&gt;</a></span><span class="message">I misunderstood what you were saying about struct pointers</span></div><div class="line" id="220139"><span class="nick" style="color:#2e2a4a"><a href="#220139" label="[22:01:39]">&lt;stikonas&gt;</a></span><span class="message">oh yes, should be *n</span></div><div class="line" id="220142"><span class="nick" style="color:#2e2a4a"><a href="#220142" label="[22:01:42]">&lt;stikonas&gt;</a></span><span class="message">of course not n*</span></div><div class="line" id="220146"><span class="nick" style="color:#6b8072"><a href="#220146" label="[22:01:46]">&lt;muurkha&gt;</a></span><span class="message">I guess you mean that before global structs and structs on the stack, struct pointers depended on having malloc?</span></div><div class="line" id="220159"><span class="nick" style="color:#2e2a4a"><a href="#220159" label="[22:01:59]">&lt;stikonas&gt;</a></span><span class="message">well, any use of structs</span></div><div class="line" id="220205"><span class="nick" style="color:#6b8072"><a href="#220205" label="[22:02:05]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="220211"><span class="nick" style="color:#2e2a4a"><a href="#220211" label="[22:02:11]">&lt;stikonas&gt;</a></span><span class="message">there was no other way to use structs in M2</span></div><div class="line" id="220226"><span class="nick" style="color:#6b8072"><a href="#220226" label="[22:02:26]">&lt;muurkha&gt;</a></span><span class="message">right, sorry I misunderstood</span></div><div class="line" id="220233"><span class="nick" style="color:#2e2a4a"><a href="#220233" label="[22:02:33]">&lt;stikonas&gt;</a></span><span class="message">no problem, I was also a bit unclear</span></div><div class="line" id="220329"><span class="nick" style="color:#2e2a4a"><a href="#220329" label="[22:03:29]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet itself of course still can only use struct pointers only that are calloc'ed</span></div><div class="line" id="220338"><span class="nick" style="color:#2e2a4a"><a href="#220338" label="[22:03:38]">&lt;stikonas&gt;</a></span><span class="message">as it has to be compilable with cc_*</span></div><div class="line" id="220400"><span class="nick" style="color:#2e2a4a"><a href="#220400" label="[22:04:00]">&lt;stikonas&gt;</a></span><span class="message">but non-bootstrap M2libc can use lots of extra features</span></div><div class="line" id="235227"><span class="nick" style="color:#80b1d3"><a href="#235227" label="[23:52:27]">&lt;theruran&gt;</a></span><span class="message">is there a citeable paper or book for the Knight machine?</span></div><div class="line" id="004213"><span class="nick" style="color:#2e2a4a"><a href="#004213" label="[00:42:13]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ^</span></div><div class="line" id="004236"><span class="nick" style="color:#2e2a4a"><a href="#004236" label="[00:42:36]">&lt;stikonas&gt;</a></span><span class="message">I haven't seen anything online at all (except for stage0 repository)</span></div><div class="line" id="011440"><span class="nick" style="color:#2e2a4a"><a href="#011440" label="[01:14:40]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I've got uint*_t overflow to work correctly, which is probably sufficient for these fixed types</span></div><div class="line" id="011507"><span class="nick" style="color:#2e2a4a"><a href="#011507" label="[01:15:07]">&lt;stikonas&gt;</a></span><span class="message">haven't tested int*_t overflow but that's undefined behaviour in C standard anyway</span></div><div class="line" id="012329"><span class="nick" style="color:#6d2462"><a href="#012329" label="[01:23:29]">&lt;oriansj&gt;</a></span><span class="message">theruran: I don't think old magazine ads count as a citeable paper or book.</span></div><div class="line" id="013222"><span class="nick" style="color:#80b1d3"><a href="#013222" label="[01:32:22]">&lt;theruran&gt;</a></span><span class="message">oriansj: I see. It's Thomas Knight of Symbolics and MIT CSAIL?</span></div><div class="line" id="013647"><span class="nick" style="color:#6d2462"><a href="#013647" label="[01:36:47]">&lt;oriansj&gt;</a></span><span class="message">theruran: nope; that is a different Knight machine</span></div><div class="line" id="013921"><span class="nick" style="color:#80b1d3"><a href="#013921" label="[01:39:21]">&lt;theruran&gt;</a></span><span class="message">got it!..</span></div><div class="line" id="014028"><span class="nick" style="color:#2e2a4a"><a href="#014028" label="[01:40:28]">&lt;stikonas&gt;</a></span><span class="message">I'm afraid my (u)int*_t change will be rather big one, and I don't think I'll be able to split it into individual commits</span></div><div class="line" id="014040"><span class="nick" style="color:#6d2462"><a href="#014040" label="[01:40:40]">&lt;oriansj&gt;</a></span><span class="message">I believe that one's proper name was CONS and its followup was CADR</span></div><div class="line" id="014100"><span class="nick" style="color:#6d2462"><a href="#014100" label="[01:41:00]">&lt;oriansj&gt;</a></span><span class="message">stikonas: unavoidable; I understand</span></div><div class="line" id="014122"><span class="nick" style="color:#2e2a4a"><a href="#014122" label="[01:41:22]">&lt;stikonas&gt;</a></span><span class="message">but it should at least refactor 5 or 6 calls blocks LOAD_INTEGER into a single function</span></div><div class="line" id="014140"><span class="nick" style="color:#2e2a4a"><a href="#014140" label="[01:41:40]">&lt;stikonas&gt;</a></span><span class="message">(that can deal with various cases of signed/unsigned, zero extend or not...)</span></div><div class="line" id="014341"><span class="nick" style="color:#2e2a4a"><a href="#014341" label="[01:43:41]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think I've got x86 and amd64 working now. Except for compound operators case, i.e. += as it uses LOAD_INTEGER_ebx/mov_rbx,[rbx] instead of LOAD_INTEGER/mov_rax,[rax]</span></div><div class="line" id="014349"><span class="nick" style="color:#2e2a4a"><a href="#014349" label="[01:43:49]">&lt;stikonas&gt;</a></span><span class="message">need to think how to deal with it...</span></div><div class="line" id="014448"><span class="nick" style="color:#2e2a4a"><a href="#014448" label="[01:44:48]">&lt;stikonas&gt;</a></span><span class="message">maybe I'll just duplicate load_value function into load_value_2</span></div><div class="line" id="014509"><span class="nick" style="color:#2e2a4a"><a href="#014509" label="[01:45:09]">&lt;stikonas&gt;</a></span><span class="message">and need to deal with other arches (riscv/arms/knights)</span></div><div class="line" id="014529"><span class="nick" style="color:#2e2a4a"><a href="#014529" label="[01:45:29]">&lt;stikonas&gt;</a></span><span class="message">but should be easier now that I have some working arch and working test</span></div><div class="line" id="014638"><span class="nick" style="color:#2e2a4a"><a href="#014638" label="[01:46:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: would you be ok, if new defines that I need for x86 will be &quot;new-style&quot;</span></div><div class="line" id="014644"><span class="nick" style="color:#2e2a4a"><a href="#014644" label="[01:46:44]">&lt;stikonas&gt;</a></span><span class="message">i.e. like in amd64</span></div><div class="line" id="014658"><span class="nick" style="color:#2e2a4a"><a href="#014658" label="[01:46:58]">&lt;stikonas&gt;</a></span><span class="message">probably need to convert everything to those at some point</span></div><div class="line" id="014710"><span class="nick" style="color:#2e2a4a"><a href="#014710" label="[01:47:10]">&lt;stikonas&gt;</a></span><span class="message">so I don't want to add extra work for later</span></div><div class="line" id="014806"><span class="nick" style="color:#6d2462"><a href="#014806" label="[01:48:06]">&lt;oriansj&gt;</a></span><span class="message">stikonas: could you update the x86 defines and then do your change?</span></div><div class="line" id="014843"><span class="nick" style="color:#2e2a4a"><a href="#014843" label="[01:48:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, possibly, though I'll have to rebase mu changes</span></div><div class="line" id="014907"><span class="nick" style="color:#2e2a4a"><a href="#014907" label="[01:49:07]">&lt;stikonas&gt;</a></span><span class="message">which should be doable...</span></div><div class="line" id="014927"><span class="nick" style="color:#2e2a4a"><a href="#014927" label="[01:49:27]">&lt;stikonas&gt;</a></span><span class="message">although, it would be easier to do it in the other order...</span></div><div class="line" id="015039"><span class="nick" style="color:#2e2a4a"><a href="#015039" label="[01:50:39]">&lt;stikonas&gt;</a></span><span class="message">well, I'll try to rebase, it would be cleaner than having mixed defines in some commit...</span></div><div class="line" id="015538"><span class="nick" style="color:#6d2462"><a href="#015538" label="[01:55:38]">&lt;oriansj&gt;</a></span><span class="message">utlimately do what you think is best and we can work around it worst case</span></div><div class="line" id="020132"><span class="nick" style="color:#6d2462"><a href="#020132" label="[02:01:32]">&lt;oriansj&gt;</a></span><span class="message">but I do like your new defines</span></div><div class="line" id="024531"><span class="nick" style="color:#6b8072"><a href="#024531" label="[02:45:31]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="173908"><span class="nick" style="color:#389600"><a href="#173908" label="[17:39:08]">&lt;rickmasters&gt;</a></span><span class="message">Hooray! I was able to get through bison by changing musl's posix_spawn to use fork instead of clone.</span></div><div class="line" id="181116"><span class="nick" style="color:#8dd3c7"><a href="#181116" label="[18:11:16]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, that's nice. Next is perl?</span></div><div class="line" id="181739"><span class="nick" style="color:#8dd3c7"><a href="#181739" label="[18:17:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Are we going to get live-bootstrap for this?</span></div><div class="line" id="192816"><span class="nick" style="color:#389600"><a href="#192816" label="[19:28:16]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm working on coreutils-6.10. The rm command uses getdents64 which fiwix does not have yet.</span></div><div class="line" id="214247"><span class="nick" style="color:#8dd3c7"><a href="#214247" label="[21:42:47]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: I thought we don't build rm command there...</span></div><div class="line" id="214412"><span class="nick" style="color:#8dd3c7"><a href="#214412" label="[21:44:12]">&lt;stikonas[m]&gt;</a></span><span class="message">only date sha256sum and mktemp</span></div><div class="line" id="214427"><span class="nick" style="color:#8dd3c7"><a href="#214427" label="[21:44:27]">&lt;stikonas[m]&gt;</a></span><span class="message">though I now noticed that makefile is unnecesserily complicated</span></div><div class="line" id="214443"><span class="nick" style="color:#8dd3c7"><a href="#214443" label="[21:44:43]">&lt;stikonas[m]&gt;</a></span><span class="message">somehow these 3 binaries are split in two lists...</span></div><div class="line" id="214454"><span class="nick" style="color:#389600"><a href="#214454" label="[21:44:54]">&lt;rickmasters&gt;</a></span><span class="message">sitkonas: yeah, I noticed that as well, but it also installs tmp/usr/bin, so I assumed it was in there, but let me check.</span></div><div class="line" id="214549"><span class="nick" style="color:#8dd3c7"><a href="#214549" label="[21:45:49]">&lt;stikonas[m]&gt;</a></span><span class="message">let me check, I might have some older packages</span></div><div class="line" id="214551"><span class="nick" style="color:#8dd3c7"><a href="#214551" label="[21:45:51]">&lt;stikonas[m]&gt;</a></span><span class="message">not from the latest checkout, but should do</span></div><div class="line" id="214629"><span class="nick" style="color:#8dd3c7"><a href="#214629" label="[21:46:29]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1262556/">https://paste.debian.net/1262556/</a> </span></div><div class="line" id="214638"><span class="nick" style="color:#389600"><a href="#214638" label="[21:46:38]">&lt;rickmasters&gt;</a></span><span class="message">actually, it may have been the rm from coreutils-5.0 with musl</span></div><div class="line" id="214645"><span class="nick" style="color:#8dd3c7"><a href="#214645" label="[21:46:45]">&lt;stikonas[m]&gt;</a></span><span class="message">oh, possibly</span></div><div class="line" id="214704"><span class="nick" style="color:#8dd3c7"><a href="#214704" label="[21:47:04]">&lt;stikonas[m]&gt;</a></span><span class="message">some of the stuff you might be able to fix by tweaking define flags</span></div><div class="line" id="214731"><span class="nick" style="color:#8dd3c7"><a href="#214731" label="[21:47:31]">&lt;stikonas[m]&gt;</a></span><span class="message">I'm fine with reducing functionality of those binaries if it's still enough for bootstrapping</span></div><div class="line" id="214748"><span class="nick" style="color:#8dd3c7"><a href="#214748" label="[21:47:48]">&lt;stikonas[m]&gt;</a></span><span class="message">we later rebuild coretutils 8.32 or so on Linux</span></div><div class="line" id="214748"><span class="nick" style="color:#389600"><a href="#214748" label="[21:47:48]">&lt;rickmasters&gt;</a></span><span class="message">that was right before coreutils-6.10. note its not the building of rm, its the running in coreutils-6.10 as part of cleanup I think</span></div><div class="line" id="214803"><span class="nick" style="color:#8dd3c7"><a href="#214803" label="[21:48:03]">&lt;stikonas[m]&gt;</a></span><span class="message">yeah, so it's the earlier one</span></div><div class="line" id="214816"><span class="nick" style="color:#8dd3c7"><a href="#214816" label="[21:48:16]">&lt;stikonas[m]&gt;</a></span><span class="message">must be from musl version of coreutils 5</span></div><div class="line" id="214940"><span class="nick" style="color:#389600"><a href="#214940" label="[21:49:40]">&lt;rickmasters&gt;</a></span><span class="message">yes</span></div><div class="line" id="215050"><span class="nick" style="color:#389600"><a href="#215050" label="[21:50:50]">&lt;rickmasters&gt;</a></span><span class="message">i set that aside for a bit, i'm making sure my changes musl work under linux.</span></div><div class="line" id="215109"><span class="nick" style="color:#389600"><a href="#215109" label="[21:51:09]">&lt;rickmasters&gt;</a></span><span class="message">musl changes i mean</span></div><div class="line" id="215231"><span class="nick" style="color:#389600"><a href="#215231" label="[21:52:31]">&lt;rickmasters&gt;</a></span><span class="message">But i've been tracking down something strange - it fails on a checksum error of the musl package</span></div><div class="line" id="215319"><span class="nick" style="color:#389600"><a href="#215319" label="[21:53:19]">&lt;rickmasters&gt;</a></span><span class="message">which makes sense because I changed it, but i thought i disabled the checksum check and it bypassed it the first time it built musl but not the second time</span></div><div class="line" id="215332"><span class="nick" style="color:#2e2a4a"><a href="#215332" label="[21:53:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, that is strange...</span></div><div class="line" id="215416"><span class="nick" style="color:#2e2a4a"><a href="#215416" label="[21:54:16]">&lt;stikonas&gt;</a></span><span class="message">and musl comes after bash, so both builds should use the same functions from helpers.sh</span></div><div class="line" id="215444"><span class="nick" style="color:#389600"><a href="#215444" label="[21:54:44]">&lt;rickmasters&gt;</a></span><span class="message">yeah, it looks like src_get is working differently for some reason. i'm trying to track it down</span></div><div class="line" id="215822"><span class="nick" style="color:#389600"><a href="#215822" label="[21:58:22]">&lt;rickmasters&gt;</a></span><span class="message">actually, I wonder if my musl change is the cause...</span></div><div class="line" id="225515"><span class="nick" style="color:#389600"><a href="#225515" label="[22:55:15]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, i think I figured out that our early version of sha256sum does not work with standard input</span></div><div class="line" id="225531"><span class="nick" style="color:#2e2a4a"><a href="#225531" label="[22:55:31]">&lt;stikonas&gt;</a></span><span class="message">oh yes, that is indeed true</span></div><div class="line" id="225538"><span class="nick" style="color:#389600"><a href="#225538" label="[22:55:38]">&lt;rickmasters&gt;</a></span><span class="message">once the one from coreutils is built, it starts working as expected</span></div><div class="line" id="225600"><span class="nick" style="color:#2e2a4a"><a href="#225600" label="[22:56:00]">&lt;stikonas&gt;</a></span><span class="message">M2libc stuff deliberately avoids stuff like pipes</span></div><div class="line" id="225659"><span class="nick" style="color:#389600"><a href="#225659" label="[22:56:59]">&lt;rickmasters&gt;</a></span><span class="message">so the interpret_source_line function echos the checksums to sha256sum but should echo to a file and then use sha256sum -c $file</span></div><div class="line" id="225751"><span class="nick" style="color:#2e2a4a"><a href="#225751" label="[22:57:51]">&lt;stikonas&gt;</a></span><span class="message">oh that is that new stuff by fossy</span></div><div class="line" id="225804"><span class="nick" style="color:#2e2a4a"><a href="#225804" label="[22:58:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, sounds like a recent regression then</span></div><div class="line" id="225954"><span class="nick" style="color:#389600"><a href="#225954" label="[22:59:54]">&lt;rickmasters&gt;</a></span><span class="message">I can provide a PR but it might not be today</span></div><div class="line" id="230244"><span class="nick" style="color:#2e2a4a"><a href="#230244" label="[23:02:44]">&lt;stikonas&gt;</a></span><span class="message">well, no rush</span></div><div class="line" id="230303"><span class="nick" style="color:#2e2a4a"><a href="#230303" label="[23:03:03]">&lt;stikonas&gt;</a></span><span class="message">you are already making quite fast progress</span></div><div class="line" id="230314"><span class="nick" style="color:#2e2a4a"><a href="#230314" label="[23:03:14]">&lt;stikonas&gt;</a></span><span class="message">I'm much slower with stage0-uefi...</span></div><div class="line" id="230726"><span class="nick" style="color:#389600"><a href="#230726" label="[23:07:26]">&lt;rickmasters&gt;</a></span><span class="message">thanks, but it doesn't feel that fast when I spend 5 hours figuring out 3 lines of code.</span></div><div class="line" id="230925"><span class="nick" style="color:#389600"><a href="#230925" label="[23:09:25]">&lt;rickmasters&gt;</a></span><span class="message">Most of the syscalls I've implemented are just extended versions, like fstat64, which is just a copy and paste of fstat and changing a few types</span></div><div class="line" id="231148"><span class="nick" style="color:#389600"><a href="#231148" label="[23:11:48]">&lt;rickmasters&gt;</a></span><span class="message">I have learned some interesting stuff in the dark corners of musl.</span></div><div class="line" id="231307"><span class="nick" style="color:#389600"><a href="#231307" label="[23:13:07]">&lt;rickmasters&gt;</a></span><span class="message">I could probably implement set_thread_area after learning how it works but I'm hoping it won't be needed. I've worked around it for now.</span></div><div class="line" id="232346"><span class="nick" style="color:#389600"><a href="#232346" label="[23:23:46]">&lt;rickmasters&gt;</a></span><span class="message">i should clarify the 5 hours was figuring out that bison crashed because it tried to spawn and interact with m4 but musl was using clone to launch m4 which was not implemented.</span></div><div class="line" id="232508"><span class="nick" style="color:#389600"><a href="#232508" label="[23:25:08]">&lt;rickmasters&gt;</a></span><span class="message">And the 3 lines of code was commenting out clone and replacing with fork(); if (pid == 0) _exit(child(&amp;args));</span></div><div class="line" id="000049"><span class="nick" style="color:#2e2a4a"><a href="#000049" label="[00:00:49]">&lt;stikonas&gt;</a></span><span class="message">well, I'm also doing various other cleanups... I.e. should do that x86 define rename</span></div><div class="line" id="000056"><span class="nick" style="color:#2e2a4a"><a href="#000056" label="[00:00:56]">&lt;stikonas&gt;</a></span><span class="message">so that it's closer to GAS...</span></div><div class="line" id="001645"><span class="nick" style="color:#389600"><a href="#001645" label="[00:16:45]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: those new efines are really needed so thank you. I really struggled with those. I eventually found ways to disassemble the hex, otherwise I was lost.</span></div><div class="line" id="001727"><span class="nick" style="color:#2e2a4a"><a href="#001727" label="[00:17:27]">&lt;stikonas&gt;</a></span><span class="message">well, amd64 was done already</span></div><div class="line" id="001734"><span class="nick" style="color:#2e2a4a"><a href="#001734" label="[00:17:34]">&lt;stikonas&gt;</a></span><span class="message">at least from cc_amd64 and higher</span></div><div class="line" id="001747"><span class="nick" style="color:#2e2a4a"><a href="#001747" label="[00:17:47]">&lt;stikonas&gt;</a></span><span class="message">I don't think I've done converting earlier prototypes...</span></div><div class="line" id="001802"><span class="nick" style="color:#2e2a4a"><a href="#001802" label="[00:18:02]">&lt;stikonas&gt;</a></span><span class="message">but yes, now just started doing it for x86</span></div><div class="line" id="001919"><span class="nick" style="color:#389600"><a href="#001919" label="[00:19:19]">&lt;rickmasters&gt;</a></span><span class="message">When I struggled, I was too new to the project to take that on and wasn't sure it would be well received so I'm really happy to see that change.</span></div><div class="line" id="015156"><span class="nick" style="color:#6d2462"><a href="#015156" label="[01:51:56]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: we are just glad you joined us and we love seeing your progress; it is quite educational</span></div><div class="line" id="015312"><span class="nick" style="color:#389600"><a href="#015312" label="[01:53:12]">&lt;rickmasters&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="021115"><span class="nick" style="color:#6b8072"><a href="#021115" label="[02:11:15]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's really inspiring!</span></div><div class="line" id="021427"><span class="nick" style="color:#6d2462"><a href="#021427" label="[02:14:27]">&lt;oriansj&gt;</a></span><span class="message">and honestly is looking to save me 20 of work figuring out how to make a working kernel and getting to anywere close to what you have achieved.</span></div><div class="line" id="021528"><span class="nick" style="color:#389600"><a href="#021528" label="[02:15:28]">&lt;rickmasters&gt;</a></span><span class="message">muurkha: thank you, I'm glad I found a good project I could help with. There has been so much done already that inspires me.</span></div><div class="line" id="021722"><span class="nick" style="color:#6d2462"><a href="#021722" label="[02:17:22]">&lt;oriansj&gt;</a></span><span class="message">call it mutual inspiration and encouragement</span></div><div class="line" id="021924"><span class="nick" style="color:#6b8072"><a href="#021924" label="[02:19:24]">&lt;muurkha&gt;</a></span><span class="message">well, in my case, I think I'm receiving an awful lot more inspiration than I'm providing</span></div><div class="line" id="021939"><span class="nick" style="color:#6b8072"><a href="#021939" label="[02:19:39]">&lt;muurkha&gt;</a></span><span class="message">haven't done much in recent years :(</span></div><div class="line" id="022123"><span class="nick" style="color:#389600"><a href="#022123" label="[02:21:23]">&lt;rickmasters&gt;</a></span><span class="message">muurkha: just having folks provide encouragement and comments helps more than you think.</span></div><div class="line" id="022130"><span class="nick" style="color:#6b8072"><a href="#022130" label="[02:21:30]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="022149"><span class="nick" style="color:#6d2462"><a href="#022149" label="[02:21:49]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you did a bunch of cheering from the sidelines and sometimes that is what people really need sometimes</span></div><div class="line" id="022207"><span class="nick" style="color:#6b8072"><a href="#022207" label="[02:22:07]">&lt;muurkha&gt;</a></span><span class="message">ACTION waves his pompoms</span></div><div class="line" id="022425"><span class="nick" style="color:#389600"><a href="#022425" label="[02:24:25]">&lt;rickmasters&gt;</a></span><span class="message">A lot of this work is pretty tedious/difficult and so it helps to come here and report some progress and hear some positive feedback</span></div><div class="line" id="022537"><span class="nick" style="color:#6b8072"><a href="#022537" label="[02:25:37]">&lt;muurkha&gt;</a></span><span class="message">I know the tedium of spending all night tracking down a bug!</span></div><div class="line" id="022603"><span class="nick" style="color:#6d2462"><a href="#022603" label="[02:26:03]">&lt;oriansj&gt;</a></span><span class="message">plus people here who enjoy talking about this stuff is very much a good thinkg</span></div><div class="line" id="022646"><span class="nick" style="color:#6d2462"><a href="#022646" label="[02:26:46]">&lt;oriansj&gt;</a></span><span class="message">I consider everyone here one of my friends</span></div><div class="line" id="022743"><span class="nick" style="color:#6d2462"><a href="#022743" label="[02:27:43]">&lt;oriansj&gt;</a></span><span class="message">good people, good conversationa and good fun tackling good hard problems.</span></div><div class="line" id="022753"><span class="nick" style="color:#389600"><a href="#022753" label="[02:27:53]">&lt;rickmasters&gt;</a></span><span class="message">Yes</span></div><div class="line" id="022958"><span class="nick" style="color:#6d2462"><a href="#022958" label="[02:29:58]">&lt;oriansj&gt;</a></span><span class="message">so to the people quietly following, don't be afraid to ask questions; share ideas or just geek out a bit. You are among friends here.</span></div><div class="line" id="023221"><span class="nick" style="color:#389600"><a href="#023221" label="[02:32:21]">&lt;rickmasters&gt;</a></span><span class="message">Sadly, I'm going to have to check out for the night. Talk to you all later. Hopefully I can get past some more packages tomorrow on Fiwix. 'night</span></div><div class="line" id="203932"><span class="nick" style="color:#2e2a4a"><a href="#203932" label="[20:39:32]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've prepared the change to switch to new defines, though I had to undo that broken UEFI define stuff...</span></div><div class="line" id="203958"><span class="nick" style="color:#2e2a4a"><a href="#203958" label="[20:39:58]">&lt;stikonas&gt;</a></span><span class="message">well, for now just M2-Planet and M2libc</span></div><div class="line" id="204004"><span class="nick" style="color:#2e2a4a"><a href="#204004" label="[20:40:04]">&lt;stikonas&gt;</a></span><span class="message">will still need to update cc_x86</span></div><div class="line" id="205604"><span class="nick" style="color:#2e2a4a"><a href="#205604" label="[20:56:04]">&lt;stikonas&gt;</a></span><span class="message">argh, there seems to be an issue with test0105 once I rebased...</span></div><div class="line" id="205638"><span class="nick" style="color:#2e2a4a"><a href="#205638" label="[20:56:38]">&lt;stikonas&gt;</a></span><span class="message">possibly introduced in during work...</span></div><div class="line" id="205643"><span class="nick" style="color:#2e2a4a"><a href="#205643" label="[20:56:43]">&lt;stikonas&gt;</a></span><span class="message">during work on malloc</span></div><div class="line" id="205937"><span class="nick" style="color:#2e2a4a"><a href="#205937" label="[20:59:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, it's actually introduced in new defines  rework... Oh well, at least should be easier to fix</span></div><div class="line" id="210603"><span class="nick" style="color:#2e2a4a"><a href="#210603" label="[21:06:03]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed, missed one DEFINE and it was evaluating into nothing</span></div><div class="line" id="210656"><span class="nick" style="color:#6d2462"><a href="#210656" label="[21:06:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you for improving the defines ^_^</span></div><div class="line" id="210719"><span class="nick" style="color:#2e2a4a"><a href="#210719" label="[21:07:19]">&lt;stikonas&gt;</a></span><span class="message">will prepare PR soon</span></div><div class="line" id="210723"><span class="nick" style="color:#2e2a4a"><a href="#210723" label="[21:07:23]">&lt;stikonas&gt;</a></span><span class="message">just checkin some last things</span></div><div class="line" id="210813"><span class="nick" style="color:#2e2a4a"><a href="#210813" label="[21:08:13]">&lt;stikonas&gt;</a></span><span class="message">I think there was some issue with signed unsigned multiplication/division</span></div><div class="line" id="210823"><span class="nick" style="color:#2e2a4a"><a href="#210823" label="[21:08:23]">&lt;stikonas&gt;</a></span><span class="message">somehow they were swapped</span></div><div class="line" id="210836"><span class="nick" style="color:#2e2a4a"><a href="#210836" label="[21:08:36]">&lt;stikonas&gt;</a></span><span class="message">MULTIPLYS was div and MULTIPLY was idiv</span></div><div class="line" id="210843"><span class="nick" style="color:#2e2a4a"><a href="#210843" label="[21:08:43]">&lt;stikonas&gt;</a></span><span class="message">but somehow this didn't cause any bugs</span></div><div class="line" id="211149"><span class="nick" style="color:#2e2a4a"><a href="#211149" label="[21:11:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/25">https://github.com/oriansj/M2libc/pull/25</a> </span></div><div class="line" id="220329"><span class="nick" style="color:#6d2462"><a href="#220329" label="[22:03:29]">&lt;oriansj&gt;</a></span><span class="message">stikonas: how did that get flipped again??</span></div><div class="line" id="220417"><span class="nick" style="color:#6d2462"><a href="#220417" label="[22:04:17]">&lt;oriansj&gt;</a></span><span class="message">x86 has the worst multiplication and division instructions</span></div><div class="line" id="221334"><span class="nick" style="color:#2e2a4a"><a href="#221334" label="[22:13:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, other arches seem to be better...</span></div><div class="line" id="221410"><span class="nick" style="color:#2e2a4a"><a href="#221410" label="[22:14:10]">&lt;stikonas&gt;</a></span><span class="message">anyway, once you merge M2libc changes, I'll do M2-Planet PR, you can't really test M2libc standalone</span></div><div class="line" id="221430"><span class="nick" style="color:#2e2a4a"><a href="#221430" label="[22:14:30]">&lt;stikonas&gt;</a></span><span class="message">and then I need to adjust stage-posix-x86 which I haven't done yet</span></div><div class="line" id="224408"><span class="nick" style="color:#6d2462"><a href="#224408" label="[22:44:08]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="225152"><span class="nick" style="color:#2e2a4a"><a href="#225152" label="[22:51:52]">&lt;stikonas&gt;</a></span><span class="message">ok, M2-Planet change <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/46">https://github.com/oriansj/M2-Planet/pull/46</a> </span></div><div class="line" id="225417"><span class="nick" style="color:#2e2a4a"><a href="#225417" label="[22:54:17]">&lt;stikonas&gt;</a></span><span class="message">oh, and I have one older PR <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/45/files">https://github.com/oriansj/M2-Planet/pull/45/files</a> </span></div><div class="line" id="225417"><span class="nick" style="color:#6d2462"><a href="#225417" label="[22:54:17]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="225557"><span class="nick" style="color:#2e2a4a"><a href="#225557" label="[22:55:57]">&lt;stikonas&gt;</a></span><span class="message">oh wait, the other probably needs rebase now</span></div><div class="line" id="225602"><span class="nick" style="color:#2e2a4a"><a href="#225602" label="[22:56:02]">&lt;stikonas&gt;</a></span><span class="message">cause tests have changed...</span></div><div class="line" id="230034"><span class="nick" style="color:#2e2a4a"><a href="#230034" label="[23:00:34]">&lt;stikonas&gt;</a></span><span class="message">ok, rebased now</span></div><div class="line" id="231157"><span class="nick" style="color:#6d2462"><a href="#231157" label="[23:11:57]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="231253"><span class="nick" style="color:#2e2a4a"><a href="#231253" label="[23:12:53]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="231312"><span class="nick" style="color:#2e2a4a"><a href="#231312" label="[23:13:12]">&lt;stikonas&gt;</a></span><span class="message">now the hard rebase of my wip (u)int*_t changes...</span></div><div class="line" id="231518"><span class="nick" style="color:#2e2a4a"><a href="#231518" label="[23:15:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I should do cc_x86 changes first...</span></div><div class="line" id="231551"><span class="nick" style="color:#6d2462"><a href="#231551" label="[23:15:51]">&lt;oriansj&gt;</a></span><span class="message">probably a good idea</span></div><div class="line" id="231624"><span class="nick" style="color:#2e2a4a"><a href="#231624" label="[23:16:24]">&lt;stikonas&gt;</a></span><span class="message">I think I can push those myself</span></div><div class="line" id="232507"><span class="nick" style="color:#2e2a4a"><a href="#232507" label="[23:25:07]">&lt;stikonas&gt;</a></span><span class="message">oh I think I forgot one thing, now after I converted to defines, the order is still the old one, so not very alphabetical...</span></div><div class="line" id="232511"><span class="nick" style="color:#2e2a4a"><a href="#232511" label="[23:25:11]">&lt;stikonas&gt;</a></span><span class="message">or should we keep it?</span></div><div class="line" id="233734"><span class="nick" style="color:#234e69"><a href="#233734" label="[23:37:34]">&lt;fossy&gt;</a></span><span class="message">oh, that's an easy fix for interpret_source_line - i must admit i didn't really consider that early sha256sum doesn't work with stdin</span></div><div class="line" id="234226"><span class="nick" style="color:#2e2a4a"><a href="#234226" label="[23:42:26]">&lt;stikonas&gt;</a></span><span class="message">we don't use any pipes until bash...</span></div><div class="line" id="234643"><span class="nick" style="color:#234e69"><a href="#234643" label="[23:46:43]">&lt;fossy&gt;</a></span><span class="message">yes, not really something i thought of as i made that change</span></div><div class="line" id="001456"><span class="nick" style="color:#2e2a4a"><a href="#001456" label="[00:14:56]">&lt;stikonas&gt;</a></span><span class="message">ok, stage0-posix is pushed</span></div><div class="line" id="001505"><span class="nick" style="color:#2e2a4a"><a href="#001505" label="[00:15:05]">&lt;stikonas&gt;</a></span><span class="message">now cc_x86 output spits out new style defines</span></div><div class="line" id="002842"><span class="nick" style="color:#234e69"><a href="#002842" label="[00:28:42]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="003154"><span class="nick" style="color:#6d2462"><a href="#003154" label="[00:31:54]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice!!!</span></div><div class="line" id="003320"><span class="nick" style="color:#2e2a4a"><a href="#003320" label="[00:33:20]">&lt;stikonas&gt;</a></span><span class="message">though I now noticed that on x86 kaem-optional-seed does not stop after child segfault...</span></div><div class="line" id="003343"><span class="nick" style="color:#2e2a4a"><a href="#003343" label="[00:33:43]">&lt;stikonas&gt;</a></span><span class="message">that's not very good...</span></div><div class="line" id="003355"><span class="nick" style="color:#2e2a4a"><a href="#003355" label="[00:33:55]">&lt;stikonas&gt;</a></span><span class="message">I wonder if that's a recent regression...</span></div><div class="line" id="003402"><span class="nick" style="color:#2e2a4a"><a href="#003402" label="[00:34:02]">&lt;stikonas&gt;</a></span><span class="message">amd64 version seems to work fine</span></div><div class="line" id="003436"><span class="nick" style="color:#6d2462"><a href="#003436" label="[00:34:36]">&lt;oriansj&gt;</a></span><span class="message">well if it does segfault, nothing else in the chain builds</span></div><div class="line" id="003529"><span class="nick" style="color:#6d2462"><a href="#003529" label="[00:35:29]">&lt;oriansj&gt;</a></span><span class="message">as every step up until full kaem is very dependent on the previous step hitting success</span></div><div class="line" id="003532"><span class="nick" style="color:#2e2a4a"><a href="#003532" label="[00:35:32]">&lt;stikonas&gt;</a></span><span class="message">nothing builds, just tries to set some variables in kaem scripts and exits...</span></div><div class="line" id="003553"><span class="nick" style="color:#2e2a4a"><a href="#003553" label="[00:35:53]">&lt;stikonas&gt;</a></span><span class="message">well, maybe we can live with tit</span></div><div class="line" id="003556"><span class="nick" style="color:#2e2a4a"><a href="#003556" label="[00:35:56]">&lt;stikonas&gt;</a></span><span class="message">with it</span></div><div class="line" id="003618"><span class="nick" style="color:#6d2462"><a href="#003618" label="[00:36:18]">&lt;oriansj&gt;</a></span><span class="message">Adds to fix queue</span></div><div class="line" id="004918"><span class="nick" style="color:#2e2a4a"><a href="#004918" label="[00:49:18]">&lt;stikonas&gt;</a></span><span class="message">ok, finally rebased (at least mostly) my wip changes</span></div><div class="line" id="005006"><span class="nick" style="color:#2e2a4a"><a href="#005006" label="[00:50:06]">&lt;stikonas&gt;</a></span><span class="message">got amd64 tests passing, now need to fix other arches (but even before all that x86 define work other arches were not done yet)</span></div><div class="line" id="014421"><span class="nick" style="color:#6d2462"><a href="#014421" label="[01:44:21]">&lt;oriansj&gt;</a></span><span class="message">I'm hoping in the future someone Refines Aarch64 using the new word based operations in mescc-tools</span></div><div class="line" id="014445"><span class="nick" style="color:#6d2462"><a href="#014445" label="[01:44:45]">&lt;oriansj&gt;</a></span><span class="message">as it is a much better map to the native instructions.</span></div><div class="line" id="014505"><span class="nick" style="color:#6d2462"><a href="#014505" label="[01:45:05]">&lt;oriansj&gt;</a></span><span class="message">(but then again one could say the same thing about x86 and octal and I wouldn't hold my breath on that one)</span></div><div class="line" id="014911"><span class="nick" style="color:#2e2a4a"><a href="#014911" label="[01:49:11]">&lt;stikonas&gt;</a></span><span class="message">well, we need more people then...</span></div><div class="line" id="014932"><span class="nick" style="color:#2e2a4a"><a href="#014932" label="[01:49:32]">&lt;stikonas&gt;</a></span><span class="message">I'm already fully &quot;booked&quot;</span></div><div class="line" id="015000"><span class="nick" style="color:#2e2a4a"><a href="#015000" label="[01:50:00]">&lt;stikonas&gt;</a></span><span class="message">though in general there was a lot of progress recently...</span></div><div class="line" id="015005"><span class="nick" style="color:#2e2a4a"><a href="#015005" label="[01:50:05]">&lt;stikonas&gt;</a></span><span class="message">especially in kernel bootstrapping</span></div><div class="line" id="015102"><span class="nick" style="color:#6d2462"><a href="#015102" label="[01:51:02]">&lt;oriansj&gt;</a></span><span class="message">recruiting is a hard problem, which we need more people working on</span></div><div class="line" id="015127"><span class="nick" style="color:#2e2a4a"><a href="#015127" label="[01:51:27]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm making some progress with fixed size integers</span></div><div class="line" id="015201"><span class="nick" style="color:#6d2462"><a href="#015201" label="[01:52:01]">&lt;oriansj&gt;</a></span><span class="message">I am glad</span></div><div class="line" id="015220"><span class="nick" style="color:#2e2a4a"><a href="#015220" label="[01:52:20]">&lt;stikonas&gt;</a></span><span class="message">I think now I have x86, amd64, riscv32 and riscv64 working</span></div><div class="line" id="015239"><span class="nick" style="color:#2e2a4a"><a href="#015239" label="[01:52:39]">&lt;stikonas&gt;</a></span><span class="message">I can probably get aarch64 working too, but not sure about arm and knight</span></div><div class="line" id="015243"><span class="nick" style="color:#2e2a4a"><a href="#015243" label="[01:52:43]">&lt;stikonas&gt;</a></span><span class="message">especially arm</span></div><div class="line" id="015259"><span class="nick" style="color:#6d2462"><a href="#015259" label="[01:52:59]">&lt;oriansj&gt;</a></span><span class="message">and never feel like you have to work on anything because of me, ok. Do only what you think is fun and worth doing.</span></div><div class="line" id="015321"><span class="nick" style="color:#6d2462"><a href="#015321" label="[01:53:21]">&lt;oriansj&gt;</a></span><span class="message">and I can sort out arm and knight</span></div><div class="line" id="015409"><span class="nick" style="color:#2e2a4a"><a href="#015409" label="[01:54:09]">&lt;stikonas&gt;</a></span><span class="message">well, I needed that change for amd64, but then for M2-Planet we do need to get all features working on all arches</span></div><div class="line" id="015421"><span class="nick" style="color:#2e2a4a"><a href="#015421" label="[01:54:21]">&lt;stikonas&gt;</a></span><span class="message">anyway, once I get aarch64 working, I might push my changes somewhere</span></div><div class="line" id="015449"><span class="nick" style="color:#6d2462"><a href="#015449" label="[01:54:49]">&lt;oriansj&gt;</a></span><span class="message">well if you just get amd64 working and check it into a separate branch, I can pull and finish it off for the other architectures and then merge it into master</span></div><div class="line" id="015516"><span class="nick" style="color:#2e2a4a"><a href="#015516" label="[01:55:16]">&lt;stikonas&gt;</a></span><span class="message">well, let me push it now to a branch, and you can take a look at knight and arm</span></div><div class="line" id="015519"><span class="nick" style="color:#2e2a4a"><a href="#015519" label="[01:55:19]">&lt;stikonas&gt;</a></span><span class="message">while I sort out aarch64</span></div><div class="line" id="015542"><span class="nick" style="color:#6d2462"><a href="#015542" label="[01:55:42]">&lt;oriansj&gt;</a></span><span class="message">sounds like a plan (now that my development setup is now sort of working)</span></div><div class="line" id="015603"><span class="nick" style="color:#2e2a4a"><a href="#015603" label="[01:56:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/M2-Planet/tree/fixed_types">https://github.com/stikonas/M2-Planet/tree/fixed_types</a> </span></div><div class="line" id="015623"><span class="nick" style="color:#2e2a4a"><a href="#015623" label="[01:56:23]">&lt;stikonas&gt;</a></span><span class="message">I should probably push M2libc changes with extra defines</span></div><div class="line" id="015713"><span class="nick" style="color:#6d2462"><a href="#015713" label="[01:57:13]">&lt;oriansj&gt;</a></span><span class="message">nice thing about M2libc is not every commit has to be perfect (only those we leverage in other packages)</span></div><div class="line" id="020004"><span class="nick" style="color:#2e2a4a"><a href="#020004" label="[02:00:04]">&lt;stikonas&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/stikonas/M2libc/tree/fixed_int">https://github.com/stikonas/M2libc/tree/fixed_int</a> </span></div><div class="line" id="020148"><span class="nick" style="color:#2e2a4a"><a href="#020148" label="[02:01:48]">&lt;stikonas&gt;</a></span><span class="message">(in the test0030 I checked that uint8_t and uint16_t overflows correctly, we can add uint32_t if you want but it's more of the same.</span></div><div class="line" id="020212"><span class="nick" style="color:#2e2a4a"><a href="#020212" label="[02:02:12]">&lt;stikonas&gt;</a></span><span class="message">I didn't bother testing int overflow as that is undefined in C</span></div><div class="line" id="020256"><span class="nick" style="color:#2e2a4a"><a href="#020256" label="[02:02:56]">&lt;stikonas&gt;</a></span><span class="message">though for my purposes, I don't even need overflow, just need to be able to assign variable</span></div><div class="line" id="020416"><span class="nick" style="color:#2e2a4a"><a href="#020416" label="[02:04:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, although I should probably check if what I have right now actually works for me...</span></div><div class="line" id="020529"><span class="nick" style="color:#2e2a4a"><a href="#020529" label="[02:05:29]">&lt;stikonas&gt;</a></span><span class="message">I have a suspicion that it might not...</span></div><div class="line" id="020549"><span class="nick" style="color:#6d2462"><a href="#020549" label="[02:05:49]">&lt;oriansj&gt;</a></span><span class="message">opt for what makes things better for you</span></div><div class="line" id="020622"><span class="nick" style="color:#2e2a4a"><a href="#020622" label="[02:06:22]">&lt;stikonas&gt;</a></span><span class="message">I might hit zero_extend branch if I do assignment like ptr-&gt;member = 5; where member is uint16_t</span></div><div class="line" id="020659"><span class="nick" style="color:#2e2a4a"><a href="#020659" label="[02:06:59]">&lt;stikonas&gt;</a></span><span class="message">well, right now I just converted current code, so that outputted assembly is unchanged</span></div><div class="line" id="020917"><span class="nick" style="color:#2e2a4a"><a href="#020917" label="[02:09:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, if we need any changes, I think it won't be in defines</span></div><div class="line" id="020928"><span class="nick" style="color:#2e2a4a"><a href="#020928" label="[02:09:28]">&lt;stikonas&gt;</a></span><span class="message">so we might as well finish porting current arches</span></div><div class="line" id="020930"><span class="nick" style="color:#6d2462"><a href="#020930" label="[02:09:30]">&lt;oriansj&gt;</a></span><span class="message">I am sure we can find something that works well</span></div><div class="line" id="021001"><span class="nick" style="color:#2e2a4a"><a href="#021001" label="[02:10:01]">&lt;stikonas&gt;</a></span><span class="message">for sure. This is not something particularly complicated</span></div><div class="line" id="021021"><span class="nick" style="color:#6d2462"><a href="#021021" label="[02:10:21]">&lt;oriansj&gt;</a></span><span class="message">just very touchy details wise</span></div><div class="line" id="021028"><span class="nick" style="color:#2e2a4a"><a href="#021028" label="[02:10:28]">&lt;stikonas&gt;</a></span><span class="message">it's just that these load and store instructions were all over the place</span></div><div class="line" id="021033"><span class="nick" style="color:#2e2a4a"><a href="#021033" label="[02:10:33]">&lt;stikonas&gt;</a></span><span class="message">so I tried to unify them a bit</span></div><div class="line" id="021047"><span class="nick" style="color:#2e2a4a"><a href="#021047" label="[02:10:47]">&lt;stikonas&gt;</a></span><span class="message">but yes, it is a bit touchy</span></div><div class="line" id="021101"><span class="nick" style="color:#2e2a4a"><a href="#021101" label="[02:11:01]">&lt;stikonas&gt;</a></span><span class="message">hence I had to add all those arguments like zero extend, signed/unsigned, etc...</span></div><div class="line" id="021116"><span class="nick" style="color:#6d2462"><a href="#021116" label="[02:11:16]">&lt;oriansj&gt;</a></span><span class="message">well if you are willing to make M2-Planet a little slower we could centralize ALL assembly instructions output</span></div><div class="line" id="021205"><span class="nick" style="color:#2e2a4a"><a href="#021205" label="[02:12:05]">&lt;stikonas&gt;</a></span><span class="message">well, I was thinking that we at least need to centralize simple operations  like + and +=</span></div><div class="line" id="021213"><span class="nick" style="color:#2e2a4a"><a href="#021213" label="[02:12:13]">&lt;stikonas&gt;</a></span><span class="message">as those are duplicate strings...</span></div><div class="line" id="021230"><span class="nick" style="color:#2e2a4a"><a href="#021230" label="[02:12:30]">&lt;stikonas&gt;</a></span><span class="message">not sure if we need to centralize even more...</span></div><div class="line" id="021426"><span class="nick" style="color:#6d2462"><a href="#021426" label="[02:14:26]">&lt;oriansj&gt;</a></span><span class="message">depends on if we wish to make it easier to add functionality or are approaching the limit of the functionality we feel needs to be in M2-Planet</span></div><div class="line" id="021636"><span class="nick" style="color:#2e2a4a"><a href="#021636" label="[02:16:36]">&lt;stikonas&gt;</a></span><span class="message">it's hard to tell in advance...</span></div><div class="line" id="021656"><span class="nick" style="color:#2e2a4a"><a href="#021656" label="[02:16:56]">&lt;stikonas&gt;</a></span><span class="message">recently we have added quite a bit of functionality that we didn't know that we'll need</span></div><div class="line" id="021849"><span class="nick" style="color:#6d2462"><a href="#021849" label="[02:18:49]">&lt;oriansj&gt;</a></span><span class="message">well new roots come with new requirements</span></div><div class="line" id="022002"><span class="nick" style="color:#6d2462"><a href="#022002" label="[02:20:02]">&lt;oriansj&gt;</a></span><span class="message">up until now we never needed to deal with int16_t; prior to RISC-V we never *HAD* to support word based encoding</span></div><div class="line" id="022830"><span class="nick" style="color:#2e2a4a"><a href="#022830" label="[02:28:30]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I've got aarch64 defines working...</span></div><div class="line" id="022919"><span class="nick" style="color:#2e2a4a"><a href="#022919" label="[02:29:19]">&lt;stikonas&gt;</a></span><span class="message">hmm, or maybe not yet, something fails after test 30, test0104 segfaults...</span></div><div class="line" id="171201"><span class="nick" style="color:#2e2a4a"><a href="#171201" label="[17:12:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: for fixed types to be useful, I think we should add the following to test0030: <a rel="nofollow" href="https://paste.debian.net/1262750/">https://paste.debian.net/1262750/</a> </span></div><div class="line" id="171249"><span class="nick" style="color:#2e2a4a"><a href="#171249" label="[17:12:49]">&lt;stikonas&gt;</a></span><span class="message">(oh, except for last return, that should be t.c - 9 instead of t.c</span></div><div class="line" id="171303"><span class="nick" style="color:#2e2a4a"><a href="#171303" label="[17:13:03]">&lt;stikonas&gt;</a></span><span class="message">I think as it stands now, it wouldn't work</span></div><div class="line" id="171315"><span class="nick" style="color:#2e2a4a"><a href="#171315" label="[17:13:15]">&lt;stikonas&gt;</a></span><span class="message">as we overwrite too wide address band</span></div><div class="line" id="173155"><span class="nick" style="color:#6d2462"><a href="#173155" label="[17:31:55]">&lt;oriansj&gt;</a></span><span class="message">sounds reasonable to improve the testing</span></div><div class="line" id="173447"><span class="nick" style="color:#6d2462"><a href="#173447" label="[17:34:47]">&lt;oriansj&gt;</a></span><span class="message">although I would set t.b and t.d after setting t.c</span></div><div class="line" id="174018"><span class="nick" style="color:#2e2a4a"><a href="#174018" label="[17:40:18]">&lt;stikonas&gt;</a></span><span class="message">oh possibly</span></div><div class="line" id="174032"><span class="nick" style="color:#2e2a4a"><a href="#174032" label="[17:40:32]">&lt;stikonas&gt;</a></span><span class="message">and we can do some more complicated check to make sure all of them have the right values</span></div><div class="line" id="190407"><span class="nick" style="color:#6d2462"><a href="#190407" label="[19:04:07]">&lt;oriansj&gt;</a></span><span class="message">good idea</span></div><div class="line" id="013506"><span class="nick" style="color:#2e2a4a"><a href="#013506" label="[01:35:06]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, I might have fixed that extended test0030</span></div><div class="line" id="013510"><span class="nick" style="color:#2e2a4a"><a href="#013510" label="[01:35:10]">&lt;stikonas&gt;</a></span><span class="message">almost accidentally</span></div><div class="line" id="013726"><span class="nick" style="color:#2e2a4a"><a href="#013726" label="[01:37:26]">&lt;stikonas&gt;</a></span><span class="message">I had a suspicioun that removing all zero_extend stuff might help</span></div><div class="line" id="013743"><span class="nick" style="color:#2e2a4a"><a href="#013743" label="[01:37:43]">&lt;stikonas&gt;</a></span><span class="message">*suspicion</span></div><div class="line" id="013804"><span class="nick" style="color:#2e2a4a"><a href="#013804" label="[01:38:04]">&lt;stikonas&gt;</a></span><span class="message">but didn't expect all amd64 tests to pass</span></div><div class="line" id="014108"><span class="nick" style="color:#6d2462"><a href="#014108" label="[01:41:08]">&lt;oriansj&gt;</a></span><span class="message">well the test are the most basic ones needed</span></div><div class="line" id="014124"><span class="nick" style="color:#6d2462"><a href="#014124" label="[01:41:24]">&lt;oriansj&gt;</a></span><span class="message">and refinement is a good idea</span></div><div class="line" id="014151"><span class="nick" style="color:#2e2a4a"><a href="#014151" label="[01:41:51]">&lt;stikonas&gt;</a></span><span class="message">well we'll see if everything else work</span></div><div class="line" id="014201"><span class="nick" style="color:#2e2a4a"><a href="#014201" label="[01:42:01]">&lt;stikonas&gt;</a></span><span class="message">I'm still a bit sceptical...</span></div><div class="line" id="014223"><span class="nick" style="color:#2e2a4a"><a href="#014223" label="[01:42:23]">&lt;stikonas&gt;</a></span><span class="message">as somehow it seems too simple</span></div><div class="line" id="014232"><span class="nick" style="color:#2e2a4a"><a href="#014232" label="[01:42:32]">&lt;stikonas&gt;</a></span><span class="message">there isn't any signed stuff left</span></div><div class="line" id="021400"><span class="nick" style="color:#2e2a4a"><a href="#021400" label="[02:14:00]">&lt;stikonas&gt;</a></span><span class="message">ok, so far tests pass on aarch64, x86, amd64, riscv32 and riscv64, so that's good</span></div><div class="line" id="021605"><span class="nick" style="color:#2e2a4a"><a href="#021605" label="[02:16:05]">&lt;stikonas&gt;</a></span><span class="message">and I suspect knight works too, though I'm not sure how to test it</span></div><div class="line" id="022608"><span class="nick" style="color:#2e2a4a"><a href="#022608" label="[02:26:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I think the only things that are left are 16 bit load and store instructions for armv7l</span></div><div class="line" id="022613"><span class="nick" style="color:#2e2a4a"><a href="#022613" label="[02:26:13]">&lt;stikonas&gt;</a></span><span class="message">any idea how to generate those?</span></div><div class="line" id="022644"><span class="nick" style="color:#2e2a4a"><a href="#022644" label="[02:26:44]">&lt;stikonas&gt;</a></span><span class="message">(luckily knight already had STORE16 and LOAD16 defines)</span></div><div class="line" id="022933"><span class="nick" style="color:#6d2462"><a href="#022933" label="[02:29:33]">&lt;oriansj&gt;</a></span><span class="message">well knight also had a generic load/store instructions where you could define the number of bits which were loaded and stored (load13s and store5 sort of thing) but because I didn't want to have to figure out how to support those instructions as well I pruned them</span></div><div class="line" id="023042"><span class="nick" style="color:#6d2462"><a href="#023042" label="[02:30:42]">&lt;oriansj&gt;</a></span><span class="message">and if you look at the old stage0 commits you can find the old pack and unpack instructions which although awesome would have been a good deal of extra complexity to add and were not actually ever needed.</span></div><div class="line" id="023104"><span class="nick" style="color:#2e2a4a"><a href="#023104" label="[02:31:04]">&lt;stikonas&gt;</a></span><span class="message">so for arm we have ldrb r0, [r0] which in defines is !0 R0 LOAD8 R0 MEMORY or 00 0 0D 0 E5</span></div><div class="line" id="023118"><span class="nick" style="color:#2e2a4a"><a href="#023118" label="[02:31:18]">&lt;stikonas&gt;</a></span><span class="message">I guess I need ldrh r0, [r0] to load 16-bit value</span></div><div class="line" id="023146"><span class="nick" style="color:#2e2a4a"><a href="#023146" label="[02:31:46]">&lt;stikonas&gt;</a></span><span class="message">but that seems to be B000D0E1 which looks quite different from 00 0 0D 0 E5</span></div><div class="line" id="023159"><span class="nick" style="color:#2e2a4a"><a href="#023159" label="[02:31:59]">&lt;stikonas&gt;</a></span><span class="message">soI'm a bit lost how to get something like !0 R0 LOAD16 R0 MEMORY</span></div><div class="line" id="023705"><span class="nick" style="color:#6d2462"><a href="#023705" label="[02:37:05]">&lt;oriansj&gt;</a></span><span class="message">DEFINE HALF_MEMORY E1 DEFINE B00D LOAD16 =&gt; LOAD16 R0 HALF_MEMORY</span></div><div class="line" id="023755"><span class="nick" style="color:#6d2462"><a href="#023755" label="[02:37:55]">&lt;oriansj&gt;</a></span><span class="message">it isn't pretty but it'll work</span></div><div class="line" id="023835"><span class="nick" style="color:#2e2a4a"><a href="#023835" label="[02:38:35]">&lt;stikonas&gt;</a></span><span class="message">ok, I can do that</span></div><div class="line" id="023856"><span class="nick" style="color:#2e2a4a"><a href="#023856" label="[02:38:56]">&lt;stikonas&gt;</a></span><span class="message">I was a bit confused what the meaning of that MEMORY define was</span></div><div class="line" id="023904"><span class="nick" style="color:#2e2a4a"><a href="#023904" label="[02:39:04]">&lt;stikonas&gt;</a></span><span class="message">LOAD8, R1, and R1 are more or less clear</span></div><div class="line" id="023946"><span class="nick" style="color:#2e2a4a"><a href="#023946" label="[02:39:46]">&lt;stikonas&gt;</a></span><span class="message">but I have not looked at armv7 ISA at all...</span></div><div class="line" id="024002"><span class="nick" style="color:#6d2462"><a href="#024002" label="[02:40:02]">&lt;oriansj&gt;</a></span><span class="message">well I was trying to find some consistent mapping for arm instructions, the problem is the mapping in the docs is entirely wrong</span></div><div class="line" id="024044"><span class="nick" style="color:#2e2a4a"><a href="#024044" label="[02:40:44]">&lt;stikonas&gt;</a></span><span class="message">oh, that's not nice if docs are wrong... But I'm probably not surprised...</span></div><div class="line" id="024304"><span class="nick" style="color:#6d2462"><a href="#024304" label="[02:43:04]">&lt;oriansj&gt;</a></span><span class="message">like docs say [cond 4bit] [opcode 8bit] [reg 4bit] [immediate 8bit][reg 4bit][reg 4bit] but the reality is [immediate 4bit][reg 4bit][reg 4bit][immediate 4bit][opcode 4bit][reg 4bit] [cond 4bit][opcode 4bit]</span></div><div class="line" id="024345"><span class="nick" style="color:#6d2462"><a href="#024345" label="[02:43:45]">&lt;oriansj&gt;</a></span><span class="message">if the encoding was like the docs said, then it would have had beautiful hex encoding</span></div><div class="line" id="024355"><span class="nick" style="color:#2e2a4a"><a href="#024355" label="[02:43:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I could do !B0 R0 LOAD16 R0 HALF_MEMORY</span></div><div class="line" id="024415"><span class="nick" style="color:#2e2a4a"><a href="#024415" label="[02:44:15]">&lt;stikonas&gt;</a></span><span class="message">not completely sure yet...</span></div><div class="line" id="024416"><span class="nick" style="color:#6d2462"><a href="#024416" label="[02:44:16]">&lt;oriansj&gt;</a></span><span class="message">The only way to make Armv7l encoding clean is to leverage word encoding</span></div><div class="line" id="024423"><span class="nick" style="color:#2e2a4a"><a href="#024423" label="[02:44:23]">&lt;stikonas&gt;</a></span><span class="message">because B000D includes register in it</span></div><div class="line" id="024434"><span class="nick" style="color:#2e2a4a"><a href="#024434" label="[02:44:34]">&lt;stikonas&gt;</a></span><span class="message">oh, like risc-v...</span></div><div class="line" id="024438"><span class="nick" style="color:#6d2462"><a href="#024438" label="[02:44:38]">&lt;oriansj&gt;</a></span><span class="message">which would require a change in mescc-tools, M2libc and M2-Planet and that would be it</span></div><div class="line" id="024457"><span class="nick" style="color:#2e2a4a"><a href="#024457" label="[02:44:57]">&lt;stikonas&gt;</a></span><span class="message">well, if somebody does arm, maybe that's where they should start with</span></div><div class="line" id="024506"><span class="nick" style="color:#6d2462"><a href="#024506" label="[02:45:06]">&lt;oriansj&gt;</a></span><span class="message">as I haven't actually done the armv7l stage0-posix steps yet</span></div><div class="line" id="024507"><span class="nick" style="color:#2e2a4a"><a href="#024507" label="[02:45:07]">&lt;stikonas&gt;</a></span><span class="message">as none of the hex stuff is done yet</span></div><div class="line" id="024516"><span class="nick" style="color:#6d2462"><a href="#024516" label="[02:45:16]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="024517"><span class="nick" style="color:#2e2a4a"><a href="#024517" label="[02:45:17]">&lt;stikonas&gt;</a></span><span class="message">well, there are gas prototypes</span></div><div class="line" id="024525"><span class="nick" style="color:#6d2462"><a href="#024525" label="[02:45:25]">&lt;oriansj&gt;</a></span><span class="message">it is ripe for major improvements</span></div><div class="line" id="024612"><span class="nick" style="color:#2e2a4a"><a href="#024612" label="[02:46:12]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll do something like !B0 R0 LOAD16 R0 HALF_MEMORY for now</span></div><div class="line" id="024626"><span class="nick" style="color:#2e2a4a"><a href="#024626" label="[02:46:26]">&lt;stikonas&gt;</a></span><span class="message">and it can be converted to word type later...</span></div><div class="line" id="024657"><span class="nick" style="color:#2e2a4a"><a href="#024657" label="[02:46:57]">&lt;stikonas&gt;</a></span><span class="message">because I think that LOAD16 is in fact B0_0D (where _  are  skipped 2 bits for register)</span></div><div class="line" id="024708"><span class="nick" style="color:#6d2462"><a href="#024708" label="[02:47:08]">&lt;oriansj&gt;</a></span><span class="message">you can also define B0 to be NO_OFFSET</span></div><div class="line" id="024712"><span class="nick" style="color:#2e2a4a"><a href="#024712" label="[02:47:12]">&lt;stikonas&gt;</a></span><span class="message"> 4 bits</span></div><div class="line" id="024717"><span class="nick" style="color:#2e2a4a"><a href="#024717" label="[02:47:17]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="024805"><span class="nick" style="color:#2e2a4a"><a href="#024805" label="[02:48:05]">&lt;stikonas&gt;</a></span><span class="message">so then we have NO_OFFSET R0 LOAD16 R0 HALF_MEMORY\n</span></div><div class="line" id="024813"><span class="nick" style="color:#2e2a4a"><a href="#024813" label="[02:48:13]">&lt;stikonas&gt;</a></span><span class="message">and NO_OFFSET R0 STORE16 R1 HALF_MEMORY\n</span></div><div class="line" id="024847"><span class="nick" style="color:#6d2462"><a href="#024847" label="[02:48:47]">&lt;oriansj&gt;</a></span><span class="message">until I take the time to redo armv7l right</span></div><div class="line" id="024945"><span class="nick" style="color:#2e2a4a"><a href="#024945" label="[02:49:45]">&lt;stikonas&gt;</a></span><span class="message">ok, actually LOAD16 and LOAD8 are the same...</span></div><div class="line" id="024951"><span class="nick" style="color:#2e2a4a"><a href="#024951" label="[02:49:51]">&lt;stikonas&gt;</a></span><span class="message">as are STORE16 and STORE8...</span></div><div class="line" id="025012"><span class="nick" style="color:#2e2a4a"><a href="#025012" label="[02:50:12]">&lt;stikonas&gt;</a></span><span class="message">well, anyway, it's not really suitable without word encoding as you have said</span></div><div class="line" id="025455"><span class="nick" style="color:#2e2a4a"><a href="#025455" label="[02:54:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/26">https://github.com/oriansj/M2libc/pull/26</a> </span></div><div class="line" id="025506"><span class="nick" style="color:#2e2a4a"><a href="#025506" label="[02:55:06]">&lt;stikonas&gt;</a></span><span class="message">new defines, and once these are merged, I'll make M2-Planet PR</span></div><div class="line" id="025953"><span class="nick" style="color:#2e2a4a"><a href="#025953" label="[02:59:53]">&lt;stikonas&gt;</a></span><span class="message">oh I missed some of the other places where load and store integers are done...</span></div><div class="line" id="030116"><span class="nick" style="color:#6d2462"><a href="#030116" label="[03:01:16]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="030305"><span class="nick" style="color:#2e2a4a"><a href="#030305" label="[03:03:05]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I'll make PR with my current changes, and we can convert remaining load/store use in a followon PR</span></div><div class="line" id="030610"><span class="nick" style="color:#2e2a4a"><a href="#030610" label="[03:06:10]">&lt;stikonas&gt;</a></span><span class="message">ok <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/47">https://github.com/oriansj/M2-Planet/pull/47</a> </span></div><div class="line" id="030713"><span class="nick" style="color:#2e2a4a"><a href="#030713" label="[03:07:13]">&lt;stikonas&gt;</a></span><span class="message">I'll see if I can port remaining code to store/load_value tomorrow</span></div><div class="line" id="030735"><span class="nick" style="color:#2e2a4a"><a href="#030735" label="[03:07:35]">&lt;stikonas&gt;</a></span><span class="message">(unless you do it first)</span></div><div class="line" id="031851"><span class="nick" style="color:#6d2462"><a href="#031851" label="[03:18:51]">&lt;oriansj&gt;</a></span><span class="message">merged (and fixed)</span></div><div class="line" id="032007"><span class="nick" style="color:#2e2a4a"><a href="#032007" label="[03:20:07]">&lt;stikonas&gt;</a></span><span class="message">oh, I somehow missed checksum...</span></div><div class="line" id="032013"><span class="nick" style="color:#2e2a4a"><a href="#032013" label="[03:20:13]">&lt;stikonas&gt;</a></span><span class="message">hmm, I thought I ran all tests..</span></div><div class="line" id="032125"><span class="nick" style="color:#2e2a4a"><a href="#032125" label="[03:21:25]">&lt;stikonas&gt;</a></span><span class="message">well, your checksum is indeed right</span></div><div class="line" id="032136"><span class="nick" style="color:#2e2a4a"><a href="#032136" label="[03:21:36]">&lt;stikonas&gt;</a></span><span class="message">I must have edited something and forgotten to update checksum</span></div><div class="line" id="032432"><span class="nick" style="color:#6d2462"><a href="#032432" label="[03:24:32]">&lt;oriansj&gt;</a></span><span class="message">easy to miss but also easy to catch and fix</span></div><div class="line" id="102847"><span class="nick" style="color:#6c3d55"><a href="#102847" label="[10:28:47]">&lt;Christoph[m]&gt;</a></span><span class="message">&lt;stikonas&gt; &quot;ok, so far tests pass on aarch64...&quot; &lt;- Are these tests done on virtual machines? Or do you have one of each at home? Or at your university? Or is bootstrappable blessed with funds I was unaware of and oriansj runs a testing farm somewhere? (I like the last version best. :-)</span></div><div class="line" id="121336"><span class="nick" style="color:#8dd3c7"><a href="#121336" label="[12:13:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Christoph: these tests are done on qemu user mode emulation</span></div><div class="line" id="121509"><span class="nick" style="color:#8dd3c7"><a href="#121509" label="[12:15:09]">&lt;stikonas[m]&gt;</a></span><span class="message">I've just configured (using binfmt_misc) my amd64 system to be able to run aarch64, riscv32 and riscv64 binaries</span></div><div class="line" id="121525"><span class="nick" style="color:#8dd3c7"><a href="#121525" label="[12:15:25]">&lt;stikonas[m]&gt;</a></span><span class="message">that is usually good enough</span></div><div class="line" id="121542"><span class="nick" style="color:#8dd3c7"><a href="#121542" label="[12:15:42]">&lt;stikonas[m]&gt;</a></span><span class="message">the whole stage-posix riscv work was done on qemu</span></div><div class="line" id="121601"><span class="nick" style="color:#8dd3c7"><a href="#121601" label="[12:16:01]">&lt;stikonas[m]&gt;</a></span><span class="message">later somebody tested it on real hardware and only found one issue</span></div><div class="line" id="121629"><span class="nick" style="color:#8dd3c7"><a href="#121629" label="[12:16:29]">&lt;stikonas[m]&gt;</a></span><span class="message">(needed to zero some register on startup rather than rely on it being zero)</span></div><div class="line" id="123810"><span class="nick" style="color:#6d2462"><a href="#123810" label="[12:38:10]">&lt;oriansj&gt;</a></span><span class="message">Christoph[m]: I have AArch64 systems, armv7l systems, x86, AMD64 and a prototype Knight system (Still a work in progress)</span></div><div class="line" id="123853"><span class="nick" style="color:#6d2462"><a href="#123853" label="[12:38:53]">&lt;oriansj&gt;</a></span><span class="message">(raspberryPIs work good for AArch64 and armv7l testing)</span></div><div class="line" id="124014"><span class="nick" style="color:#6d2462"><a href="#124014" label="[12:40:14]">&lt;oriansj&gt;</a></span><span class="message">I have a single RISC-V processor but I haven't yet figured out how to properly test on it as it doesn't support Linux</span></div><div class="line" id="130048"><span class="nick" style="color:#6c3d55"><a href="#130048" label="[13:00:48]">&lt;Christoph[m]&gt;</a></span><span class="message">Oh! Bur you're bootstraping linux for RISK-V, so one day...?</span></div><div class="line" id="130532"><span class="nick" style="color:#6d2462"><a href="#130532" label="[13:05:32]">&lt;oriansj&gt;</a></span><span class="message">I probably will have RISC-V hardware to test on but right now I am limited to what I have</span></div><br /></div></body></html>