<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000606"><span class="nick" style="color:#389600"><a href="#000606" label="[00:06:06]">&lt;oriansj&gt;</a></span><span class="message">probie: well simple register based vm are not simple. atleast if you want universal behavior</span></div><div class="line" id="000711"><span class="nick" style="color:#389600"><a href="#000711" label="[00:07:11]">&lt;oriansj&gt;</a></span><span class="message">take something like sweet16, which is simple to implement on 6502 but much harder to get matching behavior on say an armv7l system.</span></div><div class="line" id="000817"><span class="nick" style="color:#389600"><a href="#000817" label="[00:08:17]">&lt;oriansj&gt;</a></span><span class="message">writing towards a 16bit vm is a great deal harder than a 32bit or 64bit machine</span></div><div class="line" id="000907"><span class="nick" style="color:#389600"><a href="#000907" label="[00:09:07]">&lt;oriansj&gt;</a></span><span class="message">and implementing a 64bit vm on a 16bit machine is a nightmare</span></div><div class="line" id="001118"><span class="nick" style="color:#389600"><a href="#001118" label="[00:11:18]">&lt;oriansj&gt;</a></span><span class="message">and for extra fun; sweet16 is bigger than builder-hex0's bootstrap binary and virtually all hex0 implementations and hex0 behavior is universally identical by specification (even on non-twos complement instruction sets)</span></div><div class="line" id="001251"><span class="nick" style="color:#8dd3c7"><a href="#001251" label="[00:12:51]">&lt;stikonas&gt;</a></span><span class="message">well, the new builder-hex0 bootstrap seed is just 200 bytes</span></div><div class="line" id="001256"><span class="nick" style="color:#8dd3c7"><a href="#001256" label="[00:12:56]">&lt;stikonas&gt;</a></span><span class="message">(or so)</span></div><div class="line" id="001258"><span class="nick" style="color:#8dd3c7"><a href="#001258" label="[00:12:58]">&lt;stikonas&gt;</a></span><span class="message">hard to beat this</span></div><div class="line" id="001337"><span class="nick" style="color:#8dd3c7"><a href="#001337" label="[00:13:37]">&lt;stikonas&gt;</a></span><span class="message">it's quite impressive to go this low</span></div><div class="line" id="001413"><span class="nick" style="color:#389600"><a href="#001413" label="[00:14:13]">&lt;oriansj&gt;</a></span><span class="message">(The original knight was symmetric complement and its current code would have produced the exact same output even if it was one's complement)</span></div><div class="line" id="001421"><span class="nick" style="color:#8dd3c7"><a href="#001421" label="[00:14:21]">&lt;stikonas&gt;</a></span><span class="message">I guess it's similar in size to hex0 posix seed but it doesn't have any ELF header and output is directly to memory</span></div><div class="line" id="001733"><span class="nick" style="color:#389600"><a href="#001733" label="[00:17:33]">&lt;oriansj&gt;</a></span><span class="message">and sweet16 did not have *ANY* syscall or bare metal instruction support (you had to directly talk to native hardware's memory which is far less portable than even native assembly)</span></div><div class="line" id="002022"><span class="nick" style="color:#389600"><a href="#002022" label="[00:20:22]">&lt;oriansj&gt;</a></span><span class="message">more often then not, you would pull a RTN (Return to 6502 mode)</span></div><div class="line" id="002253"><span class="nick" style="color:#389600"><a href="#002253" label="[00:22:53]">&lt;oriansj&gt;</a></span><span class="message">and unless you are dealing with absolute garbage CPU architectures; there is no advantage to a VM and to be honest a FORTH would be easier to bootstrap a garbage architecture and is easier to program for than an instruction set.</span></div><div class="line" id="002738"><span class="nick" style="color:#2e2a4a"><a href="#002738" label="[00:27:38]">&lt;muurkha&gt;</a></span><span class="message">probie: I've been thinking about the &quot;simple register based vm&quot; approach but without the interpreter, just the compilers</span></div><div class="line" id="002756"><span class="nick" style="color:#2e2a4a"><a href="#002756" label="[00:27:56]">&lt;muurkha&gt;</a></span><span class="message">which is sort of what stage2 is</span></div><div class="line" id="002917"><span class="nick" style="color:#2e2a4a"><a href="#002917" label="[00:29:17]">&lt;muurkha&gt;</a></span><span class="message">I don't think it's that hard to get 16-bit arithmetic on a 32-bit machine; the only basic operations where the high 16 bits of any register affect the low 16 bits of any other are shift right (and variants like rotate left and rotate right) and division</span></div><div class="line" id="003021"><span class="nick" style="color:#2e2a4a"><a href="#003021" label="[00:30:21]">&lt;muurkha&gt;</a></span><span class="message">so in those cases you need to mask to 16 bits before doing the operation</span></div><div class="line" id="003523"><span class="nick" style="color:#2e2a4a"><a href="#003523" label="[00:35:23]">&lt;muurkha&gt;</a></span><span class="message">the reason I was thinking about simple register-based VMs is last night's conversation with drakonis about uxn, where the objective is to be able to distribute roms that are guaranteed to run on a wide variety of platforms, including things like GBA and Nintendo DS</span></div><div class="line" id="003643"><span class="nick" style="color:#2e2a4a"><a href="#003643" label="[00:36:43]">&lt;muurkha&gt;</a></span><span class="message">and I was thinking about how to design something like uxn to be more efficient with a simple compiler</span></div><div class="line" id="012831"><span class="nick" style="color:#2e2a4a"><a href="#012831" label="[01:28:31]">&lt;muurkha&gt;</a></span><span class="message">I don't think my simple register-based VM compiler will be as small as SWEET16</span></div><div class="line" id="013347"><span class="nick" style="color:#2e2a4a"><a href="#013347" label="[01:33:47]">&lt;muurkha&gt;</a></span><span class="message">drakonis: I think I have a clearer point to make about uxn</span></div><div class="line" id="013433"><span class="nick" style="color:#2e2a4a"><a href="#013433" label="[01:34:33]">&lt;muurkha&gt;</a></span><span class="message">uxn is, like a video game, designed as a challenge.  it's intended to be hard to do things in</span></div><div class="line" id="013537"><span class="nick" style="color:#2e2a4a"><a href="#013537" label="[01:35:37]">&lt;muurkha&gt;</a></span><span class="message">arguably that's true of what most people do with Forth these days too: they're looking for a challenge, a weight to lift</span></div><div class="line" id="013634"><span class="nick" style="color:#2e2a4a"><a href="#013634" label="[01:36:34]">&lt;muurkha&gt;</a></span><span class="message">and that runs counter to the goal to be 'something you could build in the event that access to complex hardware becomes limited'</span></div><div class="line" id="013741"><span class="nick" style="color:#2e2a4a"><a href="#013741" label="[01:37:41]">&lt;muurkha&gt;</a></span><span class="message">if you have something heavy to lift, calling on your weightlifter friends might be a reasonable thing to try</span></div><div class="line" id="013824"><span class="nick" style="color:#2e2a4a"><a href="#013824" label="[01:38:24]">&lt;muurkha&gt;</a></span><span class="message">but a barbell probably isn't going to help you.  if you want machinery, you want a chain hoist</span></div><div class="line" id="013913"><span class="nick" style="color:#2e2a4a"><a href="#013913" label="[01:39:13]">&lt;muurkha&gt;</a></span><span class="message">if you're trying to use a Gameboy DS because that's the best computer you have, uxn is more a barbell than a chain hoist</span></div><div class="line" id="030143"><span class="nick" style="color:#6b8072"><a href="#030143" label="[03:01:43]">&lt;drakonis&gt;</a></span><span class="message">muurkha: i do agree with that</span></div><div class="line" id="030207"><span class="nick" style="color:#6b8072"><a href="#030207" label="[03:02:07]">&lt;drakonis&gt;</a></span><span class="message">a lot of the interest in forth and concatenative languages is that they're powerful but not banal languages</span></div><div class="line" id="030319"><span class="nick" style="color:#6b8072"><a href="#030319" label="[03:03:19]">&lt;drakonis&gt;</a></span><span class="message">something like uxn, in its glorious inefficiency proves to be somewhat of a challenge in a situation where the average hardware performance has greatly declined as we may have lost the ability to manufacture parts with the same level of performance as we do now</span></div><div class="line" id="030343"><span class="nick" style="color:#2e2a4a"><a href="#030343" label="[03:03:43]">&lt;muurkha&gt;</a></span><span class="message">to my way of thinking, a &quot;powerful&quot; language is one that's like a chain hoist or a steam shovel</span></div><div class="line" id="030407"><span class="nick" style="color:#2e2a4a"><a href="#030407" label="[03:04:07]">&lt;muurkha&gt;</a></span><span class="message">it makes hard problems easier</span></div><div class="line" id="030423"><span class="nick" style="color:#2e2a4a"><a href="#030423" label="[03:04:23]">&lt;muurkha&gt;</a></span><span class="message">Forth can do that in some circumstances</span></div><div class="line" id="030524"><span class="nick" style="color:#2e2a4a"><a href="#030524" label="[03:05:24]">&lt;muurkha&gt;</a></span><span class="message">I mean it can give you a multiuser IDE with an assembler, a high-level scripting language, and virtual memory in 16 kilobytes of memory</span></div><div class="line" id="030630"><span class="nick" style="color:#6b8072"><a href="#030630" label="[03:06:30]">&lt;drakonis&gt;</a></span><span class="message">indeed</span></div><div class="line" id="030656"><span class="nick" style="color:#2e2a4a"><a href="#030656" label="[03:06:56]">&lt;muurkha&gt;</a></span><span class="message">and it makes poking at the registers of your peripherals interactively pretty easy</span></div><div class="line" id="030712"><span class="nick" style="color:#6b8072"><a href="#030712" label="[03:07:12]">&lt;drakonis&gt;</a></span><span class="message">there's nothing that can measure up to that power in the event of global catastrophe</span></div><div class="line" id="030724"><span class="nick" style="color:#6b8072"><a href="#030724" label="[03:07:24]">&lt;drakonis&gt;</a></span><span class="message">it is a bit of doomerism, isnt it?</span></div><div class="line" id="030749"><span class="nick" style="color:#2e2a4a"><a href="#030749" label="[03:07:49]">&lt;muurkha&gt;</a></span><span class="message">a pile of working gigabyte RAM chips would go pretty far</span></div><div class="line" id="030758"><span class="nick" style="color:#6b8072"><a href="#030758" label="[03:07:58]">&lt;drakonis&gt;</a></span><span class="message">certainly</span></div><div class="line" id="031004"><span class="nick" style="color:#2e2a4a"><a href="#031004" label="[03:10:04]">&lt;muurkha&gt;</a></span><span class="message">but I think a lot of people using Forth are trying to make easy things hard, not hard things easy</span></div><div class="line" id="031026"><span class="nick" style="color:#6b8072"><a href="#031026" label="[03:10:26]">&lt;drakonis&gt;</a></span><span class="message">do tell</span></div><div class="line" id="031226"><span class="nick" style="color:#6b8072"><a href="#031226" label="[03:12:26]">&lt;drakonis&gt;</a></span><span class="message">there's forth dialects that enable the latter</span></div><div class="line" id="031241"><span class="nick" style="color:#6b8072"><a href="#031241" label="[03:12:41]">&lt;drakonis&gt;</a></span><span class="message">retro and factor</span></div><div class="line" id="031357"><span class="nick" style="color:#6b8072"><a href="#031357" label="[03:13:57]">&lt;drakonis&gt;</a></span><span class="message">because they provide useful features that allow code to be more readable for a lack of a better word</span></div><div class="line" id="031422"><span class="nick" style="color:#6b8072"><a href="#031422" label="[03:14:22]">&lt;drakonis&gt;</a></span><span class="message">quotations go a long way towards writing readable forth</span></div><div class="line" id="031549"><span class="nick" style="color:#6b8072"><a href="#031549" label="[03:15:49]">&lt;drakonis&gt;</a></span><span class="message">as do combinators</span></div><div class="line" id="031738"><span class="nick" style="color:#6b8072"><a href="#031738" label="[03:17:38]">&lt;drakonis&gt;</a></span><span class="message">although, as a more direct reply to your statement, i think what people end up using forth and related languages as some kind of exotic toy as opposed to actually writing meaningful code</span></div><div class="line" id="031829"><span class="nick" style="color:#6b8072"><a href="#031829" label="[03:18:29]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://retroforth.org/">https://retroforth.org/</a>  and <a rel="nofollow" href="https://factorcode.org/">https://factorcode.org/</a> </span></div><div class="line" id="031843"><span class="nick" style="color:#2e2a4a"><a href="#031843" label="[03:18:43]">&lt;muurkha&gt;</a></span><span class="message">not sure combinators in general make code more readable</span></div><div class="line" id="031901"><span class="nick" style="color:#6b8072"><a href="#031901" label="[03:19:01]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://docs.factorcode.org/content/article-combinators.html">https://docs.factorcode.org/content/article-combinators.html</a> </span></div><div class="line" id="031906"><span class="nick" style="color:#6b8072"><a href="#031906" label="[03:19:06]">&lt;drakonis&gt;</a></span><span class="message">these kinds of combinators, that is.</span></div><div class="line" id="031914"><span class="nick" style="color:#2e2a4a"><a href="#031914" label="[03:19:14]">&lt;muurkha&gt;</a></span><span class="message">they do make it shorter because you can write in point-free style</span></div><div class="line" id="032112"><span class="nick" style="color:#6b8072"><a href="#032112" label="[03:21:12]">&lt;drakonis&gt;</a></span><span class="message">there are some that do improve readability because you don't have to do as much stack munging to do basic things</span></div><div class="line" id="032354"><span class="nick" style="color:#6b8072"><a href="#032354" label="[03:23:54]">&lt;drakonis&gt;</a></span><span class="message">but it is not something absolute</span></div><div class="line" id="032516"><span class="nick" style="color:#6b8072"><a href="#032516" label="[03:25:16]">&lt;drakonis&gt;</a></span><span class="message">mind you this is coming from me and my lack of experience</span></div><div class="line" id="033305"><span class="nick" style="color:#2e2a4a"><a href="#033305" label="[03:33:05]">&lt;muurkha&gt;</a></span><span class="message">I think it's a good exercise to write some Forth without any stack manipulations except DROP</span></div><div class="line" id="033351"><span class="nick" style="color:#2e2a4a"><a href="#033351" label="[03:33:51]">&lt;muurkha&gt;</a></span><span class="message">because the first thing everyone does is try to use the stack for local variables</span></div><div class="line" id="033426"><span class="nick" style="color:#2e2a4a"><a href="#033426" label="[03:34:26]">&lt;muurkha&gt;</a></span><span class="message">and this is always possible in theory but unnecessarily difficult to debug</span></div><div class="line" id="033503"><span class="nick" style="color:#2e2a4a"><a href="#033503" label="[03:35:03]">&lt;muurkha&gt;</a></span><span class="message">like, it's probably okay to store one local variable on the operand stack and one on the return stack?  but to start out, don't, use zero</span></div><div class="line" id="033649"><span class="nick" style="color:#2e2a4a"><a href="#033649" label="[03:36:49]">&lt;muurkha&gt;</a></span><span class="message">the return stack is the minimal mechanism for recursive subroutines.  arguably if your subroutines don't recurse you only need one return address cell for each one, and e.g. MIX and the PDP-8 did work that way normally, but the return stack is both more space-efficient and arguably simpler</span></div><div class="line" id="033703"><span class="nick" style="color:#2e2a4a"><a href="#033703" label="[03:37:03]">&lt;muurkha&gt;</a></span><span class="message">the operand stack is the minimal mechanism for nesting expressions</span></div><div class="line" id="033755"><span class="nick" style="color:#2e2a4a"><a href="#033755" label="[03:37:55]">&lt;muurkha&gt;</a></span><span class="message">so that you can write m*x + b or m x * b + instead of mul m, x, t1; add t1, b, t2</span></div><div class="line" id="033836"><span class="nick" style="color:#2e2a4a"><a href="#033836" label="[03:38:36]">&lt;muurkha&gt;</a></span><span class="message">this makes it pretty trivial to translate a line of C to a word of Forth, except that you have to choose a unique name</span></div><div class="line" id="033916"><span class="nick" style="color:#6b8072"><a href="#033916" label="[03:39:16]">&lt;drakonis&gt;</a></span><span class="message">append a randomly generated string to the name when generating</span></div><div class="line" id="033925"><span class="nick" style="color:#6b8072"><a href="#033925" label="[03:39:25]">&lt;drakonis&gt;</a></span><span class="message">gensym, basically?</span></div><div class="line" id="034014"><span class="nick" style="color:#2e2a4a"><a href="#034014" label="[03:40:14]">&lt;muurkha&gt;</a></span><span class="message">no, choose a name you can remember</span></div><div class="line" id="034050"><span class="nick" style="color:#2e2a4a"><a href="#034050" label="[03:40:50]">&lt;muurkha&gt;</a></span><span class="message">it doesn't have to be globally unique, but probably unique within a wordlist/vocabulary is a good idea</span></div><div class="line" id="034305"><span class="nick" style="color:#2e2a4a"><a href="#034305" label="[03:43:05]">&lt;muurkha&gt;</a></span><span class="message">like, take the line     const char *str = _Py_SourceAsString(source, &quot;symtabl</span></div><div class="line" id="034308"><span class="nick" style="color:#2e2a4a"><a href="#034308" label="[03:43:08]">&lt;muurkha&gt;</a></span><span class="message">e&quot;, &quot;string or bytes&quot;, &amp;cf, &amp;source_copy);</span></div><div class="line" id="034443"><span class="nick" style="color:#2e2a4a"><a href="#034443" label="[03:44:43]">&lt;muurkha&gt;</a></span><span class="message">you can translate that to something like : string-to-source  source @ c&quot; symtable&quot; c&quot; string or bytes&quot; cf source-copy source-as-string ;</span></div><div class="line" id="034546"><span class="nick" style="color:#2e2a4a"><a href="#034546" label="[03:45:46]">&lt;muurkha&gt;</a></span><span class="message">source, cf, and source-copy are VARIABLEs here</span></div><div class="line" id="034741"><span class="nick" style="color:#6b8072"><a href="#034741" label="[03:47:41]">&lt;drakonis&gt;</a></span><span class="message">i see, its sufficiently understandable</span></div><div class="line" id="034808"><span class="nick" style="color:#6b8072"><a href="#034808" label="[03:48:08]">&lt;drakonis&gt;</a></span><span class="message">alright, i think i'll go now, its getting late here</span></div><div class="line" id="034811"><span class="nick" style="color:#2e2a4a"><a href="#034811" label="[03:48:11]">&lt;muurkha&gt;</a></span><span class="message">goodnight</span></div><div class="line" id="034831"><span class="nick" style="color:#6b8072"><a href="#034831" label="[03:48:31]">&lt;drakonis&gt;</a></span><span class="message">thanks</span></div><div class="line" id="154938"><span class="nick" style="color:#6b8072"><a href="#154938" label="[15:49:38]">&lt;drakonis&gt;</a></span><span class="message">a conversation at ##forth gave me a silly idea, writing a IR layer for a forth bootstrapping kit, in which it can output generated assembly for multiple ISAs</span></div><div class="line" id="155131"><span class="nick" style="color:#6b8072"><a href="#155131" label="[15:51:31]">&lt;drakonis&gt;</a></span><span class="message">using forth for assembling binaries for fun and non profit</span></div><div class="line" id="155623"><span class="nick" style="color:#8dd3c7"><a href="#155623" label="[15:56:23]">&lt;stikonas&gt;</a></span><span class="message">you can probably use macro assembler such as M0 to implement IR layer...</span></div><div class="line" id="155705"><span class="nick" style="color:#8dd3c7"><a href="#155705" label="[15:57:05]">&lt;stikonas&gt;</a></span><span class="message">but we haven't tried that with cc_x86...</span></div><div class="line" id="155732"><span class="nick" style="color:#6b8072"><a href="#155732" label="[15:57:32]">&lt;drakonis&gt;</a></span><span class="message">the point would be to then use forth as an assembler for generating arbitrary binaries</span></div><div class="line" id="155734"><span class="nick" style="color:#6b8072"><a href="#155734" label="[15:57:34]">&lt;drakonis&gt;</a></span><span class="message">it'd be something</span></div><div class="line" id="160637"><span class="nick" style="color:#80b1d3"><a href="#160637" label="[16:06:37]">&lt;river&gt;</a></span><span class="message">that is a great idea</span></div><div class="line" id="161010"><span class="nick" style="color:#6b8072"><a href="#161010" label="[16:10:10]">&lt;drakonis&gt;</a></span><span class="message">so it is, i suppose</span></div><div class="line" id="161020"><span class="nick" style="color:#6b8072"><a href="#161020" label="[16:10:20]">&lt;drakonis&gt;</a></span><span class="message">just throwing out the inspiration</span></div><div class="line" id="161205"><span class="nick" style="color:#80b1d3"><a href="#161205" label="[16:12:05]">&lt;river&gt;</a></span><span class="message">we experimented with forth early on but unfortunately it wasnt used</span></div><div class="line" id="161334"><span class="nick" style="color:#6b8072"><a href="#161334" label="[16:13:34]">&lt;drakonis&gt;</a></span><span class="message">i've seen that on stage0</span></div><div class="line" id="161417"><span class="nick" style="color:#6b8072"><a href="#161417" label="[16:14:17]">&lt;drakonis&gt;</a></span><span class="message">it was shelved in stage2</span></div><div class="line" id="161618"><span class="nick" style="color:#6b8072"><a href="#161618" label="[16:16:18]">&lt;drakonis&gt;</a></span><span class="message">the readme has a fairly antagonistic tone</span></div><div class="line" id="161725"><span class="nick" style="color:#6b8072"><a href="#161725" label="[16:17:25]">&lt;drakonis&gt;</a></span><span class="message">the current iteration was written 2 years into the project anyways</span></div><div class="line" id="161850"><span class="nick" style="color:#6b8072"><a href="#161850" label="[16:18:50]">&lt;drakonis&gt;</a></span><span class="message">i am not complaining about any of this, mind you.</span></div><div class="line" id="162302"><span class="nick" style="color:#8dd3c7"><a href="#162302" label="[16:23:02]">&lt;stikonas&gt;</a></span><span class="message">stage0 hasn't seen much work recently anyway</span></div><div class="line" id="162310"><span class="nick" style="color:#8dd3c7"><a href="#162310" label="[16:23:10]">&lt;stikonas&gt;</a></span><span class="message">everybody was working on stage0-posix</span></div><div class="line" id="162847"><span class="nick" style="color:#6b8072"><a href="#162847" label="[16:28:47]">&lt;drakonis&gt;</a></span><span class="message">fair.</span></div><div class="line" id="180029"><span class="nick" style="color:#6d2462"><a href="#180029" label="[18:00:29]">&lt;[exa]&gt;</a></span><span class="message">drakonis: actually forth may be viewed as assembly, it is possible to have a forth implementation where the forth words directly translate to instructions</span></div><div class="line" id="181504"><span class="nick" style="color:#6b8072"><a href="#181504" label="[18:15:04]">&lt;drakonis&gt;</a></span><span class="message">indeed, but it is only useful if i actually bootstrap the implementation</span></div><div class="line" id="181727"><span class="nick" style="color:#6d2462"><a href="#181727" label="[18:17:27]">&lt;[exa]&gt;</a></span><span class="message">:heaviestly_thinking_face:</span></div><div class="line" id="181752"><span class="nick" style="color:#6b8072"><a href="#181752" label="[18:17:52]">&lt;drakonis&gt;</a></span><span class="message">ha</span></div><div class="line" id="181756"><span class="nick" style="color:#6b8072"><a href="#181756" label="[18:17:56]">&lt;drakonis&gt;</a></span><span class="message">okay</span></div><div class="line" id="181836"><span class="nick" style="color:#6b8072"><a href="#181836" label="[18:18:36]">&lt;drakonis&gt;</a></span><span class="message">i would like to amend that</span></div><div class="line" id="182231"><span class="nick" style="color:#6b8072"><a href="#182231" label="[18:22:31]">&lt;drakonis&gt;</a></span><span class="message">if i actually get to the initial state, anything is possible, including writing an assembler powered by forth</span></div><div class="line" id="182238"><span class="nick" style="color:#6b8072"><a href="#182238" label="[18:22:38]">&lt;drakonis&gt;</a></span><span class="message">which in turn can output anything i want into a binary</span></div><div class="line" id="182526"><span class="nick" style="color:#6d2462"><a href="#182526" label="[18:25:26]">&lt;[exa]&gt;</a></span><span class="message">there are dirty tricks you can do there to save a lot of code and that don't generally hurt much</span></div><div class="line" id="182540"><span class="nick" style="color:#6d2462"><a href="#182540" label="[18:25:40]">&lt;[exa]&gt;</a></span><span class="message">such as having only fixed-size 8character words (or 7+space)</span></div><div class="line" id="182620"><span class="nick" style="color:#6d2462"><a href="#182620" label="[18:26:20]">&lt;[exa]&gt;</a></span><span class="message">I'm suddenly inspired to waste a weekend on this.</span></div><div class="line" id="183317"><span class="nick" style="color:#2e2a4a"><a href="#183317" label="[18:33:17]">&lt;muurkha&gt;</a></span><span class="message">awesome :)</span></div><div class="line" id="183348"><span class="nick" style="color:#2e2a4a"><a href="#183348" label="[18:33:48]">&lt;muurkha&gt;</a></span><span class="message">the traditional format, incidentally, was length + first three characters</span></div><div class="line" id="183437"><span class="nick" style="color:#2e2a4a"><a href="#183437" label="[18:34:37]">&lt;muurkha&gt;</a></span><span class="message">whi-- fit- in 32 bit- and is eno--- inf-------- to mos--- und------- eng---- tex-</span></div><div class="line" id="183531"><span class="nick" style="color:#2e2a4a"><a href="#183531" label="[18:35:31]">&lt;muurkha&gt;</a></span><span class="message">for StoneKnifeForth I just used the first character to save myself the work of writing a hash table</span></div><div class="line" id="183549"><span class="nick" style="color:#2e2a4a"><a href="#183549" label="[18:35:49]">&lt;muurkha&gt;</a></span><span class="message">probably I should have just used linear search</span></div><div class="line" id="183758"><span class="nick" style="color:#6d2462"><a href="#183758" label="[18:37:58]">&lt;[exa]&gt;</a></span><span class="message">lol cool</span></div><div class="line" id="195635"><span class="nick" style="color:#234e69"><a href="#195635" label="[19:56:35]">&lt;Irvise_&gt;</a></span><span class="message">theruran: I can confirm that the first GCC release with Ada files was 3.1</span></div><div class="line" id="195702"><span class="nick" style="color:#234e69"><a href="#195702" label="[19:57:02]">&lt;Irvise_&gt;</a></span><span class="message">I am now going to look into what it was required for compilation.</span></div><div class="line" id="200750"><span class="nick" style="color:#234e69"><a href="#200750" label="[20:07:50]">&lt;Irvise_&gt;</a></span><span class="message">From the GCC 3.1 documentation regading Ada:</span></div><div class="line" id="200759"><span class="nick" style="color:#234e69"><a href="#200759" label="[20:07:59]">&lt;Irvise_&gt;</a></span><span class="message">&quot;... (full message at &lt;<a rel="nofollow" href="https://libera.ems.host/_matrix/media/v3/download/libera.chat/b758676adfae8bb7d0281206eeff18a9d1ea9d80">https://libera.ems.host/_matrix/media/v3/download/libera.chat/b758676adfae8bb7d0281206eeff18a9d1ea9d80</a>&gt;) </span></div><div class="line" id="201936"><span class="nick" style="color:#234e69"><a href="#201936" label="[20:19:36]">&lt;Irvise_&gt;</a></span><span class="message">GNAT-3.15p also indicates that you need a previous working GNAT installation.</span></div><div class="line" id="202700"><span class="nick" style="color:#2e2a4a"><a href="#202700" label="[20:27:00]">&lt;muurkha&gt;</a></span><span class="message">your message seems to have gotten truncated by Matrix</span></div><div class="line" id="202719"><span class="nick" style="color:#2e2a4a"><a href="#202719" label="[20:27:19]">&lt;muurkha&gt;</a></span><span class="message">maybe you could paste a less-than-511-byte passage?</span></div><div class="line" id="202755"><span class="nick" style="color:#6c3d55"><a href="#202755" label="[20:27:55]">&lt;probie&gt;</a></span><span class="message">I think it's because it's multiline</span></div><div class="line" id="205842"><span class="nick" style="color:#d9d9d9"><a href="#205842" label="[20:58:42]">&lt;theruran&gt;</a></span><span class="message">&quot;@section Building the Ada compiler - In order to build GNAT, the Ada compiler, you need a working GNAT compiler (GNAT version 3.13 or later, or GCC version 3.1 or later), since the Ada front end is written in Ada (with some GNAT-specific extensions), and GNU make.&quot;</span></div><div class="line" id="210006"><span class="nick" style="color:#d9d9d9"><a href="#210006" label="[21:00:06]">&lt;theruran&gt;</a></span><span class="message">in order to build GNAT, you need to pull an older GNAT out of your ass</span></div><div class="line" id="210038"><span class="nick" style="color:#d9d9d9"><a href="#210038" label="[21:00:38]">&lt;theruran&gt;</a></span><span class="message">it's free software!</span></div><div class="line" id="210246"><span class="nick" style="color:#6c3d55"><a href="#210246" label="[21:02:46]">&lt;probie&gt;</a></span><span class="message">just roll your own Ada compiler to build it</span></div><div class="line" id="210434"><span class="nick" style="color:#d9d9d9"><a href="#210434" label="[21:04:34]">&lt;theruran&gt;</a></span><span class="message">just need a hyperbolic time chamber</span></div><div class="line" id="211348"><span class="nick" style="color:#6c3d55"><a href="#211348" label="[21:13:48]">&lt;probie&gt;</a></span><span class="message">I think I'll give writing an Ada compiler a go, just right after I finish my Haskell compiler</span></div><div class="line" id="211414"><span class="nick" style="color:#6c3d55"><a href="#211414" label="[21:14:14]">&lt;probie&gt;</a></span><span class="message">So, should be ready in ~20 years</span></div><div class="line" id="211843"><span class="nick" style="color:#d9d9d9"><a href="#211843" label="[21:18:43]">&lt;theruran&gt;</a></span><span class="message">;)</span></div><div class="line" id="212749"><span class="nick" style="color:#8dd3c7"><a href="#212749" label="[21:27:49]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet or mescc didn't take 20 years...</span></div><div class="line" id="220100"><span class="nick" style="color:#6c3d55"><a href="#220100" label="[22:01:00]">&lt;probie&gt;</a></span><span class="message">That's true. But ghc is a very different beast to tcc - I don't think there's any released version which has ever been build-able by other Haskell implementations.</span></div><div class="line" id="220646"><span class="nick" style="color:#8dd3c7"><a href="#220646" label="[22:06:46]">&lt;stikonas&gt;</a></span><span class="message">yes, C is one of the simplest and lowest level languages...</span></div><div class="line" id="220701"><span class="nick" style="color:#8dd3c7"><a href="#220701" label="[22:07:01]">&lt;stikonas&gt;</a></span><span class="message">still, it's probably not 20 years</span></div><div class="line" id="220729"><span class="nick" style="color:#8dd3c7"><a href="#220729" label="[22:07:29]">&lt;stikonas&gt;</a></span><span class="message">one could probably convert some earlier version of GHC to C in a year</span></div><div class="line" id="220739"><span class="nick" style="color:#8dd3c7"><a href="#220739" label="[22:07:39]">&lt;stikonas&gt;</a></span><span class="message">(assuming full-time work)</span></div><div class="line" id="220755"><span class="nick" style="color:#8dd3c7"><a href="#220755" label="[22:07:55]">&lt;stikonas&gt;</a></span><span class="message">I think it's somewhere around 600k lines of code</span></div><div class="line" id="220840"><span class="nick" style="color:#8dd3c7"><a href="#220840" label="[22:08:40]">&lt;stikonas&gt;</a></span><span class="message">hmm, that would be 2k lines of code per day</span></div><div class="line" id="220907"><span class="nick" style="color:#6c3d55"><a href="#220907" label="[22:09:07]">&lt;probie&gt;</a></span><span class="message">Well, 10 years, since there were two (Ada, and GHC), and that was part-time, so 2 years (but that was also meant as a joke, and not a serious estimate)</span></div><div class="line" id="220919"><span class="nick" style="color:#6c3d55"><a href="#220919" label="[22:09:19]">&lt;probie&gt;</a></span><span class="message">s/GHC/Haskell/</span></div><div class="line" id="221202"><span class="nick" style="color:#6c3d55"><a href="#221202" label="[22:12:02]">&lt;probie&gt;</a></span><span class="message">also slightly biased towards a high-estimate because the wiki <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Discarded_options_and_why">https://bootstrapping.miraheze.org/wiki/Discarded_options_and_why</a>  gives 15 years for a team of 20 developers and I don't want to be shouted at</span></div><div class="line" id="221342"><span class="nick" style="color:#8dd3c7"><a href="#221342" label="[22:13:42]">&lt;stikonas&gt;</a></span><span class="message">&quot;Haskell in assembly from scratch&quot;. That will definitely take longer than writing it in a higher level language</span></div><div class="line" id="221402"><span class="nick" style="color:#8dd3c7"><a href="#221402" label="[22:14:02]">&lt;stikonas&gt;</a></span><span class="message">probably C++ would be faster</span></div><div class="line" id="231928"><span class="nick" style="color:#6d2462"><a href="#231928" label="[23:19:28]">&lt;[exa]&gt;</a></span><span class="message">haskell compilation ain't that hard but the compiler frontend with all the trick is insane</span></div><div class="line" id="232336"><span class="nick" style="color:#6d2462"><a href="#232336" label="[23:23:36]">&lt;[exa]&gt;</a></span><span class="message">(and most of the utility is in the insane frontend)</span></div><div class="line" id="233000"><span class="nick" style="color:#6c3d55"><a href="#233000" label="[23:30:00]">&lt;probie&gt;</a></span><span class="message">Possibly? Naively I'd say once you've got something like Core, it's straightforward (SPJ wrote a tutorial on compiling lazy languages, and shows that it's remarkably simple to turn something Core-like into code for the g-machine, which is itself easy to turn into assembly for most architectures)</span></div><div class="line" id="233503"><span class="nick" style="color:#6c3d55"><a href="#233503" label="[23:35:03]">&lt;probie&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/wp-content/uploads/1992/01/student.pdf">https://www.microsoft.com/en-us/research/wp-content/uploads/1992/01/student.pdf</a>  if anyone is curious about the tutorial</span></div><div class="line" id="233639"><span class="nick" style="color:#6c3d55"><a href="#233639" label="[23:36:39]">&lt;probie&gt;</a></span><span class="message">(it is rather dated though)</span></div><div class="line" id="234153"><span class="nick" style="color:#2e2a4a"><a href="#234153" label="[23:41:53]">&lt;muurkha&gt;</a></span><span class="message">I don't think C is especially simple</span></div><div class="line" id="234246"><span class="nick" style="color:#2e2a4a"><a href="#234246" label="[23:42:46]">&lt;muurkha&gt;</a></span><span class="message">probie: thanks!</span></div><div class="line" id="234343"><span class="nick" style="color:#2e2a4a"><a href="#234343" label="[23:43:43]">&lt;muurkha&gt;</a></span><span class="message">oh yes, &quot;Implementing Functional Languages: a tutorial&quot;</span></div><div class="line" id="234414"><span class="nick" style="color:#2e2a4a"><a href="#234414" label="[23:44:14]">&lt;muurkha&gt;</a></span><span class="message">this is what I was working from when I implemented my compiler from lambda calculus to combinator graphs</span></div><div class="line" id="234424"><span class="nick" style="color:#2e2a4a"><a href="#234424" label="[23:44:24]">&lt;muurkha&gt;</a></span><span class="message">but I didn't finish reading it</span></div><div class="line" id="235158"><span class="nick" style="color:#6c3d55"><a href="#235158" label="[23:51:58]">&lt;probie&gt;</a></span><span class="message">muurkha: C isn't that simple - the C17 standard is about 500 pages, but the Ada2012 reference manual is nearly twice that (admittedly not quite the same, but I can't find the spec for free anywhere and I'm not paying for it)</span></div><div class="line" id="235238"><span class="nick" style="color:#234e69"><a href="#235238" label="[23:52:38]">&lt;Irvise_&gt;</a></span><span class="message">probie: the Ada spec is free! :D give me a sec</span></div><div class="line" id="235321"><span class="nick" style="color:#234e69"><a href="#235321" label="[23:53:21]">&lt;Irvise_&gt;</a></span><span class="message">Here <a rel="nofollow" href="http://www.ada-auth.org/arm.html">http://www.ada-auth.org/arm.html</a> </span></div><div class="line" id="235354"><span class="nick" style="color:#234e69"><a href="#235354" label="[23:53:54]">&lt;Irvise_&gt;</a></span><span class="message">The 2022 standard is still not published by the ARG, but it was released by ISO a couple of days ago</span></div><div class="line" id="235651"><span class="nick" style="color:#6c3d55"><a href="#235651" label="[23:56:51]">&lt;probie&gt;</a></span><span class="message">&gt; The text of the Ada Reference manual is the source of the formal Ada Programming Language Standards.</span></div><div class="line" id="235702"><span class="nick" style="color:#6c3d55"><a href="#235702" label="[23:57:02]">&lt;probie&gt;</a></span><span class="message">Huh, for some reason I'd just assumed it was the other way around</span></div><br /></div></body></html>