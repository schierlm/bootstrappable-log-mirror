<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="051452"><span class="nick" style="color:#389600"><a href="#051452" label="[05:14:52]">&lt;roconnor&gt;</a></span><span class="message">It's taking me 3 times around tcc and musl ofr musl's libc to reach a fixed point.</span></div><div class="line" id="073200"><span class="nick" style="color:#8dd3c7"><a href="#073200" label="[07:32:00]">&lt;muurkha&gt;</a></span><span class="message">huh, that's not good</span></div><div class="line" id="105602"><span class="nick" style="color:#2e2a4a"><a href="#105602" label="[10:56:02]">&lt;fossy&gt;</a></span><span class="message">janneke: builtin formal verification sounds very interesting! what does that entail</span></div><div class="line" id="110138"><span class="nick" style="color:#2e2a4a"><a href="#110138" label="[11:01:38]">&lt;fossy&gt;</a></span><span class="message">FlaminWalrus: IMO, the biggest software dependency we don't really have a solution to is writing to a storage medium to read the bootstrap from</span></div><div class="line" id="110150"><span class="nick" style="color:#2e2a4a"><a href="#110150" label="[11:01:50]">&lt;fossy&gt;</a></span><span class="message">and the distribution of the material required for the bootstrap</span></div><div class="line" id="110222"><span class="nick" style="color:#2e2a4a"><a href="#110222" label="[11:02:22]">&lt;fossy&gt;</a></span><span class="message">putting the bootstrap onto a storage medium obviously requires software - and i don't have a clue how to remove that</span></div><div class="line" id="111522"><span class="nick" style="color:#6b8072"><a href="#111522" label="[11:15:22]">&lt;janneke&gt;</a></span><span class="message">fossy: a simple component-based programming language that separates control from data (and not looking at data for now), <a rel="nofollow" href="https://dezyne.org">https://dezyne.org</a> </span></div><div class="line" id="111732"><span class="nick" style="color:#6b8072"><a href="#111732" label="[11:17:32]">&lt;janneke&gt;</a></span><span class="message">components and their interfaces are translated into mCRL2 code (<a rel="nofollow" href="https://mcrl2.org">https://mcrl2.org</a>)  to produce LTSs to prove a number of characteristics</span></div><div class="line" id="113329"><span class="nick" style="color:#2e2a4a"><a href="#113329" label="[11:33:29]">&lt;fossy&gt;</a></span><span class="message">pretty cool</span></div><div class="line" id="114303"><span class="nick" style="color:#80b1d3"><a href="#114303" label="[11:43:03]">&lt;FlaminWalrus&gt;</a></span><span class="message">fossy: I feel like dedicated, application-specific auditable hardware is the only solution for this---say, a disk that exposes a UART as well as a SATA interface, and an electromechanical keyboard or an 8-bit microscope-auditable, switch-programmed microcontroller that writes the boot code via the UART</span></div><div class="line" id="114322"><span class="nick" style="color:#6b8072"><a href="#114322" label="[11:43:22]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="114404"><span class="nick" style="color:#80b1d3"><a href="#114404" label="[11:44:04]">&lt;FlaminWalrus&gt;</a></span><span class="message">Which means it borders on the whole hardware can of worms I'm content to put off until we figure out the software side</span></div><div class="line" id="120538"><span class="nick" style="color:#6d2462"><a href="#120538" label="[12:05:38]">&lt;Christoph[m]&gt;</a></span><span class="message">Would it be possible to prove correctness of hardware with software tests? Or is that impossible because a system cannot prove its own correctness?</span></div><div class="line" id="122656"><span class="nick" style="color:#234e69"><a href="#122656" label="[12:26:56]">&lt;stikonas[m]&gt;</a></span><span class="message">well, to strictly &quot;prove&quot; I guess it's impossible. But in practice that's what hardware developers do</span></div><div class="line" id="122709"><span class="nick" style="color:#234e69"><a href="#122709" label="[12:27:09]">&lt;stikonas[m]&gt;</a></span><span class="message">(and also software developers when testing software)</span></div><div class="line" id="122726"><span class="nick" style="color:#234e69"><a href="#122726" label="[12:27:26]">&lt;stikonas[m]&gt;</a></span><span class="message">it gives you some confidence that things are working</span></div><div class="line" id="122746"><span class="nick" style="color:#234e69"><a href="#122746" label="[12:27:46]">&lt;stikonas[m]&gt;</a></span><span class="message">but it won't be a proof level confidence</span></div><div class="line" id="122841"><span class="nick" style="color:#234e69"><a href="#122841" label="[12:28:41]">&lt;stikonas[m]&gt;</a></span><span class="message">you can't detect hardware gaming your software tests...</span></div><div class="line" id="125521"><span class="nick" style="color:#8dd3c7"><a href="#125521" label="[12:55:21]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's impossible to get reasonable confidence that there isn't a malicious backdoor</span></div><div class="line" id="125602"><span class="nick" style="color:#8dd3c7"><a href="#125602" label="[12:56:02]">&lt;muurkha&gt;</a></span><span class="message">we might be able to solve that with homeomorphic encryption</span></div><div class="line" id="125633"><span class="nick" style="color:#8dd3c7"><a href="#125633" label="[12:56:33]">&lt;muurkha&gt;</a></span><span class="message">where the potentially backdoored hardware can't tell what it's running</span></div><div class="line" id="125808"><span class="nick" style="color:#8dd3c7"><a href="#125808" label="[12:58:08]">&lt;muurkha&gt;</a></span><span class="message">encryption can also, more practically, help a lot with the storage-medium problem</span></div><div class="line" id="125835"><span class="nick" style="color:#8dd3c7"><a href="#125835" label="[12:58:35]">&lt;muurkha&gt;</a></span><span class="message">I mean we're already doing that by checking hashes</span></div><div class="line" id="125938"><span class="nick" style="color:#8dd3c7"><a href="#125938" label="[12:59:38]">&lt;muurkha&gt;</a></span><span class="message">but if you encrypt everything that goes to the storage medium with authenticated encryption using a key the attacker doesn't know, the storage medium can't subvert the bootstrap</span></div><div class="line" id="130029"><span class="nick" style="color:#8dd3c7"><a href="#130029" label="[13:00:29]">&lt;muurkha&gt;</a></span><span class="message">in software, formal proofs *can* give you reasonable confidence there isn't a malicious backdoor, but not in hardware</span></div><div class="line" id="133748"><span class="nick" style="color:#6c3d55"><a href="#133748" label="[13:37:48]">&lt;river&gt;</a></span><span class="message">I am not sure if that approach will help</span></div><div class="line" id="133752"><span class="nick" style="color:#d9d9d9"><a href="#133752" label="[13:37:52]">&lt;oriansj&gt;</a></span><span class="message">FlaminWalrus: well if one has a trusted boot rom, it wouldn't take much to have a simple program that reads from some interface and just dumps it onto some disk. probably just a few hundred bytes.</span></div><div class="line" id="133814"><span class="nick" style="color:#6c3d55"><a href="#133814" label="[13:38:14]">&lt;river&gt;</a></span><span class="message">it may be better to try to build safe hardware frmo scratch</span></div><div class="line" id="133849"><span class="nick" style="color:#6c3d55"><a href="#133849" label="[13:38:49]">&lt;river&gt;</a></span><span class="message">or maybe run the same thing on a variety of hardware. this would demand bytecode vms rather than native code though. maybe not an option</span></div><div class="line" id="133927"><span class="nick" style="color:#d9d9d9"><a href="#133927" label="[13:39:27]">&lt;oriansj&gt;</a></span><span class="message">Nexus Intruder Class compromised hardware is just a harder problem in general</span></div><div class="line" id="134135"><span class="nick" style="color:#d9d9d9"><a href="#134135" label="[13:41:35]">&lt;oriansj&gt;</a></span><span class="message">(hardware that subverts software, to ensure next generation of hardware is subverted too)</span></div><div class="line" id="134158"><span class="nick" style="color:#6c3d55"><a href="#134158" label="[13:41:58]">&lt;river&gt;</a></span><span class="message">software may be able to identify errors in hardware, but it cannot prove a lack of errors</span></div><div class="line" id="134713"><span class="nick" style="color:#bc80bd"><a href="#134713" label="[13:47:13]">&lt;stikonas_&gt;</a></span><span class="message">exactly, software is in lower privilege level if you think of privilege rings</span></div><div class="line" id="135600"><span class="nick" style="color:#3c5b35"><a href="#135600" label="[13:56:00]">&lt;probie&gt;</a></span><span class="message">Is it currently possible to go from Hex0 to a modern gcc on arm64, or are there some steps missing?</span></div><div class="line" id="135747"><span class="nick" style="color:#af8d2f"><a href="#135747" label="[13:57:47]">&lt;stikonas&gt;</a></span><span class="message">probie: some steps are missing</span></div><div class="line" id="135805"><span class="nick" style="color:#af8d2f"><a href="#135805" label="[13:58:05]">&lt;stikonas&gt;</a></span><span class="message">I think mostly mes and tcc</span></div><div class="line" id="135817"><span class="nick" style="color:#af8d2f"><a href="#135817" label="[13:58:17]">&lt;stikonas&gt;</a></span><span class="message">we have very early steps hex0 to M2-Planet</span></div><div class="line" id="135850"><span class="nick" style="color:#af8d2f"><a href="#135850" label="[13:58:50]">&lt;stikonas&gt;</a></span><span class="message">then currently you can only build mes from 32-bit stage0-posix</span></div><div class="line" id="135901"><span class="nick" style="color:#af8d2f"><a href="#135901" label="[13:59:01]">&lt;stikonas&gt;</a></span><span class="message">(that migth change in the next release of mes, though probably will start with amd64)</span></div><div class="line" id="135942"><span class="nick" style="color:#af8d2f"><a href="#135942" label="[13:59:42]">&lt;stikonas&gt;</a></span><span class="message">probie: though even stage0-posix arm64 support might benefit from some improvements if somebody is willing to do some work</span></div><div class="line" id="140129"><span class="nick" style="color:#af8d2f"><a href="#140129" label="[14:01:29]">&lt;stikonas&gt;</a></span><span class="message">so for now only 32-bit x86</span></div><div class="line" id="140544"><span class="nick" style="color:#2e2a4a"><a href="#140544" label="[14:05:44]">&lt;fossy&gt;</a></span><span class="message">IMO, if you are approaching bootstrapping from a trust perspective, you need to define well WHAT your trust goals are (for example, one of the reasons i like bootstrapping, is greatly minimising the infrastructure i have to trust in all the seed binaries)</span></div><div class="line" id="140606"><span class="nick" style="color:#2e2a4a"><a href="#140606" label="[14:06:06]">&lt;fossy&gt;</a></span><span class="message">i don't think it's reasonable for any one person to ever have complete trust though. modern systems have far too much code for someone to ever audit individually</span></div><div class="line" id="140641"><span class="nick" style="color:#2e2a4a"><a href="#140641" label="[14:06:41]">&lt;fossy&gt;</a></span><span class="message">and ofc, there are many reasons for bootstrapping outside of simply trust</span></div><div class="line" id="142609"><span class="nick" style="color:#3c5b35"><a href="#142609" label="[14:26:09]">&lt;probie&gt;</a></span><span class="message">Is there any sort of plan to cut tcc out and have mes directly compile gcc?</span></div><div class="line" id="143201"><span class="nick" style="color:#6b8072"><a href="#143201" label="[14:32:01]">&lt;janneke&gt;</a></span><span class="message">probie: no</span></div><div class="line" id="143556"><span class="nick" style="color:#6b8072"><a href="#143556" label="[14:35:56]">&lt;janneke&gt;</a></span><span class="message">feel free to go work on that, for the coming years i have other priorities</span></div><div class="line" id="143641"><span class="nick" style="color:#2e2a4a"><a href="#143641" label="[14:36:41]">&lt;fossy&gt;</a></span><span class="message">probie: perhaps in the very long term, but that would be a *LOT* of work</span></div><div class="line" id="143722"><span class="nick" style="color:#2e2a4a"><a href="#143722" label="[14:37:22]">&lt;fossy&gt;</a></span><span class="message">you'd have to tug both ways (simplifying gcc toward mes, but the much larger one, is expanding the constructs of mes toward gcc)</span></div><div class="line" id="144131"><span class="nick" style="color:#6b8072"><a href="#144131" label="[14:41:31]">&lt;janneke&gt;</a></span><span class="message">also, mes would have to change from an intepreter into a (pretty good) compiler, tcc is possibly two orders of magnitude faster than mescc</span></div><div class="line" id="145248"><span class="nick" style="color:#6c3d55"><a href="#145248" label="[14:52:48]">&lt;river&gt;</a></span><span class="message">probie: is there a reason to want to do that?</span></div><div class="line" id="151947"><span class="nick" style="color:#389600"><a href="#151947" label="[15:19:47]">&lt;roconnor&gt;</a></span><span class="message">FlaminWalrus: Do we have a free formal spec for (a subset of) x86 available?  I'm aware that the CompCert folks have one, but it didn't look free when I glanced at it.</span></div><div class="line" id="153323"><span class="nick" style="color:#af8d2f"><a href="#153323" label="[15:33:23]">&lt;stikonas&gt;</a></span><span class="message">probie: what might make sense is cutting old tcc from the boot chain and going straight for the newer</span></div><div class="line" id="153330"><span class="nick" style="color:#af8d2f"><a href="#153330" label="[15:33:30]">&lt;stikonas&gt;</a></span><span class="message">but I don't know how much work on mes side that would need</span></div><div class="line" id="153348"><span class="nick" style="color:#af8d2f"><a href="#153348" label="[15:33:48]">&lt;stikonas&gt;</a></span><span class="message">I don't think mescc has been gaining any new features recently</span></div><div class="line" id="153412"><span class="nick" style="color:#af8d2f"><a href="#153412" label="[15:34:12]">&lt;stikonas&gt;</a></span><span class="message">possibly at the exception of support for new arches</span></div><div class="line" id="153415"><span class="nick" style="color:#af8d2f"><a href="#153415" label="[15:34:15]">&lt;stikonas&gt;</a></span><span class="message">but not new C features</span></div><div class="line" id="153421"><span class="nick" style="color:#6b8072"><a href="#153421" label="[15:34:21]">&lt;janneke&gt;</a></span><span class="message">stikonas +1</span></div><div class="line" id="153517"><span class="nick" style="color:#6b8072"><a href="#153517" label="[15:35:17]">&lt;janneke&gt;</a></span><span class="message">there have been a few bugfixes but mescc hasn't been touched, really, since it first built a working (bootstrappable-)tcc</span></div><div class="line" id="153521"><span class="nick" style="color:#af8d2f"><a href="#153521" label="[15:35:21]">&lt;stikonas&gt;</a></span><span class="message">and for now we are waiting for other tings to land in mes 0.25 anyway...</span></div><div class="line" id="153640"><span class="nick" style="color:#6b8072"><a href="#153640" label="[15:36:40]">&lt;janneke&gt;</a></span><span class="message">ACTION just hopes that as mes matures, work on/contributing to mescc becomes even easier</span></div><div class="line" id="153843"><span class="nick" style="color:#2e2a4a"><a href="#153843" label="[15:38:43]">&lt;fossy&gt;</a></span><span class="message">roconnor: in short, no</span></div><div class="line" id="153902"><span class="nick" style="color:#2e2a4a"><a href="#153902" label="[15:39:02]">&lt;fossy&gt;</a></span><span class="message">x86 is not the architecture to use for trusted hardware</span></div><div class="line" id="153922"><span class="nick" style="color:#389600"><a href="#153922" label="[15:39:22]">&lt;roconnor&gt;</a></span><span class="message">Oh right, we could do risc-V or something.</span></div><div class="line" id="154008"><span class="nick" style="color:#3c5b35"><a href="#154008" label="[15:40:08]">&lt;probie&gt;</a></span><span class="message">river: one fewer moving part, and possibly less work to support new architectures</span></div><div class="line" id="154438"><span class="nick" style="color:#234e69"><a href="#154438" label="[15:44:38]">&lt;stikonas[m]&gt;</a></span><span class="message">probie: GCC also have a lot of dependencies...</span></div><div class="line" id="154505"><span class="nick" style="color:#234e69"><a href="#154505" label="[15:45:05]">&lt;stikonas[m]&gt;</a></span><span class="message">You really need something that is far more standard than mescc</span></div><div class="line" id="154553"><span class="nick" style="color:#234e69"><a href="#154553" label="[15:45:53]">&lt;stikonas[m]&gt;</a></span><span class="message">tcc is supported reasonably well by old GNU software and autotools scripts</span></div><div class="line" id="155007"><span class="nick" style="color:#234e69"><a href="#155007" label="[15:50:07]">&lt;stikonas[m]&gt;</a></span><span class="message">We don't even support GAS assembly in mes</span></div><div class="line" id="155037"><span class="nick" style="color:#234e69"><a href="#155037" label="[15:50:37]">&lt;stikonas[m]&gt;</a></span><span class="message">So one would have to add that to mescc-tools first</span></div><div class="line" id="180558"><span class="nick" style="color:#3c5b35"><a href="#180558" label="[18:05:58]">&lt;probie&gt;</a></span><span class="message">Should I be able to build mes with an amd64 M2-Planet, or does it need to be an x86 one?</span></div><div class="line" id="181116"><span class="nick" style="color:#3c5b35"><a href="#181116" label="[18:11:16]">&lt;probie&gt;</a></span><span class="message">That seems to be a no, since there's no /lib/linux/x86_64-mes-m2</span></div><div class="line" id="181426"><span class="nick" style="color:#3c5b35"><a href="#181426" label="[18:14:26]">&lt;probie&gt;</a></span><span class="message">The x86_64-mes is broken, but should still be buildable, right? (just not via M2-Planet)</span></div><div class="line" id="181622"><span class="nick" style="color:#234e69"><a href="#181622" label="[18:16:22]">&lt;stikonas[m]&gt;</a></span><span class="message">probie: there is some branch in mes that has better support</span></div><div class="line" id="181645"><span class="nick" style="color:#234e69"><a href="#181645" label="[18:16:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Might have x86_64-mes-m2 in it...</span></div><div class="line" id="181702"><span class="nick" style="color:#234e69"><a href="#181702" label="[18:17:02]">&lt;stikonas[m]&gt;</a></span><span class="message">You could try it</span></div><div class="line" id="181741"><span class="nick" style="color:#234e69"><a href="#181741" label="[18:17:41]">&lt;stikonas[m]&gt;</a></span><span class="message">probie: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/log/?h=wip-x86_64">https://git.savannah.gnu.org/cgit/mes.git/log/?h=wip-x86_64</a> </span></div><div class="line" id="181822"><span class="nick" style="color:#234e69"><a href="#181822" label="[18:18:22]">&lt;stikonas[m]&gt;</a></span><span class="message">I once tried to get mes-m2 built with M2libc but it's hard...</span></div><div class="line" id="182112"><span class="nick" style="color:#234e69"><a href="#182112" label="[18:21:12]">&lt;stikonas[m]&gt;</a></span><span class="message">mes.c uses quite a few helper functions and in meslibc headers they are quite intertwined with standard C functions</span></div><div class="line" id="182210"><span class="nick" style="color:#234e69"><a href="#182210" label="[18:22:10]">&lt;stikonas[m]&gt;</a></span><span class="message">so  you can't just replace core C library stuff with M2libc (e.g. fputs) and use mes helper functions from meslibc</span></div><div class="line" id="182314"><span class="nick" style="color:#234e69"><a href="#182314" label="[18:23:14]">&lt;stikonas[m]&gt;</a></span><span class="message">in principle it would be much cleaner if we could build mes-m2 binary with M2libc C library</span></div><div class="line" id="182336"><span class="nick" style="color:#234e69"><a href="#182336" label="[18:23:36]">&lt;stikonas[m]&gt;</a></span><span class="message">that would immediately port mes-m2 to all platforms that stage0-posix supports...</span></div><div class="line" id="182358"><span class="nick" style="color:#234e69"><a href="#182358" label="[18:23:58]">&lt;stikonas[m]&gt;</a></span><span class="message">and remove some duplicate code</span></div><div class="line" id="182411"><span class="nick" style="color:#234e69"><a href="#182411" label="[18:24:11]">&lt;stikonas[m]&gt;</a></span><span class="message">but it's non trivial...</span></div><div class="line" id="191116"><span class="nick" style="color:#6b8072"><a href="#191116" label="[19:11:16]">&lt;janneke&gt;</a></span><span class="message">probie: x86_64-mes is broken in that it cannot build a bootstrappable-tcc that can compile itself</span></div><div class="line" id="191131"><span class="nick" style="color:#6b8072"><a href="#191131" label="[19:11:31]">&lt;janneke&gt;</a></span><span class="message">could also be a problem with bootstrappable-tcc</span></div><div class="line" id="191225"><span class="nick" style="color:#80b1d3"><a href="#191225" label="[19:12:25]">&lt;FlaminWalrus&gt;</a></span><span class="message">fossy: if you can audit your way up to a formal proof-checker trusted core, then you can trust other people's formal correctness proofs in that proof language (and any other proof language that's provably-correctly-translated into that proof language)</span></div><div class="line" id="191246"><span class="nick" style="color:#80b1d3"><a href="#191246" label="[19:12:46]">&lt;FlaminWalrus&gt;</a></span><span class="message">This requires people to actually write formal proofs though</span></div><div class="line" id="191535"><span class="nick" style="color:#389600"><a href="#191535" label="[19:15:35]">&lt;roconnor&gt;</a></span><span class="message">I'm skeptical this will ever happen with UNIX or *nix or whatever it is called.</span></div><div class="line" id="191609"><span class="nick" style="color:#80b1d3"><a href="#191609" label="[19:16:09]">&lt;FlaminWalrus&gt;</a></span><span class="message">roconnor: not x86_64, but the seL4 whitepaper says Fox and Myreen, 2010 have L3 specs for (some version of?) RISC-V and ARM</span></div><div class="line" id="191623"><span class="nick" style="color:#3c5b35"><a href="#191623" label="[19:16:23]">&lt;probie&gt;</a></span><span class="message">sanity check, if I'm running M2-Planet in bootstrap mode, should it be completely ignoring preprocessor directives?</span></div><div class="line" id="191639"><span class="nick" style="color:#80b1d3"><a href="#191639" label="[19:16:39]">&lt;FlaminWalrus&gt;</a></span><span class="message">roconnor: in my opinion, microkernels are just better, and there's already one formally verified</span></div><div class="line" id="191741"><span class="nick" style="color:#80b1d3"><a href="#191741" label="[19:17:41]">&lt;FlaminWalrus&gt;</a></span><span class="message">Very bare-bones, though, but they've shown it's at least possible to verify substantial, systems-level software</span></div><div class="line" id="191749"><span class="nick" style="color:#80b1d3"><a href="#191749" label="[19:17:49]">&lt;FlaminWalrus&gt;</a></span><span class="message">like 10kline of C</span></div><div class="line" id="191857"><span class="nick" style="color:#80b1d3"><a href="#191857" label="[19:18:57]">&lt;FlaminWalrus&gt;</a></span><span class="message">Very nice and efficient IPC and cap-based security, extensive results on security properties, memory safety, lack of runtime errors, etc</span></div><div class="line" id="192329"><span class="nick" style="color:#234e69"><a href="#192329" label="[19:23:29]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: but can mescc build mes on x86_64?</span></div><div class="line" id="192404"><span class="nick" style="color:#234e69"><a href="#192404" label="[19:24:04]">&lt;stikonas[m]&gt;</a></span><span class="message">We should first get hex0 to full mes working</span></div><div class="line" id="192501"><span class="nick" style="color:#234e69"><a href="#192501" label="[19:25:01]">&lt;stikonas[m]&gt;</a></span><span class="message">probie: yes, bootstrap mode has no preprocessor directives except for nonstandard // CONSTANT</span></div><div class="line" id="192515"><span class="nick" style="color:#234e69"><a href="#192515" label="[19:25:15]">&lt;stikonas[m]&gt;</a></span><span class="message"># is a comment in bootstrap mode</span></div><div class="line" id="194046"><span class="nick" style="color:#389600"><a href="#194046" label="[19:40:46]">&lt;muurkha_&gt;</a></span><span class="message">FlaminWalrus: Metamath Zero is a proof checker written with that in mind</span></div><div class="line" id="194321"><span class="nick" style="color:#389600"><a href="#194321" label="[19:43:21]">&lt;muurkha_&gt;</a></span><span class="message">roconnor: a problem with doing the bootstrap f</span></div><div class="line" id="194324"><span class="nick" style="color:#389600"><a href="#194324" label="[19:43:24]">&lt;muurkha_&gt;</a></span><span class="message">roconnor: a problem with doing the bootstrap</span></div><div class="line" id="194353"><span class="nick" style="color:#389600"><a href="#194353" label="[19:43:53]">&lt;muurkha_&gt;</a></span><span class="message">roconnor: a problem with doing the bootstrap on RISC-V is that older versions of GCC can't emit RISC-V code</span></div><div class="line" id="194439"><span class="nick" style="color:#389600"><a href="#194439" label="[19:44:39]">&lt;muurkha_&gt;</a></span><span class="message">sorry about repetition</span></div><div class="line" id="194441"><span class="nick" style="color:#389600"><a href="#194441" label="[19:44:41]">&lt;roconnor&gt;</a></span><span class="message">well we need to write our own free version of compcert's c compiler anyways ...</span></div><div class="line" id="194500"><span class="nick" style="color:#af8d2f"><a href="#194500" label="[19:45:00]">&lt;stikonas&gt;</a></span><span class="message">yes, but risc-v support can be backported</span></div><div class="line" id="194508"><span class="nick" style="color:#af8d2f"><a href="#194508" label="[19:45:08]">&lt;stikonas&gt;</a></span><span class="message">ekaitz did some of the work for that</span></div><div class="line" id="194524"><span class="nick" style="color:#af8d2f"><a href="#194524" label="[19:45:24]">&lt;stikonas&gt;</a></span><span class="message">and binutils is not a problem as tcc can build 2.30 easily</span></div><div class="line" id="194534"><span class="nick" style="color:#af8d2f"><a href="#194534" label="[19:45:34]">&lt;stikonas&gt;</a></span><span class="message">and risc-v is supported from at least 2.28</span></div><div class="line" id="201038"><span class="nick" style="color:#6b8072"><a href="#201038" label="[20:10:38]">&lt;janneke&gt;</a></span><span class="message">stikonas: ah good question, i'm not 100% sure</span></div><div class="line" id="201113"><span class="nick" style="color:#af8d2f"><a href="#201113" label="[20:11:13]">&lt;stikonas&gt;</a></span><span class="message">janneke: I'll try...</span></div><div class="line" id="201513"><span class="nick" style="color:#af8d2f"><a href="#201513" label="[20:15:13]">&lt;stikonas&gt;</a></span><span class="message">janneke: there are some build issues with kaem files on wip-x86_64 branch...</span></div><div class="line" id="201539"><span class="nick" style="color:#6b8072"><a href="#201539" label="[20:15:39]">&lt;janneke&gt;</a></span><span class="message">oh oh</span></div><div class="line" id="201547"><span class="nick" style="color:#af8d2f"><a href="#201547" label="[20:15:47]">&lt;stikonas&gt;</a></span><span class="message">janneke: <a rel="nofollow" href="https://paste.debian.net/1278877/">https://paste.debian.net/1278877/</a> </span></div><div class="line" id="201553"><span class="nick" style="color:#6b8072"><a href="#201553" label="[20:15:53]">&lt;janneke&gt;</a></span><span class="message">ACTION hasn't looked for a while (prolly while rebasing all the time)</span></div><div class="line" id="201554"><span class="nick" style="color:#af8d2f"><a href="#201554" label="[20:15:54]">&lt;stikonas&gt;</a></span><span class="message">I think because of bootstrap mode...</span></div><div class="line" id="201606"><span class="nick" style="color:#af8d2f"><a href="#201606" label="[20:16:06]">&lt;stikonas&gt;</a></span><span class="message">I think in other branches bootstrap mode might be gone</span></div><div class="line" id="201628"><span class="nick" style="color:#6b8072"><a href="#201628" label="[20:16:28]">&lt;janneke&gt;</a></span><span class="message">stikonas: ah, i think --bootstrap-mode has been obsoleted</span></div><div class="line" id="201634"><span class="nick" style="color:#6b8072"><a href="#201634" label="[20:16:34]">&lt;janneke&gt;</a></span><span class="message">from wip-x86_64</span></div><div class="line" id="201654"><span class="nick" style="color:#af8d2f"><a href="#201654" label="[20:16:54]">&lt;stikonas&gt;</a></span><span class="message">yes, not not from kaem files</span></div><div class="line" id="201705"><span class="nick" style="color:#6b8072"><a href="#201705" label="[20:17:05]">&lt;janneke&gt;</a></span><span class="message">yeah, it's been removed in wip</span></div><div class="line" id="201709"><span class="nick" style="color:#6b8072"><a href="#201709" label="[20:17:09]">&lt;janneke&gt;</a></span><span class="message">ah, oops</span></div><div class="line" id="201711"><span class="nick" style="color:#af8d2f"><a href="#201711" label="[20:17:11]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run?h=wip-x86_64#n28">https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run?h=wip-x86_64#n28</a> </span></div><div class="line" id="201725"><span class="nick" style="color:#af8d2f"><a href="#201725" label="[20:17:25]">&lt;stikonas&gt;</a></span><span class="message">it looks like most commits are in (remove bootstrap mode from C files)</span></div><div class="line" id="201732"><span class="nick" style="color:#af8d2f"><a href="#201732" label="[20:17:32]">&lt;stikonas&gt;</a></span><span class="message">so hopefully it's just kaem file that is old</span></div><div class="line" id="201804"><span class="nick" style="color:#6b8072"><a href="#201804" label="[20:18:04]">&lt;janneke&gt;</a></span><span class="message">hmm, i may have lost a patch</span></div><div class="line" id="202232"><span class="nick" style="color:#3c5b35"><a href="#202232" label="[20:22:32]">&lt;probie&gt;</a></span><span class="message">oh, I should have mentioned that I noticed that (hence my earlier question about bootstrap mode)</span></div><div class="line" id="202313"><span class="nick" style="color:#6b8072"><a href="#202313" label="[20:23:13]">&lt;janneke&gt;</a></span><span class="message">stikonas, seems to need more work</span></div><div class="line" id="202447"><span class="nick" style="color:#6b8072"><a href="#202447" label="[20:24:47]">&lt;janneke&gt;</a></span><span class="message">ACTION found 11d024e0 kaem.run: Remove --bootstrap-mode.</span></div><div class="line" id="202526"><span class="nick" style="color:#6b8072"><a href="#202526" label="[20:25:26]">&lt;janneke&gt;</a></span><span class="message">it seems that the stat64 and friends fix was rebased onto and i carelessly dropped that patch</span></div><div class="line" id="202642"><span class="nick" style="color:#af8d2f"><a href="#202642" label="[20:26:42]">&lt;stikonas&gt;</a></span><span class="message">oh well, at least we now know that it is slightly broken</span></div><div class="line" id="202737"><span class="nick" style="color:#6b8072"><a href="#202737" label="[20:27:37]">&lt;janneke&gt;</a></span><span class="message">yes thanks, this is helpful</span></div><div class="line" id="203412"><span class="nick" style="color:#8dd3c7"><a href="#203412" label="[20:34:12]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="203522"><span class="nick" style="color:#af8d2f"><a href="#203522" label="[20:35:22]">&lt;stikonas&gt;</a></span><span class="message">janneke: while you are here, it would be helpful for builder-hex0 if we unify base-addresses in stage0-posix and mes</span></div><div class="line" id="203546"><span class="nick" style="color:#af8d2f"><a href="#203546" label="[20:35:46]">&lt;stikonas&gt;</a></span><span class="message">let me check if we can just have a variable in kaem file</span></div><div class="line" id="203559"><span class="nick" style="color:#af8d2f"><a href="#203559" label="[20:35:59]">&lt;stikonas&gt;</a></span><span class="message">because in stage0-posix different arches also have different base addresses</span></div><div class="line" id="203621"><span class="nick" style="color:#af8d2f"><a href="#203621" label="[20:36:21]">&lt;stikonas&gt;</a></span><span class="message">janneke: yes, I think it's just here <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run?h=wip#n142">https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run?h=wip#n142</a> </span></div><div class="line" id="203642"><span class="nick" style="color:#af8d2f"><a href="#203642" label="[20:36:42]">&lt;stikonas&gt;</a></span><span class="message">can we move it as a variable to arch specific files?</span></div><div class="line" id="203654"><span class="nick" style="color:#af8d2f"><a href="#203654" label="[20:36:54]">&lt;stikonas&gt;</a></span><span class="message">and ideally use the same value as in stage0-posix</span></div><div class="line" id="203734"><span class="nick" style="color:#af8d2f"><a href="#203734" label="[20:37:34]">&lt;stikonas&gt;</a></span><span class="message">e.g. 0x8048000 instead of 0x1000000 on x86</span></div><div class="line" id="203806"><span class="nick" style="color:#af8d2f"><a href="#203806" label="[20:38:06]">&lt;stikonas&gt;</a></span><span class="message">builder-hex0 has no support for arbitrary base-address and needs it hardcoded</span></div><div class="line" id="203921"><span class="nick" style="color:#af8d2f"><a href="#203921" label="[20:39:21]">&lt;stikonas&gt;</a></span><span class="message">right now we need to run &quot;replace --file kaem.run --output kaem.run --match-on 0x1000000 --replace-with 0x8048000&quot; to build mes on builder-hex0 kernel</span></div><div class="line" id="203936"><span class="nick" style="color:#af8d2f"><a href="#203936" label="[20:39:36]">&lt;stikonas&gt;</a></span><span class="message">it's not particularly hard, but it's an extra step that could be eliminated</span></div><div class="line" id="204812"><span class="nick" style="color:#6b8072"><a href="#204812" label="[20:48:12]">&lt;janneke&gt;</a></span><span class="message">stikonas: sure, we can move that to a variable in kaem.&lt;arch&gt; files</span></div><div class="line" id="204943"><span class="nick" style="color:#6b8072"><a href="#204943" label="[20:49:43]">&lt;janneke&gt;</a></span><span class="message">and i can check if the change causes any problems (guess it shouldn't make any difference, but you never know)</span></div><div class="line" id="205105"><span class="nick" style="color:#6b8072"><a href="#205105" label="[20:51:05]">&lt;janneke&gt;</a></span><span class="message">(isn't that a terrrible address for debugging?  anyway...)</span></div><div class="line" id="205515"><span class="nick" style="color:#af8d2f"><a href="#205515" label="[20:55:15]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm not sure why stage0-posix-x86 uses it</span></div><div class="line" id="205520"><span class="nick" style="color:#af8d2f"><a href="#205520" label="[20:55:20]">&lt;stikonas&gt;</a></span><span class="message">but it's harder to change it in hex code...</span></div><div class="line" id="205539"><span class="nick" style="color:#af8d2f"><a href="#205539" label="[20:55:39]">&lt;stikonas&gt;</a></span><span class="message">as for amd64, in the latest git version of stage0-posix-amd64 base address doesn't matter at all</span></div><div class="line" id="205600"><span class="nick" style="color:#af8d2f"><a href="#205600" label="[20:56:00]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet now generates position independent (relocatable) assembly</span></div><div class="line" id="205731"><span class="nick" style="color:#af8d2f"><a href="#205731" label="[20:57:31]">&lt;stikonas&gt;</a></span><span class="message">also on x86_64 branch we need to add new defines to <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/x86_64/x86_64_defs.M1?h=wip-x86_64">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/x86_64/x86_64_defs.M1?h=wip-x86_64</a>  ...</span></div><div class="line" id="205744"><span class="nick" style="color:#af8d2f"><a href="#205744" label="[20:57:44]">&lt;stikonas&gt;</a></span><span class="message">so quite a lot of things are still missing :(</span></div><div class="line" id="205940"><span class="nick" style="color:#6b8072"><a href="#205940" label="[20:59:40]">&lt;janneke&gt;</a></span><span class="message">right, that hasn't been rebased (on de rebase-failed wip branch), fun!</span></div><div class="line" id="220816"><span class="nick" style="color:#d9d9d9"><a href="#220816" label="[22:08:16]">&lt;oriansj&gt;</a></span><span class="message">well the reason why 0x8048000 was used, is that was the default address used by the assembler I was using to figure things out. And moving the hex0, hex1 and hex2 programs to a new base address would only be a dozen lines being changed.</span></div><div class="line" id="221120"><span class="nick" style="color:#d9d9d9"><a href="#221120" label="[22:11:20]">&lt;oriansj&gt;</a></span><span class="message">The hex0 programs that use the stack for the read/write syscalls and a register for the hold value don't need any absolute address.</span></div><div class="line" id="221155"><span class="nick" style="color:#d9d9d9"><a href="#221155" label="[22:11:55]">&lt;oriansj&gt;</a></span><span class="message">hex1 only needs 1 address (The label of addresses for the labels) and 2 references to it</span></div><div class="line" id="221309"><span class="nick" style="color:#d9d9d9"><a href="#221309" label="[22:13:09]">&lt;oriansj&gt;</a></span><span class="message">hex2 would only need 1 address to point to the struct list of labels and everything after that doesn't care</span></div><div class="line" id="221311"><span class="nick" style="color:#af8d2f"><a href="#221311" label="[22:13:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, but it's not just hex0, we also need to move builder-hex0</span></div><div class="line" id="221335"><span class="nick" style="color:#af8d2f"><a href="#221335" label="[22:13:35]">&lt;stikonas&gt;</a></span><span class="message">which might be more complicated</span></div><div class="line" id="221340"><span class="nick" style="color:#af8d2f"><a href="#221340" label="[22:13:40]">&lt;stikonas&gt;</a></span><span class="message">so it's up to rickmasters</span></div><div class="line" id="221441"><span class="nick" style="color:#af8d2f"><a href="#221441" label="[22:14:41]">&lt;stikonas&gt;</a></span><span class="message">hmm its in <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L70">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L70</a>  and <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L1514">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L1514</a> </span></div><div class="line" id="221518"><span class="nick" style="color:#af8d2f"><a href="#221518" label="[22:15:18]">&lt;stikonas&gt;</a></span><span class="message">so we could probably change 08048000 to 10000000 fairly easily</span></div><div class="line" id="221602"><span class="nick" style="color:#af8d2f"><a href="#221602" label="[22:16:02]">&lt;stikonas&gt;</a></span><span class="message">oh but mes uses 1000000 with one fewer 0</span></div><div class="line" id="221618"><span class="nick" style="color:#af8d2f"><a href="#221618" label="[22:16:18]">&lt;stikonas&gt;</a></span><span class="message">and this is already reserved in builder-hex0 for  01000000 - 0100000F stdin disk locato</span></div><div class="line" id="221717"><span class="nick" style="color:#af8d2f"><a href="#221717" label="[22:17:17]">&lt;stikonas&gt;</a></span><span class="message">so we could make it slightly rounder figure, but ideally not too far from 08000000</span></div><div class="line" id="221923"><span class="nick" style="color:#d9d9d9"><a href="#221923" label="[22:19:23]">&lt;oriansj&gt;</a></span><span class="message">fair enough, I don't think it is that serious of a problem but if someone cares enough to change it; I'll be more than happy to merge it.</span></div><div class="line" id="222035"><span class="nick" style="color:#af8d2f"><a href="#222035" label="[22:20:35]">&lt;stikonas&gt;</a></span><span class="message">yaeh, but we need to change mes anyway</span></div><div class="line" id="222056"><span class="nick" style="color:#af8d2f"><a href="#222056" label="[22:20:56]">&lt;stikonas&gt;</a></span><span class="message">as 01000000 is too small for builder-hex0</span></div><br /></div></body></html>