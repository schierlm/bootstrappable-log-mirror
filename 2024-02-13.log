<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003356"><span class="nick" style="color:#389600"><a href="#003356" label="[00:33:56]">&lt;fossy&gt;</a></span><span class="message">janneke: perhaps I misunderstand what you are saying, but for 6+ months now live-bootstrap has had a kernel bootstrap in it?</span></div><div class="line" id="003406"><span class="nick" style="color:#389600"><a href="#003406" label="[00:34:06]">&lt;fossy&gt;</a></span><span class="message">we do not use a seed Linux kernel in live-bootstrap</span></div><div class="line" id="003423"><span class="nick" style="color:#389600"><a href="#003423" label="[00:34:23]">&lt;fossy&gt;</a></span><span class="message">(re: gnu/linux bootstrap, rather than linux bootstrap)</span></div><div class="line" id="003505"><span class="nick" style="color:#389600"><a href="#003505" label="[00:35:05]">&lt;fossy&gt;</a></span><span class="message">AlwinB: regarding Fedora bootstrap, the first step for any Linux distribution bootstrap is determining how one would make a Fedora system, completely from source, from a different Linux distribution'</span></div><div class="line" id="003531"><span class="nick" style="color:#389600"><a href="#003531" label="[00:35:31]">&lt;fossy&gt;</a></span><span class="message">e.g. can you build a Fedora ISO, or chroot, etc from source, from Debian, or some other non RPM distribution?</span></div><div class="line" id="003539"><span class="nick" style="color:#389600"><a href="#003539" label="[00:35:39]">&lt;fossy&gt;</a></span><span class="message">that's the first, and most prohibative step, usually</span></div><div class="line" id="003615"><span class="nick" style="color:#389600"><a href="#003615" label="[00:36:15]">&lt;fossy&gt;</a></span><span class="message">(when one is hooking onto the end of live-bootstrap or guix, and not bringing the entire bootstrap to it natively)</span></div><div class="line" id="004951"><span class="nick" style="color:#8dd3c7"><a href="#004951" label="[00:49:51]">&lt;stikonas&gt;</a></span><span class="message">I guess generally live-bootstrap is good enough now that steps are similar</span></div><div class="line" id="005001"><span class="nick" style="color:#8dd3c7"><a href="#005001" label="[00:50:01]">&lt;stikonas&gt;</a></span><span class="message">to bootstrap from other distro or from live-bootstrap</span></div><div class="line" id="010346"><span class="nick" style="color:#2e2a4a"><a href="#010346" label="[01:03:46]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: After thinking about your report on Fiwix available user memory, I'm afraid I don't have a helpful suggestion on resolving the issue.</span></div><div class="line" id="010436"><span class="nick" style="color:#6b8072"><a href="#010436" label="[01:04:36]">&lt;Googulator&gt;</a></span><span class="message">One thing I tried was passing the initrd already at a high address, which lead to more user memory shown at boot, but subsequently I got malloc errors</span></div><div class="line" id="010531"><span class="nick" style="color:#2e2a4a"><a href="#010531" label="[01:05:31]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: For what its worth, it's working according to the original virtual memory design by Mikaku.</span></div><div class="line" id="010629"><span class="nick" style="color:#2e2a4a"><a href="#010629" label="[01:06:29]">&lt;rickmasters&gt;</a></span><span class="message">My &quot;hack&quot; of relocating the initrd to upper user memory was well outside the design.</span></div><div class="line" id="010702"><span class="nick" style="color:#2e2a4a"><a href="#010702" label="[01:07:02]">&lt;rickmasters&gt;</a></span><span class="message">But in retrospect, it did use memory better for the case where there is a large initrd</span></div><div class="line" id="010854"><span class="nick" style="color:#2e2a4a"><a href="#010854" label="[01:08:54]">&lt;rickmasters&gt;</a></span><span class="message">The initrd memory mapping was handled as a special case and it was more complicated, though.</span></div><div class="line" id="011433"><span class="nick" style="color:#2e2a4a"><a href="#011433" label="[01:14:33]">&lt;rickmasters&gt;</a></span><span class="message">I was exploring making more than 2GB physical memory available within Mikaku's design.</span></div><div class="line" id="011607"><span class="nick" style="color:#2e2a4a"><a href="#011607" label="[01:16:07]">&lt;rickmasters&gt;</a></span><span class="message">User space is running out because 1.6G of that 2G is kernel memory (mostly ram drives). But if we could use 3GB it would be fine.</span></div><div class="line" id="011839"><span class="nick" style="color:#2e2a4a"><a href="#011839" label="[01:18:39]">&lt;rickmasters&gt;</a></span><span class="message">But I'm not sure how to enable that. He makes assumptions that high physical addresses are mapped differently, so I think it causes a conflict.</span></div><div class="line" id="011933"><span class="nick" style="color:#2e2a4a"><a href="#011933" label="[01:19:33]">&lt;rickmasters&gt;</a></span><span class="message">(controlled by P2V macro in include/fiwix/mm.h)</span></div><div class="line" id="012240"><span class="nick" style="color:#2e2a4a"><a href="#012240" label="[01:22:40]">&lt;rickmasters&gt;</a></span><span class="message">Memory is currently truncated at the bottom of mm/bios_map.c but removing that doesn't work (no surprise).</span></div><div class="line" id="012642"><span class="nick" style="color:#80b1d3"><a href="#012642" label="[01:26:42]">&lt;oriansj&gt;</a></span><span class="message">well if one assumes PAE, it is much less of a problem</span></div><div class="line" id="012813"><span class="nick" style="color:#80b1d3"><a href="#012813" label="[01:28:13]">&lt;oriansj&gt;</a></span><span class="message">or if we move more of the init into read-only storage</span></div><div class="line" id="012839"><span class="nick" style="color:#2e2a4a"><a href="#012839" label="[01:28:39]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: there is enough physical memory without PAE.</span></div><div class="line" id="013108"><span class="nick" style="color:#2e2a4a"><a href="#013108" label="[01:31:08]">&lt;rickmasters&gt;</a></span><span class="message">The problem is that there is a simple mapping strategy that maps the low ranges into high ranges, so you run out of ranges after 2GB.</span></div><div class="line" id="013342"><span class="nick" style="color:#2e2a4a"><a href="#013342" label="[01:33:42]">&lt;rickmasters&gt;</a></span><span class="message">i.e. the initrd at physical 0x001c6000-0x501c6000 is mapped to virtual 0x801c6000-0xd01c6000</span></div><div class="line" id="013522"><span class="nick" style="color:#2e2a4a"><a href="#013522" label="[01:35:22]">&lt;rickmasters&gt;</a></span><span class="message">There is memory available at physical 0x80000000 to 0xC0000000 but mapping it using the simple scheme would map into virtual memory used by user space.</span></div><div class="line" id="014127"><span class="nick" style="color:#2e2a4a"><a href="#014127" label="[01:41:27]">&lt;rickmasters&gt;</a></span><span class="message">Anyway, to use that physical range we need deal with it in a different way.</span></div><div class="line" id="015440"><span class="nick" style="color:#2e2a4a"><a href="#015440" label="[01:54:40]">&lt;rickmasters&gt;</a></span><span class="message">I'm probably not explaining it very well but to be honest I don't understand it as much as I'd like.</span></div><div class="line" id="023216"><span class="nick" style="color:#6b8072"><a href="#023216" label="[02:32:16]">&lt;Googulator&gt;</a></span><span class="message">rickmasters: fresh builder-hex0 PRs incoming</span></div><div class="line" id="023311"><span class="nick" style="color:#6b8072"><a href="#023311" label="[02:33:11]">&lt;Googulator&gt;</a></span><span class="message">loading srcfs from USB 2.0 now only takes about 2x as long as on SATA 2.0, vs 100x as long without the PRs</span></div><div class="line" id="023428"><span class="nick" style="color:#6b8072"><a href="#023428" label="[02:34:28]">&lt;Googulator&gt;</a></span><span class="message">plus, one of my motherboards would just straight up freeze without the pushad/popads - I did have those present when working on the original HW compat PR, but I removed them at some point, probably by mistake</span></div><div class="line" id="023612"><span class="nick" style="color:#6b8072"><a href="#023612" label="[02:36:12]">&lt;Googulator&gt;</a></span><span class="message">I chose reading 64 sectors at once because it's the largest power of 2 that's consistently supported (many BIOSes have a 127 sector limit per int 13h call, but using 127 would complicate calculations)</span></div><div class="line" id="025231"><span class="nick" style="color:#2e2a4a"><a href="#025231" label="[02:52:31]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: ok thanks.</span></div><div class="line" id="080615"><span class="nick" style="color:#6d2462"><a href="#080615" label="[08:06:15]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: with the current virtual memory design, Fiwix supports initrd images of up to 2GB of memory (aprox.), do you really need more than this?</span></div><div class="line" id="084428"><span class="nick" style="color:#234e69"><a href="#084428" label="[08:44:28]">&lt;Guest47&gt;</a></span><span class="message">HI</span></div><div class="line" id="084458"><span class="nick" style="color:#234e69"><a href="#084458" label="[08:44:58]">&lt;Guest47&gt;</a></span><span class="message">I want to build bare metal but i don't know what</span></div><div class="line" id="084611"><span class="nick" style="color:#234e69"><a href="#084611" label="[08:46:11]">&lt;Guest47&gt;</a></span><span class="message">I want to build bare metal but i don't know what?</span></div><div class="line" id="084836"><span class="nick" style="color:#234e69"><a href="#084836" label="[08:48:36]">&lt;Guest47&gt;</a></span><span class="message">I want to build bare metal but i don't know how?</span></div><div class="line" id="085127"><span class="nick" style="color:#6c3d55"><a href="#085127" label="[08:51:27]">&lt;janneke&gt;</a></span><span class="message">fossy: although i wasn't aware that live-bootstrap included a build of linux, i guess it's built as a `user-land' application, live-bootstrap itself still (implicitly) depends/runs on linux</span></div><div class="line" id="085147"><span class="nick" style="color:#d9d9d9"><a href="#085147" label="[08:51:47]">&lt;Guest21&gt;</a></span><span class="message">I want to build a bare metal but I don't know how?</span></div><div class="line" id="090325"><span class="nick" style="color:#d9d9d9"><a href="#090325" label="[09:03:25]">&lt;Guest21&gt;</a></span><span class="message">HI, I want to build on bare metal but don't know how.</span></div><div class="line" id="090701"><span class="nick" style="color:#d9d9d9"><a href="#090701" label="[09:07:01]">&lt;Guest21&gt;</a></span><span class="message">It works on qemu but it doesn't work on bare metal how start?</span></div><div class="line" id="090918"><span class="nick" style="color:#bc80bd"><a href="#090918" label="[09:09:18]">&lt;Guest000&gt;</a></span><span class="message">hi, It works on qemu but it doesn't work on bare metal how start?</span></div><div class="line" id="091919"><span class="nick" style="color:#389600"><a href="#091919" label="[09:19:19]">&lt;fossy&gt;</a></span><span class="message">bruh</span></div><div class="line" id="091936"><span class="nick" style="color:#389600"><a href="#091936" label="[09:19:36]">&lt;fossy&gt;</a></span><span class="message">where'd snuik go</span></div><div class="line" id="092005"><span class="nick" style="color:#389600"><a href="#092005" label="[09:20:05]">&lt;fossy&gt;</a></span><span class="message">Guest000: ask your question and wait around, stop asking the same question over and over again repeatedly and leaving after a minute</span></div><div class="line" id="092054"><span class="nick" style="color:#389600"><a href="#092054" label="[09:20:54]">&lt;fossy&gt;</a></span><span class="message">janneke: yeah, but kinda even more than that. live-bootstrap is not initially booted with linux</span></div><div class="line" id="092113"><span class="nick" style="color:#389600"><a href="#092113" label="[09:21:13]">&lt;fossy&gt;</a></span><span class="message">we start with builder-hex0, rickmasters' very very minimal POSIX-compatible kernel, written in hex0</span></div><div class="line" id="092125"><span class="nick" style="color:#389600"><a href="#092125" label="[09:21:25]">&lt;fossy&gt;</a></span><span class="message">compile up to tcc, which then builds Mikaku's Fiwix</span></div><div class="line" id="092143"><span class="nick" style="color:#389600"><a href="#092143" label="[09:21:43]">&lt;fossy&gt;</a></span><span class="message">which then builds up to gcc, which then finally builds the Linux kernel and begins running on that</span></div><div class="line" id="092154"><span class="nick" style="color:#389600"><a href="#092154" label="[09:21:54]">&lt;fossy&gt;</a></span><span class="message">that is the first time the Linux kernel is introduced to the bootstrap</span></div><div class="line" id="092346"><span class="nick" style="color:#6c3d55"><a href="#092346" label="[09:23:46]">&lt;janneke&gt;</a></span><span class="message">fossy: wow i'll have to look into that, i wasn't aware you were this far already</span></div><div class="line" id="092512"><span class="nick" style="color:#389600"><a href="#092512" label="[09:25:12]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a>  has full explanation; 0, 2, 3, 22, 23, 24, 91, 92, 93 are the most relevant</span></div><div class="line" id="092528"><span class="nick" style="color:#389600"><a href="#092528" label="[09:25:28]">&lt;fossy&gt;</a></span><span class="message">it still certainly has some issues. particularly bare metal related</span></div><div class="line" id="092550"><span class="nick" style="color:#6c3d55"><a href="#092550" label="[09:25:50]">&lt;janneke&gt;</a></span><span class="message">thanks, and sorry for misrepresenting the current state</span></div><div class="line" id="092623"><span class="nick" style="color:#389600"><a href="#092623" label="[09:26:23]">&lt;fossy&gt;</a></span><span class="message">no stress, you didn't know :D</span></div><div class="line" id="093815"><span class="nick" style="color:#bc80bd"><a href="#093815" label="[09:38:15]">&lt;Guest000&gt;</a></span><span class="message">Guest000: I don't understand what to write in first .img</span></div><div class="line" id="094753"><span class="nick" style="color:#389600"><a href="#094753" label="[09:47:53]">&lt;fossy&gt;</a></span><span class="message">I'd recommend if you just want to give it a go doing ./rootfs.py --bare-metal, it'll tell you the path to the .img</span></div><div class="line" id="094758"><span class="nick" style="color:#389600"><a href="#094758" label="[09:47:58]">&lt;fossy&gt;</a></span><span class="message">and then write that to a USB or something</span></div><div class="line" id="100123"><span class="nick" style="color:#8dd3c7"><a href="#100123" label="[10:01:23]">&lt;stikonas&gt;</a></span><span class="message">Guest000: do you have BIOS system?</span></div><div class="line" id="100134"><span class="nick" style="color:#8dd3c7"><a href="#100134" label="[10:01:34]">&lt;stikonas&gt;</a></span><span class="message">if you have UEFI system, builder-hex0 won't work</span></div><div class="line" id="100344"><span class="nick" style="color:#8dd3c7"><a href="#100344" label="[10:03:44]">&lt;stikonas&gt;</a></span><span class="message">if you have UEFI only system then bootstrap is not complete and stage0-uefi can only get you to tcc-mes step</span></div><div class="line" id="100438"><span class="nick" style="color:#bc80bd"><a href="#100438" label="[10:04:38]">&lt;Guest000&gt;</a></span><span class="message">stikonas yes, but no boot .img</span></div><div class="line" id="100456"><span class="nick" style="color:#389600"><a href="#100456" label="[10:04:56]">&lt;fossy&gt;</a></span><span class="message">-.-</span></div><div class="line" id="100508"><span class="nick" style="color:#389600"><a href="#100508" label="[10:05:08]">&lt;fossy&gt;</a></span><span class="message">should work with CSM</span></div><div class="line" id="101056"><span class="nick" style="color:#bc80bd"><a href="#101056" label="[10:10:56]">&lt;Guest000&gt;</a></span><span class="message">I have BIOS system but .img no run</span></div><div class="line" id="101255"><span class="nick" style="color:#389600"><a href="#101255" label="[10:12:55]">&lt;fossy&gt;</a></span><span class="message">please elaborate</span></div><div class="line" id="101335"><span class="nick" style="color:#389600"><a href="#101335" label="[10:13:35]">&lt;fossy&gt;</a></span><span class="message">what is the process you have done to create, write and boot the .img?</span></div><div class="line" id="101605"><span class="nick" style="color:#bc80bd"><a href="#101605" label="[10:16:05]">&lt;Guest000&gt;</a></span><span class="message">1 step․ ./rootfs.py -b -a x86 --cores 4  2 step․ I burned the prepared img on the drive and turned it on, but it didn't work</span></div><div class="line" id="101840"><span class="nick" style="color:#6b8072"><a href="#101840" label="[10:18:40]">&lt;Googulator&gt;</a></span><span class="message">Guest000: please elaborate on &quot;didn't work&quot;</span></div><div class="line" id="101940"><span class="nick" style="color:#bc80bd"><a href="#101940" label="[10:19:40]">&lt;Guest000&gt;</a></span><span class="message">img is run but half part loaded</span></div><div class="line" id="102003"><span class="nick" style="color:#6b8072"><a href="#102003" label="[10:20:03]">&lt;Googulator&gt;</a></span><span class="message">is it a USB drive?</span></div><div class="line" id="102008"><span class="nick" style="color:#bc80bd"><a href="#102008" label="[10:20:08]">&lt;Guest000&gt;</a></span><span class="message">yes</span></div><div class="line" id="102025"><span class="nick" style="color:#6b8072"><a href="#102025" label="[10:20:25]">&lt;Googulator&gt;</a></span><span class="message">try updating the builder-hex0 submodule to this: <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/pull/14">https://github.com/ironmeld/builder-hex0/pull/14</a> </span></div><div class="line" id="102049"><span class="nick" style="color:#6c3d55"><a href="#102049" label="[10:20:49]">&lt;janneke&gt;</a></span><span class="message">fossy: &quot;Compiling an initial mes using M2-Planet. Note that this is only the Mes interpreter, not the libc or anything else.&quot;</span></div><div class="line" id="102127"><span class="nick" style="color:#6c3d55"><a href="#102127" label="[10:21:27]">&lt;janneke&gt;</a></span><span class="message">of course, together with the mes sources, also a part of the mes c library is included in the mes-m2 build</span></div><div class="line" id="102128"><span class="nick" style="color:#6b8072"><a href="#102128" label="[10:21:28]">&lt;Googulator&gt;</a></span><span class="message">Guest000: cd builder-hex0; git fetch <a rel="nofollow" href="https://github.com/Googulator/builder-hex0">https://github.com/Googulator/builder-hex0</a>  307bebbf0da63f19d6c15e39dbb05c846bba4ffc; git checkout FETCH_HEAD; cd ..</span></div><div class="line" id="102140"><span class="nick" style="color:#6c3d55"><a href="#102140" label="[10:21:40]">&lt;janneke&gt;</a></span><span class="message">it's not being compiled as a separate libc</span></div><div class="line" id="102224"><span class="nick" style="color:#6c3d55"><a href="#102224" label="[10:22:24]">&lt;janneke&gt;</a></span><span class="message">but most everything that's in mes'c libc.a (as opposed to libc+tcc, libc+gnu) is being compiled, as that's what mes[-m2] needs :)</span></div><div class="line" id="102243"><span class="nick" style="color:#bc80bd"><a href="#102243" label="[10:22:43]">&lt;Guest000&gt;</a></span><span class="message">1 step․ ./rootfs.py -b -a x86 --cores 4  2 step․ I burned the prepared img on the drive and turned it on, but it didn't work. it is not possible to move forward with other steps apart from these steps՞</span></div><div class="line" id="102303"><span class="nick" style="color:#6b8072"><a href="#102303" label="[10:23:03]">&lt;Googulator&gt;</a></span><span class="message">Guest000: I've run into the same issue yesterday - some BIOSes would actually lock up halfway into loading sources, others will just be so slow as to appear to have locked up; that builder-hex0 commit should fix it</span></div><div class="line" id="102551"><span class="nick" style="color:#6b8072"><a href="#102551" label="[10:25:51]">&lt;Googulator&gt;</a></span><span class="message">or just use a SATA drive, which should work with the included version of builder-hex0</span></div><div class="line" id="102559"><span class="nick" style="color:#6c3d55"><a href="#102559" label="[10:25:59]">&lt;janneke&gt;</a></span><span class="message">fossy: i especially like the description of the early stages, with small code examples</span></div><div class="line" id="103907"><span class="nick" style="color:#bc80bd"><a href="#103907" label="[10:39:07]">&lt;Guest000&gt;</a></span><span class="message">Googulator Have you tried this link <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a>  with the qemu version?</span></div><div class="line" id="103927"><span class="nick" style="color:#6b8072"><a href="#103927" label="[10:39:27]">&lt;Googulator&gt;</a></span><span class="message">???</span></div><div class="line" id="103933"><span class="nick" style="color:#6b8072"><a href="#103933" label="[10:39:33]">&lt;Googulator&gt;</a></span><span class="message">that's just the main repository...</span></div><div class="line" id="104012"><span class="nick" style="color:#6b8072"><a href="#104012" label="[10:40:12]">&lt;Googulator&gt;</a></span><span class="message">and yes, it does work in qemu, as well as on most bare metal setups with a conventional BIOS or CSM</span></div><div class="line" id="104036"><span class="nick" style="color:#6b8072"><a href="#104036" label="[10:40:36]">&lt;Googulator&gt;</a></span><span class="message">just not on USB drives on some systems - for that, you need the builder-hex0 fix I linked</span></div><div class="line" id="104746"><span class="nick" style="color:#389600"><a href="#104746" label="[10:47:46]">&lt;fossy&gt;</a></span><span class="message">janneke: good point, I'll update that bit about mes, thanks :)</span></div><div class="line" id="104836"><span class="nick" style="color:#389600"><a href="#104836" label="[10:48:36]">&lt;fossy&gt;</a></span><span class="message">Googulator: ooh, thats the problem I had on one of my systems</span></div><div class="line" id="104949"><span class="nick" style="color:#6b8072"><a href="#104949" label="[10:49:49]">&lt;Googulator&gt;</a></span><span class="message">fossy: yeah, and it's one that I thought I fixed already in the original HW compat work</span></div><div class="line" id="104955"><span class="nick" style="color:#6b8072"><a href="#104955" label="[10:49:55]">&lt;Googulator&gt;</a></span><span class="message">in fact, I did</span></div><div class="line" id="105002"><span class="nick" style="color:#bc80bd"><a href="#105002" label="[10:50:02]">&lt;Guest000&gt;</a></span><span class="message">Googulator Thank you</span></div><div class="line" id="105009"><span class="nick" style="color:#6b8072"><a href="#105009" label="[10:50:09]">&lt;Googulator&gt;</a></span><span class="message">but accidentally deleted the fix in of the rebases</span></div><div class="line" id="105022"><span class="nick" style="color:#389600"><a href="#105022" label="[10:50:22]">&lt;fossy&gt;</a></span><span class="message">ah, lol that's annoying, i've done that before too</span></div><div class="line" id="105051"><span class="nick" style="color:#6b8072"><a href="#105051" label="[10:50:51]">&lt;Googulator&gt;</a></span><span class="message">it's a simple pushad/popad pair around every int 13h</span></div><div class="line" id="105114"><span class="nick" style="color:#6b8072"><a href="#105114" label="[10:51:14]">&lt;Googulator&gt;</a></span><span class="message">to cope with BIOSes that trash random registers after an int 13h call</span></div><div class="line" id="105133"><span class="nick" style="color:#389600"><a href="#105133" label="[10:51:33]">&lt;fossy&gt;</a></span><span class="message">Googulator: what does #436 bring init.img to?</span></div><div class="line" id="105135"><span class="nick" style="color:#389600"><a href="#105135" label="[10:51:35]">&lt;fossy&gt;</a></span><span class="message">(xz)</span></div><div class="line" id="105141"><span class="nick" style="color:#6b8072"><a href="#105141" label="[10:51:41]">&lt;Googulator&gt;</a></span><span class="message">210MiB</span></div><div class="line" id="105228"><span class="nick" style="color:#6b8072"><a href="#105228" label="[10:52:28]">&lt;Googulator&gt;</a></span><span class="message">and that's just using existing upstream xz/lzma tarballs I could find - we can go even lower if we recompress</span></div><div class="line" id="105334"><span class="nick" style="color:#6b8072"><a href="#105334" label="[10:53:34]">&lt;Googulator&gt;</a></span><span class="message">I would like to also fit SSL support in a 256MiB init.img, which is gonna be harder, but hopefully doable using an alternative SSL library</span></div><div class="line" id="105342"><span class="nick" style="color:#389600"><a href="#105342" label="[10:53:42]">&lt;fossy&gt;</a></span><span class="message">yeah i think it should be possible</span></div><div class="line" id="105346"><span class="nick" style="color:#6b8072"><a href="#105346" label="[10:53:46]">&lt;Googulator&gt;</a></span><span class="message">(I was looking at wolfssl earlier)</span></div><div class="line" id="105414"><span class="nick" style="color:#389600"><a href="#105414" label="[10:54:14]">&lt;fossy&gt;</a></span><span class="message">hm, i'm not super keen on all the lzma / xz tarballs from random mirrors though...</span></div><div class="line" id="105427"><span class="nick" style="color:#389600"><a href="#105427" label="[10:54:27]">&lt;fossy&gt;</a></span><span class="message">i guess we can just revert to the usual ones if they died...</span></div><div class="line" id="105538"><span class="nick" style="color:#389600"><a href="#105538" label="[10:55:38]">&lt;fossy&gt;</a></span><span class="message">but also seems a very easy point for source tampering..</span></div><div class="line" id="105636"><span class="nick" style="color:#6b8072"><a href="#105636" label="[10:56:36]">&lt;Googulator&gt;</a></span><span class="message">I did verify that the contents are identical to the non-xz ones</span></div><div class="line" id="105714"><span class="nick" style="color:#6b8072"><a href="#105714" label="[10:57:14]">&lt;Googulator&gt;</a></span><span class="message">all but one decompress to the same uncompressed tarball as the one it replaces</span></div><div class="line" id="105738"><span class="nick" style="color:#6b8072"><a href="#105738" label="[10:57:38]">&lt;Googulator&gt;</a></span><span class="message">that one (can't remember which one) produces a different tarball, but that tarball then unpacks identically</span></div><div class="line" id="105905"><span class="nick" style="color:#389600"><a href="#105905" label="[10:59:05]">&lt;fossy&gt;</a></span><span class="message">hm, probably ok then</span></div><div class="line" id="110005"><span class="nick" style="color:#6b8072"><a href="#110005" label="[11:00:05]">&lt;Googulator&gt;</a></span><span class="message">The tarball checksums included should catch any future tampering, unless someone manages to collide sha256</span></div><div class="line" id="110304"><span class="nick" style="color:#6b8072"><a href="#110304" label="[11:03:04]">&lt;Googulator&gt;</a></span><span class="message">make-3.82 is the one where the inner tarball isn't binary identical</span></div><div class="line" id="110603"><span class="nick" style="color:#3c5b35"><a href="#110603" label="[11:06:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Well, one mirror tarballs have other problem</span></div><div class="line" id="110629"><span class="nick" style="color:#3c5b35"><a href="#110629" label="[11:06:29]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; You are more likely to be blocked in some firewalled environments</span></div><div class="line" id="110713"><span class="nick" style="color:#3c5b35"><a href="#110713" label="[11:07:13]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Thought we have a few other one mirror tarballs but mostly out of no choice...</span></div><div class="line" id="110810"><span class="nick" style="color:#6b8072"><a href="#110810" label="[11:08:10]">&lt;Googulator&gt;</a></span><span class="message">We don't currently support multiple mirrors for the same tarball at all.</span></div><div class="line" id="110811"><span class="nick" style="color:#3c5b35"><a href="#110811" label="[11:08:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; fossy: how about extending sources syntax to allow other options</span></div><div class="line" id="110824"><span class="nick" style="color:#3c5b35"><a href="#110824" label="[11:08:24]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Googulator: true for now</span></div><div class="line" id="110829"><span class="nick" style="color:#6b8072"><a href="#110829" label="[11:08:29]">&lt;Googulator&gt;</a></span><span class="message">I was planning to add that; it needs a rewrite of how sources are handled</span></div><div class="line" id="110850"><span class="nick" style="color:#3c5b35"><a href="#110850" label="[11:08:50]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Well maybe switching from lzma to bz2 is most my transparent anyway</span></div><div class="line" id="110903"><span class="nick" style="color:#3c5b35"><a href="#110903" label="[11:09:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Should be handled all internally by helpers.sh</span></div><div class="line" id="110930"><span class="nick" style="color:#6b8072"><a href="#110930" label="[11:09:30]">&lt;Googulator&gt;</a></span><span class="message">I was thinking along the lines of</span></div><div class="line" id="110931"><span class="nick" style="color:#6b8072"><a href="#110931" label="[11:09:31]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mirrors.kernel.org/gnu/grub/grub-2.06.tar.xz">https://mirrors.kernel.org/gnu/grub/grub-2.06.tar.xz</a>  b79ea44af91b93d17cd3fe80bdae6ed43770678a9a5ae192ccea803ebb657ee1</span></div><div class="line" id="110931"><span class="nick" style="color:#6b8072"><a href="#110931" label="[11:09:31]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mirrors.edge.kernel.org/gnu/grub/grub-2.06.tar.xz">https://mirrors.edge.kernel.org/gnu/grub/grub-2.06.tar.xz</a>  b79ea44af91b93d17cd3fe80bdae6ed43770678a9a5ae192ccea803ebb657ee1</span></div><div class="line" id="110932"><span class="nick" style="color:#6b8072"><a href="#110932" label="[11:09:32]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ftp.gnu.org/gnu/grub/grub-2.06.tar.xz">https://ftp.gnu.org/gnu/grub/grub-2.06.tar.xz</a>  b79ea44af91b93d17cd3fe80bdae6ed43770678a9a5ae192ccea803ebb657ee1</span></div><div class="line" id="110932"><span class="nick" style="color:#6b8072"><a href="#110932" label="[11:09:32]">&lt;Googulator&gt;</a></span><span class="message">...</span></div><div class="line" id="111008"><span class="nick" style="color:#6b8072"><a href="#111008" label="[11:10:08]">&lt;Googulator&gt;</a></span><span class="message">and then instead of failing after any file fails to download, we go on until the end, and then check if every file listed now exists in distfiles - if not, fail</span></div><div class="line" id="111232"><span class="nick" style="color:#6b8072"><a href="#111232" label="[11:12:32]">&lt;Googulator&gt;</a></span><span class="message">I wonder if Python's implementation of gz/bz2/lzma/xz is guaranteed to generate the same compressed streams in different Python versions with the same parameters</span></div><div class="line" id="111351"><span class="nick" style="color:#af8d2f"><a href="#111351" label="[11:13:51]">&lt;civodul&gt;</a></span><span class="message">you might want to look into Disarchive: <a rel="nofollow" href="https://ngyro.com/software/disarchive.html">https://ngyro.com/software/disarchive.html</a> </span></div><div class="line" id="111459"><span class="nick" style="color:#6b8072"><a href="#111459" label="[11:14:59]">&lt;Googulator&gt;</a></span><span class="message">nice project, but I'm not sure if it addresses my concerns</span></div><div class="line" id="111529"><span class="nick" style="color:#6b8072"><a href="#111529" label="[11:15:29]">&lt;Googulator&gt;</a></span><span class="message">i.e. where the same compression parameters given to different versions/implementations of gzip produce slightly different compressed streams</span></div><div class="line" id="113212"><span class="nick" style="color:#af8d2f"><a href="#113212" label="[11:32:12]">&lt;civodul&gt;</a></span><span class="message">Googulator: one of the thing it does is to determine compression parameters</span></div><div class="line" id="113222"><span class="nick" style="color:#af8d2f"><a href="#113222" label="[11:32:22]">&lt;civodul&gt;</a></span><span class="message">so it can later rebuild bit-identical tarballs</span></div><div class="line" id="113236"><span class="nick" style="color:#6b8072"><a href="#113236" label="[11:32:36]">&lt;Googulator&gt;</a></span><span class="message">so long as the compressor is also bit-identical</span></div><div class="line" id="113238"><span class="nick" style="color:#af8d2f"><a href="#113238" label="[11:32:38]">&lt;civodul&gt;</a></span><span class="message">it does other things too, but maybe you can extract that part</span></div><div class="line" id="113308"><span class="nick" style="color:#6b8072"><a href="#113308" label="[11:33:08]">&lt;Googulator&gt;</a></span><span class="message">the problem is, parameters don't entirely capture a compressor's behavior</span></div><div class="line" id="113309"><span class="nick" style="color:#af8d2f"><a href="#113309" label="[11:33:09]">&lt;civodul&gt;</a></span><span class="message">well, it extracts parameters such that it can rebuild the same compressed file</span></div><div class="line" id="113336"><span class="nick" style="color:#6b8072"><a href="#113336" label="[11:33:36]">&lt;Googulator&gt;</a></span><span class="message">I don't think compression algorithms are that tightly specified</span></div><div class="line" id="113341"><span class="nick" style="color:#af8d2f"><a href="#113341" label="[11:33:41]">&lt;civodul&gt;</a></span><span class="message">the parameters in this case are well defined: Disarchive knows how to interpret them</span></div><div class="line" id="113405"><span class="nick" style="color:#af8d2f"><a href="#113405" label="[11:34:05]">&lt;civodul&gt;</a></span><span class="message">but it’s not subtle: it just tries a whole range of options and determines which one works</span></div><div class="line" id="113436"><span class="nick" style="color:#6b8072"><a href="#113436" label="[11:34:36]">&lt;Googulator&gt;</a></span><span class="message">but are the same parameters guaranteed to produce the same compressed stream on a vastly different version of gzip?</span></div><div class="line" id="113552"><span class="nick" style="color:#6b8072"><a href="#113552" label="[11:35:52]">&lt;Googulator&gt;</a></span><span class="message">compression is an extremely heuristic process, so to me, it's entirely plausible that a newer compressor might emit a smaller stream on the same input with the same parameters, due to improvements to the heuristics</span></div><div class="line" id="113634"><span class="nick" style="color:#6b8072"><a href="#113634" label="[11:36:34]">&lt;Googulator&gt;</a></span><span class="message">that's unlike decompression, which by definition, needs to be extremely deterministic</span></div><div class="line" id="114329"><span class="nick" style="color:#af8d2f"><a href="#114329" label="[11:43:29]">&lt;civodul&gt;</a></span><span class="message">yes, it’s designed to ensure determinism</span></div><div class="line" id="114347"><span class="nick" style="color:#af8d2f"><a href="#114347" label="[11:43:47]">&lt;civodul&gt;</a></span><span class="message">it’s very much a “black box” approach: Disarchive runs stuff and looks whether the output matches</span></div><div class="line" id="114404"><span class="nick" style="color:#af8d2f"><a href="#114404" label="[11:44:04]">&lt;civodul&gt;</a></span><span class="message">but then it knows what to run for a given parameter</span></div><div class="line" id="115648"><span class="nick" style="color:#3c5b35"><a href="#115648" label="[11:56:48]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Googulator: but your sources proposal does not let us switch tarballs type easily. It's better than what we have now...</span></div><div class="line" id="115709"><span class="nick" style="color:#3c5b35"><a href="#115709" label="[11:57:09]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Also it might be nice to have an option of local mirror</span></div><div class="line" id="115743"><span class="nick" style="color:#3c5b35"><a href="#115743" label="[11:57:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; E.g. download everything from http(s)://mydomain/live-bootstrap/</span></div><div class="line" id="131758"><span class="nick" style="color:#6b8072"><a href="#131758" label="[13:17:58]">&lt;Googulator&gt;</a></span><span class="message">IMO the best way to handle a local mirror is to have it bypass the URLs in the sources files, and just serve &amp; request everything by name (or even better, by hash)</span></div><div class="line" id="134018"><span class="nick" style="color:#6b8072"><a href="#134018" label="[13:40:18]">&lt;Googulator&gt;</a></span><span class="message">fossy: reverted the make tarball change</span></div><div class="line" id="134045"><span class="nick" style="color:#6b8072"><a href="#134045" label="[13:40:45]">&lt;Googulator&gt;</a></span><span class="message">the original bz2 make tarball is a weird one; it seems to be a format intermediate between v7 tar and ustar</span></div><div class="line" id="134111"><span class="nick" style="color:#6b8072"><a href="#134111" label="[13:41:11]">&lt;Googulator&gt;</a></span><span class="message">which is probably why the slitaz folks chose to fully repack it, and not just recompress</span></div><div class="line" id="140143"><span class="nick" style="color:#80b1d3"><a href="#140143" label="[14:01:43]">&lt;oriansj&gt;</a></span><span class="message">or just make an environmental variable that can override the behavior of where to fetch files from</span></div><div class="line" id="140240"><span class="nick" style="color:#6b8072"><a href="#140240" label="[14:02:40]">&lt;Googulator&gt;</a></span><span class="message">I was thinking passing an IP address to the host in bootstrap.cfg</span></div><div class="line" id="140240"><span class="nick" style="color:#80b1d3"><a href="#140240" label="[14:02:40]">&lt;oriansj&gt;</a></span><span class="message">like live-bootstrap-source-mirror if set download all of the files from there; otherwise use these links</span></div><div class="line" id="140258"><span class="nick" style="color:#6b8072"><a href="#140258" label="[14:02:58]">&lt;Googulator&gt;</a></span><span class="message">and then having rootfs.py act as a basic HTTP server after it's done creating the image</span></div><div class="line" id="142351"><span class="nick" style="color:#6b8072"><a href="#142351" label="[14:23:51]">&lt;Googulator&gt;</a></span><span class="message">fossy: did some digging for better mirrors, and the only problematic one that remains is <a rel="nofollow" href="https://dept.rpi.edu/acm/packages/diffutils/2.7/distrib/diffutils-2.7.tar.bz2">https://dept.rpi.edu/acm/packages/diffutils/2.7/distrib/diffutils-2.7.tar.bz2</a> </span></div><div class="line" id="142426"><span class="nick" style="color:#6b8072"><a href="#142426" label="[14:24:26]">&lt;Googulator&gt;</a></span><span class="message">this file used to be part of many old versions of LFS (3.2, for example), but those got purged from LFS mirror FTPs.</span></div><div class="line" id="142658"><span class="nick" style="color:#6b8072"><a href="#142658" label="[14:26:58]">&lt;Googulator&gt;</a></span><span class="message">an alternative link I found is <a rel="nofollow" href="http://web.archive.org/web/20010619011221if_/http://download.linuxfromscratch.org/common-packages/diffutils-2.7.tar.bz2">http://web.archive.org/web/20010619011221if_/http://download.linuxfromscratch.org/common-packages/diffutils-2.7.tar.bz2</a>  - not sure how acceptable archive.org links would be</span></div><div class="line" id="143939"><span class="nick" style="color:#389600"><a href="#143939" label="[14:39:39]">&lt;deesix&gt;</a></span><span class="message">In addition to that kind of copy in the Wayback Machine, archive.org allows registered users to make arbitrary uploads so we can have a directory with all those files.</span></div><div class="line" id="144356"><span class="nick" style="color:#389600"><a href="#144356" label="[14:43:56]">&lt;deesix&gt;</a></span><span class="message">As unregistered user, one can add URLs to the Wayback Machine, too.</span></div><div class="line" id="170620"><span class="nick" style="color:#2e2a4a"><a href="#170620" label="[17:06:20]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: The problem Googulator reported is that there is less memory available to user programs.</span></div><div class="line" id="174905"><span class="nick" style="color:#6d2462"><a href="#174905" label="[17:49:05]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: well, the ramdisk drives in Fiwix, unless Linux, use fixed memory. I mean, the kernel reserves all the memory for them instead of assign them memory dinamically</span></div><div class="line" id="175141"><span class="nick" style="color:#6d2462"><a href="#175141" label="[17:51:41]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: this is something that I plan to change, that is implementing RAM disk drives on top of the buffer cache</span></div><div class="line" id="175155"><span class="nick" style="color:#6d2462"><a href="#175155" label="[17:51:55]">&lt;Mikaku&gt;</a></span><span class="message">s/unless/unlike/</span></div><div class="line" id="175324"><span class="nick" style="color:#2e2a4a"><a href="#175324" label="[17:53:24]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I'm not sure what that means or how it would help, sorry. The issue seems to be that only 2GB of ram is supported.</span></div><div class="line" id="175421"><span class="nick" style="color:#6d2462"><a href="#175421" label="[17:54:21]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: yes, there are two possible memory splits: 3/1 or 2/2</span></div><div class="line" id="175431"><span class="nick" style="color:#2e2a4a"><a href="#175431" label="[17:54:31]">&lt;rickmasters&gt;</a></span><span class="message">The code I originally wrote for large initrd relocated it to memory that normally goes unused with Fiwix.</span></div><div class="line" id="175440"><span class="nick" style="color:#2e2a4a"><a href="#175440" label="[17:54:40]">&lt;rickmasters&gt;</a></span><span class="message">It's recorded here: <a rel="nofollow" href="https://github.com/rick-masters/Fiwix/commit/20f83cf4ccc0b818e96a7cd5205681733b18f585">https://github.com/rick-masters/Fiwix/commit/20f83cf4ccc0b818e96a7cd5205681733b18f585</a> </span></div><div class="line" id="175534"><span class="nick" style="color:#2e2a4a"><a href="#175534" label="[17:55:34]">&lt;rickmasters&gt;</a></span><span class="message">That design left more memory available to user programs. Even though Fiwix only used 1GB in the old 3/1 split, it was mostly available to user programs.</span></div><div class="line" id="175700"><span class="nick" style="color:#2e2a4a"><a href="#175700" label="[17:57:00]">&lt;rickmasters&gt;</a></span><span class="message">The question I have is why do you limit available memory to 2GB at the bottom of mm/bios_map.c (with 2/2 split)?</span></div><div class="line" id="175715"><span class="nick" style="color:#6d2462"><a href="#175715" label="[17:57:15]">&lt;Mikaku&gt;</a></span><span class="message">I need numbers to reproduce what you mean. What physical memory, what amount of memory for the ramdisk drive, and what statistics show Fiwix during the boot</span></div><div class="line" id="175809"><span class="nick" style="color:#6d2462"><a href="#175809" label="[17:58:09]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: what line?</span></div><div class="line" id="175855"><span class="nick" style="color:#2e2a4a"><a href="#175855" label="[17:58:55]">&lt;rickmasters&gt;</a></span><span class="message">So this is 4GB physical memory (3GB available in 32-bit space). The numbers are at the bottom of this page: <a rel="nofollow" href="https://logs.guix.gnu.org/bootstrappable/2024-02-11.log">https://logs.guix.gnu.org/bootstrappable/2024-02-11.log</a> </span></div><div class="line" id="175911"><span class="nick" style="color:#6d2462"><a href="#175911" label="[17:59:11]">&lt;Mikaku&gt;</a></span><span class="message">I don't see an '#ifdef CONFIG_VM_SPLIT22' in that mm/bios_map.c</span></div><div class="line" id="175933"><span class="nick" style="color:#2e2a4a"><a href="#175933" label="[17:59:33]">&lt;rickmasters&gt;</a></span><span class="message">This is with a 1.3GB initrd and 256MB kexec ram drive.</span></div><div class="line" id="180037"><span class="nick" style="color:#6d2462"><a href="#180037" label="[18:00:37]">&lt;Mikaku&gt;</a></span><span class="message">with this configuration, user space will have no more than 450MB of memory (aprox.)</span></div><div class="line" id="180125"><span class="nick" style="color:#6d2462"><a href="#180125" label="[18:01:25]">&lt;Mikaku&gt;</a></span><span class="message">I remember you tested my changes on this and everything went OK</span></div><div class="line" id="180155"><span class="nick" style="color:#2e2a4a"><a href="#180155" label="[18:01:55]">&lt;rickmasters&gt;</a></span><span class="message">To be clear, your design is sound and there is no bug.</span></div><div class="line" id="180203"><span class="nick" style="color:#6d2462"><a href="#180203" label="[18:02:03]">&lt;Mikaku&gt;</a></span><span class="message">I also tested it and all went OK as well</span></div><div class="line" id="180259"><span class="nick" style="color:#2e2a4a"><a href="#180259" label="[18:02:59]">&lt;rickmasters&gt;</a></span><span class="message">What Googulator is pointing out is that the old implementation gave more memory to user programs.</span></div><div class="line" id="180419"><span class="nick" style="color:#2e2a4a"><a href="#180419" label="[18:04:19]">&lt;rickmasters&gt;</a></span><span class="message">He is trying to use more memory for a change to live-bootstrap he is working on.</span></div><div class="line" id="180530"><span class="nick" style="color:#2e2a4a"><a href="#180530" label="[18:05:30]">&lt;rickmasters&gt;</a></span><span class="message">Yes, 450MB of memory seems like enough to me but I guess more would be helpful.</span></div><div class="line" id="180627"><span class="nick" style="color:#2e2a4a"><a href="#180627" label="[18:06:27]">&lt;rickmasters&gt;</a></span><span class="message">So, back to the code, the mm/bios_map.c limits physical memory with: kstat.physical_pages = (GDT_BASE &gt;&gt; PAGE_SHIFT);</span></div><div class="line" id="180803"><span class="nick" style="color:#2e2a4a"><a href="#180803" label="[18:08:03]">&lt;rickmasters&gt;</a></span><span class="message">GDT_BASE is set in include/fiwix/linker.h based on PAGE_OFFSET and PAGE_OFFSET is set based on the CONFIG_VM_SPLIT22</span></div><div class="line" id="181048"><span class="nick" style="color:#2e2a4a"><a href="#181048" label="[18:10:48]">&lt;rickmasters&gt;</a></span><span class="message">I was exploring how to remove that 2GB memory truncation and use 3GB of physical.</span></div><div class="line" id="181126"><span class="nick" style="color:#2e2a4a"><a href="#181126" label="[18:11:26]">&lt;rickmasters&gt;</a></span><span class="message">The problem seems to be that in page_init() there is this line: pg-&gt;data = (char *)P2V(addr);</span></div><div class="line" id="181246"><span class="nick" style="color:#2e2a4a"><a href="#181246" label="[18:12:46]">&lt;rickmasters&gt;</a></span><span class="message">I think that is pre-computing the virtual address of free memory. But that virtual address scheme only works up to 2GB.</span></div><div class="line" id="181909"><span class="nick" style="color:#2e2a4a"><a href="#181909" label="[18:19:09]">&lt;rickmasters&gt;</a></span><span class="message">The P2V macro would map physical 0x80000000 to 0xC0000000 to the same virtual addresses, but that virtual range is already mapped.</span></div><div class="line" id="182003"><span class="nick" style="color:#2e2a4a"><a href="#182003" label="[18:20:03]">&lt;rickmasters&gt;</a></span><span class="message">Because P2V maps 0x00000000 - 0x40000000 also to 0x80000000 - 0xC0000000.</span></div><div class="line" id="185209"><span class="nick" style="color:#6d2462"><a href="#185209" label="[18:52:09]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: I'm not following you</span></div><div class="line" id="185249"><span class="nick" style="color:#6d2462"><a href="#185249" label="[18:52:49]">&lt;Mikaku&gt;</a></span><span class="message">the numbers in the bottom of the URL above is like comparing apples and oranges, the first has 2GB physical and the second case with only 1GB physical you cannot define the same ramdisk size than in the first case</span></div><div class="line" id="185334"><span class="nick" style="color:#6d2462"><a href="#185334" label="[18:53:34]">&lt;Mikaku&gt;</a></span><span class="message">what was the cmdline in both cases?</span></div><div class="line" id="185846"><span class="nick" style="color:#2e2a4a"><a href="#185846" label="[18:58:46]">&lt;rickmasters&gt;</a></span><span class="message">In both cases there was 4GB physical in the machine.</span></div><div class="line" id="185909"><span class="nick" style="color:#2e2a4a"><a href="#185909" label="[18:59:09]">&lt;rickmasters&gt;</a></span><span class="message">The first case is 2/2 split and Fiwix limited physical to 2GB.</span></div><div class="line" id="185927"><span class="nick" style="color:#6b8072"><a href="#185927" label="[18:59:27]">&lt;Googulator&gt;</a></span><span class="message">And with the initrd located within that 2GB.</span></div><div class="line" id="185928"><span class="nick" style="color:#2e2a4a"><a href="#185928" label="[18:59:28]">&lt;rickmasters&gt;</a></span><span class="message">The second was the old 3/1 split and Fiwix limited physical to 1GB.</span></div><div class="line" id="190010"><span class="nick" style="color:#6b8072"><a href="#190010" label="[19:00:10]">&lt;Googulator&gt;</a></span><span class="message">In the 3/1 case, the initrd was relocated to be outside the 1GB normally used by Fiwix, using rickmasters' original large-initrd implementation</span></div><div class="line" id="190457"><span class="nick" style="color:#6b8072"><a href="#190457" label="[19:04:57]">&lt;Googulator&gt;</a></span><span class="message">Mikaku: about the Kexec memory map passing issue, it seems there are 2 (maybe 3) distinct issues at play here:</span></div><div class="line" id="190602"><span class="nick" style="color:#6b8072"><a href="#190602" label="[19:06:02]">&lt;Googulator&gt;</a></span><span class="message">1. Fiwix modifies the memory map for its own needs (i.e. reserving a range needed for kexec), but doesn't back up the original memory map, instead passing the modified one to the kexec guest.</span></div><div class="line" id="190715"><span class="nick" style="color:#6b8072"><a href="#190715" label="[19:07:15]">&lt;Googulator&gt;</a></span><span class="message">2. The actual BIOS memory map is a list of (start, length, type) records, but Fiwix prefers to instead store a (start, end, type) record list, and there seems to be some confusion about the semantics of the &quot;end&quot; field.</span></div><div class="line" id="190811"><span class="nick" style="color:#6b8072"><a href="#190811" label="[19:08:11]">&lt;Googulator&gt;</a></span><span class="message">In <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/mm/bios_map.c#L115">https://github.com/mikaku/Fiwix/blob/master/mm/bios_map.c#L115</a>  &quot;end&quot; is interpreted as an inclusive end, i.e. the address of the last byte of memory in the range.</span></div><div class="line" id="190857"><span class="nick" style="color:#6b8072"><a href="#190857" label="[19:08:57]">&lt;Googulator&gt;</a></span><span class="message">However, <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/mm/memory.c#L310">https://github.com/mikaku/Fiwix/blob/master/mm/memory.c#L310</a>  treats it as &quot;exclusive end&quot;, i.e. the first byte beyond the range.</span></div><div class="line" id="191148"><span class="nick" style="color:#6b8072"><a href="#191148" label="[19:11:48]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/kernel/kexec.c#L262">https://github.com/mikaku/Fiwix/blob/master/kernel/kexec.c#L262</a>  (kexec-multiboot) again treats &quot;end&quot; as inclusive, while <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/kernel/kexec.c#L599">https://github.com/mikaku/Fiwix/blob/master/kernel/kexec.c#L599</a>  (kexec-linux) considers it exclusive</span></div><div class="line" id="191707"><span class="nick" style="color:#6b8072"><a href="#191707" label="[19:17:07]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/mm/bios_map.c#L72">https://github.com/mikaku/Fiwix/blob/master/mm/bios_map.c#L72</a>  is the only place where Fiwix reads bios_mem_map for its own use - and it's treated as exclusive-end (see &quot;addr &gt;= bmm-&gt;from &amp;&amp; addr &lt; (bmm-&gt;to &amp; PAGE_MASK)&quot; - inclusive-end would need addr &lt;= instead)</span></div><div class="line" id="192537"><span class="nick" style="color:#6d2462"><a href="#192537" label="[19:25:37]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: ok, both have 4GB of physical memory but different vm split, what was exactly the cmdline? I need to know how many ramdisk drives were defined and their size</span></div><div class="line" id="192724"><span class="nick" style="color:#6b8072"><a href="#192724" label="[19:27:24]">&lt;Googulator&gt;</a></span><span class="message">In both cases, there was a 256MiB kexec ramdisk allocated by Fiwix itself, and a 1280MiB initrd passed by kexec-fiwix at physical address range [0x1C6000, 0x51C6000)</span></div><div class="line" id="213112"><span class="nick" style="color:#6d2462"><a href="#213112" label="[21:31:12]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: ok, thanks</span></div><div class="line" id="220657"><span class="nick" style="color:#6d2462"><a href="#220657" label="[22:06:57]">&lt;Mikaku&gt;</a></span><span class="message">so IIUC, on the rickmasters' 3/1 split with an initrd of 1.3MB and a kexec of 256MB there is more user space available than on the 2/2 split with the same initrd and kexec sizes? (assuming 4GB of physical memory in both cases)</span></div><div class="line" id="220707"><span class="nick" style="color:#6b8072"><a href="#220707" label="[22:07:07]">&lt;Googulator&gt;</a></span><span class="message">1.3GB</span></div><div class="line" id="220722"><span class="nick" style="color:#6b8072"><a href="#220722" label="[22:07:22]">&lt;Googulator&gt;</a></span><span class="message">and yes, that's exactly my observation</span></div><div class="line" id="220722"><span class="nick" style="color:#6d2462"><a href="#220722" label="[22:07:22]">&lt;Mikaku&gt;</a></span><span class="message">ah yes, that was a typo, sorry</span></div><div class="line" id="220742"><span class="nick" style="color:#6b8072"><a href="#220742" label="[22:07:42]">&lt;Googulator&gt;</a></span><span class="message">in fact, with rickmasters' version, the amount of userspace memory available is independent of the size of the initrd</span></div><div class="line" id="220812"><span class="nick" style="color:#6b8072"><a href="#220812" label="[22:08:12]">&lt;Googulator&gt;</a></span><span class="message">it's 1GiB minus the kexec space &amp; whatever the kernel itself needs</span></div><div class="line" id="220832"><span class="nick" style="color:#6d2462"><a href="#220832" label="[22:08:32]">&lt;Mikaku&gt;</a></span><span class="message">I see</span></div><div class="line" id="220839"><span class="nick" style="color:#2e2a4a"><a href="#220839" label="[22:08:39]">&lt;rickmasters&gt;</a></span><span class="message">I had relocated the initrd to virtual/physical 0x6000000 which was &quot;free&quot; in the 3/1 scheme.</span></div><div class="line" id="220847"><span class="nick" style="color:#6b8072"><a href="#220847" label="[22:08:47]">&lt;Googulator&gt;</a></span><span class="message">with 1.5.0-lb1, the initrd now impinges upon userspace memory - the larger the initrd, the less memory remaining for userspace</span></div><div class="line" id="220849"><span class="nick" style="color:#2e2a4a"><a href="#220849" label="[22:08:49]">&lt;rickmasters&gt;</a></span><span class="message">sorry, 0x60000000</span></div><div class="line" id="221231"><span class="nick" style="color:#6b8072"><a href="#221231" label="[22:12:31]">&lt;Googulator&gt;</a></span><span class="message">Been looking at the deblob script; the overwhelming majority (even in the default, non-force mode) that it removes isn't actually blobs, but firmware loading machinery that's entirely harmless from a trust/security perspective if the corresponding firmware isn't installed</span></div><div class="line" id="221304"><span class="nick" style="color:#6b8072"><a href="#221304" label="[22:13:04]">&lt;Googulator&gt;</a></span><span class="message">In fact, I haven't been able to find a single example of a blob masquerading as source in actual C files so far</span></div><div class="line" id="221337"><span class="nick" style="color:#6b8072"><a href="#221337" label="[22:13:37]">&lt;Googulator&gt;</a></span><span class="message">so far, the only actual firmware that may need to be removed is in the /firmware directory, clearly separated out</span></div><div class="line" id="221436"><span class="nick" style="color:#6d2462"><a href="#221436" label="[22:14:36]">&lt;Mikaku&gt;</a></span><span class="message">I guess the best way is taking advantage of the memory above 1GB (in 3/1 split) and above 2GB (in 2/2 split) for ramdisk drives</span></div><div class="line" id="221728"><span class="nick" style="color:#6d2462"><a href="#221728" label="[22:17:28]">&lt;Mikaku&gt;</a></span><span class="message">this will complicate the current static model of reserving the whole memory for ramdisks in the case when the requested ramdisk size doesn't fit above the 1GB or 2Gb on each case</span></div><div class="line" id="221825"><span class="nick" style="color:#2e2a4a"><a href="#221825" label="[22:18:25]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: There is typically only 1GB contiguous memory available above 2GB for the 2/2 split.</span></div><div class="line" id="221832"><span class="nick" style="color:#6b8072"><a href="#221832" label="[22:18:32]">&lt;Googulator&gt;</a></span><span class="message">IMO it's enough to do that for the kexec ramdisk</span></div><div class="line" id="221841"><span class="nick" style="color:#6b8072"><a href="#221841" label="[22:18:41]">&lt;Googulator&gt;</a></span><span class="message">and also to tolerate an initrd being passed in high memory</span></div><div class="line" id="221856"><span class="nick" style="color:#6b8072"><a href="#221856" label="[22:18:56]">&lt;Googulator&gt;</a></span><span class="message">regular ramdisks aren't relevant for bootstrapping</span></div><div class="line" id="221917"><span class="nick" style="color:#6d2462"><a href="#221917" label="[22:19:17]">&lt;Mikaku&gt;</a></span><span class="message">but what if you have 2.5GB of physical memory only?</span></div><div class="line" id="221931"><span class="nick" style="color:#6b8072"><a href="#221931" label="[22:19:31]">&lt;Googulator&gt;</a></span><span class="message">then you die long before reaching Fiwix</span></div><div class="line" id="221948"><span class="nick" style="color:#6b8072"><a href="#221948" label="[22:19:48]">&lt;Googulator&gt;</a></span><span class="message">builder-hex0 requires 3GB as an absolute bare minimum</span></div><div class="line" id="222016"><span class="nick" style="color:#6d2462"><a href="#222016" label="[22:20:16]">&lt;Mikaku&gt;</a></span><span class="message">the design must be generic to fit all cases</span></div><div class="line" id="222040"><span class="nick" style="color:#6d2462"><a href="#222040" label="[22:20:40]">&lt;Mikaku&gt;</a></span><span class="message">I'll think about it</span></div><div class="line" id="222101"><span class="nick" style="color:#6b8072"><a href="#222101" label="[22:21:01]">&lt;Googulator&gt;</a></span><span class="message">the only potentially problematic case I see is where a user has 2GB of physical RAM, and tries to combine 2/2 split with kexec</span></div><div class="line" id="222115"><span class="nick" style="color:#6b8072"><a href="#222115" label="[22:21:15]">&lt;Googulator&gt;</a></span><span class="message">in which case, there's no space to place the kexec buffer in high memory</span></div><div class="line" id="222221"><span class="nick" style="color:#6d2462"><a href="#222221" label="[22:22:21]">&lt;Mikaku&gt;</a></span><span class="message">in that kernel the memory for ramdisk and kexec will be taken from the user space</span></div><div class="line" id="222230"><span class="nick" style="color:#6d2462"><a href="#222230" label="[22:22:30]">&lt;Mikaku&gt;</a></span><span class="message">s/kernel/case/</span></div><div class="line" id="222248"><span class="nick" style="color:#6b8072"><a href="#222248" label="[22:22:48]">&lt;Googulator&gt;</a></span><span class="message">but even without dealing separately with kexec, 3/1 split while tolerating initrd in high memory is enough to get 768MB of userland memory</span></div><div class="line" id="222258"><span class="nick" style="color:#2e2a4a"><a href="#222258" label="[22:22:58]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Mikaku's current design pretty much assumes the initrd is contiguous after the kernel in low memory.</span></div><div class="line" id="222320"><span class="nick" style="color:#6b8072"><a href="#222320" label="[22:23:20]">&lt;Googulator&gt;</a></span><span class="message">why would that have to be?</span></div><div class="line" id="222335"><span class="nick" style="color:#6b8072"><a href="#222335" label="[22:23:35]">&lt;Googulator&gt;</a></span><span class="message">multiboot already passes the initrd with an explicit address</span></div><div class="line" id="222356"><span class="nick" style="color:#2e2a4a"><a href="#222356" label="[22:23:56]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Perhaps it can be changed but it would not be trivial</span></div><div class="line" id="222413"><span class="nick" style="color:#6b8072"><a href="#222413" label="[22:24:13]">&lt;Googulator&gt;</a></span><span class="message">in fact, Fiwix already does boot with a high-placed initrd; it just seems to cause weird malloc failures in userspace later</span></div><div class="line" id="222532"><span class="nick" style="color:#8dd3c7"><a href="#222532" label="[22:25:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, stage0-posix also needs a lot of physical RAM, probably at least 3 GB too...</span></div><div class="line" id="222542"><span class="nick" style="color:#8dd3c7"><a href="#222542" label="[22:25:42]">&lt;stikonas&gt;</a></span><span class="message">s/stage0-posix/stage0-uefi/</span></div><div class="line" id="222608"><span class="nick" style="color:#8dd3c7"><a href="#222608" label="[22:26:08]">&lt;stikonas&gt;</a></span><span class="message">once you start building mes, those processes use a lot of RAM and have to be suspended for forks</span></div><div class="line" id="222627"><span class="nick" style="color:#8dd3c7"><a href="#222627" label="[22:26:27]">&lt;stikonas&gt;</a></span><span class="message">so you need maybe 1 GiB for program memory, 1 GiB for suspended processes...</span></div><div class="line" id="222648"><span class="nick" style="color:#2e2a4a"><a href="#222648" label="[22:26:48]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm surprised that works at all. See get_last_boot_addr() which is used as the foundation for locating kernel structures.</span></div><div class="line" id="222951"><span class="nick" style="color:#6b8072"><a href="#222951" label="[22:29:51]">&lt;Googulator&gt;</a></span><span class="message">ouch, that's indeed really naive... and exploitable for our purposes :)</span></div><div class="line" id="223034"><span class="nick" style="color:#6b8072"><a href="#223034" label="[22:30:34]">&lt;Googulator&gt;</a></span><span class="message">it uses the end address of the last module - as in the last one listed in the multiboot structure, not the last one in memory</span></div><div class="line" id="223142"><span class="nick" style="color:#2e2a4a"><a href="#223142" label="[22:31:42]">&lt;rickmasters&gt;</a></span><span class="message">Isn't the initrd the last module?</span></div><div class="line" id="223152"><span class="nick" style="color:#6b8072"><a href="#223152" label="[22:31:52]">&lt;Googulator&gt;</a></span><span class="message">it is, but only because we choose it to be</span></div><div class="line" id="223255"><span class="nick" style="color:#6b8072"><a href="#223255" label="[22:32:55]">&lt;Googulator&gt;</a></span><span class="message">nothing stops kexec-fiwix from adding a fake, zero-length module located after the initrd in the multiboot structure, but placed immediately after the kernel image in RAM</span></div><div class="line" id="223321"><span class="nick" style="color:#6b8072"><a href="#223321" label="[22:33:21]">&lt;Googulator&gt;</a></span><span class="message">&amp; extra modules are just ignored - apart from their effect on placement of kernel structures</span></div><div class="line" id="223512"><span class="nick" style="color:#2e2a4a"><a href="#223512" label="[22:35:12]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Right, or we can do something like was done before: <a rel="nofollow" href="https://github.com/rick-masters/Fiwix/blob/20f83cf4ccc0b818e96a7cd5205681733b18f585/kernel/multiboot.c#L285-L289">https://github.com/rick-masters/Fiwix/blob/20f83cf4ccc0b818e96a7cd5205681733b18f585/kernel/multiboot.c#L285-L289</a> </span></div><div class="line" id="223534"><span class="nick" style="color:#2e2a4a"><a href="#223534" label="[22:35:34]">&lt;rickmasters&gt;</a></span><span class="message">I'm just saying that it's strange that you were able to boot with a high initrd given how it works now.</span></div><div class="line" id="223955"><span class="nick" style="color:#2e2a4a"><a href="#223955" label="[22:39:55]">&lt;rickmasters&gt;</a></span><span class="message">Maybe it's not that strange, but the kernel will reserve all the memory up to the end of the initrd:</span></div><div class="line" id="223957"><span class="nick" style="color:#2e2a4a"><a href="#223957" label="[22:39:57]">&lt;rickmasters&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/2f0284ff736e47a31bb4a727b8b9107a14bb5ea7/mm/page.c#L461-L465">https://github.com/mikaku/Fiwix/blob/2f0284ff736e47a31bb4a727b8b9107a14bb5ea7/mm/page.c#L461-L465</a> </span></div><div class="line" id="224015"><span class="nick" style="color:#2e2a4a"><a href="#224015" label="[22:40:15]">&lt;rickmasters&gt;</a></span><span class="message">So that's probably why you didn't have memory.</span></div><div class="line" id="224054"><span class="nick" style="color:#6b8072"><a href="#224054" label="[22:40:54]">&lt;Googulator&gt;</a></span><span class="message">it's not that I didn't have memory, but rather malloc failed in a weird way</span></div><div class="line" id="224109"><span class="nick" style="color:#6b8072"><a href="#224109" label="[22:41:09]">&lt;Googulator&gt;</a></span><span class="message">probably because kernel structures overflowed into non-RAM</span></div><div class="line" id="224158"><span class="nick" style="color:#2e2a4a"><a href="#224158" label="[22:41:58]">&lt;rickmasters&gt;</a></span><span class="message">I'm a little fuzzy on virtual memory, but it's surprising that you were able to do anything in that address space,</span></div><div class="line" id="224219"><span class="nick" style="color:#2e2a4a"><a href="#224219" label="[22:42:19]">&lt;rickmasters&gt;</a></span><span class="message">like run a program at 0x0804xxxx given the whole area was kernel reserved.</span></div><div class="line" id="224257"><span class="nick" style="color:#2e2a4a"><a href="#224257" label="[22:42:57]">&lt;rickmasters&gt;</a></span><span class="message">but I'm probably just mixing up physical vs. virtual</span></div><div class="line" id="224332"><span class="nick" style="color:#6b8072"><a href="#224332" label="[22:43:32]">&lt;Googulator&gt;</a></span><span class="message">check is for addr &lt; V2P(_last_data_addr)</span></div><div class="line" id="224348"><span class="nick" style="color:#6b8072"><a href="#224348" label="[22:43:48]">&lt;Googulator&gt;</a></span><span class="message">V2P(_last_data_addr) is last_data_addr - PAGE_OFFSET</span></div><div class="line" id="224438"><span class="nick" style="color:#6b8072"><a href="#224438" label="[22:44:38]">&lt;Googulator&gt;</a></span><span class="message">probably some over/underflow meant it didn't reserve correctly</span></div><div class="line" id="224630"><span class="nick" style="color:#2e2a4a"><a href="#224630" label="[22:46:30]">&lt;rickmasters&gt;</a></span><span class="message">Right because _last_data_addr is converted to virtual here: <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/2f0284ff736e47a31bb4a727b8b9107a14bb5ea7/mm/memory.c#L334">https://github.com/mikaku/Fiwix/blob/2f0284ff736e47a31bb4a727b8b9107a14bb5ea7/mm/memory.c#L334</a> </span></div><div class="line" id="224908"><span class="nick" style="color:#2e2a4a"><a href="#224908" label="[22:49:08]">&lt;rickmasters&gt;</a></span><span class="message">Anyway, I see what you're getting at- use kexec to locate the initrd in a similar fashion to what was done before.</span></div><div class="line" id="225150"><span class="nick" style="color:#6b8072"><a href="#225150" label="[22:51:50]">&lt;Googulator&gt;</a></span><span class="message">yes, preferably in a zero-copy way</span></div><div class="line" id="225222"><span class="nick" style="color:#6b8072"><a href="#225222" label="[22:52:22]">&lt;Googulator&gt;</a></span><span class="message">your version copied the initrd from builder-hex0's file space to 0x1c6000, and then from there to 0x60000000</span></div><div class="line" id="225235"><span class="nick" style="color:#6b8072"><a href="#225235" label="[22:52:35]">&lt;Googulator&gt;</a></span><span class="message">right now, we copy to 0x1c6000, and leave it there</span></div><div class="line" id="225317"><span class="nick" style="color:#2e2a4a"><a href="#225317" label="[22:53:17]">&lt;rickmasters&gt;</a></span><span class="message">The method that I chose was compatible with qemu's placement of the initrd although that doesn't necessarily need to be the case.</span></div><div class="line" id="225337"><span class="nick" style="color:#6b8072"><a href="#225337" label="[22:53:37]">&lt;Googulator&gt;</a></span><span class="message">what I want to do instead is to just pass its address in builder-hex0's file space directly to Fiwix, and then add a dummy 2nd module at 0x1c6000, to correctly place the kernel structures</span></div><div class="line" id="225446"><span class="nick" style="color:#6b8072"><a href="#225446" label="[22:54:46]">&lt;Googulator&gt;</a></span><span class="message">the only thing needed then is to mark the actual location of the initrd as reserved in Fiwix's copy of the e820 map</span></div><div class="line" id="225501"><span class="nick" style="color:#6b8072"><a href="#225501" label="[22:55:01]">&lt;Googulator&gt;</a></span><span class="message">but not the copy Fiwix hands off to Linux</span></div><div class="line" id="225542"><span class="nick" style="color:#6b8072"><a href="#225542" label="[22:55:42]">&lt;Googulator&gt;</a></span><span class="message">the groundwork for having a different memory map for Fiwix's use, vs. for the kexec guest (Linux in our case) is in <a rel="nofollow" href="https://github.com/mikaku/Fiwix/pull/74">https://github.com/mikaku/Fiwix/pull/74</a> </span></div><div class="line" id="230647"><span class="nick" style="color:#2e2a4a"><a href="#230647" label="[23:06:47]">&lt;rickmasters&gt;</a></span><span class="message">I shouldn't really comment until seeing the entire thing.</span></div><div class="line" id="230722"><span class="nick" style="color:#2e2a4a"><a href="#230722" label="[23:07:22]">&lt;rickmasters&gt;</a></span><span class="message">But, to be honest, the existing design plus being able to utilize more physical memory for user programs seems like it would be cleaner.</span></div><div class="line" id="230759"><span class="nick" style="color:#2e2a4a"><a href="#230759" label="[23:07:59]">&lt;rickmasters&gt;</a></span><span class="message">But I don't know how that would work either, so ...</span></div><div class="line" id="234711"><span class="nick" style="color:#8dd3c7"><a href="#234711" label="[23:47:11]">&lt;stikonas&gt;</a></span><span class="message">Googulator: was it you who said there is a way to force gcc to do only 2 stage builds?</span></div><br /></div></body></html>