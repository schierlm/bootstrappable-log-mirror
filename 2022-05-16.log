<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003322"><span class="nick" style="color:#8dd3c7"><a href="#003322" label="[00:33:22]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: your kernel looks at the path and if it is /dev/hda1 it just dumps straight to disk right?</span></div><div class="line" id="003430"><span class="nick" style="color:#8dd3c7"><a href="#003430" label="[00:34:30]">&lt;oriansj&gt;</a></span><span class="message">so I wouldn't need to do gft-create -o foo.img  and keep it small enough to fit in memory right?</span></div><div class="line" id="003830"><span class="nick" style="color:#8dd3c7"><a href="#003830" label="[00:38:30]">&lt;oriansj&gt;</a></span><span class="message">so I could do something like --disk-size 20GiB and just dump 20GiB of disk blocks straight onto the disk right?</span></div><div class="line" id="004142"><span class="nick" style="color:#2e2a4a"><a href="#004142" label="[00:41:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, why do we have all that link stuff in separate file rather than in tarball?</span></div><div class="line" id="005611"><span class="nick" style="color:#2e2a4a"><a href="#005611" label="[00:56:11]">&lt;stikonas&gt;</a></span><span class="message">ok, found another bug with packages...</span></div><div class="line" id="005919"><span class="nick" style="color:#2e2a4a"><a href="#005919" label="[00:59:19]">&lt;stikonas&gt;</a></span><span class="message">when we touch symlinks, the destination file is affected</span></div><div class="line" id="005921"><span class="nick" style="color:#2e2a4a"><a href="#005921" label="[00:59:21]">&lt;stikonas&gt;</a></span><span class="message">rather than symlink</span></div><div class="line" id="005935"><span class="nick" style="color:#2e2a4a"><a href="#005935" label="[00:59:35]">&lt;stikonas&gt;</a></span><span class="message">newer touch has -h option, but not in the old coreutils...</span></div><div class="line" id="010556"><span class="nick" style="color:#2e2a4a"><a href="#010556" label="[01:05:56]">&lt;stikonas&gt;</a></span><span class="message">oh, I guess that might be the reason why links are separate... touch was not fixing their timestamps, so tarball packages were not reproducible</span></div><div class="line" id="010801"><span class="nick" style="color:#6b8072"><a href="#010801" label="[01:08:01]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: the kernel runs the main script on the internalshell, then if the file /dev/hda exists, it is flushed to disk starting at the first sector</span></div><div class="line" id="010826"><span class="nick" style="color:#6b8072"><a href="#010826" label="[01:08:26]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: so, it does not happen immediately</span></div><div class="line" id="011103"><span class="nick" style="color:#8dd3c7"><a href="#011103" label="[01:11:03]">&lt;oriansj&gt;</a></span><span class="message">so it only does the write when the sector is full right?</span></div><div class="line" id="011208"><span class="nick" style="color:#6b8072"><a href="#011208" label="[01:12:08]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i believe so, and i have a TODO to fix that, but i have also noticed that it appears to work anyway, not sure why</span></div><div class="line" id="011249"><span class="nick" style="color:#8dd3c7"><a href="#011249" label="[01:12:49]">&lt;oriansj&gt;</a></span><span class="message">would a close also cause a write to disk?</span></div><div class="line" id="011316"><span class="nick" style="color:#8dd3c7"><a href="#011316" label="[01:13:16]">&lt;oriansj&gt;</a></span><span class="message">that way if I make sure to close at the end, then we can be certain everything is written.</span></div><div class="line" id="011455"><span class="nick" style="color:#6b8072"><a href="#011455" label="[01:14:55]">&lt;rickmasters&gt;</a></span><span class="message">so, the write to disk is at the very end of builder-hex0.hex0 so take a look, it actually writes the last sector even if not full, so no bug, no TODO</span></div><div class="line" id="011508"><span class="nick" style="color:#6b8072"><a href="#011508" label="[01:15:08]">&lt;rickmasters&gt;</a></span><span class="message">... just checked</span></div><div class="line" id="011535"><span class="nick" style="color:#6b8072"><a href="#011535" label="[01:15:35]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: no close does nothing :)</span></div><div class="line" id="011810"><span class="nick" style="color:#6b8072"><a href="#011810" label="[01:18:10]">&lt;rickmasters&gt;</a></span><span class="message">so i answered your question inaccurately, it doesn't write when you've filled a sector, you can write to a memory file all you want, it flushes at the very end</span></div><div class="line" id="011853"><span class="nick" style="color:#6b8072"><a href="#011853" label="[01:18:53]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: it flushes right before the kernel terminates / reboots</span></div><div class="line" id="011943"><span class="nick" style="color:#6b8072"><a href="#011943" label="[01:19:43]">&lt;rickmasters&gt;</a></span><span class="message">to code has the label ok_exit:</span></div><div class="line" id="012001"><span class="nick" style="color:#6b8072"><a href="#012001" label="[01:20:01]">&lt;rickmasters&gt;</a></span><span class="message">*the code</span></div><div class="line" id="012017"><span class="nick" style="color:#8dd3c7"><a href="#012017" label="[01:20:17]">&lt;oriansj&gt;</a></span><span class="message">oh I was asking relative to what you mentioned yesterday about bootstrapping a proper filesystem at the end instead of just flushing it to the disk</span></div><div class="line" id="012130"><span class="nick" style="color:#6b8072"><a href="#012130" label="[01:21:30]">&lt;rickmasters&gt;</a></span><span class="message">so, the kernel only flushes /dev/hda to the beginning of the disk, partition based writes (/dev/hda{1,2,3,4}) are not implemented, not sure it was needed</span></div><div class="line" id="012229"><span class="nick" style="color:#8dd3c7"><a href="#012229" label="[01:22:29]">&lt;oriansj&gt;</a></span><span class="message">I was thinking of when you suggested: catm /dev/hda1 newfilesystem</span></div><div class="line" id="012237"><span class="nick" style="color:#6b8072"><a href="#012237" label="[01:22:37]">&lt;rickmasters&gt;</a></span><span class="message">so, writes to /dev/hda just creates a memory file with that name, at the end it looks for that file and flushes it</span></div><div class="line" id="012312"><span class="nick" style="color:#6b8072"><a href="#012312" label="[01:23:12]">&lt;rickmasters&gt;</a></span><span class="message">right, I sent a link that outlined the idea of writing to partitions, but it said it was unimplemented, but its not hard</span></div><div class="line" id="012421"><span class="nick" style="color:#6b8072"><a href="#012421" label="[01:24:21]">&lt;rickmasters&gt;</a></span><span class="message">i already have a routine to read partition locations from the partition table (i read source from the location of partition 4 in the partition table)</span></div><div class="line" id="012524"><span class="nick" style="color:#6b8072"><a href="#012524" label="[01:25:24]">&lt;rickmasters&gt;</a></span><span class="message">that's why i kept the partition table in the MBR, so it could be used to read/write different locations</span></div><div class="line" id="012631"><span class="nick" style="color:#8dd3c7"><a href="#012631" label="[01:26:31]">&lt;oriansj&gt;</a></span><span class="message">ok, so it'll be a bit before you could have that implemented. Here is what I am doing and planning: gfk-create --disk-size -f file1 -f file2 ... -f fileN -o /dev/hda1 and writing 512bytes at a time the entire partition. with the optional flag --master-boot-record $file to setup everything.</span></div><div class="line" id="012843"><span class="nick" style="color:#6b8072"><a href="#012843" label="[01:28:43]">&lt;rickmasters&gt;</a></span><span class="message">it wouldn't take long (an hour of so) to support writing /dev/hda{1,2,3,4} (if any of those are written by a process) to the corresponding partition locations</span></div><div class="line" id="012916"><span class="nick" style="color:#6b8072"><a href="#012916" label="[01:29:16]">&lt;rickmasters&gt;</a></span><span class="message">the partition locations would need to be set in the MBR for that to work</span></div><div class="line" id="013006"><span class="nick" style="color:#6b8072"><a href="#013006" label="[01:30:06]">&lt;rickmasters&gt;</a></span><span class="message">the MBR could be supported by writing one sector to /dev/hda (which represents the entire disk)</span></div><div class="line" id="013010"><span class="nick" style="color:#8dd3c7"><a href="#013010" label="[01:30:10]">&lt;oriansj&gt;</a></span><span class="message">well that isn't an issue as we can use M1 to create a new MBR file and include it in the write to /dev/hda1</span></div><div class="line" id="013037"><span class="nick" style="color:#6b8072"><a href="#013037" label="[01:30:37]">&lt;rickmasters&gt;</a></span><span class="message">you could set the first partition to start at sector 1 if you want</span></div><div class="line" id="013053"><span class="nick" style="color:#6b8072"><a href="#013053" label="[01:30:53]">&lt;rickmasters&gt;</a></span><span class="message">(that's not typical I think, but up to you)</span></div><div class="line" id="013204"><span class="nick" style="color:#8dd3c7"><a href="#013204" label="[01:32:04]">&lt;oriansj&gt;</a></span><span class="message">I was just going to have 1 partition per disk with the bootloader in the MBR which would support reading GFK and prompt for the filename of the kernel</span></div><div class="line" id="013319"><span class="nick" style="color:#8dd3c7"><a href="#013319" label="[01:33:19]">&lt;oriansj&gt;</a></span><span class="message">so that the creating of the Linux image would just be written to a new disk so if anything goes wrong we still have a functional disk to redo things</span></div><div class="line" id="013320"><span class="nick" style="color:#6b8072"><a href="#013320" label="[01:33:20]">&lt;rickmasters&gt;</a></span><span class="message">so, normally the MBR is not considered to be in a partition, the partition table is in the MBR</span></div><div class="line" id="013339"><span class="nick" style="color:#8dd3c7"><a href="#013339" label="[01:33:39]">&lt;oriansj&gt;</a></span><span class="message">yes the MBR is just sector 0 of the disk</span></div><div class="line" id="013413"><span class="nick" style="color:#8dd3c7"><a href="#013413" label="[01:34:13]">&lt;oriansj&gt;</a></span><span class="message">with a special 55AA at the end of the block</span></div><div class="line" id="013416"><span class="nick" style="color:#6b8072"><a href="#013416" label="[01:34:16]">&lt;rickmasters&gt;</a></span><span class="message">there is no sector 0, in CHS disk geometry, sectors are one based</span></div><div class="line" id="013508"><span class="nick" style="color:#8dd3c7"><a href="#013508" label="[01:35:08]">&lt;oriansj&gt;</a></span><span class="message">valid point</span></div><div class="line" id="013532"><span class="nick" style="color:#8dd3c7"><a href="#013532" label="[01:35:32]">&lt;oriansj&gt;</a></span><span class="message">I was thinking in terms of LBA but ok</span></div><div class="line" id="013709"><span class="nick" style="color:#8dd3c7"><a href="#013709" label="[01:37:09]">&lt;oriansj&gt;</a></span><span class="message">CHS to LBA mapping isn't something I tend to keep in my head but i appreciate the correction.</span></div><div class="line" id="013911"><span class="nick" style="color:#6b8072"><a href="#013911" label="[01:39:11]">&lt;rickmasters&gt;</a></span><span class="message">yeah, if you specify sector 1 for partition 1 you'll write to the MBR location</span></div><div class="line" id="013945"><span class="nick" style="color:#6b8072"><a href="#013945" label="[01:39:45]">&lt;rickmasters&gt;</a></span><span class="message">but, /dev/hda already writes to the first sector so i'm not sure you need partition support</span></div><div class="line" id="013958"><span class="nick" style="color:#8dd3c7"><a href="#013958" label="[01:39:58]">&lt;oriansj&gt;</a></span><span class="message">I don't need partition support</span></div><div class="line" id="014031"><span class="nick" style="color:#6b8072"><a href="#014031" label="[01:40:31]">&lt;rickmasters&gt;</a></span><span class="message">so i think what you need is already implemented</span></div><div class="line" id="014034"><span class="nick" style="color:#8dd3c7"><a href="#014034" label="[01:40:34]">&lt;oriansj&gt;</a></span><span class="message">only the ability to do a write straight to disk in 512 (or 4096byte) blocks</span></div><div class="line" id="014110"><span class="nick" style="color:#8dd3c7"><a href="#014110" label="[01:41:10]">&lt;oriansj&gt;</a></span><span class="message">as writing 20GB of data can quickly fill up memory</span></div><div class="line" id="014215"><span class="nick" style="color:#6b8072"><a href="#014215" label="[01:42:15]">&lt;rickmasters&gt;</a></span><span class="message">ok, not sure if we're connecting, since /dev/hda is kept in memory until the end you won't be able to create that big of a file</span></div><div class="line" id="014313"><span class="nick" style="color:#8dd3c7"><a href="#014313" label="[01:43:13]">&lt;oriansj&gt;</a></span><span class="message">I think we are slightly missing what the other is expressing</span></div><div class="line" id="014404"><span class="nick" style="color:#6b8072"><a href="#014404" label="[01:44:04]">&lt;rickmasters&gt;</a></span><span class="message">but, immediate writes to /dev/hda is doable, i already implement that for reads</span></div><div class="line" id="014425"><span class="nick" style="color:#6b8072"><a href="#014425" label="[01:44:25]">&lt;rickmasters&gt;</a></span><span class="message">i know how to do that</span></div><div class="line" id="014541"><span class="nick" style="color:#8dd3c7"><a href="#014541" label="[01:45:41]">&lt;oriansj&gt;</a></span><span class="message">ok and the writes done to create the binaries are only in memory so the write to disk wouldn't accidentially overwrite the binaries right?</span></div><div class="line" id="014618"><span class="nick" style="color:#6b8072"><a href="#014618" label="[01:46:18]">&lt;rickmasters&gt;</a></span><span class="message">correct</span></div><div class="line" id="014701"><span class="nick" style="color:#6b8072"><a href="#014701" label="[01:47:01]">&lt;rickmasters&gt;</a></span><span class="message">you could overwrite unprocessed source files though</span></div><div class="line" id="014722"><span class="nick" style="color:#8dd3c7"><a href="#014722" label="[01:47:22]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="014838"><span class="nick" style="color:#6b8072"><a href="#014838" label="[01:48:38]">&lt;rickmasters&gt;</a></span><span class="message">you could make sure the source is processed before writing or you could move the source past where you need to write</span></div><div class="line" id="014853"><span class="nick" style="color:#8dd3c7"><a href="#014853" label="[01:48:53]">&lt;oriansj&gt;</a></span><span class="message">but we could order the src blocks so that the source files we want to preserve onto our next filesystem would be at the end</span></div><div class="line" id="014938"><span class="nick" style="color:#6b8072"><a href="#014938" label="[01:49:38]">&lt;rickmasters&gt;</a></span><span class="message">that's easy, just change partition 4 in the partition table and dd to that location in build.sh</span></div><div class="line" id="015043"><span class="nick" style="color:#8dd3c7"><a href="#015043" label="[01:50:43]">&lt;oriansj&gt;</a></span><span class="message">ok, good so this plan could work.</span></div><div class="line" id="015210"><span class="nick" style="color:#6b8072"><a href="#015210" label="[01:52:10]">&lt;rickmasters&gt;</a></span><span class="message">i may need to implement close so I know went to write the last block or you could make sure to write in sector multiples</span></div><div class="line" id="015404"><span class="nick" style="color:#6b8072"><a href="#015404" label="[01:54:04]">&lt;rickmasters&gt;</a></span><span class="message">some of the stage-posix0 executable don't seem to call close, iirc, so not sure about that</span></div><div class="line" id="015423"><span class="nick" style="color:#6b8072"><a href="#015423" label="[01:54:23]">&lt;rickmasters&gt;</a></span><span class="message">i.e. catm /dev/hda helloworld</span></div><div class="line" id="015515"><span class="nick" style="color:#8dd3c7"><a href="#015515" label="[01:55:15]">&lt;oriansj&gt;</a></span><span class="message">yeah, I'll have to fix those</span></div><div class="line" id="015523"><span class="nick" style="color:#6b8072"><a href="#015523" label="[01:55:23]">&lt;rickmasters&gt;</a></span><span class="message">they presume exit will close everything, i think, but my kernel does nothing</span></div><div class="line" id="015609"><span class="nick" style="color:#8dd3c7"><a href="#015609" label="[01:56:09]">&lt;oriansj&gt;</a></span><span class="message">I'll make sure all programs call close before exit</span></div><div class="line" id="015758"><span class="nick" style="color:#8dd3c7"><a href="#015758" label="[01:57:58]">&lt;oriansj&gt;</a></span><span class="message">but M2libc does call __kill_io prior to exit; which probably could be modified to call close afer doing fflush as well</span></div><div class="line" id="020113"><span class="nick" style="color:#6b8072"><a href="#020113" label="[02:01:13]">&lt;rickmasters&gt;</a></span><span class="message">this would be more than an hour of work, what time frame are you hoping for?</span></div><div class="line" id="020149"><span class="nick" style="color:#8dd3c7"><a href="#020149" label="[02:01:49]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: no rush as I am still writing gfk-create but should be done by next week</span></div><div class="line" id="020242"><span class="nick" style="color:#6b8072"><a href="#020242" label="[02:02:42]">&lt;rickmasters&gt;</a></span><span class="message">oh sure, no problem</span></div><div class="line" id="020245"><span class="nick" style="color:#80b1d3"><a href="#020245" label="[02:02:45]">&lt;littlebobeep&gt;</a></span><span class="message">So can someone explain how building a kernel with M2-Planet works?  This is for stage0 bare-metal bootstrap right (not stage0-posix)?  So you get up to M2-Planet stage and build a kernel, how do you start using it, do you need to reboot?</span></div><div class="line" id="020308"><span class="nick" style="color:#6d2462"><a href="#020308" label="[02:03:08]">*</a></span><span class="message">littlebobeep is interested in avoiding a Linux binary dependency to bootstrap</span></div><div class="line" id="020352"><span class="nick" style="color:#8dd3c7"><a href="#020352" label="[02:03:52]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well rickmasters provided builder-hex0 which is a POSIX capable of running all of the stage0-posix steps</span></div><div class="line" id="020412"><span class="nick" style="color:#8dd3c7"><a href="#020412" label="[02:04:12]">&lt;oriansj&gt;</a></span><span class="message">and can be built by a hex0 program fitting in the MBR</span></div><div class="line" id="020511"><span class="nick" style="color:#8dd3c7"><a href="#020511" label="[02:05:11]">&lt;oriansj&gt;</a></span><span class="message">So we can use M2-Planet/M2-Mesoplanet to build a POSIX kernel written in C that should be powerful enough to run all the steps needed to build Linux</span></div><div class="line" id="020534"><span class="nick" style="color:#6b8072"><a href="#020534" label="[02:05:34]">&lt;rickmasters&gt;</a></span><span class="message">littlebobeep: builder-hex0-mini -&gt; builder-hex0 kernel transition is implemented with a reboot, but i've been thinking of redoing that to eliminate the reboot</span></div><div class="line" id="020556"><span class="nick" style="color:#80b1d3"><a href="#020556" label="[02:05:56]">&lt;littlebobeep&gt;</a></span><span class="message">Where can I see what builder-hex0 does?</span></div><div class="line" id="020611"><span class="nick" style="color:#8dd3c7"><a href="#020611" label="[02:06:11]">&lt;oriansj&gt;</a></span><span class="message">and yes reboots will happen when transistioning to the C kernel as well</span></div><div class="line" id="020615"><span class="nick" style="color:#80b1d3"><a href="#020615" label="[02:06:15]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: I do not know what you mean by saying it &quot;is a POSIX&quot;, it is a POSIX what?</span></div><div class="line" id="020624"><span class="nick" style="color:#8dd3c7"><a href="#020624" label="[02:06:24]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0">https://github.com/ironmeld/builder-hex0</a> </span></div><div class="line" id="020642"><span class="nick" style="color:#8dd3c7"><a href="#020642" label="[02:06:42]">&lt;oriansj&gt;</a></span><span class="message">short version the syscalls that stage0-posix needs</span></div><div class="line" id="020708"><span class="nick" style="color:#6b8072"><a href="#020708" label="[02:07:08]">&lt;rickmasters&gt;</a></span><span class="message">littlebobeep: yeah, the Makefile does it</span></div><div class="line" id="020804"><span class="nick" style="color:#8dd3c7"><a href="#020804" label="[02:08:04]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: POSIX is a kernel standard. In this case builder-hex0 supports the syscalls that stage0-posix needs and just enough extra functionality to get the ball rolling</span></div><div class="line" id="020822"><span class="nick" style="color:#6b8072"><a href="#020822" label="[02:08:22]">&lt;rickmasters&gt;</a></span><span class="message">if you pass no-reboot to qemu it exits on reboot, then the build script extracts the new kernel from the disk image and dd's the kernel into a new image</span></div><div class="line" id="020935"><span class="nick" style="color:#80b1d3"><a href="#020935" label="[02:09:35]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: so how did stage0 bare metal work WITHOUT builder-hex0?</span></div><div class="line" id="021015"><span class="nick" style="color:#6b8072"><a href="#021015" label="[02:10:15]">&lt;rickmasters&gt;</a></span><span class="message">well, anyway its a combination of the build*.sh scripts and the Makefile, you'll probably need to study it a bit for it to click</span></div><div class="line" id="021146"><span class="nick" style="color:#8dd3c7"><a href="#021146" label="[02:11:46]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: by reading and writing to external storage (punched paper tapes honestly)</span></div><div class="line" id="021206"><span class="nick" style="color:#8dd3c7"><a href="#021206" label="[02:12:06]">&lt;oriansj&gt;</a></span><span class="message">and a boatload of reboots</span></div><div class="line" id="021234"><span class="nick" style="color:#80b1d3"><a href="#021234" label="[02:12:34]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: wow so stage0 cannot use HDDs or SSDs or what, I never fully understood it compared to stage0-posix</span></div><div class="line" id="021325"><span class="nick" style="color:#8dd3c7"><a href="#021325" label="[02:13:25]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: it could in theory, I just haven't done so yet.</span></div><div class="line" id="021516"><span class="nick" style="color:#8dd3c7"><a href="#021516" label="[02:15:16]">&lt;oriansj&gt;</a></span><span class="message">the major point is that all of the steps could be implemented with or without a kernel and will all produce the exact same results</span></div><div class="line" id="021739"><span class="nick" style="color:#80b1d3"><a href="#021739" label="[02:17:39]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Ahhh you mean some random Linux binary compiled on a non-properly bootstrapped system with stage0-posix produces verifiably same results as all-source bootstrap from stage0?  You would need to do both to confirm this</span></div><div class="line" id="021945"><span class="nick" style="color:#8dd3c7"><a href="#021945" label="[02:19:45]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well yes there is still a great deal of work remaining to audit buil</span></div><div class="line" id="021952"><span class="nick" style="color:#8dd3c7"><a href="#021952" label="[02:19:52]">&lt;oriansj&gt;</a></span><span class="message">der-hex0</span></div><div class="line" id="022146"><span class="nick" style="color:#8dd3c7"><a href="#022146" label="[02:21:46]">&lt;oriansj&gt;</a></span><span class="message">but I am in good faith assuming it behaves as specified and if I am wroong we just fix it using what we hzave learned from it</span></div><div class="line" id="022206"><span class="nick" style="color:#8dd3c7"><a href="#022206" label="[02:22:06]">&lt;oriansj&gt;</a></span><span class="message">^hzave^have^</span></div><div class="line" id="022219"><span class="nick" style="color:#6b8072"><a href="#022219" label="[02:22:19]">&lt;rickmasters&gt;</a></span><span class="message">orianjs: i want to improve the comments and write more up about it. auditing it good</span></div><div class="line" id="022240"><span class="nick" style="color:#6b8072"><a href="#022240" label="[02:22:40]">&lt;rickmasters&gt;</a></span><span class="message">*oriansj</span></div><div class="line" id="022321"><span class="nick" style="color:#8dd3c7"><a href="#022321" label="[02:23:21]">&lt;oriansj&gt;</a></span><span class="message">I encourage good comments</span></div><div class="line" id="022332"><span class="nick" style="color:#80b1d3"><a href="#022332" label="[02:23:32]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: So did you actually use paper tapes with stage0?</span></div><div class="line" id="022404"><span class="nick" style="color:#234e69"><a href="#022404" label="[02:24:04]">&lt;muurkha&gt;</a></span><span class="message">inb4 &quot;no&quot;</span></div><div class="line" id="022446"><span class="nick" style="color:#2e2a4a"><a href="#022446" label="[02:24:46]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: for audit it would be good to have higher level prototypes where possible</span></div><div class="line" id="022520"><span class="nick" style="color:#2e2a4a"><a href="#022520" label="[02:25:20]">&lt;stikonas&gt;</a></span><span class="message">but that can be done later</span></div><div class="line" id="022523"><span class="nick" style="color:#2e2a4a"><a href="#022523" label="[02:25:23]">&lt;stikonas&gt;</a></span><span class="message">if you don't have them</span></div><div class="line" id="022612"><span class="nick" style="color:#2e2a4a"><a href="#022612" label="[02:26:12]">&lt;stikonas&gt;</a></span><span class="message">you probably saw in stage0-posix we have C, Gas, M1, hex2 prototypes. Although, maybe not everything is applicable here (i.e. C)</span></div><div class="line" id="022617"><span class="nick" style="color:#6b8072"><a href="#022617" label="[02:26:17]">&lt;rickmasters&gt;</a></span><span class="message">it's native hex0. one thing that's good is that its hard to hide much in 3K and also pull off a posix kernel</span></div><div class="line" id="022619"><span class="nick" style="color:#6b8072"><a href="#022619" label="[02:26:19]">&lt;rickmasters&gt;</a></span><span class="message">:)</span></div><div class="line" id="022753"><span class="nick" style="color:#80b1d3"><a href="#022753" label="[02:27:53]">&lt;littlebobeep&gt;</a></span><span class="message">So will rickmasters' code become part of stage0?</span></div><div class="line" id="022806"><span class="nick" style="color:#2e2a4a"><a href="#022806" label="[02:28:06]">&lt;stikonas&gt;</a></span><span class="message">it's a separate repository</span></div><div class="line" id="022838"><span class="nick" style="color:#2e2a4a"><a href="#022838" label="[02:28:38]">&lt;stikonas&gt;</a></span><span class="message">I guess it could be used instead of stage0</span></div><div class="line" id="022846"><span class="nick" style="color:#2e2a4a"><a href="#022846" label="[02:28:46]">&lt;stikonas&gt;</a></span><span class="message">stage0 was doing those tapes...</span></div><div class="line" id="022906"><span class="nick" style="color:#2e2a4a"><a href="#022906" label="[02:29:06]">&lt;stikonas&gt;</a></span><span class="message">which you can't easily do with x86 hardware</span></div><div class="line" id="022920"><span class="nick" style="color:#6b8072"><a href="#022920" label="[02:29:20]">&lt;rickmasters&gt;</a></span><span class="message">anyone can copy or fork it wherever they'd like, happy to help</span></div><div class="line" id="023006"><span class="nick" style="color:#80b1d3"><a href="#023006" label="[02:30:06]">&lt;littlebobeep&gt;</a></span><span class="message">I don't know how to use tapes or punch cards haha but oriansj is talking about them like they used them....?</span></div><div class="line" id="023055"><span class="nick" style="color:#2e2a4a"><a href="#023055" label="[02:30:55]">&lt;stikonas&gt;</a></span><span class="message">well, you punch holes (bits in tape), feed it into machine</span></div><div class="line" id="023104"><span class="nick" style="color:#2e2a4a"><a href="#023104" label="[02:31:04]">&lt;stikonas&gt;</a></span><span class="message">that's stdin</span></div><div class="line" id="023108"><span class="nick" style="color:#2e2a4a"><a href="#023108" label="[02:31:08]">&lt;stikonas&gt;</a></span><span class="message">and machine punches holes in stdout tape</span></div><div class="line" id="023155"><span class="nick" style="color:#234e69"><a href="#023155" label="[02:31:55]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: the great advantage of punched tape or punch cards is that you can see your digital data</span></div><div class="line" id="023218"><span class="nick" style="color:#6b8072"><a href="#023218" label="[02:32:18]">&lt;rickmasters&gt;</a></span><span class="message">funny, i actually took a class in early 80s and punched cards w/FORTRAN code, although i don't even remember what we did with them</span></div><div class="line" id="023220"><span class="nick" style="color:#234e69"><a href="#023220" label="[02:32:20]">&lt;muurkha&gt;</a></span><span class="message">it isn't mediated by a computer which could conceivably be lying to you</span></div><div class="line" id="023321"><span class="nick" style="color:#234e69"><a href="#023321" label="[02:33:21]">&lt;muurkha&gt;</a></span><span class="message">there is a ppt command in bsdgames (the Debian/Ubuntu name of the package) which will draw you ASCII art of a punched paper tape.  echo 'hello littlebobeep' | ppt</span></div><div class="line" id="023337"><span class="nick" style="color:#234e69"><a href="#023337" label="[02:33:37]">&lt;muurkha&gt;</a></span><span class="message">(the output is too voluminous to paste here</span></div><div class="line" id="023338"><span class="nick" style="color:#234e69"><a href="#023338" label="[02:33:38]">&lt;muurkha&gt;</a></span><span class="message">)</span></div><div class="line" id="023509"><span class="nick" style="color:#234e69"><a href="#023509" label="[02:35:09]">&lt;muurkha&gt;</a></span><span class="message">the package also contains a morse command to produce morse code and a bcd command to produce punched cards</span></div><div class="line" id="023647"><span class="nick" style="color:#234e69"><a href="#023647" label="[02:36:47]">&lt;muurkha&gt;</a></span><span class="message">punched cards are kind of a shitty medium</span></div><div class="line" id="025009"><span class="nick" style="color:#6b8072"><a href="#025009" label="[02:50:09]">&lt;rickmasters&gt;</a></span><span class="message">goodnight everyone</span></div><div class="line" id="025014"><span class="nick" style="color:#234e69"><a href="#025014" label="[02:50:14]">&lt;muurkha&gt;</a></span><span class="message">night!</span></div><div class="line" id="180722"><span class="nick" style="color:#6c3d55"><a href="#180722" label="[18:07:22]">&lt;dongcarl&gt;</a></span><span class="message">oriansj: Oh? What's the stance on bribes? Crypto people love to talk game theoretical attacks, out of band ones even more so haha</span></div><div class="line" id="203401"><span class="nick" style="color:#6b8072"><a href="#203401" label="[20:34:01]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I've identified some reasons why mes-m2 does not work on builder-hex0.</span></div><div class="line" id="203410"><span class="nick" style="color:#6b8072"><a href="#203410" label="[20:34:10]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 1. As we already determined, the disk image would need to be increased to support the source.</span></div><div class="line" id="203422"><span class="nick" style="color:#6b8072"><a href="#203422" label="[20:34:22]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 2. It appears that giving qemu more memory is required, but I am not sure what is sufficient.</span></div><div class="line" id="203430"><span class="nick" style="color:#6b8072"><a href="#203430" label="[20:34:30]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 3. The hex2 --base-address for mes-m2 is different than stage0-posix. Easily changed.</span></div><div class="line" id="203437"><span class="nick" style="color:#6b8072"><a href="#203437" label="[20:34:37]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 4. I had mistakenly left the kernel file memory in a location that conflicts with the mes-m2 process. Fixed.</span></div><div class="line" id="203447"><span class="nick" style="color:#6b8072"><a href="#203447" label="[20:34:47]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 5. There are file links in the mes tar file. The untar command from stage0-posix ignores them.</span></div><div class="line" id="203508"><span class="nick" style="color:#6b8072"><a href="#203508" label="[20:35:08]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 6. mes-m2 uses access() to look for modules. builder-hex0 returns success, but the file is not there.</span></div><div class="line" id="203519"><span class="nick" style="color:#6b8072"><a href="#203519" label="[20:35:19]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Making access work properly could be done, but it would take significant work and I think its more</span></div><div class="line" id="203527"><span class="nick" style="color:#6b8072"><a href="#203527" label="[20:35:27]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: appropriate to direct efforts toward a new kernel written in a better language.</span></div><div class="line" id="203533"><span class="nick" style="color:#6b8072"><a href="#203533" label="[20:35:33]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: 7. Evaluating any (display &quot;string&quot;) command (for debugging) crashes mes-m2. Unresolved.</span></div><div class="line" id="203541"><span class="nick" style="color:#6b8072"><a href="#203541" label="[20:35:41]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: There are probably many more issues yet to be discovered that would block running mescc.</span></div><div class="line" id="203549"><span class="nick" style="color:#6b8072"><a href="#203549" label="[20:35:49]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Finally, I also noticed that there is an issue with environmental vars - only 32 are passed to mes-m2.</span></div><div class="line" id="203600"><span class="nick" style="color:#6b8072"><a href="#203600" label="[20:36:00]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: This may be a kaem limit/bug - I am not sure. But my linux system has so many variables, mes-m2 does not</span></div><div class="line" id="203609"><span class="nick" style="color:#6b8072"><a href="#203609" label="[20:36:09]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: get any of the ones you put in the after.kaem file. Turns out, they are apparently not needed</span></div><div class="line" id="203621"><span class="nick" style="color:#6b8072"><a href="#203621" label="[20:36:21]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: but this is an issue that should porbably be tracked down further.</span></div><div class="line" id="203631"><span class="nick" style="color:#6b8072"><a href="#203631" label="[20:36:31]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Figuring all this out was a long slog and I'm going to have to move on to other priorities. :)</span></div><div class="line" id="204228"><span class="nick" style="color:#d9d9d9"><a href="#204228" label="[20:42:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, looks like too many problems</span></div><div class="line" id="204243"><span class="nick" style="color:#d9d9d9"><a href="#204243" label="[20:42:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Some are easy but others are indeed not trivial to fix</span></div><div class="line" id="204748"><span class="nick" style="color:#6b8072"><a href="#204748" label="[20:47:48]">&lt;rickmasters&gt;</a></span><span class="message">its not trivial in hex0. even hex-2 would be a lot easier</span></div><div class="line" id="205103"><span class="nick" style="color:#d9d9d9"><a href="#205103" label="[20:51:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, I fully agree</span></div><div class="line" id="205126"><span class="nick" style="color:#d9d9d9"><a href="#205126" label="[20:51:26]">&lt;stikonas[m]&gt;</a></span><span class="message">Jump calculations are painful</span></div><div class="line" id="205128"><span class="nick" style="color:#6b8072"><a href="#205128" label="[20:51:28]">&lt;rickmasters&gt;</a></span><span class="message">there are a lot of viable paths. i think oriansj is planning on writing a kernel... ?</span></div><div class="line" id="205156"><span class="nick" style="color:#d9d9d9"><a href="#205156" label="[20:51:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, kernel in M2 dialect makes a lot if sense</span></div><div class="line" id="205240"><span class="nick" style="color:#6b8072"><a href="#205240" label="[20:52:40]">&lt;rickmasters&gt;</a></span><span class="message">i'm happy to just improve builder-hex0 comments and documentation, or port to hex2? that's fairly easy, but anything further might overlap with someone else</span></div><div class="line" id="205851"><span class="nick" style="color:#2e2a4a"><a href="#205851" label="[20:58:51]">&lt;stikonas&gt;</a></span><span class="message">well, just having better comments and documentation would be fine. But I'll let oriansj comment on this as he is more involved in this work</span></div><div class="line" id="210130"><span class="nick" style="color:#6b8072"><a href="#210130" label="[21:01:30]">&lt;rickmasters&gt;</a></span><span class="message">by the way, i don't know the history of the scheme detour, but has anyone explored going from M2 to more capable C dialects then tcc, etc?</span></div><div class="line" id="210327"><span class="nick" style="color:#bc80bd"><a href="#210327" label="[21:03:27]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: i don't understand why we detour to scheme either, but i don't think there is any other more capable C that m2-planet can build</span></div><div class="line" id="210342"><span class="nick" style="color:#bc80bd"><a href="#210342" label="[21:03:42]">&lt;unmatched-paren&gt;</a></span><span class="message">***YET*** :)</span></div><div class="line" id="210410"><span class="nick" style="color:#bc80bd"><a href="#210410" label="[21:04:10]">&lt;unmatched-paren&gt;</a></span><span class="message">someone was looking into cproc (achaninja, i believe)</span></div><div class="line" id="210428"><span class="nick" style="color:#bc80bd"><a href="#210428" label="[21:04:28]">&lt;unmatched-paren&gt;</a></span><span class="message">but they built it from tcc</span></div><div class="line" id="210450"><span class="nick" style="color:#bc80bd"><a href="#210450" label="[21:04:50]">&lt;unmatched-paren&gt;</a></span><span class="message">if we extended m2 enough we could probably go straight to either tcc or cproc (cproc would probably be better)</span></div><div class="line" id="210517"><span class="nick" style="color:#bc80bd"><a href="#210517" label="[21:05:17]">&lt;unmatched-paren&gt;</a></span><span class="message">since it supports riscv64</span></div><div class="line" id="211239"><span class="nick" style="color:#2e2a4a"><a href="#211239" label="[21:12:39]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: mes and mescc predates M2-Planet</span></div><div class="line" id="211259"><span class="nick" style="color:#2e2a4a"><a href="#211259" label="[21:12:59]">&lt;stikonas&gt;</a></span><span class="message">and tcc is even harder to build than mes</span></div><div class="line" id="211307"><span class="nick" style="color:#2e2a4a"><a href="#211307" label="[21:13:07]">&lt;stikonas&gt;</a></span><span class="message">and it took some time to build mes with M2-Planet</span></div><div class="line" id="211401"><span class="nick" style="color:#2e2a4a"><a href="#211401" label="[21:14:01]">&lt;stikonas&gt;</a></span><span class="message">and M2-Planet is somewhat simplistic compiler which originated from high level prototype of cc_x86 (that was written in assembly)</span></div><div class="line" id="211445"><span class="nick" style="color:#2e2a4a"><a href="#211445" label="[21:14:45]">&lt;stikonas&gt;</a></span><span class="message">so some more advanced C features might be harder to add to M2-Planet</span></div><div class="line" id="211733"><span class="nick" style="color:#2e2a4a"><a href="#211733" label="[21:17:33]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: as for riscv64, it's possible to add it to mes</span></div><div class="line" id="211748"><span class="nick" style="color:#2e2a4a"><a href="#211748" label="[21:17:48]">&lt;stikonas&gt;</a></span><span class="message">at least mes-m2 is easy to build for riscv64,</span></div><div class="line" id="211824"><span class="nick" style="color:#2e2a4a"><a href="#211824" label="[21:18:24]">&lt;stikonas&gt;</a></span><span class="message">it's mescc that is a bit harder to port</span></div><div class="line" id="211955"><span class="nick" style="color:#6b8072"><a href="#211955" label="[21:19:55]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: well, m2 -&gt; mes.c + mescc works, so there's that.</span></div><div class="line" id="212213"><span class="nick" style="color:#6b8072"><a href="#212213" label="[21:22:13]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: but just perusing mes-m2 code ... its difficult to approach, the C is terse and it requires deep scheme understanding</span></div><div class="line" id="212239"><span class="nick" style="color:#2e2a4a"><a href="#212239" label="[21:22:39]">&lt;stikonas&gt;</a></span><span class="message">yes, that's why I'm not so familiar with mes, I am not good at scheme</span></div><div class="line" id="212257"><span class="nick" style="color:#2e2a4a"><a href="#212257" label="[21:22:57]">&lt;stikonas&gt;</a></span><span class="message">I can tweak some stuff in mes libc (which is in C) but not really in mescc</span></div><div class="line" id="212324"><span class="nick" style="color:#6b8072"><a href="#212324" label="[21:23:24]">&lt;rickmasters&gt;</a></span><span class="message">the intersection there is limits the audience to only the most dedicated and patient developers (in the world)</span></div><div class="line" id="212345"><span class="nick" style="color:#6b8072"><a href="#212345" label="[21:23:45]">&lt;rickmasters&gt;</a></span><span class="message">not 70%, its like .1% tops</span></div><div class="line" id="212455"><span class="nick" style="color:#6b8072"><a href="#212455" label="[21:24:55]">&lt;rickmasters&gt;</a></span><span class="message">not saying the C path is a walk in the park either, the tcc code is also difficult</span></div><div class="line" id="212745"><span class="nick" style="color:#6b8072"><a href="#212745" label="[21:27:45]">&lt;rickmasters&gt;</a></span><span class="message">these are just my first impressions and I haven't explored all the options, sorry if this sounds critical</span></div><div class="line" id="213110"><span class="nick" style="color:#6b8072"><a href="#213110" label="[21:31:10]">&lt;rickmasters&gt;</a></span><span class="message">i can see the other side of the argument - a scheme interpreter can be small and scheme builds itself up to real power from a small core</span></div><div class="line" id="213419"><span class="nick" style="color:#2e2a4a"><a href="#213419" label="[21:34:19]">&lt;stikonas&gt;</a></span><span class="message">well, 70% probaly refered to stage0-posix only...</span></div><div class="line" id="213446"><span class="nick" style="color:#2e2a4a"><a href="#213446" label="[21:34:46]">&lt;stikonas&gt;</a></span><span class="message">anyway, scheme is there historically</span></div><div class="line" id="213456"><span class="nick" style="color:#2e2a4a"><a href="#213456" label="[21:34:56]">&lt;stikonas&gt;</a></span><span class="message">maybe at som point there will be parallel bootstrap paths</span></div><div class="line" id="213503"><span class="nick" style="color:#2e2a4a"><a href="#213503" label="[21:35:03]">&lt;stikonas&gt;</a></span><span class="message">but right now that's the only thing we have</span></div><div class="line" id="213511"><span class="nick" style="color:#2e2a4a"><a href="#213511" label="[21:35:11]">&lt;stikonas&gt;</a></span><span class="message">and it's better than nothing</span></div><div class="line" id="213515"><span class="nick" style="color:#2e2a4a"><a href="#213515" label="[21:35:15]">&lt;stikonas&gt;</a></span><span class="message">2 years ago we had no path at all</span></div><div class="line" id="213520"><span class="nick" style="color:#2e2a4a"><a href="#213520" label="[21:35:20]">&lt;stikonas&gt;</a></span><span class="message">and 2 weeks ago we had no kernel</span></div><div class="line" id="213941"><span class="nick" style="color:#6b8072"><a href="#213941" label="[21:39:41]">&lt;rickmasters&gt;</a></span><span class="message">yes, a working solution is infinitely better than no solution</span></div><div class="line" id="214220"><span class="nick" style="color:#6b8072"><a href="#214220" label="[21:42:20]">&lt;rickmasters&gt;</a></span><span class="message">i'm sure these kind of &quot;why don't you just ...&quot; questions have been asked many times, sorry, i was just trying to draw out some opinions. thank you for being patient with me</span></div><div class="line" id="215726"><span class="nick" style="color:#3c5b35"><a href="#215726" label="[21:57:26]">&lt;Hagfish&gt;</a></span><span class="message">they're great questions, and potentially educational for others of us who weren't aware of the answers</span></div><div class="line" id="220112"><span class="nick" style="color:#2e2a4a"><a href="#220112" label="[22:01:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, nobody is offended here, questions are encouraged</span></div><div class="line" id="220127"><span class="nick" style="color:#2e2a4a"><a href="#220127" label="[22:01:27]">&lt;stikonas&gt;</a></span><span class="message">I did ask quite a few questions a couple of years ago too</span></div><br /></div></body></html>