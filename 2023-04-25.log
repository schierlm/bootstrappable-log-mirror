<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004145"><span class="nick" style="color:#389600"><a href="#004145" label="[00:41:45]">&lt;oriansj&gt;</a></span><span class="message">river: the real question perhaps is how much effort would be required to make LLM code generation reproducible.</span></div><div class="line" id="004219"><span class="nick" style="color:#389600"><a href="#004219" label="[00:42:19]">&lt;oriansj&gt;</a></span><span class="message">The we could just treat LLM code generation as just an abstracted compiler</span></div><div class="line" id="004413"><span class="nick" style="color:#389600"><a href="#004413" label="[00:44:13]">&lt;oriansj&gt;</a></span><span class="message">^The^Then^</span></div><div class="line" id="004459"><span class="nick" style="color:#389600"><a href="#004459" label="[00:44:59]">&lt;oriansj&gt;</a></span><span class="message">and the source code just becomes the human written  description which provided the basis of the generated code.</span></div><div class="line" id="014852"><span class="nick" style="color:#389600"><a href="#014852" label="[01:48:52]">&lt;oriansj&gt;</a></span><span class="message">doras: finally saw your talk, good job. If you want, you can add your slides and notes to : <a rel="nofollow" href="https://github.com/oriansj/talk-notes">https://github.com/oriansj/talk-notes</a>   (as well as any additional bits you think other people doing presentations might find useful.</span></div><div class="line" id="031225"><span class="nick" style="color:#8dd3c7"><a href="#031225" label="[03:12:25]">&lt;pabs3&gt;</a></span><span class="message">oriansj: you could make it repeatable, but I think you probably wouldn't get deterministic builds across GPU vendors</span></div><div class="line" id="031230"><span class="nick" style="color:#8dd3c7"><a href="#031230" label="[03:12:30]">&lt;pabs3&gt;</a></span><span class="message">river: where is the blog post?</span></div><div class="line" id="053741"><span class="nick" style="color:#2e2a4a"><a href="#053741" label="[05:37:41]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1285">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1285</a> </span></div><div class="line" id="053749"><span class="nick" style="color:#2e2a4a"><a href="#053749" label="[05:37:49]">&lt;roconnor&gt;</a></span><span class="message">how unsafe is this considered?</span></div><div class="line" id="054009"><span class="nick" style="color:#2e2a4a"><a href="#054009" label="[05:40:09]">&lt;roconnor&gt;</a></span><span class="message">M2libc does have a strncpy</span></div><div class="line" id="054032"><span class="nick" style="color:#8dd3c7"><a href="#054032" label="[05:40:32]">&lt;pabs3&gt;</a></span><span class="message">definitely better not to use strcpy</span></div><div class="line" id="060004"><span class="nick" style="color:#6b8072"><a href="#060004" label="[06:00:04]">&lt;muurkha&gt;</a></span><span class="message">not if the alternative is strncpy</span></div><div class="line" id="060143"><span class="nick" style="color:#6b8072"><a href="#060143" label="[06:01:43]">&lt;muurkha&gt;</a></span><span class="message">in this case we're talking about an environment variable, which really is nul-terminated</span></div><div class="line" id="060155"><span class="nick" style="color:#6b8072"><a href="#060155" label="[06:01:55]">&lt;muurkha&gt;</a></span><span class="message">strncpy doesn't always nul-terminate its strings</span></div><div class="line" id="060304"><span class="nick" style="color:#6b8072"><a href="#060304" label="[06:03:04]">&lt;muurkha&gt;</a></span><span class="message">it's for filling in fixed-size fields in structs</span></div><div class="line" id="085658"><span class="nick" style="color:#80b1d3"><a href="#085658" label="[08:56:58]">&lt;river&gt;</a></span><span class="message">pabs3: <a rel="nofollow" href="https://gist.github.com/rain-1/9c948a5931d9b0a15a985d5b11921e9e">https://gist.github.com/rain-1/9c948a5931d9b0a15a985d5b11921e9e</a> </span></div><div class="line" id="085718"><span class="nick" style="color:#80b1d3"><a href="#085718" label="[08:57:18]">&lt;river&gt;</a></span><span class="message">oriansj: that's a really good point. I never thought about this, I almost think that these systems cannot do things in a reproducible way</span></div><div class="line" id="085746"><span class="nick" style="color:#80b1d3"><a href="#085746" label="[08:57:46]">&lt;river&gt;</a></span><span class="message">maybe only possible if you really pin down every detail of your spec</span></div><div class="line" id="094515"><span class="nick" style="color:#6d2462"><a href="#094515" label="[09:45:15]">&lt;doras&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;Dor Askayo: finally saw your...&quot; &lt;- Thanks! I can share my slides, sure. Though I'm traveling so I can't create a PR. I can try to share the slides through Matrix to see what happens.</span></div><div class="line" id="094621"><span class="nick" style="color:#6d2462"><a href="#094621" label="[09:46:21]">&lt;doras&gt;</a></span><span class="message">ACTION posted a file: (286KiB) &lt; <a rel="nofollow" href="https://libera.ems.host/_matrix/media/v3/download/matrix.org/hSDcnaJaUeVonQdaBvOKyFvq/Bootstrappable%20Freedesktop%20SDK%20-%20LAS%202023.pdf">https://libera.ems.host/_matrix/media/v3/download/matrix.org/hSDcnaJaUeVonQdaBvOKyFvq/Bootstrappable%20Freedesktop%20SDK%20-%20LAS%202023.pdf</a>  &gt;</span></div><div class="line" id="094634"><span class="nick" style="color:#6d2462"><a href="#094634" label="[09:46:34]">&lt;doras&gt;</a></span><span class="message">Sent. I never tried this before, so please let me know if it worked.</span></div><div class="line" id="101230"><span class="nick" style="color:#80b1d3"><a href="#101230" label="[10:12:30]">&lt;river&gt;</a></span><span class="message">mmaybe you can add strlcpy <a rel="nofollow" href="https://www.openbsd.org/papers/strlcpy-paper.pdf">https://www.openbsd.org/papers/strlcpy-paper.pdf</a> </span></div><div class="line" id="101815"><span class="nick" style="color:#234e69"><a href="#101815" label="[10:18:15]">&lt;fossy&gt;</a></span><span class="message">we still want mescc-tools to be compilable by a standard toolchain..</span></div><div class="line" id="101841"><span class="nick" style="color:#234e69"><a href="#101841" label="[10:18:41]">&lt;fossy&gt;</a></span><span class="message">(fwiw, the use of strcpy there is because m2libc did not exist when this was written)</span></div><div class="line" id="104018"><span class="nick" style="color:#6c3d55"><a href="#104018" label="[10:40:18]">&lt;Mikaku&gt;</a></span><span class="message">doras: I see your link here and it works, so I guess oriansj will be able to push it</span></div><div class="line" id="104054"><span class="nick" style="color:#6b8072"><a href="#104054" label="[10:40:54]">&lt;muurkha&gt;</a></span><span class="message">strlcpy is reasonable</span></div><div class="line" id="104117"><span class="nick" style="color:#6b8072"><a href="#104117" label="[10:41:17]">&lt;muurkha&gt;</a></span><span class="message">dynamically allocated strings would probably be better</span></div><div class="line" id="104140"><span class="nick" style="color:#6b8072"><a href="#104140" label="[10:41:40]">&lt;muurkha&gt;</a></span><span class="message">like golang byte slices or qmail strallocs</span></div><div class="line" id="104407"><span class="nick" style="color:#6b8072"><a href="#104407" label="[10:44:07]">&lt;muurkha&gt;</a></span><span class="message">but that's carpet-bombing the codebase, while strlcpy is a surgical strike</span></div><div class="line" id="105333"><span class="nick" style="color:#80b1d3"><a href="#105333" label="[10:53:33]">&lt;river&gt;</a></span><span class="message">hehe</span></div><div class="line" id="105643"><span class="nick" style="color:#d9d9d9"><a href="#105643" label="[10:56:43]">&lt;minima&gt;</a></span><span class="message">hi, fwiw, there's a micro typo at this page <a rel="nofollow" href="https://www.gnu.org/software/mes/">https://www.gnu.org/software/mes/</a>  in case anyone has write access; the LISP-1.5 link at the 5th paragraph is broken, it's spelled http::// instead of https://</span></div><div class="line" id="110145"><span class="nick" style="color:#bc80bd"><a href="#110145" label="[11:01:45]">&lt;janneke&gt;</a></span><span class="message">minima: the fixes should make it to gnu.org within an hour</span></div><div class="line" id="110151"><span class="nick" style="color:#bc80bd"><a href="#110151" label="[11:01:51]">&lt;janneke&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="110201"><span class="nick" style="color:#d9d9d9"><a href="#110201" label="[11:02:01]">&lt;minima&gt;</a></span><span class="message">yay :) thanks</span></div><div class="line" id="111447"><span class="nick" style="color:#6d2462"><a href="#111447" label="[11:14:47]">&lt;doras&gt;</a></span><span class="message">Mikaku: thanks for verifying</span></div><div class="line" id="152216"><span class="nick" style="color:#2e2a4a"><a href="#152216" label="[15:22:16]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/40/files">https://github.com/oriansj/mescc-tools/pull/40/files</a> </span></div><div class="line" id="152246"><span class="nick" style="color:#2e2a4a"><a href="#152246" label="[15:22:46]">&lt;roconnor&gt;</a></span><span class="message">my proposal is to use strncpy with a requirement that the last byte of the array is null.</span></div><div class="line" id="152706"><span class="nick" style="color:#2e2a4a"><a href="#152706" label="[15:27:06]">&lt;roconnor&gt;</a></span><span class="message">Heh, there is a distrubing lack of calls to free.  I guess that is understandable, but I at the envp_line allocation should be moved out of the main loop.</span></div><div class="line" id="162000"><span class="nick" style="color:#3c5b35"><a href="#162000" label="[16:20:00]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: free is not strictly necessary, until recently free was noop in M2libc anyway</span></div><div class="line" id="162017"><span class="nick" style="color:#3c5b35"><a href="#162017" label="[16:20:17]">&lt;stikonas[m]&gt;</a></span><span class="message">It now has some simple linked list based implementation</span></div><div class="line" id="162028"><span class="nick" style="color:#2e2a4a"><a href="#162028" label="[16:20:28]">&lt;roconnor&gt;</a></span><span class="message">oh. fancy.</span></div><div class="line" id="162035"><span class="nick" style="color:#3c5b35"><a href="#162035" label="[16:20:35]">&lt;stikonas[m]&gt;</a></span><span class="message">As we had to implement it for UEFI</span></div><div class="line" id="162052"><span class="nick" style="color:#3c5b35"><a href="#162052" label="[16:20:52]">&lt;stikonas[m]&gt;</a></span><span class="message">UEFI doesn't free memory on exit unlike linux</span></div><div class="line" id="162109"><span class="nick" style="color:#2e2a4a"><a href="#162109" label="[16:21:09]">&lt;roconnor&gt;</a></span><span class="message">oh interesting.</span></div><div class="line" id="162125"><span class="nick" style="color:#3c5b35"><a href="#162125" label="[16:21:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Well uefi is lower level</span></div><div class="line" id="162135"><span class="nick" style="color:#2e2a4a"><a href="#162135" label="[16:21:35]">&lt;roconnor&gt;</a></span><span class="message">how many programs actually free their memory?</span></div><div class="line" id="162139"><span class="nick" style="color:#3c5b35"><a href="#162139" label="[16:21:39]">&lt;stikonas[m]&gt;</a></span><span class="message">So you have to close all file descriptors there</span></div><div class="line" id="162146"><span class="nick" style="color:#80b1d3"><a href="#162146" label="[16:21:46]">&lt;river&gt;</a></span><span class="message">the OS free's memory once the process dies :P</span></div><div class="line" id="162200"><span class="nick" style="color:#2e2a4a"><a href="#162200" label="[16:22:00]">&lt;roconnor&gt;</a></span><span class="message">obviously kaem does not.</span></div><div class="line" id="162204"><span class="nick" style="color:#2e2a4a"><a href="#162204" label="[16:22:04]">&lt;roconnor&gt;</a></span><span class="message">currently.</span></div><div class="line" id="162221"><span class="nick" style="color:#3c5b35"><a href="#162221" label="[16:22:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Once kaem exits, all memory is freed</span></div><div class="line" id="162244"><span class="nick" style="color:#2e2a4a"><a href="#162244" label="[16:22:44]">&lt;roconnor&gt;</a></span><span class="message">because the runtime frees it?</span></div><div class="line" id="162326"><span class="nick" style="color:#3c5b35"><a href="#162326" label="[16:23:26]">&lt;stikonas[m]&gt;</a></span><span class="message">OS frees it</span></div><div class="line" id="162349"><span class="nick" style="color:#3c5b35"><a href="#162349" label="[16:23:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Our runtime (M2libc) frees it in uefi</span></div><div class="line" id="162405"><span class="nick" style="color:#3c5b35"><a href="#162405" label="[16:24:05]">&lt;stikonas[m]&gt;</a></span><span class="message">But on Linux it really is the kernel</span></div><div class="line" id="162433"><span class="nick" style="color:#2e2a4a"><a href="#162433" label="[16:24:33]">&lt;roconnor&gt;</a></span><span class="message">How does M2libc know if it is in uefi or not?</span></div><div class="line" id="162536"><span class="nick" style="color:#3c5b35"><a href="#162536" label="[16:25:36]">&lt;stikonas[m]&gt;</a></span><span class="message">ifdef</span></div><div class="line" id="162556"><span class="nick" style="color:#3c5b35"><a href="#162556" label="[16:25:56]">&lt;stikonas[m]&gt;</a></span><span class="message">You need to build it with different files</span></div><div class="line" id="162620"><span class="nick" style="color:#3c5b35"><a href="#162620" label="[16:26:20]">&lt;stikonas[m]&gt;</a></span><span class="message">And uefi.c defines some stuff, probably __uefi__</span></div><div class="line" id="162635"><span class="nick" style="color:#3c5b35"><a href="#162635" label="[16:26:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Those are different karm scripts</span></div><div class="line" id="162656"><span class="nick" style="color:#3c5b35"><a href="#162656" label="[16:26:56]">&lt;stikonas[m]&gt;</a></span><span class="message">So we just feed different build command</span></div><div class="line" id="162659"><span class="nick" style="color:#3c5b35"><a href="#162659" label="[16:26:59]">&lt;stikonas[m]&gt;</a></span><span class="message">In fact different repos</span></div><div class="line" id="162714"><span class="nick" style="color:#3c5b35"><a href="#162714" label="[16:27:14]">&lt;stikonas[m]&gt;</a></span><span class="message">One is stage0-posix, the other is stage0-uefi</span></div><div class="line" id="162732"><span class="nick" style="color:#2e2a4a"><a href="#162732" label="[16:27:32]">&lt;roconnor&gt;</a></span><span class="message">oh I see.  main M2libc has a uefi directory.</span></div><div class="line" id="162747"><span class="nick" style="color:#3c5b35"><a href="#162747" label="[16:27:47]">&lt;stikonas[m]&gt;</a></span><span class="message">And Linux too</span></div><div class="line" id="162755"><span class="nick" style="color:#2e2a4a"><a href="#162755" label="[16:27:55]">&lt;roconnor&gt;</a></span><span class="message">I didn't see it before because I was on an early revision.</span></div><div class="line" id="162758"><span class="nick" style="color:#3c5b35"><a href="#162758" label="[16:27:58]">&lt;stikonas[m]&gt;</a></span><span class="message">You build either one or the other</span></div><div class="line" id="162811"><span class="nick" style="color:#3c5b35"><a href="#162811" label="[16:28:11]">&lt;stikonas[m]&gt;</a></span><span class="message">And order is also important</span></div><div class="line" id="162841"><span class="nick" style="color:#3c5b35"><a href="#162841" label="[16:28:41]">&lt;stikonas[m]&gt;</a></span><span class="message">M2libc C files can't be in arbitrary order</span></div><div class="line" id="162926"><span class="nick" style="color:#3c5b35"><a href="#162926" label="[16:29:26]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86/blob/master/mescc-tools-full-kaem.kaem">https://github.com/oriansj/stage0-posix-x86/blob/master/mescc-tools-full-kaem.kaem</a> </span></div><div class="line" id="163106"><span class="nick" style="color:#3c5b35"><a href="#163106" label="[16:31:06]">&lt;stikonas[m]&gt;</a></span><span class="message">M2-Planet has no #include support</span></div><div class="line" id="163122"><span class="nick" style="color:#3c5b35"><a href="#163122" label="[16:31:22]">&lt;stikonas[m]&gt;</a></span><span class="message">So it's a bit trickier to use than normal compiler</span></div><div class="line" id="163234"><span class="nick" style="color:#2e2a4a"><a href="#163234" label="[16:32:34]">&lt;roconnor&gt;</a></span><span class="message">Since I have you here, maybe I can you what M2-Mesoplanet is?</span></div><div class="line" id="163654"><span class="nick" style="color:#3c5b35"><a href="#163654" label="[16:36:54]">&lt;stikonas[m]&gt;</a></span><span class="message">It's C preprocessor</span></div><div class="line" id="163706"><span class="nick" style="color:#3c5b35"><a href="#163706" label="[16:37:06]">&lt;stikonas[m]&gt;</a></span><span class="message">It supports a bit more of the C macros</span></div><div class="line" id="163717"><span class="nick" style="color:#3c5b35"><a href="#163717" label="[16:37:17]">&lt;stikonas[m]&gt;</a></span><span class="message">Including some support for #include</span></div><div class="line" id="163731"><span class="nick" style="color:#3c5b35"><a href="#163731" label="[16:37:31]">&lt;stikonas[m]&gt;</a></span><span class="message">But also more powerful #defines</span></div><div class="line" id="163806"><span class="nick" style="color:#3c5b35"><a href="#163806" label="[16:38:06]">&lt;stikonas[m]&gt;</a></span><span class="message">And it can also call M2-planet, M1, hex2 to spit out binary in one go</span></div><div class="line" id="163811"><span class="nick" style="color:#3c5b35"><a href="#163811" label="[16:38:11]">&lt;stikonas[m]&gt;</a></span><span class="message">A bit like gcc</span></div><div class="line" id="163831"><span class="nick" style="color:#3c5b35"><a href="#163831" label="[16:38:31]">&lt;stikonas[m]&gt;</a></span><span class="message">gcc can call cc1, as, ld</span></div><div class="line" id="164024"><span class="nick" style="color:#2e2a4a"><a href="#164024" label="[16:40:24]">&lt;roconnor&gt;</a></span><span class="message">Thanks.</span></div><div class="line" id="172511"><span class="nick" style="color:#6b8072"><a href="#172511" label="[17:25:11]">&lt;muurkha&gt;</a></span><span class="message">roconnor: I don't think anyone should ever use strncpy because it's so bug-prone; it's much worse than strcpy. instead define a function that does what people naively expect strncpy to do</span></div><div class="line" id="172546"><span class="nick" style="color:#6b8072"><a href="#172546" label="[17:25:46]">&lt;muurkha&gt;</a></span><span class="message">except of course in the case where the destination really is fixed-size rather than nul-terminated</span></div><div class="line" id="172655"><span class="nick" style="color:#80b1d3"><a href="#172655" label="[17:26:55]">&lt;river&gt;</a></span><span class="message">I think that strncpy can be used correctly</span></div><div class="line" id="172703"><span class="nick" style="color:#80b1d3"><a href="#172703" label="[17:27:03]">&lt;river&gt;</a></span><span class="message">and in this way it improves upon strcpy</span></div><div class="line" id="172723"><span class="nick" style="color:#80b1d3"><a href="#172723" label="[17:27:23]">&lt;river&gt;</a></span><span class="message">but it requires you to do careful bounds checking stuff. strlcpy lets you avoid that</span></div><div class="line" id="172724"><span class="nick" style="color:#6b8072"><a href="#172724" label="[17:27:24]">&lt;muurkha&gt;</a></span><span class="message">strcpy can also be used correctly, and it's easier than strncpy</span></div><div class="line" id="172745"><span class="nick" style="color:#80b1d3"><a href="#172745" label="[17:27:45]">&lt;river&gt;</a></span><span class="message">oh you are right, i think i was thinking about gets</span></div><div class="line" id="172753"><span class="nick" style="color:#6b8072"><a href="#172753" label="[17:27:53]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="172813"><span class="nick" style="color:#6b8072"><a href="#172813" label="[17:28:13]">&lt;muurkha&gt;</a></span><span class="message">strlcpy or something similar seems clearly safer to me</span></div><div class="line" id="172815"><span class="nick" style="color:#2e2a4a"><a href="#172815" label="[17:28:15]">&lt;roconnor&gt;</a></span><span class="message">muurkha: What is your suggestion for using strcpy correctly here</span></div><div class="line" id="172949"><span class="nick" style="color:#2e2a4a"><a href="#172949" label="[17:29:49]">&lt;roconnor&gt;</a></span><span class="message">maybe use strlen and compare to MAX_STRING before strcpy?</span></div><div class="line" id="172952"><span class="nick" style="color:#6b8072"><a href="#172952" label="[17:29:52]">&lt;muurkha&gt;</a></span><span class="message">require(strlen(envp[1]) &lt; MAX_STRING - 1); I think?  I'm not deeply familiar with the code</span></div><div class="line" id="173001"><span class="nick" style="color:#6b8072"><a href="#173001" label="[17:30:01]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="173022"><span class="nick" style="color:#6b8072"><a href="#173022" label="[17:30:22]">&lt;muurkha&gt;</a></span><span class="message">but really I think using strlcpy is a better solution</span></div><div class="line" id="173035"><span class="nick" style="color:#2e2a4a"><a href="#173035" label="[17:30:35]">&lt;roconnor&gt;</a></span><span class="message">less efficently, but I suppose we don't want to microoptimise. :)</span></div><div class="line" id="173042"><span class="nick" style="color:#80b1d3"><a href="#173042" label="[17:30:42]">&lt;river&gt;</a></span><span class="message">does this same bounds check not work with strncpy?</span></div><div class="line" id="173107"><span class="nick" style="color:#6b8072"><a href="#173107" label="[17:31:07]">&lt;muurkha&gt;</a></span><span class="message">it does, but it avoids the need to use strncpy, which is a red flag</span></div><div class="line" id="173126"><span class="nick" style="color:#2e2a4a"><a href="#173126" label="[17:31:26]">&lt;roconnor&gt;</a></span><span class="message">actually strncpy does a bunch of padding with 0s so maybe strlen is more efficent.</span></div><div class="line" id="173130"><span class="nick" style="color:#80b1d3"><a href="#173130" label="[17:31:30]">&lt;river&gt;</a></span><span class="message">so strncpy basically gives no benefit over strcpy. except I guess it helps avoid writing beyond array bounds if you forget the if</span></div><div class="line" id="173143"><span class="nick" style="color:#6b8072"><a href="#173143" label="[17:31:43]">&lt;muurkha&gt;</a></span><span class="message">probably in the usual case, yeah</span></div><div class="line" id="173148"><span class="nick" style="color:#2e2a4a"><a href="#173148" label="[17:31:48]">&lt;roconnor&gt;</a></span><span class="message">okay I'll update my PR.</span></div><div class="line" id="173246"><span class="nick" style="color:#6b8072"><a href="#173246" label="[17:32:46]">&lt;muurkha&gt;</a></span><span class="message">river: the idea of strncpy is to use in cases like struct employee { char firstname[8]; char lastname[10]; ... };</span></div><div class="line" id="173316"><span class="nick" style="color:#6b8072"><a href="#173316" label="[17:33:16]">&lt;muurkha&gt;</a></span><span class="message">where it's valid for firstname or lastname to not be nul-terlinated</span></div><div class="line" id="173321"><span class="nick" style="color:#80b1d3"><a href="#173321" label="[17:33:21]">&lt;river&gt;</a></span><span class="message">oh i see!</span></div><div class="line" id="173415"><span class="nick" style="color:#6b8072"><a href="#173415" label="[17:34:15]">&lt;muurkha&gt;</a></span><span class="message">I don't think I've ever seen a correct use of strncpy in the wild until now (roconnor's is correct, of course, and the first time I've seen one)</span></div><div class="line" id="173435"><span class="nick" style="color:#2e2a4a"><a href="#173435" label="[17:34:35]">&lt;roconnor&gt;</a></span><span class="message">Ha.  I'm flattered.</span></div><div class="line" id="173515"><span class="nick" style="color:#6b8072"><a href="#173515" label="[17:35:15]">&lt;muurkha&gt;</a></span><span class="message">well, of course you have a very different relationship with correctness than C programmers do</span></div><div class="line" id="173648"><span class="nick" style="color:#6b8072"><a href="#173648" label="[17:36:48]">&lt;muurkha&gt;</a></span><span class="message">the issue is that people naturally think strncpy is analogous to strncat, which is of course what you would expect from its name</span></div><div class="line" id="173818"><span class="nick" style="color:#80b1d3"><a href="#173818" label="[17:38:18]">&lt;river&gt;</a></span><span class="message">ahh</span></div><div class="line" id="173828"><span class="nick" style="color:#80b1d3"><a href="#173828" label="[17:38:28]">&lt;river&gt;</a></span><span class="message">what a minefield lol</span></div><div class="line" id="173840"><span class="nick" style="color:#80b1d3"><a href="#173840" label="[17:38:40]">&lt;river&gt;</a></span><span class="message">so strncat is the ok one, strncpy is bad/pointless</span></div><div class="line" id="173913"><span class="nick" style="color:#6b8072"><a href="#173913" label="[17:39:13]">&lt;muurkha&gt;</a></span><span class="message">strncat actually does what you want in cases like this except that it is harder than it could be to tell if it has truncated the result</span></div><div class="line" id="173950"><span class="nick" style="color:#2e2a4a"><a href="#173950" label="[17:39:50]">&lt;roconnor&gt;</a></span><span class="message">I claim that require(strlen(envp[1]) &lt; MAX_STRING) is correct.</span></div><div class="line" id="174000"><span class="nick" style="color:#2e2a4a"><a href="#174000" label="[17:40:00]">&lt;roconnor&gt;</a></span><span class="message">let me try to reason it out to make sure</span></div><div class="line" id="174023"><span class="nick" style="color:#2e2a4a"><a href="#174023" label="[17:40:23]">&lt;roconnor&gt;</a></span><span class="message">strlen(envp[1]) is the length of the string without the null terminator</span></div><div class="line" id="174043"><span class="nick" style="color:#6b8072"><a href="#174043" label="[17:40:43]">&lt;muurkha&gt;</a></span><span class="message">Yes, I agree.</span></div><div class="line" id="174045"><span class="nick" style="color:#2e2a4a"><a href="#174045" label="[17:40:45]">&lt;roconnor&gt;</a></span><span class="message">strlen(envp[1]) + 1 is the number of bytes to be copied.</span></div><div class="line" id="174108"><span class="nick" style="color:#2e2a4a"><a href="#174108" label="[17:41:08]">&lt;roconnor&gt;</a></span><span class="message">the destination holds MAX_STRING characters.</span></div><div class="line" id="174114"><span class="nick" style="color:#6b8072"><a href="#174114" label="[17:41:14]">&lt;muurkha&gt;</a></span><span class="message">river: yeah, I mean, you can tell that the folks that hacked this stuff together in the 01970s had a very empirical sort of notion of &quot;correctness&quot;</span></div><div class="line" id="174144"><span class="nick" style="color:#2e2a4a"><a href="#174144" label="[17:41:44]">&lt;roconnor&gt;</a></span><span class="message">so wee need strlen(envp[1]) + 1 &lt;= MAX_STRING</span></div><div class="line" id="174202"><span class="nick" style="color:#2e2a4a"><a href="#174202" label="[17:42:02]">&lt;roconnor&gt;</a></span><span class="message">which is the same as strlen(envp[1]) &lt; MAX_STRING</span></div><div class="line" id="174238"><span class="nick" style="color:#2e2a4a"><a href="#174238" label="[17:42:38]">&lt;roconnor&gt;</a></span><span class="message">Is strncpy really that old?</span></div><div class="line" id="174258"><span class="nick" style="color:#2e2a4a"><a href="#174258" label="[17:42:58]">&lt;roconnor&gt;</a></span><span class="message">I figured it was circa 01990.</span></div><div class="line" id="174850"><span class="nick" style="color:#6b8072"><a href="#174850" label="[17:48:50]">&lt;muurkha&gt;</a></span><span class="message">I think it was used for struct dirent in 6th Edition UNIX</span></div><div class="line" id="174943"><span class="nick" style="color:#6b8072"><a href="#174943" label="[17:49:43]">&lt;muurkha&gt;</a></span><span class="message">here are uses in 7th Edition: <a rel="nofollow" href="https://lwn.net/Articles/723722/">https://lwn.net/Articles/723722/</a> </span></div><div class="line" id="175228"><span class="nick" style="color:#6b8072"><a href="#175228" label="[17:52:28]">&lt;muurkha&gt;</a></span><span class="message">one of the uses in there is evidently to explicitly truncate a string by deliberately passing a too-short length; nowadays we'd use memcpy, but memcpy (and bcopy) didn't exist yet</span></div><div class="line" id="175558"><span class="nick" style="color:#6b8072"><a href="#175558" label="[17:55:58]">&lt;muurkha&gt;</a></span><span class="message">longer discussion in <a rel="nofollow" href="http://web.archive.org/web/20220315035032/https://minnie.tuhs.org/pipermail/tuhs/2013-January/thread.html#5947">http://web.archive.org/web/20220315035032/https://minnie.tuhs.org/pipermail/tuhs/2013-January/thread.html#5947</a> </span></div><div class="line" id="180007"><span class="nick" style="color:#6b8072"><a href="#180007" label="[18:00:07]">&lt;muurkha&gt;</a></span><span class="message">Steve Johnson says strncpy in Unix probably predates C itself: <a rel="nofollow" href="http://web.archive.org/web/20220316142741/https://minnie.tuhs.org/pipermail/tuhs/2013-January/005954.html">http://web.archive.org/web/20220316142741/https://minnie.tuhs.org/pipermail/tuhs/2013-January/005954.html</a> </span></div><div class="line" id="180058"><span class="nick" style="color:#af8d2f"><a href="#180058" label="[18:00:58]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Using Limine boot loader I've been able to boot linux 4.9.10 using sysb initramfs to launch sysc.</span></div><div class="line" id="180153"><span class="nick" style="color:#6c3d55"><a href="#180153" label="[18:01:53]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: wow, that was quick! :-)</span></div><div class="line" id="180154"><span class="nick" style="color:#af8d2f"><a href="#180154" label="[18:01:54]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: So its viable for our purposes.</span></div><div class="line" id="180155"><span class="nick" style="color:#6b8072"><a href="#180155" label="[18:01:55]">&lt;muurkha&gt;</a></span><span class="message">but Ron Natalie says that by that name it dates only to 7th Edition: <a rel="nofollow" href="http://web.archive.org/web/20220316142749/https://minnie.tuhs.org/pipermail/tuhs/2013-January/005956.html">http://web.archive.org/web/20220316142749/https://minnie.tuhs.org/pipermail/tuhs/2013-January/005956.html</a> </span></div><div class="line" id="180212"><span class="nick" style="color:#6b8072"><a href="#180212" label="[18:02:12]">&lt;muurkha&gt;</a></span><span class="message">rickmasters: wow, fantastic!</span></div><div class="line" id="180253"><span class="nick" style="color:#6c3d55"><a href="#180253" label="[18:02:53]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: so you kexec Limine from Fiwix and then Limine loads the Linux kernel?</span></div><div class="line" id="180311"><span class="nick" style="color:#af8d2f"><a href="#180311" label="[18:03:11]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: No, no. Don't get too excited folks. :)</span></div><div class="line" id="180329"><span class="nick" style="color:#6c3d55"><a href="#180329" label="[18:03:29]">&lt;Mikaku&gt;</a></span><span class="message">:-)</span></div><div class="line" id="180404"><span class="nick" style="color:#af8d2f"><a href="#180404" label="[18:04:04]">&lt;rickmasters&gt;</a></span><span class="message">I just created a fresh disk image, installed Limine with the kernel and initramfs taken from live-bootstrap and launched it and it worked.</span></div><div class="line" id="180437"><span class="nick" style="color:#6c3d55"><a href="#180437" label="[18:04:37]">&lt;Mikaku&gt;</a></span><span class="message">ah ok</span></div><div class="line" id="180512"><span class="nick" style="color:#af8d2f"><a href="#180512" label="[18:05:12]">&lt;rickmasters&gt;</a></span><span class="message">I just want to verify it actually boots our kernel and ramfs before porting it into Fiwix.</span></div><div class="line" id="180545"><span class="nick" style="color:#6c3d55"><a href="#180545" label="[18:05:45]">&lt;Mikaku&gt;</a></span><span class="message">I see</span></div><div class="line" id="180637"><span class="nick" style="color:#6c3d55"><a href="#180637" label="[18:06:37]">&lt;Mikaku&gt;</a></span><span class="message">but the basic idea don't change? I mean, kexec GRUB/Limine (whatever bootloader) from Fiwix to load the Linux kernel?</span></div><div class="line" id="181056"><span class="nick" style="color:#af8d2f"><a href="#181056" label="[18:10:56]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Sort of/not exactly. I'm thinking of taking the Limine code and integrating it into Fiwix to directly support Linux boot protocol</span></div><div class="line" id="181227"><span class="nick" style="color:#6c3d55"><a href="#181227" label="[18:12:27]">&lt;Mikaku&gt;</a></span><span class="message">ah yes, that seems a better approach to me</span></div><div class="line" id="181229"><span class="nick" style="color:#af8d2f"><a href="#181229" label="[18:12:29]">&lt;rickmasters&gt;</a></span><span class="message">I'm thinking very similar to your kexec for multiboot but using two ram drives - one for kernel, one for initramfs file.</span></div><div class="line" id="181302"><span class="nick" style="color:#6c3d55"><a href="#181302" label="[18:13:02]">&lt;Mikaku&gt;</a></span><span class="message">hmm, well, in that case the current implementation already covers this</span></div><div class="line" id="181335"><span class="nick" style="color:#6c3d55"><a href="#181335" label="[18:13:35]">&lt;Mikaku&gt;</a></span><span class="message">you can provide kexec_* parameters and also the initrd= and ramdisksize= parameter in the same cmdline</span></div><div class="line" id="181400"><span class="nick" style="color:#6c3d55"><a href="#181400" label="[18:14:00]">&lt;Mikaku&gt;</a></span><span class="message">I've not tested it but the idea was that they could coexist</span></div><div class="line" id="181708"><span class="nick" style="color:#6c3d55"><a href="#181708" label="[18:17:08]">&lt;Mikaku&gt;</a></span><span class="message">(I'll be away for a while, I'll read your posts later)</span></div><div class="line" id="181713"><span class="nick" style="color:#af8d2f"><a href="#181713" label="[18:17:13]">&lt;rickmasters&gt;</a></span><span class="message">Right, I don't see any need for new kernel parameters at this point. It would use kexec_proto=linux</span></div><div class="line" id="181745"><span class="nick" style="color:#af8d2f"><a href="#181745" label="[18:17:45]">&lt;rickmasters&gt;</a></span><span class="message">Talk to you later...</span></div><div class="line" id="184051"><span class="nick" style="color:#2e2a4a"><a href="#184051" label="[18:40:51]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1295">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1295</a>  <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1312">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1312</a> </span></div><div class="line" id="184130"><span class="nick" style="color:#2e2a4a"><a href="#184130" label="[18:41:30]">&lt;roconnor&gt;</a></span><span class="message">some strangeness here.  These values can never be NULL as they are required to be not NULL at the top of the loop.</span></div><div class="line" id="184149"><span class="nick" style="color:#2e2a4a"><a href="#184149" label="[18:41:49]">&lt;roconnor&gt;</a></span><span class="message">I'm starting to regret looking into this file. :P</span></div><div class="line" id="192655"><span class="nick" style="color:#3c5b35"><a href="#192655" label="[19:26:55]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: what if envp is NULL?</span></div><div class="line" id="192702"><span class="nick" style="color:#3c5b35"><a href="#192702" label="[19:27:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Or something similar</span></div><div class="line" id="192723"><span class="nick" style="color:#3c5b35"><a href="#192723" label="[19:27:23]">&lt;stikonas[m]&gt;</a></span><span class="message">There is an assignment after top of the loop check</span></div><div class="line" id="195116"><span class="nick" style="color:#6c3d55"><a href="#195116" label="[19:51:16]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: yes, 'kexec_proto=linux' this is exactly as I thought</span></div><div class="line" id="200521"><span class="nick" style="color:#3c5b35"><a href="#200521" label="[20:05:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, what happens if fiwix is booted with kexec but e.g. build fails and we exit 1</span></div><div class="line" id="201101"><span class="nick" style="color:#2e2a4a"><a href="#201101" label="[20:11:01]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1323-L1326">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1323-L1326</a> </span></div><div class="line" id="201108"><span class="nick" style="color:#2e2a4a"><a href="#201108" label="[20:11:08]">&lt;roconnor&gt;</a></span><span class="message">I don't even ...</span></div><div class="line" id="201703"><span class="nick" style="color:#6c3d55"><a href="#201703" label="[20:17:03]">&lt;Mikaku&gt;</a></span><span class="message">stikonas: I've not tested it but kexec, at least in Fiwix, is a point of no return</span></div><div class="line" id="201856"><span class="nick" style="color:#3c5b35"><a href="#201856" label="[20:18:56]">&lt;stikonas[m]&gt;</a></span><span class="message">That's fine anyway, I was just curious what happens</span></div><div class="line" id="202856"><span class="nick" style="color:#389600"><a href="#202856" label="[20:28:56]">&lt;stikonas&gt;</a></span><span class="message">roconnor: yeah, this should just be n = env...</span></div><div class="line" id="202954"><span class="nick" style="color:#2e2a4a"><a href="#202954" label="[20:29:54]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1277-L1282">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1277-L1282</a> </span></div><div class="line" id="203012"><span class="nick" style="color:#2e2a4a"><a href="#203012" label="[20:30:12]">&lt;roconnor&gt;</a></span><span class="message">I was inclined to suspend disbelief about this comment.</span></div><div class="line" id="203053"><span class="nick" style="color:#389600"><a href="#203053" label="[20:30:53]">&lt;stikonas&gt;</a></span><span class="message">roconnor: that is not a nonsense comment, there was a good reason</span></div><div class="line" id="203112"><span class="nick" style="color:#2e2a4a"><a href="#203112" label="[20:31:12]">&lt;roconnor&gt;</a></span><span class="message">Really?</span></div><div class="line" id="203128"><span class="nick" style="color:#2e2a4a"><a href="#203128" label="[20:31:28]">&lt;roconnor&gt;</a></span><span class="message">because strcpy litterally just goes through character by character.</span></div><div class="line" id="203147"><span class="nick" style="color:#389600"><a href="#203147" label="[20:31:47]">&lt;stikonas&gt;</a></span><span class="message">yes, but keep in mind that this had to run on M2-Planet</span></div><div class="line" id="203157"><span class="nick" style="color:#389600"><a href="#203157" label="[20:31:57]">&lt;stikonas&gt;</a></span><span class="message">and M2-Planet is not as good as gcc</span></div><div class="line" id="203207"><span class="nick" style="color:#389600"><a href="#203207" label="[20:32:07]">&lt;stikonas&gt;</a></span><span class="message">I think this particular problem was fixed in M2-Planet</span></div><div class="line" id="203211"><span class="nick" style="color:#389600"><a href="#203211" label="[20:32:11]">&lt;stikonas&gt;</a></span><span class="message">let me try to find it</span></div><div class="line" id="203216"><span class="nick" style="color:#2e2a4a"><a href="#203216" label="[20:32:16]">&lt;roconnor&gt;</a></span><span class="message">oooh</span></div><div class="line" id="203258"><span class="nick" style="color:#389600"><a href="#203258" label="[20:32:58]">&lt;stikonas&gt;</a></span><span class="message">roconnor: probably this <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/commit/546cb1ac957cacfcc34a0e7b58f8e43d3392e417">https://github.com/oriansj/M2-Planet/commit/546cb1ac957cacfcc34a0e7b58f8e43d3392e417</a> </span></div><div class="line" id="203328"><span class="nick" style="color:#2e2a4a"><a href="#203328" label="[20:33:28]">&lt;roconnor&gt;</a></span><span class="message">now I see that envp_line predates <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/commit/87fdb3fa955229c33bde2905f501d1275702d01a">https://github.com/oriansj/mescc-tools/commit/87fdb3fa955229c33bde2905f501d1275702d01a</a> </span></div><div class="line" id="203406"><span class="nick" style="color:#389600"><a href="#203406" label="[20:34:06]">&lt;stikonas&gt;</a></span><span class="message">if you look at M2-Planet 3 years ago, it was far less capable</span></div><div class="line" id="203417"><span class="nick" style="color:#2e2a4a"><a href="#203417" label="[20:34:17]">&lt;roconnor&gt;</a></span><span class="message">Understandable.</span></div><div class="line" id="203437"><span class="nick" style="color:#389600"><a href="#203437" label="[20:34:37]">&lt;stikonas&gt;</a></span><span class="message">still, I guess we don't need this workaround anymore</span></div><div class="line" id="203448"><span class="nick" style="color:#389600"><a href="#203448" label="[20:34:48]">&lt;stikonas&gt;</a></span><span class="message">so you could try to rewrite it in a simpler way</span></div><div class="line" id="203501"><span class="nick" style="color:#389600"><a href="#203501" label="[20:35:01]">&lt;stikonas&gt;</a></span><span class="message">(as long as it builds with the latest git M2-Planet)</span></div><div class="line" id="203549"><span class="nick" style="color:#2e2a4a"><a href="#203549" label="[20:35:49]">&lt;roconnor&gt;</a></span><span class="message">So I can locally test my changes, but is that good enough to make a PR?  kaem runs on all sorts of strange platforms and I don't want to break things needlessly.</span></div><div class="line" id="203617"><span class="nick" style="color:#389600"><a href="#203617" label="[20:36:17]">&lt;stikonas&gt;</a></span><span class="message">one platform for kaem should be good enough</span></div><div class="line" id="203624"><span class="nick" style="color:#af8d2f"><a href="#203624" label="[20:36:24]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: If build fails, then init exits and fiwix will halt with an error message. I added a patch to also sync disks in that situation.</span></div><div class="line" id="203639"><span class="nick" style="color:#389600"><a href="#203639" label="[20:36:39]">&lt;stikonas&gt;</a></span><span class="message">as long as you can run make test-x86 or make test-amd64 on stage0-posix, I don't expect other arches to break</span></div><div class="line" id="203655"><span class="nick" style="color:#389600"><a href="#203655" label="[20:36:55]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet should have the same features/bugs on different arches</span></div><div class="line" id="203712"><span class="nick" style="color:#2e2a4a"><a href="#203712" label="[20:37:12]">&lt;roconnor&gt;</a></span><span class="message">ha, running make.</span></div><div class="line" id="203723"><span class="nick" style="color:#2e2a4a"><a href="#203723" label="[20:37:23]">&lt;roconnor&gt;</a></span><span class="message">But yeah, okay I'll look into that.</span></div><div class="line" id="203730"><span class="nick" style="color:#389600"><a href="#203730" label="[20:37:30]">&lt;stikonas&gt;</a></span><span class="message">make is not really needed</span></div><div class="line" id="203806"><span class="nick" style="color:#389600"><a href="#203806" label="[20:38:06]">&lt;stikonas&gt;</a></span><span class="message">you can just run ./bootstrap-seeds/POSIX/AMD64/kaem-optional-seed</span></div><div class="line" id="203827"><span class="nick" style="color:#389600"><a href="#203827" label="[20:38:27]">&lt;stikonas&gt;</a></span><span class="message">that make target is just a simple wrapper around 2 commands</span></div><div class="line" id="203827"><span class="nick" style="color:#2e2a4a"><a href="#203827" label="[20:38:27]">&lt;roconnor&gt;</a></span><span class="message">does that run the tests?</span></div><div class="line" id="203836"><span class="nick" style="color:#389600"><a href="#203836" label="[20:38:36]">&lt;stikonas&gt;</a></span><span class="message">it runs ./bootstrap-seeds/POSIX/AMD64/kaem-optional-seed and then sha256sums...</span></div><div class="line" id="203847"><span class="nick" style="color:#389600"><a href="#203847" label="[20:38:47]">&lt;stikonas&gt;</a></span><span class="message">we don't have particular tests for Kaem</span></div><div class="line" id="203853"><span class="nick" style="color:#af8d2f"><a href="#203853" label="[20:38:53]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Of course Fiwix is currently launched by a user space program on builder-hex0.</span></div><div class="line" id="203854"><span class="nick" style="color:#389600"><a href="#203854" label="[20:38:54]">&lt;stikonas&gt;</a></span><span class="message">there are only tests for M2-Planet</span></div><div class="line" id="203915"><span class="nick" style="color:#2e2a4a"><a href="#203915" label="[20:39:15]">&lt;roconnor&gt;</a></span><span class="message">oh okay.  Well I can certainly run kaem through its usual hoops.</span></div><div class="line" id="203933"><span class="nick" style="color:#389600"><a href="#203933" label="[20:39:33]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix kaem scripts are usually good enough for testing</span></div><div class="line" id="203933"><span class="nick" style="color:#2e2a4a"><a href="#203933" label="[20:39:33]">&lt;roconnor&gt;</a></span><span class="message">on x86 at least.</span></div><div class="line" id="204002"><span class="nick" style="color:#2e2a4a"><a href="#204002" label="[20:40:02]">&lt;roconnor&gt;</a></span><span class="message">I have everything upto bash, which is I guess everything that kaem is used for.</span></div><div class="line" id="204025"><span class="nick" style="color:#389600"><a href="#204025" label="[20:40:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, but stage0-posix should already exercise all features</span></div><div class="line" id="204032"><span class="nick" style="color:#389600"><a href="#204032" label="[20:40:32]">&lt;stikonas&gt;</a></span><span class="message">including env variables and aliases</span></div><div class="line" id="204129"><span class="nick" style="color:#af8d2f"><a href="#204129" label="[20:41:29]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Maybe you meant to ask if Linux is booted by Fiwix's kexec and build fails? In that case, it's no different than today - drops to bash.</span></div><div class="line" id="204219"><span class="nick" style="color:#389600"><a href="#204219" label="[20:42:19]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: no, I was thinking what would happen if something in Fiwix system errors out</span></div><div class="line" id="204233"><span class="nick" style="color:#389600"><a href="#204233" label="[20:42:33]">&lt;stikonas&gt;</a></span><span class="message">so we exit but prepared kernel and initramfs are not yet built</span></div><div class="line" id="204239"><span class="nick" style="color:#389600"><a href="#204239" label="[20:42:39]">&lt;stikonas&gt;</a></span><span class="message">so those ramdisks are empty</span></div><div class="line" id="204607"><span class="nick" style="color:#3c5b35"><a href="#204607" label="[20:46:07]">&lt;stikonas[m]&gt;</a></span><span class="message">Well any behaviour is fine I guess</span></div><div class="line" id="204626"><span class="nick" style="color:#3c5b35"><a href="#204626" label="[20:46:26]">&lt;stikonas[m]&gt;</a></span><span class="message">Linux just hangs if you exit pid1</span></div><div class="line" id="204754"><span class="nick" style="color:#af8d2f"><a href="#204754" label="[20:47:54]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: currently Fiwix checks the ramdisk for a valid ELF header and only attempts kexec if its valid.</span></div><div class="line" id="204828"><span class="nick" style="color:#3c5b35"><a href="#204828" label="[20:48:28]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, makes sense</span></div><div class="line" id="205159"><span class="nick" style="color:#af8d2f"><a href="#205159" label="[20:51:59]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: The Limine code checks for appropriate magic numbers for linux boot protocol so it should work the same.</span></div><div class="line" id="210748"><span class="nick" style="color:#389600"><a href="#210748" label="[21:07:48]">&lt;stikonas&gt;</a></span><span class="message">roconnor: as for multiple arches, M2-Planet emits basically identical assembly on all arches...</span></div><div class="line" id="210845"><span class="nick" style="color:#389600"><a href="#210845" label="[21:08:45]">&lt;stikonas&gt;</a></span><span class="message">so e.g. on amd64 and x86 we are using the same number of registers (despite amd64 having double the number of registers)</span></div><div class="line" id="210927"><span class="nick" style="color:#389600"><a href="#210927" label="[21:09:27]">&lt;stikonas&gt;</a></span><span class="message">(or on risc-v that has 32 registers we still use only very few)</span></div><div class="line" id="222422"><span class="nick" style="color:#8dd3c7"><a href="#222422" label="[22:24:22]">&lt;mihi&gt;</a></span><span class="message">roconnor, you will find more dead code once you have a look at M1-Macro (in particular around blob type handling). I planned to collect all of the dead code I know and submit a pull request to eliminate it, but so far did not find time to.</span></div><div class="line" id="222541"><span class="nick" style="color:#8dd3c7"><a href="#222541" label="[22:25:41]">&lt;mihi&gt;</a></span><span class="message">especially since M1 is also used by Mes, so I'd have to run all the Mes tests and the bootstrap to the point where tcc is built by mes, to make sure I did not break anything.</span></div><div class="line" id="223044"><span class="nick" style="color:#2e2a4a"><a href="#223044" label="[22:30:44]">&lt;roconnor&gt;</a></span><span class="message">oh, does mes have tests?</span></div><div class="line" id="224302"><span class="nick" style="color:#389600"><a href="#224302" label="[22:43:02]">&lt;stikonas&gt;</a></span><span class="message">yes, I think mes does have tests</span></div><div class="line" id="224329"><span class="nick" style="color:#389600"><a href="#224329" label="[22:43:29]">&lt;stikonas&gt;</a></span><span class="message">though usually running bootstrap would catch most if not all issues</span></div><div class="line" id="224339"><span class="nick" style="color:#389600"><a href="#224339" label="[22:43:39]">&lt;stikonas&gt;</a></span><span class="message">or at least those issues that people care about</span></div><div class="line" id="224615"><span class="nick" style="color:#2e2a4a"><a href="#224615" label="[22:46:15]">&lt;roconnor&gt;</a></span><span class="message">Heh.  Mes doesn't have a very long life.  It builds tcc, and maybe that is it.</span></div><div class="line" id="224625"><span class="nick" style="color:#2e2a4a"><a href="#224625" label="[22:46:25]">&lt;roconnor&gt;</a></span><span class="message">I guess it builds itself too.</span></div><div class="line" id="230519"><span class="nick" style="color:#389600"><a href="#230519" label="[23:05:19]">&lt;stikonas&gt;</a></span><span class="message">roconnor: right now in live-bootstrap we do rebuild mes with mes</span></div><div class="line" id="230540"><span class="nick" style="color:#389600"><a href="#230540" label="[23:05:40]">&lt;stikonas&gt;</a></span><span class="message">depending on the bugs, mes-m2 sometimes might also build tcc directly</span></div><div class="line" id="230601"><span class="nick" style="color:#389600"><a href="#230601" label="[23:06:01]">&lt;stikonas&gt;</a></span><span class="message">but mes built with mescc is a bit faster anyway</span></div><div class="line" id="230614"><span class="nick" style="color:#389600"><a href="#230614" label="[23:06:14]">&lt;stikonas&gt;</a></span><span class="message">so it does not take too much extra time to rebuilt it with itself</span></div><div class="line" id="230621"><span class="nick" style="color:#389600"><a href="#230621" label="[23:06:21]">&lt;stikonas&gt;</a></span><span class="message">and is less prone to breakages</span></div><br /></div></body></html>