<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-03-31.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025104"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke_</span></div><div class="line" id="031411"><span class="nick">***</span><span class="message notice">pigeons_ is now known as pigeons</span></div><div class="line" id="064703"><span class="nick">***</span><span class="message notice">alMalsamo is now known as littlebobeep</span></div><div class="line" id="064749"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="065215"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="065332"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="071212"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="142032"><span class="nick" style="color:#8dd3c7"><a href="#142032" label="[14:20:32]">&lt;unmatched-paren&gt;</a></span><span class="message">does anyone know a good introduction to lex and yacc, and [LA]LR parsing in general?</span></div><div class="line" id="194759"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="201250"><span class="nick" style="color:#2e2a4a"><a href="#201250" label="[20:12:50]">&lt;muurkha&gt;</a></span><span class="message">unmatched-paren: I learned about it from the Dragon Book when I was a kid, but I didn't really understand it</span></div><div class="line" id="201353"><span class="nick" style="color:#2e2a4a"><a href="#201353" label="[20:13:53]">&lt;muurkha&gt;</a></span><span class="message">I used ocamlyacc to write the Bicicleta parser, so I did eventually understand it well enough to use, but I still couldn't write an LALR parser generator</span></div><div class="line" id="201423"><span class="nick" style="color:#2e2a4a"><a href="#201423" label="[20:14:23]">&lt;muurkha&gt;</a></span><span class="message">so conceivably I may not be the best source of information</span></div><div class="line" id="201555"><span class="nick" style="color:#2e2a4a"><a href="#201555" label="[20:15:55]">&lt;muurkha&gt;</a></span><span class="message">but I think it may be better nowadays to just use PEG</span></div><div class="line" id="211648"><span class="nick" style="color:#8dd3c7"><a href="#211648" label="[21:16:48]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: apparently PEG is slightly less powerful, but i'll give it a go...</span></div><div class="line" id="211739"><span class="nick" style="color:#2e2a4a"><a href="#211739" label="[21:17:39]">&lt;muurkha&gt;</a></span><span class="message">well, it's slower</span></div><div class="line" id="211753"><span class="nick" style="color:#8dd3c7"><a href="#211753" label="[21:17:53]">&lt;unmatched-paren&gt;</a></span><span class="message">hm</span></div><div class="line" id="211806"><span class="nick" style="color:#2e2a4a"><a href="#211806" label="[21:18:06]">&lt;muurkha&gt;</a></span><span class="message">but it can parse every language LALR can parse, and it's a lot easier to understand</span></div><div class="line" id="211813"><span class="nick" style="color:#8dd3c7"><a href="#211813" label="[21:18:13]">&lt;unmatched-paren&gt;</a></span><span class="message">probably doesn't matter for a bootstrap compiler anyway</span></div><div class="line" id="211844"><span class="nick" style="color:#8dd3c7"><a href="#211844" label="[21:18:44]">&lt;unmatched-paren&gt;</a></span><span class="message">it's just pascal, nothing too tricky, no significant whitespace evilness or anything</span></div><div class="line" id="211857"><span class="nick" style="color:#2e2a4a"><a href="#211857" label="[21:18:57]">&lt;muurkha&gt;</a></span><span class="message">I wrote an introduction in <a rel="nofollow" href="https://github.com/kragen/peg-bootstrap">https://github.com/kragen/peg-bootstrap</a> </span></div><div class="line" id="211907"><span class="nick" style="color:#8dd3c7"><a href="#211907" label="[21:19:07]">&lt;unmatched-paren&gt;</a></span><span class="message">still, ocaml doesn't seem to have a PEG library...</span></div><div class="line" id="211913"><span class="nick" style="color:#2e2a4a"><a href="#211913" label="[21:19:13]">&lt;muurkha&gt;</a></span><span class="message">but there are probably better introductions</span></div><div class="line" id="211932"><span class="nick" style="color:#2e2a4a"><a href="#211932" label="[21:19:32]">&lt;muurkha&gt;</a></span><span class="message">yeah, the path of least resistance might be to just use ocamllex and ocamlyacc</span></div><div class="line" id="211947"><span class="nick" style="color:#8dd3c7"><a href="#211947" label="[21:19:47]">&lt;unmatched-paren&gt;</a></span><span class="message">or ocamllex and menhir</span></div><div class="line" id="212020"><span class="nick" style="color:#2e2a4a"><a href="#212020" label="[21:20:20]">&lt;muurkha&gt;</a></span><span class="message">but if you find yourself getting frustrated trying to figure out what a shift-reduce conflict is, keep PEGs in mind as an alternative</span></div><div class="line" id="212044"><span class="nick" style="color:#2e2a4a"><a href="#212044" label="[21:20:44]">&lt;muurkha&gt;</a></span><span class="message">you can write a usable PEG library in 100 lines of code</span></div><div class="line" id="212109"><span class="nick" style="color:#8dd3c7"><a href="#212109" label="[21:21:09]">&lt;unmatched-paren&gt;</a></span><span class="message">how about parser combinators?</span></div><div class="line" id="212136"><span class="nick" style="color:#8dd3c7"><a href="#212136" label="[21:21:36]">&lt;unmatched-paren&gt;</a></span><span class="message">they seem to fit really well with functional languages</span></div><div class="line" id="212516"><span class="nick" style="color:#2e2a4a"><a href="#212516" label="[21:25:16]">&lt;muurkha&gt;</a></span><span class="message">those are more a user interface to a parsing library than they are a parsing algorithm</span></div><div class="line" id="212521"><span class="nick" style="color:#8dd3c7"><a href="#212521" label="[21:25:21]">&lt;unmatched-paren&gt;</a></span><span class="message">...except the parser combinators for ocaml all seem to be unmaintained :(</span></div><div class="line" id="212528"><span class="nick" style="color:#8dd3c7"><a href="#212528" label="[21:25:28]">&lt;unmatched-paren&gt;</a></span><span class="message">menhir it is, then -.o.-</span></div><div class="line" id="212545"><span class="nick" style="color:#2e2a4a"><a href="#212545" label="[21:25:45]">&lt;muurkha&gt;</a></span><span class="message">parsing libraries don't need to be maintained usually</span></div><div class="line" id="212551"><span class="nick" style="color:#2e2a4a"><a href="#212551" label="[21:25:51]">&lt;muurkha&gt;</a></span><span class="message">they usually don't get security holes ;)</span></div><div class="line" id="212613"><span class="nick" style="color:#8dd3c7"><a href="#212613" label="[21:26:13]">&lt;unmatched-paren&gt;</a></span><span class="message">fair enough :)</span></div><div class="line" id="212724"><span class="nick" style="color:#8dd3c7"><a href="#212724" label="[21:27:24]">&lt;unmatched-paren&gt;</a></span><span class="message">i managed to get menhir building under ocaml-4.07, but i couldn't figure out how to make the install phase work</span></div><div class="line" id="213257"><span class="nick" style="color:#8dd3c7"><a href="#213257" label="[21:32:57]">&lt;unmatched-paren&gt;</a></span><span class="message">i might just do ocamllex</span></div><div class="line" id="213352"><span class="nick" style="color:#2e2a4a"><a href="#213352" label="[21:33:52]">&lt;muurkha&gt;</a></span><span class="message">it's probably the path of least resistance</span></div><div class="line" id="213357"><span class="nick" style="color:#8dd3c7"><a href="#213357" label="[21:33:57]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah</span></div><div class="line" id="213412"><span class="nick" style="color:#8dd3c7"><a href="#213412" label="[21:34:12]">&lt;unmatched-paren&gt;</a></span><span class="message">well, menhir is just as easy on the latest ocaml</span></div><div class="line" id="213424"><span class="nick" style="color:#8dd3c7"><a href="#213424" label="[21:34:24]">&lt;unmatched-paren&gt;</a></span><span class="message">but i seem to be running into problems on 4.07</span></div><div class="line" id="213835"><span class="nick" style="color:#2e2a4a"><a href="#213835" label="[21:38:35]">&lt;muurkha&gt;</a></span><span class="message">nothing is *quite* so easy to install as something that's already installed</span></div><div class="line" id="214008"><span class="nick">***</span><span class="message notice">civodul` is now known as civodul</span></div><div class="line" id="214251"><span class="nick" style="color:#6b8072"><a href="#214251" label="[21:42:51]">&lt;drakonis&gt;</a></span><span class="message">raku does PEGs but the bootstrap path might be a little rough</span></div><div class="line" id="214304"><span class="nick" style="color:#6b8072"><a href="#214304" label="[21:43:04]">&lt;drakonis&gt;</a></span><span class="message">since you might want to bootstrap perl</span></div><div class="line" id="222005"><span class="nick" style="color:#80b1d3"><a href="#222005" label="[22:20:05]">&lt;stikonas&gt;</a></span><span class="message">drakonis: there are no issues with perl</span></div><div class="line" id="222037"><span class="nick" style="color:#8dd3c7"><a href="#222037" label="[22:20:37]">&lt;unmatched-paren&gt;</a></span><span class="message">well, no *bootstrapping* issues, at least ;)</span></div><div class="line" id="222046"><span class="nick" style="color:#80b1d3"><a href="#222046" label="[22:20:46]">&lt;stikonas&gt;</a></span><span class="message">we build perl in live-bootstrap</span></div><div class="line" id="222058"><span class="nick" style="color:#6b8072"><a href="#222058" label="[22:20:58]">&lt;drakonis&gt;</a></span><span class="message">hm, nice.</span></div><div class="line" id="222147"><span class="nick" style="color:#6b8072"><a href="#222147" label="[22:21:47]">&lt;drakonis&gt;</a></span><span class="message">good to know</span></div><div class="line" id="222151"><span class="nick" style="color:#8dd3c7"><a href="#222151" label="[22:21:51]">&lt;unmatched-paren&gt;</a></span><span class="message">are there actually compilers in perl?</span></div><div class="line" id="222308"><span class="nick" style="color:#8dd3c7"><a href="#222308" label="[22:23:08]">&lt;unmatched-paren&gt;</a></span><span class="message">well, there's a C compiler in vimscript, so anything is possible, i guess!</span></div><div class="line" id="222402"><span class="nick" style="color:#6b8072"><a href="#222402" label="[22:24:02]">&lt;drakonis&gt;</a></span><span class="message">well, not perl i guess</span></div><div class="line" id="222423"><span class="nick" style="color:#6b8072"><a href="#222423" label="[22:24:23]">&lt;drakonis&gt;</a></span><span class="message">raku is very amenable to building these</span></div><div class="line" id="222623"><span class="nick" style="color:#6b8072"><a href="#222623" label="[22:26:23]">&lt;drakonis&gt;</a></span><span class="message">actually, i recall seeing a compiler built with perl</span></div><div class="line" id="222853"><span class="nick" style="color:#6b8072"><a href="#222853" label="[22:28:53]">&lt;drakonis&gt;</a></span><span class="message">it was used for a toy fp language</span></div><div class="line" id="223302"><span class="nick" style="color:#6b8072"><a href="#223302" label="[22:33:02]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/Raku/nqp">https://github.com/Raku/nqp</a> </span></div><div class="line" id="224657"><span class="nick" style="color:#80b1d3"><a href="#224657" label="[22:46:57]">&lt;stikonas&gt;</a></span><span class="message">perl bootstrap is here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst#33perl-5000">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst#33perl-5000</a>  (we build it in a few stages because perl used a bit of perl scripts in the build process (mostly stuff like generating some header files)</span></div><div class="line" id="225102"><span class="nick" style="color:#6b8072"><a href="#225102" label="[22:51:02]">&lt;drakonis&gt;</a></span><span class="message">oh, nice.</span></div><div class="line" id="225750"><span class="nick" style="color:#6b8072"><a href="#225750" label="[22:57:50]">&lt;drakonis&gt;</a></span><span class="message">how amenable is the bootstrappable project to the idea of other languages for bootstrapping steps?</span></div><div class="line" id="225806"><span class="nick" style="color:#6b8072"><a href="#225806" label="[22:58:06]">&lt;drakonis&gt;</a></span><span class="message">the most common one so far seems to be scheme</span></div><div class="line" id="230050"><span class="nick" style="color:#80b1d3"><a href="#230050" label="[23:00:50]">&lt;stikonas&gt;</a></span><span class="message">drakonis: we use whatver we have bootstrapped</span></div><div class="line" id="230054"><span class="nick" style="color:#80b1d3"><a href="#230054" label="[23:00:54]">&lt;stikonas&gt;</a></span><span class="message">there are no limitations</span></div><div class="line" id="230104"><span class="nick" style="color:#6b8072"><a href="#230104" label="[23:01:04]">&lt;drakonis&gt;</a></span><span class="message">i see</span></div><div class="line" id="230107"><span class="nick" style="color:#6b8072"><a href="#230107" label="[23:01:07]">&lt;drakonis&gt;</a></span><span class="message">cool.</span></div><div class="line" id="230123"><span class="nick" style="color:#80b1d3"><a href="#230123" label="[23:01:23]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap basically bootstraps GCC but on the way we must bootstrap some other languages</span></div><div class="line" id="230132"><span class="nick" style="color:#80b1d3"><a href="#230132" label="[23:01:32]">&lt;stikonas&gt;</a></span><span class="message">as GCC depends on them</span></div><div class="line" id="230151"><span class="nick" style="color:#80b1d3"><a href="#230151" label="[23:01:51]">&lt;stikonas&gt;</a></span><span class="message">e.g. bash, perl, etc...</span></div><div class="line" id="230228"><span class="nick" style="color:#80b1d3"><a href="#230228" label="[23:02:28]">&lt;stikonas&gt;</a></span><span class="message">(bash and perl is due to GNU Autotools)</span></div><div class="line" id="230315"><span class="nick" style="color:#6d2462"><a href="#230315" label="[23:03:15]">&lt;oriansj&gt;</a></span><span class="message">and there is the guile bootstrap which would be the bootstrapped scheme</span></div><br /></div></body></html>