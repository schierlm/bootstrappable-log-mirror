<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011623"><span class="nick" style="color:#8dd3c7"><a href="#011623" label="[01:16:23]">&lt;OriansJ&gt;</a></span><span class="message">grubles: most people don't release source code that doesn't work; so it probably works to what degree and with what properties, one can not guess without study.</span></div><div class="line" id="011637"><span class="nick" style="color:#2e2a4a"><a href="#011637" label="[01:16:37]">&lt;dddddd&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.debian.org/HelmutGrohne/rebootstrap">https://wiki.debian.org/HelmutGrohne/rebootstrap</a>  has contact info about it.</span></div><div class="line" id="011721"><span class="nick" style="color:#8dd3c7"><a href="#011721" label="[01:17:21]">&lt;OriansJ&gt;</a></span><span class="message">So, communicate and learn more if you are curious.</span></div><div class="line" id="012518"><span class="nick" style="color:#8dd3c7"><a href="#012518" label="[01:25:18]">&lt;OriansJ&gt;</a></span><span class="message">bootstrapping is a very small community and we need to be kind and considerate of each other and each other's time. Which like life is a precious resource.</span></div><div class="line" id="015012"><span class="nick" style="color:#6b8072"><a href="#015012" label="[01:50:12]">&lt;grubles&gt;</a></span><span class="message">:D indeed</span></div><div class="line" id="015038"><span class="nick" style="color:#6b8072"><a href="#015038" label="[01:50:38]">&lt;grubles&gt;</a></span><span class="message">what i meant was i know a guy who tried it and ran into issues</span></div><div class="line" id="015124"><span class="nick" style="color:#6b8072"><a href="#015124" label="[01:51:24]">&lt;grubles&gt;</a></span><span class="message">the guix ppc64be bootstrap looks promising too, since you can run it on a talos ii</span></div><div class="line" id="024854"><span class="nick" style="color:#8dd3c7"><a href="#024854" label="[02:48:54]">&lt;OriansJ&gt;</a></span><span class="message">well all of it is supposed to be promising. we are aiming at sub 512byte bootstraps for all platforms</span></div><div class="line" id="043514"><span class="nick" style="color:#6b8072"><a href="#043514" label="[04:35:14]">&lt;grubles&gt;</a></span><span class="message">yes absolutely</span></div><div class="line" id="071011"><span class="nick" style="color:#80b1d3"><a href="#071011" label="[07:10:11]">&lt;fossy&gt;</a></span><span class="message">yo janneke</span></div><div class="line" id="071024"><span class="nick" style="color:#80b1d3"><a href="#071024" label="[07:10:24]">&lt;fossy&gt;</a></span><span class="message">whats mesboot mean in commencement.scm</span></div><div class="line" id="071042"><span class="nick" style="color:#80b1d3"><a href="#071042" label="[07:10:42]">&lt;fossy&gt;</a></span><span class="message">I see lots of mesboot but dont get it, especially in stages far past mes</span></div><div class="line" id="071111"><span class="nick" style="color:#80b1d3"><a href="#071111" label="[07:11:11]">&lt;fossy&gt;</a></span><span class="message">and whats the purpose of building gcc and binutils twice?</span></div><div class="line" id="071213"><span class="nick" style="color:#6d2462"><a href="#071213" label="[07:12:13]">&lt;janneke&gt;</a></span><span class="message">o/ fossy</span></div><div class="line" id="071220"><span class="nick" style="color:#80b1d3"><a href="#071220" label="[07:12:20]">&lt;fossy&gt;</a></span><span class="message">hi there</span></div><div class="line" id="071308"><span class="nick" style="color:#6d2462"><a href="#071308" label="[07:13:08]">&lt;janneke&gt;</a></span><span class="message">&quot;mesboot&quot; is not much more than a helper to make names/identifiers unique</span></div><div class="line" id="071349"><span class="nick" style="color:#6d2462"><a href="#071349" label="[07:13:49]">&lt;janneke&gt;</a></span><span class="message">before mes, it started with gnu-make-boot0, and diffutils-boot0 via gcc-cross-boot0 to gcc-final (skipping some steps)</span></div><div class="line" id="071446"><span class="nick" style="color:#80b1d3"><a href="#071446" label="[07:14:46]">&lt;fossy&gt;</a></span><span class="message">I see</span></div><div class="line" id="071452"><span class="nick" style="color:#6d2462"><a href="#071452" label="[07:14:52]">&lt;janneke&gt;</a></span><span class="message">so when i needed a name for the various gcc-2.95 and gcc-4.6, i added &quot;mesboot&quot; instead of boot-1 or boot-2 or something</span></div><div class="line" id="071503"><span class="nick" style="color:#6d2462"><a href="#071503" label="[07:15:03]">&lt;janneke&gt;</a></span><span class="message">i'm not 100% happy with the naming!</span></div><div class="line" id="071541"><span class="nick" style="color:#6d2462"><a href="#071541" label="[07:15:41]">&lt;janneke&gt;</a></span><span class="message">there could be several reasons for building packages more than once</span></div><div class="line" id="071602"><span class="nick" style="color:#6d2462"><a href="#071602" label="[07:16:02]">&lt;janneke&gt;</a></span><span class="message">i think we build gcc at least 4 times, and binutils also more than twice?</span></div><div class="line" id="071619"><span class="nick" style="color:#80b1d3"><a href="#071619" label="[07:16:19]">&lt;fossy&gt;</a></span><span class="message">I mean the same version multiple times</span></div><div class="line" id="071657"><span class="nick" style="color:#6d2462"><a href="#071657" label="[07:16:57]">&lt;janneke&gt;</a></span><span class="message">do you mean the -core- variants?</span></div><div class="line" id="071729"><span class="nick" style="color:#80b1d3"><a href="#071729" label="[07:17:29]">&lt;fossy&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="071925"><span class="nick" style="color:#6d2462"><a href="#071925" label="[07:19:25]">&lt;janneke&gt;</a></span><span class="message">so, a full gcc cannot be built without a matching, up to date glibc</span></div><div class="line" id="072012"><span class="nick" style="color:#6d2462"><a href="#072012" label="[07:20:12]">&lt;janneke&gt;</a></span><span class="message">a minimal gcc (--enable-languages=c) =&gt; gcc-core has less dependencies and can be used to build glibc</span></div><div class="line" id="072024"><span class="nick" style="color:#6d2462"><a href="#072024" label="[07:20:24]">&lt;janneke&gt;</a></span><span class="message">this gcc-core+glibc can then build the full gcc</span></div><div class="line" id="072935"><span class="nick" style="color:#80b1d3"><a href="#072935" label="[07:29:35]">&lt;fossy&gt;</a></span><span class="message">ahh</span></div><div class="line" id="073552"><span class="nick" style="color:#6d2462"><a href="#073552" label="[07:35:52]">&lt;janneke&gt;</a></span><span class="message">also, glibc cannot be built by a non-gcc compiler</span></div><div class="line" id="124249"><span class="nick" style="color:#8dd3c7"><a href="#124249" label="[12:42:49]">&lt;OriansJ&gt;</a></span><span class="message">janneke: why not? surely given the effort any C compiler could support the required C features.</span></div><div class="line" id="124436"><span class="nick" style="color:#6d2462"><a href="#124436" label="[12:44:36]">&lt;janneke&gt;</a></span><span class="message">OriansJ: sure, patches thoughtfully considered ;-)</span></div><div class="line" id="153148"><span class="nick" style="color:#8dd3c7"><a href="#153148" label="[15:31:48]">&lt;OriansJ&gt;</a></span><span class="message">janneke: as the goal is to make MesCC able to build GCC directly, wouldn't being able to also build glibc be in scope?</span></div><div class="line" id="181509"><span class="nick" style="color:#234e69"><a href="#181509" label="[18:15:09]">&lt;clemens3&gt;</a></span><span class="message">aehm, stupid question, but I just might as well ask it here.. any thought to the strategy of going back in time to old initial versions? I am just asking, fiddling with Linux From Scratch, and it is mega complex.. but I am thinking about using the latest version, to compile an early version, and then back and back.. but just a thought, I am just scratching the surface..</span></div><div class="line" id="181546"><span class="nick" style="color:#234e69"><a href="#181546" label="[18:15:46]">&lt;clemens3&gt;</a></span><span class="message">but we are just rebuilding, what has been lost, not</span></div><div class="line" id="181620"><span class="nick" style="color:#234e69"><a href="#181620" label="[18:16:20]">&lt;clemens3&gt;</a></span><span class="message">like when the first java compiler compiled its bootstrap version 1 in gcc, and then used javac, now you need to have javac already installed..</span></div><div class="line" id="181640"><span class="nick" style="color:#234e69"><a href="#181640" label="[18:16:40]">&lt;clemens3&gt;</a></span><span class="message">of course, is difficult to impossible as well to compile or even find version 1.0</span></div><div class="line" id="181717"><span class="nick" style="color:#234e69"><a href="#181717" label="[18:17:17]">&lt;clemens3&gt;</a></span><span class="message">but I did nt see this strategy mentioned on the bootstrap wiki of list of stupid ideas:)</span></div><div class="line" id="181730"><span class="nick" style="color:#234e69"><a href="#181730" label="[18:17:30]">&lt;clemens3&gt;</a></span><span class="message">so maybe at least it can go there</span></div><div class="line" id="181858"><span class="nick" style="color:#6d2462"><a href="#181858" label="[18:18:58]">&lt;janneke&gt;</a></span><span class="message">OriansJ: in a way that's in scope, but i'm not sure priority-wise</span></div><div class="line" id="181943"><span class="nick" style="color:#6d2462"><a href="#181943" label="[18:19:43]">&lt;janneke&gt;</a></span><span class="message">clemens3: if you look at gnu guix, it has a uses a scripted version of &quot;linux from scratch&quot;</span></div><div class="line" id="182130"><span class="nick" style="color:#6d2462"><a href="#182130" label="[18:21:30]">&lt;janneke&gt;</a></span><span class="message">here: <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/commencement.scm">http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/commencement.scm</a> </span></div><div class="line" id="182155"><span class="nick" style="color:#234e69"><a href="#182155" label="[18:21:55]">&lt;clemens3&gt;</a></span><span class="message">janneke: lemme see!</span></div><div class="line" id="182217"><span class="nick" style="color:#6d2462"><a href="#182217" label="[18:22:17]">&lt;janneke&gt;</a></span><span class="message">going back in time, step by step, may just be feasible and it's an interesing idea</span></div><div class="line" id="182255"><span class="nick" style="color:#6d2462"><a href="#182255" label="[18:22:55]">&lt;janneke&gt;</a></span><span class="message">my approach has been more pragmatic: try to take the biggest leaps you can</span></div><div class="line" id="182320"><span class="nick" style="color:#6d2462"><a href="#182320" label="[18:23:20]">&lt;janneke&gt;</a></span><span class="message">i did look at gcc-1.40 (earlier versions weren't ported to gnu/linux yet)</span></div><div class="line" id="182341"><span class="nick" style="color:#6d2462"><a href="#182341" label="[18:23:41]">&lt;janneke&gt;</a></span><span class="message">but i found i could build gcc-2.95 right away</span></div><div class="line" id="182407"><span class="nick" style="color:#6d2462"><a href="#182407" label="[18:24:07]">&lt;janneke&gt;</a></span><span class="message">building all versions of gcc-1.40 ... 2.95 could be interesting, but currently not very practical (read: terrbly time-consuming)</span></div><div class="line" id="182429"><span class="nick" style="color:#234e69"><a href="#182429" label="[18:24:29]">&lt;clemens3&gt;</a></span><span class="message">yes</span></div><div class="line" id="182432"><span class="nick" style="color:#6d2462"><a href="#182432" label="[18:24:32]">&lt;janneke&gt;</a></span><span class="message">and then there's all user tools, awk, bash, coreutils, grep, sed, ...</span></div><div class="line" id="182436"><span class="nick" style="color:#6d2462"><a href="#182436" label="[18:24:36]">&lt;janneke&gt;</a></span><span class="message">but it's a fun idea</span></div><div class="line" id="182501"><span class="nick" style="color:#234e69"><a href="#182501" label="[18:25:01]">&lt;clemens3&gt;</a></span><span class="message">basically the work has been done, just so much layers (garbage) on top.. know how (how to get started) got lost again</span></div><div class="line" id="182511"><span class="nick" style="color:#234e69"><a href="#182511" label="[18:25:11]">&lt;clemens3&gt;</a></span><span class="message">it all worked once..</span></div><div class="line" id="182523"><span class="nick" style="color:#234e69"><a href="#182523" label="[18:25:23]">&lt;clemens3&gt;</a></span><span class="message">but either way, it is a long road back</span></div><div class="line" id="182531"><span class="nick" style="color:#6d2462"><a href="#182531" label="[18:25:31]">&lt;janneke&gt;</a></span><span class="message">yes...if you could just &quot;extract&quot; those shell scripts from history, we would be &quot;done&quot;</span></div><div class="line" id="182615"><span class="nick" style="color:#234e69"><a href="#182615" label="[18:26:15]">&lt;clemens3&gt;</a></span><span class="message">projects like crystal, rustc, golang, they are so proud to cut off their bootstrap/gcc roots</span></div><div class="line" id="182644"><span class="nick" style="color:#6d2462"><a href="#182644" label="[18:26:44]">&lt;janneke&gt;</a></span><span class="message">yeah, &quot;children&quot;</span></div><div class="line" id="182708"><span class="nick" style="color:#234e69"><a href="#182708" label="[18:27:08]">&lt;clemens3&gt;</a></span><span class="message">even java did it (thought must have been very late in the game, not when I used it)</span></div><div class="line" id="182803"><span class="nick" style="color:#234e69"><a href="#182803" label="[18:28:03]">&lt;clemens3&gt;</a></span><span class="message">so the gcc-1.40 is interesting.. needs an old slackware floppy somewhere</span></div><div class="line" id="182938"><span class="nick" style="color:#6d2462"><a href="#182938" label="[18:29:38]">&lt;janneke&gt;</a></span><span class="message">correcion: gcc-1.42</span></div><div class="line" id="182945"><span class="nick" style="color:#6d2462"><a href="#182945" label="[18:29:45]">&lt;janneke&gt;</a></span><span class="message">(don't remember why)</span></div><div class="line" id="183020"><span class="nick" style="color:#6d2462"><a href="#183020" label="[18:30:20]">&lt;janneke&gt;</a></span><span class="message">i think gcc-0.9 was the first release</span></div><div class="line" id="184547"><span class="nick" style="color:#8dd3c7"><a href="#184547" label="[18:45:47]">&lt;OriansJ&gt;</a></span><span class="message">clemens3: not all software is worth the effort to resurrect</span></div><div class="line" id="184757"><span class="nick" style="color:#8dd3c7"><a href="#184757" label="[18:47:57]">&lt;OriansJ&gt;</a></span><span class="message">janneke: completely fair; probably far down on the list.</span></div><div class="line" id="184837"><span class="nick" style="color:#8dd3c7"><a href="#184837" label="[18:48:37]">&lt;OriansJ&gt;</a></span><span class="message">clemens3: at the same time, why rebuild garbage when you can have something worth keeping.</span></div><div class="line" id="190050"><span class="nick" style="color:#6d2462"><a href="#190050" label="[19:00:50]">&lt;janneke&gt;</a></span><span class="message">clemens3: yes, what OriansJ says: about garbage</span></div><div class="line" id="190144"><span class="nick" style="color:#6d2462"><a href="#190144" label="[19:01:44]">&lt;janneke&gt;</a></span><span class="message">the difference between software archeology (walking the old path) and bootstrapping, as i see it, is that we want a sweet, maintainable software stack, &quot;now&quot;</span></div><div class="line" id="190211"><span class="nick" style="color:#6d2462"><a href="#190211" label="[19:02:11]">&lt;janneke&gt;</a></span><span class="message">so, we want to rebuild &quot;world&quot; using maintainable and actually maintained software</span></div><div class="line" id="190232"><span class="nick" style="color:#6d2462"><a href="#190232" label="[19:02:32]">&lt;janneke&gt;</a></span><span class="message">if using historical versions (gcc-2.95) can get us there today...we'll use it</span></div><div class="line" id="190318"><span class="nick" style="color:#6d2462"><a href="#190318" label="[19:03:18]">&lt;janneke&gt;</a></span><span class="message">however, as gcc-2.95 is not really maintained (maintainable is open for discussion)</span></div><div class="line" id="190343"><span class="nick" style="color:#6d2462"><a href="#190343" label="[19:03:43]">&lt;janneke&gt;</a></span><span class="message">we either want to replace it (or find a true maintainer: much less desirable)</span></div><div class="line" id="195310"><span class="nick" style="color:#8dd3c7"><a href="#195310" label="[19:53:10]">&lt;OriansJ&gt;</a></span><span class="message">as all software rots; not in the well walked parts of a programing language but in the edges were few go. In those points programs break and die. Unspecified behavior being depended upon changing with time and optimizations. Thus we must a much more careful path. One that will survive through the ages.</span></div><div class="line" id="195326"><span class="nick" style="color:#6c3d55"><a href="#195326" label="[19:53:26]">&lt;xentrac&gt;</a></span><span class="message">concur</span></div><div class="line" id="214721"><span class="nick" style="color:#80b1d3"><a href="#214721" label="[21:47:21]">&lt;fossy&gt;</a></span><span class="message">interesting idea for kernel: minix 1.0's kernel ported to M2-Planet</span></div><div class="line" id="221855"><span class="nick" style="color:#8dd3c7"><a href="#221855" label="[22:18:55]">&lt;OriansJ&gt;</a></span><span class="message">fossy: honestly any posix kernel ported to M2-Planet solves the kernel bootstrap problem entirely</span></div><div class="line" id="221922"><span class="nick" style="color:#80b1d3"><a href="#221922" label="[22:19:22]">&lt;fossy&gt;</a></span><span class="message">well I might try minix</span></div><div class="line" id="221926"><span class="nick" style="color:#80b1d3"><a href="#221926" label="[22:19:26]">&lt;fossy&gt;</a></span><span class="message">its only 5k loc</span></div><div class="line" id="222025"><span class="nick" style="color:#8dd3c7"><a href="#222025" label="[22:20:25]">&lt;OriansJ&gt;</a></span><span class="message">well line counts are a really bad metric for the complexity of a program</span></div><div class="line" id="222108"><span class="nick" style="color:#80b1d3"><a href="#222108" label="[22:21:08]">&lt;fossy&gt;</a></span><span class="message">fwiw I agree with OriansJ and janneke, using old versions in the meantime is... undesirable but nessrcary, but I really think maintaining or removing them is important in the long run</span></div><div class="line" id="222109"><span class="nick" style="color:#8dd3c7"><a href="#222109" label="[22:21:09]">&lt;OriansJ&gt;</a></span><span class="message">and xv6 might also be an easier job as it is designed to be understood by students</span></div><div class="line" id="222118"><span class="nick" style="color:#80b1d3"><a href="#222118" label="[22:21:18]">&lt;fossy&gt;</a></span><span class="message">true</span></div><div class="line" id="222132"><span class="nick" style="color:#80b1d3"><a href="#222132" label="[22:21:32]">&lt;fossy&gt;</a></span><span class="message">I havent heard of xv6</span></div><div class="line" id="222139"><span class="nick" style="color:#80b1d3"><a href="#222139" label="[22:21:39]">&lt;fossy&gt;</a></span><span class="message">I will look into that one</span></div><div class="line" id="222249"><span class="nick" style="color:#80b1d3"><a href="#222249" label="[22:22:49]">&lt;fossy&gt;</a></span><span class="message">OriansJ: are there any guides on M1, is it a prexisting langauge, or did you make it? Cant find much on it... I will most likely need to be using M1 for the assembly in this</span></div><div class="line" id="222317"><span class="nick" style="color:#8dd3c7"><a href="#222317" label="[22:23:17]">&lt;OriansJ&gt;</a></span><span class="message">fossy: M1 is assembly language you can define for yourself</span></div><div class="line" id="222328"><span class="nick" style="color:#80b1d3"><a href="#222328" label="[22:23:28]">&lt;fossy&gt;</a></span><span class="message">Interesting</span></div><div class="line" id="222345"><span class="nick" style="color:#80b1d3"><a href="#222345" label="[22:23:45]">&lt;fossy&gt;</a></span><span class="message">I guess thats what the libc-*.M1's are, defines</span></div><div class="line" id="222355"><span class="nick" style="color:#8dd3c7"><a href="#222355" label="[22:23:55]">&lt;OriansJ&gt;</a></span><span class="message">literally it supports the bare minimal subset of functionality required for an assembler (line macros, strings and hex literals)</span></div><div class="line" id="222445"><span class="nick" style="color:#8dd3c7"><a href="#222445" label="[22:24:45]">&lt;OriansJ&gt;</a></span><span class="message">those are actually in the files like x86_defs.M1 and amd64_defs.M1</span></div><div class="line" id="222453"><span class="nick" style="color:#80b1d3"><a href="#222453" label="[22:24:53]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="222550"><span class="nick" style="color:#8dd3c7"><a href="#222550" label="[22:25:50]">&lt;OriansJ&gt;</a></span><span class="message">the libc-core.M1 are just the _start functions required to setup the stack and call FUNCTION_main</span></div><div class="line" id="222632"><span class="nick" style="color:#8dd3c7"><a href="#222632" label="[22:26:32]">&lt;OriansJ&gt;</a></span><span class="message">So you can define any instruction you want, any way that you want in M1</span></div><div class="line" id="222835"><span class="nick" style="color:#8dd3c7"><a href="#222835" label="[22:28:35]">&lt;OriansJ&gt;</a></span><span class="message">to figure out what you need for M1 defines rasm2 (rasm2 -a x86 -b 32 -d '8901') is very helpful</span></div><div class="line" id="222924"><span class="nick" style="color:#6c3d55"><a href="#222924" label="[22:29:24]">&lt;xentrac&gt;</a></span><span class="message">minix is also designed to be understood by students.  minix3 is supposedly pretty decent</span></div><div class="line" id="222954"><span class="nick" style="color:#8dd3c7"><a href="#222954" label="[22:29:54]">&lt;OriansJ&gt;</a></span><span class="message">as you probably want to have as little assembly as possible if you wish for the kernel to be portable.</span></div><div class="line" id="223019"><span class="nick" style="color:#8dd3c7"><a href="#223019" label="[22:30:19]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well microkernels come with other sorts of problems</span></div><div class="line" id="223101"><span class="nick" style="color:#8dd3c7"><a href="#223101" label="[22:31:01]">&lt;OriansJ&gt;</a></span><span class="message">and monolithic kernels do have development advantages in the short term.</span></div><div class="line" id="223712"><span class="nick" style="color:#6c3d55"><a href="#223712" label="[22:37:12]">&lt;xentrac&gt;</a></span><span class="message">not sure, this isn't 1991</span></div><div class="line" id="223756"><span class="nick" style="color:#6c3d55"><a href="#223756" label="[22:37:56]">&lt;xentrac&gt;</a></span><span class="message">the decisive disadvantage for microkernels historically has been the worse performance due to the larger number of context switches</span></div><div class="line" id="223820"><span class="nick" style="color:#6c3d55"><a href="#223820" label="[22:38:20]">&lt;xentrac&gt;</a></span><span class="message">L4 got that down to an extremely small difference, but in the wake of Spectre the gap has grown again</span></div><div class="line" id="223837"><span class="nick" style="color:#6c3d55"><a href="#223837" label="[22:38:37]">&lt;xentrac&gt;</a></span><span class="message">but in any case it isn't relevant</span></div><div class="line" id="223927"><span class="nick" style="color:#d9d9d9"><a href="#223927" label="[22:39:27]">&lt;civodul&gt;</a></span><span class="message">if you look at the big picture, D-Bus RPC is not exactly efficient :-)</span></div><div class="line" id="224056"><span class="nick" style="color:#6c3d55"><a href="#224056" label="[22:40:56]">&lt;xentrac&gt;</a></span><span class="message">strong concur</span></div><div class="line" id="224115"><span class="nick" style="color:#6c3d55"><a href="#224115" label="[22:41:15]">&lt;xentrac&gt;</a></span><span class="message">but L4 is worlds better than, say, Mach</span></div><div class="line" id="224315"><span class="nick" style="color:#8dd3c7"><a href="#224315" label="[22:43:15]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I was referring to the bugs found while hurd was being written but you are correct in regards to performance properties.</span></div><div class="line" id="224405"><span class="nick" style="color:#8dd3c7"><a href="#224405" label="[22:44:05]">&lt;OriansJ&gt;</a></span><span class="message">as RMS himself has previously spoken about the greater difficulty writing a microkernel relative to a monolithic kernel.</span></div><div class="line" id="224418"><span class="nick" style="color:#6c3d55"><a href="#224418" label="[22:44:18]">&lt;xentrac&gt;</a></span><span class="message">right, but he hasn't written either one himself</span></div><div class="line" id="224449"><span class="nick" style="color:#6c3d55"><a href="#224449" label="[22:44:49]">&lt;xentrac&gt;</a></span><span class="message">he's relating his understanding of mib's experience</span></div><div class="line" id="224449"><span class="nick" style="color:#8dd3c7"><a href="#224449" label="[22:44:49]">&lt;OriansJ&gt;</a></span><span class="message">he attempted to build a proper OS upon mach, which might have been a bad plan</span></div><div class="line" id="224500"><span class="nick" style="color:#6c3d55"><a href="#224500" label="[22:45:00]">&lt;xentrac&gt;</a></span><span class="message">and mib probably wasn't the right man for the job</span></div><div class="line" id="224501"><span class="nick" style="color:#6c3d55"><a href="#224501" label="[22:45:01]">&lt;xentrac&gt;</a></span><span class="message">also</span></div><div class="line" id="224534"><span class="nick" style="color:#6c3d55"><a href="#224534" label="[22:45:34]">&lt;xentrac&gt;</a></span><span class="message">in general debugging a distributed system is harder than debugging a single-threaded program, and sometimes harder than debugging a multithreaded program, but we know a *lot* more about debugging distributed systems in 2020 than we did in 1997</span></div><div class="line" id="224558"><span class="nick" style="color:#8dd3c7"><a href="#224558" label="[22:45:58]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: we have no &quot;right men&quot; here, only people who find certain problems fun.</span></div><div class="line" id="224754"><span class="nick" style="color:#d9d9d9"><a href="#224754" label="[22:47:54]">&lt;civodul&gt;</a></span><span class="message">i don't think it's for fun</span></div><div class="line" id="224819"><span class="nick" style="color:#d9d9d9"><a href="#224819" label="[22:48:19]">&lt;civodul&gt;</a></span><span class="message">the Mes-related work integrated in Guix is a huge step forward</span></div><div class="line" id="224909"><span class="nick" style="color:#8dd3c7"><a href="#224909" label="[22:49:09]">&lt;OriansJ&gt;</a></span><span class="message">civodul: yes, janneke has done alot of amazing work in regards to improving the guix bootstrap.</span></div><div class="line" id="225026"><span class="nick" style="color:#d9d9d9"><a href="#225026" label="[22:50:26]">&lt;civodul&gt;</a></span><span class="message">i mean there certainly is fun, but there's also a technical/social motivation :-)</span></div><div class="line" id="225028"><span class="nick" style="color:#8dd3c7"><a href="#225028" label="[22:50:28]">&lt;OriansJ&gt;</a></span><span class="message">the gash work and the gash-utils really took a byte out of the bootstrap binary size.</span></div><div class="line" id="225247"><span class="nick" style="color:#6c3d55"><a href="#225247" label="[22:52:47]">&lt;xentrac&gt;</a></span><span class="message">yeah, that was awesome</span></div><div class="line" id="225400"><span class="nick" style="color:#8dd3c7"><a href="#225400" label="[22:54:00]">&lt;OriansJ&gt;</a></span><span class="message">with some more effort janneke will get guix down to just guile (thanks to dddddd finishing slow-utils soonish [I hope])</span></div><div class="line" id="225459"><span class="nick" style="color:#8dd3c7"><a href="#225459" label="[22:54:59]">&lt;OriansJ&gt;</a></span><span class="message">and then all that remains is getting mes-m2 into fighting form to bootstrap guile, run MesCC and solve this bootstrap problem.</span></div><div class="line" id="225842"><span class="nick" style="color:#8dd3c7"><a href="#225842" label="[22:58:42]">&lt;OriansJ&gt;</a></span><span class="message">building a working, garbage collecting, compacting lisp in M2-Planet was easy but getting it to full form to solve the final bit is going to be rough.</span></div><div class="line" id="230159"><span class="nick" style="color:#8dd3c7"><a href="#230159" label="[23:01:59]">&lt;OriansJ&gt;</a></span><span class="message">Plus I have ports to armv7l and AArch64 to do for mescc-tools-seed (not to mention port work to powerpc and risc-v if we want this all universal)</span></div><div class="line" id="230241"><span class="nick" style="color:#80b1d3"><a href="#230241" label="[23:02:41]">&lt;fossy&gt;</a></span><span class="message">OriansJ: that is something I plan to work on in the near future</span></div><div class="line" id="230431"><span class="nick" style="color:#80b1d3"><a href="#230431" label="[23:04:31]">&lt;fossy&gt;</a></span><span class="message">gash-core-utils is marvellous</span></div><div class="line" id="230655"><span class="nick" style="color:#8dd3c7"><a href="#230655" label="[23:06:55]">&lt;OriansJ&gt;</a></span><span class="message">fossy: Timothy Sample really did alot of heavy lifting in that and Rutger van Beusekom really sparked the merger that formed gash</span></div><div class="line" id="230719"><span class="nick" style="color:#80b1d3"><a href="#230719" label="[23:07:19]">&lt;fossy&gt;</a></span><span class="message">Nice</span></div><div class="line" id="230809"><span class="nick" style="color:#8dd3c7"><a href="#230809" label="[23:08:09]">&lt;OriansJ&gt;</a></span><span class="message">wished they would visit here and get more praise for thier hard work as they share their successes but it is ultimately their choices.</span></div><div class="line" id="235340"><span class="nick" style="color:#2e2a4a"><a href="#235340" label="[23:53:40]">&lt;dddddd&gt;</a></span><span class="message">Hi, booters.</span></div><div class="line" id="235355"><span class="nick" style="color:#2e2a4a"><a href="#235355" label="[23:53:55]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, define soonish (;</span></div><div class="line" id="235527"><span class="nick" style="color:#2e2a4a"><a href="#235527" label="[23:55:27]">&lt;dddddd&gt;</a></span><span class="message">I can rush and throw something to the wall if that matters.</span></div><div class="line" id="235612"><span class="nick" style="color:#2e2a4a"><a href="#235612" label="[23:56:12]">&lt;dddddd&gt;</a></span><span class="message">It's mostly working for some time now.</span></div><div class="line" id="235701"><span class="nick" style="color:#2e2a4a"><a href="#235701" label="[23:57:01]">&lt;dddddd&gt;</a></span><span class="message">Are we removing the knight padding yet?</span></div><div class="line" id="235853"><span class="nick" style="color:#2e2a4a"><a href="#235853" label="[23:58:53]">&lt;dddddd&gt;</a></span><span class="message">Also, note that I'm completing M1.scm, as I understood the rest of slow-utils is working. Correct me if I'm wrong.</span></div><br /></div></body></html>