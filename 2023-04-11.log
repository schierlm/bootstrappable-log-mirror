<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="034651"><span class="nick" style="color:#389600"><a href="#034651" label="[03:46:51]">&lt;fossy&gt;</a></span><span class="message">rickmasters: i'll give it a look today &amp; merge if it's all good :)</span></div><div class="line" id="045943"><span class="nick" style="color:#8dd3c7"><a href="#045943" label="[04:59:43]">&lt;nektro&gt;</a></span><span class="message">is there any work being done on bootstrapping ruby? building from git master requires ruby and guix pulls from tarball</span></div><div class="line" id="050617"><span class="nick" style="color:#2e2a4a"><a href="#050617" label="[05:06:17]">&lt;muurkha&gt;</a></span><span class="message">h0rror: your connection is bouncing</span></div><div class="line" id="064659"><span class="nick" style="color:#8dd3c7"><a href="#064659" label="[06:46:59]">&lt;nektro&gt;</a></span><span class="message">oh i see the mention of miniruby now</span></div><div class="line" id="072902"><span class="nick" style="color:#389600"><a href="#072902" label="[07:29:02]">&lt;fossy&gt;</a></span><span class="message">its in haskell thouhg -.-</span></div><div class="line" id="072948"><span class="nick" style="color:#389600"><a href="#072948" label="[07:29:48]">&lt;fossy&gt;</a></span><span class="message">well one of the many minirubys is lol</span></div><div class="line" id="074705"><span class="nick" style="color:#6b8072"><a href="#074705" label="[07:47:05]">&lt;sam_&gt;</a></span><span class="message">there's mruby (which is C)</span></div><div class="line" id="074713"><span class="nick" style="color:#6b8072"><a href="#074713" label="[07:47:13]">&lt;sam_&gt;</a></span><span class="message">there's miniruby which is in MRI's source, no idea what that is</span></div><div class="line" id="074749"><span class="nick" style="color:#389600"><a href="#074749" label="[07:47:49]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="074919"><span class="nick" style="color:#8dd3c7"><a href="#074919" label="[07:49:19]">&lt;nektro&gt;</a></span><span class="message">doing `make miniruby` ran me into the same error as before anyways so im asking in the ruby community for build help</span></div><div class="line" id="123450"><span class="nick" style="color:#389600"><a href="#123450" label="[12:34:50]">&lt;fossy&gt;</a></span><span class="message">ok, merging kernel bootstrap :D</span></div><div class="line" id="124025"><span class="nick" style="color:#80b1d3"><a href="#124025" label="[12:40:25]">&lt;rickmasters&gt;</a></span><span class="message">fossy: Thank you! Although I still have a lot of work to do it's a huge milestone.</span></div><div class="line" id="124112"><span class="nick" style="color:#80b1d3"><a href="#124112" label="[12:41:12]">&lt;rickmasters&gt;</a></span><span class="message">Now I won't have to maintain a separate fork on my own.</span></div><div class="line" id="124241"><span class="nick" style="color:#389600"><a href="#124241" label="[12:42:41]">&lt;fossy&gt;</a></span><span class="message">I was looking at the HDD issue in Fiwix repo. glad to see progress on that!</span></div><div class="line" id="124303"><span class="nick" style="color:#80b1d3"><a href="#124303" label="[12:43:03]">&lt;rickmasters&gt;</a></span><span class="message">Besides finishing Fiwix to Linux transition I'd like to improve the performance of the initial stage of loading the source.</span></div><div class="line" id="124410"><span class="nick" style="color:#80b1d3"><a href="#124410" label="[12:44:10]">&lt;rickmasters&gt;</a></span><span class="message">fossy: Yes, there have been breakthroughs on that in the last couple of days.</span></div><div class="line" id="124858"><span class="nick" style="color:#80b1d3"><a href="#124858" label="[12:48:58]">&lt;rickmasters&gt;</a></span><span class="message">I'm not sure if I'll keep working on that or move on to Linux transition next.</span></div><div class="line" id="125019"><span class="nick" style="color:#389600"><a href="#125019" label="[12:50:19]">&lt;fossy&gt;</a></span><span class="message">whichever interests  you more at the moment, im excited for both in their time :)</span></div><div class="line" id="125934"><span class="nick" style="color:#80b1d3"><a href="#125934" label="[12:59:34]">&lt;rickmasters&gt;</a></span><span class="message">fossy: by the way, I'll redo the help2man PR now. I was holding off to avoid a conflict with the kernel bootstrap PR.</span></div><div class="line" id="130310"><span class="nick" style="color:#389600"><a href="#130310" label="[13:03:10]">&lt;fossy&gt;</a></span><span class="message">sounds good</span></div><div class="line" id="130906"><span class="nick" style="color:#6d2462"><a href="#130906" label="[13:09:06]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: maybe we should submit kernel seed to bootstrap-seeds repo that oriansj maintains?</span></div><div class="line" id="130940"><span class="nick" style="color:#6d2462"><a href="#130940" label="[13:09:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Now building boot image only works on x86/amd64 systems</span></div><div class="line" id="130956"><span class="nick" style="color:#6d2462"><a href="#130956" label="[13:09:56]">&lt;stikonas[m]&gt;</a></span><span class="message">As we run hex0-seed in image preparation stage</span></div><div class="line" id="131158"><span class="nick" style="color:#6d2462"><a href="#131158" label="[13:11:58]">&lt;stikonas[m]&gt;</a></span><span class="message">(Quick fix might be calling arch dependant hex0 binary rather than x86)</span></div><div class="line" id="131246"><span class="nick" style="color:#80b1d3"><a href="#131246" label="[13:12:46]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm fine with that. I thought &quot;compiling&quot; the seed seemed more bootstrappy.</span></div><div class="line" id="131311"><span class="nick" style="color:#80b1d3"><a href="#131311" label="[13:13:11]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm not sure what you mean re: arch dependant hex0 binary rather than x86</span></div><div class="line" id="131414"><span class="nick" style="color:#6d2462"><a href="#131414" label="[13:14:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Say I have aarch64 machine</span></div><div class="line" id="131429"><span class="nick" style="color:#6d2462"><a href="#131429" label="[13:14:29]">&lt;stikonas[m]&gt;</a></span><span class="message">And I want to bootstrap my new x86 pc</span></div><div class="line" id="131540"><span class="nick" style="color:#80b1d3"><a href="#131540" label="[13:15:40]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, I see</span></div><div class="line" id="131653"><span class="nick" style="color:#80b1d3"><a href="#131653" label="[13:16:53]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, that almost seems like a bug, if live-bootstrap is supposed to be arch independent</span></div><div class="line" id="131741"><span class="nick" style="color:#6d2462"><a href="#131741" label="[13:17:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Running rootfs.py to create builder  hex0 image won't work due to call to x86/hex0-seed</span></div><div class="line" id="131800"><span class="nick" style="color:#6d2462"><a href="#131800" label="[13:18:00]">&lt;stikonas[m]&gt;</a></span><span class="message">It's something to think about</span></div><div class="line" id="131815"><span class="nick" style="color:#6d2462"><a href="#131815" label="[13:18:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Not sure what's the best way of dealing with it</span></div><div class="line" id="131846"><span class="nick" style="color:#6d2462"><a href="#131846" label="[13:18:46]">&lt;stikonas[m]&gt;</a></span><span class="message">rootfs.py is not really bootstrap yet, it's just helper to prepare image</span></div><div class="line" id="131918"><span class="nick" style="color:#6d2462"><a href="#131918" label="[13:19:18]">&lt;stikonas[m]&gt;</a></span><span class="message">(As manually creating any image on modern media is basically impossible)</span></div><div class="line" id="132023"><span class="nick" style="color:#80b1d3"><a href="#132023" label="[13:20:23]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I see what you mean. It would be easy to use args.arch to parameterize that seed or compilation.</span></div><div class="line" id="132057"><span class="nick" style="color:#80b1d3"><a href="#132057" label="[13:20:57]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Or is that the target arch?</span></div><div class="line" id="132102"><span class="nick" style="color:#6d2462"><a href="#132102" label="[13:21:02]">&lt;stikonas[m]&gt;</a></span><span class="message">args.arch is target</span></div><div class="line" id="132109"><span class="nick" style="color:#6d2462"><a href="#132109" label="[13:21:09]">&lt;stikonas[m]&gt;</a></span><span class="message">I think we need native</span></div><div class="line" id="132145"><span class="nick" style="color:#6d2462"><a href="#132145" label="[13:21:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Which I guess is uname call</span></div><div class="line" id="132203"><span class="nick" style="color:#80b1d3"><a href="#132203" label="[13:22:03]">&lt;rickmasters&gt;</a></span><span class="message">Ok, well args.arch could select a binary seed so maybe that's why we should just use a binary seed?</span></div><div class="line" id="132211"><span class="nick" style="color:#6d2462"><a href="#132211" label="[13:22:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, fundamentally kernel is a bootstrap seed...</span></div><div class="line" id="132245"><span class="nick" style="color:#6d2462"><a href="#132245" label="[13:22:45]">&lt;stikonas[m]&gt;</a></span><span class="message">So maybe we just use it</span></div><div class="line" id="132311"><span class="nick" style="color:#6d2462"><a href="#132311" label="[13:23:11]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: should we add it to your repo?</span></div><div class="line" id="132357"><span class="nick" style="color:#80b1d3"><a href="#132357" label="[13:23:57]">&lt;rickmasters&gt;</a></span><span class="message">And I'd be able to get rid of the kernel-bootstrap directory</span></div><div class="line" id="132553"><span class="nick" style="color:#80b1d3"><a href="#132553" label="[13:25:53]">&lt;rickmasters&gt;</a></span><span class="message">I'm hoping to reduce the seed to one sector by using builder-hex0-mini as the starting seed but it needs changes to avoid a reboot.</span></div><div class="line" id="132945"><span class="nick" style="color:#6d2462"><a href="#132945" label="[13:29:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, perhaps we can sort this native arch issue later when you go for mini seed</span></div><div class="line" id="133107"><span class="nick" style="color:#80b1d3"><a href="#133107" label="[13:31:07]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: And if we're putting the binary seed in a stage0 related repo then the source probably belongs in a related repo (which I'm fine with if oriansj is)</span></div><div class="line" id="133123"><span class="nick" style="color:#389600"><a href="#133123" label="[13:31:23]">&lt;fossy&gt;</a></span><span class="message">isnt there source hex0 in bootstrap-seeds anyways</span></div><div class="line" id="133218"><span class="nick" style="color:#6d2462"><a href="#133218" label="[13:32:18]">&lt;stikonas[m]&gt;</a></span><span class="message">There is</span></div><div class="line" id="133243"><span class="nick" style="color:#80b1d3"><a href="#133243" label="[13:32:43]">&lt;rickmasters&gt;</a></span><span class="message">yeah, I guess its the same repo</span></div><div class="line" id="133332"><span class="nick" style="color:#80b1d3"><a href="#133332" label="[13:33:32]">&lt;rickmasters&gt;</a></span><span class="message">It's a little confusing, the source is in more than one place</span></div><div class="line" id="133419"><span class="nick" style="color:#80b1d3"><a href="#133419" label="[13:34:19]">&lt;rickmasters&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86">https://github.com/oriansj/stage0-posix-x86</a>  and and <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds">https://github.com/oriansj/bootstrap-seeds</a> </span></div><div class="line" id="141451"><span class="nick" style="color:#6d2462"><a href="#141451" label="[14:14:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, a bit confusing though having just binaries without source in the repo is also bad</span></div><div class="line" id="143005"><span class="nick" style="color:#234e69"><a href="#143005" label="[14:30:05]">&lt;aggi&gt;</a></span><span class="message">not important, just crossed my mind, once i arrive at bootstrapping from the hex0 seed, i'll consider writing the scriping as posix shell</span></div><div class="line" id="143034"><span class="nick" style="color:#234e69"><a href="#143034" label="[14:30:34]">&lt;aggi&gt;</a></span><span class="message">just because, python got issues, when a posix shell may be easier to handle, or lua</span></div><div class="line" id="143256"><span class="nick" style="color:#234e69"><a href="#143256" label="[14:32:56]">&lt;aggi&gt;</a></span><span class="message">i'll have to debug tcc-compiler/jit-compilation of linux kernel first, because all available test-setups error-out</span></div><div class="line" id="143442"><span class="nick" style="color:#234e69"><a href="#143442" label="[14:34:42]">&lt;aggi&gt;</a></span><span class="message">AoT-compiled linux-2.4/tcc-0.9.[any] panics; and JIT-compiled linux-2.4/tccboot-0.9.22 errors during compilation phase; debugging either is difficult</span></div><div class="line" id="143609"><span class="nick" style="color:#234e69"><a href="#143609" label="[14:36:09]">&lt;aggi&gt;</a></span><span class="message">and i'll try to avoid latest tcc-versions which require a tad too many libc-symbols/headers</span></div><div class="line" id="143725"><span class="nick" style="color:#234e69"><a href="#143725" label="[14:37:25]">&lt;aggi&gt;</a></span><span class="message">tcc-0.9.27 is affected by this already; don't know which version bootstrappable aimed at, and if any which libc was supposed to be linked against</span></div><div class="line" id="144206"><span class="nick" style="color:#234e69"><a href="#144206" label="[14:42:06]">&lt;aggi&gt;</a></span><span class="message">(original) tccboot/tcc-version seems to be a relevant piece to bootstrapping in this context, because it's dependencies are minimal, to compile, load and execute a kernel (if i manage to repair it)</span></div><div class="line" id="161421"><span class="nick" style="color:#6c3d55"><a href="#161421" label="[16:14:21]">&lt;avih&gt;</a></span><span class="message">aggi: if you want sh help or review, ping me, i like sh.</span></div><div class="line" id="175159"><span class="nick" style="color:#2e2a4a"><a href="#175159" label="[17:51:59]">&lt;muurkha&gt;</a></span><span class="message">the POSIX shell has a lot of problems but it's probably fine for this</span></div><div class="line" id="180643"><span class="nick" style="color:#6d2462"><a href="#180643" label="[18:06:43]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not python there that has issues, the same issue would be with shell</span></div><div class="line" id="180658"><span class="nick" style="color:#6d2462"><a href="#180658" label="[18:06:58]">&lt;stikonas[m]&gt;</a></span><span class="message">If you try to run e.g. x86 binary on arm</span></div><div class="line" id="180828"><span class="nick" style="color:#6d2462"><a href="#180828" label="[18:08:28]">&lt;stikonas[m]&gt;</a></span><span class="message">the issue I guess is that bootstrap seeds are just seeds, we shouldn't rebuild them during preparation stage</span></div><div class="line" id="183141"><span class="nick" style="color:#234e69"><a href="#183141" label="[18:31:41]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: why would anyone try to execute x86 binary on arm?</span></div><div class="line" id="183236"><span class="nick" style="color:#234e69"><a href="#183236" label="[18:32:36]">&lt;aggi&gt;</a></span><span class="message">otherwise, a clean cross-compile of python is one such issue</span></div><div class="line" id="183332"><span class="nick" style="color:#6d2462"><a href="#183332" label="[18:33:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, rickmasters script just tries to run hardcoded x86/hex0-seed</span></div><div class="line" id="183343"><span class="nick" style="color:#234e69"><a href="#183343" label="[18:33:43]">&lt;aggi&gt;</a></span><span class="message">clean, by definition, avoiding qemu-user for cross-compilation for example, and not poisoning build-host and build-target with each other</span></div><div class="line" id="183427"><span class="nick" style="color:#6d2462"><a href="#183427" label="[18:34:27]">&lt;stikonas[m]&gt;</a></span><span class="message">To build builder-hex0 from source</span></div><div class="line" id="183536"><span class="nick" style="color:#6d2462"><a href="#183536" label="[18:35:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, it's not really a bootstrap issue, just a question of how to prepare bootstrap image</span></div><div class="line" id="183547"><span class="nick" style="color:#234e69"><a href="#183547" label="[18:35:47]">&lt;aggi&gt;</a></span><span class="message">well</span></div><div class="line" id="183621"><span class="nick" style="color:#6d2462"><a href="#183621" label="[18:36:21]">&lt;stikonas[m]&gt;</a></span><span class="message">If you do it on paper tape, you would have neither bash nor python...</span></div><div class="line" id="183635"><span class="nick" style="color:#6d2462"><a href="#183635" label="[18:36:35]">&lt;stikonas[m]&gt;</a></span><span class="message">And it will also take ages...</span></div><div class="line" id="183640"><span class="nick" style="color:#234e69"><a href="#183640" label="[18:36:40]">&lt;aggi&gt;</a></span><span class="message">yes</span></div><div class="line" id="183655"><span class="nick" style="color:#234e69"><a href="#183655" label="[18:36:55]">&lt;aggi&gt;</a></span><span class="message">question is, where the bootstrapping hooks into</span></div><div class="line" id="183730"><span class="nick" style="color:#234e69"><a href="#183730" label="[18:37:30]">&lt;aggi&gt;</a></span><span class="message">since bootstrappable avoids, most, hardware development related issues, the choice of tools and platform is less critical</span></div><div class="line" id="183758"><span class="nick" style="color:#234e69"><a href="#183758" label="[18:37:58]">&lt;aggi&gt;</a></span><span class="message">a z80/FuzixOS (16bit unix), gigatron ttl etc. begin elsewhere, including hardware</span></div><div class="line" id="183849"><span class="nick" style="color:#234e69"><a href="#183849" label="[18:38:49]">&lt;aggi&gt;</a></span><span class="message">z80 is known for deployment to fpga, gigatron may be, and for x86 there is ao486 (which requires undesireable tooling in comparison to z80)</span></div><div class="line" id="183939"><span class="nick" style="color:#234e69"><a href="#183939" label="[18:39:39]">&lt;aggi&gt;</a></span><span class="message">and if you look at z80, the main compiler for this is SDCC, which is written in c++</span></div><div class="line" id="183958"><span class="nick" style="color:#234e69"><a href="#183958" label="[18:39:58]">&lt;aggi&gt;</a></span><span class="message">that's why, backtracking, reaches as far as tiny basic paper tape</span></div><div class="line" id="184059"><span class="nick" style="color:#234e69"><a href="#184059" label="[18:40:59]">&lt;aggi&gt;</a></span><span class="message">or gigatron ttl, the hardware design can be accomplished with pencil and paper, and pieces soldered onto breadboard</span></div><div class="line" id="184118"><span class="nick" style="color:#234e69"><a href="#184118" label="[18:41:18]">&lt;aggi&gt;</a></span><span class="message">which is where bootstrapping begins, with pencil and paper</span></div><div class="line" id="184217"><span class="nick" style="color:#234e69"><a href="#184217" label="[18:42:17]">&lt;aggi&gt;</a></span><span class="message">most adafruit seems debatable, when it requires an eclipse ide, python, java, c++ and all this, for development</span></div><div class="line" id="184226"><span class="nick" style="color:#234e69"><a href="#184226" label="[18:42:26]">&lt;aggi&gt;</a></span><span class="message">because, their products are involved often</span></div><div class="line" id="184358"><span class="nick" style="color:#234e69"><a href="#184358" label="[18:43:58]">&lt;aggi&gt;</a></span><span class="message">the hex0 is important, to establish a chain-of-trust at the software side, yet with x86 problems remain at the hardware side</span></div><div class="line" id="184719"><span class="nick" style="color:#234e69"><a href="#184719" label="[18:47:19]">&lt;aggi&gt;</a></span><span class="message">opencores.org documents some of the hardware-related components, what's open and what isn't; FYI, usb1.x at most it seems for example</span></div><div class="line" id="184828"><span class="nick" style="color:#234e69"><a href="#184828" label="[18:48:28]">&lt;aggi&gt;</a></span><span class="message">ao486, doesn't implement a FPU, and tcc-assembler errored with the softfloat implementation in linux-2.x; just collecting issues</span></div><div class="line" id="184933"><span class="nick" style="color:#234e69"><a href="#184933" label="[18:49:33]">&lt;aggi&gt;</a></span><span class="message">if one day, bootstrappable wanted to move onto a free/open hardware</span></div><div class="line" id="185107"><span class="nick" style="color:#234e69"><a href="#185107" label="[18:51:07]">&lt;aggi&gt;</a></span><span class="message">ACTION shuts up, to avoid any confusion</span></div><div class="line" id="185232"><span class="nick" style="color:#2e2a4a"><a href="#185232" label="[18:52:32]">&lt;muurkha&gt;</a></span><span class="message">aggi: having only 64K of address space is a pretty big pain</span></div><div class="line" id="185258"><span class="nick" style="color:#2e2a4a"><a href="#185258" label="[18:52:58]">&lt;muurkha&gt;</a></span><span class="message">but SeRV is comparable in complexity to Gigatron</span></div><div class="line" id="185335"><span class="nick" style="color:#234e69"><a href="#185335" label="[18:53:35]">&lt;aggi&gt;</a></span><span class="message">muurkha: of cause; although some z80 can be equipped with a MMU, for &quot;bank switching&quot;, such as 10banks 64K each... that's the 640K boundary</span></div><div class="line" id="185508"><span class="nick" style="color:#2e2a4a"><a href="#185508" label="[18:55:08]">&lt;muurkha&gt;</a></span><span class="message">yeah, lots of Z80 machines used bank switching heavily, without even an MMU</span></div><div class="line" id="185515"><span class="nick" style="color:#2e2a4a"><a href="#185515" label="[18:55:15]">&lt;muurkha&gt;</a></span><span class="message">but it's a huge pain in the ass</span></div><div class="line" id="185532"><span class="nick" style="color:#234e69"><a href="#185532" label="[18:55:32]">&lt;aggi&gt;</a></span><span class="message">no expert, seems this is where the segmented memory originated, switching 64K segments</span></div><div class="line" id="185538"><span class="nick" style="color:#2e2a4a"><a href="#185538" label="[18:55:38]">&lt;muurkha&gt;</a></span><span class="message">generally they don't switch out the whole 64K address space</span></div><div class="line" id="185621"><span class="nick" style="color:#2e2a4a"><a href="#185621" label="[18:56:21]">&lt;muurkha&gt;</a></span><span class="message">no, segmented memory originated in the desire to run multiple timeshared processes on the same computer and be able to move them around to make room for new ones without invalidating all their pointers</span></div><div class="line" id="185633"><span class="nick" style="color:#2e2a4a"><a href="#185633" label="[18:56:33]">&lt;muurkha&gt;</a></span><span class="message">in the 01960s</span></div><div class="line" id="185641"><span class="nick" style="color:#d9d9d9"><a href="#185641" label="[18:56:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am good with adding the kernel under the NATIVE folder with its respective architecture</span></div><div class="line" id="185805"><span class="nick" style="color:#2e2a4a"><a href="#185805" label="[18:58:05]">&lt;muurkha&gt;</a></span><span class="message">a flat 32-bit address space (or even 24-bit) makes it much easier to write compilers, debug compiled programs, and write assembly</span></div><div class="line" id="185818"><span class="nick" style="color:#d9d9d9"><a href="#185818" label="[18:58:18]">&lt;oriansj&gt;</a></span><span class="message">that way if it is ported to more architectures, then we can just create matching folders and be done.</span></div><div class="line" id="185846"><span class="nick" style="color:#2e2a4a"><a href="#185846" label="[18:58:46]">&lt;muurkha&gt;</a></span><span class="message">IBM PCs in the 80s used bank switching a lot too with LIM EMS</span></div><div class="line" id="185946"><span class="nick" style="color:#d9d9d9"><a href="#185946" label="[18:59:46]">&lt;oriansj&gt;</a></span><span class="message">(feel free to clear out everything in the x86 folder as they would all be replaced by the wonderful work of rickmasters)</span></div><div class="line" id="190918"><span class="nick" style="color:#2e2a4a"><a href="#190918" label="[19:09:18]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="213213"><span class="nick" style="color:#6c3d55"><a href="#213213" label="[21:32:13]">&lt;avih&gt;</a></span><span class="message">oriansj: any progress with the hex0 strict spec? if not, can i help with anything?</span></div><br /></div></body></html>