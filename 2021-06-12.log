<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000224"><span class="nick" style="color:#8dd3c7"><a href="#000224" label="[00:02:24]">&lt;stikonas&gt;</a></span><span class="message">and it's just that single file</span></div><div class="line" id="000230"><span class="nick" style="color:#8dd3c7"><a href="#000230" label="[00:02:30]">&lt;stikonas&gt;</a></span><span class="message">everything else builds fine</span></div><div class="line" id="000323"><span class="nick" style="color:#8dd3c7"><a href="#000323" label="[00:03:23]">&lt;stikonas&gt;</a></span><span class="message">I guess if we try to first build mes (skipping libc+tcc) then it would work...</span></div><div class="line" id="000344"><span class="nick" style="color:#8dd3c7"><a href="#000344" label="[00:03:44]">&lt;stikonas&gt;</a></span><span class="message">but that would increase build time</span></div><div class="line" id="000405"><span class="nick" style="color:#8dd3c7"><a href="#000405" label="[00:04:05]">&lt;stikonas&gt;</a></span><span class="message">although, with current build times of live-bootstrap, it wouldn't be too bad</span></div><div class="line" id="003909"><span class="nick" style="color:#2e2a4a"><a href="#003909" label="[00:39:09]">&lt;oriansj&gt;</a></span><span class="message">it would be ironic to have to build mes with mes to compile qsort.c</span></div><div class="line" id="003928"><span class="nick" style="color:#2e2a4a"><a href="#003928" label="[00:39:28]">&lt;oriansj&gt;</a></span><span class="message">*to^to just^</span></div><div class="line" id="003951"><span class="nick" style="color:#8dd3c7"><a href="#003951" label="[00:39:51]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm trying to narrow it down to see what it doesn't like in qsort.c</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;stikonas&gt;</a></span><span class="message">it's happy with qswap function</span></div><div class="line" id="004014"><span class="nick" style="color:#8dd3c7"><a href="#004014" label="[00:40:14]">&lt;stikonas&gt;</a></span><span class="message">so must be either qsort or qpart</span></div><div class="line" id="004150"><span class="nick" style="color:#8dd3c7"><a href="#004150" label="[00:41:50]">&lt;stikonas&gt;</a></span><span class="message">we do have a working mes checkout though, the PR I have is able to compile some other mes</span></div><div class="line" id="004834"><span class="nick" style="color:#8dd3c7"><a href="#004834" label="[00:48:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it doesn't like #ifdeds</span></div><div class="line" id="004837"><span class="nick" style="color:#8dd3c7"><a href="#004837" label="[00:48:37]">&lt;stikonas&gt;</a></span><span class="message">#ifdefs</span></div><div class="line" id="004854"><span class="nick" style="color:#8dd3c7"><a href="#004854" label="[00:48:54]">&lt;stikonas&gt;</a></span><span class="message">or rather #if 1</span></div><div class="line" id="004948"><span class="nick" style="color:#8dd3c7"><a href="#004948" label="[00:49:48]">&lt;stikonas&gt;</a></span><span class="message">if I remove those and just keep what's in #else branch it works</span></div><div class="line" id="005130"><span class="nick" style="color:#8dd3c7"><a href="#005130" label="[00:51:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: actually, it's not #if but the C++ style comment that follows</span></div><div class="line" id="005131"><span class="nick" style="color:#8dd3c7"><a href="#005131" label="[00:51:31]">&lt;stikonas&gt;</a></span><span class="message">/__x86_64__</span></div><div class="line" id="005139"><span class="nick" style="color:#8dd3c7"><a href="#005139" label="[00:51:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: maybe remove it?</span></div><div class="line" id="005425"><span class="nick" style="color:#2e2a4a"><a href="#005425" label="[00:54:25]">&lt;oriansj&gt;</a></span><span class="message">or convert into /* __x86_64__*/</span></div><div class="line" id="010311"><span class="nick" style="color:#6b8072"><a href="#010311" label="[01:03:11]">&lt;xentrac&gt;</a></span><span class="message">uhoh, NieDzejkob, orange website alert: <a rel="nofollow" href="https://news.ycombinator.com/item?id=27477599">https://news.ycombinator.com/item?id=27477599</a> </span></div><div class="line" id="010333"><span class="nick" style="color:#6b8072"><a href="#010333" label="[01:03:33]">&lt;xentrac&gt;</a></span><span class="message">oh I guess you already saw it</span></div><div class="line" id="010351"><span class="nick" style="color:#80b1d3"><a href="#010351" label="[01:03:51]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah, a friend of mine told me a moment ago</span></div><div class="line" id="010504"><span class="nick" style="color:#80b1d3"><a href="#010504" label="[01:05:04]">&lt;NieDzejkob&gt;</a></span><span class="message">I love how they immediately went &quot;this generalized statement in the introduction doesn't exhaust all the nuances&quot;, even though it's not even the main topic of the post :D</span></div><div class="line" id="010925"><span class="nick" style="color:#2e2a4a"><a href="#010925" label="[01:09:25]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: nice write up</span></div><div class="line" id="010937"><span class="nick" style="color:#80b1d3"><a href="#010937" label="[01:09:37]">&lt;NieDzejkob&gt;</a></span><span class="message">thanks</span></div><div class="line" id="011458"><span class="nick" style="color:#2e2a4a"><a href="#011458" label="[01:14:58]">&lt;oriansj&gt;</a></span><span class="message">I love seeing new options for our bare metal root of trust ^_^</span></div><div class="line" id="011823"><span class="nick" style="color:#6b8072"><a href="#011823" label="[01:18:23]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: what, about the kernel?</span></div><div class="line" id="011842"><span class="nick" style="color:#80b1d3"><a href="#011842" label="[01:18:42]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah</span></div><div class="line" id="011907"><span class="nick" style="color:#2e2a4a"><a href="#011907" label="[01:19:07]">&lt;oriansj&gt;</a></span><span class="message">xentrac: kernel probably would be a couple steps down the line</span></div><div class="line" id="011918"><span class="nick" style="color:#6b8072"><a href="#011918" label="[01:19:18]">&lt;xentrac&gt;</a></span><span class="message">I think that's an example of what I was just complaining about in <a rel="nofollow" href="https://news.ycombinator.com/item?id=27478804">https://news.ycombinator.com/item?id=27478804</a> </span></div><div class="line" id="012039"><span class="nick" style="color:#6b8072"><a href="#012039" label="[01:20:39]">&lt;xentrac&gt;</a></span><span class="message">oriansj: yeah, maybe.  do we have some kind of rough outline of what system calls are needed for different stages of the bootstrap?</span></div><div class="line" id="012321"><span class="nick" style="color:#2e2a4a"><a href="#012321" label="[01:23:21]">&lt;oriansj&gt;</a></span><span class="message">xentrac: yes: exec, open, read, write, close and waitpid/wait4pid are all that are needed until you have permissions on your filesystem then you also need chmod. Which will get you to the end of stage0-posix (except for mes-m2 with needs more)</span></div><div class="line" id="012355"><span class="nick" style="color:#6d2462"><a href="#012355" label="[01:23:55]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=27477230">https://news.ycombinator.com/item?id=27477230</a>  sidenote: orange site has noticed guix as well</span></div><div class="line" id="012401"><span class="nick" style="color:#6d2462"><a href="#012401" label="[01:24:01]">&lt;drakonis&gt;</a></span><span class="message">brace for impact</span></div><div class="line" id="012512"><span class="nick" style="color:#2e2a4a"><a href="#012512" label="[01:25:12]">&lt;oriansj&gt;</a></span><span class="message">anyone who thinks they can write a kernel without a kernel, needs to be forced to use a toggle switch board instead of a keyboard for a week to learn the difficulty of the task of writing software without the loving help of a stable operating system.</span></div><div class="line" id="012539"><span class="nick" style="color:#2e2a4a"><a href="#012539" label="[01:25:39]">&lt;oriansj&gt;</a></span><span class="message">building a kernel without a kernel can be done but development is a whole different question.</span></div><div class="line" id="012755"><span class="nick" style="color:#6b8072"><a href="#012755" label="[01:27:55]">&lt;xentrac&gt;</a></span><span class="message">also fork, right?</span></div><div class="line" id="012855"><span class="nick" style="color:#2e2a4a"><a href="#012855" label="[01:28:55]">&lt;oriansj&gt;</a></span><span class="message">xentrac: depends if your exec spawns a seperate process or not but yes if your exec doesn't spawn a new process, you would need fork as well.</span></div><div class="line" id="012900"><span class="nick" style="color:#6b8072"><a href="#012900" label="[01:29:00]">&lt;xentrac&gt;</a></span><span class="message">because I don't think waitpid will be very useful without fork and exit</span></div><div class="line" id="012956"><span class="nick" style="color:#2e2a4a"><a href="#012956" label="[01:29:56]">&lt;oriansj&gt;</a></span><span class="message">xentrac: you are right, I forgot about exit again.</span></div><div class="line" id="013030"><span class="nick" style="color:#6b8072"><a href="#013030" label="[01:30:30]">&lt;xentrac&gt;</a></span><span class="message">you could implement exit by execing the shell the way PDP-7 Unix did but that would involve a lot of changes to user-level code ;)</span></div><div class="line" id="013211"><span class="nick" style="color:#6b8072"><a href="#013211" label="[01:32:11]">&lt;xentrac&gt;</a></span><span class="message">I think you're exaggerating the difficulty a little; it's quite practical to do self-hosted development on a variety of control-program-and-monitor-type systems with no separate kernel, of course including CP/M itself, but also MacOS pre-X, MS-DOS, Windows 3.1, F-83, Apple ][ DOS, ProDOS, the Commodore 64 &quot;KERNAL&quot; which wasn't, and so on</span></div><div class="line" id="013233"><span class="nick" style="color:#6b8072"><a href="#013233" label="[01:32:33]">&lt;xentrac&gt;</a></span><span class="message">also Oberon</span></div><div class="line" id="013258"><span class="nick" style="color:#6b8072"><a href="#013258" label="[01:32:58]">&lt;xentrac&gt;</a></span><span class="message">I'm not saying it's not painful but it's not in the same ballpark of difficulty as using a toggle switch board instead of a keyboard ;)</span></div><div class="line" id="013434"><span class="nick" style="color:#2e2a4a"><a href="#013434" label="[01:34:34]">&lt;oriansj&gt;</a></span><span class="message">xentrac: fair but I always hated that developing on DOS ment you had to properly save both sides of a code change on external storage to ensure you didn't lose work (or your recovery state) in the event the program crash took out the filesystem too</span></div><div class="line" id="013739"><span class="nick" style="color:#2e2a4a"><a href="#013739" label="[01:37:39]">&lt;oriansj&gt;</a></span><span class="message">or had to have a seperate test system to test any builds you do.</span></div><div class="line" id="013825"><span class="nick" style="color:#6b8072"><a href="#013825" label="[01:38:25]">&lt;xentrac&gt;</a></span><span class="message">yeah.  there was an industry of breakpoint boards for PCs in the 01980s and 01990s so you could press a button that wasn't on the keyboard to freeze the CPU</span></div><div class="line" id="013906"><span class="nick" style="color:#6b8072"><a href="#013906" label="[01:39:06]">&lt;xentrac&gt;</a></span><span class="message">corrupting the filesystem was surprisingly rare</span></div><div class="line" id="013917"><span class="nick" style="color:#6b8072"><a href="#013917" label="[01:39:17]">&lt;xentrac&gt;</a></span><span class="message">but something as simple as an infinite loop in Windows 3.1 was a pain in the ass</span></div><div class="line" id="013941"><span class="nick" style="color:#6b8072"><a href="#013941" label="[01:39:41]">&lt;xentrac&gt;</a></span><span class="message">and also, as we saw last night, in NieDzejkob's miniforth ;)</span></div><div class="line" id="014206"><span class="nick" style="color:#6b8072"><a href="#014206" label="[01:42:06]">&lt;xentrac&gt;</a></span><span class="message">breaking out of an infinite loop with an interrupt is sometimes necessary in those conditions, but it means that your memory state is potentially corrupt, and if you have an iloop bug that happens when interrupts are disabled it can be a real pain to track down (one of the benefits of the breakpoint boards)</span></div><div class="line" id="014403"><span class="nick" style="color:#6b8072"><a href="#014403" label="[01:44:03]">&lt;xentrac&gt;</a></span><span class="message">things like Oberon and BASIC interpreters mostly avoided that kind of problem because a buggy program couldn't corrupt arbitrary state, and a keyboard interrupt couldn't interrupt the BASIC interpreter's internal operations</span></div><div class="line" id="014449"><span class="nick" style="color:#6b8072"><a href="#014449" label="[01:44:49]">&lt;xentrac&gt;</a></span><span class="message">on the other hand being able to reboot to a usable prompt in a second or two made a lot of that kind of thing less painful</span></div><div class="line" id="014545"><span class="nick" style="color:#80b1d3"><a href="#014545" label="[01:45:45]">&lt;NieDzejkob&gt;</a></span><span class="message">oh, I was just wondering how it was that the crashes in DOS didn't disrupt the filesystem, and now you mention that the answer is that they did :D</span></div><div class="line" id="015025"><span class="nick" style="color:#2e2a4a"><a href="#015025" label="[01:50:25]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: if you can get a FAT filesystem and the handful of needed POSIX syscalls needed to hit TCC, we could bootstrap Linux.</span></div><div class="line" id="015040"><span class="nick" style="color:#2e2a4a"><a href="#015040" label="[01:50:40]">&lt;oriansj&gt;</a></span><span class="message">(or ext2 if you prefer it)</span></div><div class="line" id="015224"><span class="nick" style="color:#2e2a4a"><a href="#015224" label="[01:52:24]">&lt;oriansj&gt;</a></span><span class="message">and I would just like to point out M2-Planet+cc_x86 can be built to run on bare-metal and cc_86 can be easily written in any language.</span></div><div class="line" id="015734"><span class="nick" style="color:#8dd3c7"><a href="#015734" label="[01:57:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I think tcc also has // comments... So even if we fix qsort, there it breaks later...</span></div><div class="line" id="015827"><span class="nick" style="color:#234e69"><a href="#015827" label="[01:58:27]">&lt;Melg8[m]&gt;</a></span><span class="message">can somebody explain for me - how in this implementation - program could manipulate registers or it can't? and can program just execute some binary values for processor? like if someone have C compiled hello world as payload?</span></div><div class="line" id="020031"><span class="nick" style="color:#80b1d3"><a href="#020031" label="[02:00:31]">&lt;NieDzejkob&gt;</a></span><span class="message">this implementation being?</span></div><div class="line" id="020033"><span class="nick" style="color:#6b8072"><a href="#020033" label="[02:00:33]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: DOS didn't have a disk cache by default, so you could take floppies out of the drive without warning the computer you were going to do that</span></div><div class="line" id="020052"><span class="nick" style="color:#234e69"><a href="#020052" label="[02:00:52]">&lt;Melg8[m]&gt;</a></span><span class="message">that's about this <a rel="nofollow" href="https://github.com/NieDzejkob/miniforth">https://github.com/NieDzejkob/miniforth</a>  miniforth</span></div><div class="line" id="020121"><span class="nick" style="color:#80b1d3"><a href="#020121" label="[02:01:21]">&lt;NieDzejkob&gt;</a></span><span class="message">so how I can manipulate CPU registers from the level of Forth?</span></div><div class="line" id="020131"><span class="nick" style="color:#6b8072"><a href="#020131" label="[02:01:31]">&lt;xentrac&gt;</a></span><span class="message">oriansj: does stage0-posix require real concurrency or can it be faked in the way MS-DOS faked pipes by writing the output of all but the last process to temporary files?</span></div><div class="line" id="020217"><span class="nick" style="color:#234e69"><a href="#020217" label="[02:02:17]">&lt;Melg8[m]&gt;</a></span><span class="message">NieDzejkob: yea</span></div><div class="line" id="020225"><span class="nick" style="color:#80b1d3"><a href="#020225" label="[02:02:25]">&lt;NieDzejkob&gt;</a></span><span class="message">that's rarely necessary, but when it is (like to call int 0x13 and request a disk operation), I write a wrapper in assembly and put it in memory</span></div><div class="line" id="020242"><span class="nick" style="color:#80b1d3"><a href="#020242" label="[02:02:42]">&lt;NieDzejkob&gt;</a></span><span class="message">you can actually write a very nice, small assembler in Forth</span></div><div class="line" id="020407"><span class="nick" style="color:#80b1d3"><a href="#020407" label="[02:04:07]">&lt;NieDzejkob&gt;</a></span><span class="message">heh, every time I stop to check whether what I've just transcribed works, it works, but when I don't stop to check, it never works</span></div><div class="line" id="020517"><span class="nick" style="color:#80b1d3"><a href="#020517" label="[02:05:17]">&lt;NieDzejkob&gt;</a></span><span class="message">this time I forgot the @ in : dp 0 [ dup @ 2 - ! ] ;</span></div><div class="line" id="020527"><span class="nick" style="color:#6b8072"><a href="#020527" label="[02:05:27]">&lt;xentrac&gt;</a></span><span class="message">haha oops</span></div><div class="line" id="020606"><span class="nick" style="color:#234e69"><a href="#020606" label="[02:06:06]">&lt;Melg8[m]&gt;</a></span><span class="message">so what it would take to this miniforth bootsector to be full quine? so to rebuild itself from assembly in which it was written?</span></div><div class="line" id="020906"><span class="nick" style="color:#234e69"><a href="#020906" label="[02:09:06]">&lt;Melg8[m]&gt;</a></span><span class="message">i mean - now you have host system with make/python doing the job. But even if this was not the case. what it would take for booted sector + some files to reassemble itself from this listing <a rel="nofollow" href="https://github.com/NieDzejkob/miniforth/blob/master/boot.s">https://github.com/NieDzejkob/miniforth/blob/master/boot.s</a> </span></div><div class="line" id="020925"><span class="nick" style="color:#80b1d3"><a href="#020925" label="[02:09:25]">&lt;NieDzejkob&gt;</a></span><span class="message">as is, quite a lot, because I didn't optimize for that and I depend on python</span></div><div class="line" id="020954"><span class="nick" style="color:#80b1d3"><a href="#020954" label="[02:09:54]">&lt;NieDzejkob&gt;</a></span><span class="message">however, if I had a reason to do so, I could probably assemble it by hand hex0-style in an evening</span></div><div class="line" id="021351"><span class="nick" style="color:#2e2a4a"><a href="#021351" label="[02:13:51]">&lt;oriansj&gt;</a></span><span class="message">xentrac: stage0-posix effectly has no concurrency. kaem and kaem-optional forks are just waitpid until exit and then look at exit value</span></div><div class="line" id="021619"><span class="nick" style="color:#2e2a4a"><a href="#021619" label="[02:16:19]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: M1 would be a great deal faster</span></div><div class="line" id="021702"><span class="nick" style="color:#2e2a4a"><a href="#021702" label="[02:17:02]">&lt;oriansj&gt;</a></span><span class="message">as you could just create DEFINEs that match the assembly instructions and be done</span></div><div class="line" id="021758"><span class="nick" style="color:#2e2a4a"><a href="#021758" label="[02:17:58]">&lt;oriansj&gt;</a></span><span class="message">and all of the relative and absolute addressing would be taken care of for you</span></div><div class="line" id="021853"><span class="nick" style="color:#2e2a4a"><a href="#021853" label="[02:18:53]">&lt;oriansj&gt;</a></span><span class="message">(hex0 is effectively saying you never plan on making changes without a *REALLY* good reason to do so</span></div><div class="line" id="021857"><span class="nick" style="color:#2e2a4a"><a href="#021857" label="[02:18:57]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="021905"><span class="nick" style="color:#6b8072"><a href="#021905" label="[02:19:05]">&lt;xentrac&gt;</a></span><span class="message">oriansj: neat, that makes it sound pretty achievable</span></div><div class="line" id="022016"><span class="nick" style="color:#2e2a4a"><a href="#022016" label="[02:20:16]">&lt;oriansj&gt;</a></span><span class="message">xentrac: we achieve the unachievable around here ^_^</span></div><div class="line" id="022129"><span class="nick" style="color:#6b8072"><a href="#022129" label="[02:21:29]">&lt;xentrac&gt;</a></span><span class="message">does that mean we can't achieve building without a kernel then? D:&gt;</span></div><div class="line" id="022146"><span class="nick" style="color:#2e2a4a"><a href="#022146" label="[02:21:46]">&lt;oriansj&gt;</a></span><span class="message">So something xv6 level could certainly be written in M2-Planet or even assembly should someone be willing to put in the time.</span></div><div class="line" id="022219"><span class="nick" style="color:#2e2a4a"><a href="#022219" label="[02:22:19]">&lt;oriansj&gt;</a></span><span class="message">xentrac: the knight work is pure bare-metal</span></div><div class="line" id="022237"><span class="nick" style="color:#2e2a4a"><a href="#022237" label="[02:22:37]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix is when you have a POSIX kernel you trust</span></div><div class="line" id="022302"><span class="nick" style="color:#80b1d3"><a href="#022302" label="[02:23:02]">&lt;NieDzejkob&gt;</a></span><span class="message">oriansj: or I could rewrite it in a Forth-style assembler :P</span></div><div class="line" id="022323"><span class="nick" style="color:#80b1d3"><a href="#022323" label="[02:23:23]">&lt;NieDzejkob&gt;</a></span><span class="message">ax bx movw-rr, si pop,</span></div><div class="line" id="022327"><span class="nick" style="color:#2e2a4a"><a href="#022327" label="[02:23:27]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: if you think that will be fun, I encourage you to follow your dreams ^_^</span></div><div class="line" id="022331"><span class="nick" style="color:#6b8072"><a href="#022331" label="[02:23:31]">&lt;xentrac&gt;</a></span><span class="message">oh speaking of hex, NieDzejkob, a couple of byte-saving tricks I've found useful to avoid the two-byte sub al, &quot;A&quot; - (&quot;0&quot; &amp;~0x20) - 10 and the following four-byte imul</span></div><div class="line" id="022339"><span class="nick" style="color:#6b8072"><a href="#022339" label="[02:23:39]">&lt;xentrac&gt;</a></span><span class="message">1. use octal</span></div><div class="line" id="022402"><span class="nick" style="color:#80b1d3"><a href="#022402" label="[02:24:02]">&lt;NieDzejkob&gt;</a></span><span class="message">1. no</span></div><div class="line" id="022411"><span class="nick" style="color:#80b1d3"><a href="#022411" label="[02:24:11]">&lt;NieDzejkob&gt;</a></span><span class="message">:P</span></div><div class="line" id="022419"><span class="nick" style="color:#6b8072"><a href="#022419" label="[02:24:19]">&lt;xentrac&gt;</a></span><span class="message">2. use the hex digits 0123456789jklmno instead of 0123456789abcdef</span></div><div class="line" id="022433"><span class="nick" style="color:#80b1d3"><a href="#022433" label="[02:24:33]">&lt;NieDzejkob&gt;</a></span><span class="message">right now the number base is configurable. what luxury!</span></div><div class="line" id="022440"><span class="nick" style="color:#6b8072"><a href="#022440" label="[02:24:40]">&lt;xentrac&gt;</a></span><span class="message">it is!</span></div><div class="line" id="022541"><span class="nick" style="color:#6b8072"><a href="#022541" label="[02:25:41]">&lt;xentrac&gt;</a></span><span class="message">also shl bx, 4 is only 3 bytes instead of 4</span></div><div class="line" id="022610"><span class="nick" style="color:#6b8072"><a href="#022610" label="[02:26:10]">&lt;xentrac&gt;</a></span><span class="message">my argument for octal is that the i386 instruction encoding is significantly less unreadable in octal</span></div><div class="line" id="022717"><span class="nick" style="color:#6b8072"><a href="#022717" label="[02:27:17]">&lt;xentrac&gt;</a></span><span class="message">(aside from being less code to implement)</span></div><div class="line" id="022721"><span class="nick" style="color:#80b1d3"><a href="#022721" label="[02:27:21]">&lt;NieDzejkob&gt;</a></span><span class="message">the imul could be 3 bytes too, it uses a 4-byte encoding purely for storing-variables-in-instructions reasons</span></div><div class="line" id="022752"><span class="nick" style="color:#6b8072"><a href="#022752" label="[02:27:52]">&lt;xentrac&gt;</a></span><span class="message">oh, that's what you meant about keeping yasm from using the 1-byte immediate</span></div><div class="line" id="022818"><span class="nick" style="color:#80b1d3"><a href="#022818" label="[02:28:18]">&lt;NieDzejkob&gt;</a></span><span class="message">I think I expanded upon this much more in my blogpost</span></div><div class="line" id="022903"><span class="nick" style="color:#6b8072"><a href="#022903" label="[02:29:03]">&lt;xentrac&gt;</a></span><span class="message">I guess either of those two alternatives also saves you the cmp/jbe pair</span></div><div class="line" id="022953"><span class="nick" style="color:#6b8072"><a href="#022953" label="[02:29:53]">&lt;xentrac&gt;</a></span><span class="message">leaving just a 3-byte and bx, 15</span></div><div class="line" id="023119"><span class="nick" style="color:#80b1d3"><a href="#023119" label="[02:31:19]">&lt;NieDzejkob&gt;</a></span><span class="message">hmm, I don't think there's much use to be had from bytes saved at this point</span></div><div class="line" id="023225"><span class="nick" style="color:#6b8072"><a href="#023225" label="[02:32:25]">&lt;xentrac&gt;</a></span><span class="message">I'm sure you could find things to do with the luxury of extra space :)</span></div><div class="line" id="023225"><span class="nick" style="color:#80b1d3"><a href="#023225" label="[02:32:25]">&lt;NieDzejkob&gt;</a></span><span class="message">I suppose I could make write-to-disk a builtin with enough bytes</span></div><div class="line" id="023240"><span class="nick" style="color:#6b8072"><a href="#023240" label="[02:32:40]">&lt;xentrac&gt;</a></span><span class="message">yeah!</span></div><div class="line" id="023302"><span class="nick" style="color:#80b1d3"><a href="#023302" label="[02:33:02]">&lt;NieDzejkob&gt;</a></span><span class="message">I suppose that's what I'll try to do if I mess it up this time too</span></div><div class="line" id="023609"><span class="nick" style="color:#6b8072"><a href="#023609" label="[02:36:09]">&lt;xentrac&gt;</a></span><span class="message">one thing about bootOS that bugged me: if its files were a whole disk track in size instead of a single sector, it seems like it would be significantly more powerful?</span></div><div class="line" id="023634"><span class="nick" style="color:#234e69"><a href="#023634" label="[02:36:34]">&lt;Melg8[m]&gt;</a></span><span class="message">Now... imagine bootstrapping form real source... Next level of it would be - paper manual in which all needed information (maybe like a wiki style) contained to produce bootstrapped system by the real assembler - human programmer.</span></div><div class="line" id="023654"><span class="nick" style="color:#6b8072"><a href="#023654" label="[02:36:54]">&lt;xentrac&gt;</a></span><span class="message">and that would just be a matter of passing a different AL to BIOS interrupt 0x13 service 2 or 3</span></div><div class="line" id="023659"><span class="nick" style="color:#6b8072"><a href="#023659" label="[02:36:59]">&lt;xentrac&gt;</a></span><span class="message">I think?</span></div><div class="line" id="023944"><span class="nick" style="color:#6b8072"><a href="#023944" label="[02:39:44]">&lt;xentrac&gt;</a></span><span class="message">I mean it wouldn't cost any bytes, and only a fraction of a second added on to a roughly-one-second operation</span></div><div class="line" id="024022"><span class="nick" style="color:#2e2a4a"><a href="#024022" label="[02:40:22]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: compiling/assembling is a job best suited to machines; humans make errors quite frequently. So anything they build should be tiny.</span></div><div class="line" id="024136"><span class="nick" style="color:#6b8072"><a href="#024136" label="[02:41:36]">&lt;xentrac&gt;</a></span><span class="message">(8 sectors seems like it should be safe)</span></div><div class="line" id="024241"><span class="nick" style="color:#80b1d3"><a href="#024241" label="[02:42:41]">&lt;NieDzejkob&gt;</a></span><span class="message">xentrac: well, the author does have a thing for bootsector-sized programs</span></div><div class="line" id="024311"><span class="nick" style="color:#6b8072"><a href="#024311" label="[02:43:11]">&lt;xentrac&gt;</a></span><span class="message">he does, quite an impressive one</span></div><div class="line" id="024445"><span class="nick" style="color:#234e69"><a href="#024445" label="[02:44:45]">&lt;Melg8[m]&gt;</a></span><span class="message">@oriansj - i imagined this <a rel="nofollow" href="https://www.reddit.com/r/programming/comments/9x15g/programming_thought_experiment_stuck_in_a_room/">https://www.reddit.com/r/programming/comments/9x15g/programming_thought_experiment_stuck_in_a_room/</a>  experiment, but where &quot;stucked in a room&quot; doesn't have internet or previous knowledge of how to bootstrap anything on machine. How big of a wiki it would require to taught this person how to do it. Even if assumption is that every piece of compilcated source code like linux kernel - is already on the disk and doesn't</span></div><div class="line" id="024445"><span class="nick" style="color:#234e69"><a href="#024445" label="[02:44:45]">&lt;Melg8[m]&gt;</a></span><span class="message">require to be manually typed in.</span></div><div class="line" id="024520"><span class="nick" style="color:#6b8072"><a href="#024520" label="[02:45:20]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: aah, that's an interesting problem, isn't it?</span></div><div class="line" id="024636"><span class="nick" style="color:#6b8072"><a href="#024636" label="[02:46:36]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: but 4KiB is enough for a pretty complete programming system, I think.  like Apple Integer BASIC or some small Forth IDEs with screen editors and jump-to-definition</span></div><div class="line" id="024742"><span class="nick" style="color:#80b1d3"><a href="#024742" label="[02:47:42]">&lt;NieDzejkob&gt;</a></span><span class="message">xentrac: ideally a recursive wget ran on my blog will be complete one day :P</span></div><div class="line" id="024747"><span class="nick" style="color:#6b8072"><a href="#024747" label="[02:47:47]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: if all the bootstrapping source code is on the disk you only need to walk the person through enough knowledge to write and debug the initial binary seed?</span></div><div class="line" id="024751"><span class="nick" style="color:#234e69"><a href="#024751" label="[02:47:51]">&lt;Melg8[m]&gt;</a></span><span class="message">should civilization have manual about how to bootstrap itself?) not like we use this legacy infrastructure to do this new infrastructure - but cleaned up way from knowledge to working systems)</span></div><div class="line" id="024755"><span class="nick" style="color:#6b8072"><a href="#024755" label="[02:47:55]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: ?</span></div><div class="line" id="024810"><span class="nick" style="color:#80b1d3"><a href="#024810" label="[02:48:10]">&lt;NieDzejkob&gt;</a></span><span class="message">ah, meant to tag Melg8[m]</span></div><div class="line" id="024818"><span class="nick" style="color:#6b8072"><a href="#024818" label="[02:48:18]">&lt;xentrac&gt;</a></span><span class="message">oh, haha</span></div><div class="line" id="024827"><span class="nick" style="color:#234e69"><a href="#024827" label="[02:48:27]">&lt;Melg8[m]&gt;</a></span><span class="message">@xentrac that would be nice)</span></div><div class="line" id="024905"><span class="nick" style="color:#234e69"><a href="#024905" label="[02:49:05]">&lt;Melg8[m]&gt;</a></span><span class="message">NieDzejkob: &quot;without internet&quot; )</span></div><div class="line" id="024934"><span class="nick" style="color:#6b8072"><a href="#024934" label="[02:49:34]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: you might be able to get it down to 512 bytes or so ;)</span></div><div class="line" id="025244"><span class="nick" style="color:#234e69"><a href="#025244" label="[02:52:44]">&lt;Melg8[m]&gt;</a></span><span class="message">why we care about bootstrapping? it's not about most concise form of program representation - because than - just use already built kernel + gcc + full software stack etc. I think part of this is human being can understand and verify what really happens, can create mental model of what pc would do, why it would do it, and generate some tests for that behavior to prove to themselfs that program is not malicious and it's doing what it</span></div><div class="line" id="025244"><span class="nick" style="color:#234e69"><a href="#025244" label="[02:52:44]">&lt;Melg8[m]&gt;</a></span><span class="message">&quot;supposed&quot; to do</span></div><div class="line" id="025254"><span class="nick" style="color:#2e2a4a"><a href="#025254" label="[02:52:54]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: well all of the pieces needed to be known to bootstrap everything could fit in a 300 page book assuming one didn't also have to teach assembly and C programming as well.</span></div><div class="line" id="025359"><span class="nick" style="color:#2e2a4a"><a href="#025359" label="[02:53:59]">&lt;oriansj&gt;</a></span><span class="message">For example should one consider a Dr Stone type world, the steps required to essential parity are few but full software parity would take decades (if lucky)</span></div><div class="line" id="025554"><span class="nick" style="color:#234e69"><a href="#025554" label="[02:55:54]">&lt;Melg8[m]&gt;</a></span><span class="message">@oriansj oh no... now i need to watch this Dr Stone thing....</span></div><div class="line" id="025655"><span class="nick" style="color:#2e2a4a"><a href="#025655" label="[02:56:55]">&lt;oriansj&gt;</a></span><span class="message">hint youtube-dl works on crunchyroll</span></div><div class="line" id="025717"><span class="nick" style="color:#2e2a4a"><a href="#025717" label="[02:57:17]">&lt;oriansj&gt;</a></span><span class="message">(for those who are datahoarders too)</span></div><div class="line" id="025946"><span class="nick" style="color:#2e2a4a"><a href="#025946" label="[02:59:46]">&lt;oriansj&gt;</a></span><span class="message">But assuming that sort of by scratch, I'd build a knight architecture instead of x86 as although it would be more work initially, it makes less work when one needs to expand the instruction set and less work arounds for bad architectural design decisions. (Plus having a 32bit processor with 16 General purpose registers +PC in less transistors than a 6502 would be cool)</span></div><div class="line" id="030141"><span class="nick" style="color:#2e2a4a"><a href="#030141" label="[03:01:41]">&lt;oriansj&gt;</a></span><span class="message">plus FORTH would be much easier to implement as every register can be a stack register (hint push r0 r15; pop r3 r15 =&gt; using register 15 as the stack pointer push r0 then pop into r3)</span></div><div class="line" id="030205"><span class="nick" style="color:#2e2a4a"><a href="#030205" label="[03:02:05]">&lt;oriansj&gt;</a></span><span class="message">(ret r14 to use register 14 for the return stack)</span></div><div class="line" id="030208"><span class="nick" style="color:#6b8072"><a href="#030208" label="[03:02:08]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: I'm interested in it partly as an avenue to diagnosing and fixing errors and exploring alternatives; if the whole stack is incomprehensible and unmodifiable, then bugs are just things we have to cope with, and we can never rethink the overall architecture</span></div><div class="line" id="030210"><span class="nick" style="color:#234e69"><a href="#030210" label="[03:02:10]">&lt;Melg8[m]&gt;</a></span><span class="message">yea... now we will create &quot;the room&quot; series of mental experiments... like (homo sapiens with knowledge of English + The Book + a little bit of sand + clay + some copper ore... lets goo</span></div><div class="line" id="030245"><span class="nick" style="color:#6b8072"><a href="#030245" label="[03:02:45]">&lt;xentrac&gt;</a></span><span class="message">but if the whole stack is comprehensible and explicable, then we can try alternatives for any piece of it</span></div><div class="line" id="030349"><span class="nick" style="color:#2e2a4a"><a href="#030349" label="[03:03:49]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: well I have a good book on basic lithography but the creation of the chemicals needed at the required purity would be one heck of a problem to solve. So having a chemist of Senku's skillset would basicly required.</span></div><div class="line" id="030440"><span class="nick" style="color:#6b8072"><a href="#030440" label="[03:04:40]">&lt;xentrac&gt;</a></span><span class="message">yeah, but Senku's chemistry ability is as unrealistic as Tsukasa's fighting ability</span></div><div class="line" id="030440"><span class="nick" style="color:#234e69"><a href="#030440" label="[03:04:40]">&lt;Melg8[m]&gt;</a></span><span class="message">can somebody advise me a book/or site/wiki on x86 assembly language? because to undestand any of this... i need one) so i could play with that ideas myself?</span></div><div class="line" id="030510"><span class="nick" style="color:#6b8072"><a href="#030510" label="[03:05:10]">&lt;xentrac&gt;</a></span><span class="message">I'm ... probably not the best person to answer that</span></div><div class="line" id="030520"><span class="nick" style="color:#2e2a4a"><a href="#030520" label="[03:05:20]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: depends if you want a reference or an introduction to assembly programming</span></div><div class="line" id="030614"><span class="nick" style="color:#2e2a4a"><a href="#030614" label="[03:06:14]">&lt;oriansj&gt;</a></span><span class="message">if it is just reference Intel publishes x86 manuals which (despite having errors) are a complete reference for x86 instructions, their encoding and how they work.</span></div><div class="line" id="030634"><span class="nick" style="color:#234e69"><a href="#030634" label="[03:06:34]">&lt;Melg8[m]&gt;</a></span><span class="message">i know C++/C but don't know anything about assembly - that was under my &quot;abstraction level&quot; for years. But i would like to understand and maybe implement myself some of this bootsector programms</span></div><div class="line" id="030651"><span class="nick" style="color:#6b8072"><a href="#030651" label="[03:06:51]">&lt;xentrac&gt;</a></span><span class="message">even How To Make Everything skips over a lot of the details you'd really need.  the Primitive Technology YT channel and blog I think is a lot better at showing all the necessary information</span></div><div class="line" id="030704"><span class="nick" style="color:#6b8072"><a href="#030704" label="[03:07:04]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: oh, you're going to really like this!  assembly is much simpler than C</span></div><div class="line" id="030712"><span class="nick" style="color:#6b8072"><a href="#030712" label="[03:07:12]">&lt;xentrac&gt;</a></span><span class="message">well, not the entire Intel manual</span></div><div class="line" id="030740"><span class="nick" style="color:#6b8072"><a href="#030740" label="[03:07:40]">&lt;xentrac&gt;</a></span><span class="message">but there's about 32-64 instructions that cover the vast majority of software</span></div><div class="line" id="030818"><span class="nick" style="color:#6b8072"><a href="#030818" label="[03:08:18]">&lt;xentrac&gt;</a></span><span class="message">you don't need to understand PSHUFB and CPUID to write compilers or bootstraps</span></div><div class="line" id="030836"><span class="nick" style="color:#2e2a4a"><a href="#030836" label="[03:08:36]">&lt;oriansj&gt;</a></span><span class="message">If it is an introduction to assembly programming: links to oscar toledo's books are here: <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a>   and he does a really good job</span></div><div class="line" id="030841"><span class="nick" style="color:#6b8072"><a href="#030841" label="[03:08:41]">&lt;xentrac&gt;</a></span><span class="message">there are several thousand instructions you don't need</span></div><div class="line" id="030907"><span class="nick" style="color:#2e2a4a"><a href="#030907" label="[03:09:07]">&lt;oriansj&gt;</a></span><span class="message">but if you prefer to learn a simpler form of assembly, knight and stage0 are really quick and easy to learn.</span></div><div class="line" id="031219"><span class="nick" style="color:#2e2a4a"><a href="#031219" label="[03:12:19]">&lt;oriansj&gt;</a></span><span class="message">all of the essential x86 assembly instructions can be found here: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/x86/x86_defs.M1">https://github.com/oriansj/M2libc/blob/main/x86/x86_defs.M1</a> </span></div><div class="line" id="031312"><span class="nick" style="color:#80b1d3"><a href="#031312" label="[03:13:12]">&lt;NieDzejkob&gt;</a></span><span class="message">is Senku a Dr. Stone character?</span></div><div class="line" id="031359"><span class="nick" style="color:#2e2a4a"><a href="#031359" label="[03:13:59]">&lt;oriansj&gt;</a></span><span class="message">there is a similar list for armv7l as well <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/armv7l/armv7l_defs.M1">https://github.com/oriansj/M2libc/blob/main/armv7l/armv7l_defs.M1</a>  and aarch64 <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/aarch64/aarch64_defs.M1">https://github.com/oriansj/M2libc/blob/main/aarch64/aarch64_defs.M1</a>  and a complete instruction list for knight can be found: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/knight/knight-native_defs.M1">https://github.com/oriansj/M2libc/blob/main/knight/knight-native_defs.M1</a> </span></div><div class="line" id="031420"><span class="nick" style="color:#6b8072"><a href="#031420" label="[03:14:20]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: yes, Tsukasa is another</span></div><div class="line" id="031422"><span class="nick" style="color:#2e2a4a"><a href="#031422" label="[03:14:22]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: yes he is the main character who clearly is impossibly bright</span></div><div class="line" id="031438"><span class="nick" style="color:#6b8072"><a href="#031438" label="[03:14:38]">&lt;xentrac&gt;</a></span><span class="message">right, but everybody in the series is impossibly something</span></div><div class="line" id="031455"><span class="nick" style="color:#6c3d55"><a href="#031455" label="[03:14:55]">*</a></span><span class="message">NieDzejkob has added dr stone to their watch later list a few screenfuls of chat ago</span></div><div class="line" id="031528"><span class="nick" style="color:#6b8072"><a href="#031528" label="[03:15:28]">&lt;xentrac&gt;</a></span><span class="message">(despite being impossibly bright, he tried casting iron in a wooden mold)</span></div><div class="line" id="031550"><span class="nick" style="color:#80b1d3"><a href="#031550" label="[03:15:50]">&lt;NieDzejkob&gt;</a></span><span class="message">gaah, spoilers :P</span></div><div class="line" id="031601"><span class="nick" style="color:#80b1d3"><a href="#031601" label="[03:16:01]">&lt;NieDzejkob&gt;</a></span><span class="message">(probably a minor one)</span></div><div class="line" id="031633"><span class="nick" style="color:#6b8072"><a href="#031633" label="[03:16:33]">&lt;xentrac&gt;</a></span><span class="message">yeah, I don't think that's a spoiler.  you'll have to tell me after you see it ;)</span></div><div class="line" id="031647"><span class="nick" style="color:#2e2a4a"><a href="#031647" label="[03:16:47]">&lt;oriansj&gt;</a></span><span class="message">xentrac: Have you read the Gingery Lathe (and related) book yet?</span></div><div class="line" id="031716"><span class="nick" style="color:#2e2a4a"><a href="#031716" label="[03:17:16]">&lt;oriansj&gt;</a></span><span class="message">its bit on sand casting I find quite interesting.</span></div><div class="line" id="031853"><span class="nick" style="color:#2e2a4a"><a href="#031853" label="[03:18:53]">&lt;oriansj&gt;</a></span><span class="message">correction it was:  Build Your Own Metal Working Shop from Scrap Book 1</span></div><div class="line" id="031855"><span class="nick" style="color:#2e2a4a"><a href="#031855" label="[03:18:55]">&lt;oriansj&gt;</a></span><span class="message">Build Your Own Metal Working Shop from Scrap. Charcoal Foundry</span></div><div class="line" id="031856"><span class="nick" style="color:#6b8072"><a href="#031856" label="[03:18:56]">&lt;xentrac&gt;</a></span><span class="message">I've only paged through it, a few times.  the first time, I had no idea what he was talking about</span></div><div class="line" id="031910"><span class="nick" style="color:#6b8072"><a href="#031910" label="[03:19:10]">&lt;xentrac&gt;</a></span><span class="message">ways? gibs? saddle?</span></div><div class="line" id="031936"><span class="nick" style="color:#2e2a4a"><a href="#031936" label="[03:19:36]">&lt;oriansj&gt;</a></span><span class="message">xentrac: it makes much more sense if you had taken shop class.</span></div><div class="line" id="032006"><span class="nick" style="color:#6b8072"><a href="#032006" label="[03:20:06]">&lt;xentrac&gt;</a></span><span class="message">yeah.  or watched hundreds of hours of YouChube videos about machining, as I have since then</span></div><div class="line" id="032030"><span class="nick" style="color:#80b1d3"><a href="#032030" label="[03:20:30]">&lt;NieDzejkob&gt;</a></span><span class="message">must. resist. nerdsnipe.</span></div><div class="line" id="032102"><span class="nick" style="color:#2e2a4a"><a href="#032102" label="[03:21:02]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: the problem about bootstrapping, it attracts a very specific set of interests.</span></div><div class="line" id="032112"><span class="nick" style="color:#6b8072"><a href="#032112" label="[03:21:12]">&lt;xentrac&gt;</a></span><span class="message">this is the opposite of specific</span></div><div class="line" id="032159"><span class="nick" style="color:#2e2a4a"><a href="#032159" label="[03:21:59]">&lt;oriansj&gt;</a></span><span class="message">xentrac: it is all very specific to the problem of what happens if you don't have what you need and need to make it from limited supplies.</span></div><div class="line" id="032227"><span class="nick" style="color:#6b8072"><a href="#032227" label="[03:22:27]">&lt;xentrac&gt;</a></span><span class="message">yes, but that's a very general problem.  I mean for a broad definition of 'need' everyone is always in that situation</span></div><div class="line" id="032317"><span class="nick" style="color:#2e2a4a"><a href="#032317" label="[03:23:17]">&lt;oriansj&gt;</a></span><span class="message">xentrac: the difference is the people here generally have a *NEED* to do something about that potential future.</span></div><div class="line" id="032333"><span class="nick" style="color:#80b1d3"><a href="#032333" label="[03:23:33]">&lt;NieDzejkob&gt;</a></span><span class="message">okay, got to *that point* again. Anyone wanna sanitycheck my new implementation of the int13 wrapper? push si; mov si, packet; mov ax, bx; mov dl, DISK; int 0x13; mov bx, ax; pop si; NEXT</span></div><div class="line" id="032505"><span class="nick" style="color:#2e2a4a"><a href="#032505" label="[03:25:05]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: and if your nerdsnipe was going to be a good youtube channel to learn machining, throw it my way. I'll add it to my youtube-dl backlog.</span></div><div class="line" id="032543"><span class="nick" style="color:#6b8072"><a href="#032543" label="[03:25:43]">&lt;xentrac&gt;</a></span><span class="message">in the last half-hour we've discussed boot-sector programming, Japanese children's TV, 1970s minicomputer instruction sets, youtube-dl's breadth of support, Forth implementation techniques, datahoarding, assembly-language tutorials, sandcasting and other forms of metal casting, macro processing, and engine lathe design</span></div><div class="line" id="032607"><span class="nick" style="color:#2e2a4a"><a href="#032607" label="[03:26:07]">&lt;oriansj&gt;</a></span><span class="message">xentrac: that seems fine to me</span></div><div class="line" id="032618"><span class="nick" style="color:#6b8072"><a href="#032618" label="[03:26:18]">&lt;xentrac&gt;</a></span><span class="message">I would say not just fine but excellent</span></div><div class="line" id="032620"><span class="nick" style="color:#6b8072"><a href="#032620" label="[03:26:20]">&lt;xentrac&gt;</a></span><span class="message">but not specific</span></div><div class="line" id="032631"><span class="nick" style="color:#80b1d3"><a href="#032631" label="[03:26:31]">&lt;NieDzejkob&gt;</a></span><span class="message">day like any other, no?</span></div><div class="line" id="032647"><span class="nick" style="color:#2e2a4a"><a href="#032647" label="[03:26:47]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: exactly</span></div><div class="line" id="032711"><span class="nick" style="color:#2e2a4a"><a href="#032711" label="[03:27:11]">&lt;oriansj&gt;</a></span><span class="message">It is one of the reasons I love everyone here. You people are amazing, fun and interesting</span></div><div class="line" id="032756"><span class="nick" style="color:#2e2a4a"><a href="#032756" label="[03:27:56]">&lt;oriansj&gt;</a></span><span class="message">very few people would take even the slightest interest in me writing a C compiler in assembly, let alone doing a 4 compiler speedrun.</span></div><div class="line" id="032858"><span class="nick" style="color:#80b1d3"><a href="#032858" label="[03:28:58]">&lt;NieDzejkob&gt;</a></span><span class="message">read-block didn't crash this time ^_^</span></div><div class="line" id="032859"><span class="nick" style="color:#2e2a4a"><a href="#032859" label="[03:28:59]">&lt;oriansj&gt;</a></span><span class="message">Heck, hacker news ignored the x86, AMD64 and AArch64 ports of stage0 posix and only the knight native one got any interest.</span></div><div class="line" id="033059"><span class="nick" style="color:#2e2a4a"><a href="#033059" label="[03:30:59]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: nice</span></div><div class="line" id="035637"><span class="nick" style="color:#80b1d3"><a href="#035637" label="[03:56:37]">&lt;NieDzejkob&gt;</a></span><span class="message">annnd got it <a rel="nofollow" href="https://mobile.twitter.com/NieDzejkob/status/1403530592105476102">https://mobile.twitter.com/NieDzejkob/status/1403530592105476102</a> </span></div><div class="line" id="035729"><span class="nick" style="color:#80b1d3"><a href="#035729" label="[03:57:29]">&lt;NieDzejkob&gt;</a></span><span class="message">(pure picture link: <a rel="nofollow" href="https://pbs.twimg.com/media/E3pXHJgWUAAYmcR?format=jpg&amp;name=large">https://pbs.twimg.com/media/E3pXHJgWUAAYmcR?format=jpg&amp;name=large</a>) </span></div><div class="line" id="132042"><span class="nick" style="color:#d9d9d9"><a href="#132042" label="[13:20:42]">&lt;siraben&gt;</a></span><span class="message">Is there an interpreter for the G language?</span></div><div class="line" id="132619"><span class="nick" style="color:#d9d9d9"><a href="#132619" label="[13:26:19]">&lt;siraben&gt;</a></span><span class="message">Thinking more about it, a simple language for bootstrapping is interesting</span></div><div class="line" id="132648"><span class="nick" style="color:#d9d9d9"><a href="#132648" label="[13:26:48]">&lt;siraben&gt;</a></span><span class="message">especially if it has little undefined behavior</span></div><div class="line" id="133021"><span class="nick" style="color:#d9d9d9"><a href="#133021" label="[13:30:21]">&lt;siraben&gt;</a></span><span class="message">oriansj: is there a spec for the subset of C that m2-planet compiles?</span></div><div class="line" id="141855"><span class="nick" style="color:#bc80bd"><a href="#141855" label="[14:18:55]">&lt;gio&gt;</a></span><span class="message">siraben: I am not aware of any G interpreter. Though I would not say that G has little UB: it is just a little bit higher-level than assembly and not portable. Whatever you touch, you're responsible for what you're doing.</span></div><div class="line" id="151814"><span class="nick">***</span><span class="message notice">smartin1 is now known as smartin</span></div><div class="line" id="160840"><span class="nick" style="color:#2e2a4a"><a href="#160840" label="[16:08:40]">&lt;oriansj&gt;</a></span><span class="message">siraben: I can't say there is a formal spec for M2-Planet but there is a list of primitives that it supports and there are known issues in it relative to the C standard (which with work could be reduced or eliminated)</span></div><div class="line" id="161020"><span class="nick" style="color:#2e2a4a"><a href="#161020" label="[16:10:20]">&lt;oriansj&gt;</a></span><span class="message">although I probably need to update it to include the C preprocessor support that yt added: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a> </span></div><div class="line" id="161159"><span class="nick" style="color:#2e2a4a"><a href="#161159" label="[16:11:59]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/known_issues.org">https://github.com/oriansj/M2-Planet/blob/master/known_issues.org</a> </span></div><div class="line" id="161533"><span class="nick" style="color:#2e2a4a"><a href="#161533" label="[16:15:33]">&lt;oriansj&gt;</a></span><span class="message">Aside from the handful of known wrong behavior, M2-Planet is effectively the core of the C language that simply forces people to be honest in what they #include in their outputs</span></div><div class="line" id="162152"><span class="nick" style="color:#2e2a4a"><a href="#162152" label="[16:21:52]">&lt;oriansj&gt;</a></span><span class="message">The -D foo=1 option was added to make janneke's life easier for isolating M2-Planet specific behavior in mes.c development</span></div><div class="line" id="181705"><span class="nick" style="color:#6b8072"><a href="#181705" label="[18:17:05]">&lt;xentrac&gt;</a></span><span class="message">siraben: are you talking about the g language that labview uses</span></div><div class="line" id="181723"><span class="nick" style="color:#d9d9d9"><a href="#181723" label="[18:17:23]">&lt;siraben&gt;</a></span><span class="message">xentrac: oh, I was referring to the bootstrapping language</span></div><div class="line" id="181736"><span class="nick" style="color:#d9d9d9"><a href="#181736" label="[18:17:36]">&lt;siraben&gt;</a></span><span class="message">oriansj: ah, that's good</span></div><div class="line" id="181800"><span class="nick" style="color:#d9d9d9"><a href="#181800" label="[18:18:00]">&lt;siraben&gt;</a></span><span class="message">I plan to go through Verifiable C this summer <a rel="nofollow" href="https://softwarefoundations.cis.upenn.edu/vc-current/toc.html">https://softwarefoundations.cis.upenn.edu/vc-current/toc.html</a>  which might be relevant</span></div><div class="line" id="181859"><span class="nick" style="color:#6b8072"><a href="#181859" label="[18:18:59]">&lt;xentrac&gt;</a></span><span class="message">not familiar</span></div><div class="line" id="181915"><span class="nick" style="color:#d9d9d9"><a href="#181915" label="[18:19:15]">&lt;siraben&gt;</a></span><span class="message">xentrac: someone posted a link to the G language earlier</span></div><div class="line" id="181929"><span class="nick" style="color:#6b8072"><a href="#181929" label="[18:19:29]">&lt;xentrac&gt;</a></span><span class="message">there are three listed on <a rel="nofollow" href="https://en.wikipedia.org/wiki/G_programming_language">https://en.wikipedia.org/wiki/G_programming_language</a> </span></div><div class="line" id="181937"><span class="nick" style="color:#6b8072"><a href="#181937" label="[18:19:37]">&lt;xentrac&gt;</a></span><span class="message">is it one of the those</span></div><div class="line" id="182015"><span class="nick" style="color:#d9d9d9"><a href="#182015" label="[18:20:15]">&lt;siraben&gt;</a></span><span class="message">&lt;Melg8&gt; siraben: here you go <a rel="nofollow" href="https://gitlab.com/giomasce/asmc/-/blob/master/G_LANGUAGE.md">https://gitlab.com/giomasce/asmc/-/blob/master/G_LANGUAGE.md</a> </span></div><div class="line" id="182200"><span class="nick" style="color:#6b8072"><a href="#182200" label="[18:22:00]">&lt;xentrac&gt;</a></span><span class="message">aha thanks</span></div><div class="line" id="192019"><span class="nick" style="color:#6b8072"><a href="#192019" label="[19:20:19]">&lt;xentrac&gt;</a></span><span class="message">regarding our occasional conversation about how CMOS obsoleted TTL some time ago, I recently found a discarded TI dot-matrix printer from, I think, 01984, with a lot of discrete logic chips in it</span></div><div class="line" id="192315"><span class="nick" style="color:#6b8072"><a href="#192315" label="[19:23:15]">&lt;xentrac&gt;</a></span><span class="message">two 74LS374s, a 74HC174, a 7406, a 74LS245, a 74LS32, a 74189, a 74LS74, a 74LS373, a 74S138, and so on</span></div><div class="line" id="192604"><span class="nick" style="color:#6b8072"><a href="#192604" label="[19:26:04]">&lt;xentrac&gt;</a></span><span class="message">the &quot;HC&quot; chip is the same one you'd buy today, and it's CMOS rather than TTL; the &quot;S&quot;, &quot;LS&quot;, and letterless versions are various TTL families</span></div><div class="line" id="192932"><span class="nick" style="color:#6b8072"><a href="#192932" label="[19:29:32]">&lt;xentrac&gt;</a></span><span class="message">so the crossover where TTL became useless except for niche applications was around 01984 or 01985</span></div><div class="line" id="193334"><span class="nick" style="color:#6b8072"><a href="#193334" label="[19:33:34]">&lt;xentrac&gt;</a></span><span class="message">I suspect that for things like dot-matrix printers it happened a little bit later than for general-purpose computers, because computational power was less important, low-power operation was unachievable, high speed was unachievable, and it was necessary to control large amounts of current</span></div><div class="line" id="193458"><span class="nick" style="color:#6b8072"><a href="#193458" label="[19:34:58]">&lt;xentrac&gt;</a></span><span class="message">I guess computational power is kind of the same thing as high speed in the context of discrete logic ;)</span></div><div class="line" id="193619"><span class="nick" style="color:#6b8072"><a href="#193619" label="[19:36:19]">&lt;xentrac&gt;</a></span><span class="message">people usually say CMOS has better noise immunity than TTL, but I'm not sure that's true when we're talking about inductively coupled current noise, which I think is maybe a bigger concern in a machine like a printer</span></div><div class="line" id="193804"><span class="nick" style="color:#3c5b35"><a href="#193804" label="[19:38:04]">&lt;ekaitz&gt;</a></span><span class="message">xentrac: afaik the using CMOS is mostly because of its lower power consumption</span></div><div class="line" id="193824"><span class="nick" style="color:#6b8072"><a href="#193824" label="[19:38:24]">&lt;xentrac&gt;</a></span><span class="message">nope, that was true before 01975</span></div><div class="line" id="193908"><span class="nick" style="color:#6b8072"><a href="#193908" label="[19:39:08]">&lt;xentrac&gt;</a></span><span class="message">but by 01985 CMOS wasn't just lower-power but also across the board faster</span></div><div class="line" id="193922"><span class="nick" style="color:#3c5b35"><a href="#193922" label="[19:39:22]">&lt;ekaitz&gt;</a></span><span class="message">oh</span></div><div class="line" id="194009"><span class="nick" style="color:#3c5b35"><a href="#194009" label="[19:40:09]">&lt;ekaitz&gt;</a></span><span class="message">I'll investigate a little on that later, thanks for bringing it!</span></div><div class="line" id="194019"><span class="nick" style="color:#6b8072"><a href="#194019" label="[19:40:19]">&lt;xentrac&gt;</a></span><span class="message">also, as I said, it has better noise immunity.  and it doesn't have a fanout limit like TTL, although your CMOS circuits do get gradually slower as you increase fanout</span></div><div class="line" id="194513"><span class="nick" style="color:#6b8072"><a href="#194513" label="[19:45:13]">&lt;xentrac&gt;</a></span><span class="message">also CMOS tolerates wide variation in power supply voltages, which gives you a lot of flexibility in circuit design, though early CMOS processors like the 8008 (introduced 01972) had a problem where they required more power supply voltages than TTL and so were less flexible instead of more so</span></div><div class="line" id="195723"><span class="nick" style="color:#6b8072"><a href="#195723" label="[19:57:23]">&lt;xentrac&gt;</a></span><span class="message">but for example this 74HC174 can operate anywhere from 2 V to 6 V, and like TTL it only needs two power rails.  but TTL versions like the 74LS174 require their Vcc rail to be in 4.5 to 5.5 V</span></div><div class="line" id="232122"><span class="nick" style="color:#2e2a4a"><a href="#232122" label="[23:21:22]">&lt;oriansj&gt;</a></span><span class="message">siraben: the g language discussed previously was gio's custom designed stack language;</span></div><div class="line" id="235552"><span class="nick" style="color:#2e2a4a"><a href="#235552" label="[23:55:52]">&lt;oriansj&gt;</a></span><span class="message">it is one of the downsides of single letter programming language names, usually dozens of other people claimed the same letter already and only the most popular version tends to be found.</span></div><br /></div></body></html>