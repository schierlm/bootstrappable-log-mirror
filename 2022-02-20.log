<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-02-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000522"><span class="nick" style="color:#389600"><a href="#000522" label="[00:05:22]">&lt;muurkha&gt;</a></span><span class="message">I've definitely learned a lot from looking at gcc asm output</span></div><div class="line" id="000638"><span class="nick" style="color:#389600"><a href="#000638" label="[00:06:38]">&lt;muurkha&gt;</a></span><span class="message">gcc -S and especially gcc -g -Wa,-adhlns=foo.lst</span></div><div class="line" id="000707"><span class="nick" style="color:#389600"><a href="#000707" label="[00:07:07]">&lt;muurkha&gt;</a></span><span class="message">22:35 &lt; stikonas&gt; yeah, the steep curve of learning assembly is that it forces you to use syscalls from the very beginning</span></div><div class="line" id="000725"><span class="nick" style="color:#389600"><a href="#000725" label="[00:07:25]">&lt;muurkha&gt;</a></span><span class="message">this is not really true unless you're compiling without the standard C library</span></div><div class="line" id="000737"><span class="nick" style="color:#389600"><a href="#000737" label="[00:07:37]">&lt;muurkha&gt;</a></span><span class="message">or building for a platform that doesn't have one</span></div><div class="line" id="000810"><span class="nick" style="color:#389600"><a href="#000810" label="[00:08:10]">&lt;muurkha&gt;</a></span><span class="message">you do not need to call open to open stdout normally</span></div><div class="line" id="001649"><span class="nick" style="color:#8dd3c7"><a href="#001649" label="[00:16:49]">&lt;unmatched-paren&gt;</a></span><span class="message">do i need a .data section, even if there's no data?</span></div><div class="line" id="001708"><span class="nick" style="color:#8dd3c7"><a href="#001708" label="[00:17:08]">&lt;unmatched-paren&gt;</a></span><span class="message">and do i need `ELF_end:` like in the stage0 file?</span></div><div class="line" id="001724"><span class="nick" style="color:#8dd3c7"><a href="#001724" label="[00:17:24]">&lt;unmatched-paren&gt;</a></span><span class="message">bash: ./hello-world: cannot execute binary file: Exec format error</span></div><div class="line" id="001726"><span class="nick" style="color:#8dd3c7"><a href="#001726" label="[00:17:26]">&lt;unmatched-paren&gt;</a></span><span class="message">:(</span></div><div class="line" id="001735"><span class="nick" style="color:#389600"><a href="#001735" label="[00:17:35]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="001803"><span class="nick" style="color:#389600"><a href="#001803" label="[00:18:03]">&lt;muurkha&gt;</a></span><span class="message">`file hello-world` will tell you what format it is</span></div><div class="line" id="001822"><span class="nick" style="color:#8dd3c7"><a href="#001822" label="[00:18:22]">&lt;unmatched-paren&gt;</a></span><span class="message">hello-world: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span></div><div class="line" id="001831"><span class="nick" style="color:#389600"><a href="#001831" label="[00:18:31]">&lt;muurkha&gt;</a></span><span class="message">possibly that you just assembled it without linking</span></div><div class="line" id="001851"><span class="nick" style="color:#389600"><a href="#001851" label="[00:18:51]">&lt;muurkha&gt;</a></span><span class="message">rename it to hello-world.o and try `ld -o hello-world hello-world.o`</span></div><div class="line" id="001854"><span class="nick" style="color:#8dd3c7"><a href="#001854" label="[00:18:54]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, yes, i just `nasm -o hello-world -f elf64 hello-world.asm`</span></div><div class="line" id="001856"><span class="nick" style="color:#8dd3c7"><a href="#001856" label="[00:18:56]">&lt;unmatched-paren&gt;</a></span><span class="message">thanks :)</span></div><div class="line" id="001921"><span class="nick" style="color:#389600"><a href="#001921" label="[00:19:21]">&lt;muurkha&gt;</a></span><span class="message">the kernel isn't as helpful as it could be in that case</span></div><div class="line" id="001943"><span class="nick" style="color:#8dd3c7"><a href="#001943" label="[00:19:43]">&lt;unmatched-paren&gt;</a></span><span class="message">./hello-world produces... nothing :(</span></div><div class="line" id="001955"><span class="nick" style="color:#389600"><a href="#001955" label="[00:19:55]">&lt;muurkha&gt;</a></span><span class="message">try `strace ./hello-world`</span></div><div class="line" id="002013"><span class="nick" style="color:#389600"><a href="#002013" label="[00:20:13]">&lt;muurkha&gt;</a></span><span class="message">nothing is a big step up from &quot;Segmentation violation&quot;</span></div><div class="line" id="002028"><span class="nick" style="color:#389600"><a href="#002028" label="[00:20:28]">&lt;muurkha&gt;</a></span><span class="message">or &quot;exec format error&quot; — nothing means it ran!</span></div><div class="line" id="002028"><span class="nick" style="color:#8dd3c7"><a href="#002028" label="[00:20:28]">&lt;unmatched-paren&gt;</a></span><span class="message">`-1 EFAULT (Bad address`</span></div><div class="line" id="002032"><span class="nick" style="color:#389600"><a href="#002032" label="[00:20:32]">&lt;muurkha&gt;</a></span><span class="message">aha</span></div><div class="line" id="002033"><span class="nick" style="color:#8dd3c7"><a href="#002033" label="[00:20:33]">&lt;unmatched-paren&gt;</a></span><span class="message">segfaults are fun :)</span></div><div class="line" id="002055"><span class="nick" style="color:#389600"><a href="#002055" label="[00:20:55]">&lt;muurkha&gt;</a></span><span class="message">EFAULT on exec or what?</span></div><div class="line" id="002110"><span class="nick" style="color:#8dd3c7"><a href="#002110" label="[00:21:10]">&lt;unmatched-paren&gt;</a></span><span class="message">stat(0x1, 0x48)                         = -1 EFAULT (Bad address)</span></div><div class="line" id="002114"><span class="nick" style="color:#8dd3c7"><a href="#002114" label="[00:21:14]">&lt;unmatched-paren&gt;</a></span><span class="message">on stat, apparently</span></div><div class="line" id="002147"><span class="nick" style="color:#389600"><a href="#002147" label="[00:21:47]">&lt;muurkha&gt;</a></span><span class="message">yeah, you're passing it two addresses that both don't make sense</span></div><div class="line" id="002159"><span class="nick" style="color:#389600"><a href="#002159" label="[00:21:59]">&lt;muurkha&gt;</a></span><span class="message">but... are you calling stat on purpose?</span></div><div class="line" id="002201"><span class="nick" style="color:#8dd3c7"><a href="#002201" label="[00:22:01]">&lt;unmatched-paren&gt;</a></span><span class="message">i never used stat...</span></div><div class="line" id="002203"><span class="nick" style="color:#8dd3c7"><a href="#002203" label="[00:22:03]">&lt;unmatched-paren&gt;</a></span><span class="message">no</span></div><div class="line" id="002216"><span class="nick" style="color:#389600"><a href="#002216" label="[00:22:16]">&lt;muurkha&gt;</a></span><span class="message">may be useful to know that 0x48 is 'H'</span></div><div class="line" id="002233"><span class="nick" style="color:#389600"><a href="#002233" label="[00:22:33]">&lt;muurkha&gt;</a></span><span class="message">perhaps you're accidentally calling stat() instead of write()</span></div><div class="line" id="002259"><span class="nick" style="color:#8dd3c7"><a href="#002259" label="[00:22:59]">&lt;unmatched-paren&gt;</a></span><span class="message">yes i am, thanks :)</span></div><div class="line" id="002305"><span class="nick" style="color:#389600"><a href="#002305" label="[00:23:05]">&lt;muurkha&gt;</a></span><span class="message">but also you're passing it 'H' instead of the memory address where 'H' lives, which is an easy mistake to make in assembly</span></div><div class="line" id="002322"><span class="nick" style="color:#8dd3c7"><a href="#002322" label="[00:23:22]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, should i mov 'H' somewhere?</span></div><div class="line" id="002325"><span class="nick" style="color:#389600"><a href="#002325" label="[00:23:25]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="002347"><span class="nick" style="color:#389600"><a href="#002347" label="[00:23:47]">&lt;muurkha&gt;</a></span><span class="message">probably you should have something like mystring: DB &quot;Hello world\n&quot;, 0</span></div><div class="line" id="002400"><span class="nick" style="color:#8dd3c7"><a href="#002400" label="[00:24:00]">&lt;unmatched-paren&gt;</a></span><span class="message">in .data</span></div><div class="line" id="002401"><span class="nick" style="color:#8dd3c7"><a href="#002401" label="[00:24:01]">&lt;unmatched-paren&gt;</a></span><span class="message">?</span></div><div class="line" id="002406"><span class="nick" style="color:#389600"><a href="#002406" label="[00:24:06]">&lt;muurkha&gt;</a></span><span class="message">and pass $mystring</span></div><div class="line" id="002413"><span class="nick" style="color:#389600"><a href="#002413" label="[00:24:13]">&lt;muurkha&gt;</a></span><span class="message">potentially but it doesn't really matter</span></div><div class="line" id="002426"><span class="nick" style="color:#389600"><a href="#002426" label="[00:24:26]">&lt;muurkha&gt;</a></span><span class="message">although I'm a little rusty on Intel-style syntax</span></div><div class="line" id="002434"><span class="nick" style="color:#8dd3c7"><a href="#002434" label="[00:24:34]">&lt;unmatched-paren&gt;</a></span><span class="message">what does DB mean?</span></div><div class="line" id="002449"><span class="nick" style="color:#389600"><a href="#002449" label="[00:24:49]">&lt;muurkha&gt;</a></span><span class="message">data bytes.  it means &quot;put these bytes in the program here&quot;</span></div><div class="line" id="002454"><span class="nick" style="color:#389600"><a href="#002454" label="[00:24:54]">&lt;muurkha&gt;</a></span><span class="message">maybe in Intel-style syntax $mystring is just mystring</span></div><div class="line" id="002455"><span class="nick" style="color:#8dd3c7"><a href="#002455" label="[00:24:55]">&lt;unmatched-paren&gt;</a></span><span class="message">k</span></div><div class="line" id="002510"><span class="nick" style="color:#389600"><a href="#002510" label="[00:25:10]">&lt;muurkha&gt;</a></span><span class="message">write() expects a memory address at which to find the data to write</span></div><div class="line" id="002535"><span class="nick" style="color:#389600"><a href="#002535" label="[00:25:35]">&lt;muurkha&gt;</a></span><span class="message">so you have to store the data at a memory address in order to appease it.  and DB (.asciz in gas syntax) is the easiest way to do that</span></div><div class="line" id="002949"><span class="nick" style="color:#8dd3c7"><a href="#002949" label="[00:29:49]">&lt;unmatched-paren&gt;</a></span><span class="message">paren@guix-aspire ~/code/asm [env]$ ./hello-world</span></div><div class="line" id="002949"><span class="nick" style="color:#8dd3c7"><a href="#002949" label="[00:29:49]">&lt;unmatched-paren&gt;</a></span><span class="message">Hello, world!</span></div><div class="line" id="002953"><span class="nick" style="color:#8dd3c7"><a href="#002953" label="[00:29:53]">&lt;unmatched-paren&gt;</a></span><span class="message">\o/</span></div><div class="line" id="003015"><span class="nick" style="color:#8dd3c7"><a href="#003015" label="[00:30:15]">&lt;unmatched-paren&gt;</a></span><span class="message">the db line is supposed to look like:</span></div><div class="line" id="003027"><span class="nick" style="color:#8dd3c7"><a href="#003027" label="[00:30:27]">&lt;unmatched-paren&gt;</a></span><span class="message">hello_world db `Hello, world!\n`</span></div><div class="line" id="003049"><span class="nick" style="color:#8dd3c7"><a href="#003049" label="[00:30:49]">&lt;unmatched-paren&gt;</a></span><span class="message">nasm does not process escape sequences, unless you use backticks</span></div><div class="line" id="003106"><span class="nick" style="color:#8dd3c7"><a href="#003106" label="[00:31:06]">&lt;unmatched-paren&gt;</a></span><span class="message">and you don't use a $ for variables in intel syntax</span></div><div class="line" id="003114"><span class="nick" style="color:#389600"><a href="#003114" label="[00:31:14]">&lt;muurkha&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="003122"><span class="nick" style="color:#8dd3c7"><a href="#003122" label="[00:31:22]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha, stikonas: thanks for all the pointers (haha)</span></div><div class="line" id="003126"><span class="nick" style="color:#389600"><a href="#003126" label="[00:31:26]">&lt;muurkha&gt;</a></span><span class="message">do the `` make nasm append a 0?</span></div><div class="line" id="003135"><span class="nick" style="color:#389600"><a href="#003135" label="[00:31:35]">&lt;muurkha&gt;</a></span><span class="message">or is there just a 0 following it by coincidence?</span></div><div class="line" id="003137"><span class="nick" style="color:#8dd3c7"><a href="#003137" label="[00:31:37]">&lt;unmatched-paren&gt;</a></span><span class="message">i think it might be implicit? idk</span></div><div class="line" id="003144"><span class="nick" style="color:#389600"><a href="#003144" label="[00:31:44]">&lt;muurkha&gt;</a></span><span class="message">it's not implicit</span></div><div class="line" id="003147"><span class="nick" style="color:#8dd3c7"><a href="#003147" label="[00:31:47]">&lt;unmatched-paren&gt;</a></span><span class="message">but it works without it</span></div><div class="line" id="003155"><span class="nick" style="color:#389600"><a href="#003155" label="[00:31:55]">&lt;muurkha&gt;</a></span><span class="message">it might be coincidental</span></div><div class="line" id="003210"><span class="nick" style="color:#389600"><a href="#003210" label="[00:32:10]">&lt;muurkha&gt;</a></span><span class="message">like, if you don't have anything after it, the rest of the segment might be filled with 0s by default</span></div><div class="line" id="003214"><span class="nick" style="color:#8dd3c7"><a href="#003214" label="[00:32:14]">&lt;unmatched-paren&gt;</a></span><span class="message">what does that number mean, anyway?</span></div><div class="line" id="003224"><span class="nick" style="color:#389600"><a href="#003224" label="[00:32:24]">&lt;muurkha&gt;</a></span><span class="message">number?</span></div><div class="line" id="003254"><span class="nick" style="color:#389600"><a href="#003254" label="[00:32:54]">&lt;muurkha&gt;</a></span><span class="message">the `` syntax is new to me, and it might be a nasm thing for appending a 0 &quot;implicitly&quot; too</span></div><div class="line" id="003314"><span class="nick" style="color:#389600"><a href="#003314" label="[00:33:14]">&lt;muurkha&gt;</a></span><span class="message">um, I guess in the case of write() you don't need the 0!</span></div><div class="line" id="003319"><span class="nick" style="color:#389600"><a href="#003319" label="[00:33:19]">&lt;muurkha&gt;</a></span><span class="message">you just need to tell it how many bytes to write</span></div><div class="line" id="003322"><span class="nick" style="color:#2e2a4a"><a href="#003322" label="[00:33:22]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: now you can check how M0 does printing</span></div><div class="line" id="003340"><span class="nick" style="color:#8dd3c7"><a href="#003340" label="[00:33:40]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: ah, okay</span></div><div class="line" id="003342"><span class="nick" style="color:#389600"><a href="#003342" label="[00:33:42]">&lt;muurkha&gt;</a></span><span class="message">it's just the C string stuff that uses the trailing 0</span></div><div class="line" id="003351"><span class="nick" style="color:#2e2a4a"><a href="#003351" label="[00:33:51]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/M0_AMD64.S#L818">https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/M0_AMD64.S#L818</a> </span></div><div class="line" id="003408"><span class="nick" style="color:#8dd3c7"><a href="#003408" label="[00:34:08]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, does the zero add a null terminator?</span></div><div class="line" id="003418"><span class="nick" style="color:#389600"><a href="#003418" label="[00:34:18]">&lt;muurkha&gt;</a></span><span class="message">&quot;null&quot; means &quot;zero byte&quot;</span></div><div class="line" id="003419"><span class="nick" style="color:#2e2a4a"><a href="#003419" label="[00:34:19]">&lt;stikonas&gt;</a></span><span class="message">zero is null terminator</span></div><div class="line" id="003431"><span class="nick" style="color:#8dd3c7"><a href="#003431" label="[00:34:31]">&lt;unmatched-paren&gt;</a></span><span class="message">sorry, nul</span></div><div class="line" id="003437"><span class="nick" style="color:#2e2a4a"><a href="#003437" label="[00:34:37]">&lt;stikonas&gt;</a></span><span class="message">but it's just a convention to terminate strings with zero</span></div><div class="line" id="003518"><span class="nick" style="color:#2e2a4a"><a href="#003518" label="[00:35:18]">&lt;stikonas&gt;</a></span><span class="message">well, it's either terminate with some character or always have string + length</span></div><div class="line" id="003552"><span class="nick" style="color:#2e2a4a"><a href="#003552" label="[00:35:52]">&lt;stikonas&gt;</a></span><span class="message">string + length is probably more secure</span></div><div class="line" id="003614"><span class="nick" style="color:#8dd3c7"><a href="#003614" label="[00:36:14]">&lt;unmatched-paren&gt;</a></span><span class="message">what should i try to do next? write to a file?</span></div><div class="line" id="003615"><span class="nick" style="color:#2e2a4a"><a href="#003615" label="[00:36:15]">&lt;stikonas&gt;</a></span><span class="message">you don't want kernel to loop forever in case somebody forgot null byte</span></div><div class="line" id="003632"><span class="nick" style="color:#2e2a4a"><a href="#003632" label="[00:36:32]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: you can write to a file but it's more of the same</span></div><div class="line" id="003642"><span class="nick" style="color:#8dd3c7"><a href="#003642" label="[00:36:42]">&lt;unmatched-paren&gt;</a></span><span class="message">except with added openat :)</span></div><div class="line" id="003643"><span class="nick" style="color:#2e2a4a"><a href="#003643" label="[00:36:43]">&lt;stikonas&gt;</a></span><span class="message">just another syscall to open the file</span></div><div class="line" id="003647"><span class="nick" style="color:#2e2a4a"><a href="#003647" label="[00:36:47]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="003653"><span class="nick" style="color:#2e2a4a"><a href="#003653" label="[00:36:53]">&lt;stikonas&gt;</a></span><span class="message">well, you can do that as intermediate step</span></div><div class="line" id="003701"><span class="nick" style="color:#2e2a4a"><a href="#003701" label="[00:37:01]">&lt;stikonas&gt;</a></span><span class="message">but later you should start learning functions</span></div><div class="line" id="003706"><span class="nick" style="color:#2e2a4a"><a href="#003706" label="[00:37:06]">&lt;stikonas&gt;</a></span><span class="message">that will force you to start using stack</span></div><div class="line" id="003725"><span class="nick" style="color:#389600"><a href="#003725" label="[00:37:25]">&lt;muurkha&gt;</a></span><span class="message">open() or openat() does use a nul terminator for the filename</span></div><div class="line" id="003903"><span class="nick" style="color:#8dd3c7"><a href="#003903" label="[00:39:03]">&lt;unmatched-paren&gt;</a></span><span class="message">i should probably also figure out how to write to memory and not just registers</span></div><div class="line" id="003929"><span class="nick" style="color:#2e2a4a"><a href="#003929" label="[00:39:29]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: well, easiest way (and that's what stage0-posix does) is to allocate memory using brk</span></div><div class="line" id="003949"><span class="nick" style="color:#8dd3c7"><a href="#003949" label="[00:39:49]">&lt;unmatched-paren&gt;</a></span><span class="message">there's two openats???</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;unmatched-paren&gt;</a></span><span class="message">in musl:</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;unmatched-paren&gt;</a></span><span class="message">#define __NR_openat					257</span></div><div class="line" id="004005"><span class="nick" style="color:#2e2a4a"><a href="#004005" label="[00:40:05]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: actually you already dealt with reading from memory</span></div><div class="line" id="004013"><span class="nick" style="color:#8dd3c7"><a href="#004013" label="[00:40:13]">&lt;unmatched-paren&gt;</a></span><span class="message">#define __NR_openat2		437</span></div><div class="line" id="004020"><span class="nick" style="color:#2e2a4a"><a href="#004020" label="[00:40:20]">&lt;stikonas&gt;</a></span><span class="message">openat2 might be newer</span></div><div class="line" id="004022"><span class="nick" style="color:#8dd3c7"><a href="#004022" label="[00:40:22]">&lt;unmatched-paren&gt;</a></span><span class="message">openat and openat2...</span></div><div class="line" id="004033"><span class="nick" style="color:#2e2a4a"><a href="#004033" label="[00:40:33]">&lt;stikonas&gt;</a></span><span class="message">it's the same story for forking</span></div><div class="line" id="004034"><span class="nick" style="color:#8dd3c7"><a href="#004034" label="[00:40:34]">&lt;unmatched-paren&gt;</a></span><span class="message">#define __NR_openat2		437</span></div><div class="line" id="004037"><span class="nick" style="color:#8dd3c7"><a href="#004037" label="[00:40:37]">&lt;unmatched-paren&gt;</a></span><span class="message">oops</span></div><div class="line" id="004053"><span class="nick" style="color:#8dd3c7"><a href="#004053" label="[00:40:53]">&lt;unmatched-paren&gt;</a></span><span class="message">The openat2() system call is an extension of openat(2) and provides a superset of its functionality.</span></div><div class="line" id="004054"><span class="nick" style="color:#2e2a4a"><a href="#004054" label="[00:40:54]">&lt;stikonas&gt;</a></span><span class="message">after forking, you have to wait for processs</span></div><div class="line" id="004102"><span class="nick" style="color:#8dd3c7"><a href="#004102" label="[00:41:02]">&lt;unmatched-paren&gt;</a></span><span class="message">that's what i meant to paste</span></div><div class="line" id="004110"><span class="nick" style="color:#2e2a4a"><a href="#004110" label="[00:41:10]">&lt;stikonas&gt;</a></span><span class="message">there is waitpid, waitid, wait4...</span></div><div class="line" id="004156"><span class="nick" style="color:#8dd3c7"><a href="#004156" label="[00:41:56]">&lt;unmatched-paren&gt;</a></span><span class="message">openat2 is very recent, it seems: <a rel="nofollow" href="https://www.phoronix.com/scan.php?page=news_item&amp;px=Linux-5.6-Adds-Openat2">https://www.phoronix.com/scan.php?page=news_item&amp;px=Linux-5.6-Adds-Openat2</a> </span></div><div class="line" id="004202"><span class="nick" style="color:#2e2a4a"><a href="#004202" label="[00:42:02]">&lt;stikonas&gt;</a></span><span class="message">none of the old syscalls get removed due to syscall interface compatibility</span></div><div class="line" id="004422"><span class="nick" style="color:#2e2a4a"><a href="#004422" label="[00:44:22]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: anyway, you already deal with memory a bit</span></div><div class="line" id="004432"><span class="nick" style="color:#2e2a4a"><a href="#004432" label="[00:44:32]">&lt;stikonas&gt;</a></span><span class="message">sys_write syscall takes a pointer to address in memory</span></div><div class="line" id="004438"><span class="nick" style="color:#8dd3c7"><a href="#004438" label="[00:44:38]">&lt;unmatched-paren&gt;</a></span><span class="message">yes</span></div><div class="line" id="004440"><span class="nick" style="color:#2e2a4a"><a href="#004440" label="[00:44:40]">&lt;stikonas&gt;</a></span><span class="message">so you already did read from memory</span></div><div class="line" id="004523"><span class="nick" style="color:#2e2a4a"><a href="#004523" label="[00:45:23]">&lt;stikonas&gt;</a></span><span class="message">on risc-v I had to use load/store instruction to deal with memory access, but I think on amd64 opcodes can take memory addresses directly</span></div><div class="line" id="004705"><span class="nick" style="color:#8dd3c7"><a href="#004705" label="[00:47:05]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll try doing file io and memory writes tomorrow. thanks for all the help \o</span></div><div class="line" id="005402"><span class="nick" style="color:#389600"><a href="#005402" label="[00:54:02]">&lt;muurkha&gt;</a></span><span class="message">yes, generally they can</span></div><div class="line" id="021423"><span class="nick" style="color:#80b1d3"><a href="#021423" label="[02:14:23]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: this subset <a rel="nofollow" href="https://paste.debian.net/1231572/">https://paste.debian.net/1231572/</a>  is all you will need to know about AMD64 syscalls for a while</span></div><div class="line" id="021508"><span class="nick" style="color:#80b1d3"><a href="#021508" label="[02:15:08]">&lt;oriansj&gt;</a></span><span class="message">all registers indicated may change during a syscall so if you care about the values in those registers save them onto the stack prior to the syscall</span></div><div class="line" id="021943"><span class="nick" style="color:#80b1d3"><a href="#021943" label="[02:19:43]">&lt;oriansj&gt;</a></span><span class="message">the best way to learn AMD64 assembly is to write a simple couple line program and compile it with nasm and then use gdb (layout asm then layout regs) then do si to single step your binary. Look at the registers and notice how they change when each instruction is executed. You can do this with any instruction to get a clue to how it behaves (only div and udiv require you to read the manual)</span></div><div class="line" id="022136"><span class="nick" style="color:#80b1d3"><a href="#022136" label="[02:21:36]">&lt;oriansj&gt;</a></span><span class="message">the core assembly instructions you need to know are mov, add, sub, cmp, je, jne, push, pop, call and ret with mov being the one you will use the most</span></div><div class="line" id="022303"><span class="nick" style="color:#80b1d3"><a href="#022303" label="[02:23:03]">&lt;oriansj&gt;</a></span><span class="message">I suggest nasm assembly over at&amp;t assembly (unless you plan on being multi-architecture then at&amp;t is a better choice) but they both work just fine</span></div><div class="line" id="022632"><span class="nick" style="color:#80b1d3"><a href="#022632" label="[02:26:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the simplest hello world in assembly would be mov 1, rax; mov 1, rdi; mov $message, rsi; mov 12, rdx; syscall; mov 60, rax; mov 0, rdx; syscall; message: &quot;hello world&quot; (so 8 instructions)</span></div><div class="line" id="022908"><span class="nick" style="color:#80b1d3"><a href="#022908" label="[02:29:08]">&lt;oriansj&gt;</a></span><span class="message">now syscalls don't care if the strings are null terminated or not, they just care how many bytes you told it to write and to what file (which stdin, stdout and stderr are; just files)</span></div><div class="line" id="023150"><span class="nick" style="color:#80b1d3"><a href="#023150" label="[02:31:50]">&lt;oriansj&gt;</a></span><span class="message">the reason strings in assembly usually are null terminated is because it is much easier to just write a function that reads bytes until null and syscalls than passing the length of your string (unless of course your assembler supports .length macros which handles calculating that for you)</span></div><div class="line" id="023323"><span class="nick" style="color:#80b1d3"><a href="#023323" label="[02:33:23]">&lt;oriansj&gt;</a></span><span class="message">everything you need to know about assembly, you can see in cc_*.S and you should always ask questions if something is not perfectly clear</span></div><div class="line" id="024723"><span class="nick" style="color:#80b1d3"><a href="#024723" label="[02:47:23]">&lt;oriansj&gt;</a></span><span class="message">now if you care about learning about byte coding, displacement calculation, immediate encoding and other machine level details there are other tools you need to know about and I certainly have some notes that I can share.</span></div><div class="line" id="193453"><span class="nick" style="color:#389600"><a href="#193453" label="[19:34:53]">&lt;muurkha&gt;</a></span><span class="message">oriansj: that is good advice but unmatched-paren was already closed</span></div><div class="line" id="200440"><span class="nick" style="color:#80b1d3"><a href="#200440" label="[20:04:40]">&lt;oriansj&gt;</a></span><span class="message">muurkha: We have logging for a reason; and those who choose not to be constantly active still can see what they miss while offline.</span></div><div class="line" id="200505"><span class="nick" style="color:#80b1d3"><a href="#200505" label="[20:05:05]">&lt;oriansj&gt;</a></span><span class="message">and others can learn too by reading of the logs</span></div><div class="line" id="200834"><span class="nick" style="color:#389600"><a href="#200834" label="[20:08:34]">&lt;muurkha&gt;</a></span><span class="message">I'll try to link unmatched-paren to the logs if they reappear</span></div><br /></div></body></html>