<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-02-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011233"><span class="nick" style="color:#389600"><a href="#011233" label="[01:12:33]">&lt;stikonas&gt;</a></span><span class="message">lain_: yes, but not the other way around.  Anyway, at this point we don't really need to rely on DCC anymore, we have full source bootstrapping and if you want trusted guix environment, just bootstrap environment too</span></div><div class="line" id="011411"><span class="nick" style="color:#389600"><a href="#011411" label="[01:14:11]">&lt;stikonas&gt;</a></span><span class="message">but if for example you have a whole bootstrapped system on a trusted hardware, and then have another hardware where you run the process you can still go one way only</span></div><div class="line" id="011434"><span class="nick" style="color:#389600"><a href="#011434" label="[01:14:34]">&lt;stikonas&gt;</a></span><span class="message">if hashes mismatch then the other hardware is doing something dodgy</span></div><div class="line" id="011554"><span class="nick" style="color:#389600"><a href="#011554" label="[01:15:54]">&lt;stikonas&gt;</a></span><span class="message">(though more likely your reproducible build is incomplete and got another source of non-reproducibility that you previously missed rather than hardware actually doing something dodgy)</span></div><div class="line" id="011618"><span class="nick" style="color:#389600"><a href="#011618" label="[01:16:18]">&lt;stikonas&gt;</a></span><span class="message">on the other hand, if the hashes match, you can't say anything at all about 2nd machine being trustworthy</span></div><div class="line" id="032449"><span class="nick" style="color:#8dd3c7"><a href="#032449" label="[03:24:49]">&lt;stikonas[m]&gt;</a></span><span class="message">pder: yes, I can reproduce the wrong checksum, I must have had something locally...</span></div><div class="line" id="032450"><span class="nick" style="color:#8dd3c7"><a href="#032450" label="[03:24:50]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll fix it now</span></div><div class="line" id="044907"><span class="nick" style="color:#2e2a4a"><a href="#044907" label="[04:49:07]">&lt;lain_&gt;</a></span><span class="message">I see, ddc is only concerned with the package supply chain -which guix already makes very transparent stikonas</span></div><div class="line" id="045047"><span class="nick" style="color:#389600"><a href="#045047" label="[04:50:47]">&lt;stikonas&gt;</a></span><span class="message">well, guix goes further than simple ddc (building with two compilers)</span></div><div class="line" id="045119"><span class="nick" style="color:#389600"><a href="#045119" label="[04:51:19]">&lt;stikonas&gt;</a></span><span class="message">lain_: though guix does not bootstrap itself or guile or kernel</span></div><div class="line" id="045204"><span class="nick" style="color:#389600"><a href="#045204" label="[04:52:04]">&lt;stikonas&gt;</a></span><span class="message">one could bootstrap guix program, guile and kernel separately</span></div><div class="line" id="045349"><span class="nick" style="color:#389600"><a href="#045349" label="[04:53:49]">&lt;stikonas&gt;</a></span><span class="message">though you are basically stuck with these bootstrap binaries in guix anyway: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bootstrap.scm#n78">https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bootstrap.scm#n78</a> </span></div><div class="line" id="045821"><span class="nick" style="color:#389600"><a href="#045821" label="[04:58:21]">&lt;stikonas&gt;</a></span><span class="message">janneke (CC efraim): so after you said that guix updated to binutils 2.20, I was checking a bit how far tcc can take us (not with mes though). So binutils 2.30 can be built (and 2.30 does have riscv support). Possibly can go a bit further but it's getting harder and harder</span></div><div class="line" id="045831"><span class="nick" style="color:#389600"><a href="#045831" label="[04:58:31]">&lt;stikonas&gt;</a></span><span class="message">and binutils 2.38 is not buildable with tcc</span></div><div class="line" id="045852"><span class="nick" style="color:#389600"><a href="#045852" label="[04:58:52]">&lt;stikonas&gt;</a></span><span class="message">modern binutils are using more and more stuff that tcc does not support (i.e. uint64_t)</span></div><div class="line" id="074819"><span class="nick" style="color:#389600"><a href="#074819" label="[07:48:19]">&lt;stikonas&gt;</a></span><span class="message">fossy: have you seen something like <a rel="nofollow" href="https://paste.debian.net/1272380/">https://paste.debian.net/1272380/</a>  before?</span></div><div class="line" id="074857"><span class="nick" style="color:#389600"><a href="#074857" label="[07:48:57]">&lt;stikonas&gt;</a></span><span class="message">somehow kexec doesn't like newer gas</span></div><div class="line" id="074933"><span class="nick" style="color:#389600"><a href="#074933" label="[07:49:33]">&lt;stikonas&gt;</a></span><span class="message">oh, actually looking at error message it looks like trying to build x86_64</span></div><div class="line" id="075108"><span class="nick" style="color:#389600"><a href="#075108" label="[07:51:08]">&lt;stikonas&gt;</a></span><span class="message">maybe just --build passed o ./configure will help</span></div><div class="line" id="084040"><span class="nick" style="color:#6b8072"><a href="#084040" label="[08:40:40]">&lt;fossy&gt;</a></span><span class="message">stikonas: how did you make binutils 2.30 work?</span></div><div class="line" id="084114"><span class="nick" style="color:#6b8072"><a href="#084114" label="[08:41:14]">&lt;fossy&gt;</a></span><span class="message">stikonas: hmm, no, i haven't seen that before, but that is x86_64 *kernel* compat code, iirc, not architecture compat code</span></div><div class="line" id="084131"><span class="nick" style="color:#6b8072"><a href="#084131" label="[08:41:31]">&lt;fossy&gt;</a></span><span class="message">since we assume i386 kernel (and it will be anyway soon when fiwix), it's fine to disable that if required</span></div><div class="line" id="084229"><span class="nick" style="color:#389600"><a href="#084229" label="[08:42:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've added lt_cv_sys_max_cmd_len=32768 to ./configure</span></div><div class="line" id="084249"><span class="nick" style="color:#389600"><a href="#084249" label="[08:42:49]">&lt;stikonas&gt;</a></span><span class="message">I can push it to a branch</span></div><div class="line" id="084252"><span class="nick" style="color:#389600"><a href="#084252" label="[08:42:52]">&lt;stikonas&gt;</a></span><span class="message">but checksums are wrong</span></div><div class="line" id="084254"><span class="nick" style="color:#389600"><a href="#084254" label="[08:42:54]">&lt;stikonas&gt;</a></span><span class="message">and kexec fails</span></div><div class="line" id="084259"><span class="nick" style="color:#6b8072"><a href="#084259" label="[08:42:59]">&lt;fossy&gt;</a></span><span class="message">lain_: my understanding is that yes, ddc can be applied to the environment</span></div><div class="line" id="084259"><span class="nick" style="color:#389600"><a href="#084259" label="[08:42:59]">&lt;stikonas&gt;</a></span><span class="message">there were quite a few other problems</span></div><div class="line" id="084302"><span class="nick" style="color:#389600"><a href="#084302" label="[08:43:02]">&lt;stikonas&gt;</a></span><span class="message">but they are fixed now</span></div><div class="line" id="084311"><span class="nick" style="color:#6b8072"><a href="#084311" label="[08:43:11]">&lt;fossy&gt;</a></span><span class="message">nice</span></div><div class="line" id="084404"><span class="nick" style="color:#389600"><a href="#084404" label="[08:44:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/tree/binutils">https://github.com/stikonas/live-bootstrap/tree/binutils</a> </span></div><div class="line" id="084412"><span class="nick" style="color:#6b8072"><a href="#084412" label="[08:44:12]">&lt;fossy&gt;</a></span><span class="message">i had a little bit of time to finish stripping yesterday, i'm just validating checksums in qemu then i'll push a PR</span></div><div class="line" id="084427"><span class="nick" style="color:#6b8072"><a href="#084427" label="[08:44:27]">&lt;fossy&gt;</a></span><span class="message">it will be quire disruptive, because it updates nearly the entirety of sysc's checksums</span></div><div class="line" id="084436"><span class="nick" style="color:#6b8072"><a href="#084436" label="[08:44:36]">&lt;fossy&gt;</a></span><span class="message">(we strip after file is available)</span></div><div class="line" id="084436"><span class="nick" style="color:#389600"><a href="#084436" label="[08:44:36]">&lt;stikonas&gt;</a></span><span class="message">fossy: actually, with this binutis work, I noticed one thing</span></div><div class="line" id="084443"><span class="nick" style="color:#389600"><a href="#084443" label="[08:44:43]">&lt;stikonas&gt;</a></span><span class="message">binutils can compress debug symbols</span></div><div class="line" id="084458"><span class="nick" style="color:#389600"><a href="#084458" label="[08:44:58]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh, maybe wait till binutils is merged</span></div><div class="line" id="084508"><span class="nick" style="color:#389600"><a href="#084508" label="[08:45:08]">&lt;stikonas&gt;</a></span><span class="message">cause I had lots of checksum changes too</span></div><div class="line" id="084512"><span class="nick" style="color:#389600"><a href="#084512" label="[08:45:12]">&lt;stikonas&gt;</a></span><span class="message">and also lots of commits...</span></div><div class="line" id="084532"><span class="nick" style="color:#6b8072"><a href="#084532" label="[08:45:32]">&lt;fossy&gt;</a></span><span class="message">yeah, ok</span></div><div class="line" id="084600"><span class="nick" style="color:#6b8072"><a href="#084600" label="[08:46:00]">&lt;fossy&gt;</a></span><span class="message">stikonas: what's wrong with kexec now?</span></div><div class="line" id="084612"><span class="nick" style="color:#6b8072"><a href="#084612" label="[08:46:12]">&lt;fossy&gt;</a></span><span class="message">still same?</span></div><div class="line" id="084713"><span class="nick" style="color:#389600"><a href="#084713" label="[08:47:13]">&lt;stikonas&gt;</a></span><span class="message">yes, same build error</span></div><div class="line" id="084727"><span class="nick" style="color:#389600"><a href="#084727" label="[08:47:27]">&lt;stikonas&gt;</a></span><span class="message">purgatory/arch/i386/compat_x86_64.S:27: Error: unknown pseudo-op: `.code64'</span></div><div class="line" id="084739"><span class="nick" style="color:#389600"><a href="#084739" label="[08:47:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I need to pass some argument to binutils</span></div><div class="line" id="084754"><span class="nick" style="color:#6b8072"><a href="#084754" label="[08:47:54]">&lt;fossy&gt;</a></span><span class="message">i'm not particularly convinced all this will fit in 4GB sysa...</span></div><div class="line" id="084756"><span class="nick" style="color:#389600"><a href="#084756" label="[08:47:56]">&lt;stikonas&gt;</a></span><span class="message">to enable 64-bit support</span></div><div class="line" id="084809"><span class="nick" style="color:#389600"><a href="#084809" label="[08:48:09]">&lt;stikonas&gt;</a></span><span class="message">how much does kernel use?</span></div><div class="line" id="084820"><span class="nick" style="color:#389600"><a href="#084820" label="[08:48:20]">&lt;stikonas&gt;</a></span><span class="message">I checked before kernel build and we have loads of free memory</span></div><div class="line" id="084841"><span class="nick" style="color:#389600"><a href="#084841" label="[08:48:41]">&lt;stikonas&gt;</a></span><span class="message">even after unpacking kernel but before building we have over 1 GiB left</span></div><div class="line" id="084905"><span class="nick" style="color:#6b8072"><a href="#084905" label="[08:49:05]">&lt;fossy&gt;</a></span><span class="message">kernel uses about 800M in final step i think, when all .os are out and linking</span></div><div class="line" id="084922"><span class="nick" style="color:#389600"><a href="#084922" label="[08:49:22]">&lt;stikonas&gt;</a></span><span class="message">I see, well, so far I had no problems...</span></div><div class="line" id="084929"><span class="nick" style="color:#389600"><a href="#084929" label="[08:49:29]">&lt;stikonas&gt;</a></span><span class="message">i think I build the commit before binutils</span></div><div class="line" id="084931"><span class="nick" style="color:#389600"><a href="#084931" label="[08:49:31]">&lt;stikonas&gt;</a></span><span class="message">and it worked fine</span></div><div class="line" id="084946"><span class="nick" style="color:#389600"><a href="#084946" label="[08:49:46]">&lt;stikonas&gt;</a></span><span class="message">well, a lot of stuff like ed and bc are really small</span></div><div class="line" id="084955"><span class="nick" style="color:#389600"><a href="#084955" label="[08:49:55]">&lt;stikonas&gt;</a></span><span class="message">and I wonder how come we didn't need them before</span></div><div class="line" id="085005"><span class="nick" style="color:#389600"><a href="#085005" label="[08:50:05]">&lt;stikonas&gt;</a></span><span class="message">I guess bash 2 bug meant that we skipped some makefile rules</span></div><div class="line" id="085030"><span class="nick" style="color:#6b8072"><a href="#085030" label="[08:50:30]">&lt;fossy&gt;</a></span><span class="message">yeah, that is a little od</span></div><div class="line" id="085032"><span class="nick" style="color:#6b8072"><a href="#085032" label="[08:50:32]">&lt;fossy&gt;</a></span><span class="message">odd*</span></div><div class="line" id="085108"><span class="nick" style="color:#389600"><a href="#085108" label="[08:51:08]">&lt;stikonas&gt;</a></span><span class="message">well, once we have fiwix, it might be easier with 4 GB limit</span></div><div class="line" id="085120"><span class="nick" style="color:#6b8072"><a href="#085120" label="[08:51:20]">&lt;fossy&gt;</a></span><span class="message">yes, fiwix will effectively elimate the problem</span></div><div class="line" id="085121"><span class="nick" style="color:#389600"><a href="#085121" label="[08:51:21]">&lt;stikonas&gt;</a></span><span class="message">and maybe newer kernel can also be built...</span></div><div class="line" id="085131"><span class="nick" style="color:#6b8072"><a href="#085131" label="[08:51:31]">&lt;fossy&gt;</a></span><span class="message">it probably can</span></div><div class="line" id="085150"><span class="nick" style="color:#389600"><a href="#085150" label="[08:51:50]">&lt;stikonas&gt;</a></span><span class="message">I've got rid of a lot of old stuff</span></div><div class="line" id="085213"><span class="nick" style="color:#6b8072"><a href="#085213" label="[08:52:13]">&lt;fossy&gt;</a></span><span class="message">i think kernel version was limited by binutils before</span></div><div class="line" id="085226"><span class="nick" style="color:#6b8072"><a href="#085226" label="[08:52:26]">&lt;fossy&gt;</a></span><span class="message">ill take a look at updating kernel after kernel work</span></div><div class="line" id="085239"><span class="nick" style="color:#6b8072"><a href="#085239" label="[08:52:39]">&lt;fossy&gt;</a></span><span class="message">otherwise the ram problem will just become larger</span></div><div class="line" id="085253"><span class="nick" style="color:#6b8072"><a href="#085253" label="[08:52:53]">&lt;fossy&gt;</a></span><span class="message">after kernel work = after builder-hex0/fiwix</span></div><div class="line" id="085305"><span class="nick" style="color:#389600"><a href="#085305" label="[08:53:05]">&lt;stikonas&gt;</a></span><span class="message">yes, sounds good</span></div><div class="line" id="085343"><span class="nick" style="color:#389600"><a href="#085343" label="[08:53:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe newer binutils can actually help with kerne stuff?</span></div><div class="line" id="085357"><span class="nick" style="color:#6b8072"><a href="#085357" label="[08:53:57]">&lt;fossy&gt;</a></span><span class="message">it should</span></div><div class="line" id="085406"><span class="nick" style="color:#389600"><a href="#085406" label="[08:54:06]">&lt;stikonas&gt;</a></span><span class="message">I mean not updating but space</span></div><div class="line" id="085422"><span class="nick" style="color:#6b8072"><a href="#085422" label="[08:54:22]">&lt;fossy&gt;</a></span><span class="message">how so?</span></div><div class="line" id="085442"><span class="nick" style="color:#389600"><a href="#085442" label="[08:54:42]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/commit/d90e140b4160cde1335aa9e5f692b9a02806515e#diff-58ec8e9d5d98f661a8c45ffdf5aa058cb6f01c495fbac25afce3a43fd05dc4c5R81">https://github.com/stikonas/live-bootstrap/commit/d90e140b4160cde1335aa9e5f692b9a02806515e#diff-58ec8e9d5d98f661a8c45ffdf5aa058cb6f01c495fbac25afce3a43fd05dc4c5R81</a> </span></div><div class="line" id="085508"><span class="nick" style="color:#6b8072"><a href="#085508" label="[08:55:08]">&lt;fossy&gt;</a></span><span class="message">quite possibly</span></div><div class="line" id="085525"><span class="nick" style="color:#389600"><a href="#085525" label="[08:55:25]">&lt;stikonas&gt;</a></span><span class="message">large amount was probably debug data</span></div><div class="line" id="085528"><span class="nick" style="color:#389600"><a href="#085528" label="[08:55:28]">&lt;stikonas&gt;</a></span><span class="message">so if it is compressed</span></div><div class="line" id="085536"><span class="nick" style="color:#389600"><a href="#085536" label="[08:55:36]">&lt;stikonas&gt;</a></span><span class="message">we might actually have more free RAM than before</span></div><div class="line" id="085612"><span class="nick" style="color:#389600"><a href="#085612" label="[08:56:12]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll try to pass --enable-64-bit-bfd to binutils</span></div><div class="line" id="085617"><span class="nick" style="color:#389600"><a href="#085617" label="[08:56:17]">&lt;stikonas&gt;</a></span><span class="message">and see if that helps with kexec</span></div><div class="line" id="085617"><span class="nick" style="color:#6b8072"><a href="#085617" label="[08:56:17]">&lt;fossy&gt;</a></span><span class="message">hopefully that doesn't break the kernel, i know you can't just indiscriminately strip vmlinux</span></div><div class="line" id="085649"><span class="nick" style="color:#6b8072"><a href="#085649" label="[08:56:49]">&lt;fossy&gt;</a></span><span class="message">+1</span></div><div class="line" id="085657"><span class="nick" style="color:#389600"><a href="#085657" label="[08:56:57]">&lt;stikonas&gt;</a></span><span class="message">unfortunately we won't be able to go the the very newets binutils...</span></div><div class="line" id="085659"><span class="nick" style="color:#6b8072"><a href="#085659" label="[08:56:59]">&lt;fossy&gt;</a></span><span class="message">strange configure option name lol</span></div><div class="line" id="085714"><span class="nick" style="color:#6b8072"><a href="#085714" label="[08:57:14]">&lt;fossy&gt;</a></span><span class="message">eh, this is reasonably modern at least</span></div><div class="line" id="085715"><span class="nick" style="color:#389600"><a href="#085715" label="[08:57:15]">&lt;stikonas&gt;</a></span><span class="message">recent versions start using more and more C features that tcc does not support</span></div><div class="line" id="085735"><span class="nick" style="color:#389600"><a href="#085735" label="[08:57:35]">&lt;stikonas&gt;</a></span><span class="message">yes, 2.30 is not that ancient</span></div><div class="line" id="085742"><span class="nick" style="color:#389600"><a href="#085742" label="[08:57:42]">&lt;stikonas&gt;</a></span><span class="message">good enough for riscv bootstrap</span></div><div class="line" id="085752"><span class="nick" style="color:#389600"><a href="#085752" label="[08:57:52]">&lt;stikonas&gt;</a></span><span class="message">so unless somebody needs loongarch, it should be fine</span></div><div class="line" id="085814"><span class="nick" style="color:#389600"><a href="#085814" label="[08:58:14]">&lt;stikonas&gt;</a></span><span class="message">perhaps at some point tcc will also support more</span></div><div class="line" id="085833"><span class="nick" style="color:#80b1d3"><a href="#085833" label="[08:58:33]">&lt;Mikaku&gt;</a></span><span class="message">stikonas: Fiwix supports 4GB of virtual memory (3GB for user and 1GB for kernel), but this poses a limit to manage up to 1GB (aprox.) of physical RAM, no more</span></div><div class="line" id="085839"><span class="nick" style="color:#6b8072"><a href="#085839" label="[08:58:39]">&lt;fossy&gt;</a></span><span class="message">i think there are much bigger problems with loong than binutils so far :P</span></div><div class="line" id="085901"><span class="nick" style="color:#6b8072"><a href="#085901" label="[08:59:01]">&lt;fossy&gt;</a></span><span class="message">I don't think anything uses &gt;1GB physical RAM?</span></div><div class="line" id="085904"><span class="nick" style="color:#389600"><a href="#085904" label="[08:59:04]">&lt;stikonas&gt;</a></span><span class="message">Mikaku: but fiwix suports storage media, doesn't it?</span></div><div class="line" id="085916"><span class="nick" style="color:#80b1d3"><a href="#085916" label="[08:59:16]">&lt;Mikaku&gt;</a></span><span class="message">if you need more than 1GB of physical RAM, then you need a 64bit kernel</span></div><div class="line" id="085933"><span class="nick" style="color:#389600"><a href="#085933" label="[08:59:33]">&lt;stikonas&gt;</a></span><span class="message">right now sysa in live-bootstrap is purely in RAM, and then sysc is using hard drive (or qemu image)</span></div><div class="line" id="085934"><span class="nick" style="color:#80b1d3"><a href="#085934" label="[08:59:34]">&lt;Mikaku&gt;</a></span><span class="message">stikonas: yes, no swap yet ;-)</span></div><div class="line" id="085946"><span class="nick" style="color:#389600"><a href="#085946" label="[08:59:46]">&lt;stikonas&gt;</a></span><span class="message">that's fine then</span></div><div class="line" id="090011"><span class="nick" style="color:#389600"><a href="#090011" label="[09:00:11]">&lt;stikonas&gt;</a></span><span class="message">initially we didn't know whether we will have storage support in bootstrap kernel</span></div><div class="line" id="090059"><span class="nick" style="color:#6b8072"><a href="#090059" label="[09:00:59]">&lt;fossy&gt;</a></span><span class="message">i doubt we actually use &gt;512MB RAM in sysa at the moment (perhaps Linux kernel linking is an exception?)</span></div><div class="line" id="090108"><span class="nick" style="color:#6b8072"><a href="#090108" label="[09:01:08]">&lt;fossy&gt;</a></span><span class="message">(for compiling)</span></div><div class="line" id="090303"><span class="nick" style="color:#80b1d3"><a href="#090303" label="[09:03:03]">&lt;Mikaku&gt;</a></span><span class="message">as a reference point, I only need 256MB to build all FiwixOS packages in one shot, which include Python 3.6 and gnu-ghostscript as the bigger ones</span></div><div class="line" id="090340"><span class="nick" style="color:#80b1d3"><a href="#090340" label="[09:03:40]">&lt;Mikaku&gt;</a></span><span class="message">256MB of memory, I meant</span></div><div class="line" id="090548"><span class="nick" style="color:#6b8072"><a href="#090548" label="[09:05:48]">&lt;fossy&gt;</a></span><span class="message">good to hear!</span></div><div class="line" id="100026"><span class="nick" style="color:#2e2a4a"><a href="#100026" label="[10:00:26]">&lt;lain_&gt;</a></span><span class="message">stikonas my first statement wasn't fully thought out.  It wouldn't need to, it would just need to be able to perform ddc within it and another environment.  However, you told me that identical ddc results didn't say anything about the environment, so my point is void.</span></div><div class="line" id="100104"><span class="nick" style="color:#389600"><a href="#100104" label="[10:01:04]">&lt;stikonas&gt;</a></span><span class="message">well, same as identical ddc results don't say anything about original compiler</span></div><div class="line" id="100200"><span class="nick" style="color:#389600"><a href="#100200" label="[10:02:00]">&lt;stikonas&gt;</a></span><span class="message">e.g. maybe for some reason backdoor was not activated in this case</span></div><div class="line" id="100313"><span class="nick" style="color:#389600"><a href="#100313" label="[10:03:13]">&lt;stikonas&gt;</a></span><span class="message">anyway, like I said before, now it's easier to think in terms of bootstrapping</span></div><div class="line" id="100318"><span class="nick" style="color:#389600"><a href="#100318" label="[10:03:18]">&lt;stikonas&gt;</a></span><span class="message">where you control the whole chain</span></div><div class="line" id="100557"><span class="nick" style="color:#6b8072"><a href="#100557" label="[10:05:57]">&lt;fossy&gt;</a></span><span class="message">why don't identical ddc results say anything about the original compiler? doesn't it gurantee that compile(compiler source, original compiler) = new compiler is non-malicious?</span></div><div class="line" id="100638"><span class="nick" style="color:#6b8072"><a href="#100638" label="[10:06:38]">&lt;fossy&gt;</a></span><span class="message">if the backdoor isn't activated, then the backdoor won't propagate and it doesn't really matter</span></div><div class="line" id="100649"><span class="nick" style="color:#389600"><a href="#100649" label="[10:06:49]">&lt;stikonas&gt;</a></span><span class="message">yes, it doesn't matter</span></div><div class="line" id="100657"><span class="nick" style="color:#6b8072"><a href="#100657" label="[10:06:57]">&lt;fossy&gt;</a></span><span class="message">i agree that it's easier to think in terms of bootstrapping tho now lol</span></div><div class="line" id="100704"><span class="nick" style="color:#389600"><a href="#100704" label="[10:07:04]">&lt;stikonas&gt;</a></span><span class="message">but I just meant we don't learn whether original compiler was completely good</span></div><div class="line" id="100710"><span class="nick" style="color:#389600"><a href="#100710" label="[10:07:10]">&lt;stikonas&gt;</a></span><span class="message">though maybe as you say it doesn't matter</span></div><div class="line" id="100747"><span class="nick" style="color:#6b8072"><a href="#100747" label="[10:07:47]">&lt;fossy&gt;</a></span><span class="message">ddc is still useful in some cases, i think</span></div><div class="line" id="101218"><span class="nick" style="color:#2e2a4a"><a href="#101218" label="[10:12:18]">&lt;lain_&gt;</a></span><span class="message">stikonas it only guarantees that the initial compiler had nothing malicious added during it's compilation process</span></div><div class="line" id="101222"><span class="nick" style="color:#2e2a4a"><a href="#101222" label="[10:12:22]">&lt;lain_&gt;</a></span><span class="message">it says nothing about the source code</span></div><div class="line" id="101311"><span class="nick" style="color:#2e2a4a"><a href="#101311" label="[10:13:11]">&lt;lain_&gt;</a></span><span class="message">by &quot;nothing malicious&quot;, I mean nothing self-replicating that would alter self-compilation</span></div><div class="line" id="101416"><span class="nick" style="color:#2e2a4a"><a href="#101416" label="[10:14:16]">&lt;lain_&gt;</a></span><span class="message">ddc is useful because it allows you to verify the integrity of a downloaded compiler without having to do a full bootstrap, provided you have another compiler you already trust</span></div><div class="line" id="101435"><span class="nick" style="color:#2e2a4a"><a href="#101435" label="[10:14:35]">&lt;lain_&gt;</a></span><span class="message">that was it's initial intention</span></div><div class="line" id="101654"><span class="nick" style="color:#2e2a4a"><a href="#101654" label="[10:16:54]">&lt;lain_&gt;</a></span><span class="message">about the link you posted, that's very useful as it reduces the trusted computing environment to all hardware, firmware, running drivers, project source code, kernel source code, and kernel binary -chipping away to the light at the end of the tunnel lol</span></div><div class="line" id="101711"><span class="nick" style="color:#389600"><a href="#101711" label="[10:17:11]">&lt;stikonas&gt;</a></span><span class="message">well, initially we didn't even have full bootstrap as an option</span></div><div class="line" id="101746"><span class="nick" style="color:#2e2a4a"><a href="#101746" label="[10:17:46]">&lt;lain_&gt;</a></span><span class="message">does the guile bootstrap work now?</span></div><div class="line" id="101836"><span class="nick" style="color:#389600"><a href="#101836" label="[10:18:36]">&lt;stikonas&gt;</a></span><span class="message">lain_: yes, but I think we only tried 3.0.8</span></div><div class="line" id="101915"><span class="nick" style="color:#389600"><a href="#101915" label="[10:19:15]">&lt;stikonas&gt;</a></span><span class="message">presumably you could use 3.0.8 to rebuild prebuilt scheme files of newer guile</span></div><div class="line" id="101915"><span class="nick" style="color:#2e2a4a"><a href="#101915" label="[10:19:15]">&lt;lain_&gt;</a></span><span class="message">nice</span></div><div class="line" id="101919"><span class="nick" style="color:#2e2a4a"><a href="#101919" label="[10:19:19]">&lt;lain_&gt;</a></span><span class="message">how recent is that</span></div><div class="line" id="101932"><span class="nick" style="color:#389600"><a href="#101932" label="[10:19:32]">&lt;stikonas&gt;</a></span><span class="message">I think 3.0.9 is the latest</span></div><div class="line" id="101952"><span class="nick" style="color:#389600"><a href="#101952" label="[10:19:52]">&lt;stikonas&gt;</a></span><span class="message">oh, we can build 3.0.7</span></div><div class="line" id="101952"><span class="nick" style="color:#2e2a4a"><a href="#101952" label="[10:19:52]">&lt;lain_&gt;</a></span><span class="message">I mean, how recently were you able to perform a guile bootstrap?</span></div><div class="line" id="101956"><span class="nick" style="color:#389600"><a href="#101956" label="[10:19:56]">&lt;stikonas&gt;</a></span><span class="message">so 2 versions behind</span></div><div class="line" id="102008"><span class="nick" style="color:#389600"><a href="#102008" label="[10:20:08]">&lt;stikonas&gt;</a></span><span class="message">oh, live-bootstrap does it every run</span></div><div class="line" id="102015"><span class="nick" style="color:#389600"><a href="#102015" label="[10:20:15]">&lt;stikonas&gt;</a></span><span class="message">so like yesterday...</span></div><div class="line" id="102022"><span class="nick" style="color:#2e2a4a"><a href="#102022" label="[10:20:22]">&lt;lain_&gt;</a></span><span class="message">that's awesome lol</span></div><div class="line" id="102027"><span class="nick" style="color:#2e2a4a"><a href="#102027" label="[10:20:27]">&lt;lain_&gt;</a></span><span class="message">I love this community</span></div><div class="line" id="102041"><span class="nick" style="color:#389600"><a href="#102041" label="[10:20:41]">&lt;stikonas&gt;</a></span><span class="message">guile is a dependency of GNU autogen</span></div><div class="line" id="102107"><span class="nick" style="color:#389600"><a href="#102107" label="[10:21:07]">&lt;stikonas&gt;</a></span><span class="message">which is used to rebuild some machine generated files in GCC</span></div><div class="line" id="102107"><span class="nick" style="color:#2e2a4a"><a href="#102107" label="[10:21:07]">&lt;lain_&gt;</a></span><span class="message">just found out that Microsoft Pluton firmware is in the mainline Linux kernel -so glad I use an operating system made by people who care about freedom</span></div><div class="line" id="102309"><span class="nick" style="color:#2e2a4a"><a href="#102309" label="[10:23:09]">&lt;lain_&gt;</a></span><span class="message">the ultimate goal is to have hex0 as the only dependency, correct?</span></div><div class="line" id="102317"><span class="nick" style="color:#2e2a4a"><a href="#102317" label="[10:23:17]">&lt;lain_&gt;</a></span><span class="message">only binary dependency*</span></div><div class="line" id="102720"><span class="nick" style="color:#389600"><a href="#102720" label="[10:27:20]">&lt;stikonas&gt;</a></span><span class="message">lain_: well, there is also kaem-optional-seed if you want automation</span></div><div class="line" id="102723"><span class="nick" style="color:#389600"><a href="#102723" label="[10:27:23]">&lt;stikonas&gt;</a></span><span class="message">and kernel</span></div><div class="line" id="102727"><span class="nick" style="color:#389600"><a href="#102727" label="[10:27:27]">&lt;stikonas&gt;</a></span><span class="message">basically 3 pieces</span></div><div class="line" id="102821"><span class="nick" style="color:#389600"><a href="#102821" label="[10:28:21]">&lt;stikonas&gt;</a></span><span class="message">though I think builder-hex0 kind of includes functionality of both hex0 and kaem-optional-seed</span></div><div class="line" id="102829"><span class="nick" style="color:#389600"><a href="#102829" label="[10:28:29]">&lt;stikonas&gt;</a></span><span class="message">(maybe less flexible though)</span></div><div class="line" id="102843"><span class="nick" style="color:#389600"><a href="#102843" label="[10:28:43]">&lt;stikonas&gt;</a></span><span class="message">but builder-hex0 is quite a big bigger, probably 3 or 4 KiB</span></div><div class="line" id="102909"><span class="nick" style="color:#389600"><a href="#102909" label="[10:29:09]">&lt;stikonas&gt;</a></span><span class="message">lain_: if you trust your UEFI, you could use it to rebuild everything from hex0.efi though</span></div><div class="line" id="103012"><span class="nick" style="color:#2e2a4a"><a href="#103012" label="[10:30:12]">&lt;lain_&gt;</a></span><span class="message">the process can be manually verified to be identical between just hex0 and hex0 with kaem.  Once this is done, we have verified kaem is equal to the manual inputs, which makes the minimum hex0</span></div><div class="line" id="103015"><span class="nick" style="color:#2e2a4a"><a href="#103015" label="[10:30:15]">&lt;lain_&gt;</a></span><span class="message">or that's how I see it</span></div><div class="line" id="103115"><span class="nick" style="color:#2e2a4a"><a href="#103115" label="[10:31:15]">&lt;lain_&gt;</a></span><span class="message">the only way to verify hex0 is to read the machine code -but it's small enough that this is feasible</span></div><div class="line" id="103316"><span class="nick" style="color:#2e2a4a"><a href="#103316" label="[10:33:16]">&lt;lain_&gt;</a></span><span class="message">you don't *technically* need a kernel, do you?  Can't instructions just be passed directly to the CPU?</span></div><div class="line" id="103522"><span class="nick" style="color:#2e2a4a"><a href="#103522" label="[10:35:22]">&lt;lain_&gt;</a></span><span class="message">I guess that's what we do with hex0, right?</span></div><div class="line" id="103822"><span class="nick" style="color:#389600"><a href="#103822" label="[10:38:22]">&lt;stikonas&gt;</a></span><span class="message">lain_: you could, but then it's slightly different hex0 than in stage0-posix</span></div><div class="line" id="103832"><span class="nick" style="color:#389600"><a href="#103832" label="[10:38:32]">&lt;stikonas&gt;</a></span><span class="message">that one uses linux kernel calls to open files, etc</span></div><div class="line" id="103842"><span class="nick" style="color:#389600"><a href="#103842" label="[10:38:42]">&lt;stikonas&gt;</a></span><span class="message">we dot have hex0.efi that runs without kernel on top of UEFI</span></div><div class="line" id="103910"><span class="nick" style="color:#389600"><a href="#103910" label="[10:39:10]">&lt;stikonas&gt;</a></span><span class="message">that one is somewhat larger than posix version but smaller than builder-hex0</span></div><div class="line" id="104132"><span class="nick" style="color:#389600"><a href="#104132" label="[10:41:32]">&lt;stikonas&gt;</a></span><span class="message">lain_: <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="104140"><span class="nick" style="color:#2e2a4a"><a href="#104140" label="[10:41:40]">&lt;lain_&gt;</a></span><span class="message">if stage0-posix can be built from hex0, the binaries you need to trust are still just hex0</span></div><div class="line" id="104221"><span class="nick" style="color:#389600"><a href="#104221" label="[10:42:21]">&lt;stikonas&gt;</a></span><span class="message">kind of, though you still want to minimize amount of code written in hex0 language</span></div><div class="line" id="104407"><span class="nick" style="color:#389600"><a href="#104407" label="[10:44:07]">&lt;stikonas&gt;</a></span><span class="message">hex0 is very painful to write read and modify</span></div><div class="line" id="104416"><span class="nick" style="color:#389600"><a href="#104416" label="[10:44:16]">&lt;stikonas&gt;</a></span><span class="message">it's basically a commented out machine code</span></div><div class="line" id="104434"><span class="nick" style="color:#389600"><a href="#104434" label="[10:44:34]">&lt;stikonas&gt;</a></span><span class="message">hex1 is much better</span></div><div class="line" id="104449"><span class="nick" style="color:#2e2a4a"><a href="#104449" label="[10:44:49]">&lt;lain_&gt;</a></span><span class="message">you need the minimal amount of hex0 to get from a compiled binary small enough to read to something that can begin to automate the build process</span></div><div class="line" id="104522"><span class="nick" style="color:#2e2a4a"><a href="#104522" label="[10:45:22]">&lt;lain_&gt;</a></span><span class="message">that's the most readable scenario</span></div><div class="line" id="104540"><span class="nick" style="color:#389600"><a href="#104540" label="[10:45:40]">&lt;stikonas&gt;</a></span><span class="message">well, on UEFI, I could just go to my UEFI menu and run hex0.efi kaem-optional.hex0 kaem-optional.efi</span></div><div class="line" id="104619"><span class="nick" style="color:#2e2a4a"><a href="#104619" label="[10:46:19]">&lt;lain_&gt;</a></span><span class="message">yes, but you have to trust all of those now</span></div><div class="line" id="104635"><span class="nick" style="color:#389600"><a href="#104635" label="[10:46:35]">&lt;stikonas&gt;</a></span><span class="message">yes, but on amd64 machines you kind of trust it anyway</span></div><div class="line" id="104656"><span class="nick" style="color:#389600"><a href="#104656" label="[10:46:56]">&lt;stikonas&gt;</a></span><span class="message">well, basically we just need a way to do input/output</span></div><div class="line" id="104715"><span class="nick" style="color:#389600"><a href="#104715" label="[10:47:15]">&lt;stikonas&gt;</a></span><span class="message">on some other system, you could write a small driver in hex0 to do input/output</span></div><div class="line" id="104758"><span class="nick" style="color:#2e2a4a"><a href="#104758" label="[10:47:58]">&lt;lain_&gt;</a></span><span class="message">you absolutely do, however the goal is to reduce what you have to trust as much as possible</span></div><div class="line" id="104837"><span class="nick" style="color:#2e2a4a"><a href="#104837" label="[10:48:37]">&lt;lain_&gt;</a></span><span class="message">I'm just speaking in hypotheticals, certainly hex0.efi is a big step forwards from what we have now</span></div><div class="line" id="104839"><span class="nick" style="color:#389600"><a href="#104839" label="[10:48:39]">&lt;stikonas&gt;</a></span><span class="message">well, then you can get PDB computer and use front panel switches to toggle hex0 into memory</span></div><div class="line" id="104841"><span class="nick" style="color:#389600"><a href="#104841" label="[10:48:41]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="http://dustyoldcomputers.com/pdp8/images-3C8F62C8/R00000254-hp.jpg">http://dustyoldcomputers.com/pdp8/images-3C8F62C8/R00000254-hp.jpg</a> </span></div><div class="line" id="104856"><span class="nick" style="color:#389600"><a href="#104856" label="[10:48:56]">&lt;stikonas&gt;</a></span><span class="message">s/PDB/PDP/</span></div><div class="line" id="104918"><span class="nick" style="color:#2e2a4a"><a href="#104918" label="[10:49:18]">&lt;lain_&gt;</a></span><span class="message">lol awesome domain name</span></div><div class="line" id="104944"><span class="nick" style="color:#389600"><a href="#104944" label="[10:49:44]">&lt;stikonas&gt;</a></span><span class="message">oh, builder-hex0 also has a smaller bootstrap version that can build buidler-hex0 binary from builder-hex0.hex0</span></div><div class="line" id="105002"><span class="nick" style="color:#389600"><a href="#105002" label="[10:50:02]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0</a> </span></div><div class="line" id="105009"><span class="nick" style="color:#389600"><a href="#105009" label="[10:50:09]">&lt;stikonas&gt;</a></span><span class="message">again, don't expect automation in that cae</span></div><div class="line" id="105011"><span class="nick" style="color:#389600"><a href="#105011" label="[10:50:11]">&lt;stikonas&gt;</a></span><span class="message">case</span></div><div class="line" id="105042"><span class="nick" style="color:#2e2a4a"><a href="#105042" label="[10:50:42]">&lt;lain_&gt;</a></span><span class="message">it doesn't need to be automated at that level, just reproducible</span></div><div class="line" id="105335"><span class="nick" style="color:#389600"><a href="#105335" label="[10:53:35]">&lt;stikonas&gt;</a></span><span class="message">everything is fairly trivially reproducible at that level</span></div><div class="line" id="105341"><span class="nick" style="color:#389600"><a href="#105341" label="[10:53:41]">&lt;stikonas&gt;</a></span><span class="message">it's harder to make it non-reproducible</span></div><div class="line" id="105545"><span class="nick" style="color:#2e2a4a"><a href="#105545" label="[10:55:45]">&lt;lain_&gt;</a></span><span class="message">wow a 384 byte kernel seed</span></div><div class="line" id="105547"><span class="nick" style="color:#2e2a4a"><a href="#105547" label="[10:55:47]">&lt;lain_&gt;</a></span><span class="message">that's impressive</span></div><div class="line" id="105737"><span class="nick" style="color:#6b8072"><a href="#105737" label="[10:57:37]">&lt;fossy&gt;</a></span><span class="message">x86 is a bad architecture for trust, lol</span></div><div class="line" id="105802"><span class="nick" style="color:#6b8072"><a href="#105802" label="[10:58:02]">&lt;fossy&gt;</a></span><span class="message">big fat binary blobs, opaque boot process, and ME/whatever AMDs version of ME is</span></div><div class="line" id="105823"><span class="nick" style="color:#2e2a4a"><a href="#105823" label="[10:58:23]">&lt;lain_&gt;</a></span><span class="message">PSP</span></div><div class="line" id="105825"><span class="nick" style="color:#6b8072"><a href="#105825" label="[10:58:25]">&lt;fossy&gt;</a></span><span class="message">last time i checked it out there was a big fat minix os running at highest cpu privilege on Intel</span></div><div class="line" id="105833"><span class="nick" style="color:#6b8072"><a href="#105833" label="[10:58:33]">&lt;fossy&gt;</a></span><span class="message">yeah that one, escaped my name</span></div><div class="line" id="105836"><span class="nick" style="color:#2e2a4a"><a href="#105836" label="[10:58:36]">&lt;lain_&gt;</a></span><span class="message">from 2008 onwards</span></div><div class="line" id="105841"><span class="nick" style="color:#2e2a4a"><a href="#105841" label="[10:58:41]">&lt;lain_&gt;</a></span><span class="message">2006 on enterprise machines</span></div><div class="line" id="105845"><span class="nick" style="color:#6b8072"><a href="#105845" label="[10:58:45]">&lt;fossy&gt;</a></span><span class="message">the name escaped me, that is :P</span></div><div class="line" id="105855"><span class="nick" style="color:#2e2a4a"><a href="#105855" label="[10:58:55]">&lt;lain_&gt;</a></span><span class="message">:D</span></div><div class="line" id="105924"><span class="nick" style="color:#6b8072"><a href="#105924" label="[10:59:24]">&lt;fossy&gt;</a></span><span class="message">i have a refurbished laptop from dell that has a sticker on it &quot;ME Disabled&quot;, rather recent, i haven't ever been able to prove that the sticker is real though</span></div><div class="line" id="105942"><span class="nick" style="color:#6b8072"><a href="#105942" label="[10:59:42]">&lt;fossy&gt;</a></span><span class="message">~2016 laptop iirc</span></div><div class="line" id="105959"><span class="nick" style="color:#2e2a4a"><a href="#105959" label="[10:59:59]">&lt;lain_&gt;</a></span><span class="message">that's something they did for the NSA</span></div><div class="line" id="110012"><span class="nick" style="color:#389600"><a href="#110012" label="[11:00:12]">&lt;stikonas&gt;</a></span><span class="message">well, ME can be supposedly crippled but not completely disabled</span></div><div class="line" id="110024"><span class="nick" style="color:#6b8072"><a href="#110024" label="[11:00:24]">&lt;fossy&gt;</a></span><span class="message">well my locale is AU, wondering if it was returned from some government org possibly</span></div><div class="line" id="110046"><span class="nick" style="color:#2e2a4a"><a href="#110046" label="[11:00:46]">&lt;lain_&gt;</a></span><span class="message">the ME is still present on your laptop, and still provides a key on startup (else your CPU won't boot), but &quot;disabled&quot; means it &quot;promises&quot; not to do anything else</span></div><div class="line" id="110106"><span class="nick" style="color:#6b8072"><a href="#110106" label="[11:01:06]">&lt;fossy&gt;</a></span><span class="message">yeah, you cant get rid of the ME completely nowadays</span></div><div class="line" id="110131"><span class="nick" style="color:#2e2a4a"><a href="#110131" label="[11:01:31]">&lt;lain_&gt;</a></span><span class="message">it doesn't matter where you're from, they added the &quot;disabled&quot; feature so the NSA could &quot;disable&quot; it from their computers lol</span></div><div class="line" id="110134"><span class="nick" style="color:#2e2a4a"><a href="#110134" label="[11:01:34]">&lt;lain_&gt;</a></span><span class="message">or so I've heard</span></div><div class="line" id="110137"><span class="nick" style="color:#6b8072"><a href="#110137" label="[11:01:37]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="110207"><span class="nick" style="color:#2e2a4a"><a href="#110207" label="[11:02:07]">&lt;lain_&gt;</a></span><span class="message">yea, I think 2008 is still the last year it can be fully disabled for Intel</span></div><div class="line" id="110212"><span class="nick" style="color:#2e2a4a"><a href="#110212" label="[11:02:12]">&lt;lain_&gt;</a></span><span class="message">2012 for like one AMD server</span></div><div class="line" id="110356"><span class="nick" style="color:#2e2a4a"><a href="#110356" label="[11:03:56]">&lt;lain_&gt;</a></span><span class="message">speaking of ISA's, I just read that RISC-V explicitly supports the 2008 revision of IEEE-754 (floating point numbers) -the revision that introduced floats which use power 10 instead of 2, meaning they can exactly represent all decimals within their range</span></div><div class="line" id="110437"><span class="nick" style="color:#2e2a4a"><a href="#110437" label="[11:04:37]">&lt;lain_&gt;</a></span><span class="message">Hardware on which the IME and AMD PSP can be fully removed: <a rel="nofollow" href="https://libreboot.org/docs/hardware/">https://libreboot.org/docs/hardware/</a> </span></div><div class="line" id="110457"><span class="nick" style="color:#2e2a4a"><a href="#110457" label="[11:04:57]">&lt;lain_&gt;</a></span><span class="message">RISC-V: <a rel="nofollow" href="https://inst.eecs.berkeley.edu/~cs250/fa11/handouts/riscv-spec.pdf">https://inst.eecs.berkeley.edu/~cs250/fa11/handouts/riscv-spec.pdf</a> </span></div><div class="line" id="110517"><span class="nick" style="color:#2e2a4a"><a href="#110517" label="[11:05:17]">&lt;lain_&gt;</a></span><span class="message">the 6th bullet in the introduction</span></div><div class="line" id="110622"><span class="nick" style="color:#6d2462"><a href="#110622" label="[11:06:22]">&lt;Zopolis4&gt;</a></span><span class="message">apple is normally pretty good with TLA's, no?</span></div><div class="line" id="110631"><span class="nick" style="color:#6d2462"><a href="#110631" label="[11:06:31]">&lt;Zopolis4&gt;</a></span><span class="message">does the M1 have any backdoor chip shenanigans?</span></div><div class="line" id="110654"><span class="nick" style="color:#6b8072"><a href="#110654" label="[11:06:54]">&lt;fossy&gt;</a></span><span class="message">i find it unlikely, but apple isn't known to be particularly open, lol</span></div><div class="line" id="110759"><span class="nick" style="color:#6d2462"><a href="#110759" label="[11:07:59]">&lt;Zopolis4&gt;</a></span><span class="message">i recall there were a variety of cases where apple refused to hand over user data or help the FBI crack iphones</span></div><div class="line" id="110818"><span class="nick" style="color:#389600"><a href="#110818" label="[11:08:18]">&lt;stikonas&gt;</a></span><span class="message">yes, but that doesn't mean they don't have their own backdoors</span></div><div class="line" id="110822"><span class="nick" style="color:#2e2a4a"><a href="#110822" label="[11:08:22]">&lt;lain_&gt;</a></span><span class="message">that was a long time ago, and tbh likely a pr stunt lol</span></div><div class="line" id="110831"><span class="nick" style="color:#2e2a4a"><a href="#110831" label="[11:08:31]">&lt;lain_&gt;</a></span><span class="message">look up CSAM</span></div><div class="line" id="110845"><span class="nick" style="color:#2e2a4a"><a href="#110845" label="[11:08:45]">&lt;lain_&gt;</a></span><span class="message">apple scans all your pictures -on both iOS and MacOS</span></div><div class="line" id="110949"><span class="nick" style="color:#2e2a4a"><a href="#110949" label="[11:09:49]">&lt;lain_&gt;</a></span><span class="message">they added it in iOS 14.3 (as some reverse engineers found), started talking about it a few months later, claimed they would add it in iOS 15, there was massive backlash, &quot;Oh sorry lol, guess we won't&quot;, and never removed it</span></div><div class="line" id="111102"><span class="nick" style="color:#6d2462"><a href="#111102" label="[11:11:02]">&lt;Zopolis4&gt;</a></span><span class="message">oh im talking on a hardware level</span></div><div class="line" id="111109"><span class="nick" style="color:#6d2462"><a href="#111109" label="[11:11:09]">&lt;Zopolis4&gt;</a></span><span class="message">like sure apple has all of my data on my phone</span></div><div class="line" id="111118"><span class="nick" style="color:#6d2462"><a href="#111118" label="[11:11:18]">&lt;Zopolis4&gt;</a></span><span class="message">but i was considering getting Asahi on an M1</span></div><div class="line" id="111127"><span class="nick" style="color:#6d2462"><a href="#111127" label="[11:11:27]">&lt;Zopolis4&gt;</a></span><span class="message">rather than waiting for the Power Notebook</span></div><div class="line" id="111217"><span class="nick" style="color:#2e2a4a"><a href="#111217" label="[11:12:17]">&lt;lain_&gt;</a></span><span class="message">I mean, it's the same company</span></div><div class="line" id="111233"><span class="nick" style="color:#2e2a4a"><a href="#111233" label="[11:12:33]">&lt;lain_&gt;</a></span><span class="message">I'm not aware of anything at the hardware level, but I wouldn't trust it personally</span></div><div class="line" id="142015"><span class="nick" style="color:#234e69"><a href="#142015" label="[14:20:15]">&lt;muurkha&gt;</a></span><span class="message">I am pretty sure that the RISC-V F and D extensions (floating point and double-precision floating point) do not require support for decimal floating point</span></div><div class="line" id="142114"><span class="nick" style="color:#234e69"><a href="#142114" label="[14:21:14]">&lt;muurkha&gt;</a></span><span class="message">lain_: can you link me to the information about iOS 14.3?</span></div><div class="line" id="142827"><span class="nick" style="color:#2e2a4a"><a href="#142827" label="[14:28:27]">&lt;lain_&gt;</a></span><span class="message">muurkha <a rel="nofollow" href="https://libreddit.de/r/MachineLearning/comments/p6hsoh/p_appleneuralhash2onnx_reverseengineered_apple/">https://libreddit.de/r/MachineLearning/comments/p6hsoh/p_appleneuralhash2onnx_reverseengineered_apple/</a> </span></div><div class="line" id="142827"><span class="nick" style="color:#2e2a4a"><a href="#142827" label="[14:28:27]">&lt;lain_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/AsuharietYgvar/AppleNeuralHash2ONNX">https://github.com/AsuharietYgvar/AppleNeuralHash2ONNX</a> </span></div><div class="line" id="142827"><span class="nick" style="color:#2e2a4a"><a href="#142827" label="[14:28:27]">&lt;lain_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://forums.macrumors.com/threads/ios-16-csam-changes.2360117/">https://forums.macrumors.com/threads/ios-16-csam-changes.2360117/</a> </span></div><div class="line" id="142838"><span class="nick" style="color:#234e69"><a href="#142838" label="[14:28:38]">&lt;muurkha&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="142852"><span class="nick" style="color:#2e2a4a"><a href="#142852" label="[14:28:52]">&lt;lain_&gt;</a></span><span class="message">You're welcome!</span></div><div class="line" id="143109"><span class="nick" style="color:#2e2a4a"><a href="#143109" label="[14:31:09]">&lt;lain_&gt;</a></span><span class="message">This was a big deal when it happened.  People found collisions within around a day of the network being extracted, and I remember people would send the collisions to iphone users</span></div><div class="line" id="143111"><span class="nick" style="color:#2e2a4a"><a href="#143111" label="[14:31:11]">&lt;lain_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/AsuharietYgvar/AppleNeuralHash2ONNX/issues/1">https://github.com/AsuharietYgvar/AppleNeuralHash2ONNX/issues/1</a> </span></div><div class="line" id="143115"><span class="nick" style="color:#2e2a4a"><a href="#143115" label="[14:31:15]">&lt;lain_&gt;</a></span><span class="message">^ first collision found</span></div><div class="line" id="025853"><span class="nick" style="color:#6c3d55"><a href="#025853" label="[02:58:53]">&lt;oriansj&gt;</a></span><span class="message">lain_: that is why I use a librebooted x200 running Guix</span></div><div class="line" id="030117"><span class="nick" style="color:#6c3d55"><a href="#030117" label="[03:01:17]">&lt;oriansj&gt;</a></span><span class="message">and why the next major project for me since the User space is being done beautifully by stikonas and fossy and the kernel work is being done well by rickmasters; is to start on the bootstrapping our own hardware.</span></div><div class="line" id="030226"><span class="nick" style="color:#6c3d55"><a href="#030226" label="[03:02:26]">&lt;oriansj&gt;</a></span><span class="message">(so if anyone wants me to buy them an FPGA system to help work on this problem, just let me know where to ship it)</span></div><div class="line" id="030354"><span class="nick" style="color:#6c3d55"><a href="#030354" label="[03:03:54]">&lt;oriansj&gt;</a></span><span class="message">(or if you need a computer to work on bootstrapping of software of any kind, please let me know)</span></div><div class="line" id="111351"><span class="nick" style="color:#80b1d3"><a href="#111351" label="[11:13:51]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: nice commit the one you pushed on ironmeld/boot2now</span></div><div class="line" id="111448"><span class="nick" style="color:#80b1d3"><a href="#111448" label="[11:14:48]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: I saw new constant names '-DCONFIG_MMAP2 -DCONFIG_64BIT_SYSCALLS' while building Fiwix, I guess we soon will talk about them ;-)</span></div><div class="line" id="151118"><span class="nick" style="color:#d9d9d9"><a href="#151118" label="[15:11:18]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Yes, there is a lot to talk about today.</span></div><div class="line" id="151310"><span class="nick" style="color:#d9d9d9"><a href="#151310" label="[15:13:10]">&lt;rickmasters&gt;</a></span><span class="message">The big news is the completion of the first draft of kernel bootstrapping integration into live-bootstrap.</span></div><div class="line" id="151316"><span class="nick" style="color:#d9d9d9"><a href="#151316" label="[15:13:16]">&lt;rickmasters&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/252">https://github.com/fosslinux/live-bootstrap/issues/252</a> </span></div><div class="line" id="151352"><span class="nick" style="color:#d9d9d9"><a href="#151352" label="[15:13:52]">&lt;rickmasters&gt;</a></span><span class="message">I already see I have a lot of lint errors to clean up in my PR :)</span></div><div class="line" id="151627"><span class="nick" style="color:#d9d9d9"><a href="#151627" label="[15:16:27]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Here is where you will find all outstanding change to Fiwix to accommodate live-bootstrap:</span></div><div class="line" id="151634"><span class="nick" style="color:#d9d9d9"><a href="#151634" label="[15:16:34]">&lt;rickmasters&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/rick-masters/Fiwix/tree/fiwix-1.4.0-lb1">https://github.com/rick-masters/Fiwix/tree/fiwix-1.4.0-lb1</a> </span></div><div class="line" id="151808"><span class="nick" style="color:#d9d9d9"><a href="#151808" label="[15:18:08]">&lt;rickmasters&gt;</a></span><span class="message">I still plan on filing issues with explanations for the changes but feel free to take a look ahead of time.</span></div><div class="line" id="151902"><span class="nick" style="color:#d9d9d9"><a href="#151902" label="[15:19:02]">&lt;rickmasters&gt;</a></span><span class="message">I should note that the kernel bootstrapping only works up to building Linux.</span></div><div class="line" id="151949"><span class="nick" style="color:#d9d9d9"><a href="#151949" label="[15:19:49]">&lt;rickmasters&gt;</a></span><span class="message">There is still a final step to kexec/boot Linux that I will be working on next.</span></div><div class="line" id="171405"><span class="nick" style="color:#bc80bd"><a href="#171405" label="[17:14:05]">&lt;bauen1&gt;</a></span><span class="message">rickmasters: that looks interesting, seems like I need to get back into osdev ... perhaps write a builder-hex0 clone in arm for my pine a64 board, after all it has an easy enough UART driver to implement ...</span></div><div class="line" id="171447"><span class="nick" style="color:#bc80bd"><a href="#171447" label="[17:14:47]">&lt;bauen1&gt;</a></span><span class="message">I really need more time in a day ...</span></div><div class="line" id="172830"><span class="nick" style="color:#d9d9d9"><a href="#172830" label="[17:28:30]">&lt;rickmasters&gt;</a></span><span class="message">bauen1: yes, ports to other architectures are still needed. builder-hex0 shows what functionality needs to be there for bootstrapping up to tcc.</span></div><div class="line" id="173340"><span class="nick" style="color:#bc80bd"><a href="#173340" label="[17:33:40]">&lt;bauen1&gt;</a></span><span class="message">rickmasters: how useful would be actual drivers instead of relying on the BIOS  ? e.g. a tty driver using the VGA Framebuffer would be relatively straightforward, a read-only / read-write hard disk driver a bit less</span></div><div class="line" id="173725"><span class="nick" style="color:#d9d9d9"><a href="#173725" label="[17:37:25]">&lt;rickmasters&gt;</a></span><span class="message">bauen1: live-bootstrap runs without graphics so it would be a serial port driver I think.</span></div><div class="line" id="173826"><span class="nick" style="color:#d9d9d9"><a href="#173826" label="[17:38:26]">&lt;rickmasters&gt;</a></span><span class="message">bauen1: using the BIOS for &quot;console&quot; output supports screen output on hardware AND allows qemu to redirect that to text output as well.</span></div><div class="line" id="174029"><span class="nick" style="color:#d9d9d9"><a href="#174029" label="[17:40:29]">&lt;rickmasters&gt;</a></span><span class="message">bauen1: but I haven't put a lot of thought into other options. BIOS output was the easiest because it was common in tutorials I found when starting out.</span></div><div class="line" id="182653"><span class="nick" style="color:#80b1d3"><a href="#182653" label="[18:26:53]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: I'll take a look to these list of changes: &lt;<a rel="nofollow" href="https://github.com/mikaku/Fiwix/compare/master...rick-masters:Fiwix:fiwix-1.4.0-lb1">https://github.com/mikaku/Fiwix/compare/master...rick-masters:Fiwix:fiwix-1.4.0-lb1</a>&gt; </span></div><div class="line" id="220719"><span class="nick" style="color:#6b8072"><a href="#220719" label="[22:07:19]">&lt;fossy&gt;</a></span><span class="message">rickmasters: this is very exciting! i'm reviewing that shortly</span></div><div class="line" id="220728"><span class="nick" style="color:#6b8072"><a href="#220728" label="[22:07:28]">&lt;fossy&gt;</a></span><span class="message">first i'll review binutils 2.30</span></div><div class="line" id="234036"><span class="nick" style="color:#8dd3c7"><a href="#234036" label="[23:40:36]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: I can add copyright year though current suggestions are not to change it afterwards <a rel="nofollow" href="https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code">https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code</a> </span></div><div class="line" id="061833"><span class="nick" style="color:#6b8072"><a href="#061833" label="[06:18:33]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: ok, that sounds fine to me</span></div><div class="line" id="061923"><span class="nick" style="color:#6b8072"><a href="#061923" label="[06:19:23]">&lt;fossy&gt;</a></span><span class="message">tbh, at the end of the day, it's likely rather inconsequential, but maybe let's just follow <a rel="nofollow" href="https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code#tldr">https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code#tldr</a>  this format</span></div><div class="line" id="061935"><span class="nick" style="color:#6b8072"><a href="#061935" label="[06:19:35]">&lt;fossy&gt;</a></span><span class="message">whoever wrote this appears to know what they're talking about</span></div><div class="line" id="075518"><span class="nick" style="color:#8dd3c7"><a href="#075518" label="[07:55:18]">&lt;stikonas[m]&gt;</a></span><span class="message">bauen1: I guess it would be sufficient to just implement read only device input on systems without BIOS, though you won't have an easy way to debug issues unless you also have some output, e.g. console</span></div><div class="line" id="075637"><span class="nick" style="color:#8dd3c7"><a href="#075637" label="[07:56:37]">&lt;stikonas[m]&gt;</a></span><span class="message">And then have more stuff in 2nd kernel</span></div><br /></div></body></html>