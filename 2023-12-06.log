<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000020"><span class="nick" style="color:#389600"><a href="#000020" label="[00:00:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I wonder if the VisionFive is correctly clocking the RAM</span></div><div class="line" id="000103"><span class="nick" style="color:#389600"><a href="#000103" label="[00:01:03]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Rock 5B is known to underclock the RAM to 528MHz when it's not sensing load</span></div><div class="line" id="000214"><span class="nick" style="color:#389600"><a href="#000214" label="[00:02:14]">&lt;GoogulatorMobile&gt;</a></span><span class="message">If the VisionFive does the same, it drops theoretical rates to 4.2GB/s</span></div><div class="line" id="000407"><span class="nick" style="color:#8dd3c7"><a href="#000407" label="[00:04:07]">&lt;Googulator&gt;</a></span><span class="message">StarFive's AVL also lists the H54G56BYYVX046 as supported</span></div><div class="line" id="000408"><span class="nick" style="color:#2e2a4a"><a href="#000408" label="[00:04:08]">&lt;stikonas&gt;</a></span><span class="message">yeah, possibly newer kernel will speed it up at some point later...</span></div><div class="line" id="000427"><span class="nick" style="color:#8dd3c7"><a href="#000427" label="[00:04:27]">&lt;Googulator&gt;</a></span><span class="message">that's a 046 (=4266MT/s) part</span></div><div class="line" id="024617"><span class="nick" style="color:#6b8072"><a href="#024617" label="[02:46:17]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well modern hardware doesn't have as secure boundaries as we like to imagine. And Neural net branch predictors do wonders for pipeline fill rates/IPC averages</span></div><div class="line" id="025031"><span class="nick" style="color:#80b1d3"><a href="#025031" label="[02:50:31]">&lt;muurkha&gt;</a></span><span class="message">how big a difference do they make in practice?</span></div><div class="line" id="043031"><span class="nick" style="color:#8dd3c7"><a href="#043031" label="[04:30:31]">&lt;Googulator&gt;</a></span><span class="message">Looks like I may have finally gotten live-bootstrap with simplify to work fully; building gcc-4.7.4 as we speak</span></div><div class="line" id="043059"><span class="nick" style="color:#8dd3c7"><a href="#043059" label="[04:30:59]">&lt;Googulator&gt;</a></span><span class="message">(bare metal system is lagging behind, it's still creating initramfs for Linux, but I've seen that succeed already)</span></div><div class="line" id="044223"><span class="nick" style="color:#8dd3c7"><a href="#044223" label="[04:42:23]">&lt;Googulator&gt;</a></span><span class="message">code used: <a rel="nofollow" href="https://gist.github.com/Googulator/ee6d7d4fd8a544b81e6a7db079210d33">https://gist.github.com/Googulator/ee6d7d4fd8a544b81e6a7db079210d33</a>  on top of <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/8ed2e010203bb08081250ea1e0f6b5ae4432953c">https://github.com/fosslinux/live-bootstrap/commit/8ed2e010203bb08081250ea1e0f6b5ae4432953c</a> </span></div><div class="line" id="044243"><span class="nick" style="color:#8dd3c7"><a href="#044243" label="[04:42:43]">&lt;Googulator&gt;</a></span><span class="message">bare metal system has now booted into Linux as well</span></div><div class="line" id="044248"><span class="nick" style="color:#8dd3c7"><a href="#044248" label="[04:42:48]">&lt;Googulator&gt;</a></span><span class="message">currently building curl</span></div><div class="line" id="044631"><span class="nick" style="color:#8dd3c7"><a href="#044631" label="[04:46:31]">&lt;Googulator&gt;</a></span><span class="message">Network is working on bare metal!</span></div><div class="line" id="044655"><span class="nick" style="color:#8dd3c7"><a href="#044655" label="[04:46:55]">&lt;Googulator&gt;</a></span><span class="message">(network was the final issue to tackle, or rather, curl not working properly)</span></div><div class="line" id="050149"><span class="nick" style="color:#6d2462"><a href="#050149" label="[05:01:49]">&lt;pabs3&gt;</a></span><span class="message">hmm, a VM crashing the host OS sounds like a pretty bad security bug :(</span></div><div class="line" id="050212"><span class="nick" style="color:#6d2462"><a href="#050212" label="[05:02:12]">&lt;pabs3&gt;</a></span><span class="message">if its reproducible, would be a good idea to report that</span></div><div class="line" id="051728"><span class="nick" style="color:#80b1d3"><a href="#051728" label="[05:17:28]">&lt;muurkha&gt;</a></span><span class="message">such a bug would not be that surprising though</span></div><div class="line" id="051804"><span class="nick" style="color:#80b1d3"><a href="#051804" label="[05:18:04]">&lt;muurkha&gt;</a></span><span class="message">if there were only four programs that people ever ran in practice on the JVM, you wouldn't expect it to be very well tested</span></div><div class="line" id="051823"><span class="nick" style="color:#80b1d3"><a href="#051823" label="[05:18:23]">&lt;muurkha&gt;</a></span><span class="message">VMs are mostly tested with a very small set of OSes: Linux, FreeBSD, FreeDOS, and Microsoft Windows</span></div><div class="line" id="063845"><span class="nick" style="color:#234e69"><a href="#063845" label="[06:38:45]">&lt;fossy&gt;</a></span><span class="message">GoogulatorMobile: ah, nice catch for script-generator; useful snippet too, thanks</span></div><div class="line" id="064015"><span class="nick" style="color:#234e69"><a href="#064015" label="[06:40:15]">&lt;fossy&gt;</a></span><span class="message">GoogulatorMobile: re your host system crashes, do you possibly have bad memory/too highly clocked for your cpu memory?</span></div><div class="line" id="072756"><span class="nick" style="color:#389600"><a href="#072756" label="[07:27:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Shouldn't be RAM, as this is a Lenovo laptop that comes stock with DDR5-5600 memory</span></div><div class="line" id="072839"><span class="nick" style="color:#389600"><a href="#072839" label="[07:28:39]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Also, it never crashes if I boot into Linux and run bootstrap there</span></div><div class="line" id="072845"><span class="nick" style="color:#389600"><a href="#072845" label="[07:28:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Only with WSL2</span></div><div class="line" id="072907"><span class="nick" style="color:#389600"><a href="#072907" label="[07:29:07]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Probably some Hyper-V vs KVM interaction bug</span></div><div class="line" id="072951"><span class="nick" style="color:#389600"><a href="#072951" label="[07:29:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Hyper-V vs VirtualBox could infamously crash the host system</span></div><div class="line" id="073051"><span class="nick" style="color:#389600"><a href="#073051" label="[07:30:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">On affected systems, starting a VirtualBox VM inside a Hyper-V VM would kill the host</span></div><div class="line" id="073206"><span class="nick" style="color:#234e69"><a href="#073206" label="[07:32:06]">&lt;fossy&gt;</a></span><span class="message">ahhh, ok, yes nested virtualization could do it</span></div><div class="line" id="122832"><span class="nick" style="color:#6c3d55"><a href="#122832" label="[12:28:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Hmm, a thought for bootstrapping on newer systems with UEFI. Rather than porting meslibc to it, maybe we can write efi loader in M2 C that reads all the sources from disk (ESP) using UEFI calls, creates builder-hex0 type disk image and then create some builder-hex0 style Posix kernel that does I/O in memory rather than via BIOS calls. It could also be written in M2 and be either 32 or 64 bits...</span></div><div class="line" id="132404"><span class="nick" style="color:#d9d9d9"><a href="#132404" label="[13:24:04]">&lt;mihi&gt;</a></span><span class="message">Googulator, I wanted to ask what -accel mode you were using? Qemu with -accel hax reproducibly bluescreens Windows 11 hosts when running certain workload inside 32-bit Hurd in the VM. Running the same workload inside a qemu with -accel kvm inside a 64-bit Linux vm running in hyper-v on the same Windows 11 host (using nested virtualization), nothing crashes. Too bad there is no Windows 11 configuration officially</span></div><div class="line" id="132404"><span class="nick" style="color:#d9d9d9"><a href="#132404" label="[13:24:04]">&lt;mihi&gt;</a></span><span class="message">supported by HAXM. On a supported Win10 configuration (I don't remember which Windows build, but it was with QEMU 7), no bluescreen. But since HAXM is no longer actively developed and getting a supported configuration was always tricky (you need different HAXM version and matching QEMU version depending on Windows build number), I stopped using that configuration for anything.</span></div><div class="line" id="132441"><span class="nick" style="color:#d9d9d9"><a href="#132441" label="[13:24:41]">&lt;mihi&gt;</a></span><span class="message">With nested virtualization inside Hyper-V, so far I never crashed either host or intermediate host. Guest crashes do happen though, more often if Windows Defender Core Isolation is enabled on the (outer) host.</span></div><div class="line" id="132612"><span class="nick" style="color:#d9d9d9"><a href="#132612" label="[13:26:12]">&lt;mihi&gt;</a></span><span class="message">Nested virtualiation does not work for me if the intermediate host is 32-bit though. And since a recent Windows update, I cannot run any 32-bit Linux VMs any more inside Hyper-V (tried kernels/live media back to 2009) if the virtual machine has more than one vCPU.</span></div><div class="line" id="132723"><span class="nick" style="color:#d9d9d9"><a href="#132723" label="[13:27:23]">&lt;mihi&gt;</a></span><span class="message">(sorry for the off-topic rant)</span></div><div class="line" id="133116"><span class="nick" style="color:#d9d9d9"><a href="#133116" label="[13:31:16]">&lt;mihi&gt;</a></span><span class="message">janneke: mes 0.26 configure --with-bootstrap (without --with-cheating) fails for me with &quot;unhandled exception: unbound-variable: (srfi-9-struct.mes)&quot;. Running on 64-bit debian inside WSL if it matters.</span></div><div class="line" id="133124"><span class="nick" style="color:#d9d9d9"><a href="#133124" label="[13:31:24]">&lt;mihi&gt;</a></span><span class="message">with cheating it works.</span></div><div class="line" id="133807"><span class="nick" style="color:#d9d9d9"><a href="#133807" label="[13:38:07]">&lt;mihi&gt;</a></span><span class="message">by works, I mean it builds and then segfaults when running mes-mescc.</span></div><div class="line" id="134012"><span class="nick" style="color:#d9d9d9"><a href="#134012" label="[13:40:12]">&lt;mihi&gt;</a></span><span class="message">I guess I must be doing something wrong. Even with configure without arguments and make is not able to create valid mes binary... :(</span></div><div class="line" id="134215"><span class="nick" style="color:#d9d9d9"><a href="#134215" label="[13:42:15]">&lt;mihi&gt;</a></span><span class="message">(building off the v0.26 tag from Savannah Git if that matters)</span></div><div class="line" id="134308"><span class="nick" style="color:#bc80bd"><a href="#134308" label="[13:43:08]">&lt;janneke&gt;</a></span><span class="message">mihi: the make stage fails, right?</span></div><div class="line" id="134332"><span class="nick" style="color:#bc80bd"><a href="#134332" label="[13:43:32]">&lt;janneke&gt;</a></span><span class="message">ACTION is trying --with-bootstrap now</span></div><div class="line" id="134411"><span class="nick" style="color:#d9d9d9"><a href="#134411" label="[13:44:11]">&lt;mihi&gt;</a></span><span class="message">without bootstrap, make files while doing &quot;CC crt1.c&quot;</span></div><div class="line" id="134418"><span class="nick" style="color:#d9d9d9"><a href="#134418" label="[13:44:18]">&lt;mihi&gt;</a></span><span class="message">s/ile/ail/g</span></div><div class="line" id="134603"><span class="nick" style="color:#bc80bd"><a href="#134603" label="[13:46:03]">&lt;janneke&gt;</a></span><span class="message">hmm, works for me</span></div><div class="line" id="134630"><span class="nick" style="color:#d9d9d9"><a href="#134630" label="[13:46:30]">&lt;mihi&gt;</a></span><span class="message">janneke, can you run bin/mes-mescc without arguments?</span></div><div class="line" id="134828"><span class="nick" style="color:#d9d9d9"><a href="#134828" label="[13:48:28]">&lt;mihi&gt;</a></span><span class="message">system dependencies (guile, nyacc, etc.) should not have been changed from 0.25?</span></div><div class="line" id="134829"><span class="nick" style="color:#bc80bd"><a href="#134829" label="[13:48:29]">&lt;janneke&gt;</a></span><span class="message">i'm not there yet, just passed CC &quot;crt1.c&quot;</span></div><div class="line" id="134852"><span class="nick" style="color:#bc80bd"><a href="#134852" label="[13:48:52]">&lt;janneke&gt;</a></span><span class="message">that's right, no dependency changes since 0.25</span></div><div class="line" id="134923"><span class="nick" style="color:#bc80bd"><a href="#134923" label="[13:49:23]">&lt;janneke&gt;</a></span><span class="message">possibly the bootstrap does yet another round where that fails</span></div><div class="line" id="134928"><span class="nick" style="color:#6b8072"><a href="#134928" label="[13:49:28]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well the research papers on neural net branch predictors show a much lower miss rate; which on longer pipeleines means considerably less wasted executions and clock cycles. On shorter pipelines the benefit is much smaller and might not be worth the transistor costs.</span></div><div class="line" id="135107"><span class="nick" style="color:#d9d9d9"><a href="#135107" label="[13:51:07]">&lt;mihi&gt;</a></span><span class="message">now tried with cheating without bootsttrap, and the resulting mes-gcc binary fails with &quot;unhandled exception: unbound-variable: (srfi-9-struct.mes)&quot;. Now will cross-check with 0.25 to make sure I did not break anything locally.</span></div><div class="line" id="135351"><span class="nick" style="color:#80b1d3"><a href="#135351" label="[13:53:51]">&lt;muurkha&gt;</a></span><span class="message">oriansj: how much lower?</span></div><div class="line" id="135434"><span class="nick" style="color:#80b1d3"><a href="#135434" label="[13:54:34]">&lt;muurkha&gt;</a></span><span class="message">there are too many things called M2</span></div><div class="line" id="135456"><span class="nick" style="color:#6b8072"><a href="#135456" label="[13:54:56]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://hps.ece.utexas.edu/pub/BranchNet_Micro2020.pdf">https://hps.ece.utexas.edu/pub/BranchNet_Micro2020.pdf</a> </span></div><div class="line" id="135514"><span class="nick" style="color:#80b1d3"><a href="#135514" label="[13:55:14]">&lt;muurkha&gt;</a></span><span class="message">I learned about another one yesterday: an SSD connector standard</span></div><div class="line" id="135536"><span class="nick" style="color:#d9d9d9"><a href="#135536" label="[13:55:36]">&lt;mihi&gt;</a></span><span class="message">muurkha, that is usually called M.2 (if you do not want to call it NGFF)</span></div><div class="line" id="135556"><span class="nick" style="color:#d9d9d9"><a href="#135556" label="[13:55:56]">&lt;mihi&gt;</a></span><span class="message">so only 1/10th of M2 :)</span></div><div class="line" id="135619"><span class="nick" style="color:#80b1d3"><a href="#135619" label="[13:56:19]">&lt;muurkha&gt;</a></span><span class="message">haha</span></div><div class="line" id="135736"><span class="nick" style="color:#6b8072"><a href="#135736" label="[13:57:36]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well that was kind of the idea, M2-Planet is supposed to be the most easy to replace and forget about C compiler ever made</span></div><div class="line" id="135744"><span class="nick" style="color:#80b1d3"><a href="#135744" label="[13:57:44]">&lt;muurkha&gt;</a></span><span class="message">oriansj: this paper suggests that it reduces branch mispredictions by 7.6% on SPECint 2017.  is that what you meant by &quot;very large&quot;?</span></div><div class="line" id="135759"><span class="nick" style="color:#d9d9d9"><a href="#135759" label="[13:57:59]">&lt;mihi&gt;</a></span><span class="message">janneke,  sorry for the noise, I must have broken something locally, 0.25 also does not build any more for me :(</span></div><div class="line" id="135928"><span class="nick" style="color:#6b8072"><a href="#135928" label="[13:59:28]">&lt;oriansj&gt;</a></span><span class="message">muurkha: in terms branch prediction yes; as the last 10% is a great deal harder to get than the 90% correct branch prediction rate</span></div><div class="line" id="141005"><span class="nick" style="color:#80b1d3"><a href="#141005" label="[14:10:05]">&lt;muurkha&gt;</a></span><span class="message">yes.  but this is maybe 0.8 of the last 10%</span></div><div class="line" id="141042"><span class="nick" style="color:#80b1d3"><a href="#141042" label="[14:10:42]">&lt;muurkha&gt;</a></span><span class="message">or 0.4 of the last 5%</span></div><div class="line" id="141230"><span class="nick" style="color:#80b1d3"><a href="#141230" label="[14:12:30]">&lt;muurkha&gt;</a></span><span class="message">all this insecure overcomplicated branch prediction bullshit makes me want to do a barrel processor</span></div><div class="line" id="141654"><span class="nick" style="color:#d9d9d9"><a href="#141654" label="[14:16:54]">&lt;mihi&gt;</a></span><span class="message">janneke, entirely my fault indeed. Had some problems with symlinks in repos so did &quot;git config -g core.symlink=false&quot;, and forgot about it. Now my git did not checkout symlinks any more (instead plain files), but srfi-9 is a symlink. Sorry again.</span></div><div class="line" id="141727"><span class="nick" style="color:#d9d9d9"><a href="#141727" label="[14:17:27]">&lt;mihi&gt;</a></span><span class="message">&quot;core.symlinks&quot; rather.</span></div><div class="line" id="142322"><span class="nick" style="color:#bc80bd"><a href="#142322" label="[14:23:22]">&lt;janneke&gt;</a></span><span class="message">mihi: check, np</span></div><div class="line" id="144533"><span class="nick" style="color:#389600"><a href="#144533" label="[14:45:33]">&lt;GoogulatorMobile&gt;</a></span><span class="message">mihi: it's &quot;-enable-kvm&quot;, inside Ubuntu-on-WSL2.</span></div><div class="line" id="145151"><span class="nick" style="color:#d9d9d9"><a href="#145151" label="[14:51:51]">&lt;mihi&gt;</a></span><span class="message">GoogulatorMobile, was not even aware that WSL2 supports nested virtualization... So it should be similar to KVM inside Hyper-V. Do you use Windows Defender Core Isolation?</span></div><div class="line" id="145217"><span class="nick" style="color:#389600"><a href="#145217" label="[14:52:17]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Core Isolation is disabled, IIRC.</span></div><div class="line" id="145314"><span class="nick" style="color:#d9d9d9"><a href="#145314" label="[14:53:14]">&lt;mihi&gt;</a></span><span class="message">so in case you can reproduce, Microsoft may be interested. :) (In case you can reproduce on KVM on bare metal, KVM might also be interested...)</span></div><div class="line" id="151424"><span class="nick" style="color:#d9d9d9"><a href="#151424" label="[15:14:24]">&lt;mihi&gt;</a></span><span class="message">GoogulatorMobile, Googulator: Some performance stats: On my machine, building mes 0.26 --with-bootstrap using Guile takes 45 seconds for me while --with-bootstrap using Mes takes 21 minutes (about factor 20). Mes 0.25 was about 40 seconds using Guile and 12 minutes using Mes (about factor 18). In both cases, mescc is used to build both meslib and mes-mescc, in one case mescc runs on mes-gcc and in the other it</span></div><div class="line" id="151424"><span class="nick" style="color:#d9d9d9"><a href="#151424" label="[15:14:24]">&lt;mihi&gt;</a></span><span class="message">runs on Guile.</span></div><div class="line" id="151530"><span class="nick" style="color:#d9d9d9"><a href="#151530" label="[15:15:30]">&lt;mihi&gt;</a></span><span class="message">But that does not necessarily mean mes is at fault. Mescc (or rather nyacc) is notorious for repeatedly iterating over huge alists (instead of hash-tables), and assoc-ref, assq-ref and friends are heavily optimized in Guile and not in Mes.</span></div><div class="line" id="151640"><span class="nick" style="color:#d9d9d9"><a href="#151640" label="[15:16:40]">&lt;mihi&gt;</a></span><span class="message">For 0.25 I built a mescc version where all assoc and friends inside mescc are replaced by hash tables (not so easy as mes 0.25 only supported strings and symbols as hash table keys), but it did not make any noticable difference. Nyacc has about 100 usages of assoc functions too, and I did not try to replace those so far.</span></div><div class="line" id="151757"><span class="nick" style="color:#d9d9d9"><a href="#151757" label="[15:17:57]">&lt;mihi&gt;</a></span><span class="message">(instead of factor 20 I wanted to write factor 28)</span></div><div class="line" id="163853"><span class="nick" style="color:#389600"><a href="#163853" label="[16:38:53]">&lt;GoogulatorMobile&gt;</a></span><span class="message">fossy: successful bootstrap on both baremetal and qemu using the patch I posted earlier!</span></div><div class="line" id="163916"><span class="nick" style="color:#389600"><a href="#163916" label="[16:39:16]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Note that the snippet has a major weakness - it can't handle things like redirection or piping</span></div><div class="line" id="164132"><span class="nick" style="color:#389600"><a href="#164132" label="[16:41:32]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But there's a workaround: &quot;tee tmp.sh&quot;, Enter, Ctrl+D, type any command that doesn't work via the snippet shell itself, Enter, Ctrl+D, &quot;bash tmp sh&quot;, Enter, Ctrl+D, &quot;rm tmp.sh&quot;, Enter, Ctrl+D</span></div><div class="line" id="164226"><span class="nick" style="color:#389600"><a href="#164226" label="[16:42:26]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Indeed, you can write entire complex shell scripts to file using &quot;tee&quot; this way, and redirection works within those</span></div><div class="line" id="210817"><span class="nick" style="color:#6c3d55"><a href="#210817" label="[21:08:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Where are you using tee? Before interactive bash?</span></div><div class="line" id="221804"><span class="nick" style="color:#8dd3c7"><a href="#221804" label="[22:18:04]">&lt;Googulator&gt;</a></span><span class="message">fossy: testing bootstrap from a USB drive now (not the trusted one yet, just a plain old cheap Kingston), it now does boot with the new builder-hex0 stages, but later in early Linux, I did encounter an issue: on USB, /dev/sda doesn't show up immediately</span></div><div class="line" id="221826"><span class="nick" style="color:#8dd3c7"><a href="#221826" label="[22:18:26]">&lt;Googulator&gt;</a></span><span class="message">needing a wait loop in move_disk similar to the one in get_network</span></div><div class="line" id="221903"><span class="nick" style="color:#8dd3c7"><a href="#221903" label="[22:19:03]">&lt;Googulator&gt;</a></span><span class="message">luckily, I had the Bash trap enabled, so I didn't have to restart, it just needed manual intervention</span></div><div class="line" id="222643"><span class="nick" style="color:#2e2a4a"><a href="#222643" label="[22:26:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: looks like we overdid zeroing of uefi headers... I'll have to try to find out what causes it not to be recognized on one of my machines</span></div><div class="line" id="222726"><span class="nick" style="color:#2e2a4a"><a href="#222726" label="[22:27:26]">&lt;stikonas&gt;</a></span><span class="message">Googulator: nice progress!</span></div><div class="line" id="222751"><span class="nick" style="color:#8dd3c7"><a href="#222751" label="[22:27:51]">&lt;Googulator&gt;</a></span><span class="message">And all of this is with fossy's simplified code</span></div><div class="line" id="222814"><span class="nick" style="color:#8dd3c7"><a href="#222814" label="[22:28:14]">&lt;Googulator&gt;</a></span><span class="message">well, an older version of it - waiting for a definitive &quot;no longer draft&quot; version before I port it again</span></div><div class="line" id="222853"><span class="nick" style="color:#2e2a4a"><a href="#222853" label="[22:28:53]">&lt;stikonas&gt;</a></span><span class="message">I was briefly looking at UEFI bootstrap now...</span></div><div class="line" id="222919"><span class="nick" style="color:#2e2a4a"><a href="#222919" label="[22:29:19]">&lt;stikonas&gt;</a></span><span class="message">first I need to fix current state stage0-uefi on the machine that I've got</span></div><div class="line" id="222947"><span class="nick" style="color:#8dd3c7"><a href="#222947" label="[22:29:47]">&lt;Googulator&gt;</a></span><span class="message">maybe it would make more sense to port builder-hex0 to uefi, and then proceed with the posix bootstrap path</span></div><div class="line" id="222957"><span class="nick" style="color:#2e2a4a"><a href="#222957" label="[22:29:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, that was what I was thinking earlier today</span></div><div class="line" id="223005"><span class="nick" style="color:#2e2a4a"><a href="#223005" label="[22:30:05]">&lt;stikonas&gt;</a></span><span class="message">but even current stage0-uefi doesn't run on all machines</span></div><div class="line" id="223026"><span class="nick" style="color:#2e2a4a"><a href="#223026" label="[22:30:26]">&lt;stikonas&gt;</a></span><span class="message">it runs on my very old laptop (but that laptop also has legacy mode, so can just use builder-hex0)</span></div><div class="line" id="223038"><span class="nick" style="color:#2e2a4a"><a href="#223038" label="[22:30:38]">&lt;stikonas&gt;</a></span><span class="message">but the newer one with coreboot and edk2 payload only supports UEFI</span></div><div class="line" id="223101"><span class="nick" style="color:#2e2a4a"><a href="#223101" label="[22:31:01]">&lt;stikonas&gt;</a></span><span class="message">and doesn't even run any of the efi apps from stage0-uefi (except from Development folder)</span></div><div class="line" id="223112"><span class="nick" style="color:#2e2a4a"><a href="#223112" label="[22:31:12]">&lt;stikonas&gt;</a></span><span class="message">so must be something with the PE32 header...</span></div><div class="line" id="223121"><span class="nick" style="color:#8dd3c7"><a href="#223121" label="[22:31:21]">&lt;Googulator&gt;</a></span><span class="message">you can also run a uefi environment within your OS, compiled straight from edk2</span></div><div class="line" id="223122"><span class="nick" style="color:#2e2a4a"><a href="#223122" label="[22:31:22]">&lt;stikonas&gt;</a></span><span class="message">after that I'm thinking that we could write a loader</span></div><div class="line" id="223128"><span class="nick" style="color:#8dd3c7"><a href="#223128" label="[22:31:28]">&lt;Googulator&gt;</a></span><span class="message">and that can then be debugged</span></div><div class="line" id="223139"><span class="nick" style="color:#8dd3c7"><a href="#223139" label="[22:31:39]">&lt;Googulator&gt;</a></span><span class="message">IIRC it's called EmulatorPkg</span></div><div class="line" id="223143"><span class="nick" style="color:#2e2a4a"><a href="#223143" label="[22:31:43]">&lt;stikonas&gt;</a></span><span class="message">that reads all the sources and creates builder-hex0 style &quot;initramfs&quot;, loads a port of builder-hex0 with src disk into memory</span></div><div class="line" id="223202"><span class="nick" style="color:#2e2a4a"><a href="#223202" label="[22:32:02]">&lt;stikonas&gt;</a></span><span class="message">Googulator: I could also just bisect the header...</span></div><div class="line" id="223222"><span class="nick" style="color:#2e2a4a"><a href="#223222" label="[22:32:22]">&lt;stikonas&gt;</a></span><span class="message">or maybe simply go over the fields and see which field causes the hang when it is zeroed</span></div><div class="line" id="223234"><span class="nick" style="color:#2e2a4a"><a href="#223234" label="[22:32:34]">&lt;stikonas&gt;</a></span><span class="message">we have a good working PE32 header from clang</span></div><div class="line" id="223240"><span class="nick" style="color:#2e2a4a"><a href="#223240" label="[22:32:40]">&lt;stikonas&gt;</a></span><span class="message">(just not in hex0 form with comments)</span></div><div class="line" id="223242"><span class="nick" style="color:#8dd3c7"><a href="#223242" label="[22:32:42]">&lt;Googulator&gt;</a></span><span class="message">As for making an srcfs, wouldn't it be better to just let the port of builder-hex0 access the UEFI ESP file system?</span></div><div class="line" id="223302"><span class="nick" style="color:#2e2a4a"><a href="#223302" label="[22:33:02]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps</span></div><div class="line" id="223310"><span class="nick" style="color:#8dd3c7"><a href="#223310" label="[22:33:10]">&lt;Googulator&gt;</a></span><span class="message">you can then just put sources in the ESP</span></div><div class="line" id="223320"><span class="nick" style="color:#2e2a4a"><a href="#223320" label="[22:33:20]">&lt;stikonas&gt;</a></span><span class="message">but how can we implement rest of the stuff?</span></div><div class="line" id="223323"><span class="nick" style="color:#2e2a4a"><a href="#223323" label="[22:33:23]">&lt;stikonas&gt;</a></span><span class="message">syscalls, etc...</span></div><div class="line" id="223332"><span class="nick" style="color:#8dd3c7"><a href="#223332" label="[22:33:32]">&lt;Googulator&gt;</a></span><span class="message">Just keep the builder-hex0 design for those</span></div><div class="line" id="223335"><span class="nick" style="color:#2e2a4a"><a href="#223335" label="[22:33:35]">&lt;stikonas&gt;</a></span><span class="message">maybe we can, I just haven't thought though it</span></div><div class="line" id="223417"><span class="nick" style="color:#8dd3c7"><a href="#223417" label="[22:34:17]">&lt;Googulator&gt;</a></span><span class="message">Anything that deals with files or memory allocation can be proxied through to UEFI, the rest handled internally like builder-hex0 does now</span></div><div class="line" id="223435"><span class="nick" style="color:#2e2a4a"><a href="#223435" label="[22:34:35]">&lt;stikonas&gt;</a></span><span class="message">though the nice thing about starting with current stage0-uefi stages and postponing builder-hex0 to a bit later, is that we can then write it in M0 or C/M2</span></div><div class="line" id="223452"><span class="nick" style="color:#8dd3c7"><a href="#223452" label="[22:34:52]">&lt;Googulator&gt;</a></span><span class="message">right</span></div><div class="line" id="223524"><span class="nick" style="color:#8dd3c7"><a href="#223524" label="[22:35:24]">&lt;Googulator&gt;</a></span><span class="message">also, uefi will need a real kexec system call (or equivalent)</span></div><div class="line" id="223533"><span class="nick" style="color:#2e2a4a"><a href="#223533" label="[22:35:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, exactly...</span></div><div class="line" id="223543"><span class="nick" style="color:#8dd3c7"><a href="#223543" label="[22:35:43]">&lt;Googulator&gt;</a></span><span class="message">or some other way to call ExecBootServices at the right time</span></div><div class="line" id="223549"><span class="nick" style="color:#2e2a4a"><a href="#223549" label="[22:35:49]">&lt;stikonas&gt;</a></span><span class="message">oh, there is also an issue</span></div><div class="line" id="223554"><span class="nick" style="color:#8dd3c7"><a href="#223554" label="[22:35:54]">&lt;Googulator&gt;</a></span><span class="message">IMO starting Fiwix is the right time for that</span></div><div class="line" id="223554"><span class="nick" style="color:#2e2a4a"><a href="#223554" label="[22:35:54]">&lt;stikonas&gt;</a></span><span class="message">UEFI runs only in 64-bit mode</span></div><div class="line" id="223609"><span class="nick" style="color:#2e2a4a"><a href="#223609" label="[22:36:09]">&lt;stikonas&gt;</a></span><span class="message">so we would have to fix 64-bit bootstrap steps</span></div><div class="line" id="223620"><span class="nick" style="color:#2e2a4a"><a href="#223620" label="[22:36:20]">&lt;stikonas&gt;</a></span><span class="message">which in practive is just first build of tcc</span></div><div class="line" id="223640"><span class="nick" style="color:#8dd3c7"><a href="#223640" label="[22:36:40]">&lt;Googulator&gt;</a></span><span class="message">Isn't it possible to drop back to 32-bit outside of UEFI calls, like how we now switch between real and protected mode?</span></div><div class="line" id="223650"><span class="nick" style="color:#2e2a4a"><a href="#223650" label="[22:36:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps it is possible</span></div><div class="line" id="223703"><span class="nick" style="color:#2e2a4a"><a href="#223703" label="[22:37:03]">&lt;stikonas&gt;</a></span><span class="message">I'm not that familiar with these very low level x86_64 things</span></div><div class="line" id="223730"><span class="nick" style="color:#8dd3c7"><a href="#223730" label="[22:37:30]">&lt;Googulator&gt;</a></span><span class="message">The Linux kernel can certainly access UEFI runtime services of mismatched bitness</span></div><div class="line" id="223740"><span class="nick" style="color:#2e2a4a"><a href="#223740" label="[22:37:40]">&lt;stikonas&gt;</a></span><span class="message">I can do basic assembly or hex0 coding on x86_64 but I have not looked at switching modes</span></div><div class="line" id="223801"><span class="nick" style="color:#2e2a4a"><a href="#223801" label="[22:38:01]">&lt;stikonas&gt;</a></span><span class="message">runtime services definitely should be available</span></div><div class="line" id="223806"><span class="nick" style="color:#2e2a4a"><a href="#223806" label="[22:38:06]">&lt;stikonas&gt;</a></span><span class="message">I don't know about boot services...</span></div><div class="line" id="223849"><span class="nick" style="color:#8dd3c7"><a href="#223849" label="[22:38:49]">&lt;Googulator&gt;</a></span><span class="message">one thing to keep in mind, you need boot services or a driver for text mode output</span></div><div class="line" id="223905"><span class="nick" style="color:#2e2a4a"><a href="#223905" label="[22:39:05]">&lt;stikonas&gt;</a></span><span class="message">oh yes, otherwise builder-hex0 can't print...</span></div><div class="line" id="223929"><span class="nick" style="color:#8dd3c7"><a href="#223929" label="[22:39:29]">&lt;Googulator&gt;</a></span><span class="message">well, in theory you could set up a text mode screen buffer, and use it later (that's how UEFI framebuffers are usually handled, except that's in graphical mode)</span></div><div class="line" id="223936"><span class="nick" style="color:#8dd3c7"><a href="#223936" label="[22:39:36]">&lt;Googulator&gt;</a></span><span class="message">but I'm not sure if UEFI APIs allow that</span></div><div class="line" id="223936"><span class="nick" style="color:#2e2a4a"><a href="#223936" label="[22:39:36]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think you are right about Fiwix being good step to call ExitBootServices</span></div><div class="line" id="223953"><span class="nick" style="color:#8dd3c7"><a href="#223953" label="[22:39:53]">&lt;Googulator&gt;</a></span><span class="message">they do for graphical frame buffers, but maybe not for text mode</span></div><div class="line" id="224011"><span class="nick" style="color:#2e2a4a"><a href="#224011" label="[22:40:11]">&lt;stikonas&gt;</a></span><span class="message">anyway, there are so many things going on in bootstrappable...</span></div><div class="line" id="224014"><span class="nick" style="color:#2e2a4a"><a href="#224014" label="[22:40:14]">&lt;stikonas&gt;</a></span><span class="message">we need more people :D</span></div><div class="line" id="224241"><span class="nick" style="color:#2e2a4a"><a href="#224241" label="[22:42:41]">&lt;stikonas&gt;</a></span><span class="message">and there is risc-v things that need doing too...</span></div><div class="line" id="224300"><span class="nick" style="color:#2e2a4a"><a href="#224300" label="[22:43:00]">&lt;stikonas&gt;</a></span><span class="message">we can only bootstrap up to bootstrappable tcc only... And only on posix</span></div><div class="line" id="224428"><span class="nick" style="color:#8dd3c7"><a href="#224428" label="[22:44:28]">&lt;Googulator&gt;</a></span><span class="message">And &quot;on posix&quot; is a massive limitation... you're trusting a binary kernel, and potentially more</span></div><div class="line" id="225404"><span class="nick" style="color:#2e2a4a"><a href="#225404" label="[22:54:04]">&lt;stikonas&gt;</a></span><span class="message">yes, but before we can have posix bootstrap working, there isn't much point of having bootstrappable kernel</span></div><div class="line" id="225426"><span class="nick" style="color:#2e2a4a"><a href="#225426" label="[22:54:26]">&lt;stikonas&gt;</a></span><span class="message">well, maybe still good for work parallelization...</span></div><div class="line" id="235046"><span class="nick" style="color:#6b8072"><a href="#235046" label="[23:50:46]">&lt;oriansj&gt;</a></span><span class="message">Googulator: yes, it is but progress for the risc-v port; once completed it will be much easier for someone to port builder-hex0/fiwix to risc-v and carry it forward to completion.</span></div><div class="line" id="235138"><span class="nick" style="color:#6b8072"><a href="#235138" label="[23:51:38]">&lt;oriansj&gt;</a></span><span class="message">So a great deal of work remains; despite the excellent progress we have been making across the board.</span></div><div class="line" id="235455"><span class="nick" style="color:#6b8072"><a href="#235455" label="[23:54:55]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yeah, barrel processors definitely appeal to the stop the dangerous speculation desire but their performance is 1/3 to 1/5 of non OoO processors as Sun Niagara processor demonstrated very clearly</span></div><div class="line" id="235754"><span class="nick" style="color:#80b1d3"><a href="#235754" label="[23:57:54]">&lt;muurkha&gt;</a></span><span class="message">that's not true at all</span></div><div class="line" id="235817"><span class="nick" style="color:#80b1d3"><a href="#235817" label="[23:58:17]">&lt;muurkha&gt;</a></span><span class="message">their performance is usually worse on single-threaded code</span></div><div class="line" id="235827"><span class="nick" style="color:#80b1d3"><a href="#235827" label="[23:58:27]">&lt;muurkha&gt;</a></span><span class="message">but their throughput is usually higher</span></div><br /></div></body></html>