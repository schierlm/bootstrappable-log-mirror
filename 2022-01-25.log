<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-01-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000700"><span class="nick" style="color:#389600"><a href="#000700" label="[00:07:00]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so riscv32 is still broken...</span></div><div class="line" id="000709"><span class="nick" style="color:#389600"><a href="#000709" label="[00:07:09]">&lt;stikonas&gt;</a></span><span class="message">I'll have to look a bit more at it</span></div><div class="line" id="000721"><span class="nick" style="color:#389600"><a href="#000721" label="[00:07:21]">&lt;stikonas&gt;</a></span><span class="message">but it's probably exit status detection that goes badly</span></div><div class="line" id="000723"><span class="nick" style="color:#389600"><a href="#000723" label="[00:07:23]">&lt;stikonas&gt;</a></span><span class="message">not real crash</span></div><div class="line" id="004725"><span class="nick" style="color:#2e2a4a"><a href="#004725" label="[00:47:25]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I don't think WORDSIZE = 64 is correct for riscv32</span></div><div class="line" id="004836"><span class="nick" style="color:#2e2a4a"><a href="#004836" label="[00:48:36]">&lt;oriansj&gt;</a></span><span class="message">and I added more debug state to cc_spawn.c</span></div><div class="line" id="005144"><span class="nick" style="color:#2e2a4a"><a href="#005144" label="[00:51:44]">&lt;oriansj&gt;</a></span><span class="message">it'll definitely screw up the blood-elf output</span></div><div class="line" id="011035"><span class="nick" style="color:#6b8072"><a href="#011035" label="[01:10:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh good spot. It's copy paste error but it confused me and I was looking at bugs elsewhere</span></div><div class="line" id="021516"><span class="nick" style="color:#389600"><a href="#021516" label="[02:15:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: right I think the remaining problems that I have on riscv32 and aarch64 are that qemu issue where we use too much heap memory</span></div><div class="line" id="021539"><span class="nick" style="color:#389600"><a href="#021539" label="[02:15:39]">&lt;stikonas&gt;</a></span><span class="message">when I ran it natively on aarch64 it worked</span></div><div class="line" id="021746"><span class="nick" style="color:#389600"><a href="#021746" label="[02:17:46]">&lt;stikonas&gt;</a></span><span class="message">still, not working on qemu is kind of a blocker</span></div><div class="line" id="021756"><span class="nick" style="color:#389600"><a href="#021756" label="[02:17:56]">&lt;stikonas&gt;</a></span><span class="message">because we need to be able to test it on multiple platforms</span></div><div class="line" id="022245"><span class="nick" style="color:#2e2a4a"><a href="#022245" label="[02:22:45]">&lt;oriansj&gt;</a></span><span class="message">good point. I'll try to start trimming down memory usage</span></div><div class="line" id="022310"><span class="nick" style="color:#2e2a4a"><a href="#022310" label="[02:23:10]">&lt;oriansj&gt;</a></span><span class="message">starting with envp (which is super wasteful)</span></div><div class="line" id="022627"><span class="nick" style="color:#389600"><a href="#022627" label="[02:26:27]">&lt;stikonas&gt;</a></span><span class="message">well, right now I can't even push because I don't have riscv32 checksums...</span></div><div class="line" id="022641"><span class="nick" style="color:#389600"><a href="#022641" label="[02:26:41]">&lt;stikonas&gt;</a></span><span class="message">and I don't think we have anybody with riscv32 hardware</span></div><div class="line" id="023839"><span class="nick" style="color:#2e2a4a"><a href="#023839" label="[02:38:39]">&lt;oriansj&gt;</a></span><span class="message">right now envp is allocating 128KB per environment variable</span></div><div class="line" id="023850"><span class="nick" style="color:#2e2a4a"><a href="#023850" label="[02:38:50]">&lt;oriansj&gt;</a></span><span class="message">so this will really cut the memory size</span></div><div class="line" id="024904"><span class="nick" style="color:#2e2a4a"><a href="#024904" label="[02:49:04]">&lt;oriansj&gt;</a></span><span class="message">anyone remember what the max envp line size is?</span></div><div class="line" id="025512"><span class="nick" style="color:#389600"><a href="#025512" label="[02:55:12]">&lt;stikonas&gt;</a></span><span class="message">do we have to know it in advance? I.e. something like scratch is not possible?</span></div><div class="line" id="025807"><span class="nick" style="color:#389600"><a href="#025807" label="[02:58:07]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think limit is here <a rel="nofollow" href="https://man7.org/linux/man-pages/man2/execve.2.html">https://man7.org/linux/man-pages/man2/execve.2.html</a> </span></div><div class="line" id="025810"><span class="nick" style="color:#389600"><a href="#025810" label="[02:58:10]">&lt;stikonas&gt;</a></span><span class="message">so 128 KiB</span></div><div class="line" id="025828"><span class="nick" style="color:#389600"><a href="#025828" label="[02:58:28]">&lt;stikonas&gt;</a></span><span class="message">but  that's total size of argv and envp</span></div><div class="line" id="025834"><span class="nick" style="color:#389600"><a href="#025834" label="[02:58:34]">&lt;stikonas&gt;</a></span><span class="message">not per environmental variable</span></div><div class="line" id="025842"><span class="nick" style="color:#389600"><a href="#025842" label="[02:58:42]">&lt;stikonas&gt;</a></span><span class="message">still, we don't have to support such large limit</span></div><div class="line" id="031350"><span class="nick" style="color:#2e2a4a"><a href="#031350" label="[03:13:50]">&lt;oriansj&gt;</a></span><span class="message">say limit ourselves to 4KB envp lines</span></div><div class="line" id="033413"><span class="nick" style="color:#2e2a4a"><a href="#033413" label="[03:34:13]">&lt;oriansj&gt;</a></span><span class="message">well that certainly speeds things up</span></div><div class="line" id="034240"><span class="nick" style="color:#2e2a4a"><a href="#034240" label="[03:42:40]">&lt;oriansj&gt;</a></span><span class="message">stikonas: checkout the latest, it is much speedier</span></div><div class="line" id="034316"><span class="nick" style="color:#2e2a4a"><a href="#034316" label="[03:43:16]">&lt;oriansj&gt;</a></span><span class="message">and much smaller of a memory footprint</span></div><div class="line" id="034651"><span class="nick" style="color:#2e2a4a"><a href="#034651" label="[03:46:51]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and if that isn't enough memory saved, let me know and I'll start hunting for more places to save RAM</span></div><div class="line" id="041903"><span class="nick" style="color:#80b1d3"><a href="#041903" label="[04:19:03]">&lt;plasma41&gt;</a></span><span class="message">oriansj: Hi, I just wanted to let you know that I'm working on hand-assembling the x86 assembly version of the stage0_monitor in order to verify the commented hex. It's very tedious work as you well know, but I've been enjoying it in spite of frequent head-scratching and manual-consulting.</span></div><div class="line" id="042346"><span class="nick" style="color:#80b1d3"><a href="#042346" label="[04:23:46]">&lt;plasma41&gt;</a></span><span class="message">I've hand-assembled about a third of it so far. Calculating offsets for call and jmp instructions is a pain. :-P</span></div><div class="line" id="133656"><span class="nick" style="color:#2e2a4a"><a href="#133656" label="[13:36:56]">&lt;oriansj&gt;</a></span><span class="message">plasma41: one thing that might make the lookup easier is Oscar Toledo G's books include a section listing all of the opcodes in hex for quick reference.</span></div><div class="line" id="133939"><span class="nick" style="color:#2e2a4a"><a href="#133939" label="[13:39:39]">&lt;oriansj&gt;</a></span><span class="message">and a stupid trick for making the call and jmp instructions easier is everywhere you would put a :label do a #:label (address) comment</span></div><div class="line" id="154114"><span class="nick" style="color:#389600"><a href="#154114" label="[15:41:14]">&lt;stikonas&gt;</a></span><span class="message">plasma41: and another useful trick is to go via M1-&gt;hex2-&gt;hex0 steps rather than directly encoding into hex0</span></div><div class="line" id="182350"><span class="nick" style="color:#2e2a4a"><a href="#182350" label="[18:23:50]">&lt;oriansj&gt;</a></span><span class="message">and I suggest doing the first version in C or plain assembly to work out logic issues first</span></div><div class="line" id="213610"><span class="nick" style="color:#389600"><a href="#213610" label="[21:36:10]">&lt;stikonas&gt;</a></span><span class="message">oriansj: indeed, new M2-Mesoplanet is so much faster now.</span></div><div class="line" id="213633"><span class="nick" style="color:#389600"><a href="#213633" label="[21:36:33]">&lt;stikonas&gt;</a></span><span class="message">although, I still need to fix some riscv32 issue (aarch64 now works correctly)</span></div><div class="line" id="213705"><span class="nick" style="color:#389600"><a href="#213705" label="[21:37:05]">&lt;stikonas&gt;</a></span><span class="message">but I still see some crash with riscv32, but only when building the very last executable (chmod)</span></div><div class="line" id="220921"><span class="nick" style="color:#6d2462"><a href="#220921" label="[22:09:21]">&lt;Hagfish&gt;</a></span><span class="message">huh, weird that it should get that far, and fail on something so seemingly simple.  it's really encouraging that aarch64 works, though, so maybe this is an example of ports being useful for uncovering subtle bugs</span></div><div class="line" id="220924"><span class="nick" style="color:#6d2462"><a href="#220924" label="[22:09:24]">&lt;Hagfish&gt;</a></span><span class="message">anyway, great work!</span></div><div class="line" id="223821"><span class="nick" style="color:#80b1d3"><a href="#223821" label="[22:38:21]">&lt;plasma41&gt;</a></span><span class="message">oriansj: I've printed out both the assembly language prototype and the commented machine code of the stage0_monitor. I also printed out the relevant pages from a PDF of the 1979 Intel 8086 User's Manual I found online. With the manual and the assembly language printouts and a pen, I've been hand assembling the code and then comparing my work to the commented machine code.</span></div><div class="line" id="224205"><span class="nick" style="color:#234e69"><a href="#224205" label="[22:42:05]">&lt;bauen1&gt;</a></span><span class="message">plasma41: that's dedication</span></div><div class="line" id="224313"><span class="nick" style="color:#80b1d3"><a href="#224313" label="[22:43:13]">&lt;plasma41&gt;</a></span><span class="message">I've made a few minor changes along the way and so must account for changed byte counts in some of the call and jump intructions. I'll submit my changes once I've finished the hand-assembling. It shouldn't take me more than about a day or two at this point.</span></div><div class="line" id="224859"><span class="nick" style="color:#80b1d3"><a href="#224859" label="[22:48:59]">&lt;plasma41&gt;</a></span><span class="message">Honestly the hardest part was learning what was meant by &quot;MOD reg R/M&quot; in the documentation. So few &quot;learn assembly language&quot; books ever even touch on how assembly language mnemonics get translated into machine language. Most of them assume that no one would be crazy enough to actually _want_ to do that by hand. Which, to be fair, is true of most people. :-P</span></div><div class="line" id="225010"><span class="nick" style="color:#234e69"><a href="#225010" label="[22:50:10]">&lt;bauen1&gt;</a></span><span class="message">plasma41: yes, hand assembling x86 is interesting ... i had to help / teach students with that as part of my job, it's incredibly confusing, learning vhdl is a piece of cake by comparison ...</span></div><div class="line" id="225226"><span class="nick" style="color:#6d2462"><a href="#225226" label="[22:52:26]">&lt;Hagfish&gt;</a></span><span class="message">it sounds like there needs to be a user's manual for the user's manual :)</span></div><div class="line" id="225952"><span class="nick" style="color:#80b1d3"><a href="#225952" label="[22:59:52]">&lt;plasma41&gt;</a></span><span class="message">Hagfish: The hard part is discovering which 62 pages out of the 760 page manual are the relevant ones. (It's pages 2-30 to 2-72 and 4-18 to 4-36 btw)</span></div><div class="line" id="230747"><span class="nick" style="color:#80b1d3"><a href="#230747" label="[23:07:47]">&lt;plasma41&gt;</a></span><span class="message">Pages B-191 and B192 also provide a nice quick reference card printable on a single sheet of paper that offers a nice at-a-glance summary of the instruction encodings from chapter 4.</span></div><div class="line" id="232043"><span class="nick" style="color:#6d2462"><a href="#232043" label="[23:20:43]">&lt;Hagfish&gt;</a></span><span class="message">nice.  maybe those little insights can be placed in a README, if your work has one</span></div><div class="line" id="232446"><span class="nick" style="color:#80b1d3"><a href="#232446" label="[23:24:46]">&lt;plasma41&gt;</a></span><span class="message">Hagfish: I'll be sure to suggest it when I submit my proposed modifications.</span></div><br /></div></body></html>