<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000328"><span class="nick" style="color:#389600"><a href="#000328" label="[00:03:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="000333"><span class="nick" style="color:#8dd3c7"><a href="#000333" label="[00:03:33]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="000414"><span class="nick" style="color:#8dd3c7"><a href="#000414" label="[00:04:14]">&lt;stikonas&gt;</a></span><span class="message">luckily fixed hex0 code had exactly the same length and positions of all jumps :)</span></div><div class="line" id="001727"><span class="nick" style="color:#8dd3c7"><a href="#001727" label="[00:17:27]">&lt;stikonas&gt;</a></span><span class="message">oh, actually cc_amd64 also runs fine, just slowish on the VM... but good enough on baremetal</span></div><div class="line" id="005049"><span class="nick" style="color:#389600"><a href="#005049" label="[00:50:49]">&lt;oriansj&gt;</a></span><span class="message">well, the real question is mescc able to build tcc on it</span></div><div class="line" id="012836"><span class="nick" style="color:#8dd3c7"><a href="#012836" label="[01:28:36]">&lt;stikonas&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="012853"><span class="nick" style="color:#8dd3c7"><a href="#012853" label="[01:28:53]">&lt;stikonas&gt;</a></span><span class="message">well, I'm slowly adding more syscalls (mostly trivial addtions, but still need to test them)</span></div><div class="line" id="013841"><span class="nick" style="color:#8dd3c7"><a href="#013841" label="[01:38:41]">&lt;stikonas&gt;</a></span><span class="message">I guess the main difficulty will be fork/waitpid/execve/wait4</span></div><div class="line" id="014423"><span class="nick" style="color:#8dd3c7"><a href="#014423" label="[01:44:23]">&lt;stikonas&gt;</a></span><span class="message">well, M2 seems to run now too</span></div><div class="line" id="025219"><span class="nick" style="color:#2e2a4a"><a href="#025219" label="[02:52:19]">&lt;Googulator&gt;</a></span><span class="message">speaking of M2 - what was M2-Moon going to be?</span></div><div class="line" id="025300"><span class="nick" style="color:#2e2a4a"><a href="#025300" label="[02:53:00]">&lt;Googulator&gt;</a></span><span class="message">I've seen a few references to it, but we don't have that today (instead, we have M2-Mesoplanet, which is not mentioned in those early documents)</span></div><div class="line" id="043839"><span class="nick" style="color:#389600"><a href="#043839" label="[04:38:39]">&lt;oriansj&gt;</a></span><span class="message">Googulator: M2-Moon was going to be a scheme compiler written in assembly</span></div><div class="line" id="043938"><span class="nick" style="color:#389600"><a href="#043938" label="[04:39:38]">&lt;oriansj&gt;</a></span><span class="message">turns out C is much easier to write a compiler for</span></div><div class="line" id="063333"><span class="nick" style="color:#6b8072"><a href="#063333" label="[06:33:33]">&lt;muurkha&gt;</a></span><span class="message">really?  that surprises me.  but I haven't written a C compiler, only a Scheme compiler (if you can call it Scheme without call/cc)</span></div><div class="line" id="063908"><span class="nick" style="color:#6b8072"><a href="#063908" label="[06:39:08]">&lt;muurkha&gt;</a></span><span class="message">I had the impression that most of ur-scheme was actually assembly written in Scheme syntax, you know, stuff like (jnz destlabel) (comment &quot;now, test its magic number&quot;) (cmp (const magic) (indirect tos)) (jnz destlabel)</span></div><div class="line" id="064123"><span class="nick" style="color:#6b8072"><a href="#064123" label="[06:41:23]">&lt;muurkha&gt;</a></span><span class="message">but a random sampling of its code is 25% assembly, 15% comments and blank lines, and 60% other stuff</span></div><div class="line" id="064141"><span class="nick" style="color:#6b8072"><a href="#064141" label="[06:41:41]">&lt;muurkha&gt;</a></span><span class="message">I was going to guess that M2-Moon was an implementation of a subset of Lua :)</span></div><div class="line" id="064648"><span class="nick" style="color:#6b8072"><a href="#064648" label="[06:46:48]">&lt;muurkha&gt;</a></span><span class="message">Ur-Scheme is 1553 lines of (its own subset of) Scheme, and it took me about three weeks.  I think it might take me a week today; I'd probably include structs and, to simplify closures, allocate all activation records on the heap, which would probably require me to actually implement the GC.  I'm not sure how much harder it would be to write it in assembly, given that it's evidently not relying on</span></div><div class="line" id="064654"><span class="nick" style="color:#6b8072"><a href="#064654" label="[06:46:54]">&lt;muurkha&gt;</a></span><span class="message">garbage collection to run in an acceptable amount of RAM</span></div><div class="line" id="133858"><span class="nick" style="color:#389600"><a href="#133858" label="[13:38:58]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yeah your Ur-Scheme is excellent work; unfortunately it wasn't powerful enough to run/compile mescc (the real goal of M2-Moon)</span></div><div class="line" id="134645"><span class="nick" style="color:#389600"><a href="#134645" label="[13:46:45]">&lt;oriansj&gt;</a></span><span class="message">heck Edmund GRIMLEY EVANS's cc500.c is only 500 lines of C code and is self hosting (no need for separate assembler/linker) and has 70% of the language features of cc_*</span></div><div class="line" id="135252"><span class="nick" style="color:#389600"><a href="#135252" label="[13:52:52]">&lt;oriansj&gt;</a></span><span class="message">turns out once C has functions, ints, chars, structs, arrays, goto, return and asm(); everything else is a nice extra. (one could cut down that list but it'll result in harder to follow code)</span></div><div class="line" id="140058"><span class="nick" style="color:#6b8072"><a href="#140058" label="[14:00:58]">&lt;muurkha&gt;</a></span><span class="message">yeah, Ur-Scheme only implements enough of Scheme to compile itself</span></div><div class="line" id="140342"><span class="nick" style="color:#6b8072"><a href="#140342" label="[14:03:42]">&lt;muurkha&gt;</a></span><span class="message">it implements functions, ints (somewhat!), chars, conses, closures, strings, conditionals, and global and local variables.  I didn't think about supporting inline assembly!</span></div><div class="line" id="140535"><span class="nick" style="color:#6b8072"><a href="#140535" label="[14:05:35]">&lt;muurkha&gt;</a></span><span class="message">I think C needs loops, conditionals, and variables, doesn't it?</span></div><div class="line" id="140623"><span class="nick" style="color:#6b8072"><a href="#140623" label="[14:06:23]">&lt;muurkha&gt;</a></span><span class="message">Scheme with inline assembly, or inline machine code, is an interesting idea</span></div><div class="line" id="143214"><span class="nick" style="color:#389600"><a href="#143214" label="[14:32:14]">&lt;oriansj&gt;</a></span><span class="message">nope, you can approximate loops with gotos and return</span></div><div class="line" id="143305"><span class="nick" style="color:#389600"><a href="#143305" label="[14:33:05]">&lt;oriansj&gt;</a></span><span class="message">and asm can be used to do conditionals, variables and basic operations (like +, -&gt;, etc)</span></div><div class="line" id="143404"><span class="nick" style="color:#389600"><a href="#143404" label="[14:34:04]">&lt;oriansj&gt;</a></span><span class="message">but yes, variables and if statements do make things much more clean</span></div><div class="line" id="144702"><span class="nick" style="color:#6b8072"><a href="#144702" label="[14:47:02]">&lt;muurkha&gt;</a></span><span class="message">oh, okay!</span></div><div class="line" id="144730"><span class="nick" style="color:#6b8072"><a href="#144730" label="[14:47:30]">&lt;muurkha&gt;</a></span><span class="message">I did regret not having structs, as I said</span></div><div class="line" id="150624"><span class="nick" style="color:#389600"><a href="#150624" label="[15:06:24]">&lt;oriansj&gt;</a></span><span class="message">well structs in scheme are not an easy thing to add; it took me a couple days to get the basic form when I was doing a scheme interpreter and janneke's mes.c doesn't even have that either.</span></div><div class="line" id="185431"><span class="nick" style="color:#8dd3c7"><a href="#185431" label="[18:54:31]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: was builder-hex0 per-process memory limit chosen due to mes usage?</span></div><div class="line" id="185505"><span class="nick" style="color:#8dd3c7"><a href="#185505" label="[18:55:05]">&lt;stikonas&gt;</a></span><span class="message">(670,793,728 bytes)</span></div><div class="line" id="185535"><span class="nick" style="color:#8dd3c7"><a href="#185535" label="[18:55:35]">&lt;stikonas&gt;</a></span><span class="message">I guess I should give at least 1 GiB on amd64...</span></div><div class="line" id="185644"><span class="nick" style="color:#8dd3c7"><a href="#185644" label="[18:56:44]">&lt;stikonas&gt;</a></span><span class="message">since in order to emulate brk I need to pre-allocate sufficiently big block of memory</span></div><div class="line" id="185658"><span class="nick" style="color:#8dd3c7"><a href="#185658" label="[18:56:58]">&lt;stikonas&gt;</a></span><span class="message">later allocations might not be continuous</span></div><div class="line" id="193027"><span class="nick" style="color:#80b1d3"><a href="#193027" label="[19:30:27]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yes, mes is the process that uses the most memory</span></div><div class="line" id="194444"><span class="nick" style="color:#80b1d3"><a href="#194444" label="[19:44:44]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I can't help but think there is some design flaw in mes / mescc that causes it to consume so much memory and time.</span></div><div class="line" id="194521"><span class="nick" style="color:#8dd3c7"><a href="#194521" label="[19:45:21]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: probably just a lot of indirections</span></div><div class="line" id="194542"><span class="nick" style="color:#8dd3c7"><a href="#194542" label="[19:45:42]">&lt;stikonas&gt;</a></span><span class="message">I haven't looked at it that deeply, but ekaitz says it's a very simple scheme that then implements more complex one</span></div><div class="line" id="194608"><span class="nick" style="color:#8dd3c7"><a href="#194608" label="[19:46:08]">&lt;stikonas&gt;</a></span><span class="message">but yes, it's not that good with memory, and needs high memory bandwidth too, not just amount</span></div><div class="line" id="194701"><span class="nick" style="color:#80b1d3"><a href="#194701" label="[19:47:01]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yeah I haven't look closely. I've debugged a couple problems in mes and it was really hard to understand.</span></div><div class="line" id="194811"><span class="nick" style="color:#80b1d3"><a href="#194811" label="[19:48:11]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I was hoping it would be replaced but if not maybe someday I'll have time to look into it.</span></div><div class="line" id="194829"><span class="nick" style="color:#8dd3c7"><a href="#194829" label="[19:48:29]">&lt;stikonas&gt;</a></span><span class="message">well, on x86 there might ne an alternative path...</span></div><div class="line" id="194841"><span class="nick" style="color:#8dd3c7"><a href="#194841" label="[19:48:41]">&lt;stikonas&gt;</a></span><span class="message">but really just 32-bit x86</span></div><div class="line" id="194903"><span class="nick" style="color:#8dd3c7"><a href="#194903" label="[19:49:03]">&lt;stikonas&gt;</a></span><span class="message">there are just too many old tcc versions in that alternative path</span></div><div class="line" id="194920"><span class="nick" style="color:#80b1d3"><a href="#194920" label="[19:49:20]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: re: mes, my suspicion would be a lot of copy-by-value going on combined with recursion and an increasing image size down the stack.</span></div><div class="line" id="194933"><span class="nick" style="color:#8dd3c7"><a href="#194933" label="[19:49:33]">&lt;stikonas&gt;</a></span><span class="message">could be...</span></div><div class="line" id="195053"><span class="nick" style="color:#80b1d3"><a href="#195053" label="[19:50:53]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yeah, and I'm pretty sure you're with me in saying &quot;tcc sucks&quot; in terms of code quality.</span></div><div class="line" id="195109"><span class="nick" style="color:#8dd3c7"><a href="#195109" label="[19:51:09]">&lt;stikonas&gt;</a></span><span class="message">yeah, tcc is really hard to read...</span></div><div class="line" id="195113"><span class="nick" style="color:#8dd3c7"><a href="#195113" label="[19:51:13]">&lt;stikonas&gt;</a></span><span class="message">even when you know C</span></div><div class="line" id="195222"><span class="nick" style="color:#6b8072"><a href="#195222" label="[19:52:22]">&lt;muurkha&gt;</a></span><span class="message">oriansj: what do you mean about getting the basic form?  structs in Scheme can be pretty simple</span></div><div class="line" id="195326"><span class="nick" style="color:#6d2462"><a href="#195326" label="[19:53:26]">&lt;ekaitz&gt;</a></span><span class="message">mes is pretty slow but i think that comes from different reasons at the same time</span></div><div class="line" id="195338"><span class="nick" style="color:#6d2462"><a href="#195338" label="[19:53:38]">&lt;ekaitz&gt;</a></span><span class="message">scheme is by default very memory-dependent</span></div><div class="line" id="195343"><span class="nick" style="color:#6d2462"><a href="#195343" label="[19:53:43]">&lt;ekaitz&gt;</a></span><span class="message">there's a lot of indirection</span></div><div class="line" id="195400"><span class="nick" style="color:#6d2462"><a href="#195400" label="[19:54:00]">&lt;ekaitz&gt;</a></span><span class="message">the basic structure of scheme is a linked list...</span></div><div class="line" id="195421"><span class="nick" style="color:#6d2462"><a href="#195421" label="[19:54:21]">&lt;ekaitz&gt;</a></span><span class="message">when running mescc we are building a very large tree of the C code</span></div><div class="line" id="195447"><span class="nick" style="color:#6d2462"><a href="#195447" label="[19:54:47]">&lt;ekaitz&gt;</a></span><span class="message">allocating it and traversing are probably slow operations</span></div><div class="line" id="195548"><span class="nick" style="color:#6d2462"><a href="#195548" label="[19:55:48]">&lt;ekaitz&gt;</a></span><span class="message">mes' code is really easy to read otoh, which may give us chance for improvements</span></div><div class="line" id="195605"><span class="nick" style="color:#6d2462"><a href="#195605" label="[19:56:05]">&lt;ekaitz&gt;</a></span><span class="message">(i don't want to call them optimizations)</span></div><div class="line" id="195614"><span class="nick" style="color:#8dd3c7"><a href="#195614" label="[19:56:14]">&lt;stikonas&gt;</a></span><span class="message">well, mescc code, or mes code?</span></div><div class="line" id="195625"><span class="nick" style="color:#6b8072"><a href="#195625" label="[19:56:25]">&lt;muurkha&gt;</a></span><span class="message">I don't think &quot;building large linked data structures&quot; is all that different from most compilers</span></div><div class="line" id="195635"><span class="nick" style="color:#8dd3c7"><a href="#195635" label="[19:56:35]">&lt;stikonas&gt;</a></span><span class="message">it probably depends on how much experience you have with scheme...</span></div><div class="line" id="195637"><span class="nick" style="color:#6b8072"><a href="#195637" label="[19:56:37]">&lt;muurkha&gt;</a></span><span class="message">structs would help with that, a bit</span></div><div class="line" id="195717"><span class="nick" style="color:#80b1d3"><a href="#195717" label="[19:57:17]">&lt;rickmasters&gt;</a></span><span class="message">I wonder if there is a difficulty with hash tables that makes symbol management hard...</span></div><div class="line" id="195751"><span class="nick" style="color:#6b8072"><a href="#195751" label="[19:57:51]">&lt;muurkha&gt;</a></span><span class="message">also, aside from the design of the program written in Scheme, it's possible to implement Scheme in ways that have more or less pointer chasing.  car and cdr unavoidably have to chase pointers, but things like global and local variable access don't have to</span></div><div class="line" id="195805"><span class="nick" style="color:#6b8072"><a href="#195805" label="[19:58:05]">&lt;muurkha&gt;</a></span><span class="message">and IIRC in MES they do?</span></div><div class="line" id="195832"><span class="nick" style="color:#234e69"><a href="#195832" label="[19:58:32]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: I'm running a complete package build with your PR64, so far so good</span></div><div class="line" id="195902"><span class="nick" style="color:#80b1d3"><a href="#195902" label="[19:59:02]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: thanks!</span></div><div class="line" id="195954"><span class="nick" style="color:#80b1d3"><a href="#195954" label="[19:59:54]">&lt;rickmasters&gt;</a></span><span class="message">As an update to the group, Mikaku is current testing a PR to support building Fiwix with tcc.</span></div><div class="line" id="200000"><span class="nick" style="color:#6b8072"><a href="#200000" label="[20:00:00]">&lt;muurkha&gt;</a></span><span class="message">yay!</span></div><div class="line" id="200025"><span class="nick" style="color:#8dd3c7"><a href="#200025" label="[20:00:25]">&lt;stikonas&gt;</a></span><span class="message">do you mean upstream Fiwix?</span></div><div class="line" id="200036"><span class="nick" style="color:#8dd3c7"><a href="#200036" label="[20:00:36]">&lt;stikonas&gt;</a></span><span class="message">(up to know it was your fork?)</span></div><div class="line" id="200038"><span class="nick" style="color:#80b1d3"><a href="#200038" label="[20:00:38]">&lt;rickmasters&gt;</a></span><span class="message">Yes, this is upstreaming. After that, there is only one change left to upstream into Fiwix which is kexec of linux.</span></div><div class="line" id="200058"><span class="nick" style="color:#8dd3c7"><a href="#200058" label="[20:00:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, nice progress!</span></div><div class="line" id="200128"><span class="nick" style="color:#6b8072"><a href="#200128" label="[20:01:28]">&lt;muurkha&gt;</a></span><span class="message">*up to now?</span></div><div class="line" id="200136"><span class="nick" style="color:#6d2462"><a href="#200136" label="[20:01:36]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: we might be able to improve mes to make mescc go faster</span></div><div class="line" id="200414"><span class="nick" style="color:#8dd3c7"><a href="#200414" label="[20:04:14]">&lt;stikonas&gt;</a></span><span class="message">all that fiwix work will also help me with 64-bit bootstrap too</span></div><div class="line" id="200641"><span class="nick" style="color:#80b1d3"><a href="#200641" label="[20:06:41]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm hoping we can pull from Mikaku's code base directly soon, which will simplify the workflow for improvements greatly.</span></div><div class="line" id="200705"><span class="nick" style="color:#8dd3c7"><a href="#200705" label="[20:07:05]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="200717"><span class="nick" style="color:#80b1d3"><a href="#200717" label="[20:07:17]">&lt;rickmasters&gt;</a></span><span class="message">Frankly, I'm hoping to extract myself from the process although I still want to help where I can.</span></div><div class="line" id="200718"><span class="nick" style="color:#8dd3c7"><a href="#200718" label="[20:07:18]">&lt;stikonas&gt;</a></span><span class="message">though I'm still not sure how to integrate UEFI bootstrap with live-bootstrap</span></div><div class="line" id="200734"><span class="nick" style="color:#8dd3c7"><a href="#200734" label="[20:07:34]">&lt;stikonas&gt;</a></span><span class="message">well, you did a great job already</span></div><div class="line" id="200909"><span class="nick" style="color:#80b1d3"><a href="#200909" label="[20:09:09]">&lt;rickmasters&gt;</a></span><span class="message">thanks. It's all fun and games until you try to upstream into someone else's project. That's a lot more work.</span></div><div class="line" id="201250"><span class="nick" style="color:#80b1d3"><a href="#201250" label="[20:12:50]">&lt;rickmasters&gt;</a></span><span class="message">And Mikaku's feedback led to better results. Like he rewrote the large ram drive support. My version was a hack job I was happy to get rid of.</span></div><div class="line" id="201426"><span class="nick" style="color:#80b1d3"><a href="#201426" label="[20:14:26]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I've been following some of your plans on UEFI and you're approach is roughly how I thought it should go...</span></div><div class="line" id="201517"><span class="nick" style="color:#80b1d3"><a href="#201517" label="[20:15:17]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: basically, read in the files using UEFI primitives and then run a 64 bit port of builder-hex0 written in &quot;C&quot;-ish code</span></div><div class="line" id="202154"><span class="nick" style="color:#6c3d55"><a href="#202154" label="[20:21:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, though debugging is hard...</span></div><div class="line" id="202205"><span class="nick" style="color:#6c3d55"><a href="#202205" label="[20:22:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But at least code is simple...</span></div><div class="line" id="202243"><span class="nick" style="color:#6c3d55"><a href="#202243" label="[20:22:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I'm not sure why, but often inserting extra fputs for debug messes things up</span></div><div class="line" id="202531"><span class="nick" style="color:#80b1d3"><a href="#202531" label="[20:25:31]">&lt;rickmasters&gt;</a></span><span class="message">back later</span></div><div class="line" id="213256"><span class="nick" style="color:#8dd3c7"><a href="#213256" label="[21:32:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, probably kaem-optional won't be compatible with uefi...</span></div><div class="line" id="213327"><span class="nick" style="color:#8dd3c7"><a href="#213327" label="[21:33:27]">&lt;stikonas&gt;</a></span><span class="message">it again makes assumptions that are not true in UEFI (but unlike hex0, it would be harder to fix)</span></div><div class="line" id="213452"><span class="nick" style="color:#8dd3c7"><a href="#213452" label="[21:34:52]">&lt;stikonas&gt;</a></span><span class="message">anyway, that shouldn't be a big deal as we can just build full kaem...</span></div><div class="line" id="213740"><span class="nick" style="color:#8dd3c7"><a href="#213740" label="[21:37:40]">&lt;stikonas&gt;</a></span><span class="message">(could probably be fixed on the kernel side it we want by creating out own fd table)</span></div><div class="line" id="214734"><span class="nick" style="color:#389600"><a href="#214734" label="[21:47:34]">&lt;oriansj&gt;</a></span><span class="message">muurkha: can be simple and to do in a easy to debug way are two different things.</span></div><div class="line" id="214803"><span class="nick" style="color:#389600"><a href="#214803" label="[21:48:03]">&lt;oriansj&gt;</a></span><span class="message">also mes.c has vector support</span></div><div class="line" id="214849"><span class="nick" style="color:#389600"><a href="#214849" label="[21:48:49]">&lt;oriansj&gt;</a></span><span class="message">which are pretty fast for what you would need; (not that you would need more than 64 items in any of the lists you would need to evaluate a function)</span></div><div class="line" id="215107"><span class="nick" style="color:#389600"><a href="#215107" label="[21:51:07]">&lt;oriansj&gt;</a></span><span class="message">You would have one list for the globals; one list for the known types; one list for the arguments passed on the stack; one list for the local variables and then the ast you are walking to generate the assembly (M2-Planet just has it as a double linked list)</span></div><div class="line" id="215244"><span class="nick" style="color:#6b8072"><a href="#215244" label="[21:52:44]">&lt;muurkha&gt;</a></span><span class="message">yeah, you can implement structs on top of vectors pretty easily</span></div><br /></div></body></html>