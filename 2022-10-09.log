<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001406"><span class="nick" style="color:#8dd3c7"><a href="#001406" label="[00:14:06]">&lt;stikonas&gt;</a></span><span class="message">ok, I think it just happened to work because kernel zeros r10 on start and it was never used...</span></div><div class="line" id="035440"><span class="nick" style="color:#2e2a4a"><a href="#035440" label="[03:54:40]">&lt;oriansj&gt;</a></span><span class="message">sure, we could use the migration to the relocatable version of cc_amd64.M1 as a way of updating M2libc's DEFINEs</span></div><div class="line" id="035540"><span class="nick" style="color:#2e2a4a"><a href="#035540" label="[03:55:40]">&lt;oriansj&gt;</a></span><span class="message">it is a breaking change for M2-Planet but it'll probably be worth it long term.</span></div><div class="line" id="053111"><span class="nick" style="color:#2e2a4a"><a href="#053111" label="[05:31:11]">&lt;oriansj&gt;</a></span><span class="message">unfortunately Mes.c would have to be upgraded too</span></div><div class="line" id="053136"><span class="nick" style="color:#2e2a4a"><a href="#053136" label="[05:31:36]">&lt;oriansj&gt;</a></span><span class="message">assuming janneke is onboard iwth the change</span></div><div class="line" id="065443"><span class="nick" style="color:#2e2a4a"><a href="#065443" label="[06:54:43]">&lt;oriansj&gt;</a></span><span class="message">muurkha: playing with doing assembly for the NAND2TETRIS CPU, having 4 registers would have saved so much bit juggling</span></div><div class="line" id="104733"><span class="nick" style="color:#6b8072"><a href="#104733" label="[10:47:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Does mes.c has any inline asm?</span></div><div class="line" id="104909"><span class="nick" style="color:#6b8072"><a href="#104909" label="[10:49:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, it probably has some defines...</span></div><div class="line" id="105334"><span class="nick" style="color:#6b8072"><a href="#105334" label="[10:53:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, I'll start with m2libc, the m2-planet and we can do mes after that</span></div><div class="line" id="113916"><span class="nick" style="color:#6b8072"><a href="#113916" label="[11:39:16]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj, so mes will be unaffected but that's because we don't have any glue for amd64, it's x86 only</span></div><div class="line" id="124338"><span class="nick" style="color:#8dd3c7"><a href="#124338" label="[12:43:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/14">https://github.com/oriansj/M2libc/pull/14</a> </span></div><div class="line" id="124428"><span class="nick" style="color:#8dd3c7"><a href="#124428" label="[12:44:28]">&lt;stikonas&gt;</a></span><span class="message">I'm now adjusting M2-Planet. Main binary itself is done but going over the tests (whose build scripts got broken due to earlier M2libc changes)</span></div><div class="line" id="132401"><span class="nick" style="color:#8dd3c7"><a href="#132401" label="[13:24:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I have some trouble with knight tests\</span></div><div class="line" id="132423"><span class="nick" style="color:#8dd3c7"><a href="#132423" label="[13:24:23]">&lt;stikonas&gt;</a></span><span class="message">M2libc/fcntl.c I get M2libc/fcntl.c:35: error: #error arch not supported</span></div><div class="line" id="132432"><span class="nick" style="color:#8dd3c7"><a href="#132432" label="[13:24:32]">&lt;stikonas&gt;</a></span><span class="message">otherwise it's M2libc/stdlib.c:128:open is not a defined symbol</span></div><div class="line" id="132553"><span class="nick" style="color:#8dd3c7"><a href="#132553" label="[13:25:53]">&lt;stikonas&gt;</a></span><span class="message">we need to add a define there since</span></div><div class="line" id="132612"><span class="nick" style="color:#8dd3c7"><a href="#132612" label="[13:26:12]">&lt;stikonas&gt;</a></span><span class="message">well, maybe I'll do it since I'm testing it already</span></div><div class="line" id="132822"><span class="nick" style="color:#2e2a4a"><a href="#132822" label="[13:28:22]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I guess the lack of AMD64 support in mescc saves us that sync problem.</span></div><div class="line" id="133009"><span class="nick" style="color:#2e2a4a"><a href="#133009" label="[13:30:09]">&lt;oriansj&gt;</a></span><span class="message">M2libc merged</span></div><div class="line" id="133020"><span class="nick" style="color:#8dd3c7"><a href="#133020" label="[13:30:20]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="133025"><span class="nick" style="color:#8dd3c7"><a href="#133025" label="[13:30:25]">&lt;stikonas&gt;</a></span><span class="message">I might have further knight fixes</span></div><div class="line" id="133355"><span class="nick" style="color:#8dd3c7"><a href="#133355" label="[13:33:55]">&lt;stikonas&gt;</a></span><span class="message">ok, I think <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/15">https://github.com/oriansj/M2libc/pull/15</a>  would work</span></div><div class="line" id="133359"><span class="nick" style="color:#8dd3c7"><a href="#133359" label="[13:33:59]">&lt;stikonas&gt;</a></span><span class="message">passed test0000</span></div><div class="line" id="133639"><span class="nick" style="color:#8dd3c7"><a href="#133639" label="[13:36:39]">&lt;stikonas&gt;</a></span><span class="message">I wonder if knight-native will also need similar adjustment</span></div><div class="line" id="133642"><span class="nick" style="color:#8dd3c7"><a href="#133642" label="[13:36:42]">&lt;stikonas&gt;</a></span><span class="message">I  guess we'll see</span></div><div class="line" id="133656"><span class="nick" style="color:#2e2a4a"><a href="#133656" label="[13:36:56]">&lt;oriansj&gt;</a></span><span class="message">well M2-Mesoplanet can't run natively</span></div><div class="line" id="133711"><span class="nick" style="color:#2e2a4a"><a href="#133711" label="[13:37:11]">&lt;oriansj&gt;</a></span><span class="message">so, I guess not</span></div><div class="line" id="133846"><span class="nick" style="color:#80b1d3"><a href="#133846" label="[13:38:46]">&lt;fossy&gt;</a></span><span class="message">stikonas: oh, i figured out the issue.. i forgot to say linux-headers should only extract certain folders from the tarball. i'll push a fix tomorrow, i just need to confirm it works</span></div><div class="line" id="133848"><span class="nick" style="color:#8dd3c7"><a href="#133848" label="[13:38:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, all amd64 M2-Planet tests pass...</span></div><div class="line" id="133900"><span class="nick" style="color:#8dd3c7"><a href="#133900" label="[13:39:00]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh that makes sense</span></div><div class="line" id="133912"><span class="nick" style="color:#2e2a4a"><a href="#133912" label="[13:39:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice</span></div><div class="line" id="133918"><span class="nick" style="color:#8dd3c7"><a href="#133918" label="[13:39:18]">&lt;stikonas&gt;</a></span><span class="message">that would use a lot of extra memory</span></div><div class="line" id="133929"><span class="nick" style="color:#80b1d3"><a href="#133929" label="[13:39:29]">&lt;fossy&gt;</a></span><span class="message">yes, it does</span></div><div class="line" id="133943"><span class="nick" style="color:#6d2462"><a href="#133943" label="[13:39:43]">*</a></span><span class="message">fossy zzz now</span></div><div class="line" id="133945"><span class="nick" style="color:#8dd3c7"><a href="#133945" label="[13:39:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and amd64 binaries built by M2-Planet are now position independent</span></div><div class="line" id="135114"><span class="nick" style="color:#2e2a4a"><a href="#135114" label="[13:51:14]">&lt;oriansj&gt;</a></span><span class="message">sweet</span></div><div class="line" id="144442"><span class="nick" style="color:#8dd3c7"><a href="#144442" label="[14:44:42]">&lt;stikonas&gt;</a></span><span class="message">ok, knight-native also needs similar fix...</span></div><div class="line" id="144740"><span class="nick" style="color:#8dd3c7"><a href="#144740" label="[14:47:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what should I do with knight-native?</span></div><div class="line" id="144756"><span class="nick" style="color:#8dd3c7"><a href="#144756" label="[14:47:56]">&lt;stikonas&gt;</a></span><span class="message">the problems is that my fix needs init_macro_env ...</span></div><div class="line" id="144810"><span class="nick" style="color:#8dd3c7"><a href="#144810" label="[14:48:10]">&lt;stikonas&gt;</a></span><span class="message">but I guess env is not supported there</span></div><div class="line" id="144834"><span class="nick" style="color:#8dd3c7"><a href="#144834" label="[14:48:34]">&lt;stikonas&gt;</a></span><span class="message">or are they</span></div><div class="line" id="144954"><span class="nick" style="color:#8dd3c7"><a href="#144954" label="[14:49:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, at least if I add those lines, test seems to build/pass on amd64 (actual running is skipped)</span></div><div class="line" id="145049"><span class="nick" style="color:#8dd3c7"><a href="#145049" label="[14:50:49]">&lt;stikonas&gt;</a></span><span class="message">it probably wouldn't make a difference on knight (I guess it's dummy)</span></div><div class="line" id="145108"><span class="nick" style="color:#8dd3c7"><a href="#145108" label="[14:51:08]">&lt;stikonas&gt;</a></span><span class="message">but at least it will superficially allow tests to pass</span></div><div class="line" id="145134"><span class="nick" style="color:#8dd3c7"><a href="#145134" label="[14:51:34]">&lt;stikonas&gt;</a></span><span class="message">pushed to <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/15">https://github.com/oriansj/M2libc/pull/15</a> </span></div><div class="line" id="145927"><span class="nick" style="color:#2e2a4a"><a href="#145927" label="[14:59:27]">&lt;oriansj&gt;</a></span><span class="message">well env doesn't exist on bare metal; so a dummy function that perhaps set up a dummy environment is an option if we need to ensure an env exists.</span></div><div class="line" id="150123"><span class="nick" style="color:#2e2a4a"><a href="#150123" label="[15:01:23]">&lt;oriansj&gt;</a></span><span class="message">(merged)</span></div><div class="line" id="150130"><span class="nick" style="color:#8dd3c7"><a href="#150130" label="[15:01:30]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="150141"><span class="nick" style="color:#8dd3c7"><a href="#150141" label="[15:01:41]">&lt;stikonas&gt;</a></span><span class="message">well, we'll come back to knight-native if/when we need it</span></div><div class="line" id="150203"><span class="nick" style="color:#8dd3c7"><a href="#150203" label="[15:02:03]">&lt;stikonas&gt;</a></span><span class="message">for now I'm just updating M2-Planet to work with your M2libc changes...</span></div><div class="line" id="150906"><span class="nick" style="color:#8dd3c7"><a href="#150906" label="[15:09:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, now checksums at the end don't match...</span></div><div class="line" id="150917"><span class="nick" style="color:#8dd3c7"><a href="#150917" label="[15:09:17]">&lt;stikonas&gt;</a></span><span class="message">though that is probably due to m2libc changes</span></div><div class="line" id="151006"><span class="nick" style="color:#8dd3c7"><a href="#151006" label="[15:10:06]">&lt;stikonas&gt;</a></span><span class="message">I guess I'll just run Generate-test-answers</span></div><div class="line" id="151558"><span class="nick" style="color:#8dd3c7"><a href="#151558" label="[15:15:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: M2-Planet changes <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/41">https://github.com/oriansj/M2-Planet/pull/41</a> </span></div><div class="line" id="151621"><span class="nick" style="color:#8dd3c7"><a href="#151621" label="[15:16:21]">&lt;stikonas&gt;</a></span><span class="message">I still need to adapt cc_amd64.M1 to output new defines, but I can push there myself</span></div><div class="line" id="164644"><span class="nick">***</span><span class="message notice">ay is now known as Andrew</span></div><div class="line" id="165858"><span class="nick" style="color:#8dd3c7"><a href="#165858" label="[16:58:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've now pushed stage0-posix-amd64 changes</span></div><div class="line" id="165919"><span class="nick" style="color:#8dd3c7"><a href="#165919" label="[16:59:19]">&lt;stikonas&gt;</a></span><span class="message">so once M2-Planet PR is merged, I can update stage0-posix and we will be done with new defines</span></div><div class="line" id="170339"><span class="nick" style="color:#8dd3c7"><a href="#170339" label="[17:03:39]">&lt;stikonas&gt;</a></span><span class="message">(at least at higher levels, one can still replace them in the comments and prototypes of hex0,..., M0)</span></div><div class="line" id="183853"><span class="nick" style="color:#8dd3c7"><a href="#183853" label="[18:38:53]">&lt;stikonas&gt;</a></span><span class="message">hmm, looks like UEFI command lines might be limitted to 128 chars...</span></div><div class="line" id="183921"><span class="nick" style="color:#8dd3c7"><a href="#183921" label="[18:39:21]">&lt;stikonas&gt;</a></span><span class="message">or maybe more likely some bug in kaem-minimal causing that</span></div><div class="line" id="184049"><span class="nick" style="color:#8dd3c7"><a href="#184049" label="[18:40:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, UEFI shell seems to work fine</span></div><div class="line" id="191859"><span class="nick" style="color:#8dd3c7"><a href="#191859" label="[19:18:59]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional.c prototype works fine too, so looks like bug in assembly</span></div><div class="line" id="212905"><span class="nick" style="color:#2e2a4a"><a href="#212905" label="[21:29:05]">&lt;oriansj&gt;</a></span><span class="message">stikonas: M2-Planet reviewed and Merged</span></div><div class="line" id="213325"><span class="nick" style="color:#8dd3c7"><a href="#213325" label="[21:33:25]">&lt;stikonas&gt;</a></span><span class="message">thanks. I'll pull in new submodules in stage0-posix then</span></div><div class="line" id="213431"><span class="nick" style="color:#8dd3c7"><a href="#213431" label="[21:34:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: any idea what might be causing kaem bug in stage0-uefi...</span></div><div class="line" id="213443"><span class="nick" style="color:#8dd3c7"><a href="#213443" label="[21:34:43]">&lt;stikonas&gt;</a></span><span class="message">I've been staring at kaem-optional.S but can't see anything so far</span></div><div class="line" id="213510"><span class="nick" style="color:#8dd3c7"><a href="#213510" label="[21:35:10]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/kaem-optional.S">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/kaem-optional.S</a>) </span></div><div class="line" id="213727"><span class="nick" style="color:#8dd3c7"><a href="#213727" label="[21:37:27]">&lt;stikonas&gt;</a></span><span class="message">though if I can't quickly spot it, we can just limit ourselves to short command lines</span></div><div class="line" id="213746"><span class="nick" style="color:#8dd3c7"><a href="#213746" label="[21:37:46]">&lt;stikonas&gt;</a></span><span class="message">just do a few catm calls instead of one</span></div><div class="line" id="213812"><span class="nick" style="color:#8dd3c7"><a href="#213812" label="[21:38:12]">&lt;stikonas&gt;</a></span><span class="message">it's not that far till C version of kaem...</span></div><div class="line" id="214021"><span class="nick" style="color:#2e2a4a"><a href="#214021" label="[21:40:21]">&lt;oriansj&gt;</a></span><span class="message">well let me think about it for a minute</span></div><div class="line" id="214243"><span class="nick" style="color:#8dd3c7"><a href="#214243" label="[21:42:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, some limitted debugging that I can do in UEFI shows that rsi register that holds the length of the string has correct value</span></div><div class="line" id="214641"><span class="nick" style="color:#8dd3c7"><a href="#214641" label="[21:46:41]">&lt;stikonas&gt;</a></span><span class="message">yet even File_Print stuff that prints command is already truncated to 127 bytes...</span></div><div class="line" id="215055"><span class="nick" style="color:#8dd3c7"><a href="#215055" label="[21:50:55]">&lt;stikonas&gt;</a></span><span class="message">oh, rax is actually 0x20a when we reach read_command_done</span></div><div class="line" id="215115"><span class="nick" style="color:#8dd3c7"><a href="#215115" label="[21:51:15]">&lt;stikonas&gt;</a></span><span class="message">so of course it triggered cmp al, 0xa check</span></div><div class="line" id="215217"><span class="nick" style="color:#8dd3c7"><a href="#215217" label="[21:52:17]">&lt;stikonas&gt;</a></span><span class="message">this is quite strange, somehow we end up with multi-byte value after read_byte</span></div><div class="line" id="215320"><span class="nick" style="color:#8dd3c7"><a href="#215320" label="[21:53:20]">&lt;stikonas&gt;</a></span><span class="message">oh, it'</span></div><div class="line" id="215333"><span class="nick" style="color:#8dd3c7"><a href="#215333" label="[21:53:33]">&lt;stikonas&gt;</a></span><span class="message">oh it might be that address where character is stored was not empty</span></div><div class="line" id="215353"><span class="nick" style="color:#8dd3c7"><a href="#215353" label="[21:53:53]">&lt;stikonas&gt;</a></span><span class="message">I did &quot;push rsi  # allocate stack&quot;</span></div><div class="line" id="215358"><span class="nick" style="color:#8dd3c7"><a href="#215358" label="[21:53:58]">&lt;stikonas&gt;</a></span><span class="message">but I think I need to zero it first</span></div><div class="line" id="215429"><span class="nick" style="color:#8dd3c7"><a href="#215429" label="[21:54:29]">&lt;stikonas&gt;</a></span><span class="message">(which I actually do in all other programs)</span></div><div class="line" id="215644"><span class="nick" style="color:#8dd3c7"><a href="#215644" label="[21:56:44]">&lt;stikonas&gt;</a></span><span class="message">yes, that fixes it...</span></div><div class="line" id="215709"><span class="nick" style="color:#8dd3c7"><a href="#215709" label="[21:57:09]">&lt;stikonas&gt;</a></span><span class="message">(using push 0 instead of push rsi)</span></div><div class="line" id="215755"><span class="nick" style="color:#8dd3c7"><a href="#215755" label="[21:57:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, but it changes file size, so I would have to reencode everything</span></div><div class="line" id="215801"><span class="nick" style="color:#8dd3c7"><a href="#215801" label="[21:58:01]">&lt;stikonas&gt;</a></span><span class="message">let me see if I can push any other register</span></div><div class="line" id="221810"><span class="nick" style="color:#234e69"><a href="#221810" label="[22:18:10]">&lt;Christoph[m]&gt;</a></span><span class="message">&lt;stikonas&gt; &quot;hmm, but it changes file size...&quot; &lt;- May I ask, why? I have no clue about assembler, and I don't know what 'reencode' means here or why it is necessary. But it seems extra strange to me that one needs to know the file size in advance. Or ... do you use something like GOTO &lt;relative jump size&gt;?</span></div><div class="line" id="221945"><span class="nick" style="color:#8dd3c7"><a href="#221945" label="[22:19:45]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: cause push rsi is 1 byte of machine code</span></div><div class="line" id="222005"><span class="nick" style="color:#8dd3c7"><a href="#222005" label="[22:20:05]">&lt;stikonas&gt;</a></span><span class="message">but &quot;push 0&quot; is two bytes 6A is push and 00</span></div><div class="line" id="222043"><span class="nick" style="color:#8dd3c7"><a href="#222043" label="[22:20:43]">&lt;stikonas&gt;</a></span><span class="message">and assembler basically jumps to relative locations from the current plcae</span></div><div class="line" id="222104"><span class="nick" style="color:#8dd3c7"><a href="#222104" label="[22:21:04]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: so e.g. if you want to jump to some label b, you need to tell, jump 25 bytes forward</span></div><div class="line" id="222131"><span class="nick" style="color:#8dd3c7"><a href="#222131" label="[22:21:31]">&lt;stikonas&gt;</a></span><span class="message">so basically your 2nd suggesion</span></div><div class="line" id="222134"><span class="nick" style="color:#8dd3c7"><a href="#222134" label="[22:21:34]">&lt;stikonas&gt;</a></span><span class="message">suggestion</span></div><div class="line" id="222228"><span class="nick" style="color:#8dd3c7"><a href="#222228" label="[22:22:28]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: I'll soon have a diff up, so you could see</span></div><div class="line" id="222303"><span class="nick" style="color:#234e69"><a href="#222303" label="[22:23:03]">&lt;Christoph[m]&gt;</a></span><span class="message">And there are no labels to jump to? Or editor support for that?</span></div><div class="line" id="222842"><span class="nick" style="color:#8dd3c7"><a href="#222842" label="[22:28:42]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: that's what hex1 does</span></div><div class="line" id="222857"><span class="nick" style="color:#8dd3c7"><a href="#222857" label="[22:28:57]">&lt;stikonas&gt;</a></span><span class="message">hex1 supports 1 character labels</span></div><div class="line" id="222905"><span class="nick" style="color:#8dd3c7"><a href="#222905" label="[22:29:05]">&lt;stikonas&gt;</a></span><span class="message">so somewhat limitted amount of labels you can have</span></div><div class="line" id="222922"><span class="nick" style="color:#8dd3c7"><a href="#222922" label="[22:29:22]">&lt;stikonas&gt;</a></span><span class="message">but good enough to build hex2 which supports arbitrary length labels (and a bit more stuff too)</span></div><div class="line" id="223159"><span class="nick" style="color:#8dd3c7"><a href="#223159" label="[22:31:59]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: though you also need to know file size too</span></div><div class="line" id="223207"><span class="nick" style="color:#8dd3c7"><a href="#223207" label="[22:32:07]">&lt;stikonas&gt;</a></span><span class="message">cause that is in the file header</span></div><div class="line" id="223433"><span class="nick" style="color:#234e69"><a href="#223433" label="[22:34:33]">&lt;Christoph[m]&gt;</a></span><span class="message">I see. Thank you!</span></div><div class="line" id="223546"><span class="nick" style="color:#8dd3c7"><a href="#223546" label="[22:35:46]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/a4905777c9e8edde3053a3244ad4fb324853813e">https://git.stikonas.eu/andrius/stage0-uefi/commit/a4905777c9e8edde3053a3244ad4fb324853813e</a> </span></div><div class="line" id="223558"><span class="nick" style="color:#8dd3c7"><a href="#223558" label="[22:35:58]">&lt;stikonas&gt;</a></span><span class="message">(though I've also sneaked in another change here</span></div><div class="line" id="223629"><span class="nick" style="color:#8dd3c7"><a href="#223629" label="[22:36:29]">&lt;stikonas&gt;</a></span><span class="message">apparently we don't need to explicitely have zeroes (for variables) at the end of program</span></div><div class="line" id="223639"><span class="nick" style="color:#8dd3c7"><a href="#223639" label="[22:36:39]">&lt;stikonas&gt;</a></span><span class="message">and we can just tweak a couple of parameters in the header</span></div><div class="line" id="223919"><span class="nick" style="color:#8dd3c7"><a href="#223919" label="[22:39:19]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: so speaking of those bootstrap programs, hex2 support the labels. Then we have M0 which allows using DEFINES, e.g. &quot;DEFINE push 6A&quot; and also knows how to encode numbers, e.g on x86 %123 -&gt; 23010000. So basically let's you program in primitive assembly.</span></div><div class="line" id="223935"><span class="nick" style="color:#8dd3c7"><a href="#223935" label="[22:39:35]">&lt;stikonas&gt;</a></span><span class="message">and after that we have cc_* compilers which supports a subset of C</span></div><div class="line" id="224201"><span class="nick" style="color:#8dd3c7"><a href="#224201" label="[22:42:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you merge new kaem? <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/33">https://github.com/oriansj/bootstrap-seeds/pull/33</a> </span></div><div class="line" id="225439"><span class="nick" style="color:#8dd3c7"><a href="#225439" label="[22:54:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, there might be another bug in kaem-optional... though I'm now super sure yet</span></div><div class="line" id="225615"><span class="nick" style="color:#8dd3c7"><a href="#225615" label="[22:56:15]">&lt;stikonas&gt;</a></span><span class="message">amd64\artifact\cc_amd64.efi amd64\artifact\M2-0.c amd64\artifact\M2-0.M1 fails when when kaem was launched by UEFI directly but succeeds when I run BOOTX64 in UEFI shell (BOOTX64.efi is kaem-optional.efi)</span></div><div class="line" id="231842"><span class="nick" style="color:#8dd3c7"><a href="#231842" label="[23:18:42]">&lt;stikonas&gt;</a></span><span class="message">hmm, that is more likely to be cc_amd64.efi bug rather than kaem bug...</span></div><br /></div></body></html>