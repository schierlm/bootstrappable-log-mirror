<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001156"><span class="nick" style="color:#389600"><a href="#001156" label="[00:11:56]">&lt;fossy&gt;</a></span><span class="message">stikonas: what do we need from newer tinycc</span></div><div class="line" id="001208"><span class="nick" style="color:#389600"><a href="#001208" label="[00:12:08]">&lt;fossy&gt;</a></span><span class="message">i don't feel very happy with just grabbing a random commit from mob</span></div><div class="line" id="001304"><span class="nick" style="color:#8dd3c7"><a href="#001304" label="[00:13:04]">&lt;stikonas&gt;</a></span><span class="message">hmm, somehow it failed to compile some line in musl, (I think hidden attribute)</span></div><div class="line" id="001434"><span class="nick" style="color:#389600"><a href="#001434" label="[00:14:34]">&lt;fossy&gt;</a></span><span class="message">if we can cherry-pick a commit i feel better with that than mob</span></div><div class="line" id="001446"><span class="nick" style="color:#8dd3c7"><a href="#001446" label="[00:14:46]">&lt;stikonas&gt;</a></span><span class="message">or maybe something else, tcc error messages are a bit unhelpful</span></div><div class="line" id="001453"><span class="nick" style="color:#8dd3c7"><a href="#001453" label="[00:14:53]">&lt;stikonas&gt;</a></span><span class="message">let me find the line</span></div><div class="line" id="001502"><span class="nick" style="color:#8dd3c7"><a href="#001502" label="[00:15:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, that would be better</span></div><div class="line" id="001504"><span class="nick" style="color:#389600"><a href="#001504" label="[00:15:04]">&lt;fossy&gt;</a></span><span class="message">restructure nearly complete, doing last build (if nothing fails)</span></div><div class="line" id="001511"><span class="nick" style="color:#8dd3c7"><a href="#001511" label="[00:15:11]">&lt;stikonas&gt;</a></span><span class="message">top of the mob doesn't even build...</span></div><div class="line" id="001514"><span class="nick" style="color:#8dd3c7"><a href="#001514" label="[00:15:14]">&lt;stikonas&gt;</a></span><span class="message">with mes libc</span></div><div class="line" id="001516"><span class="nick" style="color:#389600"><a href="#001516" label="[00:15:16]">&lt;fossy&gt;</a></span><span class="message">unsuprising</span></div><div class="line" id="001649"><span class="nick" style="color:#8dd3c7"><a href="#001649" label="[00:16:49]">&lt;stikonas&gt;</a></span><span class="message">fossy:</span></div><div class="line" id="001651"><span class="nick" style="color:#8dd3c7"><a href="#001651" label="[00:16:51]">&lt;stikonas&gt;</a></span><span class="message">In file included from src/aio/aio.c:9:</span></div><div class="line" id="001652"><span class="nick" style="color:#8dd3c7"><a href="#001652" label="[00:16:52]">&lt;stikonas&gt;</a></span><span class="message">./src/internal/syscall.h:237: error: identifier expected</span></div><div class="line" id="001702"><span class="nick" style="color:#389600"><a href="#001702" label="[00:17:02]">&lt;fossy&gt;</a></span><span class="message">?!</span></div><div class="line" id="001705"><span class="nick" style="color:#389600"><a href="#001705" label="[00:17:05]">&lt;fossy&gt;</a></span><span class="message">is that the entire message</span></div><div class="line" id="001729"><span class="nick" style="color:#8dd3c7"><a href="#001729" label="[00:17:29]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="001734"><span class="nick" style="color:#8dd3c7"><a href="#001734" label="[00:17:34]">&lt;stikonas&gt;</a></span><span class="message">well, Error 1 from make too</span></div><div class="line" id="001736"><span class="nick" style="color:#389600"><a href="#001736" label="[00:17:36]">&lt;fossy&gt;</a></span><span class="message">ugh</span></div><div class="line" id="001738"><span class="nick" style="color:#8dd3c7"><a href="#001738" label="[00:17:38]">&lt;stikonas&gt;</a></span><span class="message">hidden void __procfdname(char __buf[static 15+3*sizeof(int)], unsigned);</span></div><div class="line" id="001739"><span class="nick" style="color:#8dd3c7"><a href="#001739" label="[00:17:39]">&lt;stikonas&gt;</a></span><span class="message">that's the line</span></div><div class="line" id="001743"><span class="nick" style="color:#389600"><a href="#001743" label="[00:17:43]">&lt;fossy&gt;</a></span><span class="message">thx tinycc!</span></div><div class="line" id="001748"><span class="nick" style="color:#8dd3c7"><a href="#001748" label="[00:17:48]">&lt;stikonas&gt;</a></span><span class="message">well, it's tiny</span></div><div class="line" id="001800"><span class="nick" style="color:#389600"><a href="#001800" label="[00:18:00]">&lt;fossy&gt;</a></span><span class="message">i think unsigned may not be defined by mes libc</span></div><div class="line" id="001808"><span class="nick" style="color:#8dd3c7"><a href="#001808" label="[00:18:08]">&lt;stikonas&gt;</a></span><span class="message">oh</span></div><div class="line" id="001829"><span class="nick" style="color:#8dd3c7"><a href="#001829" label="[00:18:29]">&lt;stikonas&gt;</a></span><span class="message">but tcc should know unsigned</span></div><div class="line" id="001849"><span class="nick" style="color:#8dd3c7"><a href="#001849" label="[00:18:49]">&lt;stikonas&gt;</a></span><span class="message">it's basic type, not part of C library</span></div><div class="line" id="001850"><span class="nick" style="color:#389600"><a href="#001850" label="[00:18:50]">&lt;fossy&gt;</a></span><span class="message">oh no nvm</span></div><div class="line" id="001851"><span class="nick" style="color:#389600"><a href="#001851" label="[00:18:51]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="001859"><span class="nick" style="color:#389600"><a href="#001859" label="[00:18:59]">&lt;fossy&gt;</a></span><span class="message">maybe it's hidden then.</span></div><div class="line" id="001940"><span class="nick" style="color:#389600"><a href="#001940" label="[00:19:40]">&lt;fossy&gt;</a></span><span class="message">i dont think thats supported by tcc</span></div><div class="line" id="001953"><span class="nick" style="color:#389600"><a href="#001953" label="[00:19:53]">&lt;fossy&gt;</a></span><span class="message">hm.. maybe it is</span></div><div class="line" id="002012"><span class="nick" style="color:#389600"><a href="#002012" label="[00:20:12]">&lt;fossy&gt;</a></span><span class="message">suggestion would be to split it into multiple lines, and see which line the error happens on</span></div><div class="line" id="002050"><span class="nick" style="color:#389600"><a href="#002050" label="[00:20:50]">&lt;fossy&gt;</a></span><span class="message">although what the hell is a [static 15+3*sizeof(int)]</span></div><div class="line" id="002059"><span class="nick" style="color:#389600"><a href="#002059" label="[00:20:59]">&lt;fossy&gt;</a></span><span class="message">i have never seen static there</span></div><div class="line" id="002439"><span class="nick" style="color:#8dd3c7"><a href="#002439" label="[00:24:39]">&lt;stikonas&gt;</a></span><span class="message">yeah, let me try to split</span></div><div class="line" id="002725"><span class="nick" style="color:#8dd3c7"><a href="#002725" label="[00:27:25]">&lt;stikonas&gt;</a></span><span class="message">now it's complaining about   15+3*sizeof(int)</span></div><div class="line" id="002735"><span class="nick" style="color:#8dd3c7"><a href="#002735" label="[00:27:35]">&lt;stikonas&gt;</a></span><span class="message">that line...</span></div><div class="line" id="002818"><span class="nick" style="color:#8dd3c7"><a href="#002818" label="[00:28:18]">&lt;stikonas&gt;</a></span><span class="message">maybe just static is not enough for tcc</span></div><div class="line" id="002827"><span class="nick" style="color:#8dd3c7"><a href="#002827" label="[00:28:27]">&lt;stikonas&gt;</a></span><span class="message">static int?</span></div><div class="line" id="002843"><span class="nick" style="color:#8dd3c7"><a href="#002843" label="[00:28:43]">&lt;stikonas&gt;</a></span><span class="message">nope...</span></div><div class="line" id="002901"><span class="nick" style="color:#8dd3c7"><a href="#002901" label="[00:29:01]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, it builds if we remove static</span></div><div class="line" id="002926"><span class="nick" style="color:#389600"><a href="#002926" label="[00:29:26]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah it should be fine</span></div><div class="line" id="002930"><span class="nick" style="color:#389600"><a href="#002930" label="[00:29:30]">&lt;fossy&gt;</a></span><span class="message">i have no idea what static there would o</span></div><div class="line" id="002949"><span class="nick" style="color:#8dd3c7"><a href="#002949" label="[00:29:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, another error is this</span></div><div class="line" id="002959"><span class="nick" style="color:#8dd3c7"><a href="#002959" label="[00:29:59]">&lt;stikonas&gt;</a></span><span class="message">./arch/i386/syscall_arch.h:40: error: incorrect prefix</span></div><div class="line" id="003004"><span class="nick" style="color:#8dd3c7"><a href="#003004" label="[00:30:04]">&lt;stikonas&gt;</a></span><span class="message">it goes away with some define</span></div><div class="line" id="003008"><span class="nick" style="color:#8dd3c7"><a href="#003008" label="[00:30:08]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure if it is safe</span></div><div class="line" id="003020"><span class="nick" style="color:#8dd3c7"><a href="#003020" label="[00:30:20]">&lt;stikonas&gt;</a></span><span class="message">-DSYSCALL_NO_TLS</span></div><div class="line" id="003037"><span class="nick" style="color:#389600"><a href="#003037" label="[00:30:37]">&lt;fossy&gt;</a></span><span class="message">we don't have any kind of TLS support</span></div><div class="line" id="003044"><span class="nick" style="color:#389600"><a href="#003044" label="[00:30:44]">&lt;fossy&gt;</a></span><span class="message">stack, network or otherwise</span></div><div class="line" id="003155"><span class="nick" style="color:#8dd3c7"><a href="#003155" label="[00:31:55]">&lt;stikonas&gt;</a></span><span class="message">well, yeah</span></div><div class="line" id="003226"><span class="nick" style="color:#389600"><a href="#003226" label="[00:32:26]">&lt;fossy&gt;</a></span><span class="message">&quot;safety&quot; is not something i am overly concerned about given the number of CVEs and shit lying in these outdated softwareas</span></div><div class="line" id="003233"><span class="nick" style="color:#8dd3c7"><a href="#003233" label="[00:32:33]">&lt;stikonas&gt;</a></span><span class="message">fossy: I was worried about TLS because later compiled binaries segfault there</span></div><div class="line" id="003243"><span class="nick" style="color:#8dd3c7"><a href="#003243" label="[00:32:43]">&lt;stikonas&gt;</a></span><span class="message">in __init_tls</span></div><div class="line" id="003253"><span class="nick" style="color:#389600"><a href="#003253" label="[00:32:53]">&lt;fossy&gt;</a></span><span class="message">oh...</span></div><div class="line" id="003255"><span class="nick" style="color:#8dd3c7"><a href="#003255" label="[00:32:55]">&lt;stikonas&gt;</a></span><span class="message">no idea why...</span></div><div class="line" id="003300"><span class="nick" style="color:#389600"><a href="#003300" label="[00:33:00]">&lt;fossy&gt;</a></span><span class="message">well if we disable it maybe it will work</span></div><div class="line" id="003312"><span class="nick" style="color:#8dd3c7"><a href="#003312" label="[00:33:12]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1181683/">https://paste.debian.net/1181683/</a> </span></div><div class="line" id="003315"><span class="nick" style="color:#8dd3c7"><a href="#003315" label="[00:33:15]">&lt;stikonas&gt;</a></span><span class="message">no, it didn't</span></div><div class="line" id="003326"><span class="nick" style="color:#8dd3c7"><a href="#003326" label="[00:33:26]">&lt;stikonas&gt;</a></span><span class="message">I used -DSYSCALL_NO_TLS when testing</span></div><div class="line" id="003332"><span class="nick" style="color:#8dd3c7"><a href="#003332" label="[00:33:32]">&lt;stikonas&gt;</a></span><span class="message">but ok, I need to retest with stable tcc</span></div><div class="line" id="003424"><span class="nick" style="color:#8dd3c7"><a href="#003424" label="[00:34:24]">&lt;stikonas&gt;</a></span><span class="message">fossy: and I think I have too many .o files when making library archive</span></div><div class="line" id="003433"><span class="nick" style="color:#389600"><a href="#003433" label="[00:34:33]">&lt;fossy&gt;</a></span><span class="message">stikonas: probably</span></div><div class="line" id="003433"><span class="nick" style="color:#8dd3c7"><a href="#003433" label="[00:34:33]">&lt;stikonas&gt;</a></span><span class="message">did you hit the same problem with mescc?</span></div><div class="line" id="003435"><span class="nick" style="color:#389600"><a href="#003435" label="[00:34:35]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="003439"><span class="nick" style="color:#389600"><a href="#003439" label="[00:34:39]">&lt;fossy&gt;</a></span><span class="message">that's why unified sources</span></div><div class="line" id="003441"><span class="nick" style="color:#8dd3c7"><a href="#003441" label="[00:34:41]">&lt;stikonas&gt;</a></span><span class="message">need to somehow solve it...</span></div><div class="line" id="003446"><span class="nick" style="color:#389600"><a href="#003446" label="[00:34:46]">&lt;fossy&gt;</a></span><span class="message">unified sourced</span></div><div class="line" id="003454"><span class="nick" style="color:#8dd3c7"><a href="#003454" label="[00:34:54]">&lt;stikonas&gt;</a></span><span class="message">but musl does not have out of box unified sources...</span></div><div class="line" id="003504"><span class="nick" style="color:#8dd3c7"><a href="#003504" label="[00:35:04]">&lt;stikonas&gt;</a></span><span class="message">we need to do more work for that</span></div><div class="line" id="003505"><span class="nick" style="color:#389600"><a href="#003505" label="[00:35:05]">&lt;fossy&gt;</a></span><span class="message">making them is pretty single</span></div><div class="line" id="003508"><span class="nick" style="color:#389600"><a href="#003508" label="[00:35:08]">&lt;fossy&gt;</a></span><span class="message">simple</span></div><div class="line" id="003517"><span class="nick" style="color:#389600"><a href="#003517" label="[00:35:17]">&lt;fossy&gt;</a></span><span class="message">for a libc they never conflict (almost never) so its just concating them</span></div><div class="line" id="003903"><span class="nick" style="color:#8dd3c7"><a href="#003903" label="[00:39:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: it might be worth trying to build heirloom-sh first too...</span></div><div class="line" id="003924"><span class="nick" style="color:#8dd3c7"><a href="#003924" label="[00:39:24]">&lt;stikonas&gt;</a></span><span class="message">at least it doesn't need bison</span></div><div class="line" id="003942"><span class="nick" style="color:#389600"><a href="#003942" label="[00:39:42]">&lt;fossy&gt;</a></span><span class="message">maybe, if it dosen't use widechars</span></div><div class="line" id="004032"><span class="nick" style="color:#8dd3c7"><a href="#004032" label="[00:40:32]">&lt;stikonas&gt;</a></span><span class="message">it ships fakewchar folder</span></div><div class="line" id="004038"><span class="nick" style="color:#8dd3c7"><a href="#004038" label="[00:40:38]">&lt;stikonas&gt;</a></span><span class="message">so maybe it works with it</span></div><div class="line" id="004044"><span class="nick" style="color:#389600"><a href="#004044" label="[00:40:44]">&lt;fossy&gt;</a></span><span class="message">does yacc</span></div><div class="line" id="004054"><span class="nick" style="color:#389600"><a href="#004054" label="[00:40:54]">&lt;fossy&gt;</a></span><span class="message">can't we use fakewchar for yacc</span></div><div class="line" id="004148"><span class="nick" style="color:#8dd3c7"><a href="#004148" label="[00:41:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe we can...</span></div><div class="line" id="004202"><span class="nick" style="color:#389600"><a href="#004202" label="[00:42:02]">&lt;fossy&gt;</a></span><span class="message">i think we probably cna</span></div><div class="line" id="004213"><span class="nick" style="color:#389600"><a href="#004213" label="[00:42:13]">&lt;fossy&gt;</a></span><span class="message">musl would still maybe be useful</span></div><div class="line" id="004213"><span class="nick" style="color:#8dd3c7"><a href="#004213" label="[00:42:13]">&lt;stikonas&gt;</a></span><span class="message">worth trying...</span></div><div class="line" id="004219"><span class="nick" style="color:#389600"><a href="#004219" label="[00:42:19]">&lt;fossy&gt;</a></span><span class="message">but i don't think gcc 2 can link against musl</span></div><div class="line" id="004223"><span class="nick" style="color:#8dd3c7"><a href="#004223" label="[00:42:23]">&lt;stikonas&gt;</a></span><span class="message">might be easier to build musl once we have shell...</span></div><div class="line" id="004224"><span class="nick" style="color:#389600"><a href="#004224" label="[00:42:24]">&lt;fossy&gt;</a></span><span class="message">still will need glibc there</span></div><div class="line" id="004237"><span class="nick" style="color:#389600"><a href="#004237" label="[00:42:37]">&lt;fossy&gt;</a></span><span class="message">(in all likelihood)</span></div><div class="line" id="004237"><span class="nick" style="color:#8dd3c7"><a href="#004237" label="[00:42:37]">&lt;stikonas&gt;</a></span><span class="message">oh, but gcc does link against mes libc?</span></div><div class="line" id="004245"><span class="nick" style="color:#389600"><a href="#004245" label="[00:42:45]">&lt;fossy&gt;</a></span><span class="message">yes, originally, with patches</span></div><div class="line" id="004251"><span class="nick" style="color:#389600"><a href="#004251" label="[00:42:51]">&lt;fossy&gt;</a></span><span class="message">and then it is recompiled against glibc</span></div><div class="line" id="004251"><span class="nick" style="color:#8dd3c7"><a href="#004251" label="[00:42:51]">&lt;stikonas&gt;</a></span><span class="message">hmm, ok...</span></div><div class="line" id="004257"><span class="nick" style="color:#8dd3c7"><a href="#004257" label="[00:42:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, of course</span></div><div class="line" id="004324"><span class="nick" style="color:#389600"><a href="#004324" label="[00:43:24]">&lt;fossy&gt;</a></span><span class="message">so it goes binutils (mes libc ) -&gt; gcc (mes libc) -&gt; glibc (mes libc) -&gt; gcc (glibc) -&gt; binutils (glibc) -&gt; glibc (glibc) IIIRC</span></div><div class="line" id="004351"><span class="nick" style="color:#8dd3c7"><a href="#004351" label="[00:43:51]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's more or less standard</span></div><div class="line" id="004406"><span class="nick" style="color:#8dd3c7"><a href="#004406" label="[00:44:06]">&lt;stikonas&gt;</a></span><span class="message">you recompile everything against itself...</span></div><div class="line" id="004450"><span class="nick" style="color:#8dd3c7"><a href="#004450" label="[00:44:50]">&lt;stikonas&gt;</a></span><span class="message">but we can look at gcc later</span></div><div class="line" id="004458"><span class="nick" style="color:#8dd3c7"><a href="#004458" label="[00:44:58]">&lt;stikonas&gt;</a></span><span class="message">it's still quite far ahead</span></div><div class="line" id="004507"><span class="nick" style="color:#8dd3c7"><a href="#004507" label="[00:45:07]">&lt;stikonas&gt;</a></span><span class="message">after gcc you are basically done</span></div><div class="line" id="004522"><span class="nick" style="color:#8dd3c7"><a href="#004522" label="[00:45:22]">&lt;stikonas&gt;</a></span><span class="message">or at least everything is straightforward</span></div><div class="line" id="004555"><span class="nick" style="color:#8dd3c7"><a href="#004555" label="[00:45:55]">&lt;stikonas&gt;</a></span><span class="message">musl might still be useful for building some utilities</span></div><div class="line" id="004602"><span class="nick" style="color:#8dd3c7"><a href="#004602" label="[00:46:02]">&lt;stikonas&gt;</a></span><span class="message">even if we later build gcc against mes libc</span></div><div class="line" id="005311"><span class="nick" style="color:#8dd3c7"><a href="#005311" label="[00:53:11]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll take a look at heirloom yacc with fakewchart for now</span></div><div class="line" id="010650"><span class="nick" style="color:#389600"><a href="#010650" label="[01:06:50]">&lt;fossy&gt;</a></span><span class="message">gforce_de1977: i don't understand your PR</span></div><div class="line" id="010703"><span class="nick" style="color:#389600"><a href="#010703" label="[01:07:03]">&lt;fossy&gt;</a></span><span class="message">you say you're adding a CI mode but then you go on to say you want to test locally</span></div><div class="line" id="010710"><span class="nick" style="color:#389600"><a href="#010710" label="[01:07:10]">&lt;fossy&gt;</a></span><span class="message">which one is it, CI, local, or both</span></div><div class="line" id="011744"><span class="nick" style="color:#8dd3c7"><a href="#011744" label="[01:17:44]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, I managed to build yacc that doesn't segfault</span></div><div class="line" id="011810"><span class="nick" style="color:#8dd3c7"><a href="#011810" label="[01:18:10]">&lt;stikonas&gt;</a></span><span class="message">that fakewchar is very basic, I still need most of the same defines I used before (except that I used sed)</span></div><div class="line" id="011842"><span class="nick" style="color:#8dd3c7"><a href="#011842" label="[01:18:42]">&lt;stikonas&gt;</a></span><span class="message">make -f Makefile.mk CC=tcc CFLAGS+=&quot;-I fakewchar -I . -DMAXPATHLEN=100 -DEILSEQ=84 -DMB_LEN_MAX=100 -Dswprintf=sprintf -Dwcslen=strlen -Diswdigit=isdigit -Diswxdigit=isxdigit -Diswlower=islower -Diswupper=isupper -Diswspace=isspace -Dwcscmp=strcmp -Dtowlower=tolower -Diswalpha=isalpha -Diswalnum=isalnum -Dungetwc=ungetc -Dgetwc=getc -Dwcscpy=strcpy&quot; -lgetopt</span></div><div class="line" id="011845"><span class="nick" style="color:#8dd3c7"><a href="#011845" label="[01:18:45]">&lt;stikonas&gt;</a></span><span class="message">this mostly builds it</span></div><div class="line" id="011918"><span class="nick" style="color:#8dd3c7"><a href="#011918" label="[01:19:18]">&lt;stikonas&gt;</a></span><span class="message">possibly with some minor patching to add header files</span></div><div class="line" id="013403"><span class="nick" style="color:#8dd3c7"><a href="#013403" label="[01:34:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: but I can't build lex from heirloom though</span></div><div class="line" id="013416"><span class="nick" style="color:#8dd3c7"><a href="#013416" label="[01:34:16]">&lt;stikonas&gt;</a></span><span class="message">yacc from heirloom fails to build parser.y in lex</span></div><div class="line" id="013433"><span class="nick" style="color:#8dd3c7"><a href="#013433" label="[01:34:33]">&lt;stikonas&gt;</a></span><span class="message">yacc  parser.y</span></div><div class="line" id="013434"><span class="nick" style="color:#8dd3c7"><a href="#013434" label="[01:34:34]">&lt;stikonas&gt;</a></span><span class="message">&quot;parser.y&quot;, line 58: warning: redeclaration of precedence of C.</span></div><div class="line" id="013436"><span class="nick" style="color:#8dd3c7"><a href="#013436" label="[01:34:36]">&lt;stikonas&gt;</a></span><span class="message">&quot;parser.y&quot;, line 58: warning: redeclaration of precedence of S.</span></div><div class="line" id="013437"><span class="nick" style="color:#8dd3c7"><a href="#013437" label="[01:34:37]">&lt;stikonas&gt;</a></span><span class="message">&quot;parser.y&quot;, line 58: warning: redeclaration of precedence of N.</span></div><div class="line" id="013439"><span class="nick" style="color:#8dd3c7"><a href="#013439" label="[01:34:39]">&lt;stikonas&gt;</a></span><span class="message">&quot;parser.y&quot;, line 58: warning: redeclaration of precedence of N.</span></div><div class="line" id="013440"><span class="nick" style="color:#8dd3c7"><a href="#013440" label="[01:34:40]">&lt;stikonas&gt;</a></span><span class="message">&quot;parser.y&quot;, line 67: fatal: redeclaration of precedence of</span></div><div class="line" id="013516"><span class="nick" style="color:#8dd3c7"><a href="#013516" label="[01:35:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe it was patched... let me see if nbs has anything</span></div><div class="line" id="013551"><span class="nick" style="color:#8dd3c7"><a href="#013551" label="[01:35:51]">&lt;stikonas&gt;</a></span><span class="message">hmm, doesn't seem so</span></div><div class="line" id="013851"><span class="nick" style="color:#8dd3c7"><a href="#013851" label="[01:38:51]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe different revision</span></div><div class="line" id="014252"><span class="nick" style="color:#6b8072"><a href="#014252" label="[01:42:52]">&lt;xentrac&gt;</a></span><span class="message">defining wchar_t as char is, I think, totally legit, unless you're trying to link with a library that uses a more useful definition.  Certainly the glibc page I linked to the other day said it was</span></div><div class="line" id="014313"><span class="nick" style="color:#6b8072"><a href="#014313" label="[01:43:13]">&lt;xentrac&gt;</a></span><span class="message">not sure if it's valid to do it with #define though :)</span></div><div class="line" id="014400"><span class="nick" style="color:#8dd3c7"><a href="#014400" label="[01:44:00]">&lt;stikonas&gt;</a></span><span class="message">xentrac: it seems to work...</span></div><div class="line" id="014408"><span class="nick" style="color:#8dd3c7"><a href="#014408" label="[01:44:08]">&lt;stikonas&gt;</a></span><span class="message">otherwise it wouldn't have compiled</span></div><div class="line" id="014417"><span class="nick" style="color:#6b8072"><a href="#014417" label="[01:44:17]">&lt;xentrac&gt;</a></span><span class="message">I'd think you'd at least need a -Dwchar_t=char in there somewhere, but maybe a small .h file with a typedef and a small C file would be more reliable</span></div><div class="line" id="014419"><span class="nick" style="color:#8dd3c7"><a href="#014419" label="[01:44:19]">&lt;stikonas&gt;</a></span><span class="message">and I guess would fail more dramatically</span></div><div class="line" id="014428"><span class="nick" style="color:#6b8072"><a href="#014428" label="[01:44:28]">&lt;xentrac&gt;</a></span><span class="message">but hey, if it compiles, ship it!</span></div><div class="line" id="014429"><span class="nick" style="color:#8dd3c7"><a href="#014429" label="[01:44:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, maybe...</span></div><div class="line" id="014438"><span class="nick" style="color:#8dd3c7"><a href="#014438" label="[01:44:38]">&lt;stikonas&gt;</a></span><span class="message">but the thing is that only yacc compiles...</span></div><div class="line" id="014440"><span class="nick" style="color:#8dd3c7"><a href="#014440" label="[01:44:40]">&lt;stikonas&gt;</a></span><span class="message">not lex :(</span></div><div class="line" id="014458"><span class="nick" style="color:#6b8072"><a href="#014458" label="[01:44:58]">&lt;xentrac&gt;</a></span><span class="message">what is it complaining about?</span></div><div class="line" id="014513"><span class="nick" style="color:#6b8072"><a href="#014513" label="[01:45:13]">&lt;xentrac&gt;</a></span><span class="message">it'd be nice if there was an option in lex and yacc to just not compile wchar_t support</span></div><div class="line" id="014533"><span class="nick" style="color:#8dd3c7"><a href="#014533" label="[01:45:33]">&lt;stikonas&gt;</a></span><span class="message">see error 10 minutes ago...</span></div><div class="line" id="014546"><span class="nick" style="color:#6b8072"><a href="#014546" label="[01:45:46]">&lt;xentrac&gt;</a></span><span class="message">taht looks like an error from yacc</span></div><div class="line" id="014549"><span class="nick" style="color:#8dd3c7"><a href="#014549" label="[01:45:49]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="014553"><span class="nick" style="color:#6b8072"><a href="#014553" label="[01:45:53]">&lt;xentrac&gt;</a></span><span class="message">not cc</span></div><div class="line" id="014559"><span class="nick" style="color:#8dd3c7"><a href="#014559" label="[01:45:59]">&lt;stikonas&gt;</a></span><span class="message">oh, so that's the error...</span></div><div class="line" id="014603"><span class="nick" style="color:#8dd3c7"><a href="#014603" label="[01:46:03]">&lt;stikonas&gt;</a></span><span class="message">sorry, by not compiling</span></div><div class="line" id="014619"><span class="nick" style="color:#8dd3c7"><a href="#014619" label="[01:46:19]">&lt;stikonas&gt;</a></span><span class="message">I meant yacc fails to build lex'es parser.y-&gt;parser.c</span></div><div class="line" id="014632"><span class="nick" style="color:#6b8072"><a href="#014632" label="[01:46:32]">&lt;xentrac&gt;</a></span><span class="message">so are you saying yacc compiles but doesn't run right?  or are those actually errors from cc?  because I didn't know &quot;redeclaration of precedence&quot; was a C compiler error</span></div><div class="line" id="014641"><span class="nick" style="color:#8dd3c7"><a href="#014641" label="[01:46:41]">&lt;stikonas&gt;</a></span><span class="message">this is error from yacc</span></div><div class="line" id="014641"><span class="nick" style="color:#6b8072"><a href="#014641" label="[01:46:41]">&lt;xentrac&gt;</a></span><span class="message">I mean wchar_t was a later addition to C; you'd think there would be some kind of configure option for that.  even though of course the Bell Labs guys were totally negative on #ifdef generally</span></div><div class="line" id="014658"><span class="nick" style="color:#6b8072"><a href="#014658" label="[01:46:58]">&lt;xentrac&gt;</a></span><span class="message">and this is heirloom-lex, yes?</span></div><div class="line" id="014658"><span class="nick" style="color:#8dd3c7"><a href="#014658" label="[01:46:58]">&lt;stikonas&gt;</a></span><span class="message">make runs &quot;yacc  parser.y&quot;</span></div><div class="line" id="014707"><span class="nick" style="color:#8dd3c7"><a href="#014707" label="[01:47:07]">&lt;stikonas&gt;</a></span><span class="message">and this spits those 4 warnings and error</span></div><div class="line" id="014720"><span class="nick" style="color:#6b8072"><a href="#014720" label="[01:47:20]">&lt;xentrac&gt;</a></span><span class="message">did it really say &quot;redeclaration of precedence of (nothing)&quot;?</span></div><div class="line" id="014731"><span class="nick" style="color:#8dd3c7"><a href="#014731" label="[01:47:31]">&lt;stikonas&gt;</a></span><span class="message">yes ...</span></div><div class="line" id="014738"><span class="nick" style="color:#6b8072"><a href="#014738" label="[01:47:38]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="014801"><span class="nick" style="color:#8dd3c7"><a href="#014801" label="[01:48:01]">&lt;stikonas&gt;</a></span><span class="message">well, it's actually space</span></div><div class="line" id="014808"><span class="nick" style="color:#6b8072"><a href="#014808" label="[01:48:08]">&lt;xentrac&gt;</a></span><span class="message">well, this is a stupid thing to say, but it sounds like it's not executing correctly</span></div><div class="line" id="014808"><span class="nick" style="color:#8dd3c7"><a href="#014808" label="[01:48:08]">&lt;stikonas&gt;</a></span><span class="message">instead of (nothing)</span></div><div class="line" id="014815"><span class="nick" style="color:#6b8072"><a href="#014815" label="[01:48:15]">&lt;xentrac&gt;</a></span><span class="message">&quot;precedence of  &quot;?</span></div><div class="line" id="014843"><span class="nick" style="color:#8dd3c7"><a href="#014843" label="[01:48:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe still something is broken when I patch those wide chars</span></div><div class="line" id="014957"><span class="nick" style="color:#8dd3c7"><a href="#014957" label="[01:49:57]">&lt;stikonas&gt;</a></span><span class="message">it's a bit more interesting if I run on GNU flex</span></div><div class="line" id="015016"><span class="nick" style="color:#6b8072"><a href="#015016" label="[01:50:16]">&lt;xentrac&gt;</a></span><span class="message">well, see above about possibly more kosher approaches to patching them</span></div><div class="line" id="015024"><span class="nick" style="color:#8dd3c7"><a href="#015024" label="[01:50:24]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1181687/">https://paste.debian.net/1181687/</a> </span></div><div class="line" id="015037"><span class="nick" style="color:#8dd3c7"><a href="#015037" label="[01:50:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, maybe...</span></div><div class="line" id="015043"><span class="nick" style="color:#8dd3c7"><a href="#015043" label="[01:50:43]">&lt;stikonas&gt;</a></span><span class="message">but not today</span></div><div class="line" id="015127"><span class="nick" style="color:#8dd3c7"><a href="#015127" label="[01:51:27]">&lt;stikonas&gt;</a></span><span class="message">still the fact that yacc is building and not immediately exiting is promising</span></div><div class="line" id="015136"><span class="nick" style="color:#6b8072"><a href="#015136" label="[01:51:36]">&lt;xentrac&gt;</a></span><span class="message">hey, that's a different error</span></div><div class="line" id="015137"><span class="nick" style="color:#8dd3c7"><a href="#015137" label="[01:51:37]">&lt;stikonas&gt;</a></span><span class="message">maybe with proper patching it will just work</span></div><div class="line" id="015143"><span class="nick" style="color:#6b8072"><a href="#015143" label="[01:51:43]">&lt;xentrac&gt;</a></span><span class="message">conflicts: 2074 shift/reduce, 644 reduce/reduce</span></div><div class="line" id="015145"><span class="nick" style="color:#6b8072"><a href="#015145" label="[01:51:45]">&lt;xentrac&gt;</a></span><span class="message">&quot;parse.y&quot;, line 874: fatal: cannot find parser /yaccpar</span></div><div class="line" id="015212"><span class="nick" style="color:#6b8072"><a href="#015212" label="[01:52:12]">&lt;xentrac&gt;</a></span><span class="message">that last line makes me wonder if it's looking for a file &quot;yaccpar&quot; in the root directory</span></div><div class="line" id="015228"><span class="nick" style="color:#6b8072"><a href="#015228" label="[01:52:28]">&lt;xentrac&gt;</a></span><span class="message">if you strace it you will see for sure whether it's doing that</span></div><div class="line" id="015240"><span class="nick" style="color:#6b8072"><a href="#015240" label="[01:52:40]">&lt;xentrac&gt;</a></span><span class="message">and if so the culprit is probably an unset environment variable telling it where to find yaccpar</span></div><div class="line" id="015243"><span class="nick" style="color:#8dd3c7"><a href="#015243" label="[01:52:43]">&lt;stikonas&gt;</a></span><span class="message">strace -e open I guess...</span></div><div class="line" id="015252"><span class="nick" style="color:#6b8072"><a href="#015252" label="[01:52:52]">&lt;xentrac&gt;</a></span><span class="message">if you like yeah</span></div><div class="line" id="015301"><span class="nick" style="color:#6b8072"><a href="#015301" label="[01:53:01]">&lt;xentrac&gt;</a></span><span class="message">I just use strace -ff and let 'er rip</span></div><div class="line" id="015430"><span class="nick" style="color:#6b8072"><a href="#015430" label="[01:54:30]">&lt;xentrac&gt;</a></span><span class="message">then vgrep or use Emacs ^R to examine the resuts</span></div><div class="line" id="015432"><span class="nick" style="color:#6b8072"><a href="#015432" label="[01:54:32]">&lt;xentrac&gt;</a></span><span class="message">*l</span></div><div class="line" id="015444"><span class="nick" style="color:#8dd3c7"><a href="#015444" label="[01:54:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, it looks in root folder</span></div><div class="line" id="015518"><span class="nick" style="color:#8dd3c7"><a href="#015518" label="[01:55:18]">&lt;stikonas&gt;</a></span><span class="message">open(&quot;/yaccpar&quot;, O_RDONLY)              = -1</span></div><div class="line" id="015600"><span class="nick" style="color:#6b8072"><a href="#015600" label="[01:56:00]">&lt;xentrac&gt;</a></span><span class="message">well, hardly surprising it doesn't find it</span></div><div class="line" id="015611"><span class="nick" style="color:#8dd3c7"><a href="#015611" label="[01:56:11]">&lt;stikonas&gt;</a></span><span class="message">oh, that's failed strcat</span></div><div class="line" id="015619"><span class="nick" style="color:#6b8072"><a href="#015619" label="[01:56:19]">&lt;xentrac&gt;</a></span><span class="message">failed strcat?</span></div><div class="line" id="015629"><span class="nick" style="color:#8dd3c7"><a href="#015629" label="[01:56:29]">&lt;stikonas&gt;</a></span><span class="message">parser = strcat(cp, &quot;/yaccpar&quot;);</span></div><div class="line" id="015632"><span class="nick" style="color:#8dd3c7"><a href="#015632" label="[01:56:32]">&lt;stikonas&gt;</a></span><span class="message">cp is empty I guess</span></div><div class="line" id="015649"><span class="nick" style="color:#6b8072"><a href="#015649" label="[01:56:49]">&lt;xentrac&gt;</a></span><span class="message">well, it's good that it doesn't have any cp</span></div><div class="line" id="015654"><span class="nick" style="color:#6b8072"><a href="#015654" label="[01:56:54]">&lt;xentrac&gt;</a></span><span class="message">we might have to report it to the FBI otherweise</span></div><div class="line" id="015702"><span class="nick" style="color:#6b8072"><a href="#015702" label="[01:57:02]">&lt;xentrac&gt;</a></span><span class="message">but what is that variable supposed to have in it?</span></div><div class="line" id="015746"><span class="nick" style="color:#8dd3c7"><a href="#015746" label="[01:57:46]">&lt;stikonas&gt;</a></span><span class="message">optarg...</span></div><div class="line" id="015825"><span class="nick" style="color:#8dd3c7"><a href="#015825" label="[01:58:25]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="015834"><span class="nick" style="color:#8dd3c7"><a href="#015834" label="[01:58:34]">&lt;stikonas&gt;</a></span><span class="message">yaccpars is in yacc source folder</span></div><div class="line" id="020005"><span class="nick" style="color:#8dd3c7"><a href="#020005" label="[02:00:05]">&lt;stikonas&gt;</a></span><span class="message">ok, then I can produce y.tap.{c.h} for gnu flex</span></div><div class="line" id="020015"><span class="nick" style="color:#8dd3c7"><a href="#020015" label="[02:00:15]">&lt;stikonas&gt;</a></span><span class="message">s/tap/tab/</span></div><div class="line" id="020030"><span class="nick" style="color:#8dd3c7"><a href="#020030" label="[02:00:30]">&lt;stikonas&gt;</a></span><span class="message">although, I still need lexer...</span></div><div class="line" id="020107"><span class="nick" style="color:#8dd3c7"><a href="#020107" label="[02:01:07]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's half-working</span></div><div class="line" id="020318"><span class="nick" style="color:#8dd3c7"><a href="#020318" label="[02:03:18]">&lt;stikonas&gt;</a></span><span class="message">after lex is done, it should just work</span></div><div class="line" id="020559"><span class="nick" style="color:#6b8072"><a href="#020559" label="[02:05:59]">&lt;xentrac&gt;</a></span><span class="message">hooray! congratulations!</span></div><div class="line" id="020704"><span class="nick" style="color:#8dd3c7"><a href="#020704" label="[02:07:04]">&lt;stikonas&gt;</a></span><span class="message">well, but lex is not done..</span></div><div class="line" id="020846"><span class="nick" style="color:#6b8072"><a href="#020846" label="[02:08:46]">&lt;xentrac&gt;</a></span><span class="message">it will be!</span></div><div class="line" id="021123"><span class="nick" style="color:#389600"><a href="#021123" label="[02:11:23]">&lt;fossy&gt;</a></span><span class="message">NICE</span></div><div class="line" id="021551"><span class="nick" style="color:#80b1d3"><a href="#021551" label="[02:15:51]">&lt;malina&gt;</a></span><span class="message">stikonas[m], erm I built lex and yacc for my musl toolchain just yesterday</span></div><div class="line" id="021604"><span class="nick" style="color:#80b1d3"><a href="#021604" label="[02:16:04]">&lt;malina&gt;</a></span><span class="message">I don't think it's any worse, as it even has macros for glibc. what is your isse?</span></div><div class="line" id="021639"><span class="nick" style="color:#389600"><a href="#021639" label="[02:16:39]">&lt;fossy&gt;</a></span><span class="message">malina: we are using mes libc toolchain</span></div><div class="line" id="021641"><span class="nick" style="color:#80b1d3"><a href="#021641" label="[02:16:41]">&lt;malina&gt;</a></span><span class="message">OH, wait you are using the bootstrapped toolchain of yours?</span></div><div class="line" id="021644"><span class="nick" style="color:#389600"><a href="#021644" label="[02:16:44]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="021644"><span class="nick" style="color:#80b1d3"><a href="#021644" label="[02:16:44]">&lt;malina&gt;</a></span><span class="message">AH yes, sorry. :)</span></div><div class="line" id="021653"><span class="nick" style="color:#389600"><a href="#021653" label="[02:16:53]">&lt;fossy&gt;</a></span><span class="message">tinycc and mes libc</span></div><div class="line" id="021655"><span class="nick" style="color:#6b8072"><a href="#021655" label="[02:16:55]">&lt;xentrac&gt;</a></span><span class="message">fuck off, malina</span></div><div class="line" id="021700"><span class="nick" style="color:#80b1d3"><a href="#021700" label="[02:17:00]">&lt;malina&gt;</a></span><span class="message">I thought you were just trying to compile it to see if it was 'compatible', my bad.</span></div><div class="line" id="021706"><span class="nick" style="color:#80b1d3"><a href="#021706" label="[02:17:06]">&lt;malina&gt;</a></span><span class="message">nice !</span></div><div class="line" id="021816"><span class="nick" style="color:#80b1d3"><a href="#021816" label="[02:18:16]">&lt;malina&gt;</a></span><span class="message">I can report, that the heirloom lex /yacc for the record doesn't seem awfully up to compatiblity with the modern gnu tools</span></div><div class="line" id="021851"><span class="nick" style="color:#389600"><a href="#021851" label="[02:18:51]">&lt;fossy&gt;</a></span><span class="message">no</span></div><div class="line" id="021859"><span class="nick" style="color:#389600"><a href="#021859" label="[02:18:59]">&lt;fossy&gt;</a></span><span class="message">we are only using it for bootstrapping, but you're correct</span></div><div class="line" id="021906"><span class="nick" style="color:#80b1d3"><a href="#021906" label="[02:19:06]">&lt;malina&gt;</a></span><span class="message">inside my 'test toolchain', I'm kinda trying to make it as non-conformant as bleeding possible _just_ to see what fails or works etc. with the heirloom yacc/lex compiling in general got .. let's just say.. veyr wonky</span></div><div class="line" id="021938"><span class="nick" style="color:#80b1d3"><a href="#021938" label="[02:19:38]">&lt;malina&gt;</a></span><span class="message">well I am just saying, be aware that it's NOT just bottom up, but top down you need to keep an eye on by the time you have gotten to whereyou are :)</span></div><div class="line" id="022003"><span class="nick" style="color:#389600"><a href="#022003" label="[02:20:03]">&lt;fossy&gt;</a></span><span class="message">?? we are doing this bottom up</span></div><div class="line" id="022007"><span class="nick" style="color:#80b1d3"><a href="#022007" label="[02:20:07]">&lt;malina&gt;</a></span><span class="message">I know</span></div><div class="line" id="074858"><span class="nick" style="color:#6d2462"><a href="#074858" label="[07:48:58]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: CI does not mean you are always testing on another machine, it just means that you test while you develope. so CI-mode = easy testing. At the moment i see no easy method to fire up qemu with your approach, there is not even a readme! you are complaining about complexity, but i'am adding merely a oneline to a 160 line-script...</span></div><div class="line" id="093658"><span class="nick" style="color:#389600"><a href="#093658" label="[09:36:58]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: the readme is going to be pushed in the restructure, i have it ready and waiting. CI = continuous integration, normally referring to the integration in the software development pipeline. i think it would confuse many users. your PR is also not a oneline and there is a very easy method to fire up qemu</span></div><div class="line" id="093712"><span class="nick" style="color:#389600"><a href="#093712" label="[09:37:12]">&lt;fossy&gt;</a></span><span class="message">method being 1. copy a kernel to the root of repo with name kernel 2. ./rootfs.sh</span></div><div class="line" id="093932"><span class="nick" style="color:#389600"><a href="#093932" label="[09:39:32]">&lt;fossy&gt;</a></span><span class="message">i don't think that the ideas behind your PR are bad fwiw</span></div><div class="line" id="093939"><span class="nick" style="color:#389600"><a href="#093939" label="[09:39:39]">&lt;fossy&gt;</a></span><span class="message">just the current implementation needs a small amount of work</span></div><div class="line" id="094229"><span class="nick" style="color:#389600"><a href="#094229" label="[09:42:29]">&lt;fossy&gt;</a></span><span class="message">also, fwiw, the definition of CI is not test while you develop, &quot;Continuous Integration is a development practice where developers integrate code into a shared repository frequently where each integration is verified by an automated build and automated tests.&quot;</span></div><div class="line" id="094238"><span class="nick" style="color:#389600"><a href="#094238" label="[09:42:38]">&lt;fossy&gt;</a></span><span class="message">i.e. automated testing of a PR</span></div><div class="line" id="100503"><span class="nick" style="color:#234e69"><a href="#100503" label="[10:05:03]">&lt;Hagfish&gt;</a></span><span class="message">i don't know why there isn't a name for the software engineering practice of automatically running builds and tests locally as you make changes</span></div><div class="line" id="100521"><span class="nick" style="color:#234e69"><a href="#100521" label="[10:05:21]">&lt;Hagfish&gt;</a></span><span class="message">perhaps that should be called CB/CT (continuous building / continuous testing)</span></div><div class="line" id="100551"><span class="nick" style="color:#234e69"><a href="#100551" label="[10:05:51]">&lt;Hagfish&gt;</a></span><span class="message">anyway, here's a blog post about someone using &quot;entr&quot; to achieve that: <a rel="nofollow" href="https://jvns.ca/blog/2020/06/28/entr/">https://jvns.ca/blog/2020/06/28/entr/</a> </span></div><div class="line" id="100907"><span class="nick" style="color:#6c3d55"><a href="#100907" label="[10:09:07]">&lt;Profpatsch&gt;</a></span><span class="message">entr looks cool, I wrote my own inotify wrapper a while ago but I’m not using it much.</span></div><div class="line" id="101026"><span class="nick" style="color:#6c3d55"><a href="#101026" label="[10:10:26]">&lt;Profpatsch&gt;</a></span><span class="message">The restart logic of “kill the currently running server when code changes, but only after the rebuild is finished” was one reason for that</span></div><div class="line" id="101231"><span class="nick" style="color:#d9d9d9"><a href="#101231" label="[10:12:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, I just run rootfs.sh when I test, the whole test is fairly easy</span></div><div class="line" id="101243"><span class="nick" style="color:#389600"><a href="#101243" label="[10:12:43]">&lt;fossy&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="101302"><span class="nick" style="color:#389600"><a href="#101302" label="[10:13:02]">&lt;fossy&gt;</a></span><span class="message">development is admittedly less easy</span></div><div class="line" id="101305"><span class="nick" style="color:#389600"><a href="#101305" label="[10:13:05]">&lt;fossy&gt;</a></span><span class="message">but there's not much we can do about that</span></div><div class="line" id="101458"><span class="nick" style="color:#d9d9d9"><a href="#101458" label="[10:14:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I do like gforce_11977’s chroot mode for development</span></div><div class="line" id="101907"><span class="nick" style="color:#389600"><a href="#101907" label="[10:19:07]">&lt;fossy&gt;</a></span><span class="message">yeah but there's like no shell to jump into or anything unless you put one there</span></div><div class="line" id="102030"><span class="nick" style="color:#d9d9d9"><a href="#102030" label="[10:20:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, for now...</span></div><div class="line" id="102042"><span class="nick" style="color:#d9d9d9"><a href="#102042" label="[10:20:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Hopefully bash will be ready soon</span></div><div class="line" id="102448"><span class="nick" style="color:#389600"><a href="#102448" label="[10:24:48]">&lt;fossy&gt;</a></span><span class="message">well, bash seems to mostly work now, its just he bison issue, which cant use bash, lol</span></div><div class="line" id="102459"><span class="nick" style="color:#389600"><a href="#102459" label="[10:24:59]">&lt;fossy&gt;</a></span><span class="message">i need to do more extensive testing of bash tho</span></div><div class="line" id="102509"><span class="nick" style="color:#389600"><a href="#102509" label="[10:25:09]">&lt;fossy&gt;</a></span><span class="message">i think you're running into a weird problem in your chroot setup</span></div><div class="line" id="102555"><span class="nick" style="color:#d9d9d9"><a href="#102555" label="[10:25:55]">&lt;stikonas[m]&gt;</a></span><span class="message">We'll sort it out I hope...</span></div><div class="line" id="102737"><span class="nick" style="color:#389600"><a href="#102737" label="[10:27:37]">&lt;fossy&gt;</a></span><span class="message">we will</span></div><div class="line" id="102927"><span class="nick" style="color:#6d2462"><a href="#102927" label="[10:29:27]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: &quot;automated testing&quot; is ofcourse also within a local githook | at the moment users must compile their own kernel, which is a at least annoying</span></div><div class="line" id="103258"><span class="nick" style="color:#389600"><a href="#103258" label="[10:32:58]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: yeah, that's local development, not integrating a devleopers changes in the tree</span></div><div class="line" id="103301"><span class="nick" style="color:#389600"><a href="#103301" label="[10:33:01]">&lt;fossy&gt;</a></span><span class="message">but whatever RE: CI</span></div><div class="line" id="103316"><span class="nick" style="color:#389600"><a href="#103316" label="[10:33:16]">&lt;fossy&gt;</a></span><span class="message">wiht the compiling of own kernel, i am aware, and this is a bydesign thing.</span></div><div class="line" id="103329"><span class="nick" style="color:#389600"><a href="#103329" label="[10:33:29]">&lt;fossy&gt;</a></span><span class="message">i don't want to distribute a kernel with the repository until i have a proper seed kernel</span></div><div class="line" id="103332"><span class="nick" style="color:#6d2462"><a href="#103332" label="[10:33:32]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: 'entr' is interesting, but does not solve the problem of building the qemu-input (e.g. kernel + initrd)</span></div><div class="line" id="103353"><span class="nick" style="color:#389600"><a href="#103353" label="[10:33:53]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: initrd is built...</span></div><div class="line" id="103402"><span class="nick" style="color:#389600"><a href="#103402" label="[10:34:02]">&lt;fossy&gt;</a></span><span class="message">that's literally what rootfs.sh's main purpose is</span></div><div class="line" id="103520"><span class="nick" style="color:#d9d9d9"><a href="#103520" label="[10:35:20]">&lt;stikonas[m]&gt;</a></span><span class="message">And kernel is only needed for qemu, not chroot</span></div><div class="line" id="103525"><span class="nick" style="color:#389600"><a href="#103525" label="[10:35:25]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: re: kernel, i don't ever want to default to using a built kernel, but i am happy to add some 'normal general purpose defaults'</span></div><div class="line" id="103535"><span class="nick" style="color:#d9d9d9"><a href="#103535" label="[10:35:35]">&lt;stikonas[m]&gt;</a></span><span class="message">So you can do testing without it</span></div><div class="line" id="103538"><span class="nick" style="color:#6d2462"><a href="#103538" label="[10:35:38]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: stikonas: my idea was to &quot;include a hidden busybox&quot; in our initrd, so we can at the end just jump into a real shell in calling '/bin/busybox sh'</span></div><div class="line" id="103540"><span class="nick" style="color:#389600"><a href="#103540" label="[10:35:40]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: although later in the build process we may require particular kernels in which case chroot may not always work</span></div><div class="line" id="103543"><span class="nick" style="color:#389600"><a href="#103543" label="[10:35:43]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: no</span></div><div class="line" id="103556"><span class="nick" style="color:#389600"><a href="#103556" label="[10:35:56]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i refuse to distribute binary seeds other than hex0, kaem, kernel (when it becomes avaliable)</span></div><div class="line" id="103611"><span class="nick" style="color:#d9d9d9"><a href="#103611" label="[10:36:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, but we'll have shell then</span></div><div class="line" id="103616"><span class="nick" style="color:#389600"><a href="#103616" label="[10:36:16]">&lt;fossy&gt;</a></span><span class="message">when we do have bash working interactively, however, we can jump into a shell</span></div><div class="line" id="103640"><span class="nick" style="color:#389600"><a href="#103640" label="[10:36:40]">&lt;fossy&gt;</a></span><span class="message">(which will be compiled within the live system)</span></div><div class="line" id="103700"><span class="nick" style="color:#d9d9d9"><a href="#103700" label="[10:37:00]">&lt;stikonas[m]&gt;</a></span><span class="message">It's close enough that we don't need to do busybox</span></div><div class="line" id="103709"><span class="nick" style="color:#389600"><a href="#103709" label="[10:37:09]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i'll review your PR in more detail now with some more specific cahgnes</span></div><div class="line" id="103713"><span class="nick" style="color:#d9d9d9"><a href="#103713" label="[10:37:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Best to spend time in bash</span></div><div class="line" id="103750"><span class="nick" style="color:#d9d9d9"><a href="#103750" label="[10:37:50]">&lt;stikonas[m]&gt;</a></span><span class="message">s/in/on</span></div><div class="line" id="103828"><span class="nick" style="color:#389600"><a href="#103828" label="[10:38:28]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: do you think kritis-linux should be a submodule (see gforce_d11977's PR)</span></div><div class="line" id="103955"><span class="nick" style="color:#6d2462"><a href="#103955" label="[10:39:55]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: stikonas: yes, bash/shell seems near 8-) but till now i used this trick in my own build to have an easy &quot;look-around-and-see-what-broke-and-how-to-fix-that&quot;</span></div><div class="line" id="104014"><span class="nick" style="color:#389600"><a href="#104014" label="[10:40:14]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: same (ive been using busybox for debugging) , but i don't want that included in the repo</span></div><div class="line" id="104149"><span class="nick" style="color:#d9d9d9"><a href="#104149" label="[10:41:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I've also used busybox but I agree with fossy, not in repo</span></div><div class="line" id="104345"><span class="nick" style="color:#6d2462"><a href="#104345" label="[10:43:45]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: stikonas: absolutely, i'am on your side, no binaries in repo</span></div><div class="line" id="105154"><span class="nick" style="color:#8dd3c7"><a href="#105154" label="[10:51:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: hmm, we probably don't need submodule, since there are a lot of ways to build kernel...</span></div><div class="line" id="105225"><span class="nick" style="color:#8dd3c7"><a href="#105225" label="[10:52:25]">&lt;stikonas&gt;</a></span><span class="message">but it might be nice to have a way to build minimal kernel (i.e. that minilinux.sh)</span></div><div class="line" id="105304"><span class="nick" style="color:#8dd3c7"><a href="#105304" label="[10:53:04]">&lt;stikonas&gt;</a></span><span class="message">but submodule probably is not worth it for one off build</span></div><div class="line" id="110947"><span class="nick" style="color:#8dd3c7"><a href="#110947" label="[11:09:47]">&lt;stikonas&gt;</a></span><span class="message">anyway, I might be wrong person to ask whether building kernel is hard since I'm on Gentoo...</span></div><div class="line" id="111524"><span class="nick" style="color:#8dd3c7"><a href="#111524" label="[11:15:24]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, how should we include heirloom-devtools?</span></div><div class="line" id="111535"><span class="nick" style="color:#8dd3c7"><a href="#111535" label="[11:15:35]">&lt;stikonas&gt;</a></span><span class="message">we only need a tiny bit (yacc/lex)</span></div><div class="line" id="112757"><span class="nick" style="color:#6d2462"><a href="#112757" label="[11:27:57]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: submodule is IMHO overkill/not needed. building a kernel is a hassle, especially if it comes to other architectures (e.g. arm) and also if your are not used to it...</span></div><div class="line" id="112841"><span class="nick" style="color:#8dd3c7"><a href="#112841" label="[11:28:41]">&lt;stikonas&gt;</a></span><span class="message">but for testing you can just use your distro kernel...</span></div><div class="line" id="112902"><span class="nick" style="color:#8dd3c7"><a href="#112902" label="[11:29:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, I would think submodule is a bit overkill for optional thing</span></div><div class="line" id="113731"><span class="nick" style="color:#389600"><a href="#113731" label="[11:37:31]">&lt;fossy&gt;</a></span><span class="message">stikonas: do they distrobute a rtarball</span></div><div class="line" id="113753"><span class="nick" style="color:#389600"><a href="#113753" label="[11:37:53]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: yeah, i don't mind to much whether it is a submodule</span></div><div class="line" id="113800"><span class="nick" style="color:#389600"><a href="#113800" label="[11:38:00]">&lt;fossy&gt;</a></span><span class="message">hm...</span></div><div class="line" id="113808"><span class="nick" style="color:#389600"><a href="#113808" label="[11:38:08]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: actually, you know what, clone it into sysa/tmp</span></div><div class="line" id="113823"><span class="nick" style="color:#389600"><a href="#113823" label="[11:38:23]">&lt;fossy&gt;</a></span><span class="message">that's proabbly the best solution cause that's already where all the tmp stuff it</span></div><div class="line" id="113831"><span class="nick" style="color:#389600"><a href="#113831" label="[11:38:31]">&lt;fossy&gt;</a></span><span class="message">but make sure you clone a specific commit</span></div><div class="line" id="113852"><span class="nick" style="color:#8dd3c7"><a href="#113852" label="[11:38:52]">&lt;stikonas&gt;</a></span><span class="message">fossy: no, it's cvs</span></div><div class="line" id="113858"><span class="nick" style="color:#389600"><a href="#113858" label="[11:38:58]">&lt;fossy&gt;</a></span><span class="message">stikonas: oh ew</span></div><div class="line" id="113906"><span class="nick" style="color:#389600"><a href="#113906" label="[11:39:06]">&lt;fossy&gt;</a></span><span class="message">i forgot about tt</span></div><div class="line" id="113909"><span class="nick" style="color:#8dd3c7"><a href="#113909" label="[11:39:09]">&lt;stikonas&gt;</a></span><span class="message">there are some github mirrors</span></div><div class="line" id="113913"><span class="nick" style="color:#8dd3c7"><a href="#113913" label="[11:39:13]">&lt;stikonas&gt;</a></span><span class="message">that are not official</span></div><div class="line" id="113925"><span class="nick" style="color:#8dd3c7"><a href="#113925" label="[11:39:25]">&lt;stikonas&gt;</a></span><span class="message">or gitlab</span></div><div class="line" id="114013"><span class="nick" style="color:#389600"><a href="#114013" label="[11:40:13]">&lt;fossy&gt;</a></span><span class="message">stikonas: this? <a rel="nofollow" href="https://sourceforge.net/projects/heirloom/files/heirloom-devtools/070527/">https://sourceforge.net/projects/heirloom/files/heirloom-devtools/070527/</a> </span></div><div class="line" id="114021"><span class="nick" style="color:#389600"><a href="#114021" label="[11:40:21]">&lt;fossy&gt;</a></span><span class="message">not sure how new that is compared to cvs..</span></div><div class="line" id="114048"><span class="nick" style="color:#8dd3c7"><a href="#114048" label="[11:40:48]">&lt;stikonas&gt;</a></span><span class="message">oh, that might be good!</span></div><div class="line" id="115925"><span class="nick" style="color:#6d2462"><a href="#115925" label="[11:59:25]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: it *is* already cloned into sysa/tmp</span></div><div class="line" id="121506"><span class="nick" style="color:#389600"><a href="#121506" label="[12:15:06]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: ooh, yeah, my bad</span></div><div class="line" id="121509"><span class="nick" style="color:#389600"><a href="#121509" label="[12:15:09]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="121513"><span class="nick" style="color:#389600"><a href="#121513" label="[12:15:13]">&lt;fossy&gt;</a></span><span class="message">idk how i missed that</span></div><div class="line" id="121738"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="121740"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="124444"><span class="nick" style="color:#234e69"><a href="#124444" label="[12:44:44]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://arxiv.org/pdf/1803.05385.pdf">https://arxiv.org/pdf/1803.05385.pdf</a>  really interesting paper about distributed generation of random numbers, and the problem of Bulgarian judges being chosen by a computer system with a malicious user</span></div><div class="line" id="124624"><span class="nick" style="color:#234e69"><a href="#124624" label="[12:46:24]">&lt;Hagfish&gt;</a></span><span class="message">the proposal is (approximately) that participants on the network each reveal an encrypted message to each other, then reveal the decrypted plaintext, which is XORed together (and then hashed, if necessary, to make it uniform)</span></div><div class="line" id="124755"><span class="nick" style="color:#234e69"><a href="#124755" label="[12:47:55]">&lt;Hagfish&gt;</a></span><span class="message">the next question is, if you have a distributed network and a fair random number generator, why can't this be used in place of &quot;proof of work&quot; for a cryptocurrency?</span></div><div class="line" id="135524"><span class="nick" style="color:#bc80bd"><a href="#135524" label="[13:55:24]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: the point of proof of work is to make cheating on a distributed clock computationally hard to do. so the question becomes how can that system deal with people with financial reasons to cheat.</span></div><div class="line" id="140028"><span class="nick" style="color:#bc80bd"><a href="#140028" label="[14:00:28]">&lt;OriansJ&gt;</a></span><span class="message">As remote attestation does not work and never could work. How could fair random number generation be verified? Thus if the system requires fairness to function, you have a problem.</span></div><div class="line" id="140040"><span class="nick" style="color:#bc80bd"><a href="#140040" label="[14:00:40]">&lt;OriansJ&gt;</a></span><span class="message">a problem that can't be solved.</span></div><div class="line" id="160333"><span class="nick" style="color:#234e69"><a href="#160333" label="[16:03:33]">&lt;Hagfish&gt;</a></span><span class="message">yeah, remote attestation is a kind of sick joke, and the correct solution is transparency (i.e. any request for a Bulgarian judge needs to be sent out to multiple append-only logs, so that a malicious user can't re-roll the throws they don't like)</span></div><div class="line" id="160623"><span class="nick" style="color:#234e69"><a href="#160623" label="[16:06:23]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: i don't think that there will be &quot;distributed clock&quot; problems with a network that generates a random number every 10 minutes</span></div><div class="line" id="160803"><span class="nick" style="color:#234e69"><a href="#160803" label="[16:08:03]">&lt;Hagfish&gt;</a></span><span class="message">each node would be synced to UTC, and would generate its own encrypted random number at the start of each period, send it, and receive other nodes' random numbers for the next 2 minutes, then receive their decrypted random numbers for the next 2, then XOR</span></div><div class="line" id="160908"><span class="nick" style="color:#234e69"><a href="#160908" label="[16:09:08]">&lt;Hagfish&gt;</a></span><span class="message">the XOR would decide which node would write the next block of transactions, and they would be granted a small reward for doing so</span></div><div class="line" id="161000"><span class="nick" style="color:#234e69"><a href="#161000" label="[16:10:00]">&lt;Hagfish&gt;</a></span><span class="message">i guess the problem is reaching consensus across a lossy network</span></div><div class="line" id="161044"><span class="nick" style="color:#234e69"><a href="#161044" label="[16:10:44]">&lt;Hagfish&gt;</a></span><span class="message">if one eligible node doesn't send their encrypted random number (or they try to send it, but not every node receives it) then you have a split network</span></div><div class="line" id="161130"><span class="nick" style="color:#234e69"><a href="#161130" label="[16:11:30]">&lt;Hagfish&gt;</a></span><span class="message">forks do happen in bitcoin, but the network might be less sensitive to them because of it is race, and the longest chain (most difficulty) wins</span></div><div class="line" id="162019"><span class="nick" style="color:#3c5b35"><a href="#162019" label="[16:20:19]">&lt;siraben&gt;</a></span><span class="message">side note: reading parts of the bitcoin source I'm pretty sure Satoshi Nakamoto is a team of people, unless they really wrote C code in very different ways in one file to another</span></div><div class="line" id="162044"><span class="nick" style="color:#3c5b35"><a href="#162044" label="[16:20:44]">&lt;siraben&gt;</a></span><span class="message">it's also poorly written C in a lot of places</span></div><div class="line" id="162615"><span class="nick" style="color:#8dd3c7"><a href="#162615" label="[16:26:15]">&lt;stikonas&gt;</a></span><span class="message">it's probably not that hard to deliberately write in different styles</span></div><div class="line" id="164721"><span class="nick" style="color:#af8d2f"><a href="#164721" label="[16:47:21]">&lt;bauen1&gt;</a></span><span class="message">siraben: if you write some project as an experiment you will end up with very different code styles all over</span></div><div class="line" id="164744"><span class="nick" style="color:#af8d2f"><a href="#164744" label="[16:47:44]">&lt;bauen1&gt;</a></span><span class="message">especially if it gets written over a long time</span></div><div class="line" id="164750"><span class="nick" style="color:#3c5b35"><a href="#164750" label="[16:47:50]">&lt;siraben&gt;</a></span><span class="message">that's true</span></div><div class="line" id="165129"><span class="nick" style="color:#af8d2f"><a href="#165129" label="[16:51:29]">&lt;bauen1&gt;</a></span><span class="message">(i haven't read the &quot;original&quot; bitcoin code, so can't judge that, but you can compare brainOS (myunix v1), myunix2 and myunix3 if you want some example of this)</span></div><div class="line" id="165147"><span class="nick" style="color:#234e69"><a href="#165147" label="[16:51:47]">&lt;Hagfish&gt;</a></span><span class="message">another thing to consider is, the more people you ask for help, the greater the chances of someone leaking that fact</span></div><div class="line" id="165256"><span class="nick" style="color:#8dd3c7"><a href="#165256" label="[16:52:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, especially if you do it over a long time, you learn some things and write new code better but might not have time to rewrite old things</span></div><div class="line" id="165301"><span class="nick" style="color:#234e69"><a href="#165301" label="[16:53:01]">&lt;Hagfish&gt;</a></span><span class="message">i think the original coins that &quot;satoshi&quot; mined haven't been moved, and are all in one account, so it's unlikely that a whole team has profited enough to keep things secret</span></div><div class="line" id="165341"><span class="nick" style="color:#8dd3c7"><a href="#165341" label="[16:53:41]">&lt;stikonas&gt;</a></span><span class="message">yeah... and it might be that &quot;satoshi&quot; is not even alive today</span></div><div class="line" id="170241"><span class="nick" style="color:#af8d2f"><a href="#170241" label="[17:02:41]">&lt;bauen1&gt;</a></span><span class="message">kind of like a real-life &quot;ready player one&quot; thing</span></div><div class="line" id="172141"><span class="nick" style="color:#389600"><a href="#172141" label="[17:21:41]">&lt;pder&gt;</a></span><span class="message">I looked into why bash segfaults in live-bootstrap and it happens in initialize_siglist() probably due to stubbed out code in mes libc</span></div><div class="line" id="172212"><span class="nick" style="color:#389600"><a href="#172212" label="[17:22:12]">&lt;pder&gt;</a></span><span class="message">commenting out the call to initialize_siglist() allows bash to run scripts but no interactive shell</span></div><div class="line" id="173006"><span class="nick" style="color:#8dd3c7"><a href="#173006" label="[17:30:06]">&lt;stikonas&gt;</a></span><span class="message">pder: I think for interactive shell you also need /dev/tty</span></div><div class="line" id="173013"><span class="nick" style="color:#8dd3c7"><a href="#173013" label="[17:30:13]">&lt;stikonas&gt;</a></span><span class="message">pder: can you try to create it?</span></div><div class="line" id="173020"><span class="nick" style="color:#8dd3c7"><a href="#173020" label="[17:30:20]">&lt;stikonas&gt;</a></span><span class="message">and see if it runs interactively</span></div><div class="line" id="173035"><span class="nick" style="color:#8dd3c7"><a href="#173035" label="[17:30:35]">&lt;stikonas&gt;</a></span><span class="message">although, even ability to run scripts is good</span></div><div class="line" id="173036"><span class="nick" style="color:#389600"><a href="#173036" label="[17:30:36]">&lt;pder&gt;</a></span><span class="message">Sure, also noticed configure scripts need stuff like /dev/zero</span></div><div class="line" id="173107"><span class="nick" style="color:#8dd3c7"><a href="#173107" label="[17:31:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, although, I would worry about that later...</span></div><div class="line" id="173115"><span class="nick" style="color:#8dd3c7"><a href="#173115" label="[17:31:15]">&lt;stikonas&gt;</a></span><span class="message">we are still far away from bootstrapping autotools</span></div><div class="line" id="173124"><span class="nick" style="color:#389600"><a href="#173124" label="[17:31:24]">&lt;pder&gt;</a></span><span class="message">I was also curious whats done differently in guix since it would seem it would run into the same issue</span></div><div class="line" id="173255"><span class="nick" style="color:#8dd3c7"><a href="#173255" label="[17:32:55]">&lt;stikonas&gt;</a></span><span class="message">pder: doesn't guix have /dev inside build containers?</span></div><div class="line" id="173308"><span class="nick" style="color:#8dd3c7"><a href="#173308" label="[17:33:08]">&lt;stikonas&gt;</a></span><span class="message">and bash is built with configure script</span></div><div class="line" id="173314"><span class="nick" style="color:#8dd3c7"><a href="#173314" label="[17:33:14]">&lt;stikonas&gt;</a></span><span class="message">although, yes, it still uses mes libc</span></div><div class="line" id="173325"><span class="nick" style="color:#8dd3c7"><a href="#173325" label="[17:33:25]">&lt;stikonas&gt;</a></span><span class="message">so one would think it should happen there as well</span></div><div class="line" id="173359"><span class="nick" style="color:#8dd3c7"><a href="#173359" label="[17:33:59]">&lt;stikonas&gt;</a></span><span class="message">pder: maybe some of the config options?</span></div><div class="line" id="173421"><span class="nick" style="color:#8dd3c7"><a href="#173421" label="[17:34:21]">&lt;stikonas&gt;</a></span><span class="message">also ac_cv_func_dlopen=no</span></div><div class="line" id="174143"><span class="nick" style="color:#8dd3c7"><a href="#174143" label="[17:41:43]">&lt;civodul&gt;</a></span><span class="message">stikonas: there's a minimal deterministic /dev in build containers</span></div><div class="line" id="174203"><span class="nick" style="color:#8dd3c7"><a href="#174203" label="[17:42:03]">&lt;civodul&gt;</a></span><span class="message"> <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html">https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html</a> </span></div><div class="line" id="174254"><span class="nick" style="color:#8dd3c7"><a href="#174254" label="[17:42:54]">&lt;stikonas&gt;</a></span><span class="message">ok, at the moment we have no /dev at all yet</span></div><div class="line" id="174306"><span class="nick" style="color:#8dd3c7"><a href="#174306" label="[17:43:06]">&lt;stikonas&gt;</a></span><span class="message">well, I've just build mkdir in unmerged PR...</span></div><div class="line" id="174717"><span class="nick">***</span><span class="message notice">nimaje1 is now known as nimaje</span></div><div class="line" id="174914"><span class="nick">***</span><span class="message notice">coldtom0 is now known as coldtom</span></div><div class="line" id="181742"><span class="nick" style="color:#6d2462"><a href="#181742" label="[18:17:42]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: have adapted my PR with your suggestions, thanks for the input</span></div><div class="line" id="182149"><span class="nick" style="color:#bc80bd"><a href="#182149" label="[18:21:49]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: that is the point of the proof of work to create an effective hard to fake distributed clock. Once you have a single centralized clock that everything is synced on. there is no need for most of the crypto work as you could just have a simple double entry ledger what is only valid when the clock releases the next block of recorded transactions.</span></div><div class="line" id="183537"><span class="nick" style="color:#bc80bd"><a href="#183537" label="[18:35:37]">&lt;OriansJ&gt;</a></span><span class="message">One thing you could do that would be even easier to chain of crypto. Where the source seed is known to everyone, as is the algorithm; Then you require that some block out of that stream is the next seed and a different block is the random value. As that would allow a universal verifiable &quot;fair&quot; random selection. As the person who sets the seed will not be able to predict the uses of the seeds 20years into the future; despite being able</span></div><div class="line" id="183537"><span class="nick" style="color:#bc80bd"><a href="#183537" label="[18:35:37]">&lt;OriansJ&gt;</a></span><span class="message">to predict what the values will be.</span></div><div class="line" id="183802"><span class="nick" style="color:#bc80bd"><a href="#183802" label="[18:38:02]">&lt;OriansJ&gt;</a></span><span class="message">The rules for using of the seed can absolutely be biased for a finite number of iterations but once you allow arbitrary starting points, the bias in the rules net out to zero.</span></div><div class="line" id="194627"><span class="nick" style="color:#389600"><a href="#194627" label="[19:46:27]">&lt;pder&gt;</a></span><span class="message">stikonas: I tried creating /dev/tty /dev/console and a few others but bash still exits immediately.  It also exhibits the same behavior outside of the chroot so it must be related to something else.</span></div><div class="line" id="194849"><span class="nick" style="color:#8dd3c7"><a href="#194849" label="[19:48:49]">&lt;stikonas&gt;</a></span><span class="message">pder: ok...</span></div><div class="line" id="194858"><span class="nick" style="color:#8dd3c7"><a href="#194858" label="[19:48:58]">&lt;stikonas&gt;</a></span><span class="message">well, at least non-interactive scripts work</span></div><div class="line" id="194905"><span class="nick" style="color:#8dd3c7"><a href="#194905" label="[19:49:05]">&lt;stikonas&gt;</a></span><span class="message">that's most important for bootstrap...</span></div><div class="line" id="194915"><span class="nick" style="color:#8dd3c7"><a href="#194915" label="[19:49:15]">&lt;stikonas&gt;</a></span><span class="message">I'll go back to yacc/lex this later today</span></div><div class="line" id="194923"><span class="nick" style="color:#8dd3c7"><a href="#194923" label="[19:49:23]">&lt;stikonas&gt;</a></span><span class="message">hopefully can get bash &quot;properly&quot; bootstrapped</span></div><div class="line" id="195005"><span class="nick" style="color:#389600"><a href="#195005" label="[19:50:05]">&lt;pder&gt;</a></span><span class="message">ill take a closer look later on why commenting out initialize_siglist was necessary</span></div><div class="line" id="204531"><span class="nick" style="color:#6d2462"><a href="#204531" label="[20:45:31]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i have added timestamps to the logoutput of qemu serial console, here is a full live-bootstrap run: <a rel="nofollow" href="http://intercity-vpn.de/1.txt">http://intercity-vpn.de/1.txt</a> </span></div><div class="line" id="211356"><span class="nick" style="color:#234e69"><a href="#211356" label="[21:13:56]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: interesting point about generating randomness from the blocks themselves.  i'd need to understand quite a complex proof that the random number generator couldn't be profitably manipulated by specially crafted blocks</span></div><div class="line" id="211430"><span class="nick" style="color:#234e69"><a href="#211430" label="[21:14:30]">&lt;Hagfish&gt;</a></span><span class="message">i still don't understand the significance of the distributed vs. centralised clocks</span></div><div class="line" id="211518"><span class="nick" style="color:#234e69"><a href="#211518" label="[21:15:18]">&lt;Hagfish&gt;</a></span><span class="message">for example, even if all computers in the world contained quantum-entangled atomic clocks, that wouldn't mean that bitcoin miners wouldn't need to solve proof of work puzzles</span></div><div class="line" id="211544"><span class="nick" style="color:#234e69"><a href="#211544" label="[21:15:44]">&lt;Hagfish&gt;</a></span><span class="message">the PoW scheme serves, among other things, as a defence against Sybil attacks</span></div><div class="line" id="211708"><span class="nick" style="color:#234e69"><a href="#211708" label="[21:17:08]">&lt;Hagfish&gt;</a></span><span class="message">there has to be a way to chose which miner gets to define the next block, and having a centralised or decentralised agreement on wall-clock time doesn't make that any easier/harder</span></div><div class="line" id="211750"><span class="nick" style="color:#234e69"><a href="#211750" label="[21:17:50]">&lt;Hagfish&gt;</a></span><span class="message">unless you mean &quot;clock&quot; in some other sense, which includes the process for picking nodes (as in &quot;clock cycles&quot;)</span></div><div class="line" id="212313"><span class="nick" style="color:#8dd3c7"><a href="#212313" label="[21:23:13]">&lt;stikonas&gt;</a></span><span class="message">if you don't have proof of work then what is the incentive to build on the latest block?</span></div><div class="line" id="213430"><span class="nick" style="color:#234e69"><a href="#213430" label="[21:34:30]">&lt;Hagfish&gt;</a></span><span class="message">good question, hmm</span></div><div class="line" id="213536"><span class="nick" style="color:#234e69"><a href="#213536" label="[21:35:36]">&lt;Hagfish&gt;</a></span><span class="message">under the system i was proposing, nodes would build on the chain whose blocks were mined by the winner of the random lottery</span></div><div class="line" id="213644"><span class="nick" style="color:#234e69"><a href="#213644" label="[21:36:44]">&lt;Hagfish&gt;</a></span><span class="message">nodes could decide to break that rule, and appoint their own winner, but that would be equivalent to bitcoin nodes ignoring a specific chain after a fork</span></div><div class="line" id="213730"><span class="nick" style="color:#234e69"><a href="#213730" label="[21:37:30]">&lt;Hagfish&gt;</a></span><span class="message">the rule about which chain to follow is basically a Schelling Point</span></div><div class="line" id="213855"><span class="nick" style="color:#234e69"><a href="#213855" label="[21:38:55]">&lt;Hagfish&gt;</a></span><span class="message">i suppose with bitcoin you can check with an offline copy of the blockchain that each block really does have a hash value that matches the difficulty calculation</span></div><div class="line" id="213942"><span class="nick" style="color:#234e69"><a href="#213942" label="[21:39:42]">&lt;Hagfish&gt;</a></span><span class="message">in my system you would need to store all the encrypted and decrypted messages from all the nodes, to recreate the (pseudo)random number process</span></div><div class="line" id="214102"><span class="nick" style="color:#234e69"><a href="#214102" label="[21:41:02]">&lt;Hagfish&gt;</a></span><span class="message">and someone could forge those messages, i suppose, by generating a whole new set of public/private key pairs that claim to belong to the relevant participating IP addresses</span></div><div class="line" id="214223"><span class="nick" style="color:#234e69"><a href="#214223" label="[21:42:23]">&lt;Hagfish&gt;</a></span><span class="message">there could be a part of the protocol that records new nodes joining the swarm, and providing their public key</span></div><div class="line" id="214306"><span class="nick" style="color:#234e69"><a href="#214306" label="[21:43:06]">&lt;Hagfish&gt;</a></span><span class="message">so you could start with a Genesis set of nodes, and they could vote on bootstrapping up their network to potentially the maximum size of ~4bn nodes</span></div><div class="line" id="214350"><span class="nick" style="color:#234e69"><a href="#214350" label="[21:43:50]">&lt;Hagfish&gt;</a></span><span class="message">you could then reply all the messages offline to work out what the state of the network was at any given point in history</span></div><div class="line" id="214354"><span class="nick" style="color:#234e69"><a href="#214354" label="[21:43:54]">&lt;Hagfish&gt;</a></span><span class="message">*replay</span></div><div class="line" id="214901"><span class="nick" style="color:#8dd3c7"><a href="#214901" label="[21:49:01]">&lt;stikonas&gt;</a></span><span class="message"> /channel rename #bootstrappable #bitcoin :D</span></div><br /></div></body></html>