<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000529"><span class="nick" style="color:#8dd3c7"><a href="#000529" label="[00:05:29]">&lt;oriansj&gt;</a></span><span class="message">but I can't imagine many people preferring LOAD32U R0::31:0 &lt;- 0x100[0] over LOAD32U R0::31:0 &lt;- [0x100]</span></div><div class="line" id="000828"><span class="nick" style="color:#8dd3c7"><a href="#000828" label="[00:08:28]">&lt;oriansj&gt;</a></span><span class="message">although there are probably good arguments for R0::31:0 &lt;- R0::31:0 SUB32U R1::31:0 instead of SUB32U R0::31:0 &lt;- R0::31:0 R1::31:0</span></div><div class="line" id="005039"><span class="nick" style="color:#8dd3c7"><a href="#005039" label="[00:50:39]">&lt;oriansj&gt;</a></span><span class="message">although 4op and 5op instructions would look very ugly</span></div><div class="line" id="005424"><span class="nick" style="color:#8dd3c7"><a href="#005424" label="[00:54:24]">&lt;oriansj&gt;</a></span><span class="message">but instructions with implicit behavior would instantly be explicit; such as div ebx =&gt; R4::31:0 R0::31:0 &lt;- R4::31:0 R0::31:0 DIVIDE R2::31:0</span></div><div class="line" id="005809"><span class="nick" style="color:#2e2a4a"><a href="#005809" label="[00:58:09]">&lt;stikonas&gt;</a></span><span class="message">oriansj: why is this <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex2.c#L180">https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex2.c#L180</a>  base - target</span></div><div class="line" id="005813"><span class="nick" style="color:#2e2a4a"><a href="#005813" label="[00:58:13]">&lt;stikonas&gt;</a></span><span class="message">rather than target - base?</span></div><div class="line" id="005830"><span class="nick" style="color:#2e2a4a"><a href="#005830" label="[00:58:30]">&lt;stikonas&gt;</a></span><span class="message">it seems wrong</span></div><div class="line" id="010458"><span class="nick" style="color:#2e2a4a"><a href="#010458" label="[01:04:58]">&lt;stikonas&gt;</a></span><span class="message">the one in mescc-tools seems to do the other way around <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_linker.c#L222">https://github.com/oriansj/mescc-tools/blob/master/hex2_linker.c#L222</a> </span></div><div class="line" id="010731"><span class="nick" style="color:#8dd3c7"><a href="#010731" label="[01:07:31]">&lt;oriansj&gt;</a></span><span class="message">it probably is wrong or something is named wrong</span></div><div class="line" id="010904"><span class="nick" style="color:#2e2a4a"><a href="#010904" label="[01:09:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, so I was working on hex2.c prototype for UEFI and it's outputing negative values there</span></div><div class="line" id="010907"><span class="nick" style="color:#2e2a4a"><a href="#010907" label="[01:09:07]">&lt;stikonas&gt;</a></span><span class="message">so I have to swap it</span></div><div class="line" id="010947"><span class="nick" style="color:#2e2a4a"><a href="#010947" label="[01:09:47]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex2.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex2.c</a>) </span></div><div class="line" id="011003"><span class="nick" style="color:#2e2a4a"><a href="#011003" label="[01:10:03]">&lt;stikonas&gt;</a></span><span class="message">this is for my investigation why things are getting stuck</span></div><div class="line" id="011023"><span class="nick" style="color:#2e2a4a"><a href="#011023" label="[01:10:23]">&lt;stikonas&gt;</a></span><span class="message">and given that hex2.c seems to work, I think that the bug is in hex2 assembly version</span></div><div class="line" id="011027"><span class="nick" style="color:#2e2a4a"><a href="#011027" label="[01:10:27]">&lt;stikonas&gt;</a></span><span class="message">rather than in kaem-minimal</span></div><div class="line" id="011248"><span class="nick" style="color:#2e2a4a"><a href="#011248" label="[01:12:48]">&lt;stikonas&gt;</a></span><span class="message">and some of that hex2.c work might later help M2libc port to UEFI anyway...</span></div><div class="line" id="011435"><span class="nick" style="color:#8dd3c7"><a href="#011435" label="[01:14:35]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I think you are right</span></div><div class="line" id="012901"><span class="nick" style="color:#2e2a4a"><a href="#012901" label="[01:29:01]">&lt;stikonas&gt;</a></span><span class="message">argh, I think I actually have bug in both kaem-optional AND in hex2</span></div><div class="line" id="012917"><span class="nick" style="color:#2e2a4a"><a href="#012917" label="[01:29:17]">&lt;stikonas&gt;</a></span><span class="message">that might explain behaviour that I see</span></div><div class="line" id="012924"><span class="nick" style="color:#2e2a4a"><a href="#012924" label="[01:29:24]">&lt;stikonas&gt;</a></span><span class="message">hex2 exits with non-zero exit code</span></div><div class="line" id="012927"><span class="nick" style="color:#2e2a4a"><a href="#012927" label="[01:29:27]">&lt;stikonas&gt;</a></span><span class="message">that makes kaem stuck</span></div><div class="line" id="012942"><span class="nick" style="color:#2e2a4a"><a href="#012942" label="[01:29:42]">&lt;stikonas&gt;</a></span><span class="message">so I shouldn't try to find a loop in hex2...</span></div><div class="line" id="013216"><span class="nick" style="color:#8dd3c7"><a href="#013216" label="[01:32:16]">&lt;oriansj&gt;</a></span><span class="message">well bare metal programming is always a humbling experience.</span></div><div class="line" id="013348"><span class="nick" style="color:#2e2a4a"><a href="#013348" label="[01:33:48]">&lt;stikonas&gt;</a></span><span class="message">well, at UEFI level it's not that different than POSIX programming</span></div><div class="line" id="013352"><span class="nick" style="color:#2e2a4a"><a href="#013352" label="[01:33:52]">&lt;stikonas&gt;</a></span><span class="message">just harder to test</span></div><div class="line" id="013357"><span class="nick" style="color:#2e2a4a"><a href="#013357" label="[01:33:57]">&lt;stikonas&gt;</a></span><span class="message">since I didn't bother setting up gdb</span></div><div class="line" id="013440"><span class="nick" style="color:#2e2a4a"><a href="#013440" label="[01:34:40]">&lt;stikonas&gt;</a></span><span class="message">in terms of services that we use, UEFI is basically a proper OS</span></div><div class="line" id="013510"><span class="nick" style="color:#8dd3c7"><a href="#013510" label="[01:35:10]">&lt;oriansj&gt;</a></span><span class="message">well a half proper OS with some perhaps badly thought out ideas</span></div><div class="line" id="013531"><span class="nick" style="color:#2e2a4a"><a href="#013531" label="[01:35:31]">&lt;stikonas&gt;</a></span><span class="message">no argument here...</span></div><div class="line" id="013600"><span class="nick" style="color:#2e2a4a"><a href="#013600" label="[01:36:00]">&lt;stikonas&gt;</a></span><span class="message">opening files for reading and writing takes so much boilerplate code...</span></div><div class="line" id="013626"><span class="nick" style="color:#2e2a4a"><a href="#013626" label="[01:36:26]">&lt;stikonas&gt;</a></span><span class="message">and i doubt that it simplifies internal UEFI implementation</span></div><div class="line" id="013954"><span class="nick" style="color:#8dd3c7"><a href="#013954" label="[01:39:54]">&lt;oriansj&gt;</a></span><span class="message">well even CPM's File open is simpler <a rel="nofollow" href="https://www.seasip.info/Cpm/bdos.html">https://www.seasip.info/Cpm/bdos.html</a>  and probably more efficient</span></div><div class="line" id="014601"><span class="nick" style="color:#2e2a4a"><a href="#014601" label="[01:46:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, kaem bug is looking very strange</span></div><div class="line" id="014621"><span class="nick" style="color:#2e2a4a"><a href="#014621" label="[01:46:21]">&lt;stikonas&gt;</a></span><span class="message">it's getting stuck in File_Print function when subprocess_error message is passed</span></div><div class="line" id="014636"><span class="nick" style="color:#2e2a4a"><a href="#014636" label="[01:46:36]">&lt;stikonas&gt;</a></span><span class="message">but e.g. if I change it to suffix message (just newline) it works</span></div><div class="line" id="015126"><span class="nick" style="color:#8dd3c7"><a href="#015126" label="[01:51:26]">&lt;oriansj&gt;</a></span><span class="message">uefi buffer overflow?</span></div><div class="line" id="015148"><span class="nick" style="color:#2e2a4a"><a href="#015148" label="[01:51:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, strage, now I can't reproduce it with .S file</span></div><div class="line" id="015158"><span class="nick" style="color:#2e2a4a"><a href="#015158" label="[01:51:58]">&lt;stikonas&gt;</a></span><span class="message">so maybe the bug is actually not in .S file but in lower levels...</span></div><div class="line" id="015210"><span class="nick" style="color:#2e2a4a"><a href="#015210" label="[01:52:10]">&lt;stikonas&gt;</a></span><span class="message">(e.g. M1)</span></div><div class="line" id="025425"><span class="nick" style="color:#2e2a4a"><a href="#025425" label="[02:54:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/31">https://github.com/oriansj/bootstrap-seeds/pull/31</a> </span></div><div class="line" id="025431"><span class="nick" style="color:#2e2a4a"><a href="#025431" label="[02:54:31]">&lt;stikonas&gt;</a></span><span class="message">fixed at least kaem for now</span></div><div class="line" id="025501"><span class="nick" style="color:#2e2a4a"><a href="#025501" label="[02:55:01]">&lt;stikonas&gt;</a></span><span class="message">probably some copy-paste errors</span></div><div class="line" id="025518"><span class="nick" style="color:#2e2a4a"><a href="#025518" label="[02:55:18]">&lt;stikonas&gt;</a></span><span class="message">but luckily no changes in size, so no hex0 reencoding was needed</span></div><div class="line" id="031857"><span class="nick" style="color:#8dd3c7"><a href="#031857" label="[03:18:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="143355"><span class="nick" style="color:#6b8072"><a href="#143355" label="[14:33:55]">&lt;fossy&gt;</a></span><span class="message">when aggi comes back, gcc is def needed for python. you can successfully create modern versions of python3 without python3 installed from tarball only (it won't be properly bootstrapped tho) - you may have to disable some thigns iirc, but</span></div><div class="line" id="145040"><span class="nick" style="color:#80b1d3"><a href="#145040" label="[14:50:40]">&lt;pabs3&gt;</a></span><span class="message">zig becoming self-hosting: <a rel="nofollow" href="https://github.com/ziglang/zig/issues/89">https://github.com/ziglang/zig/issues/89</a>  <a rel="nofollow" href="https://news.ycombinator.com/item?id=32529113">https://news.ycombinator.com/item?id=32529113</a> </span></div><div class="line" id="145120"><span class="nick" style="color:#6d2462"><a href="#145120" label="[14:51:20]">&lt;unmatched-paren&gt;</a></span><span class="message">pabs3: pretty sure they're keeping the C++-based compiler though, right?</span></div><div class="line" id="145134"><span class="nick" style="color:#6d2462"><a href="#145134" label="[14:51:34]">&lt;unmatched-paren&gt;</a></span><span class="message">if so, exciting news. if not... less exciting news.</span></div><div class="line" id="145135"><span class="nick" style="color:#80b1d3"><a href="#145135" label="[14:51:35]">&lt;pabs3&gt;</a></span><span class="message">the comments say they aren't</span></div><div class="line" id="145147"><span class="nick" style="color:#80b1d3"><a href="#145147" label="[14:51:47]">&lt;pabs3&gt;</a></span><span class="message">&quot;</span></div><div class="line" id="145147"><span class="nick" style="color:#80b1d3"><a href="#145147" label="[14:51:47]">&lt;pabs3&gt;</a></span><span class="message">I believe the goal is to replace the C++ with a C bootstrap that is initially auto generated from the zig code by zig but manually cleaned up and maintained to match&quot;</span></div><div class="line" id="145151"><span class="nick" style="color:#6d2462"><a href="#145151" label="[14:51:51]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; We still want the bootstrapping process to be simple though. So here's another proposal. We get a self-hosted compiler going right now. It's the official zig compiler. However the C++ implementation must be able to build the official zig compiler. As long as that remains true, bootstrapping is 1 step process.</span></div><div class="line" id="145200"><span class="nick" style="color:#6d2462"><a href="#145200" label="[14:52:00]">&lt;unmatched-paren&gt;</a></span><span class="message">-- andrew kelly</span></div><div class="line" id="145204"><span class="nick" style="color:#80b1d3"><a href="#145204" label="[14:52:04]">&lt;pabs3&gt;</a></span><span class="message">although I'm not sure that comment is correct</span></div><div class="line" id="145209"><span class="nick" style="color:#6d2462"><a href="#145209" label="[14:52:09]">&lt;unmatched-paren&gt;</a></span><span class="message">s/kelly/kelley/</span></div><div class="line" id="145238"><span class="nick" style="color:#80b1d3"><a href="#145238" label="[14:52:38]">&lt;pabs3&gt;</a></span><span class="message">I'd guess kelly's response is likely more true than the comment I mention</span></div><div class="line" id="145301"><span class="nick" style="color:#234e69"><a href="#145301" label="[14:53:01]">&lt;Andrew&gt;</a></span><span class="message">I think Kelley is the maintainer of Zig</span></div><div class="line" id="145304"><span class="nick" style="color:#6d2462"><a href="#145304" label="[14:53:04]">&lt;unmatched-paren&gt;</a></span><span class="message">yes</span></div><div class="line" id="145326"><span class="nick" style="color:#6d2462"><a href="#145326" label="[14:53:26]">&lt;unmatched-paren&gt;</a></span><span class="message">so, well done Zig :)</span></div><div class="line" id="145335"><span class="nick" style="color:#6d2462"><a href="#145335" label="[14:53:35]">&lt;unmatched-paren&gt;</a></span><span class="message">hopefully it'll stabilize from this point onwards</span></div><div class="line" id="145423"><span class="nick" style="color:#80b1d3"><a href="#145423" label="[14:54:23]">&lt;pabs3&gt;</a></span><span class="message">hmm, <a rel="nofollow" href="https://github.com/ziglang/zig/issues/6378">https://github.com/ziglang/zig/issues/6378</a> </span></div><div class="line" id="145602"><span class="nick" style="color:#6d2462"><a href="#145602" label="[14:56:02]">&lt;unmatched-paren&gt;</a></span><span class="message">hmm indeed :P at least it's only temporary</span></div><div class="line" id="145627"><span class="nick" style="color:#6d2462"><a href="#145627" label="[14:56:27]">&lt;unmatched-paren&gt;</a></span><span class="message">though tbh i don't see how removing stage0 temporarily will help them &quot;iterate faster, solve bugs, finish the language, and approach 1.0&quot;</span></div><div class="line" id="145632"><span class="nick" style="color:#6d2462"><a href="#145632" label="[14:56:32]">&lt;unmatched-paren&gt;</a></span><span class="message">s/stage0/stage1/</span></div><div class="line" id="150844"><span class="nick" style="color:#80b1d3"><a href="#150844" label="[15:08:44]">&lt;pabs3&gt;</a></span><span class="message">huh, someone posted bootstrappable.org a couple of hours ago (no comments, 3 votes) <a rel="nofollow" href="https://news.ycombinator.com/item?id=32530358">https://news.ycombinator.com/item?id=32530358</a> </span></div><div class="line" id="154100"><span class="nick" style="color:#8dd3c7"><a href="#154100" label="[15:41:00]">&lt;oriansj&gt;</a></span><span class="message">pabs3: well assuming someone gets the zig c++ build into guix and keeps a working bootstrap chain we should be good. I have zero faith that people are going to actually maintain human written c/c++ code for building of zig</span></div><div class="line" id="154211"><span class="nick" style="color:#6d2462"><a href="#154211" label="[15:42:11]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: Well, Hare is maintaining the C harec forever, so I don't see why they can't do the same for Zig</span></div><div class="line" id="154217"><span class="nick" style="color:#80b1d3"><a href="#154217" label="[15:42:17]">&lt;pabs3&gt;</a></span><span class="message">sounded like their plan was to auto-convert the zig code to C code and then manually maintain the C code, potentially repeating the auto-conversion every so often</span></div><div class="line" id="154241"><span class="nick" style="color:#6d2462"><a href="#154241" label="[15:42:41]">&lt;unmatched-paren&gt;</a></span><span class="message">pabs3: I think that was their interim bootstrap plan</span></div><div class="line" id="154256"><span class="nick" style="color:#80b1d3"><a href="#154256" label="[15:42:56]">&lt;pabs3&gt;</a></span><span class="message">ah, so that changed?</span></div><div class="line" id="154302"><span class="nick" style="color:#6d2462"><a href="#154302" label="[15:43:02]">&lt;unmatched-paren&gt;</a></span><span class="message">s/was/is/</span></div><div class="line" id="154314"><span class="nick" style="color:#6d2462"><a href="#154314" label="[15:43:14]">&lt;unmatched-paren&gt;</a></span><span class="message">so, they'll restore the actual bootstrap at some point</span></div><div class="line" id="154336"><span class="nick" style="color:#6d2462"><a href="#154336" label="[15:43:36]">&lt;unmatched-paren&gt;</a></span><span class="message">seemingly</span></div><div class="line" id="154349"><span class="nick" style="color:#6d2462"><a href="#154349" label="[15:43:49]">&lt;unmatched-paren&gt;</a></span><span class="message">they want to keep it easily bootstrappable</span></div><div class="line" id="154655"><span class="nick" style="color:#6d2462"><a href="#154655" label="[15:46:55]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; Delete the stage1 c++ code and check that generated .c code into the zig source repository to make it easy to build zig. This does not count as bootstrapping because the generated .c code is not source code. It's more like committing a multi-target binary into source control.</span></div><div class="line" id="154708"><span class="nick" style="color:#6d2462"><a href="#154708" label="[15:47:08]">&lt;unmatched-paren&gt;</a></span><span class="message">pabs3: Note &quot;This does not count as bootstrapping&quot; here</span></div><div class="line" id="154715"><span class="nick" style="color:#6d2462"><a href="#154715" label="[15:47:15]">&lt;unmatched-paren&gt;</a></span><span class="message">This is a temporary measure</span></div><div class="line" id="154718"><span class="nick" style="color:#6d2462"><a href="#154718" label="[15:47:18]">&lt;unmatched-paren&gt;</a></span><span class="message">it seems</span></div><div class="line" id="154722"><span class="nick" style="color:#6d2462"><a href="#154722" label="[15:47:22]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; Release 1.0, with the O(1) bootstrapping feature restored.</span></div><div class="line" id="154738"><span class="nick" style="color:#80b1d3"><a href="#154738" label="[15:47:38]">&lt;pabs3&gt;</a></span><span class="message">I see</span></div><div class="line" id="154756"><span class="nick" style="color:#6d2462"><a href="#154756" label="[15:47:56]">&lt;unmatched-paren&gt;</a></span><span class="message">I still have no idea what they expect to gain from this, but oh well.</span></div><div class="line" id="155310"><span class="nick" style="color:#6c3d55"><a href="#155310" label="[15:53:10]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: how are things on your side going. Had any luck with python?</span></div><div class="line" id="183347"><span class="nick" style="color:#8dd3c7"><a href="#183347" label="[18:33:47]">&lt;oriansj&gt;</a></span><span class="message">nothing is more Permanent than a Temporary solution</span></div><div class="line" id="190409"><span class="nick" style="color:#2e2a4a"><a href="#190409" label="[19:04:09]">&lt;stikonas&gt;</a></span><span class="message">hmm, can't see anything particularly bad in hex2.S but I've debugged and it starts failing in allocate_pool with EFI_OUT_OF_RESOURCES</span></div><div class="line" id="190424"><span class="nick" style="color:#2e2a4a"><a href="#190424" label="[19:04:24]">&lt;stikonas&gt;</a></span><span class="message">I think hex2.c prototype is way more efficient with memory</span></div><div class="line" id="190434"><span class="nick" style="color:#2e2a4a"><a href="#190434" label="[19:04:34]">&lt;stikonas&gt;</a></span><span class="message">which is why it works</span></div><div class="line" id="190549"><span class="nick" style="color:#2e2a4a"><a href="#190549" label="[19:05:49]">&lt;stikonas&gt;</a></span><span class="message">though it's a bit strange cause I always tried to call free_pool</span></div><div class="line" id="190705"><span class="nick" style="color:#2e2a4a"><a href="#190705" label="[19:07:05]">&lt;stikonas&gt;</a></span><span class="message">reducing memory allocation from 16 MiB to 1MiB helps a bit but eventualy still starts failing</span></div><div class="line" id="193628"><span class="nick" style="color:#8dd3c7"><a href="#193628" label="[19:36:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well hex2 only needs to store a pointer (-&gt;NEXT), the label (:label) and an address (32bits) per label. So assuming 20char names that would be 32bytes per label and assuming 1K labels, you would only end up using 32KB of RAM for hex2</span></div><div class="line" id="193749"><span class="nick" style="color:#8dd3c7"><a href="#193749" label="[19:37:49]">&lt;oriansj&gt;</a></span><span class="message">and we are talking about a machine with 4GB RAM, How the F*&amp;K is 16MB of allocation a problem? is UEFI so dumb we need to ensure dealloction as well prior to exit?</span></div><div class="line" id="203119"><span class="nick" style="color:#6c3d55"><a href="#203119" label="[20:31:19]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: I'm already doing deallocation on exit</span></div><div class="line" id="203153"><span class="nick" style="color:#6c3d55"><a href="#203153" label="[20:31:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Though I should probably also close rootdir and protocol handles but that's unrelated</span></div><div class="line" id="203221"><span class="nick" style="color:#6c3d55"><a href="#203221" label="[20:32:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, in the worst case, I'll steal string_length function from M0</span></div><div class="line" id="203710"><span class="nick" style="color:#8dd3c7"><a href="#203710" label="[20:37:10]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="203718"><span class="nick" style="color:#6c3d55"><a href="#203718" label="[20:37:18]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: possibly I should use allocate page instead of allocate pool</span></div><div class="line" id="203922"><span class="nick" style="color:#8dd3c7"><a href="#203922" label="[20:39:22]">&lt;oriansj&gt;</a></span><span class="message">or you could just do a single malloc of 16MB and that'll work</span></div><div class="line" id="203944"><span class="nick" style="color:#8dd3c7"><a href="#203944" label="[20:39:44]">&lt;oriansj&gt;</a></span><span class="message">or even 64MB</span></div><div class="line" id="204018"><span class="nick" style="color:#8dd3c7"><a href="#204018" label="[20:40:18]">&lt;oriansj&gt;</a></span><span class="message">then even if you use 64KB per entry you'll be good for 1K entries</span></div><div class="line" id="204028"><span class="nick" style="color:#6c3d55"><a href="#204028" label="[20:40:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Well that's what I was doing</span></div><div class="line" id="204038"><span class="nick" style="color:#6c3d55"><a href="#204038" label="[20:40:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Single 16mb array</span></div><div class="line" id="204108"><span class="nick" style="color:#6c3d55"><a href="#204108" label="[20:41:08]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://edk2-docs.gitbook.io/edk-ii-uefi-driver-writer-s-guide/5_uefi_services/51_services_that_uefi_drivers_commonly_use/511_memory_allocation_services">https://edk2-docs.gitbook.io/edk-ii-uefi-driver-writer-s-guide/5_uefi_services/51_services_that_uefi_drivers_commonly_use/511_memory_allocation_services</a>  suggests using allocate page</span></div><div class="line" id="204118"><span class="nick" style="color:#6c3d55"><a href="#204118" label="[20:41:18]">&lt;stikonas[m]&gt;</a></span><span class="message">For larger buffer</span></div><div class="line" id="204239"><span class="nick" style="color:#8dd3c7"><a href="#204239" label="[20:42:39]">&lt;oriansj&gt;</a></span><span class="message">well AllocateAnyPages</span></div><div class="line" id="204842"><span class="nick" style="color:#8dd3c7"><a href="#204842" label="[20:48:42]">&lt;oriansj&gt;</a></span><span class="message">&quot;when a structure is allocated, it is useful to clear the buffer to a known state with zeros.&quot; stikonas: could be UEFI be dumb enough to use free'd memory and assume that we zero'd it first before returning it for UEFI?</span></div><div class="line" id="205918"><span class="nick" style="color:#6c3d55"><a href="#205918" label="[20:59:18]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, could be</span></div><div class="line" id="210344"><span class="nick" style="color:#6c3d55"><a href="#210344" label="[21:03:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Although why would it cause allocatepool failures</span></div><div class="line" id="233537"><span class="nick" style="color:#8dd3c7"><a href="#233537" label="[23:35:37]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well memory allocation is just a data structure, which if not properly zero'd could easily be interpreted as data and throw an exception which the catching function might interpret as running out of memory</span></div><div class="line" id="233955"><span class="nick" style="color:#2e2a4a"><a href="#233955" label="[23:39:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe...</span></div><div class="line" id="234036"><span class="nick" style="color:#2e2a4a"><a href="#234036" label="[23:40:36]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've tried allocate_pages and it didn't help, though failure mode is a bit different: after I run hex2 multiple times, it gets stuck rather than exit with non-zero code</span></div><div class="line" id="234115"><span class="nick" style="color:#2e2a4a"><a href="#234115" label="[23:41:15]">&lt;stikonas&gt;</a></span><span class="message">still, it's probably easier to limit memory consumption with string_length than to have 2 different memory allocation functions</span></div><div class="line" id="234127"><span class="nick" style="color:#2e2a4a"><a href="#234127" label="[23:41:27]">&lt;stikonas&gt;</a></span><span class="message">though it's still a bit worrying</span></div><div class="line" id="234147"><span class="nick" style="color:#2e2a4a"><a href="#234147" label="[23:41:47]">&lt;stikonas&gt;</a></span><span class="message">that I don't understand why exactly we run out of resources</span></div><div class="line" id="234445"><span class="nick" style="color:#8dd3c7"><a href="#234445" label="[23:44:45]">&lt;oriansj&gt;</a></span><span class="message">and we are including: SystemTable-&gt;BootServices-&gt;SetWatchdogTimer(0, 0, 0, NULL); right?</span></div><div class="line" id="234544"><span class="nick" style="color:#2e2a4a"><a href="#234544" label="[23:45:44]">&lt;stikonas&gt;</a></span><span class="message">oh yes</span></div><div class="line" id="234547"><span class="nick" style="color:#2e2a4a"><a href="#234547" label="[23:45:47]">&lt;stikonas&gt;</a></span><span class="message">but that's for kaem</span></div><div class="line" id="234555"><span class="nick" style="color:#2e2a4a"><a href="#234555" label="[23:45:55]">&lt;stikonas&gt;</a></span><span class="message">I'm testing this with uefi shell</span></div><div class="line" id="234638"><span class="nick" style="color:#2e2a4a"><a href="#234638" label="[23:46:38]">&lt;stikonas&gt;</a></span><span class="message">and trying to build catm.hex2 -&gt; catm.efi</span></div><div class="line" id="234642"><span class="nick" style="color:#2e2a4a"><a href="#234642" label="[23:46:42]">&lt;stikonas&gt;</a></span><span class="message">which is a fairly small program</span></div><div class="line" id="234903"><span class="nick" style="color:#2e2a4a"><a href="#234903" label="[23:49:03]">&lt;stikonas&gt;</a></span><span class="message">perhaps the good data point would be to try to allocate more memory in C prototype and see if we git the same issue</span></div><div class="line" id="235407"><span class="nick" style="color:#8dd3c7"><a href="#235407" label="[23:54:07]">&lt;oriansj&gt;</a></span><span class="message">in allocate_pool you seem to do sub rsp, 24 but no matching add, so the stack would be off after</span></div><div class="line" id="235446"><span class="nick" style="color:#8dd3c7"><a href="#235446" label="[23:54:46]">&lt;oriansj&gt;</a></span><span class="message">sorry missed the add rsp, 24 (I must be blind)</span></div><div class="line" id="235635"><span class="nick" style="color:#2e2a4a"><a href="#235635" label="[23:56:35]">&lt;stikonas&gt;</a></span><span class="message">and just adding calloc(16 MiB, 1) to hex2.c (and not using) that memory and not even freeing works</span></div><div class="line" id="235641"><span class="nick" style="color:#2e2a4a"><a href="#235641" label="[23:56:41]">&lt;stikonas&gt;</a></span><span class="message">does not seem to break anything</span></div><div class="line" id="235652"><span class="nick" style="color:#2e2a4a"><a href="#235652" label="[23:56:52]">&lt;stikonas&gt;</a></span><span class="message">so either something to do with zeroing</span></div><div class="line" id="235702"><span class="nick" style="color:#2e2a4a"><a href="#235702" label="[23:57:02]">&lt;stikonas&gt;</a></span><span class="message">or I introduced some other bug in assembly</span></div><br /></div></body></html>