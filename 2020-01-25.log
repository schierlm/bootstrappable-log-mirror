<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-01-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004112"><span class="nick" style="color:#8dd3c7"><a href="#004112" label="[00:41:12]">&lt;Hagfish&gt;</a></span><span class="message">that's interesting, thanks</span></div><div class="line" id="004126"><span class="nick" style="color:#2e2a4a"><a href="#004126" label="[00:41:26]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: always here to help ^_^</span></div><div class="line" id="013550"><span class="nick" style="color:#6b8072"><a href="#013550" label="[01:35:50]">&lt;opal&gt;</a></span><span class="message">just wanted to let you guys know this project looks cool</span></div><div class="line" id="013601"><span class="nick" style="color:#6b8072"><a href="#013601" label="[01:36:01]">&lt;opal&gt;</a></span><span class="message">i'll probably lurk for a while til i have fewer things to do</span></div><div class="line" id="013618"><span class="nick" style="color:#6b8072"><a href="#013618" label="[01:36:18]">&lt;opal&gt;</a></span><span class="message">always easier to be interested in new stuff than it is to finish old stuff lol</span></div><div class="line" id="013758"><span class="nick" style="color:#2e2a4a"><a href="#013758" label="[01:37:58]">&lt;oriansj&gt;</a></span><span class="message">opal: very true, especially when the old stuff requires alot of work</span></div><div class="line" id="013840"><span class="nick" style="color:#6b8072"><a href="#013840" label="[01:38:40]">&lt;opal&gt;</a></span><span class="message">yeah seems very time-consuming assuming the best possible scenario, but things get complicated with unmaintained stuff that may not work on newer setups</span></div><div class="line" id="013853"><span class="nick" style="color:#6b8072"><a href="#013853" label="[01:38:53]">&lt;opal&gt;</a></span><span class="message">still solving the &quot;turtles all the way&quot; dilemma seems noble</span></div><div class="line" id="013917"><span class="nick" style="color:#2e2a4a"><a href="#013917" label="[01:39:17]">&lt;oriansj&gt;</a></span><span class="message">opal: actually we are heading to less work as we go along</span></div><div class="line" id="013928"><span class="nick" style="color:#6b8072"><a href="#013928" label="[01:39:28]">&lt;opal&gt;</a></span><span class="message">thats good</span></div><div class="line" id="013938"><span class="nick" style="color:#2e2a4a"><a href="#013938" label="[01:39:38]">&lt;oriansj&gt;</a></span><span class="message">also somethings you might wish to know: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a>  and <a rel="nofollow" href="https://github.com/oriansj/talk-notes">https://github.com/oriansj/talk-notes</a> </span></div><div class="line" id="013948"><span class="nick" style="color:#6b8072"><a href="#013948" label="[01:39:48]">&lt;opal&gt;</a></span><span class="message">aa more links</span></div><div class="line" id="013949"><span class="nick" style="color:#6b8072"><a href="#013949" label="[01:39:49]">&lt;opal&gt;</a></span><span class="message">lol</span></div><div class="line" id="014012"><span class="nick" style="color:#2e2a4a"><a href="#014012" label="[01:40:12]">&lt;oriansj&gt;</a></span><span class="message">everything you want to know about current bootstrapping efforts but were afraid to ask</span></div><div class="line" id="014020"><span class="nick" style="color:#6b8072"><a href="#014020" label="[01:40:20]">&lt;opal&gt;</a></span><span class="message">got way too many tabs and bookmarks but yeah i will check those out</span></div><div class="line" id="014129"><span class="nick" style="color:#6b8072"><a href="#014129" label="[01:41:29]">&lt;opal&gt;</a></span><span class="message">thanks</span></div><div class="line" id="112343"><span class="nick" style="color:#2e2a4a"><a href="#112343" label="[11:23:43]">&lt;oriansj&gt;</a></span><span class="message">Morning</span></div><div class="line" id="112403"><span class="nick" style="color:#80b1d3"><a href="#112403" label="[11:24:03]">&lt;rain1&gt;</a></span><span class="message">hey</span></div><div class="line" id="114638"><span class="nick" style="color:#2e2a4a"><a href="#114638" label="[11:46:38]">&lt;oriansj&gt;</a></span><span class="message">looks like static code analysis shows I should change a couple primitives to catch calloc failures.</span></div><div class="line" id="122612"><span class="nick" style="color:#2e2a4a"><a href="#122612" label="[12:26:12]">&lt;oriansj&gt;</a></span><span class="message">which means I either have to leverage require in more primitives or hand-roll the same logic in each of them (Bigger diff but less dependencies)</span></div><div class="line" id="122644"><span class="nick" style="color:#2e2a4a"><a href="#122644" label="[12:26:44]">&lt;oriansj&gt;</a></span><span class="message">which is probably why the C standard includes assert</span></div><div class="line" id="123007"><span class="nick" style="color:#2e2a4a"><a href="#123007" label="[12:30:07]">&lt;oriansj&gt;</a></span><span class="message">now it would be easy to add assert logic into M2-Planet's code generation; however cc_* wouldn't be able to compile any asserts and thus M2-Planet wouldn't be able to leverage that new functionality (at least not until v2.0)</span></div><div class="line" id="123128"><span class="nick" style="color:#2e2a4a"><a href="#123128" label="[12:31:28]">&lt;oriansj&gt;</a></span><span class="message">any thoughts?</span></div><div class="line" id="142124"><span class="nick" style="color:#6d2462"><a href="#142124" label="[14:21:24]">&lt;dddddd&gt;</a></span><span class="message">I guess you mean without changes to the cc_* family. Too much trouble to change?</span></div><div class="line" id="145013"><span class="nick" style="color:#2e2a4a"><a href="#145013" label="[14:50:13]">&lt;oriansj&gt;</a></span><span class="message">dddddd: indeed, not a small change either.</span></div><div class="line" id="151058"><span class="nick" style="color:#234e69"><a href="#151058" label="[15:10:58]">&lt;stikonas&gt;</a></span><span class="message">so is the longer term plan cc_* bootstraps M2-Planet v1 and then it bootstraps M2-Planet v2?</span></div><div class="line" id="151434"><span class="nick" style="color:#6d2462"><a href="#151434" label="[15:14:34]">&lt;dddddd&gt;</a></span><span class="message">I'm thinking crazy here, so bear with me. As we kind of know the requirements of the programs we're going to compile with cc_*, would make sense to do a big _checked_ allocation upfront and then use that space? Feels rigid, sure... but maybe that requires less changes?</span></div><div class="line" id="153745"><span class="nick" style="color:#6d2462"><a href="#153745" label="[15:37:45]">&lt;dddddd&gt;</a></span><span class="message">It's not a general purpose assert-like functionality that's is added. To be honest, I don't know what kind of changes you're thinking about and I guess the calloc example coloured my thoughts. Could you elaborate a bit about which parts of cc_* needs change and what kind of changes are required?</span></div><div class="line" id="154651"><span class="nick" style="color:#2e2a4a"><a href="#154651" label="[15:46:51]">&lt;oriansj&gt;</a></span><span class="message">stikonas: exactly.</span></div><div class="line" id="154735"><span class="nick" style="color:#2e2a4a"><a href="#154735" label="[15:47:35]">&lt;oriansj&gt;</a></span><span class="message">dddddd: I am just thinking of what is the best way to make M2-Planet v1.x as reliable as possible; while making as minimal changes to cc_* as possible (ideally no changes)</span></div><div class="line" id="154759"><span class="nick" style="color:#2e2a4a"><a href="#154759" label="[15:47:59]">&lt;oriansj&gt;</a></span><span class="message">right now I am leveraging require in a handful of spots</span></div><div class="line" id="154859"><span class="nick" style="color:#2e2a4a"><a href="#154859" label="[15:48:59]">&lt;oriansj&gt;</a></span><span class="message">but some of the places where issues could occur are in the common libraries, such as numerate_number.c and file_print.c</span></div><div class="line" id="154954"><span class="nick" style="color:#2e2a4a"><a href="#154954" label="[15:49:54]">&lt;oriansj&gt;</a></span><span class="message">and string.c</span></div><div class="line" id="155206"><span class="nick" style="color:#2e2a4a"><a href="#155206" label="[15:52:06]">&lt;oriansj&gt;</a></span><span class="message">and should I make them also require require (ironic) for brevity sake or roll custom error catching in each</span></div><div class="line" id="155432"><span class="nick" style="color:#2e2a4a"><a href="#155432" label="[15:54:32]">&lt;oriansj&gt;</a></span><span class="message">This unfortunately isn't an engineering problem, so much as a user facing problem. Do we make leveraging string.c dependent on also having to import require.c which a programmer might not want.</span></div><div class="line" id="155735"><span class="nick" style="color:#6d2462"><a href="#155735" label="[15:57:35]">&lt;dddddd&gt;</a></span><span class="message">sure, I was asking the changes in cc_* that you're trying to avoid, to understand it's (not small) scope.</span></div><div class="line" id="155743"><span class="nick" style="color:#6d2462"><a href="#155743" label="[15:57:43]">&lt;dddddd&gt;</a></span><span class="message">*about the</span></div><div class="line" id="160026"><span class="nick" style="color:#2e2a4a"><a href="#160026" label="[16:00:26]">&lt;oriansj&gt;</a></span><span class="message">dddddd: essentially in order to support assert, we would have to add tracking of what file and what line each token came from and then use that info to generate the assert string</span></div><div class="line" id="160115"><span class="nick" style="color:#2e2a4a"><a href="#160115" label="[16:01:15]">&lt;oriansj&gt;</a></span><span class="message">now that is already in M2-Planet and would be very little work to add but in cc_* it would require changes to the reader in a big way</span></div><div class="line" id="160216"><span class="nick" style="color:#6d2462"><a href="#160216" label="[16:02:16]">&lt;dddddd&gt;</a></span><span class="message">*its</span></div><div class="line" id="160229"><span class="nick" style="color:#6d2462"><a href="#160229" label="[16:02:29]">&lt;dddddd&gt;</a></span><span class="message">oh, so for error reporting, instead of just catching.</span></div><div class="line" id="160313"><span class="nick" style="color:#2e2a4a"><a href="#160313" label="[16:03:13]">&lt;oriansj&gt;</a></span><span class="message">well assert is 2 properties 1) erroring out if condition is false and 2) displaying where that error occurred</span></div><div class="line" id="160336"><span class="nick" style="color:#2e2a4a"><a href="#160336" label="[16:03:36]">&lt;oriansj&gt;</a></span><span class="message">The first is trivial to add, the second less so</span></div><div class="line" id="160540"><span class="nick" style="color:#2e2a4a"><a href="#160540" label="[16:05:40]">&lt;oriansj&gt;</a></span><span class="message">if one wanted to just do the first and not the second, we would just need to add assert to the libc.M1 of each architecture.</span></div><div class="line" id="160729"><span class="nick" style="color:#2e2a4a"><a href="#160729" label="[16:07:29]">&lt;oriansj&gt;</a></span><span class="message">The second requires a function to rewrite the assert(a != b) into _assert(a != b, &quot;file.c: line 123\n&quot;) and having _assert be the function in libc.M1</span></div><div class="line" id="160856"><span class="nick" style="color:#6d2462"><a href="#160856" label="[16:08:56]">&lt;dddddd&gt;</a></span><span class="message">I see, I was missing the lack of reader support. So the reader needs to save information about the assert location (but I guess that not for every token).</span></div><div class="line" id="160950"><span class="nick" style="color:#2e2a4a"><a href="#160950" label="[16:09:50]">&lt;oriansj&gt;</a></span><span class="message">dddddd: well, every token is actually easier than just a handful of them</span></div><div class="line" id="161328"><span class="nick" style="color:#6d2462"><a href="#161328" label="[16:13:28]">&lt;dddddd&gt;</a></span><span class="message">I guessed so, just trying to nail the requirement.</span></div><div class="line" id="161838"><span class="nick" style="color:#2e2a4a"><a href="#161838" label="[16:18:38]">&lt;oriansj&gt;</a></span><span class="message">So, since the reader is the hardest part of cc_* to tweak (very very touchy); it isn't something I would want to change if I can avoid it.</span></div><div class="line" id="162015"><span class="nick" style="color:#2e2a4a"><a href="#162015" label="[16:20:15]">&lt;oriansj&gt;</a></span><span class="message">as it is effectively 1/3-&gt;1/2 of the development effort of writing cc_*</span></div><div class="line" id="162154"><span class="nick" style="color:#6d2462"><a href="#162154" label="[16:21:54]">&lt;dddddd&gt;</a></span><span class="message">I see, so M2-Planet compiled with cc_* would lack assert. Then self-compiled M2-Planet is the first one to proper assert.</span></div><div class="line" id="162324"><span class="nick" style="color:#2e2a4a"><a href="#162324" label="[16:23:24]">&lt;oriansj&gt;</a></span><span class="message">exactly, which means duplicates of the primitives (with and without assert to catch bugs)</span></div><div class="line" id="162403"><span class="nick" style="color:#2e2a4a"><a href="#162403" label="[16:24:03]">&lt;oriansj&gt;</a></span><span class="message">or I don't use assert in the primitives and just leverage require instead</span></div><div class="line" id="162415"><span class="nick" style="color:#2e2a4a"><a href="#162415" label="[16:24:15]">&lt;oriansj&gt;</a></span><span class="message">or do one off error catching in each</span></div><div class="line" id="163000"><span class="nick" style="color:#6d2462"><a href="#163000" label="[16:30:00]">&lt;dddddd&gt;</a></span><span class="message">assert in low level functions, pointing out to themself without a stack trace seems not very useful to the user, isn't it?</span></div><div class="line" id="163128"><span class="nick" style="color:#2e2a4a"><a href="#163128" label="[16:31:28]">&lt;oriansj&gt;</a></span><span class="message">hence, the question do we make some of the primitives also require require.c or just roll custom error catching in each</span></div><div class="line" id="163856"><span class="nick" style="color:#2e2a4a"><a href="#163856" label="[16:38:56]">&lt;oriansj&gt;</a></span><span class="message">I have no strong feeling about it and honestly, I'm half ready to just flip a coin to decide. Thus does anyone have a strong preference or is a coin flip good enough?</span></div><div class="line" id="164843"><span class="nick" style="color:#6d2462"><a href="#164843" label="[16:48:43]">&lt;dddddd&gt;</a></span><span class="message">What would the user want to avoid the (indirect) dependency on require.c?</span></div><div class="line" id="164935"><span class="nick" style="color:#6d2462"><a href="#164935" label="[16:49:35]">&lt;dddddd&gt;</a></span><span class="message">*Why (sorry, rewrited badly)</span></div><div class="line" id="165134"><span class="nick" style="color:#6d2462"><a href="#165134" label="[16:51:34]">&lt;dddddd&gt;</a></span><span class="message">If there're good reasons, I guess we should err on their side even if that means we write more custom error catching.</span></div><div class="line" id="165155"><span class="nick" style="color:#2e2a4a"><a href="#165155" label="[16:51:55]">&lt;oriansj&gt;</a></span><span class="message">well assert would be the most common primitive they would want instead of require;</span></div><div class="line" id="165219"><span class="nick" style="color:#2e2a4a"><a href="#165219" label="[16:52:19]">&lt;oriansj&gt;</a></span><span class="message">one does not need require if one has assert</span></div><div class="line" id="165317"><span class="nick" style="color:#2e2a4a"><a href="#165317" label="[16:53:17]">&lt;oriansj&gt;</a></span><span class="message">assert is to require as a C macro is to a C function;</span></div><div class="line" id="165355"><span class="nick" style="color:#2e2a4a"><a href="#165355" label="[16:53:55]">&lt;oriansj&gt;</a></span><span class="message">(M2-Planet lacking C macros at this time of course)</span></div><div class="line" id="165501"><span class="nick" style="color:#2e2a4a"><a href="#165501" label="[16:55:01]">&lt;oriansj&gt;</a></span><span class="message">It is ultimately no good nor bad reasons for either way of solving; hence why I struggle. If there was a definite advantage for either; it would have been implemented already</span></div><div class="line" id="171123"><span class="nick" style="color:#2e2a4a"><a href="#171123" label="[17:11:23]">&lt;oriansj&gt;</a></span><span class="message">Ok, coin flip says custom error catching. I'll be updating the primitives shortly</span></div><div class="line" id="172950"><span class="nick" style="color:#2e2a4a"><a href="#172950" label="[17:29:50]">&lt;oriansj&gt;</a></span><span class="message">well that is 40 updated checksums to validate</span></div><div class="line" id="174036"><span class="nick" style="color:#6d2462"><a href="#174036" label="[17:40:36]">&lt;dddddd&gt;</a></span><span class="message">Thanks for sharing. I think this conversation helped me to better understand interactions between cc_*, different versions of M2-Planet (and its lib) and the user.</span></div><div class="line" id="180205"><span class="nick" style="color:#2e2a4a"><a href="#180205" label="[18:02:05]">&lt;oriansj&gt;</a></span><span class="message">dddddd: one thing to remember is that there is one huge reason why debug_list is the most important function in cc_*</span></div><div class="line" id="180252"><span class="nick" style="color:#2e2a4a"><a href="#180252" label="[18:02:52]">&lt;oriansj&gt;</a></span><span class="message">tokenizing C in assembly sucks.</span></div><div class="line" id="180310"><span class="nick" style="color:#2e2a4a"><a href="#180310" label="[18:03:10]">&lt;oriansj&gt;</a></span><span class="message">after that the rest is trivial</span></div><div class="line" id="180413"><span class="nick" style="color:#2e2a4a"><a href="#180413" label="[18:04:13]">&lt;oriansj&gt;</a></span><span class="message">hence why debug_list is always the first function written in cc_* and commenting it out is the last thing you do.</span></div><div class="line" id="181245"><span class="nick" style="color:#6d2462"><a href="#181245" label="[18:12:45]">&lt;dddddd&gt;</a></span><span class="message">debug-head of M1.scm comes to mind, helpful too</span></div><div class="line" id="183049"><span class="nick" style="color:#6c3d55"><a href="#183049" label="[18:30:49]">&lt;markjenkinsznc&gt;</a></span><span class="message">My M1.py got viable enough to get out of my work in progress branch and make it to knightpies master <a rel="nofollow" href="https://github.com/markjenkins/knightpies/blob/75bcd63b0f671cbeb9a3f2c8d6d93ce773fbb50d/M1.py">https://github.com/markjenkins/knightpies/blob/75bcd63b0f671cbeb9a3f2c8d6d93ce773fbb50d/M1.py</a> </span></div><div class="line" id="183058"><span class="nick" style="color:#6c3d55"><a href="#183058" label="[18:30:58]">&lt;markjenkinsznc&gt;</a></span><span class="message">I can now $ ./M1.py stage0/High_level_prototypes/defs stage0/stage0/stage0_monitor.s &gt; stage0_monitor.hex2</span></div><div class="line" id="183103"><span class="nick" style="color:#6c3d55"><a href="#183103" label="[18:31:03]">&lt;markjenkinsznc&gt;</a></span><span class="message">and $ ./hex2tobin.py stage0_monitor.hex2 stage0_monitor</span></div><div class="line" id="183109"><span class="nick" style="color:#6c3d55"><a href="#183109" label="[18:31:09]">&lt;markjenkinsznc&gt;</a></span><span class="message">and $ sha256sum stage0_monitor gets the same result as $ grep stage0_monitor stage0/test/SHA256SUMS</span></div><div class="line" id="183203"><span class="nick" style="color:#6c3d55"><a href="#183203" label="[18:32:03]">&lt;markjenkinsznc&gt;</a></span><span class="message">Still to come: I didn't really do much on my M1 string token handling as stage0_monitor.s doesn't use &quot;string&quot;, so I need to look at that more carefully. Bugs are probably present.</span></div><div class="line" id="183208"><span class="nick" style="color:#6c3d55"><a href="#183208" label="[18:32:08]">&lt;markjenkinsznc&gt;</a></span><span class="message">Need to support little endianesses and differences in number of bytes for 0x hex atoms.</span></div><div class="line" id="183213"><span class="nick" style="color:#6c3d55"><a href="#183213" label="[18:32:13]">&lt;markjenkinsznc&gt;</a></span><span class="message">Hex2tobin will need to support more symbolic offset modes than those used for knight ISA (@ and $) and also differences in value size and endianess.</span></div><div class="line" id="183218"><span class="nick" style="color:#6c3d55"><a href="#183218" label="[18:32:18]">&lt;markjenkinsznc&gt;</a></span><span class="message">Some refactoring to enable M1tobin.py .</span></div><div class="line" id="183225"><span class="nick" style="color:#6c3d55"><a href="#183225" label="[18:32:25]">&lt;markjenkinsznc&gt;</a></span><span class="message">Test suite support against all supportable stage0 .s files and those found in stage0 git submodules, including interpretting the knight ISA binary M0-macro.hex2 as a point of comparision. (useful when no SHA256sum is present) Then I can do a release and start implementing knight ISA instructions used by stage2/cc_x86.s to make a simple wrapper stage0_cc_x86.py that will try to compile M2-planet.</span></div><div class="line" id="183500"><span class="nick" style="color:#2e2a4a"><a href="#183500" label="[18:35:00]">&lt;oriansj&gt;</a></span><span class="message">markjenkinsznc: very very nice</span></div><div class="line" id="183813"><span class="nick" style="color:#6c3d55"><a href="#183813" label="[18:38:13]">&lt;markjenkinsznc&gt;</a></span><span class="message">in case anyone is wondering, writing M2-planet.py (e.g. a rewrite-port of M2-planet to pure python, not interpreting stage0 knight ISA binaries) is not on my roadmap :).</span></div><div class="line" id="183916"><span class="nick" style="color:#2e2a4a"><a href="#183916" label="[18:39:16]">&lt;oriansj&gt;</a></span><span class="message">markjenkinsznc: completely fair M2-Planet has grown into a quite large program</span></div><div class="line" id="183943"><span class="nick" style="color:#2e2a4a"><a href="#183943" label="[18:39:43]">&lt;oriansj&gt;</a></span><span class="message">150KB compiled</span></div><div class="line" id="184021"><span class="nick" style="color:#6c3d55"><a href="#184021" label="[18:40:21]">&lt;markjenkinsznc&gt;</a></span><span class="message">and I think mescc (c compiler in scheme) is already a compelling c compiler in a high level language</span></div><div class="line" id="184034"><span class="nick" style="color:#2e2a4a"><a href="#184034" label="[18:40:34]">&lt;oriansj&gt;</a></span><span class="message">with the ports to AArch64 and RISC-V only to make it even bigger</span></div><div class="line" id="184040"><span class="nick" style="color:#2e2a4a"><a href="#184040" label="[18:40:40]">&lt;oriansj&gt;</a></span><span class="message">markjenkinsznc: exactly</span></div><div class="line" id="184837"><span class="nick" style="color:#6c3d55"><a href="#184837" label="[18:48:37]">&lt;markjenkinsznc&gt;</a></span><span class="message">though if anyone wants to do a port M2-planet.py, or if i feel like it some day, I'd suggest making version one target compiling the M2 C subset to only one output architecture to start, and what I'd suggest doing as a first output architecture is targeting a stack machine of some kind instead of a register machine as <a rel="nofollow" href="https://www.craftinginterpreters.com/">https://www.craftinginterpreters.com/</a>  makes a good case for. Then target compiling to a register machine after that.</span></div><div class="line" id="184905"><span class="nick" style="color:#6c3d55"><a href="#184905" label="[18:49:05]">&lt;markjenkinsznc&gt;</a></span><span class="message">idea being, stack machines are easier to do code generation for</span></div><div class="line" id="185115"><span class="nick" style="color:#6d2462"><a href="#185115" label="[18:51:15]">&lt;dddddd&gt;</a></span><span class="message">For a M2-Planet.py I'd try to modularize the code generation by arch, to avoid the chain of repeated conditionals everywhere.</span></div><div class="line" id="185145"><span class="nick" style="color:#2e2a4a"><a href="#185145" label="[18:51:45]">&lt;oriansj&gt;</a></span><span class="message">markjenkinsznc: ummm a single architecture version of M2-Planet is cc_* (with only a handful of additions)</span></div><div class="line" id="185227"><span class="nick" style="color:#2e2a4a"><a href="#185227" label="[18:52:27]">&lt;oriansj&gt;</a></span><span class="message">also M2-Planet is outputing a C state machine; which is a stack machine</span></div><div class="line" id="185239"><span class="nick" style="color:#6c3d55"><a href="#185239" label="[18:52:39]">&lt;markjenkinsznc&gt;</a></span><span class="message">stack machine also provides a good point of comparison if you start output to a register machine as a second output target, if your parser is broken then both outputs will be broken, but if your x86 code generator is broken but your stack machine code generator is fine then you'll see</span></div><div class="line" id="185241"><span class="nick" style="color:#2e2a4a"><a href="#185241" label="[18:52:41]">&lt;oriansj&gt;</a></span><span class="message">quite similar to the AT&amp;T Hobbit processor</span></div><div class="line" id="185301"><span class="nick" style="color:#6c3d55"><a href="#185301" label="[18:53:01]">&lt;markjenkinsznc&gt;</a></span><span class="message">very cool to learn this detail about M2-planet internals</span></div><div class="line" id="185417"><span class="nick" style="color:#6c3d55"><a href="#185417" label="[18:54:17]">&lt;markjenkinsznc&gt;</a></span><span class="message">difference between M2-planet.py with x86 output and what I've called a future stage0_cc_x86.py is the former is pure python in implemtation, the later would interpret knight ISA binary cc_x86.s</span></div><div class="line" id="185546"><span class="nick" style="color:#6c3d55"><a href="#185546" label="[18:55:46]">&lt;markjenkinsznc&gt;</a></span><span class="message">anyway, got to go, nice to learn about this Hobbit thing Jeremiah</span></div><div class="line" id="185601"><span class="nick" style="color:#2e2a4a"><a href="#185601" label="[18:56:01]">&lt;oriansj&gt;</a></span><span class="message">always good talking to you Mark</span></div><div class="line" id="190242"><span class="nick" style="color:#2e2a4a"><a href="#190242" label="[19:02:42]">&lt;oriansj&gt;</a></span><span class="message">hmm looks like cleanup for test25 and test26 were never turned on; easy to fix</span></div><div class="line" id="190548"><span class="nick" style="color:#2e2a4a"><a href="#190548" label="[19:05:48]">&lt;oriansj&gt;</a></span><span class="message">for History buffs, The AT&amp;T hobbit processor is most famous for being the first CPU in BeOS computers and so cheap that Be Inc decided to put 2 into their first machine</span></div><div class="line" id="190704"><span class="nick" style="color:#2e2a4a"><a href="#190704" label="[19:07:04]">&lt;oriansj&gt;</a></span><span class="message">It also invented stack look-ahead in hardware and never stood a chance to be performance competitive with any register based design.</span></div><div class="line" id="191510"><span class="nick" style="color:#2e2a4a"><a href="#191510" label="[19:15:10]">&lt;oriansj&gt;</a></span><span class="message">What is interesting in the history of Processors; is the best surviving ISAs are those that are unCISCy and unRISCy at the same time</span></div><div class="line" id="191551"><span class="nick" style="color:#2e2a4a"><a href="#191551" label="[19:15:51]">&lt;oriansj&gt;</a></span><span class="message">as if good stack operations and C benchmarks; have forced a particular style of thinking about ISAs.</span></div><div class="line" id="191732"><span class="nick" style="color:#d9d9d9"><a href="#191732" label="[19:17:32]">&lt;NieDzejkob&gt;</a></span><span class="message">where are the commands supported by the stage0 monitor documented? I looked around some of the repositories yesterday and couldn't find anything</span></div><div class="line" id="191905"><span class="nick" style="color:#2e2a4a"><a href="#191905" label="[19:19:05]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: stage0_monitor doesn't have any commands</span></div><div class="line" id="191952"><span class="nick" style="color:#2e2a4a"><a href="#191952" label="[19:19:52]">&lt;oriansj&gt;</a></span><span class="message">you type hex0 into it and it just writes to 2 files; tape_01 gets exactly what you typed and tape_02 gets the processed output</span></div><div class="line" id="192031"><span class="nick" style="color:#2e2a4a"><a href="#192031" label="[19:20:31]">&lt;oriansj&gt;</a></span><span class="message">It solves the bootstrap problem of needing a text editor and an assembler in the same binary</span></div><div class="line" id="192604"><span class="nick" style="color:#2e2a4a"><a href="#192604" label="[19:26:04]">&lt;oriansj&gt;</a></span><span class="message">(correction tape_02 is the binary and tape_01 is what you typed)</span></div><div class="line" id="192637"><span class="nick" style="color:#2e2a4a"><a href="#192637" label="[19:26:37]">&lt;oriansj&gt;</a></span><span class="message">(why did I just say that backwords twice?))</span></div><div class="line" id="192646"><span class="nick" style="color:#2e2a4a"><a href="#192646" label="[19:26:46]">&lt;oriansj&gt;</a></span><span class="message">tape_01 is the binary</span></div><div class="line" id="192657"><span class="nick" style="color:#2e2a4a"><a href="#192657" label="[19:26:57]">&lt;oriansj&gt;</a></span><span class="message">tape_02 is your input</span></div><div class="line" id="192825"><span class="nick" style="color:#2e2a4a"><a href="#192825" label="[19:28:25]">&lt;oriansj&gt;</a></span><span class="message">(we assume, you'll have to manually input the source in the event of a complete wipe)</span></div><div class="line" id="192941"><span class="nick" style="color:#2e2a4a"><a href="#192941" label="[19:29:41]">&lt;oriansj&gt;</a></span><span class="message">Hence why M2-Planet and above has alot of error reporting and catching to make that job easier</span></div><div class="line" id="193102"><span class="nick" style="color:#2e2a4a"><a href="#193102" label="[19:31:02]">&lt;oriansj&gt;</a></span><span class="message">Hence why every piece up to M2-Planet only adds up to 8053 lines</span></div><div class="line" id="193139"><span class="nick" style="color:#2e2a4a"><a href="#193139" label="[19:31:39]">&lt;oriansj&gt;</a></span><span class="message">with cc_* being about 4,974 of that</span></div><div class="line" id="193301"><span class="nick" style="color:#2e2a4a"><a href="#193301" label="[19:33:01]">&lt;oriansj&gt;</a></span><span class="message">and SET.s exists; to allow correcting sources</span></div><div class="line" id="193405"><span class="nick" style="color:#2e2a4a"><a href="#193405" label="[19:34:05]">&lt;oriansj&gt;</a></span><span class="message">a 473 line (1072byte) bare bones line editor</span></div><div class="line" id="193954"><span class="nick" style="color:#d9d9d9"><a href="#193954" label="[19:39:54]">&lt;NieDzejkob&gt;</a></span><span class="message">ah, yes, the Shitty Expensive Typewriter, I recall looking at how it works, but none of my conclusions</span></div><div class="line" id="194102"><span class="nick" style="color:#d9d9d9"><a href="#194102" label="[19:41:02]">&lt;NieDzejkob&gt;</a></span><span class="message">ah, the high level prototype has a printf with help</span></div><div class="line" id="194251"><span class="nick" style="color:#2e2a4a"><a href="#194251" label="[19:42:51]">&lt;oriansj&gt;</a></span><span class="message">yep, although I probably should create a high level prototype for the stage0_monitor so that it'll be instantly obvious how it works</span></div><div class="line" id="194445"><span class="nick" style="color:#2e2a4a"><a href="#194445" label="[19:44:45]">&lt;oriansj&gt;</a></span><span class="message">and clean up the stage2 High level prototypes</span></div><div class="line" id="194600"><span class="nick" style="color:#2e2a4a"><a href="#194600" label="[19:46:00]">&lt;oriansj&gt;</a></span><span class="message">and now that I finally cleared out the last ?alloc warning that static code analysis has for M2-Planet; I think I'll take 10 and be back at it</span></div><div class="line" id="201811"><span class="nick" style="color:#2e2a4a"><a href="#201811" label="[20:18:11]">&lt;oriansj&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="204818"><span class="nick" style="color:#6d2462"><a href="#204818" label="[20:48:18]">&lt;dddddd&gt;</a></span><span class="message">I just rebased my M2-Planet patch over de6eb338d52d, adapted test100/hello-aarch64.sh to the new situation (removal of test100/hello.sh, changes in makefile and require.c requirement) and added chdir, fchdir and access (based on faccessat syscall because for AArch64 there's no access syscall).</span></div><div class="line" id="204937"><span class="nick" style="color:#2e2a4a"><a href="#204937" label="[20:49:37]">&lt;oriansj&gt;</a></span><span class="message">dddddd: sound great</span></div><div class="line" id="205020"><span class="nick" style="color:#2e2a4a"><a href="#205020" label="[20:50:20]">&lt;oriansj&gt;</a></span><span class="message">very nicely done as always dddddd</span></div><div class="line" id="205435"><span class="nick" style="color:#2e2a4a"><a href="#205435" label="[20:54:35]">&lt;oriansj&gt;</a></span><span class="message">and new High level prototypes are up</span></div><div class="line" id="205448"><span class="nick" style="color:#2e2a4a"><a href="#205448" label="[20:54:48]">&lt;oriansj&gt;</a></span><span class="message">now to clean up stage2's high level prototypes</span></div><div class="line" id="205826"><span class="nick" style="color:#6d2462"><a href="#205826" label="[20:58:26]">&lt;dddddd&gt;</a></span><span class="message">Thanks. What's the program which triggered the addition of the new lib functions? Maybe one of fossy? (the idea being tests a bit, just in case).</span></div><div class="line" id="205914"><span class="nick" style="color:#6d2462"><a href="#205914" label="[20:59:14]">&lt;dddddd&gt;</a></span><span class="message">*test</span></div><div class="line" id="210017"><span class="nick" style="color:#2e2a4a"><a href="#210017" label="[21:00:17]">&lt;oriansj&gt;</a></span><span class="message">dddddd: kaem.c</span></div><div class="line" id="210101"><span class="nick" style="color:#2e2a4a"><a href="#210101" label="[21:01:01]">&lt;oriansj&gt;</a></span><span class="message">also mes-m2 will be leveraging them when I get to adding mes.c's logic about searching for boot-0.scm</span></div><div class="line" id="210154"><span class="nick" style="color:#bc80bd"><a href="#210154" label="[21:01:54]">&lt;fossy&gt;</a></span><span class="message">dddddd: the addition of a cd builtin in m2-planet</span></div><div class="line" id="210229"><span class="nick" style="color:#2e2a4a"><a href="#210229" label="[21:02:29]">&lt;oriansj&gt;</a></span><span class="message">that is entirely for kaem</span></div><div class="line" id="210342"><span class="nick" style="color:#bc80bd"><a href="#210342" label="[21:03:42]">&lt;fossy&gt;</a></span><span class="message">cd builtin in kaem sorry</span></div><div class="line" id="210914"><span class="nick" style="color:#2e2a4a"><a href="#210914" label="[21:09:14]">&lt;oriansj&gt;</a></span><span class="message">and I am going to add a troll into stage2/High_level_prototypes/</span></div><div class="line" id="211108"><span class="nick" style="color:#2e2a4a"><a href="#211108" label="[21:11:08]">&lt;oriansj&gt;</a></span><span class="message">and I'll be importing the C sources for cc_* which should be quite useful for anyone wanting write their own.</span></div><div class="line" id="212014"><span class="nick" style="color:#6d2462"><a href="#212014" label="[21:20:14]">&lt;dddddd&gt;</a></span><span class="message">There's no kaem repo anymore and its home is mescc-tools now, right?</span></div><div class="line" id="212052"><span class="nick" style="color:#2e2a4a"><a href="#212052" label="[21:20:52]">&lt;oriansj&gt;</a></span><span class="message">dddddd: correct</span></div><div class="line" id="212136"><span class="nick" style="color:#2e2a4a"><a href="#212136" label="[21:21:36]">&lt;oriansj&gt;</a></span><span class="message">as kaem is part of the mescc-tools and can be depended upon for all bootstrapping of all platforms</span></div><div class="line" id="212210"><span class="nick" style="color:#2e2a4a"><a href="#212210" label="[21:22:10]">&lt;oriansj&gt;</a></span><span class="message">Thus it needs to become powerful enough to be used for the most expected shellscripts in the early bootstrap process</span></div><div class="line" id="212643"><span class="nick" style="color:#6d2462"><a href="#212643" label="[21:26:43]">&lt;dddddd&gt;</a></span><span class="message">OK, README at mescc-tools-seed links to the deprecated repo. That confused me for a moment, when my mirror attempt failed.</span></div><div class="line" id="212801"><span class="nick" style="color:#2e2a4a"><a href="#212801" label="[21:28:01]">&lt;oriansj&gt;</a></span><span class="message">dddddd: sounds like something we need to fix so that other people don't hit the same mistake</span></div><div class="line" id="212938"><span class="nick" style="color:#2e2a4a"><a href="#212938" label="[21:29:38]">&lt;oriansj&gt;</a></span><span class="message">If someone completes that before I finish preparing the cc_x86 c sources; I'll merge it in.</span></div><div class="line" id="213545"><span class="nick" style="color:#2e2a4a"><a href="#213545" label="[21:35:45]">&lt;oriansj&gt;</a></span><span class="message">and cc_x86's sources are ready and patches are up</span></div><div class="line" id="213639"><span class="nick" style="color:#bc80bd"><a href="#213639" label="[21:36:39]">&lt;fossy&gt;</a></span><span class="message">oriansj: would you be interested in adding getcwd() support to M2-Planet? that would allow things like `cd -` to work</span></div><div class="line" id="213655"><span class="nick" style="color:#bc80bd"><a href="#213655" label="[21:36:55]">&lt;fossy&gt;</a></span><span class="message">because otherwise I can't get the initial path</span></div><div class="line" id="213905"><span class="nick" style="color:#2e2a4a"><a href="#213905" label="[21:39:05]">&lt;oriansj&gt;</a></span><span class="message">fossy: well it does appear to just be another syscall to support; so entirely possible</span></div><div class="line" id="213919"><span class="nick" style="color:#bc80bd"><a href="#213919" label="[21:39:19]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="214014"><span class="nick" style="color:#2e2a4a"><a href="#214014" label="[21:40:14]">&lt;oriansj&gt;</a></span><span class="message">I'll try to get it done tonight</span></div><div class="line" id="214601"><span class="nick" style="color:#2e2a4a"><a href="#214601" label="[21:46:01]">&lt;oriansj&gt;</a></span><span class="message">but first I need to fix mescc-tools-seed's README</span></div><div class="line" id="214641"><span class="nick" style="color:#bc80bd"><a href="#214641" label="[21:46:41]">&lt;fossy&gt;</a></span><span class="message">oh yeah, that. sorry i wasn't aware at that point that kaem was in mescc-tools</span></div><div class="line" id="214753"><span class="nick" style="color:#2e2a4a"><a href="#214753" label="[21:47:53]">&lt;oriansj&gt;</a></span><span class="message">fossy: no worries, we are all learning here everyday</span></div><div class="line" id="215052"><span class="nick" style="color:#2e2a4a"><a href="#215052" label="[21:50:52]">&lt;oriansj&gt;</a></span><span class="message">ok patches are up and now to figure out how to do getcwd</span></div><div class="line" id="215353"><span class="nick" style="color:#2e2a4a"><a href="#215353" label="[21:53:53]">&lt;oriansj&gt;</a></span><span class="message">looks like only the char *getcwd(char *buf, size_t size); form is provided by the kernel with the char *getwd(char *buf); form just being a libc wrapper. which is a minor problem as M2-Planet does not support 2 different functions with the same name.</span></div><div class="line" id="215515"><span class="nick" style="color:#2e2a4a"><a href="#215515" label="[21:55:15]">&lt;oriansj&gt;</a></span><span class="message">fossy: does getcwd(calloc(4096, sizeof(char)), 4096); sound like a restriction you are willing to deal with?</span></div><div class="line" id="215522"><span class="nick" style="color:#bc80bd"><a href="#215522" label="[21:55:22]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="215618"><span class="nick" style="color:#6d2462"><a href="#215618" label="[21:56:18]">&lt;dddddd&gt;</a></span><span class="message">getcwd != getwd so no same name it seems</span></div><div class="line" id="215654"><span class="nick" style="color:#2e2a4a"><a href="#215654" label="[21:56:54]">&lt;oriansj&gt;</a></span><span class="message">ok, I'll make getcwd be a straight asm function and have getwd as just a wrapper function</span></div><div class="line" id="215744"><span class="nick" style="color:#2e2a4a"><a href="#215744" label="[21:57:44]">&lt;oriansj&gt;</a></span><span class="message">and I'll expose a PATH_MAX constant which you'll be able to leverage fossy</span></div><div class="line" id="215757"><span class="nick" style="color:#2e2a4a"><a href="#215757" label="[21:57:57]">&lt;oriansj&gt;</a></span><span class="message">(say 4096 for simplicity)</span></div><div class="line" id="215803"><span class="nick" style="color:#bc80bd"><a href="#215803" label="[21:58:03]">&lt;fossy&gt;</a></span><span class="message">cool, thanks</span></div><div class="line" id="215845"><span class="nick" style="color:#2e2a4a"><a href="#215845" label="[21:58:45]">&lt;oriansj&gt;</a></span><span class="message">dddddd: I'll take care of x86, AMD64 and ARMv7l</span></div><div class="line" id="220439"><span class="nick" style="color:#2e2a4a"><a href="#220439" label="[22:04:39]">&lt;oriansj&gt;</a></span><span class="message">might as well throw in get_current_dir_name to complete the triplet</span></div><div class="line" id="220535"><span class="nick" style="color:#6d2462"><a href="#220535" label="[22:05:35]">&lt;dddddd&gt;</a></span><span class="message">noted, oriansj. I'll do my part, of course. I'm just a bit unsure without tests. Maybe an upgrade to test25 with new kaem and more complete kaem.run?</span></div><div class="line" id="220806"><span class="nick" style="color:#2e2a4a"><a href="#220806" label="[22:08:06]">&lt;oriansj&gt;</a></span><span class="message">dddddd: understandably; fossy will you please help by making a test for us</span></div><div class="line" id="220850"><span class="nick" style="color:#bc80bd"><a href="#220850" label="[22:08:50]">&lt;fossy&gt;</a></span><span class="message">sure thing, for chdir() family and getcwd(), getwd()?</span></div><div class="line" id="220938"><span class="nick" style="color:#2e2a4a"><a href="#220938" label="[22:09:38]">&lt;oriansj&gt;</a></span><span class="message">fossy: correct</span></div><div class="line" id="221011"><span class="nick" style="color:#6d2462"><a href="#221011" label="[22:10:11]">&lt;dddddd&gt;</a></span><span class="message">access() is untested too, I think.</span></div><div class="line" id="221039"><span class="nick" style="color:#2e2a4a"><a href="#221039" label="[22:10:39]">&lt;oriansj&gt;</a></span><span class="message">throw it onto <a rel="nofollow" href="https://paste.debian.net/">https://paste.debian.net/</a>  when you are done and dddddd will merge the test in</span></div><div class="line" id="221241"><span class="nick" style="color:#6d2462"><a href="#221241" label="[22:12:41]">&lt;dddddd&gt;</a></span><span class="message">Sounds good, oriansj. New kaem.c plus a script from fossy.</span></div><div class="line" id="221554"><span class="nick" style="color:#2e2a4a"><a href="#221554" label="[22:15:54]">&lt;oriansj&gt;</a></span><span class="message">during which time I'll be porting getcwd syscall into stage0's --posix-mode and disassembler</span></div><div class="line" id="222451"><span class="nick" style="color:#2e2a4a"><a href="#222451" label="[22:24:51]">&lt;oriansj&gt;</a></span><span class="message">and my quick prototypes are up</span></div><div class="line" id="235347"><span class="nick">***</span><span class="message notice">dddddd_ is now known as dddddd</span></div><div class="line" id="235358"><span class="nick">***</span><span class="message notice">deesix_ is now known as deesix</span></div><br /></div></body></html>