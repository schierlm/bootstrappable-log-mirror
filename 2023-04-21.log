<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004852"><span class="nick" style="color:#389600"><a href="#004852" label="[00:48:52]">&lt;roconnor&gt;</a></span><span class="message">is mes-0.24.2/lib/linux/x86-mes-gcc/crtn.c supposed to be emtpy(ish)?</span></div><div class="line" id="005044"><span class="nick" style="color:#8dd3c7"><a href="#005044" label="[00:50:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, just comments</span></div><div class="line" id="005120"><span class="nick" style="color:#8dd3c7"><a href="#005120" label="[00:51:20]">&lt;stikonas[m]&gt;</a></span><span class="message">I think because GCC / C library would provide their own C runtime</span></div><div class="line" id="005210"><span class="nick" style="color:#8dd3c7"><a href="#005210" label="[00:52:10]">&lt;stikonas[m]&gt;</a></span><span class="message">Perhaps it could be deleted...</span></div><div class="line" id="005550"><span class="nick" style="color:#389600"><a href="#005550" label="[00:55:50]">&lt;roconnor&gt;</a></span><span class="message">tcc want's to load them ... I'm having some trouble with that right now, but I'm sure I've done something stupid</span></div><div class="line" id="010120"><span class="nick" style="color:#8dd3c7"><a href="#010120" label="[01:01:20]">&lt;stikonas[m]&gt;</a></span><span class="message">That's for building mes with GCC...</span></div><div class="line" id="010330"><span class="nick" style="color:#8dd3c7"><a href="#010330" label="[01:03:30]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, we also use x86-mes-gcc when building with tcc</span></div><div class="line" id="010412"><span class="nick" style="color:#8dd3c7"><a href="#010412" label="[01:04:12]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess tcc looks for crtn.o</span></div><div class="line" id="020023"><span class="nick" style="color:#389600"><a href="#020023" label="[02:00:23]">&lt;roconnor&gt;</a></span><span class="message">I had a typo.  lib/lib/mes</span></div><div class="line" id="022725"><span class="nick" style="color:#8dd3c7"><a href="#022725" label="[02:27:25]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: are you following live-bootstrap scripts?</span></div><div class="line" id="022740"><span class="nick" style="color:#8dd3c7"><a href="#022740" label="[02:27:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Those should be just plain command in early bootstrap</span></div><div class="line" id="030421"><span class="nick" style="color:#389600"><a href="#030421" label="[03:04:21]">&lt;roconnor&gt;</a></span><span class="message">yeah.  But I'm trasncribing them into Nix expressions as I go, and fiddling with the directory structures as I go.</span></div><div class="line" id="040412"><span class="nick" style="color:#389600"><a href="#040412" label="[04:04:12]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/1bc4296091c51f53a5598050c8956d16e945b0f5/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L151-L152">https://github.com/fosslinux/live-bootstrap/blob/1bc4296091c51f53a5598050c8956d16e945b0f5/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L151-L152</a> </span></div><div class="line" id="040449"><span class="nick" style="color:#389600"><a href="#040449" label="[04:04:49]">&lt;roconnor&gt;</a></span><span class="message">I'm not sure what is going on here.  It builds libtcc1.o from mes, then immedately clobbers the result by building libtcc1.o from tcc.</span></div><div class="line" id="061202"><span class="nick" style="color:#2e2a4a"><a href="#061202" label="[06:12:02]">&lt;muurkha&gt;</a></span><span class="message">doh</span></div><div class="line" id="061234"><span class="nick" style="color:#2e2a4a"><a href="#061234" label="[06:12:34]">&lt;muurkha&gt;</a></span><span class="message">roconnor: tell me about bootstrap paths for Haskell</span></div><div class="line" id="061306"><span class="nick" style="color:#389600"><a href="#061306" label="[06:13:06]">&lt;roconnor&gt;</a></span><span class="message">there is a article on the sadness.</span></div><div class="line" id="061340"><span class="nick" style="color:#2e2a4a"><a href="#061340" label="[06:13:40]">&lt;muurkha&gt;</a></span><span class="message">it would be fantastic if Nix could be reproducibly built from a tiny binary seed</span></div><div class="line" id="061457"><span class="nick" style="color:#389600"><a href="#061457" label="[06:14:57]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html</a> </span></div><div class="line" id="061738"><span class="nick" style="color:#389600"><a href="#061738" label="[06:17:38]">&lt;roconnor&gt;</a></span><span class="message">tiny seed, plus a posix kernel, plus the nix-daemon.</span></div><div class="line" id="061754"><span class="nick" style="color:#389600"><a href="#061754" label="[06:17:54]">&lt;roconnor&gt;</a></span><span class="message">still, it is kinda nice.</span></div><div class="line" id="062049"><span class="nick" style="color:#2e2a4a"><a href="#062049" label="[06:20:49]">&lt;muurkha&gt;</a></span><span class="message">thank you!</span></div><div class="line" id="062230"><span class="nick" style="color:#2e2a4a"><a href="#062230" label="[06:22:30]">&lt;muurkha&gt;</a></span><span class="message">that's by rekado, who is here</span></div><div class="line" id="062728"><span class="nick" style="color:#2e2a4a"><a href="#062728" label="[06:27:28]">&lt;muurkha&gt;</a></span><span class="message">I don't think I realized he had written this</span></div><div class="line" id="062834"><span class="nick" style="color:#2e2a4a"><a href="#062834" label="[06:28:34]">&lt;muurkha&gt;</a></span><span class="message">Fiwix seems to be making progress on the &quot;plus a posix kernel&quot; problem</span></div><div class="line" id="062844"><span class="nick" style="color:#389600"><a href="#062844" label="[06:28:44]">&lt;roconnor&gt;</a></span><span class="message">indeed.</span></div><div class="line" id="063401"><span class="nick" style="color:#2e2a4a"><a href="#063401" label="[06:34:01]">&lt;muurkha&gt;</a></span><span class="message">I've read the sad story now</span></div><div class="line" id="063459"><span class="nick" style="color:#2e2a4a"><a href="#063459" label="[06:34:59]">&lt;muurkha&gt;</a></span><span class="message">how hard would it be to write a Haskell interpreter that could run GHC if it didn't have to be efficient or collect garbage?</span></div><div class="line" id="063525"><span class="nick" style="color:#389600"><a href="#063525" label="[06:35:25]">&lt;roconnor&gt;</a></span><span class="message">I don't know.  Maybe you take Hugs and try to extend it.</span></div><div class="line" id="063608"><span class="nick" style="color:#2e2a4a"><a href="#063608" label="[06:36:08]">&lt;muurkha&gt;</a></span><span class="message">I mean you can easily get a box with 64 gigs of RAM now, and compiling GHC with GHC might generate less garbage than that</span></div><div class="line" id="063714"><span class="nick" style="color:#2e2a4a"><a href="#063714" label="[06:37:14]">&lt;muurkha&gt;</a></span><span class="message">is there a tiny kernel of Haskell that you can translate the rest of Haskell into, maybe with code written in the kernel language?</span></div><div class="line" id="063737"><span class="nick" style="color:#2e2a4a"><a href="#063737" label="[06:37:37]">&lt;muurkha&gt;</a></span><span class="message">I have this vague memory of such a thing existing</span></div><div class="line" id="063739"><span class="nick" style="color:#389600"><a href="#063739" label="[06:37:39]">&lt;roconnor&gt;</a></span><span class="message">yes.  F_omega is what Haskell is compiled to.</span></div><div class="line" id="063813"><span class="nick" style="color:#389600"><a href="#063813" label="[06:38:13]">&lt;roconnor&gt;</a></span><span class="message">I'm not really sure it helps though.</span></div><div class="line" id="063921"><span class="nick" style="color:#2e2a4a"><a href="#063921" label="[06:39:21]">&lt;muurkha&gt;</a></span><span class="message">hmm, what is F_omega like?</span></div><div class="line" id="063954"><span class="nick" style="color:#389600"><a href="#063954" label="[06:39:54]">&lt;roconnor&gt;</a></span><span class="message">it's a standard type theory with first class polymorphism.</span></div><div class="line" id="064007"><span class="nick" style="color:#389600"><a href="#064007" label="[06:40:07]">&lt;roconnor&gt;</a></span><span class="message">maybe some fancyness to support GADTs.</span></div><div class="line" id="064103"><span class="nick" style="color:#2e2a4a"><a href="#064103" label="[06:41:03]">&lt;muurkha&gt;</a></span><span class="message">a type theory? is that all you need to specify what the code does?</span></div><div class="line" id="064131"><span class="nick" style="color:#2e2a4a"><a href="#064131" label="[06:41:31]">&lt;muurkha&gt;</a></span><span class="message">IIRC you were the person who first introduced me to the Curry-Howard isomorphism</span></div><div class="line" id="064205"><span class="nick" style="color:#2e2a4a"><a href="#064205" label="[06:42:05]">&lt;muurkha&gt;</a></span><span class="message">about 02001 probably</span></div><div class="line" id="064206"><span class="nick" style="color:#389600"><a href="#064206" label="[06:42:06]">&lt;roconnor&gt;</a></span><span class="message">these type systems don't make sound logics because they support non-termination.</span></div><div class="line" id="064331"><span class="nick" style="color:#6b8072"><a href="#064331" label="[06:43:31]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">muurkha: I think it's better to get GHC running directly on Hugs</span></div><div class="line" id="064558"><span class="nick" style="color:#6b8072"><a href="#064558" label="[06:45:58]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">I'm not sure how hard that would be</span></div><div class="line" id="094555"><span class="nick" style="color:#80b1d3"><a href="#094555" label="[09:45:55]">&lt;rekado&gt;</a></span><span class="message">AwesomeAdam54321: none of the GHC versions run on Hugs</span></div><div class="line" id="095234"><span class="nick" style="color:#6b8072"><a href="#095234" label="[09:52:34]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">rekado: I meant that an old version of GHC be modified to run on Hugs</span></div><div class="line" id="095347"><span class="nick" style="color:#80b1d3"><a href="#095347" label="[09:53:47]">&lt;rekado&gt;</a></span><span class="message">I tried that</span></div><div class="line" id="095353"><span class="nick" style="color:#80b1d3"><a href="#095353" label="[09:53:53]">&lt;rekado&gt;</a></span><span class="message">with all the early versions</span></div><div class="line" id="095422"><span class="nick" style="color:#80b1d3"><a href="#095422" label="[09:54:22]">&lt;rekado&gt;</a></span><span class="message">and I did modify the GHC modules (because Hugs doesn’t support mutually recursive modules)</span></div><div class="line" id="100329"><span class="nick" style="color:#6b8072"><a href="#100329" label="[10:03:29]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">rekado: oh ok, from your blog post I thought you used nhc98 to compile GHC</span></div><div class="line" id="100627"><span class="nick" style="color:#80b1d3"><a href="#100627" label="[10:06:27]">&lt;rekado&gt;</a></span><span class="message">I tried running nhc98 on Hugs because GHC on Hugs required even more changes and wouldn’t work</span></div><div class="line" id="100656"><span class="nick" style="color:#6b8072"><a href="#100656" label="[10:06:56]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">Does nhc98 implement more Haskell extensions than Hugs?</span></div><div class="line" id="100708"><span class="nick" style="color:#80b1d3"><a href="#100708" label="[10:07:08]">&lt;rekado&gt;</a></span><span class="message">in Guix I’ve ended up adding GHC 4.08 with some generated C files</span></div><div class="line" id="100735"><span class="nick" style="color:#80b1d3"><a href="#100735" label="[10:07:35]">&lt;rekado&gt;</a></span><span class="message">I don’t recall the differences, but early GHCs claimed to be buildable with nhc</span></div><div class="line" id="100752"><span class="nick" style="color:#80b1d3"><a href="#100752" label="[10:07:52]">&lt;rekado&gt;</a></span><span class="message">now I don’t think that was ever more than aspirational</span></div><div class="line" id="100854"><span class="nick" style="color:#6b8072"><a href="#100854" label="[10:08:54]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">I feel like bootstrapping GHC is so close, the only thing needed is to use gcc-toolchain@2 instead of gcc-toolchain@4 to compile nhc</span></div><div class="line" id="100954"><span class="nick" style="color:#80b1d3"><a href="#100954" label="[10:09:54]">&lt;rekado&gt;</a></span><span class="message">GHC 4 in Guix uses GCC 2.95</span></div><div class="line" id="101028"><span class="nick" style="color:#80b1d3"><a href="#101028" label="[10:10:28]">&lt;rekado&gt;</a></span><span class="message">we have nhc98 1.22 in Guix (not bootstrapped from Haskell) and it could not build any of the GHCs I tried.</span></div><div class="line" id="101038"><span class="nick" style="color:#80b1d3"><a href="#101038" label="[10:10:38]">&lt;rekado&gt;</a></span><span class="message">so I don’t think nhc is the way forward.</span></div><div class="line" id="101121"><span class="nick" style="color:#80b1d3"><a href="#101121" label="[10:11:21]">&lt;rekado&gt;</a></span><span class="message">early GHCs also mentioned HBC, but that’s another compiler written in Haskell and it’s not under a free license last time I checked.</span></div><div class="line" id="101231"><span class="nick" style="color:#6b8072"><a href="#101231" label="[10:12:31]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">Either way, a Haskell compiler needs to bend towards GHC's dialect of Haskell, or heavily modify GHC to use standard Haskell instead</span></div><div class="line" id="101420"><span class="nick" style="color:#80b1d3"><a href="#101420" label="[10:14:20]">&lt;rekado&gt;</a></span><span class="message">the biggest problem I found is that GHC depends heavily on internal types that are defined in the RTS.  You can’t use Hugs or any other compiler to provide these implementations.</span></div><div class="line" id="101445"><span class="nick" style="color:#80b1d3"><a href="#101445" label="[10:14:45]">&lt;rekado&gt;</a></span><span class="message">and to build the RTS you need GHC</span></div><div class="line" id="101629"><span class="nick" style="color:#6b8072"><a href="#101629" label="[10:16:29]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">Chicken Scheme has the same problem</span></div><div class="line" id="101712"><span class="nick" style="color:#6b8072"><a href="#101712" label="[10:17:12]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">I haven't made much progress yet though, I want to see if the oldest version can be converted to Guile Scheme</span></div><div class="line" id="121713"><span class="nick" style="color:#8dd3c7"><a href="#121713" label="[12:17:13]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: probably the first libtcc.c is not needed</span></div><div class="line" id="124525"><span class="nick" style="color:#389600"><a href="#124525" label="[12:45:25]">&lt;roconnor&gt;</a></span><span class="message">Should I make PR?  I don't really know what I'm doing.</span></div><div class="line" id="125246"><span class="nick" style="color:#6d2462"><a href="#125246" label="[12:52:46]">&lt;river&gt;</a></span><span class="message">roconnor: if you have the energy to do that i think people would be very grateful</span></div><div class="line" id="125457"><span class="nick" style="color:#8dd3c7"><a href="#125457" label="[12:54:57]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: if you can, make PR. There is more than one instance of this clobbering though</span></div><div class="line" id="125509"><span class="nick" style="color:#389600"><a href="#125509" label="[12:55:09]">&lt;roconnor&gt;</a></span><span class="message">right in every build step</span></div><div class="line" id="125514"><span class="nick" style="color:#8dd3c7"><a href="#125514" label="[12:55:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Each build of tcc...</span></div><div class="line" id="125534"><span class="nick" style="color:#8dd3c7"><a href="#125534" label="[12:55:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Also try running live-bootstrap before pr</span></div><div class="line" id="125714"><span class="nick" style="color:#389600"><a href="#125714" label="[12:57:14]">&lt;roconnor&gt;</a></span><span class="message">that second step is a bit tricky.</span></div><div class="line" id="133631"><span class="nick" style="color:#8dd3c7"><a href="#133631" label="[13:36:31]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: which line?</span></div><div class="line" id="133721"><span class="nick" style="color:#389600"><a href="#133721" label="[13:37:21]">&lt;roconnor&gt;</a></span><span class="message">The line where I run live-bootstrap before opening a PR. :)</span></div><div class="line" id="134146"><span class="nick" style="color:#8dd3c7"><a href="#134146" label="[13:41:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, not code line...</span></div><div class="line" id="134214"><span class="nick" style="color:#389600"><a href="#134214" label="[13:42:14]">&lt;roconnor&gt;</a></span><span class="message">I might be able to give it a try.  The chroot build command doesn't seem so bad.</span></div><div class="line" id="134225"><span class="nick" style="color:#8dd3c7"><a href="#134225" label="[13:42:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Is just run ./rootfs.py --bwrap --external-sources</span></div><div class="line" id="134247"><span class="nick" style="color:#8dd3c7"><a href="#134247" label="[13:42:47]">&lt;stikonas[m]&gt;</a></span><span class="message">bwrap doesn't even need root</span></div><div class="line" id="134305"><span class="nick" style="color:#8dd3c7"><a href="#134305" label="[13:43:05]">&lt;stikonas[m]&gt;</a></span><span class="message">s/Is/I/</span></div><div class="line" id="173649"><span class="nick" style="color:#389600"><a href="#173649" label="[17:36:49]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/1bc4296091c51f53a5598050c8956d16e945b0f5/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L391-L395">https://github.com/fosslinux/live-bootstrap/blob/1bc4296091c51f53a5598050c8956d16e945b0f5/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L391-L395</a> </span></div><div class="line" id="173730"><span class="nick" style="color:#389600"><a href="#173730" label="[17:37:30]">&lt;roconnor&gt;</a></span><span class="message">getopt build steps ought to be copied or moved to tcc-0.9.27;  currently it isn't recompiled with 0.9.27.</span></div><div class="line" id="174022"><span class="nick" style="color:#234e69"><a href="#174022" label="[17:40:22]">&lt;janus&gt;</a></span><span class="message">rekado: HBC is not written in Haskell, it is written in Lazy ML. Which I don't know of a compiler for.</span></div><div class="line" id="174220"><span class="nick" style="color:#234e69"><a href="#174220" label="[17:42:20]">&lt;janus&gt;</a></span><span class="message">So far, it doesn't seem super hard to port GHC 0.29 to NHC, it's just tedious because modules are mutually recursive in their imports. But often times, the actual name module A needs from B could be gotten more directly from module C. So it might not be as mutually recursive as it seems</span></div><div class="line" id="174421"><span class="nick" style="color:#234e69"><a href="#174421" label="[17:44:21]">&lt;janus&gt;</a></span><span class="message">The build system is building files in an arbitrary manner because they ship hi files for everything, so they never had this problem of having to regenerate hi files</span></div><div class="line" id="174524"><span class="nick" style="color:#389600"><a href="#174524" label="[17:45:24]">&lt;roconnor&gt;</a></span><span class="message">so you would modify GHC 0.29 to remove the recursive imports?</span></div><div class="line" id="174701"><span class="nick" style="color:#234e69"><a href="#174701" label="[17:47:01]">&lt;janus&gt;</a></span><span class="message">Some of that, which is nice, because then you can have NHC generate a new fresh .hi file. But if I know where the name is supposed to come from, I am often tempted to just write the hi file by hand.</span></div><div class="line" id="175048"><span class="nick" style="color:#8dd3c7"><a href="#175048" label="[17:50:48]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: we could rebuild them, though perhaps if getopt built with old tcc worked, we thought it's not worth rebuilding it...</span></div><div class="line" id="175142"><span class="nick" style="color:#389600"><a href="#175142" label="[17:51:42]">&lt;roconnor&gt;</a></span><span class="message">I should check to see if the results are identical ...</span></div><div class="line" id="175257"><span class="nick" style="color:#8dd3c7"><a href="#175257" label="[17:52:57]">&lt;stikonas[m]&gt;</a></span><span class="message">They probably will have different hash</span></div><div class="line" id="175317"><span class="nick" style="color:#8dd3c7"><a href="#175317" label="[17:53:17]">&lt;stikonas[m]&gt;</a></span><span class="message">But it's just option parsing</span></div><div class="line" id="175337"><span class="nick" style="color:#8dd3c7"><a href="#175337" label="[17:53:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe older tcc would spit our slower code</span></div><div class="line" id="175339"><span class="nick" style="color:#234e69"><a href="#175339" label="[17:53:39]">&lt;janus&gt;</a></span><span class="message">rekado: but I haven't looked at the RTS of GHC 0.29. Have you looked at it, or were your comments specific to GHC 4?</span></div><div class="line" id="175744"><span class="nick" style="color:#389600"><a href="#175744" label="[17:57:44]">&lt;roconnor&gt;</a></span><span class="message">that's why I think moving the steps to 0.9.27 rather than copying it might make more sense.</span></div><div class="line" id="175913"><span class="nick" style="color:#8dd3c7"><a href="#175913" label="[17:59:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Do we not need it to build tcc itself?</span></div><div class="line" id="180019"><span class="nick" style="color:#6c3d55"><a href="#180019" label="[18:00:19]">&lt;avih&gt;</a></span><span class="message">aggi: did bellard reply?</span></div><div class="line" id="180949"><span class="nick" style="color:#389600"><a href="#180949" label="[18:09:49]">&lt;roconnor&gt;</a></span><span class="message">the way it currently works is that getopt is built with mes-tcc, then it is ignored for a while, and then rebuilt with tcc-0.9.26, and that is it (at least as far as I've gone so far).</span></div><div class="line" id="191216"><span class="nick" style="color:#d9d9d9"><a href="#191216" label="[19:12:16]">&lt;aggi&gt;</a></span><span class="message">avih: i havent received an email nor any other feedback</span></div><div class="line" id="191249"><span class="nick" style="color:#d9d9d9"><a href="#191249" label="[19:12:49]">&lt;aggi&gt;</a></span><span class="message">no problem, currently i am too tired anyway</span></div><div class="line" id="191310"><span class="nick" style="color:#d9d9d9"><a href="#191310" label="[19:13:10]">&lt;aggi&gt;</a></span><span class="message">and he mentioned on his website, he stopped working on tcc almost 20 years ago already</span></div><div class="line" id="191435"><span class="nick" style="color:#d9d9d9"><a href="#191435" label="[19:14:35]">&lt;aggi&gt;</a></span><span class="message">meanwhile i made some progress with tccboot</span></div><div class="line" id="191629"><span class="nick" style="color:#d9d9d9"><a href="#191629" label="[19:16:29]">&lt;aggi&gt;</a></span><span class="message">and i had to do spring-cleaning, before i can focus on some heavy-task several weeks non-stop, without drowning in dirt and chaos</span></div><div class="line" id="191707"><span class="nick" style="color:#d9d9d9"><a href="#191707" label="[19:17:07]">&lt;aggi&gt;</a></span><span class="message">i'll notify in this channel, as soon as the issues with tccboot and linux-2.4/tcc are resolved</span></div><div class="line" id="192544"><span class="nick" style="color:#bc80bd"><a href="#192544" label="[19:25:44]">&lt;oriansj&gt;</a></span><span class="message">thank you for the update aggi</span></div><div class="line" id="203346"><span class="nick" style="color:#6c3d55"><a href="#203346" label="[20:33:46]">&lt;avih&gt;</a></span><span class="message">aggi: hmm.. i was sure he'd reply.. a bit weird TBH... but glad you made progress</span></div><div class="line" id="225040"><span class="nick" style="color:#2e2a4a"><a href="#225040" label="[22:50:40]">&lt;muurkha&gt;</a></span><span class="message">aggi: congratulations</span></div><div class="line" id="225305"><span class="nick" style="color:#2e2a4a"><a href="#225305" label="[22:53:05]">&lt;muurkha&gt;</a></span><span class="message">glad you've made some progress</span></div><br /></div></body></html>