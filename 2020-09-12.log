<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-09-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001922"><span class="nick" style="color:#8dd3c7"><a href="#001922" label="[00:19:22]">&lt;OriansJ`&gt;</a></span><span class="message">akkartik: the current armv7l work is here: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/tree/master/armv7l/GAS">https://github.com/oriansj/mescc-tools-seed/tree/master/armv7l/GAS</a> </span></div><div class="line" id="001948"><span class="nick" style="color:#8dd3c7"><a href="#001948" label="[00:19:48]">&lt;OriansJ`&gt;</a></span><span class="message">today's addition is cc_x86 written in armv7l assembly</span></div><div class="line" id="002034"><span class="nick" style="color:#8dd3c7"><a href="#002034" label="[00:20:34]">&lt;OriansJ`&gt;</a></span><span class="message">I'll convert it to cc_armv7l.S this weekend and start working backwards</span></div><div class="line" id="002844"><span class="nick" style="color:#8dd3c7"><a href="#002844" label="[00:28:44]">&lt;OriansJ`&gt;</a></span><span class="message">it was the slowest cc_x86 version I ever wrote (28hours of coding time)</span></div><div class="line" id="002850"><span class="nick" style="color:#2e2a4a"><a href="#002850" label="[00:28:50]">&lt;xentrac&gt;</a></span><span class="message">awesome!</span></div><div class="line" id="002909"><span class="nick" style="color:#8dd3c7"><a href="#002909" label="[00:29:09]">&lt;OriansJ`&gt;</a></span><span class="message">because armv7l cna't even do 12bit immediates right</span></div><div class="line" id="002949"><span class="nick" style="color:#2e2a4a"><a href="#002949" label="[00:29:49]">&lt;xentrac&gt;</a></span><span class="message">aw</span></div><div class="line" id="003008"><span class="nick" style="color:#2e2a4a"><a href="#003008" label="[00:30:08]">&lt;xentrac&gt;</a></span><span class="message">so you had to go back and redo a bunch of stuff?</span></div><div class="line" id="003014"><span class="nick" style="color:#2e2a4a"><a href="#003014" label="[00:30:14]">&lt;xentrac&gt;</a></span><span class="message">to use constant pools or something?</span></div><div class="line" id="003028"><span class="nick" style="color:#2e2a4a"><a href="#003028" label="[00:30:28]">&lt;xentrac&gt;</a></span><span class="message">(I haven't looked at the code)</span></div><div class="line" id="011851"><span class="nick" style="color:#6b8072"><a href="#011851" label="[01:18:51]">&lt;akkartik&gt;</a></span><span class="message">OriansJ: ack</span></div><div class="line" id="022559"><span class="nick" style="color:#8dd3c7"><a href="#022559" label="[02:25:59]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well the first thing I had to do was move from a single constant pool of strings and globals and litter them around the functions. then when functions grew too large, I had to shove values inside of the functions themselves.</span></div><div class="line" id="022656"><span class="nick" style="color:#8dd3c7"><a href="#022656" label="[02:26:56]">&lt;OriansJ`&gt;</a></span><span class="message">The lack of proper call and return primitives resulted in me having to add over 900 push/pop instructions just to approximate a proper call stack.</span></div><div class="line" id="022835"><span class="nick" style="color:#8dd3c7"><a href="#022835" label="[02:28:35]">&lt;OriansJ`&gt;</a></span><span class="message">then the syntax oddities of # for comments but only when it is the first non-whitespace character of the line and @ for comments but only if it isn't the first non-whitespace character of the line.</span></div><div class="line" id="023157"><span class="nick" style="color:#8dd3c7"><a href="#023157" label="[02:31:57]">&lt;OriansJ`&gt;</a></span><span class="message">then having to do .balign 4 a shitload because adr doesn't accept addresses that are not aligned to the word size (or worse if you go past 1024bytes away, then you have to be 8, 16 or 32byte aligned)</span></div><div class="line" id="023331"><span class="nick" style="color:#8dd3c7"><a href="#023331" label="[02:33:31]">&lt;OriansJ`&gt;</a></span><span class="message">or more often you have to giveup and just do another_stupid_label_3: .word the_thing_you_need and try to stick it within 256 words of the ldr</span></div><div class="line" id="023856"><span class="nick" style="color:#8dd3c7"><a href="#023856" label="[02:38:56]">&lt;OriansJ`&gt;</a></span><span class="message">I still think it is absolutely stupid that armv7l doesn't have integer division and floating point hardware is not guaranteed; so have to write/use a function that walks the bits otherwise you'll need more than 32loops to get the actual value.</span></div><div class="line" id="024059"><span class="nick" style="color:#8dd3c7"><a href="#024059" label="[02:40:59]">&lt;OriansJ`&gt;</a></span><span class="message">akkartik: sorry about taking so long to respond, it is hard to squeeze freetime with a my son being so active. (mostly giving up alot of sleep to get this stuff done)</span></div><div class="line" id="042230"><span class="nick" style="color:#2e2a4a"><a href="#042230" label="[04:22:30]">&lt;xentrac&gt;</a></span><span class="message">yup, sounds like ARM asm</span></div><div class="line" id="053615"><span class="nick" style="color:#6b8072"><a href="#053615" label="[05:36:15]">&lt;akkartik&gt;</a></span><span class="message">OriansJ: not at all! I'm in the same boat. IRC isn't a fluent medium for me. And California is hot and on fire and smog-filled. All this hasn't made for a productive time. And yet, I'm bored. So here I am, looking for new things to poke at.</span></div><div class="line" id="101535"><span class="nick" style="color:#80b1d3"><a href="#101535" label="[10:15:35]">&lt;dannym&gt;</a></span><span class="message">janneke: tinycc's &quot;doit&quot; assumes cross compilation.  I'm not cross-compiling.  Running build.sh via doit thus doesn't work.</span></div><div class="line" id="101554"><span class="nick" style="color:#80b1d3"><a href="#101554" label="[10:15:54]">&lt;dannym&gt;</a></span><span class="message">janneke: Running build.sh manually does--but then I don't have a lot of the environment variables set.</span></div><div class="line" id="103759"><span class="nick" style="color:#80b1d3"><a href="#103759" label="[10:37:59]">&lt;dannym&gt;</a></span><span class="message">janneke: &quot;sh cc.sh tccpp&quot; &quot;worked&quot; the latter way but with a lot of 4 != 8 errors</span></div><div class="line" id="103816"><span class="nick" style="color:#80b1d3"><a href="#103816" label="[10:38:16]">&lt;dannym&gt;</a></span><span class="message">&quot;sh cc.sh tccpp&quot; took 15 min</span></div><div class="line" id="103822"><span class="nick" style="color:#80b1d3"><a href="#103822" label="[10:38:22]">&lt;dannym&gt;</a></span><span class="message">on banana</span></div><div class="line" id="105009"><span class="nick" style="color:#80b1d3"><a href="#105009" label="[10:50:09]">&lt;dannym&gt;</a></span><span class="message">On &quot;sh cc.sh tccgen&quot; I get a lot of 4 != 8 errors, and also get &quot;unexpected size:8&quot;; it takes 19 min</span></div><div class="line" id="111533"><span class="nick" style="color:#6d2462"><a href="#111533" label="[11:15:33]">&lt;janneke&gt;</a></span><span class="message">dannym: yes, build-32.sh uses a 32bit cross compiler</span></div><div class="line" id="112439"><span class="nick" style="color:#80b1d3"><a href="#112439" label="[11:24:39]">&lt;dannym&gt;</a></span><span class="message">&quot;sh cc.sh tccelf&quot; lots of 4 != 8; takes 10 min and has:</span></div><div class="line" id="112443"><span class="nick" style="color:#80b1d3"><a href="#112443" label="[11:24:43]">&lt;dannym&gt;</a></span><span class="message">unexpected size:8</span></div><div class="line" id="112443"><span class="nick" style="color:#80b1d3"><a href="#112443" label="[11:24:43]">&lt;dannym&gt;</a></span><span class="message">ERROR assign: (assn-expr (p-expr (ident &quot;tmp&quot;)) (op &quot;=&quot;) (p-expr (ident &quot;addr&quot;)))   size[0]:8 != size[0]:4</span></div><div class="line" id="112443"><span class="nick" style="color:#80b1d3"><a href="#112443" label="[11:24:43]">&lt;dannym&gt;</a></span><span class="message">unexpected size:8</span></div><div class="line" id="112443"><span class="nick" style="color:#80b1d3"><a href="#112443" label="[11:24:43]">&lt;dannym&gt;</a></span><span class="message">rank--: not a pointer: #&lt;&lt;type&gt; type: signed size: 1 description: #f&gt;</span></div><div class="line" id="112443"><span class="nick" style="color:#80b1d3"><a href="#112443" label="[11:24:43]">&lt;dannym&gt;</a></span><span class="message">rank--: not a pointer: #&lt;&lt;type&gt; type: signed size: 1 description: #f&gt;</span></div><div class="line" id="112500"><span class="nick" style="color:#80b1d3"><a href="#112500" label="[11:25:00]">&lt;dannym&gt;</a></span><span class="message">&quot;sh cc.sh tccrun&quot; takes 4 min; no errors</span></div><div class="line" id="112513"><span class="nick" style="color:#80b1d3"><a href="#112513" label="[11:25:13]">&lt;dannym&gt;</a></span><span class="message">&quot;sh cc.sh -gen&quot; errors out: rm: invalid option -- 'g'</span></div><div class="line" id="112547"><span class="nick" style="color:#80b1d3"><a href="#112547" label="[11:25:47]">&lt;dannym&gt;</a></span><span class="message">That's because I didn't set tcc_cpu, because I didn't use doit, because it doesn't work</span></div><div class="line" id="113214"><span class="nick" style="color:#6d2462"><a href="#113214" label="[11:32:14]">&lt;janneke&gt;</a></span><span class="message">weird, i think it works/worked for me (on banana)</span></div><div class="line" id="113227"><span class="nick" style="color:#6d2462"><a href="#113227" label="[11:32:27]">&lt;janneke&gt;</a></span><span class="message">i guess part of my recipe is missing</span></div><div class="line" id="113301"><span class="nick" style="color:#6d2462"><a href="#113301" label="[11:33:01]">&lt;janneke&gt;</a></span><span class="message">these errors are less than great, but x86 has them too</span></div><div class="line" id="113304"><span class="nick" style="color:#6d2462"><a href="#113304" label="[11:33:04]">&lt;janneke&gt;</a></span><span class="message">at least some of them</span></div><div class="line" id="113332"><span class="nick" style="color:#6d2462"><a href="#113332" label="[11:33:32]">&lt;janneke&gt;</a></span><span class="message">&quot;less than great&quot; / &quot;terrible&quot;</span></div><div class="line" id="113522"><span class="nick" style="color:#6d2462"><a href="#113522" label="[11:35:22]">&lt;janneke&gt;</a></span><span class="message">on x86, building tcc takes about 8min, so 15min is not too bad on ARM, i guess</span></div><div class="line" id="113540"><span class="nick" style="color:#234e69"><a href="#113540" label="[11:35:40]">*</a></span><span class="message">janneke goes to have a look on banana</span></div><div class="line" id="114043"><span class="nick" style="color:#8dd3c7"><a href="#114043" label="[11:40:43]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: yeah, doing cc_x86 in x86 -&gt; 4626 lines of effort; only x86's half-brained division and lack of registers added any difficulty. AMD64 fixed the second half but unforunately did nothing for division and thus only net saved about 12 lines of effort. but armv7l -&gt; 5995 lines of effort and I understand why people stick to C and above with arm. Comparatively, x86 assembly is so much nicer for general computation. armv7l's everything</span></div><div class="line" id="114043"><span class="nick" style="color:#8dd3c7"><a href="#114043" label="[11:40:43]">&lt;OriansJ`&gt;</a></span><span class="message">is conditional and bit-shifting in every instruction is nice for dense bit twiddling but sort of steps upon its own feet by forcing 8bits of immediate as the primary limitation. while in comparision cc_x86 on knight -&gt; 4395 lines of effort; with the only weakness of having only 16bit immediates. but the opcode space is virtually empty and adding support for 8/32/64bit immediates would enable denser binaries. also lack of cmp-set in</span></div><div class="line" id="114043"><span class="nick" style="color:#8dd3c7"><a href="#114043" label="[11:40:43]">&lt;OriansJ`&gt;</a></span><span class="message">knight did make for ugly relational expression support in C.</span></div><div class="line" id="114134"><span class="nick" style="color:#80b1d3"><a href="#114134" label="[11:41:34]">&lt;dannym&gt;</a></span><span class="message">janneke: Huh...  good to know</span></div><div class="line" id="114208"><span class="nick" style="color:#6d2462"><a href="#114208" label="[11:42:08]">&lt;janneke&gt;</a></span><span class="message">dannym: so...i'm doing something like (testing that now)</span></div><div class="line" id="114216"><span class="nick" style="color:#6d2462"><a href="#114216" label="[11:42:16]">&lt;janneke&gt;</a></span><span class="message">in src/mes:  guix environment -l guix.scm --ad-hoc guile@2.2</span></div><div class="line" id="114226"><span class="nick" style="color:#6d2462"><a href="#114226" label="[11:42:26]">&lt;janneke&gt;</a></span><span class="message">CC=arm-unknown-linux-gnueabihf-gcc ./configure; make</span></div><div class="line" id="114238"><span class="nick" style="color:#6d2462"><a href="#114238" label="[11:42:38]">&lt;janneke&gt;</a></span><span class="message">then ./doit in tinycc</span></div><div class="line" id="114356"><span class="nick" style="color:#80b1d3"><a href="#114356" label="[11:43:56]">&lt;dannym&gt;</a></span><span class="message">janneke: The latter inside the guix environment -l guix.scm of mes ?</span></div><div class="line" id="114403"><span class="nick" style="color:#80b1d3"><a href="#114403" label="[11:44:03]">&lt;dannym&gt;</a></span><span class="message">janneke: That's weird</span></div><div class="line" id="114411"><span class="nick" style="color:#80b1d3"><a href="#114411" label="[11:44:11]">&lt;dannym&gt;</a></span><span class="message">janneke: I wouldn't have thought of trying that :P</span></div><div class="line" id="114412"><span class="nick" style="color:#6d2462"><a href="#114412" label="[11:44:12]">&lt;janneke&gt;</a></span><span class="message">dannym: yes</span></div><div class="line" id="114432"><span class="nick" style="color:#6d2462"><a href="#114432" label="[11:44:32]">&lt;janneke&gt;</a></span><span class="message">dannym: look at it this way:</span></div><div class="line" id="114457"><span class="nick" style="color:#80b1d3"><a href="#114457" label="[11:44:57]">&lt;dannym&gt;</a></span><span class="message">janneke: A lot of the later patches for mes-wip from me are to enable usage of mes' pre-inst-env so we don't need to be inside mes environment :)</span></div><div class="line" id="114520"><span class="nick" style="color:#6d2462"><a href="#114520" label="[11:45:20]">&lt;janneke&gt;</a></span><span class="message">i'm developing mes, in the mes environment...</span></div><div class="line" id="114537"><span class="nick" style="color:#6d2462"><a href="#114537" label="[11:45:37]">&lt;janneke&gt;</a></span><span class="message">:-) ...</span></div><div class="line" id="114548"><span class="nick" style="color:#6d2462"><a href="#114548" label="[11:45:48]">&lt;janneke&gt;</a></span><span class="message">then run ./pre-inst-env mescc scaffold/hello.c to compile a c program</span></div><div class="line" id="114607"><span class="nick" style="color:#6d2462"><a href="#114607" label="[11:46:07]">&lt;janneke&gt;</a></span><span class="message">then, tcc.c is also &quot;just&quot; a c program</span></div><div class="line" id="114633"><span class="nick" style="color:#80b1d3"><a href="#114633" label="[11:46:33]">&lt;dannym&gt;</a></span><span class="message">I don't run ./pre-inst-env mescc scaffold/hello.c inside the mes guix environment either--never did ;)</span></div><div class="line" id="114650"><span class="nick" style="color:#80b1d3"><a href="#114650" label="[11:46:50]">&lt;dannym&gt;</a></span><span class="message">But okay--makes more sense why we see different results then :)</span></div><div class="line" id="114803"><span class="nick" style="color:#80b1d3"><a href="#114803" label="[11:48:03]">&lt;dannym&gt;</a></span><span class="message">(Just like I don't run gcc inside gcc's guix build environment; that one is for building gcc, not for using gcc.  It took me a long time to get into the habit of not confusing the two :))</span></div><div class="line" id="114823"><span class="nick" style="color:#6d2462"><a href="#114823" label="[11:48:23]">&lt;janneke&gt;</a></span><span class="message">well, ... make check =&gt; ./check.sh =&gt; ./pre-inst-env ... mescc</span></div><div class="line" id="114833"><span class="nick" style="color:#80b1d3"><a href="#114833" label="[11:48:33]">&lt;dannym&gt;</a></span><span class="message">Yes, I can see it now</span></div><div class="line" id="114845"><span class="nick" style="color:#6d2462"><a href="#114845" label="[11:48:45]">&lt;janneke&gt;</a></span><span class="message">dannym: re gcc: sure!</span></div><div class="line" id="114849"><span class="nick" style="color:#6d2462"><a href="#114849" label="[11:48:49]">&lt;janneke&gt;</a></span><span class="message">so...</span></div><div class="line" id="114954"><span class="nick" style="color:#6d2462"><a href="#114954" label="[11:49:54]">&lt;janneke&gt;</a></span><span class="message">we can do mes-based tcc development in the environment for tcc-boot0</span></div><div class="line" id="115013"><span class="nick" style="color:#6d2462"><a href="#115013" label="[11:50:13]">&lt;janneke&gt;</a></span><span class="message">theoretically, (at least for x86)</span></div><div class="line" id="115035"><span class="nick" style="color:#6d2462"><a href="#115035" label="[11:50:35]">&lt;janneke&gt;</a></span><span class="message">guix environment (@@ (gnu packages commencement) tcc-boot0)</span></div><div class="line" id="115059"><span class="nick" style="color:#6d2462"><a href="#115059" label="[11:50:59]">&lt;janneke&gt;</a></span><span class="message">gives you all you need...which is mescc-tools, mes-0.22, nyacc</span></div><div class="line" id="115116"><span class="nick" style="color:#80b1d3"><a href="#115116" label="[11:51:16]">&lt;dannym&gt;</a></span><span class="message">I see</span></div><div class="line" id="115134"><span class="nick" style="color:#6d2462"><a href="#115134" label="[11:51:34]">&lt;janneke&gt;</a></span><span class="message">BUT we probably want to run our own mes, not /gnu/store/*-mes-0.22/...</span></div><div class="line" id="115226"><span class="nick" style="color:#80b1d3"><a href="#115226" label="[11:52:26]">&lt;dannym&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="115309"><span class="nick" style="color:#80b1d3"><a href="#115309" label="[11:53:09]">&lt;dannym&gt;</a></span><span class="message">The mini-CI I wrote on banana uses this to enter the respective environments (ugh!  But it works):</span></div><div class="line" id="115310"><span class="nick" style="color:#80b1d3"><a href="#115310" label="[11:53:10]">&lt;dannym&gt;</a></span><span class="message">dannym@banana:~/src/mes-wip/mes$ cat enter</span></div><div class="line" id="115310"><span class="nick" style="color:#80b1d3"><a href="#115310" label="[11:53:10]">&lt;dannym&gt;</a></span><span class="message">#!/bin/sh</span></div><div class="line" id="115310"><span class="nick" style="color:#80b1d3"><a href="#115310" label="[11:53:10]">&lt;dannym&gt;</a></span><span class="message"># guix environment --pure guix --</span></div><div class="line" id="115310"><span class="nick" style="color:#80b1d3"><a href="#115310" label="[11:53:10]">&lt;dannym&gt;</a></span><span class="message">#export GUILE_LOAD_PATH=&quot;/gnu/store/hngvis44nkpzfg7x52c9p50hq61f3nik-profile/share/guile/site/2.2&quot;</span></div><div class="line" id="115310"><span class="nick" style="color:#80b1d3"><a href="#115310" label="[11:53:10]">&lt;dannym&gt;</a></span><span class="message">#export GUILE_COMPILE_LOAD_PATH=&quot;/gnu/store/hngvis44nkpzfg7x52c9p50hq61f3nik-profile/lib/guile/2.2/site-ccache&quot;</span></div><div class="line" id="115313"><span class="nick" style="color:#80b1d3"><a href="#115313" label="[11:53:13]">&lt;dannym&gt;</a></span><span class="message">export GUILE_LOAD_PATH=&quot;/gnu/store/xq8ar9pdks5m56bv7rc7afbpyqbwbxir-profile/share/guile/site/3.0&quot;</span></div><div class="line" id="115317"><span class="nick" style="color:#80b1d3"><a href="#115317" label="[11:53:17]">&lt;dannym&gt;</a></span><span class="message">export GUILE_COMPILE_LOAD_PATH=&quot;/gnu/store/xq8ar9pdks5m56bv7rc7afbpyqbwbxir-profile/lib/guile/3.0/site-ccache:/gnu/store/xq8ar9pdks5m56bv7rc7afbpyqbwbxir-profile/share/guile/site/3.0&quot;</span></div><div class="line" id="115320"><span class="nick" style="color:#80b1d3"><a href="#115320" label="[11:53:20]">&lt;dannym&gt;</a></span><span class="message">exec ~/src/guix-master/guix/pre-inst-env guix environment -K --pure mes --ad-hoc nano less gdb git -- &quot;$@&quot;</span></div><div class="line" id="115323"><span class="nick" style="color:#80b1d3"><a href="#115323" label="[11:53:23]">&lt;dannym&gt;</a></span><span class="message">dannym@banana:~/src/mes-tinycc/tinycc$ cat enter</span></div><div class="line" id="115325"><span class="nick" style="color:#80b1d3"><a href="#115325" label="[11:53:25]">&lt;dannym&gt;</a></span><span class="message">#!/bin/sh</span></div><div class="line" id="115327"><span class="nick" style="color:#80b1d3"><a href="#115327" label="[11:53:27]">&lt;dannym&gt;</a></span><span class="message">exec guix environment --pure tcc --ad-hoc git -- &quot;$@&quot;</span></div><div class="line" id="115508"><span class="nick" style="color:#80b1d3"><a href="#115508" label="[11:55:08]">&lt;dannym&gt;</a></span><span class="message">I'm not sure how one is supposed to bootstrap Guix on Debian--what with all those guile libraries Debian doesn't have (guile-readline guile-json guile-zlib guile-lzlib); so I use the hack above O_O</span></div><div class="line" id="115527"><span class="nick" style="color:#80b1d3"><a href="#115527" label="[11:55:27]">&lt;dannym&gt;</a></span><span class="message">bootstrap Guix = compile Guix from git</span></div><div class="line" id="115731"><span class="nick" style="color:#80b1d3"><a href="#115731" label="[11:57:31]">&lt;dannym&gt;</a></span><span class="message">I used to do &quot;guix environment --pure guix ~/src/guix-master/guix/pre-inst-env guix environment --pure mes -- $@&quot; (not a missing newline), but that was not better either</span></div><div class="line" id="115737"><span class="nick" style="color:#80b1d3"><a href="#115737" label="[11:57:37]">&lt;dannym&gt;</a></span><span class="message">Anyway, it works, so whatever :)</span></div><div class="line" id="115746"><span class="nick" style="color:#6d2462"><a href="#115746" label="[11:57:46]">&lt;janneke&gt;</a></span><span class="message">ah, debian used to have everything, the compression libs are quite new</span></div><div class="line" id="115746"><span class="nick" style="color:#80b1d3"><a href="#115746" label="[11:57:46]">&lt;dannym&gt;</a></span><span class="message">*stops ranting*</span></div><div class="line" id="115829"><span class="nick" style="color:#6d2462"><a href="#115829" label="[11:58:29]">&lt;janneke&gt;</a></span><span class="message">i need to use the --pure on my x86_64 laptop -- seems not required for banana</span></div><div class="line" id="115840"><span class="nick" style="color:#6d2462"><a href="#115840" label="[11:58:40]">&lt;janneke&gt;</a></span><span class="message">btw, i configure'd mes like so:</span></div><div class="line" id="115842"><span class="nick" style="color:#6d2462"><a href="#115842" label="[11:58:42]">&lt;janneke&gt;</a></span><span class="message">GUILE=$(type -p guile) CC=arm-unknown-linux-gnueabihf-gcc ./configure</span></div><div class="line" id="115954"><span class="nick" style="color:#80b1d3"><a href="#115954" label="[11:59:54]">&lt;dannym&gt;</a></span><span class="message">On banana?  But how does that CC exist?</span></div><div class="line" id="120313"><span class="nick" style="color:#6d2462"><a href="#120313" label="[12:03:13]">&lt;janneke&gt;</a></span><span class="message">that's part of the mes environment</span></div><div class="line" id="120404"><span class="nick" style="color:#6d2462"><a href="#120404" label="[12:04:04]">&lt;janneke&gt;</a></span><span class="message">the mes environment (see guix/git/mes.scm) adds a 32bit cross-compiler</span></div><div class="line" id="120450"><span class="nick" style="color:#6d2462"><a href="#120450" label="[12:04:50]">&lt;janneke&gt;</a></span><span class="message">to build and test the mes c library using gcc</span></div><div class="line" id="120454"><span class="nick" style="color:#80b1d3"><a href="#120454" label="[12:04:54]">&lt;dannym&gt;</a></span><span class="message">I see.  Indeed :)</span></div><div class="line" id="120522"><span class="nick" style="color:#80b1d3"><a href="#120522" label="[12:05:22]">&lt;dannym&gt;</a></span><span class="message">*Edits CI build script*</span></div><div class="line" id="120525"><span class="nick" style="color:#80b1d3"><a href="#120525" label="[12:05:25]">&lt;dannym&gt;</a></span><span class="message">Thanks</span></div><div class="line" id="120550"><span class="nick" style="color:#80b1d3"><a href="#120550" label="[12:05:50]">&lt;dannym&gt;</a></span><span class="message">I'd always use ./configure without any options (Inside ./enter of mes-wip)--works well enough apparently</span></div><div class="line" id="120555"><span class="nick" style="color:#80b1d3"><a href="#120555" label="[12:05:55]">&lt;dannym&gt;</a></span><span class="message">But is maybe the wrong gcc :)</span></div><div class="line" id="120610"><span class="nick" style="color:#80b1d3"><a href="#120610" label="[12:06:10]">&lt;dannym&gt;</a></span><span class="message">*kicks on mes-wip CI job*</span></div><div class="line" id="120950"><span class="nick" style="color:#80b1d3"><a href="#120950" label="[12:09:50]">&lt;dannym&gt;</a></span><span class="message">With CC=arm-unknown-linux-gnueabihf-gcc now :)</span></div><div class="line" id="120954"><span class="nick" style="color:#80b1d3"><a href="#120954" label="[12:09:54]">&lt;dannym&gt;</a></span><span class="message">Btw the reason I planned to use &quot;~/src/guix-master/guix/pre-inst-env guix environment&quot; instead of just plain &quot;guix environment&quot; is in order to use a git clone of Guix for all that stuff because I did plan on editing the mes package definition to use a different mes.  Good to know that that maybe isn't necessary (... TODO: test if it is or isn't necessary) :)</span></div><div class="line" id="121012"><span class="nick" style="color:#80b1d3"><a href="#121012" label="[12:10:12]">&lt;dannym&gt;</a></span><span class="message">(Editing the mes package definition in that git working copy)</span></div><div class="line" id="121103"><span class="nick" style="color:#80b1d3"><a href="#121103" label="[12:11:03]">&lt;dannym&gt;</a></span><span class="message">In order to have tinycc use mes-wip</span></div><div class="line" id="122350"><span class="nick" style="color:#6d2462"><a href="#122350" label="[12:23:50]">&lt;janneke&gt;</a></span><span class="message">yeah, sure</span></div><div class="line" id="122425"><span class="nick" style="color:#6d2462"><a href="#122425" label="[12:24:25]">&lt;janneke&gt;</a></span><span class="message">once tcc starts to build, you want to switch over and build tcc-boot0, and need a guix git checkout for that</span></div><div class="line" id="122544"><span class="nick" style="color:#6d2462"><a href="#122544" label="[12:25:44]">&lt;janneke&gt;</a></span><span class="message">dannym: i suppose &quot;guix environment guix&quot; is the best way to bootstrap guix on debian</span></div><div class="line" id="122604"><span class="nick" style="color:#6d2462"><a href="#122604" label="[12:26:04]">&lt;janneke&gt;</a></span><span class="message">/bootstrap/build/</span></div><div class="line" id="122616"><span class="nick" style="color:#6d2462"><a href="#122616" label="[12:26:16]">&lt;janneke&gt;</a></span><span class="message">we don't need to bootstrap i guess...</span></div><div class="line" id="122701"><span class="nick" style="color:#8dd3c7"><a href="#122701" label="[12:27:01]">&lt;OriansJ`&gt;</a></span><span class="message">janneke:  0,0</span></div><div class="line" id="122809"><span class="nick" style="color:#8dd3c7"><a href="#122809" label="[12:28:09]">&lt;OriansJ`&gt;</a></span><span class="message">bootstrapping is the one thing we do here.</span></div><div class="line" id="122817"><span class="nick" style="color:#80b1d3"><a href="#122817" label="[12:28:17]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, but it's way too slow and also it adds stuff of the host guix to the environment--which I maybe don't want when building mes, tinycc etc.  I'll keep my workaround for the time being :)</span></div><div class="line" id="122851"><span class="nick" style="color:#8dd3c7"><a href="#122851" label="[12:28:51]">&lt;OriansJ`&gt;</a></span><span class="message">depending on guix to build guix is a bootstrapping problem.</span></div><div class="line" id="122903"><span class="nick" style="color:#80b1d3"><a href="#122903" label="[12:29:03]">&lt;dannym&gt;</a></span><span class="message">janneke: Slow because even with guix environment guix you'd still need another git clone guix environment pre-inst-env</span></div><div class="line" id="122905"><span class="nick" style="color:#80b1d3"><a href="#122905" label="[12:29:05]">&lt;dannym&gt;</a></span><span class="message">Inside</span></div><div class="line" id="122913"><span class="nick" style="color:#80b1d3"><a href="#122913" label="[12:29:13]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: Yeah :)</span></div><div class="line" id="123001"><span class="nick" style="color:#8dd3c7"><a href="#123001" label="[12:30:01]">&lt;OriansJ`&gt;</a></span><span class="message">if nothing else, we can punt leveraging mes-m2 and guile to provide the dependencies for bootstrapping of Mes.c</span></div><div class="line" id="123013"><span class="nick" style="color:#80b1d3"><a href="#123013" label="[12:30:13]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh arm-gen&quot; ... 4 != 8 ... unexpected size:8 ... took 8 min</span></div><div class="line" id="123021"><span class="nick" style="color:#80b1d3"><a href="#123021" label="[12:30:21]">&lt;dannym&gt;</a></span><span class="message">to finish</span></div><div class="line" id="123105"><span class="nick" style="color:#8dd3c7"><a href="#123105" label="[12:31:05]">&lt;OriansJ`&gt;</a></span><span class="message">eg put a version of MesCC that works with guile in mes-m2 and just depend on guile and mescc-tools from apt then add a script that does the build</span></div><div class="line" id="123206"><span class="nick" style="color:#8dd3c7"><a href="#123206" label="[12:32:06]">&lt;OriansJ`&gt;</a></span><span class="message">Then mes can be bootstrapped from mescc as the initial step and we can strip out the other complexity entirely.</span></div><div class="line" id="123249"><span class="nick" style="color:#6d2462"><a href="#123249" label="[12:32:49]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: hehe, yeah but that's just for development</span></div><div class="line" id="123305"><span class="nick" style="color:#80b1d3"><a href="#123305" label="[12:33:05]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh arm-link&quot; ... took 4 min to finish</span></div><div class="line" id="123316"><span class="nick" style="color:#80b1d3"><a href="#123316" label="[12:33:16]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: I agree that that would be much better for actual bootstrapping</span></div><div class="line" id="123353"><span class="nick" style="color:#80b1d3"><a href="#123353" label="[12:33:53]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: I took a lot of shortcuts in order to be able to develop on ARM now as opposed to in a year; among which is using Ubuntu ARMHF with guix installed from a tarball</span></div><div class="line" id="123410"><span class="nick" style="color:#8dd3c7"><a href="#123410" label="[12:34:10]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: setting up development should not be harder than bootstrapping, in fact it should be much easier by default.</span></div><div class="line" id="123426"><span class="nick" style="color:#80b1d3"><a href="#123426" label="[12:34:26]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: The rube goldberg contraption I cobbled together annoys me every time I use it ;)</span></div><div class="line" id="123550"><span class="nick" style="color:#8dd3c7"><a href="#123550" label="[12:35:50]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: rushing usually ends up forcing us to waste effort and delays the final bootstrap.</span></div><div class="line" id="123558"><span class="nick" style="color:#80b1d3"><a href="#123558" label="[12:35:58]">&lt;dannym&gt;</a></span><span class="message">(In my case, newer Linux kernels have a bug not supporting SATA drives on Banana Pi M2 Ultra, and sure I could spend the next month finding this stupid bug--but I'd rather do mes development.  I even bought a new Banana Pi M2U and a new drive; nope, SATA stops working after about 0.5 s)</span></div><div class="line" id="123732"><span class="nick" style="color:#80b1d3"><a href="#123732" label="[12:37:32]">&lt;dannym&gt;</a></span><span class="message">(I brought it up on the linux-sunxi ML, but so far no progress)</span></div><div class="line" id="123801"><span class="nick" style="color:#8dd3c7"><a href="#123801" label="[12:38:01]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: well good thing 8GB of eMMC is enough for everything</span></div><div class="line" id="123844"><span class="nick" style="color:#80b1d3"><a href="#123844" label="[12:38:44]">&lt;dannym&gt;</a></span><span class="message">On the other hand, using Banana Pi M2U's supplied images, SATA works at 230 MB/s (!!)</span></div><div class="line" id="123859"><span class="nick" style="color:#80b1d3"><a href="#123859" label="[12:38:59]">&lt;dannym&gt;</a></span><span class="message">So far for several months</span></div><div class="line" id="123955"><span class="nick" style="color:#8dd3c7"><a href="#123955" label="[12:39:55]">&lt;OriansJ`&gt;</a></span><span class="message">well in theory mescc should not care about the kernel version and just produce valid ELF binaries</span></div><div class="line" id="124022"><span class="nick" style="color:#8dd3c7"><a href="#124022" label="[12:40:22]">&lt;OriansJ`&gt;</a></span><span class="message">(also microSD cards come in 1TB sizes these days)</span></div><div class="line" id="124024"><span class="nick" style="color:#80b1d3"><a href="#124024" label="[12:40:24]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: Hah, yeah, I did development using the SD cards etc before.  I really don't like a repeat.</span></div><div class="line" id="124048"><span class="nick" style="color:#80b1d3"><a href="#124048" label="[12:40:48]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: It's way too slow and I don't miss the random minute-long pauses when it finally flushes buffers</span></div><div class="line" id="124105"><span class="nick" style="color:#80b1d3"><a href="#124105" label="[12:41:05]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: Maybe it's fine to use something else than Guix on that; but for Guix: no way</span></div><div class="line" id="124114"><span class="nick" style="color:#80b1d3"><a href="#124114" label="[12:41:14]">&lt;dannym&gt;</a></span><span class="message">I tried it</span></div><div class="line" id="124148"><span class="nick" style="color:#80b1d3"><a href="#124148" label="[12:41:48]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh arm-asm&quot; ... took 5 min to finish</span></div><div class="line" id="124213"><span class="nick" style="color:#80b1d3"><a href="#124213" label="[12:42:13]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh tccasm&quot; ... 4 != 8; took 6 min to finish</span></div><div class="line" id="124220"><span class="nick" style="color:#6d2462"><a href="#124220" label="[12:42:20]">&lt;janneke&gt;</a></span><span class="message">nice</span></div><div class="line" id="124236"><span class="nick" style="color:#8dd3c7"><a href="#124236" label="[12:42:36]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: I am guessing the 1MB/sec read/write speed probably made for a terriable experience when you had ++GB to write</span></div><div class="line" id="124349"><span class="nick" style="color:#80b1d3"><a href="#124349" label="[12:43:49]">&lt;dannym&gt;</a></span><span class="message">OriansJ`: Yeah, I even got Samsung UHD SD cards later on; those are a little faster when writing; but still... uuugh.  What is this? 1990?</span></div><div class="line" id="124419"><span class="nick" style="color:#80b1d3"><a href="#124419" label="[12:44:19]">&lt;dannym&gt;</a></span><span class="message">Meanwhile I can only say good things about SATA drives on R40 ARM CPUs.  They are awesome!</span></div><div class="line" id="124437"><span class="nick" style="color:#80b1d3"><a href="#124437" label="[12:44:37]">&lt;dannym&gt;</a></span><span class="message">I boot almost all of Ubuntu and Guix from SATA; only u-boot is still on the SD card</span></div><div class="line" id="124443"><span class="nick" style="color:#8dd3c7"><a href="#124443" label="[12:44:43]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: well just spinning rust performance levels; SSDs are a hard drug to give up</span></div><div class="line" id="124946"><span class="nick" style="color:#80b1d3"><a href="#124946" label="[12:49:46]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh libtcc&quot; ... only ONE 4 != 8; took 7 min to finish</span></div><div class="line" id="125106"><span class="nick" style="color:#6d2462"><a href="#125106" label="[12:51:06]">&lt;janneke&gt;</a></span><span class="message">dannym: if you ls -ltrF ~janneke/src/tinycc</span></div><div class="line" id="125126"><span class="nick" style="color:#6d2462"><a href="#125126" label="[12:51:26]">&lt;janneke&gt;</a></span><span class="message">you see what doit+build.sh did for me</span></div><div class="line" id="125132"><span class="nick" style="color:#8dd3c7"><a href="#125132" label="[12:51:32]">&lt;OriansJ`&gt;</a></span><span class="message">although if you are up for gigabit ethernet a sshfs filesystem is also an option if you need better disk performance with the added bonus of system image files</span></div><div class="line" id="125200"><span class="nick" style="color:#6d2462"><a href="#125200" label="[12:52:00]">&lt;janneke&gt;</a></span><span class="message">and why during development at least we build tcc with ONE_SOURCE, using guile</span></div><div class="line" id="125230"><span class="nick" style="color:#6d2462"><a href="#125230" label="[12:52:30]">&lt;janneke&gt;</a></span><span class="message">that takes about 6min for mes-tcc</span></div><div class="line" id="125242"><span class="nick" style="color:#80b1d3"><a href="#125242" label="[12:52:42]">&lt;dannym&gt;</a></span><span class="message">janneke: I see.  Thanks!  I'll try doit again after this run is done :)</span></div><div class="line" id="125318"><span class="nick" style="color:#6d2462"><a href="#125318" label="[12:53:18]">&lt;janneke&gt;</a></span><span class="message">i also found that: yay, we have a mes-tcc binary that runs --help!</span></div><div class="line" id="125336"><span class="nick" style="color:#6d2462"><a href="#125336" label="[12:53:36]">&lt;janneke&gt;</a></span><span class="message">that's sooo much better than my very first mescc-built tcc on x86</span></div><div class="line" id="125443"><span class="nick" style="color:#6d2462"><a href="#125443" label="[12:54:43]">&lt;janneke&gt;</a></span><span class="message">sadly, mes-tcc does not compile a simple .c file...</span></div><div class="line" id="125521"><span class="nick" style="color:#80b1d3"><a href="#125521" label="[12:55:21]">&lt;dannym&gt;</a></span><span class="message">mescc: failed: M1 --LittleEndian --architecture armv7l -f /home/dannym/src/mes-wip/mes/lib/arm-mes/arm.M1 -f tccpp.S -f tccgen.S -f tccelf.S -f tccrun.S -f arm-gen.S -f arm-link.S -f arm-asm.S -f tccasm.S -f libtcc.S -f tcc.S -o tccpp.o</span></div><div class="line" id="125533"><span class="nick" style="color:#80b1d3"><a href="#125533" label="[12:55:33]">&lt;dannym&gt;</a></span><span class="message">When building tcc</span></div><div class="line" id="125639"><span class="nick" style="color:#80b1d3"><a href="#125639" label="[12:56:39]">&lt;dannym&gt;</a></span><span class="message">(So, the non-ONE_SOURCE version doesn't work...)</span></div><div class="line" id="125640"><span class="nick" style="color:#80b1d3"><a href="#125640" label="[12:56:40]">&lt;dannym&gt;</a></span><span class="message">I see</span></div><div class="line" id="125644"><span class="nick" style="color:#8dd3c7"><a href="#125644" label="[12:56:44]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: well when debugging M1 errors; first check are the files you told it to read actually there and that you have permission to write the target file</span></div><div class="line" id="125710"><span class="nick" style="color:#6d2462"><a href="#125710" label="[12:57:10]">&lt;janneke&gt;</a></span><span class="message">dannym: it should!  not sure what's going on here</span></div><div class="line" id="125726"><span class="nick" style="color:#6d2462"><a href="#125726" label="[12:57:26]">&lt;janneke&gt;</a></span><span class="message">hmm...or at least, it could work</span></div><div class="line" id="125728"><span class="nick" style="color:#8dd3c7"><a href="#125728" label="[12:57:28]">&lt;OriansJ`&gt;</a></span><span class="message">everything else should produce a useful error message to debug the cause of the failure.</span></div><div class="line" id="125752"><span class="nick" style="color:#80b1d3"><a href="#125752" label="[12:57:52]">&lt;dannym&gt;</a></span><span class="message">I'm sure it's my fault for not defining something in arm.M1</span></div><div class="line" id="125757"><span class="nick" style="color:#80b1d3"><a href="#125757" label="[12:57:57]">&lt;dannym&gt;</a></span><span class="message">We'll see</span></div><div class="line" id="125820"><span class="nick" style="color:#6d2462"><a href="#125820" label="[12:58:20]">&lt;janneke&gt;</a></span><span class="message">yes, usually M1 problems are pretty trivial to find</span></div><div class="line" id="125821"><span class="nick" style="color:#8dd3c7"><a href="#125821" label="[12:58:21]">&lt;OriansJ`&gt;</a></span><span class="message">dannym: it'll say illegal other and show you what wasn't defined</span></div><div class="line" id="125913"><span class="nick" style="color:#80b1d3"><a href="#125913" label="[12:59:13]">&lt;dannym&gt;</a></span><span class="message">It's probably because M1 wasn't found</span></div><div class="line" id="125942"><span class="nick" style="color:#80b1d3"><a href="#125942" label="[12:59:42]">&lt;dannym&gt;</a></span><span class="message">I cannot actually invoke M1 in mes-tinycc's build environment.  Because I defined the build environment wrong</span></div><div class="line" id="125957"><span class="nick" style="color:#80b1d3"><a href="#125957" label="[12:59:57]">&lt;dannym&gt;</a></span><span class="message">Invoke it manually with full path and the arguments above works just fine</span></div><div class="line" id="130008"><span class="nick" style="color:#8dd3c7"><a href="#130008" label="[13:00:08]">&lt;OriansJ`&gt;</a></span><span class="message"> (Correction: Received invalid other;)</span></div><div class="line" id="130034"><span class="nick" style="color:#80b1d3"><a href="#130034" label="[13:00:34]">&lt;dannym&gt;</a></span><span class="message">Invoking</span></div><div class="line" id="130057"><span class="nick" style="color:#8dd3c7"><a href="#130057" label="[13:00:57]">&lt;OriansJ`&gt;</a></span><span class="message">MesCC should probably check for the existence of M1 and hex2 in its path and print a meaningful error message if not found.</span></div><div class="line" id="130148"><span class="nick" style="color:#8dd3c7"><a href="#130148" label="[13:01:48]">&lt;OriansJ`&gt;</a></span><span class="message">that way such errors are caught instantly and resolution can occur in a faster fashion.</span></div><div class="line" id="131114"><span class="nick" style="color:#80b1d3"><a href="#131114" label="[13:11:14]">&lt;dannym&gt;</a></span><span class="message">Aha, adding mescc-tools and guile@2.2 to my CI's tinycc build environment makes tinycc's &quot;doit&quot; work just fine, too.</span></div><div class="line" id="131502"><span class="nick" style="color:#80b1d3"><a href="#131502" label="[13:15:02]">&lt;dannym&gt;</a></span><span class="message">janneke: Status: &quot;sh cc.sh tcc&quot; ... took 6 min to finish; after that timing information it prints a lot of &quot;ERROR assign: cval.i = s-&gt;last_line_num   size[0]:8 != size[0]:4&quot;</span></div><div class="line" id="131550"><span class="nick" style="color:#80b1d3"><a href="#131550" label="[13:15:50]">&lt;dannym&gt;</a></span><span class="message">Then 1 min</span></div><div class="line" id="131557"><span class="nick" style="color:#80b1d3"><a href="#131557" label="[13:15:57]">&lt;dannym&gt;</a></span><span class="message">Then + files=tcc.S</span></div><div class="line" id="131601"><span class="nick" style="color:#80b1d3"><a href="#131601" label="[13:16:01]">&lt;dannym&gt;</a></span><span class="message">+ mes-source/pre-inst-env mescc -g -o mes-tcc -L mes-source/mescc-lib -L mes-source/lib tcc.S -l c+tcc</span></div><div class="line" id="131625"><span class="nick" style="color:#80b1d3"><a href="#131625" label="[13:16:25]">&lt;dannym&gt;</a></span><span class="message">+ ./mes-tcc -I mes-source/include -I mes-source/include/linux/arm -static -nostdlib -nostdinc -c crt1.c</span></div><div class="line" id="131625"><span class="nick" style="color:#80b1d3"><a href="#131625" label="[13:16:25]">&lt;dannym&gt;</a></span><span class="message">build.sh: line 131:  8073 Segmentation fault      (core dumped) $CC $CPPFLAGS $CFLAGS -static -nostdlib -nostdinc -c crt$i.c</span></div><div class="line" id="131635"><span class="nick" style="color:#80b1d3"><a href="#131635" label="[13:16:35]">&lt;dannym&gt;</a></span><span class="message">Finally I'm where you are :)</span></div><div class="line" id="131939"><span class="nick" style="color:#6d2462"><a href="#131939" label="[13:19:39]">&lt;janneke&gt;</a></span><span class="message">dannym: \o/</span></div><div class="line" id="131956"><span class="nick" style="color:#6d2462"><a href="#131956" label="[13:19:56]">&lt;janneke&gt;</a></span><span class="message">and...with a lot of understanding of all the quirks :)</span></div><div class="line" id="132605"><span class="nick" style="color:#80b1d3"><a href="#132605" label="[13:26:05]">&lt;dannym&gt;</a></span><span class="message">Trying to use actual guix master to configure, I get Missing dependencies: guild</span></div><div class="line" id="132610"><span class="nick" style="color:#80b1d3"><a href="#132610" label="[13:26:10]">&lt;dannym&gt;</a></span><span class="message">configure mes-wip</span></div><div class="line" id="132617"><span class="nick" style="color:#80b1d3"><a href="#132617" label="[13:26:17]">&lt;dannym&gt;</a></span><span class="message">CI job just faled</span></div><div class="line" id="132620"><span class="nick" style="color:#80b1d3"><a href="#132620" label="[13:26:20]">&lt;dannym&gt;</a></span><span class="message">failed</span></div><div class="line" id="133855"><span class="nick" style="color:#6d2462"><a href="#133855" label="[13:38:55]">&lt;janneke&gt;</a></span><span class="message">did you add guile@2?</span></div><div class="line" id="133856"><span class="nick" style="color:#6d2462"><a href="#133856" label="[13:38:56]">&lt;janneke&gt;</a></span><span class="message">=&gt; guix environment -l guix.scm --ad-hoc guile@2.2</span></div><div class="line" id="133938"><span class="nick" style="color:#6d2462"><a href="#133938" label="[13:39:38]">&lt;janneke&gt;</a></span><span class="message">we should actually make mes buildable with guile-3.0, esp. for debian</span></div><div class="line" id="134330"><span class="nick" style="color:#80b1d3"><a href="#134330" label="[13:43:30]">&lt;dannym&gt;</a></span><span class="message">The reason was me adding GUILE=&quot;(type -p guile)&quot;</span></div><div class="line" id="134334"><span class="nick" style="color:#80b1d3"><a href="#134334" label="[13:43:34]">&lt;dannym&gt;</a></span><span class="message">works just fine when removing it again</span></div><div class="line" id="134337"><span class="nick" style="color:#80b1d3"><a href="#134337" label="[13:43:37]">&lt;dannym&gt;</a></span><span class="message">also with guix master</span></div><div class="line" id="134403"><span class="nick" style="color:#6d2462"><a href="#134403" label="[13:44:03]">&lt;janneke&gt;</a></span><span class="message">great</span></div><div class="line" id="134412"><span class="nick" style="color:#80b1d3"><a href="#134412" label="[13:44:12]">&lt;dannym&gt;</a></span><span class="message">(no idea why)</span></div><div class="line" id="134414"><span class="nick" style="color:#6d2462"><a href="#134414" label="[13:44:14]">&lt;janneke&gt;</a></span><span class="message">ah yes, i see</span></div><div class="line" id="134443"><span class="nick" style="color:#6d2462"><a href="#134443" label="[13:44:43]">&lt;janneke&gt;</a></span><span class="message">well, guix puts guile-3.0 in front, i guess</span></div><div class="line" id="134714"><span class="nick" style="color:#80b1d3"><a href="#134714" label="[13:47:14]">&lt;dannym&gt;</a></span><span class="message">(gdb) r</span></div><div class="line" id="134714"><span class="nick" style="color:#80b1d3"><a href="#134714" label="[13:47:14]">&lt;dannym&gt;</a></span><span class="message">Starting program: /home/dannym/src/mes-tinycc/tinycc/mes-tcc -I mes-source/include -I mes-source/include/linux/arm -static -nostdlib -nostdinc -c crt1.c</span></div><div class="line" id="134714"><span class="nick" style="color:#80b1d3"><a href="#134714" label="[13:47:14]">&lt;dannym&gt;</a></span><span class="message">Program received signal SIGSEGV, Segmentation fault.</span></div><div class="line" id="134714"><span class="nick" style="color:#80b1d3"><a href="#134714" label="[13:47:14]">&lt;dannym&gt;</a></span><span class="message">0x22632e30 in ?? ()</span></div><div class="line" id="134715"><span class="nick" style="color:#80b1d3"><a href="#134715" label="[13:47:15]">&lt;dannym&gt;</a></span><span class="message">(gdb) bt</span></div><div class="line" id="134717"><span class="nick" style="color:#80b1d3"><a href="#134717" label="[13:47:17]">&lt;dannym&gt;</a></span><span class="message">#0  0x22632e30 in ?? ()</span></div><div class="line" id="134719"><span class="nick" style="color:#80b1d3"><a href="#134719" label="[13:47:19]">&lt;dannym&gt;</a></span><span class="message">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span></div><div class="line" id="134740"><span class="nick" style="color:#80b1d3"><a href="#134740" label="[13:47:40]">&lt;dannym&gt;</a></span><span class="message">argh!  No working debug info</span></div><div class="line" id="134750"><span class="nick" style="color:#6d2462"><a href="#134750" label="[13:47:50]">&lt;janneke&gt;</a></span><span class="message">yeah -- sorry :-)</span></div><div class="line" id="134811"><span class="nick" style="color:#80b1d3"><a href="#134811" label="[13:48:11]">&lt;dannym&gt;</a></span><span class="message">I can't even seem to &quot;display asm&quot;, it needs says it debug info for that too</span></div><div class="line" id="134813"><span class="nick" style="color:#80b1d3"><a href="#134813" label="[13:48:13]">&lt;dannym&gt;</a></span><span class="message">needs</span></div><div class="line" id="134819"><span class="nick" style="color:#6d2462"><a href="#134819" label="[13:48:19]">&lt;janneke&gt;</a></span><span class="message">we have minimal debug info (we could/should have a function call stack only)</span></div><div class="line" id="134846"><span class="nick" style="color:#6d2462"><a href="#134846" label="[13:48:46]">&lt;janneke&gt;</a></span><span class="message">yes...so that's where the &quot;lotsa debug printing&quot; commit comes in</span></div><div class="line" id="134943"><span class="nick" style="color:#6d2462"><a href="#134943" label="[13:49:43]">&lt;janneke&gt;</a></span><span class="message">i have been using that to bisect problems in mes-tcc</span></div><div class="line" id="135050"><span class="nick" style="color:#6d2462"><a href="#135050" label="[13:50:50]">&lt;janneke&gt;</a></span><span class="message">by comparing the trace output produced from arm-unknown-linux-gnueabihf-tcc vs mes-tcc runs</span></div><div class="line" id="135132"><span class="nick" style="color:#6d2462"><a href="#135132" label="[13:51:32]">&lt;janneke&gt;</a></span><span class="message">another approach would be to actually produce debug info with mescc+M1</span></div><div class="line" id="135723"><span class="nick" style="color:#80b1d3"><a href="#135723" label="[13:57:23]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070bf8 &lt;strstart+56&gt;:</span></div><div class="line" id="135723"><span class="nick" style="color:#80b1d3"><a href="#135723" label="[13:57:23]">&lt;dannym&gt;</a></span><span class="message">    ldr r9, [pc, #8]    ; 0x1070c08 &lt;strstart+72&gt;</span></div><div class="line" id="135723"><span class="nick" style="color:#80b1d3"><a href="#135723" label="[13:57:23]">&lt;dannym&gt;</a></span><span class="message">0x01070bfc in strstart ()</span></div><div class="line" id="135723"><span class="nick" style="color:#80b1d3"><a href="#135723" label="[13:57:23]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070bfc &lt;strstart+60&gt;:     add     r9, r9, r11</span></div><div class="line" id="135723"><span class="nick" style="color:#80b1d3"><a href="#135723" label="[13:57:23]">&lt;dannym&gt;</a></span><span class="message">0x01070c00 in strstart ()</span></div><div class="line" id="135724"><span class="nick" style="color:#80b1d3"><a href="#135724" label="[13:57:24]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070c00 &lt;strstart+64&gt;:     str     r0, [r9]</span></div><div class="line" id="135725"><span class="nick" style="color:#80b1d3"><a href="#135725" label="[13:57:25]">&lt;dannym&gt;</a></span><span class="message">0x01070c04 in strstart ()</span></div><div class="line" id="135727"><span class="nick" style="color:#80b1d3"><a href="#135727" label="[13:57:27]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070c04 &lt;strstart+68&gt;:     b       0x1070c0c &lt;strstart+76&gt;</span></div><div class="line" id="135729"><span class="nick" style="color:#80b1d3"><a href="#135729" label="[13:57:29]">&lt;dannym&gt;</a></span><span class="message">0x01070c0c in strstart ()</span></div><div class="line" id="135731"><span class="nick" style="color:#80b1d3"><a href="#135731" label="[13:57:31]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070c0c &lt;strstart+76&gt;:     cmp     r0, #0</span></div><div class="line" id="135733"><span class="nick" style="color:#80b1d3"><a href="#135733" label="[13:57:33]">&lt;dannym&gt;</a></span><span class="message">0x01070c10 in strstart ()</span></div><div class="line" id="135735"><span class="nick" style="color:#80b1d3"><a href="#135735" label="[13:57:35]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070c10 &lt;strstart+80&gt;:     b       0x1070ccc &lt;strstart+268&gt;</span></div><div class="line" id="135737"><span class="nick" style="color:#80b1d3"><a href="#135737" label="[13:57:37]">&lt;dannym&gt;</a></span><span class="message">0x01070ccc in strstart ()</span></div><div class="line" id="135739"><span class="nick" style="color:#80b1d3"><a href="#135739" label="[13:57:39]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070ccc &lt;strstart+268&gt;:    ldr     r0, [r11, #-8]</span></div><div class="line" id="135741"><span class="nick" style="color:#80b1d3"><a href="#135741" label="[13:57:41]">&lt;dannym&gt;</a></span><span class="message">0x01070cd0 in strstart ()</span></div><div class="line" id="135743"><span class="nick" style="color:#80b1d3"><a href="#135743" label="[13:57:43]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070cd0 &lt;strstart+272&gt;:    ldrsb   r0, [r0]</span></div><div class="line" id="135747"><span class="nick" style="color:#80b1d3"><a href="#135747" label="[13:57:47]">&lt;dannym&gt;</a></span><span class="message">0x01070cd4 in strstart ()</span></div><div class="line" id="135749"><span class="nick" style="color:#80b1d3"><a href="#135749" label="[13:57:49]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070cd4 &lt;strstart+276&gt;:    and     r0, r0, #255    ; 0xff</span></div><div class="line" id="135751"><span class="nick" style="color:#80b1d3"><a href="#135751" label="[13:57:51]">&lt;dannym&gt;</a></span><span class="message">0x01070cd8 in strstart ()</span></div><div class="line" id="135753"><span class="nick" style="color:#80b1d3"><a href="#135753" label="[13:57:53]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070cd8 &lt;strstart+280&gt;:    sxtb    r0, r0</span></div><div class="line" id="135755"><span class="nick" style="color:#80b1d3"><a href="#135755" label="[13:57:55]">&lt;dannym&gt;</a></span><span class="message">0x01070cdc in strstart ()</span></div><div class="line" id="135757"><span class="nick" style="color:#80b1d3"><a href="#135757" label="[13:57:57]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1070cdc &lt;strstart+284&gt;:    cmp     r0, #0</span></div><div class="line" id="135803"><span class="nick" style="color:#80b1d3"><a href="#135803" label="[13:58:03]">&lt;dannym&gt;</a></span><span class="message">Done by gdb; set logging on; set height 0; while 1; x/i $pc; stepi; end</span></div><div class="line" id="135811"><span class="nick" style="color:#80b1d3"><a href="#135811" label="[13:58:11]">&lt;dannym&gt;</a></span><span class="message">Still isn't crashed</span></div><div class="line" id="140130"><span class="nick" style="color:#6d2462"><a href="#140130" label="[14:01:30]">&lt;janneke&gt;</a></span><span class="message">nice</span></div><div class="line" id="144430"><span class="nick" style="color:#8dd3c7"><a href="#144430" label="[14:44:30]">&lt;OriansJ`&gt;</a></span><span class="message"> janneke: if you just use blood-elf; you'll have full debug info for gdb and bt will produce useful information at the crash</span></div><div class="line" id="144551"><span class="nick" style="color:#8dd3c7"><a href="#144551" label="[14:45:51]">&lt;OriansJ`&gt;</a></span><span class="message">as blood-elf is in mescc-tools and will allow you to pair down your elf-headers as well</span></div><div class="line" id="144931"><span class="nick" style="color:#6d2462"><a href="#144931" label="[14:49:31]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: sure, mescc -g uses blood-elf</span></div><div class="line" id="144939"><span class="nick" style="color:#6d2462"><a href="#144939" label="[14:49:39]">&lt;janneke&gt;</a></span><span class="message">but that's only the call stack, right?</span></div><div class="line" id="145020"><span class="nick" style="color:#6d2462"><a href="#145020" label="[14:50:20]">&lt;janneke&gt;</a></span><span class="message">it seems that dannym either got a corrupt stack or did not compile with -g</span></div><div class="line" id="150317"><span class="nick" style="color:#8dd3c7"><a href="#150317" label="[15:03:17]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: it is everything with a label not prefixed by _</span></div><div class="line" id="150347"><span class="nick" style="color:#8dd3c7"><a href="#150347" label="[15:03:47]">&lt;OriansJ`&gt;</a></span><span class="message">so data, variables and every single function label you use.</span></div><div class="line" id="150614"><span class="nick" style="color:#8dd3c7"><a href="#150614" label="[15:06:14]">&lt;OriansJ`&gt;</a></span><span class="message">you just need to remember --64 on 64bit targets</span></div><div class="line" id="151207"><span class="nick" style="color:#8dd3c7"><a href="#151207" label="[15:12:07]">&lt;OriansJ`&gt;</a></span><span class="message">in fact the exact line is: if(('_' == i-&gt;name[0]) &amp;&amp; !match(entry, i-&gt;name)) file_print(&quot;!2\t# st_other (hidden)\n&quot;, output);</span></div><div class="line" id="151538"><span class="nick" style="color:#8dd3c7"><a href="#151538" label="[15:15:38]">&lt;OriansJ`&gt;</a></span><span class="message">if you were to do: readelf -a bin/M2-Planet | less you'll notice being prefixed by _ isn't enough to be hidden but rather needs to be explicitly hidden with --entry _$NAME</span></div><div class="line" id="151707"><span class="nick" style="color:#8dd3c7"><a href="#151707" label="[15:17:07]">&lt;OriansJ`&gt;</a></span><span class="message">hence why the invokation on AMD64 is: blood-elf --64 -f test/test1000/cc.M1 --entry _start -o test/test1000/cc-footer.M1 (to hide _start but show _begin_*)</span></div><div class="line" id="160419"><span class="nick" style="color:#80b1d3"><a href="#160419" label="[16:04:19]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036a64 &lt;expr_const+84&gt;:   cmp     r0, #0</span></div><div class="line" id="160419"><span class="nick" style="color:#80b1d3"><a href="#160419" label="[16:04:19]">&lt;dannym&gt;</a></span><span class="message">0x01036a68 in expr_const ()</span></div><div class="line" id="160419"><span class="nick" style="color:#80b1d3"><a href="#160419" label="[16:04:19]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036a68 &lt;expr_const+88&gt;:   mov     r0, #0</span></div><div class="line" id="160419"><span class="nick" style="color:#80b1d3"><a href="#160419" label="[16:04:19]">&lt;dannym&gt;</a></span><span class="message">0x01036a6c in expr_const ()</span></div><div class="line" id="160419"><span class="nick" style="color:#80b1d3"><a href="#160419" label="[16:04:19]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036a6c &lt;expr_const+92&gt;:   moveq   r0, #1</span></div><div class="line" id="160420"><span class="nick" style="color:#80b1d3"><a href="#160420" label="[16:04:20]">&lt;dannym&gt;</a></span><span class="message">0x01036a70 in expr_const ()</span></div><div class="line" id="160422"><span class="nick" style="color:#80b1d3"><a href="#160422" label="[16:04:22]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036a70 &lt;expr_const+96&gt;:   bne     0x1036abc &lt;expr_const+172&gt;</span></div><div class="line" id="160424"><span class="nick" style="color:#80b1d3"><a href="#160424" label="[16:04:24]">&lt;dannym&gt;</a></span><span class="message">0x01036abc in expr_const ()</span></div><div class="line" id="160426"><span class="nick" style="color:#80b1d3"><a href="#160426" label="[16:04:26]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036abc &lt;expr_const+172&gt;:  ldr     r0, [r11, #-4]</span></div><div class="line" id="160428"><span class="nick" style="color:#80b1d3"><a href="#160428" label="[16:04:28]">&lt;dannym&gt;</a></span><span class="message">0x01036ac0 in expr_const ()</span></div><div class="line" id="160430"><span class="nick" style="color:#80b1d3"><a href="#160430" label="[16:04:30]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036ac0 &lt;expr_const+176&gt;:  mov     sp, r11</span></div><div class="line" id="160432"><span class="nick" style="color:#80b1d3"><a href="#160432" label="[16:04:32]">&lt;dannym&gt;</a></span><span class="message">0x01036ac4 in expr_const ()</span></div><div class="line" id="160434"><span class="nick" style="color:#80b1d3"><a href="#160434" label="[16:04:34]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036ac4 &lt;expr_const+180&gt;:  pop     {r11}           ; (ldr r11, [sp], #4)</span></div><div class="line" id="160436"><span class="nick" style="color:#80b1d3"><a href="#160436" label="[16:04:36]">&lt;dannym&gt;</a></span><span class="message">0x01036ac8 in expr_const ()</span></div><div class="line" id="160438"><span class="nick" style="color:#80b1d3"><a href="#160438" label="[16:04:38]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036ac8 &lt;expr_const+184&gt;:  pop     {lr}            ; (ldr lr, [sp], #4)</span></div><div class="line" id="160440"><span class="nick" style="color:#80b1d3"><a href="#160440" label="[16:04:40]">&lt;dannym&gt;</a></span><span class="message">0x01036acc in expr_const ()</span></div><div class="line" id="160442"><span class="nick" style="color:#80b1d3"><a href="#160442" label="[16:04:42]">&lt;dannym&gt;</a></span><span class="message">=&gt; 0x1036acc &lt;expr_const+188&gt;:  mov     pc, lr</span></div><div class="line" id="160446"><span class="nick" style="color:#80b1d3"><a href="#160446" label="[16:04:46]">&lt;dannym&gt;</a></span><span class="message">0x01036acc in expr_const ()</span></div><div class="line" id="160448"><span class="nick" style="color:#80b1d3"><a href="#160448" label="[16:04:48]">&lt;dannym&gt;</a></span><span class="message">Warning:</span></div><div class="line" id="160450"><span class="nick" style="color:#80b1d3"><a href="#160450" label="[16:04:50]">&lt;dannym&gt;</a></span><span class="message">Cannot insert breakpoint 0.</span></div><div class="line" id="160452"><span class="nick" style="color:#80b1d3"><a href="#160452" label="[16:04:52]">&lt;dannym&gt;</a></span><span class="message">Cannot access memory at address 0x22632e30</span></div><div class="line" id="160623"><span class="nick" style="color:#80b1d3"><a href="#160623" label="[16:06:23]">&lt;dannym&gt;</a></span><span class="message">I don't know whether I compiled with &quot;-g&quot;... I just used the tinycc build shell scripts.</span></div><div class="line" id="160636"><span class="nick" style="color:#80b1d3"><a href="#160636" label="[16:06:36]">&lt;dannym&gt;</a></span><span class="message">sp             0x122ccd8        0x122ccd8</span></div><div class="line" id="160710"><span class="nick" style="color:#80b1d3"><a href="#160710" label="[16:07:10]">&lt;dannym&gt;</a></span><span class="message">But as you can see above, some debug info is there, otherwise I wouldn't get the names inside &lt;&gt; either</span></div><div class="line" id="160731"><span class="nick" style="color:#80b1d3"><a href="#160731" label="[16:07:31]">&lt;dannym&gt;</a></span><span class="message">Or it's using the externals as a fallback--who knows</span></div><div class="line" id="161035"><span class="nick" style="color:#6d2462"><a href="#161035" label="[16:10:35]">&lt;janneke&gt;</a></span><span class="message">dannym: i get this:</span></div><div class="line" id="161044"><span class="nick" style="color:#6d2462"><a href="#161044" label="[16:10:44]">&lt;janneke&gt;</a></span><span class="message">gdb ./mes-tcc</span></div><div class="line" id="161100"><span class="nick" style="color:#6d2462"><a href="#161100" label="[16:11:00]">&lt;janneke&gt;</a></span><span class="message">Reading symbols from ./mes-tcc...(no debugging symbols found)...done.</span></div><div class="line" id="161100"><span class="nick" style="color:#6d2462"><a href="#161100" label="[16:11:00]">&lt;janneke&gt;</a></span><span class="message">(gdb) r  -c mes/scaffold/hello.c</span></div><div class="line" id="161118"><span class="nick" style="color:#6d2462"><a href="#161118" label="[16:11:18]">&lt;janneke&gt;</a></span><span class="message">Program received signal SIGSEGV, Segmentation fault.</span></div><div class="line" id="161118"><span class="nick" style="color:#6d2462"><a href="#161118" label="[16:11:18]">&lt;janneke&gt;</a></span><span class="message">0x01025074 in gen_cast ()</span></div><div class="line" id="161118"><span class="nick" style="color:#6d2462"><a href="#161118" label="[16:11:18]">&lt;janneke&gt;</a></span><span class="message">(gdb) bt</span></div><div class="line" id="161120"><span class="nick" style="color:#6d2462"><a href="#161120" label="[16:11:20]">&lt;janneke&gt;</a></span><span class="message">#0  0x01025074 in gen_cast ()</span></div><div class="line" id="161122"><span class="nick" style="color:#6d2462"><a href="#161122" label="[16:11:22]">&lt;janneke&gt;</a></span><span class="message">#1  0x01034d08 in expr_land ()</span></div><div class="line" id="161125"><span class="nick" style="color:#6d2462"><a href="#161125" label="[16:11:25]">&lt;janneke&gt;</a></span><span class="message">#2  0xbefeff0c in ?? ()</span></div><div class="line" id="161127"><span class="nick" style="color:#6d2462"><a href="#161127" label="[16:11:27]">&lt;janneke&gt;</a></span><span class="message">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span></div><div class="line" id="161316"><span class="nick" style="color:#80b1d3"><a href="#161316" label="[16:13:16]">&lt;dannym&gt;</a></span><span class="message">Is that the gdb from guix of from Debian?</span></div><div class="line" id="161449"><span class="nick" style="color:#6d2462"><a href="#161449" label="[16:14:49]">&lt;janneke&gt;</a></span><span class="message">from debian</span></div><div class="line" id="161518"><span class="nick" style="color:#6d2462"><a href="#161518" label="[16:15:18]">&lt;janneke&gt;</a></span><span class="message">and with the mes-tcc from 'doit', on banana</span></div><div class="line" id="161646"><span class="nick" style="color:#234e69"><a href="#161646" label="[16:16:46]">*</a></span><span class="message">janneke goes to apply lotsa debug printing and see</span></div><div class="line" id="161831"><span class="nick" style="color:#6d2462"><a href="#161831" label="[16:18:31]">&lt;janneke&gt;</a></span><span class="message">hmm, that needs a patch for arm :-)</span></div><div class="line" id="162600"><span class="nick" style="color:#6d2462"><a href="#162600" label="[16:26:00]">&lt;janneke&gt;</a></span><span class="message">ah, #if !__x86_64__</span></div><div class="line" id="163123"><span class="nick" style="color:#6d2462"><a href="#163123" label="[16:31:23]">&lt;janneke&gt;</a></span><span class="message">in libtcc.c</span></div><div class="line" id="174815"><span class="nick" style="color:#6d2462"><a href="#174815" label="[17:48:15]">&lt;janneke&gt;</a></span><span class="message">dannym: i've added two more WIP patches to tcc's mes-0.23</span></div><div class="line" id="174834"><span class="nick" style="color:#6d2462"><a href="#174834" label="[17:48:34]">&lt;janneke&gt;</a></span><span class="message">dannym: and got first result for a test run diff</span></div><div class="line" id="174839"><span class="nick" style="color:#6d2462"><a href="#174839" label="[17:48:39]">&lt;janneke&gt;</a></span><span class="message">dannym: diff -y 1 2 &gt; first-result</span></div><div class="line" id="174931"><span class="nick" style="color:#6d2462"><a href="#174931" label="[17:49:31]">&lt;janneke&gt;</a></span><span class="message">dannym: see banana:~janneke/src/tinycc/first-result</span></div><div class="line" id="174943"><span class="nick" style="color:#234e69"><a href="#174943" label="[17:49:43]">*</a></span><span class="message">janneke is afk for a bit</span></div><div class="line" id="175013"><span class="nick" style="color:#6d2462"><a href="#175013" label="[17:50:13]">&lt;janneke&gt;</a></span><span class="message">dannym: oh, the &quot;lotsa debug printing&quot; commits need to be reverted again, of course</span></div><div class="line" id="175055"><span class="nick" style="color:#80b1d3"><a href="#175055" label="[17:50:55]">&lt;dannym&gt;</a></span><span class="message">Yeah.  Thanks :)</span></div><div class="line" id="175150"><span class="nick" style="color:#80b1d3"><a href="#175150" label="[17:51:50]">&lt;dannym&gt;</a></span><span class="message">Which is 1, which is 2 :)</span></div><div class="line" id="193318"><span class="nick" style="color:#6d2462"><a href="#193318" label="[19:33:18]">&lt;janneke&gt;</a></span><span class="message">dannym: oh oops, see compile.sh, link.sh: 32 bit gcc = 1, mescc = 2</span></div><div class="line" id="211810"><span class="nick" style="color:#80b1d3"><a href="#211810" label="[21:18:10]">&lt;dannym&gt;</a></span><span class="message">Ok, mes-wip on banana CI with the new change CC=arm-unknown-linux-gnueabihf-gcc just finished--it still works fine</span></div><div class="line" id="211822"><span class="nick" style="color:#80b1d3"><a href="#211822" label="[21:18:22]">&lt;dannym&gt;</a></span><span class="message">building</span></div><div class="line" id="211827"><span class="nick" style="color:#80b1d3"><a href="#211827" label="[21:18:27]">&lt;dannym&gt;</a></span><span class="message">and testing</span></div><div class="line" id="220706"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><br /></div></body></html>