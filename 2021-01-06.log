<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000739"><span class="nick" style="color:#389600"><a href="#000739" label="[00:07:39]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I've got changes up for the first bit of the C preprocessor for M2-Planet <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/10">https://github.com/oriansj/M2-Planet/pull/10</a> </span></div><div class="line" id="001002"><span class="nick" style="color:#389600"><a href="#001002" label="[00:10:02]">&lt;yt_&gt;</a></span><span class="message">I've tested the bootstrap up to mes-m2, but not tested any of the conditional inclusion in anger, so it might still be a bit buggy.</span></div><div class="line" id="001153"><span class="nick" style="color:#389600"><a href="#001153" label="[00:11:53]">&lt;yt_&gt;</a></span><span class="message">and thanks to deesix for spotting some of the M2-Planet compatibility issues in an earlier draft.</span></div><div class="line" id="003234"><span class="nick" style="color:#8dd3c7"><a href="#003234" label="[00:32:34]">&lt;stikonas&gt;</a></span><span class="message">ok, I think copying mes's config.h will be much easier than fixing escaping in kaem.c</span></div><div class="line" id="004053"><span class="nick" style="color:#2e2a4a"><a href="#004053" label="[00:40:53]">&lt;fossy&gt;</a></span><span class="message">wait what it shouldn't eat the next character</span></div><div class="line" id="004100"><span class="nick" style="color:#2e2a4a"><a href="#004100" label="[00:41:00]">&lt;fossy&gt;</a></span><span class="message">just copy it for now and i'll fix kaem.c</span></div><div class="line" id="004116"><span class="nick" style="color:#2e2a4a"><a href="#004116" label="[00:41:16]">&lt;fossy&gt;</a></span><span class="message">it is meant to just eat the \</span></div><div class="line" id="004816"><span class="nick" style="color:#8dd3c7"><a href="#004816" label="[00:48:16]">&lt;stikonas&gt;</a></span><span class="message">fossy: yeah, I'm already testing the copy stuff, should soon be done</span></div><div class="line" id="004942"><span class="nick" style="color:#8dd3c7"><a href="#004942" label="[00:49:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'm also removing the &quot;second&quot; pass of mes build because now we actually build the first one with M2-Planet, so the mescc build is already the second pass. And I checked it's a fixed point anyway, file hash already matches</span></div><div class="line" id="005644"><span class="nick" style="color:#8dd3c7"><a href="#005644" label="[00:56:44]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/2">https://github.com/fosslinux/live-bootstrap/pull/2</a> </span></div><div class="line" id="005703"><span class="nick" style="color:#8dd3c7"><a href="#005703" label="[00:57:03]">&lt;stikonas&gt;</a></span><span class="message">got Hello,Mes!</span></div><div class="line" id="010540"><span class="nick" style="color:#80b1d3"><a href="#010540" label="[01:05:40]">&lt;rain1&gt;</a></span><span class="message">yay!</span></div><div class="line" id="011609"><span class="nick" style="color:#8dd3c7"><a href="#011609" label="[01:16:09]">&lt;stikonas&gt;</a></span><span class="message">this is with just kaem :), no other shell at all</span></div><div class="line" id="013446"><span class="nick" style="color:#6d2462"><a href="#013446" label="[01:34:46]">&lt;Hagfish&gt;</a></span><span class="message">excellent work</span></div><div class="line" id="013513"><span class="nick" style="color:#234e69"><a href="#013513" label="[01:35:13]">&lt;xentrac&gt;</a></span><span class="message">congratulations, stikonas!</span></div><div class="line" id="013553"><span class="nick" style="color:#6d2462"><a href="#013553" label="[01:35:53]">&lt;Hagfish&gt;</a></span><span class="message">as a slight distraction, i see that last month the results of the 2020 &quot;Underhanded Solidity Code Contest&quot; were announced</span></div><div class="line" id="013610"><span class="nick" style="color:#6d2462"><a href="#013610" label="[01:36:10]">&lt;Hagfish&gt;</a></span><span class="message">see if you can spot the trick on line 65 of this file from the winning entry:</span></div><div class="line" id="013612"><span class="nick" style="color:#6d2462"><a href="#013612" label="[01:36:12]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ethereum/solidity-underhanded-contest/blob/master/submissions_2020/submission11_RobertMCForster/contracts/TimelockUpgrade.sol#L65">https://github.com/ethereum/solidity-underhanded-contest/blob/master/submissions_2020/submission11_RobertMCForster/contracts/TimelockUpgrade.sol#L65</a> </span></div><div class="line" id="014541"><span class="nick" style="color:#2e2a4a"><a href="#014541" label="[01:45:41]">&lt;fossy&gt;</a></span><span class="message">stikonas: thanks very much! i'll have tcc done probably today, debugging a compilation error with mes, but since mes dosen't give line numbers have to use MES_DEBUG=5... which is quite slow</span></div><div class="line" id="014557"><span class="nick" style="color:#2e2a4a"><a href="#014557" label="[01:45:57]">&lt;fossy&gt;</a></span><span class="message">janneke: there is no way for mescc to give me line numbers for compiling, right?</span></div><div class="line" id="024008"><span class="nick" style="color:#8dd3c7"><a href="#024008" label="[02:40:08]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've pushed an updated PR but I can only test it tomorrow, going to bed now</span></div><div class="line" id="024205"><span class="nick" style="color:#2e2a4a"><a href="#024205" label="[02:42:05]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: completely fine, no rush at all</span></div><div class="line" id="031842"><span class="nick" style="color:#6c3d55"><a href="#031842" label="[03:18:42]">&lt;OriansJ&gt;</a></span><span class="message">yt_: looking at your C preprocessor code changes now</span></div><div class="line" id="032159"><span class="nick" style="color:#6c3d55"><a href="#032159" label="[03:21:59]">&lt;OriansJ&gt;</a></span><span class="message">we can be stricter on input in M2-Planet than C requires yt. So we can require no whitespace between &quot;#&quot; and &quot;if&quot;</span></div><div class="line" id="032810"><span class="nick" style="color:#6c3d55"><a href="#032810" label="[03:28:10]">&lt;OriansJ&gt;</a></span><span class="message">yt_: just a thought but wouldn't it be easier if the C preprocessor was a seperate program, so that it wouldn't as limited by cc_*'s limitations and could get correct signed behavior?</span></div><div class="line" id="034729"><span class="nick" style="color:#6c3d55"><a href="#034729" label="[03:47:29]">&lt;OriansJ&gt;</a></span><span class="message">it also appears to break typedefs</span></div><div class="line" id="034904"><span class="nick" style="color:#234e69"><a href="#034904" label="[03:49:04]">&lt;xentrac&gt;</a></span><span class="message">typedef does not canonically belong to the preprocessor</span></div><div class="line" id="034917"><span class="nick" style="color:#234e69"><a href="#034917" label="[03:49:17]">&lt;xentrac&gt;</a></span><span class="message">(forgive me if that's stating the obvious)</span></div><div class="line" id="035030"><span class="nick" style="color:#d9d9d9"><a href="#035030" label="[03:50:30]">&lt;pder&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/20">https://github.com/oriansj/blynn-compiler/pull/20</a> </span></div><div class="line" id="035120"><span class="nick" style="color:#d9d9d9"><a href="#035120" label="[03:51:20]">&lt;pder&gt;</a></span><span class="message">This eliminates the need for IO redirection.  Instead the input and output files are arguments to each compiler command</span></div><div class="line" id="035432"><span class="nick" style="color:#d9d9d9"><a href="#035432" label="[03:54:32]">&lt;pder&gt;</a></span><span class="message">(from marginally on)</span></div><div class="line" id="035752"><span class="nick" style="color:#6c3d55"><a href="#035752" label="[03:57:52]">&lt;OriansJ&gt;</a></span><span class="message">xentrac:  you are absolutely right and it appears my eyes dropped a token when parsing the sample output</span></div><div class="line" id="035817"><span class="nick" style="color:#6c3d55"><a href="#035817" label="[03:58:17]">&lt;OriansJ&gt;</a></span><span class="message">it didn't break the typedef, &gt;.&lt;</span></div><div class="line" id="035827"><span class="nick" style="color:#234e69"><a href="#035827" label="[03:58:27]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="035828"><span class="nick" style="color:#6c3d55"><a href="#035828" label="[03:58:28]">&lt;OriansJ&gt;</a></span><span class="message">pder: merged and pushed</span></div><div class="line" id="035830"><span class="nick" style="color:#6c3d55"><a href="#035830" label="[03:58:30]">&lt;OriansJ&gt;</a></span><span class="message">thank you</span></div><div class="line" id="035831"><span class="nick" style="color:#234e69"><a href="#035831" label="[03:58:31]">&lt;xentrac&gt;</a></span><span class="message">well it could have</span></div><div class="line" id="035839"><span class="nick" style="color:#234e69"><a href="#035839" label="[03:58:39]">&lt;xentrac&gt;</a></span><span class="message">it would just be surprising</span></div><div class="line" id="040054"><span class="nick" style="color:#6c3d55"><a href="#040054" label="[04:00:54]">&lt;OriansJ&gt;</a></span><span class="message">honestly it is a little odd seeing M2-Planet become slowly a full and proper C compiler.</span></div><div class="line" id="040227"><span class="nick" style="color:#6c3d55"><a href="#040227" label="[04:02:27]">&lt;OriansJ&gt;</a></span><span class="message">all I need is someone to drop a patch so that struct token* f; f = f + 1; behaves identically to C and It'll basically have all the things people complain about solved.</span></div><div class="line" id="040852"><span class="nick" style="color:#234e69"><a href="#040852" label="[04:08:52]">&lt;xentrac&gt;</a></span><span class="message">incrementing by sizeof, you mean?</span></div><div class="line" id="040915"><span class="nick" style="color:#234e69"><a href="#040915" label="[04:09:15]">&lt;xentrac&gt;</a></span><span class="message">congratulations :)</span></div><div class="line" id="041013"><span class="nick" style="color:#6c3d55"><a href="#041013" label="[04:10:13]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I haven't done it yet but it is basically the only thing that would need to be changed.</span></div><div class="line" id="041106"><span class="nick" style="color:#6c3d55"><a href="#041106" label="[04:11:06]">&lt;OriansJ&gt;</a></span><span class="message">Then I can just extend yt_'s macro work to include #define and we can either output CONSTANT or remove the need for it entirely (I think output CONSTANT is probably a better plan)</span></div><div class="line" id="041334"><span class="nick" style="color:#bc80bd"><a href="#041334" label="[04:13:34]">&lt;deesix&gt;</a></span><span class="message">I think yt_ is already working on that.</span></div><div class="line" id="041412"><span class="nick" style="color:#6c3d55"><a href="#041412" label="[04:14:12]">&lt;OriansJ&gt;</a></span><span class="message">deesix: yeah I just merged yt_'s preprocessor work</span></div><div class="line" id="041506"><span class="nick" style="color:#6c3d55"><a href="#041506" label="[04:15:06]">&lt;OriansJ&gt;</a></span><span class="message">need to run astyle -A1tSxejz2fpUxV on it but consistent formating is easy to fix.</span></div><div class="line" id="041602"><span class="nick" style="color:#bc80bd"><a href="#041602" label="[04:16:02]">&lt;deesix&gt;</a></span><span class="message">I mean, more capable preprocessor: &quot;&quot;&quot;I think I do want nested expansion [...] I'll probably leave out varargs, but that should be easy to add later&quot;&quot;&quot; and some other plans.</span></div><div class="line" id="041654"><span class="nick" style="color:#bc80bd"><a href="#041654" label="[04:16:54]">&lt;deesix&gt;</a></span><span class="message">&quot;&quot;&quot;first bit&quot;&quot;&quot;</span></div><div class="line" id="041855"><span class="nick" style="color:#3c5b35"><a href="#041855" label="[04:18:55]">&lt;siraben&gt;</a></span><span class="message">pder: thanks for your work on removing shell redirection</span></div><div class="line" id="041904"><span class="nick" style="color:#3c5b35"><a href="#041904" label="[04:19:04]">&lt;siraben&gt;</a></span><span class="message">So what's the plan to do it in Haskell later?</span></div><div class="line" id="041905"><span class="nick" style="color:#6c3d55"><a href="#041905" label="[04:19:05]">&lt;OriansJ&gt;</a></span><span class="message">well piece by piece M2-Planet is getting closer to what is required to compile TCC directly.</span></div><div class="line" id="041952"><span class="nick" style="color:#3c5b35"><a href="#041952" label="[04:19:52]">&lt;siraben&gt;</a></span><span class="message">OriansJ: overall, M2-Planet C code should be able to be compiled by TCC/GCC right?</span></div><div class="line" id="042022"><span class="nick" style="color:#6c3d55"><a href="#042022" label="[04:20:22]">&lt;OriansJ&gt;</a></span><span class="message">siraben: M2-Planet code is standard C code</span></div><div class="line" id="042028"><span class="nick" style="color:#6c3d55"><a href="#042028" label="[04:20:28]">&lt;OriansJ&gt;</a></span><span class="message">so yes</span></div><div class="line" id="042121"><span class="nick" style="color:#6c3d55"><a href="#042121" label="[04:21:21]">&lt;OriansJ&gt;</a></span><span class="message">the only bit is the trick with // to work around the pointer + 1 behavior difference and CONSTANT to provide for the lack of #define support</span></div><div class="line" id="042220"><span class="nick" style="color:#6c3d55"><a href="#042220" label="[04:22:20]">&lt;OriansJ&gt;</a></span><span class="message">but what I am saying is as M2-Planet grows C primitives, it heads towards constaining the full subset required to build  TCC directly.</span></div><div class="line" id="042244"><span class="nick" style="color:#3c5b35"><a href="#042244" label="[04:22:44]">&lt;siraben&gt;</a></span><span class="message">I dee</span></div><div class="line" id="042437"><span class="nick" style="color:#d9d9d9"><a href="#042437" label="[04:24:37]">&lt;pder&gt;</a></span><span class="message">siraben: the changes I made to remove the shell redirection breaks the getArgs stuff I see in precisely.  For example, you cant do &quot;./bin/precisely comb&quot;</span></div><div class="line" id="042502"><span class="nick" style="color:#6c3d55"><a href="#042502" label="[04:25:02]">&lt;OriansJ&gt;</a></span><span class="message">It honestly isn't a huge task either. I just have made it harder for myself by sticking to 1 file input and 1 file output standard to make running these steps on bare metal easier.</span></div><div class="line" id="042514"><span class="nick" style="color:#3c5b35"><a href="#042514" label="[04:25:14]">&lt;siraben&gt;</a></span><span class="message">pder: ah, breaks in what way?</span></div><div class="line" id="042533"><span class="nick" style="color:#d9d9d9"><a href="#042533" label="[04:25:33]">&lt;pder&gt;</a></span><span class="message">It would be nice to get this working properly in Haskell since it has some methods in the FFI to get the arg count and args</span></div><div class="line" id="042623"><span class="nick" style="color:#d9d9d9"><a href="#042623" label="[04:26:23]">&lt;pder&gt;</a></span><span class="message">Because I simply expect argv[1] and argv[2] to be the input and output file.</span></div><div class="line" id="042720"><span class="nick" style="color:#d9d9d9"><a href="#042720" label="[04:27:20]">&lt;pder&gt;</a></span><span class="message">If you look at line 2046 of precisely.hs main = getArgs &gt;&gt;= \case</span></div><div class="line" id="042902"><span class="nick" style="color:#d9d9d9"><a href="#042902" label="[04:29:02]">&lt;pder&gt;</a></span><span class="message">I thought that we could add better command line handling in Haskell there to specify input, output files, and any other flags</span></div><div class="line" id="042951"><span class="nick" style="color:#3c5b35"><a href="#042951" label="[04:29:51]">&lt;siraben&gt;</a></span><span class="message">I see, I could add that</span></div><div class="line" id="043007"><span class="nick" style="color:#3c5b35"><a href="#043007" label="[04:30:07]">&lt;siraben&gt;</a></span><span class="message">What sort of arguments would you like to see?</span></div><div class="line" id="043009"><span class="nick" style="color:#6c3d55"><a href="#043009" label="[04:30:09]">&lt;OriansJ&gt;</a></span><span class="message">probably should fuzz yt_'s work to catch the painful bugs</span></div><div class="line" id="043031"><span class="nick" style="color:#3c5b35"><a href="#043031" label="[04:30:31]">&lt;siraben&gt;</a></span><span class="message">./bin/precisely -i foo.hs -o foo</span></div><div class="line" id="043130"><span class="nick" style="color:#6c3d55"><a href="#043130" label="[04:31:30]">&lt;OriansJ&gt;</a></span><span class="message">or the M* series standard -f and -o</span></div><div class="line" id="043146"><span class="nick" style="color:#6c3d55"><a href="#043146" label="[04:31:46]">&lt;OriansJ&gt;</a></span><span class="message">--file --output</span></div><div class="line" id="043156"><span class="nick" style="color:#d9d9d9"><a href="#043156" label="[04:31:56]">&lt;pder&gt;</a></span><span class="message">siraben, I guess if we could still handle the exist &quot;comb&quot;, &quot;lamb&quot;, &quot;type&quot; as well as specify input and output files</span></div><div class="line" id="043226"><span class="nick" style="color:#3c5b35"><a href="#043226" label="[04:32:26]">&lt;siraben&gt;</a></span><span class="message">Dang it, I'm getting weird CPP errors when trying to build the wrapper for marginally with GHC <a rel="nofollow" href="https://github.com/siraben/compiler/runs/1651026614?check_suite_focus=true">https://github.com/siraben/compiler/runs/1651026614?check_suite_focus=true</a> </span></div><div class="line" id="043227"><span class="nick" style="color:#d9d9d9"><a href="#043227" label="[04:32:27]">&lt;pder&gt;</a></span><span class="message">siraben: exactly</span></div><div class="line" id="043259"><span class="nick" style="color:#3c5b35"><a href="#043259" label="[04:32:59]">&lt;siraben&gt;</a></span><span class="message">Ah right, those args dump the bytecode/lambda calculus/types IIRC</span></div><div class="line" id="043341"><span class="nick" style="color:#bc80bd"><a href="#043341" label="[04:33:41]">&lt;deesix&gt;</a></span><span class="message">OriansJ, what do you use for fuzzing?</span></div><div class="line" id="043342"><span class="nick" style="color:#d9d9d9"><a href="#043342" label="[04:33:42]">&lt;pder&gt;</a></span><span class="message">Do you know what we would want to add to the ffi?</span></div><div class="line" id="043418"><span class="nick" style="color:#3c5b35"><a href="#043418" label="[04:34:18]">&lt;siraben&gt;</a></span><span class="message">Anything useful and IO-related could be added to the FFI</span></div><div class="line" id="043419"><span class="nick" style="color:#6c3d55"><a href="#043419" label="[04:34:19]">&lt;OriansJ&gt;</a></span><span class="message">deesix: american fuzzy lop 2.52b</span></div><div class="line" id="043430"><span class="nick" style="color:#3c5b35"><a href="#043430" label="[04:34:30]">&lt;siraben&gt;</a></span><span class="message">afl &lt;3</span></div><div class="line" id="043502"><span class="nick" style="color:#d9d9d9"><a href="#043502" label="[04:35:02]">&lt;pder&gt;</a></span><span class="message">Also, can you tell if precisely can be run interactively?</span></div><div class="line" id="043507"><span class="nick" style="color:#3c5b35"><a href="#043507" label="[04:35:07]">&lt;siraben&gt;</a></span><span class="message">OriansJ: don't you have to compile with afl-gcc to properly exhaust the code execution paths?</span></div><div class="line" id="043539"><span class="nick" style="color:#6c3d55"><a href="#043539" label="[04:35:39]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes you do but that is fine as I am just using it on a machine for generating of the test cases</span></div><div class="line" id="043604"><span class="nick" style="color:#3c5b35"><a href="#043604" label="[04:36:04]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Right</span></div><div class="line" id="043637"><span class="nick" style="color:#6c3d55"><a href="#043637" label="[04:36:37]">&lt;OriansJ&gt;</a></span><span class="message">when it finds a case, I download and verify then fix. Upload the new code and restart the fuzzer on the dedicated fuzzing machine</span></div><div class="line" id="043655"><span class="nick" style="color:#6c3d55"><a href="#043655" label="[04:36:55]">&lt;OriansJ&gt;</a></span><span class="message">(saves my laptop battery life when I am unplugged)</span></div><div class="line" id="043822"><span class="nick" style="color:#3c5b35"><a href="#043822" label="[04:38:22]">&lt;siraben&gt;</a></span><span class="message">pder: interactively as in a REPL like in GHCi?</span></div><div class="line" id="043905"><span class="nick" style="color:#d9d9d9"><a href="#043905" label="[04:39:05]">&lt;pder&gt;</a></span><span class="message">yeah</span></div><div class="line" id="043941"><span class="nick" style="color:#3c5b35"><a href="#043941" label="[04:39:41]">&lt;siraben&gt;</a></span><span class="message">It doesn't do any interpretation, so if we added a REPL we could get the type and compiled output</span></div><div class="line" id="043959"><span class="nick" style="color:#3c5b35"><a href="#043959" label="[04:39:59]">&lt;siraben&gt;</a></span><span class="message">I think because of some earlier stage mutually, it has to parse the whole input</span></div><div class="line" id="044008"><span class="nick" style="color:#3c5b35"><a href="#044008" label="[04:40:08]">&lt;siraben&gt;</a></span><span class="message">for mutually recursive declarations</span></div><div class="line" id="044047"><span class="nick" style="color:#3c5b35"><a href="#044047" label="[04:40:47]">&lt;siraben&gt;</a></span><span class="message">pder: what would you want from an interactive precisely?</span></div><div class="line" id="044048"><span class="nick" style="color:#d9d9d9"><a href="#044048" label="[04:40:48]">&lt;pder&gt;</a></span><span class="message">any features you feel like are missing?</span></div><div class="line" id="044132"><span class="nick" style="color:#3c5b35"><a href="#044132" label="[04:41:32]">&lt;siraben&gt;</a></span><span class="message">Not really, it's just a matter now of settling on a prelude to include so people don't have to redeclare half of GHC's prelude to get anything done</span></div><div class="line" id="044243"><span class="nick" style="color:#3c5b35"><a href="#044243" label="[04:42:43]">&lt;siraben&gt;</a></span><span class="message">Ok, modules would be great</span></div><div class="line" id="044250"><span class="nick" style="color:#d9d9d9"><a href="#044250" label="[04:42:50]">&lt;pder&gt;</a></span><span class="message">Yeah, I think it would definitely be nice if hello.hs could just be main = putStrLn &quot;hello, world!&quot;</span></div><div class="line" id="044306"><span class="nick" style="color:#3c5b35"><a href="#044306" label="[04:43:06]">&lt;siraben&gt;</a></span><span class="message">Since blynn isn't that active on GitHub, I'll email him again re modules</span></div><div class="line" id="044320"><span class="nick" style="color:#3c5b35"><a href="#044320" label="[04:43:20]">&lt;siraben&gt;</a></span><span class="message">I think he'd be pleased to know his work is being used</span></div><div class="line" id="044357"><span class="nick" style="color:#3c5b35"><a href="#044357" label="[04:43:57]">&lt;siraben&gt;</a></span><span class="message">pder: How's learning Haskell by the way?</span></div><div class="line" id="044511"><span class="nick" style="color:#3c5b35"><a href="#044511" label="[04:45:11]">&lt;siraben&gt;</a></span><span class="message">This toggable prelude is a good example of what we could extract into a file <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/hilsys.html">https://crypto.stanford.edu/~blynn/compiler/hilsys.html</a> </span></div><div class="line" id="044518"><span class="nick" style="color:#3c5b35"><a href="#044518" label="[04:45:18]">&lt;siraben&gt;</a></span><span class="message">toggleable*</span></div><div class="line" id="044529"><span class="nick" style="color:#d9d9d9"><a href="#044529" label="[04:45:29]">&lt;pder&gt;</a></span><span class="message">Its been passive lately.  Ive watched a few videos and read some tutorials, but havent written anything yet</span></div><div class="line" id="044645"><span class="nick" style="color:#3c5b35"><a href="#044645" label="[04:46:45]">&lt;siraben&gt;</a></span><span class="message">No rush, it can take some time for it to sink in, like Lisp</span></div><div class="line" id="045121"><span class="nick" style="color:#d9d9d9"><a href="#045121" label="[04:51:21]">&lt;pder&gt;</a></span><span class="message">I would certainly like to understand more of how blynn-compiler is bootstrapped.  Some of it feels like magic</span></div><div class="line" id="045452"><span class="nick" style="color:#6c3d55"><a href="#045452" label="[04:54:52]">&lt;OriansJ&gt;</a></span><span class="message">pder: well that is why the bootstrap bit needs to have a lot of magic forcefully removed.</span></div><div class="line" id="045516"><span class="nick" style="color:#6c3d55"><a href="#045516" label="[04:55:16]">&lt;OriansJ&gt;</a></span><span class="message">even if it means I have to write something annoying.</span></div><div class="line" id="045911"><span class="nick" style="color:#3c5b35"><a href="#045911" label="[04:59:11]">&lt;siraben&gt;</a></span><span class="message">Yes, the only magic left is the rewrite of the first four stages into one, readable stage in lisp</span></div><div class="line" id="045916"><span class="nick" style="color:#d9d9d9"><a href="#045916" label="[04:59:16]">&lt;pder&gt;</a></span><span class="message">I would not know how to verify generated/parenthetically for correctness</span></div><div class="line" id="045957"><span class="nick" style="color:#d9d9d9"><a href="#045957" label="[04:59:57]">&lt;pder&gt;</a></span><span class="message">siraben, could you write it in scheme that could run on mes?</span></div><div class="line" id="050002"><span class="nick" style="color:#6c3d55"><a href="#050002" label="[05:00:02]">&lt;OriansJ&gt;</a></span><span class="message">pder: we never verify the generated files as being correct.</span></div><div class="line" id="050023"><span class="nick" style="color:#3c5b35"><a href="#050023" label="[05:00:23]">&lt;siraben&gt;</a></span><span class="message">pder: Yes, that's the plan</span></div><div class="line" id="050042"><span class="nick" style="color:#6c3d55"><a href="#050042" label="[05:00:42]">&lt;OriansJ&gt;</a></span><span class="message">not unless someone wishes to work on a proof for the generated output's correctness</span></div><div class="line" id="050154"><span class="nick" style="color:#3c5b35"><a href="#050154" label="[05:01:54]">&lt;siraben&gt;</a></span><span class="message">pder: yet to be ported <a rel="nofollow" href="https://github.com/siraben/compiler/blob/combine/binary.lisp">https://github.com/siraben/compiler/blob/combine/binary.lisp</a> </span></div><div class="line" id="050209"><span class="nick" style="color:#3c5b35"><a href="#050209" label="[05:02:09]">&lt;siraben&gt;</a></span><span class="message">i will make a binary.scm doing the same thing</span></div><div class="line" id="050229"><span class="nick" style="color:#d9d9d9"><a href="#050229" label="[05:02:29]">&lt;pder&gt;</a></span><span class="message">so would that scheme output bytecode that runs on bin/vm?</span></div><div class="line" id="050255"><span class="nick" style="color:#3c5b35"><a href="#050255" label="[05:02:55]">&lt;siraben&gt;</a></span><span class="message">Yes</span></div><div class="line" id="050313"><span class="nick" style="color:#3c5b35"><a href="#050313" label="[05:03:13]">&lt;siraben&gt;</a></span><span class="message">That branch I have replaces stringy with lispy, then binary with binary.lisp</span></div><div class="line" id="050327"><span class="nick" style="color:#3c5b35"><a href="#050327" label="[05:03:27]">&lt;siraben&gt;</a></span><span class="message">As a check</span></div><div class="line" id="050335"><span class="nick" style="color:#6c3d55"><a href="#050335" label="[05:03:35]">&lt;OriansJ&gt;</a></span><span class="message">then we just need to audit the binary.lisp and boom trusted bootstrap for Haskell</span></div><div class="line" id="050358"><span class="nick" style="color:#d9d9d9"><a href="#050358" label="[05:03:58]">&lt;pder&gt;</a></span><span class="message">very nice</span></div><div class="line" id="050430"><span class="nick" style="color:#3c5b35"><a href="#050430" label="[05:04:30]">&lt;siraben&gt;</a></span><span class="message">I'm glad Ben Lynn didn't use anything more than ANSI C otherwise none of this would have been possible</span></div><div class="line" id="050452"><span class="nick" style="color:#3c5b35"><a href="#050452" label="[05:04:52]">&lt;siraben&gt;</a></span><span class="message">Too many fancy implementations out there, which hurts bootstrapping</span></div><div class="line" id="050540"><span class="nick" style="color:#d9d9d9"><a href="#050540" label="[05:05:40]">&lt;pder&gt;</a></span><span class="message">yeah, the only thing missing ended up involving 64 bit types, but that shouldnt matter</span></div><div class="line" id="050550"><span class="nick" style="color:#d9d9d9"><a href="#050550" label="[05:05:50]">&lt;pder&gt;</a></span><span class="message">no long long in M2-Planet</span></div><div class="line" id="050716"><span class="nick" style="color:#234e69"><a href="#050716" label="[05:07:16]">&lt;xentrac&gt;</a></span><span class="message">yay :)</span></div><div class="line" id="050851"><span class="nick" style="color:#6c3d55"><a href="#050851" label="[05:08:51]">&lt;OriansJ&gt;</a></span><span class="message">pder: well more no need to generate binaries more than 2GB in size yet</span></div><div class="line" id="050949"><span class="nick" style="color:#6c3d55"><a href="#050949" label="[05:09:49]">&lt;OriansJ&gt;</a></span><span class="message">I could add it with just 5 lines for AMD64 and AArch64 but on 32bit platforms it is more of a problem</span></div><div class="line" id="051511"><span class="nick" style="color:#6c3d55"><a href="#051511" label="[05:15:11]">&lt;OriansJ&gt;</a></span><span class="message">if nothing else; M2-Planet should know when to stop adding features and let the users pick up a much better linker, assembler, C compiler and C preprocessor that actually complies fully to the C standard.</span></div><div class="line" id="051657"><span class="nick" style="color:#6c3d55"><a href="#051657" label="[05:16:57]">&lt;OriansJ&gt;</a></span><span class="message">although I am far more excited to see the scheme interpreter writte in blynn-compiler's subset of Haskell.</span></div><div class="line" id="051733"><span class="nick" style="color:#6c3d55"><a href="#051733" label="[05:17:33]">&lt;OriansJ&gt;</a></span><span class="message">if it is good enough it can be a drop in replacement for both guile and mes.c</span></div><div class="line" id="051736"><span class="nick" style="color:#d9d9d9"><a href="#051736" label="[05:17:36]">&lt;pder&gt;</a></span><span class="message">I wonder if Haskell might have some other uses for writing tools that would be awkward to do in C</span></div><div class="line" id="051750"><span class="nick" style="color:#6c3d55"><a href="#051750" label="[05:17:50]">&lt;OriansJ&gt;</a></span><span class="message">pder: probably</span></div><div class="line" id="051836"><span class="nick" style="color:#234e69"><a href="#051836" label="[05:18:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, there are a lot of things that are a lot easier in Haskell</span></div><div class="line" id="051842"><span class="nick" style="color:#6c3d55"><a href="#051842" label="[05:18:42]">&lt;OriansJ&gt;</a></span><span class="message">or probably for problems that better map to the Haskell solution space than the hand written C solution space.</span></div><div class="line" id="051931"><span class="nick" style="color:#6c3d55"><a href="#051931" label="[05:19:31]">&lt;OriansJ&gt;</a></span><span class="message">also it would be funny to say the secret to bootstrapping GCC was to write a Lisp in Haskell to run a C compiler written in scheme.</span></div><div class="line" id="051945"><span class="nick" style="color:#d9d9d9"><a href="#051945" label="[05:19:45]">&lt;pder&gt;</a></span><span class="message">haha, yes</span></div><div class="line" id="052006"><span class="nick" style="color:#234e69"><a href="#052006" label="[05:20:06]">&lt;xentrac&gt;</a></span><span class="message">hahaha</span></div><div class="line" id="052029"><span class="nick" style="color:#6c3d55"><a href="#052029" label="[05:20:29]">&lt;OriansJ&gt;</a></span><span class="message">since we have almost bootstrapped that haskell and janneke did write the C compiler in scheme.</span></div><div class="line" id="052113"><span class="nick" style="color:#6c3d55"><a href="#052113" label="[05:21:13]">&lt;OriansJ&gt;</a></span><span class="message">all that remains is a proper scheme written in haskell and then we can make everyone's lives so much easier for long term maintaince of Gnu Mes</span></div><div class="line" id="052204"><span class="nick" style="color:#6c3d55"><a href="#052204" label="[05:22:04]">&lt;OriansJ&gt;</a></span><span class="message">for if we do it right, it'll be able to run guix and that lisp written in haskell becomes the root binary of guix forever.</span></div><div class="line" id="052345"><span class="nick" style="color:#6c3d55"><a href="#052345" label="[05:23:45]">&lt;OriansJ&gt;</a></span><span class="message">but I do tend to dream quite bold in regards to this project.</span></div><div class="line" id="052435"><span class="nick" style="color:#6c3d55"><a href="#052435" label="[05:24:35]">&lt;OriansJ&gt;</a></span><span class="message">just wished I knew of a less ugly way to make all M2-Planet tests completely parallel in nature.</span></div><div class="line" id="052536"><span class="nick" style="color:#6c3d55"><a href="#052536" label="[05:25:36]">&lt;OriansJ&gt;</a></span><span class="message">because the changes would be a little tedious but then make -j 42 would build all the tests at the same time and the build with tests for M2-Planet would be done in 1 second</span></div><div class="line" id="052646"><span class="nick" style="color:#6c3d55"><a href="#052646" label="[05:26:46]">&lt;OriansJ&gt;</a></span><span class="message">and cleared out some possible segfaults from cc_macro.c</span></div><div class="line" id="052716"><span class="nick" style="color:#6c3d55"><a href="#052716" label="[05:27:16]">&lt;OriansJ&gt;</a></span><span class="message">now to hope not too many new segfaults show up from fuzzing before I wake up</span></div><div class="line" id="052725"><span class="nick" style="color:#6c3d55"><a href="#052725" label="[05:27:25]">&lt;OriansJ&gt;</a></span><span class="message">good night.</span></div><div class="line" id="052744"><span class="nick" style="color:#234e69"><a href="#052744" label="[05:27:44]">&lt;xentrac&gt;</a></span><span class="message">night!</span></div><div class="line" id="053954"><span class="nick" style="color:#6d2462"><a href="#053954" label="[05:39:54]">&lt;Hagfish&gt;</a></span><span class="message">parallel builds in less than a second would be pretty epic</span></div><div class="line" id="054131"><span class="nick" style="color:#6d2462"><a href="#054131" label="[05:41:31]">&lt;Hagfish&gt;</a></span><span class="message">that sounds it could be a fun challenge that motivates someone new who hears about this project</span></div><div class="line" id="054227"><span class="nick" style="color:#6d2462"><a href="#054227" label="[05:42:27]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure what sort of skill set or background someone would have to have to come up with an elegant and suitable way of achieving that</span></div><div class="line" id="090223"><span class="nick" style="color:#af8d2f"><a href="#090223" label="[09:02:23]">&lt;gforce_d11977&gt;</a></span><span class="message">good morning, i'am puzzled: OriansJ writes, that M2-Planet can maybe in the nearer future build TCC directly, but on the other side everybody looks to blynn-compiler? 8-))) lets see what the next weeks are showing us...everything looks very promising</span></div><div class="line" id="091440"><span class="nick" style="color:#2e2a4a"><a href="#091440" label="[09:14:40]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: different paths essentially</span></div><div class="line" id="094422"><span class="nick" style="color:#3c5b35"><a href="#094422" label="[09:44:22]">&lt;siraben&gt;</a></span><span class="message">gforce_d11977: I see active, promising work on both paths</span></div><div class="line" id="094504"><span class="nick" style="color:#3c5b35"><a href="#094504" label="[09:45:04]">&lt;siraben&gt;</a></span><span class="message">ultimately the goal is not only we get to GCC, but we have different ways to get there and would be able to evaluate the tradeoffs of each approach</span></div><div class="line" id="094516"><span class="nick" style="color:#2e2a4a"><a href="#094516" label="[09:45:16]">&lt;fossy&gt;</a></span><span class="message">i'm pretty happy that we have a m2-platet -&gt; tcc bridge</span></div><div class="line" id="094525"><span class="nick" style="color:#2e2a4a"><a href="#094525" label="[09:45:25]">&lt;fossy&gt;</a></span><span class="message">but it's still pretty jankyish</span></div><div class="line" id="094537"><span class="nick" style="color:#3c5b35"><a href="#094537" label="[09:45:37]">&lt;siraben&gt;</a></span><span class="message">is that without help from guile yet?</span></div><div class="line" id="094600"><span class="nick" style="color:#af8d2f"><a href="#094600" label="[09:46:00]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: yeah...i'am still not able to build mes'</span></div><div class="line" id="094608"><span class="nick" style="color:#af8d2f"><a href="#094608" label="[09:46:08]">&lt;gforce_d11977&gt;</a></span><span class="message">without 'guile'</span></div><div class="line" id="094631"><span class="nick" style="color:#2e2a4a"><a href="#094631" label="[09:46:31]">&lt;fossy&gt;</a></span><span class="message">siraben: yes, janneke ported mes to m2-planet some time ago</span></div><div class="line" id="094641"><span class="nick" style="color:#2e2a4a"><a href="#094641" label="[09:46:41]">&lt;fossy&gt;</a></span><span class="message">but it was quite janky</span></div><div class="line" id="094649"><span class="nick" style="color:#2e2a4a"><a href="#094649" label="[09:46:49]">&lt;fossy&gt;</a></span><span class="message">and still is to some extent but it better</span></div><div class="line" id="094649"><span class="nick" style="color:#af8d2f"><a href="#094649" label="[09:46:49]">&lt;gforce_d11977&gt;</a></span><span class="message">but maybe i'am doing it in a wrong way. i will try to share my 'way' this week</span></div><div class="line" id="094711"><span class="nick" style="color:#2e2a4a"><a href="#094711" label="[09:47:11]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: no stable release or master branch has support for building mes using M2-Planet</span></div><div class="line" id="094713"><span class="nick" style="color:#3c5b35"><a href="#094713" label="[09:47:13]">&lt;siraben&gt;</a></span><span class="message">fossy: oh i see, is there a lot of work until we don't need guile at all?</span></div><div class="line" id="094750"><span class="nick" style="color:#2e2a4a"><a href="#094750" label="[09:47:50]">&lt;fossy&gt;</a></span><span class="message">siraben: well, we don't technically need guile at all (see my live-bootstrap, we only use kaem and hex0 (after stikonas' pr)</span></div><div class="line" id="094753"><span class="nick" style="color:#af8d2f"><a href="#094753" label="[09:47:53]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: a 'wip' branch is ok for me</span></div><div class="line" id="094756"><span class="nick" style="color:#2e2a4a"><a href="#094756" label="[09:47:56]">&lt;fossy&gt;</a></span><span class="message">but guix seems to be stuck on guile for quite a while</span></div><div class="line" id="094811"><span class="nick" style="color:#2e2a4a"><a href="#094811" label="[09:48:11]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/tree/wip-m2">https://gitlab.com/janneke/mes/-/tree/wip-m2</a> </span></div><div class="line" id="094826"><span class="nick" style="color:#af8d2f"><a href="#094826" label="[09:48:26]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: will try that, thanks</span></div><div class="line" id="094915"><span class="nick" style="color:#3c5b35"><a href="#094915" label="[09:49:15]">&lt;siraben&gt;</a></span><span class="message">fossy: could you link to live-bootstrap?</span></div><div class="line" id="094946"><span class="nick" style="color:#2e2a4a"><a href="#094946" label="[09:49:46]">&lt;fossy&gt;</a></span><span class="message">siraben: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a> </span></div><div class="line" id="095009"><span class="nick" style="color:#2e2a4a"><a href="#095009" label="[09:50:09]">&lt;fossy&gt;</a></span><span class="message">here's the wip mes-m2 (i.e. kaem + hex0 + kernel bootstrap) branch <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/tree/mes-m2">https://github.com/stikonas/live-bootstrap/tree/mes-m2</a> </span></div><div class="line" id="095016"><span class="nick" style="color:#3c5b35"><a href="#095016" label="[09:50:16]">&lt;siraben&gt;</a></span><span class="message">i'd also like to replicate this in Nix, I only have up to mescc-tools-seed, m2, kaem, mescc-tools package at the moment</span></div><div class="line" id="095045"><span class="nick" style="color:#3c5b35"><a href="#095045" label="[09:50:45]">&lt;siraben&gt;</a></span><span class="message">Nix should reduce its bootstrapping as well, IMO, but the bootstrapping process isn't well documented</span></div><div class="line" id="095047"><span class="nick" style="color:#2e2a4a"><a href="#095047" label="[09:50:47]">&lt;fossy&gt;</a></span><span class="message">siraben: here's the guix version <a rel="nofollow" href="https://gitlab.com/janneke/guix/-/tree/wip-fsb14">https://gitlab.com/janneke/guix/-/tree/wip-fsb14</a> </span></div><div class="line" id="095059"><span class="nick" style="color:#2e2a4a"><a href="#095059" label="[09:50:59]">&lt;fossy&gt;</a></span><span class="message">siraben: what does nix use to build packages?</span></div><div class="line" id="095109"><span class="nick" style="color:#3c5b35"><a href="#095109" label="[09:51:09]">&lt;siraben&gt;</a></span><span class="message">It's like Guix</span></div><div class="line" id="095112"><span class="nick" style="color:#3c5b35"><a href="#095112" label="[09:51:12]">&lt;siraben&gt;</a></span><span class="message">Oh, GCC</span></div><div class="line" id="095129"><span class="nick" style="color:#2e2a4a"><a href="#095129" label="[09:51:29]">&lt;fossy&gt;</a></span><span class="message">right, Guix uses Guile as a driver, live-bootstrap uses kaem, what's the &quot;driver&quot; in nix?</span></div><div class="line" id="095140"><span class="nick" style="color:#3c5b35"><a href="#095140" label="[09:51:40]">&lt;siraben&gt;</a></span><span class="message">Oh, the Nix language</span></div><div class="line" id="095155"><span class="nick" style="color:#2e2a4a"><a href="#095155" label="[09:51:55]">&lt;fossy&gt;</a></span><span class="message">how is that interpreted?</span></div><div class="line" id="095155"><span class="nick" style="color:#3c5b35"><a href="#095155" label="[09:51:55]">&lt;siraben&gt;</a></span><span class="message">Pure, dynamically typed, lazy functional language</span></div><div class="line" id="095202"><span class="nick" style="color:#3c5b35"><a href="#095202" label="[09:52:02]">&lt;siraben&gt;</a></span><span class="message">with an interpreter in C++</span></div><div class="line" id="095203"><span class="nick" style="color:#3c5b35"><a href="#095203" label="[09:52:03]">&lt;siraben&gt;</a></span><span class="message">heh</span></div><div class="line" id="095208"><span class="nick" style="color:#2e2a4a"><a href="#095208" label="[09:52:08]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="095216"><span class="nick" style="color:#3c5b35"><a href="#095216" label="[09:52:16]">&lt;siraben&gt;</a></span><span class="message">ISWIM how</span></div><div class="line" id="095217"><span class="nick" style="color:#3c5b35"><a href="#095217" label="[09:52:17]">&lt;siraben&gt;</a></span><span class="message">now*</span></div><div class="line" id="095225"><span class="nick" style="color:#3c5b35"><a href="#095225" label="[09:52:25]">&lt;siraben&gt;</a></span><span class="message">Oops, I see what you mean</span></div><div class="line" id="095238"><span class="nick" style="color:#389600"><a href="#095238" label="[09:52:38]">&lt;qyliss&gt;</a></span><span class="message">Isn't bash more like the driver?</span></div><div class="line" id="095245"><span class="nick" style="color:#389600"><a href="#095245" label="[09:52:45]">&lt;qyliss&gt;</a></span><span class="message">Nix generates bash scripts that build packages</span></div><div class="line" id="095259"><span class="nick" style="color:#2e2a4a"><a href="#095259" label="[09:52:59]">&lt;fossy&gt;</a></span><span class="message">qyliss: well, are the generated scripts human-readable?</span></div><div class="line" id="095305"><span class="nick" style="color:#389600"><a href="#095305" label="[09:53:05]">&lt;qyliss&gt;</a></span><span class="message">no</span></div><div class="line" id="095316"><span class="nick" style="color:#389600"><a href="#095316" label="[09:53:16]">&lt;qyliss&gt;</a></span><span class="message">well, to some extent but not really</span></div><div class="line" id="095317"><span class="nick" style="color:#3c5b35"><a href="#095317" label="[09:53:17]">&lt;siraben&gt;</a></span><span class="message">Nix expressions result in a derivation which drives the build</span></div><div class="line" id="095325"><span class="nick" style="color:#2e2a4a"><a href="#095325" label="[09:53:25]">&lt;fossy&gt;</a></span><span class="message">right, i see</span></div><div class="line" id="095338"><span class="nick" style="color:#3c5b35"><a href="#095338" label="[09:53:38]">&lt;siraben&gt;</a></span><span class="message">I should re-read this sometime</span></div><div class="line" id="095339"><span class="nick" style="color:#3c5b35"><a href="#095339" label="[09:53:39]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://nixos.org/guides/nix-pills/index.html">https://nixos.org/guides/nix-pills/index.html</a> </span></div><div class="line" id="095349"><span class="nick" style="color:#389600"><a href="#095349" label="[09:53:49]">&lt;qyliss&gt;</a></span><span class="message">but the Nix language isn't being interpreted at build time</span></div><div class="line" id="095356"><span class="nick" style="color:#3c5b35"><a href="#095356" label="[09:53:56]">&lt;siraben&gt;</a></span><span class="message">Right</span></div><div class="line" id="095356"><span class="nick" style="color:#2e2a4a"><a href="#095356" label="[09:53:56]">&lt;fossy&gt;</a></span><span class="message">so is there any way to extend that down to th ebootstrap, or do we need an extra seed for nix so that it can create a derviation?</span></div><div class="line" id="095358"><span class="nick" style="color:#389600"><a href="#095358" label="[09:53:58]">&lt;qyliss&gt;</a></span><span class="message">(unlike scheme in Guix AIUI)</span></div><div class="line" id="095417"><span class="nick" style="color:#389600"><a href="#095417" label="[09:54:17]">&lt;qyliss&gt;</a></span><span class="message">Nix probably needs a shell to bootstrap</span></div><div class="line" id="095425"><span class="nick" style="color:#389600"><a href="#095425" label="[09:54:25]">&lt;qyliss&gt;</a></span><span class="message">Although it does actually bundle one</span></div><div class="line" id="095430"><span class="nick" style="color:#2e2a4a"><a href="#095430" label="[09:54:30]">&lt;fossy&gt;</a></span><span class="message">well we have kaem which is probably not sufficently complex</span></div><div class="line" id="095433"><span class="nick" style="color:#389600"><a href="#095433" label="[09:54:33]">&lt;qyliss&gt;</a></span><span class="message">It comes with a staticly-linked busybox</span></div><div class="line" id="095450"><span class="nick" style="color:#3c5b35"><a href="#095450" label="[09:54:50]">&lt;siraben&gt;</a></span><span class="message">I just ran `nix show-derivation $(nix-instantiate '&lt;nixpkgs&gt;' -A hello) | ix`</span></div><div class="line" id="095451"><span class="nick" style="color:#3c5b35"><a href="#095451" label="[09:54:51]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="http://ix.io/2L1M">http://ix.io/2L1M</a> </span></div><div class="line" id="095452"><span class="nick" style="color:#389600"><a href="#095452" label="[09:54:52]">&lt;qyliss&gt;</a></span><span class="message">So probably should just use that</span></div><div class="line" id="095509"><span class="nick" style="color:#3c5b35"><a href="#095509" label="[09:55:09]">&lt;siraben&gt;</a></span><span class="message">This is on macOS, so the dylibs are specific to macOS</span></div><div class="line" id="095514"><span class="nick" style="color:#3c5b35"><a href="#095514" label="[09:55:14]">&lt;siraben&gt;</a></span><span class="message">As you can see the builder is bash</span></div><div class="line" id="095517"><span class="nick" style="color:#389600"><a href="#095517" label="[09:55:17]">&lt;qyliss&gt;</a></span><span class="message">Since Nix having an embedded shell is the equivalent to Guix's build-type scheme interpreting</span></div><div class="line" id="095647"><span class="nick" style="color:#2e2a4a"><a href="#095647" label="[09:56:47]">&lt;fossy&gt;</a></span><span class="message">the things i'm trying to fill with live-bootstrap: 1. *strictly* minimal seeds, meaning hex0 kaem and kernel (which is very hard to fufill with a linux distribution) 2. strictly human-readable source code (no pre-generated configure scripts!) 3. kernel bootstrap path (not done by guix) 4. extensible, configurable automation (guix does that pretty well) 5. lots of possible final states</span></div><div class="line" id="095853"><span class="nick" style="color:#2e2a4a"><a href="#095853" label="[09:58:53]">&lt;fossy&gt;</a></span><span class="message">oh, ofc, 6. complete reproducibility on all systems 7. everything post-bios</span></div><div class="line" id="095916"><span class="nick" style="color:#2e2a4a"><a href="#095916" label="[09:59:16]">&lt;fossy&gt;</a></span><span class="message">handle everything*</span></div><div class="line" id="100008"><span class="nick" style="color:#af8d2f"><a href="#100008" label="[10:00:08]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i just tried your 'live-bootstrap', but my self-built kernel complains about a missing /sbin/init - what is your proposal?</span></div><div class="line" id="100036"><span class="nick" style="color:#3c5b35"><a href="#100036" label="[10:00:36]">&lt;siraben&gt;</a></span><span class="message">fossy: how would I run live-bootstrap without needing qemu?</span></div><div class="line" id="100042"><span class="nick" style="color:#3c5b35"><a href="#100042" label="[10:00:42]">&lt;siraben&gt;</a></span><span class="message">something like how mescc-tools-seed works on Linux</span></div><div class="line" id="100246"><span class="nick" style="color:#2e2a4a"><a href="#100246" label="[10:02:46]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i must apologise for not having a readme yet, it is in the workds.</span></div><div class="line" id="100255"><span class="nick" style="color:#2e2a4a"><a href="#100255" label="[10:02:55]">&lt;fossy&gt;</a></span><span class="message">this will be because you have not run git submodule update --init --recursive</span></div><div class="line" id="100316"><span class="nick" style="color:#2e2a4a"><a href="#100316" label="[10:03:16]">&lt;fossy&gt;</a></span><span class="message">siraben: comment out the qemu line and use the generated initramfs</span></div><div class="line" id="100321"><span class="nick" style="color:#2e2a4a"><a href="#100321" label="[10:03:21]">&lt;fossy&gt;</a></span><span class="message">and the kernel of your providing</span></div><div class="line" id="100325"><span class="nick" style="color:#2e2a4a"><a href="#100325" label="[10:03:25]">&lt;fossy&gt;</a></span><span class="message">until we have a bootstrap kernel</span></div><div class="line" id="100339"><span class="nick" style="color:#2e2a4a"><a href="#100339" label="[10:03:39]">&lt;fossy&gt;</a></span><span class="message">yes, i know there is a leak from the host system into the first initramfs</span></div><div class="line" id="100344"><span class="nick" style="color:#3c5b35"><a href="#100344" label="[10:03:44]">&lt;siraben&gt;</a></span><span class="message">ah cool, will it print to console or display in the screen?</span></div><div class="line" id="100359"><span class="nick" style="color:#2e2a4a"><a href="#100359" label="[10:03:59]">&lt;fossy&gt;</a></span><span class="message">whatever you tell the kernel to do?</span></div><div class="line" id="100403"><span class="nick" style="color:#2e2a4a"><a href="#100403" label="[10:04:03]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="100455"><span class="nick" style="color:#af8d2f"><a href="#100455" label="[10:04:55]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i check out with 'git clone --recursive <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap.git">https://github.com/fosslinux/live-bootstrap.git</a>'  - this should be enough?!</span></div><div class="line" id="100455"><span class="nick" style="color:#2e2a4a"><a href="#100455" label="[10:04:55]">&lt;fossy&gt;</a></span><span class="message">the ideal goal for the seed would be a small floppy image containing only seeds that loads all the source code from a usb or cd-rom or something</span></div><div class="line" id="100517"><span class="nick" style="color:#2e2a4a"><a href="#100517" label="[10:05:17]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: hm, yes</span></div><div class="line" id="100521"><span class="nick" style="color:#3c5b35"><a href="#100521" label="[10:05:21]">&lt;siraben&gt;</a></span><span class="message">fossy: hm, cool!</span></div><div class="line" id="100529"><span class="nick" style="color:#3c5b35"><a href="#100529" label="[10:05:29]">&lt;siraben&gt;</a></span><span class="message">what about just running it without an initramfs?</span></div><div class="line" id="100539"><span class="nick" style="color:#3c5b35"><a href="#100539" label="[10:05:39]">&lt;siraben&gt;</a></span><span class="message">or does that assume too much from the host system</span></div><div class="line" id="100557"><span class="nick" style="color:#2e2a4a"><a href="#100557" label="[10:05:57]">&lt;fossy&gt;</a></span><span class="message">siraben: do you mean basically running all the scripts without an initramfs?</span></div><div class="line" id="100603"><span class="nick" style="color:#3c5b35"><a href="#100603" label="[10:06:03]">&lt;siraben&gt;</a></span><span class="message">yeah</span></div><div class="line" id="100603"><span class="nick" style="color:#af8d2f"><a href="#100603" label="[10:06:03]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i'am also working on a very similar approach: i want to include all sources in a .xz compressed initrd</span></div><div class="line" id="100621"><span class="nick" style="color:#2e2a4a"><a href="#100621" label="[10:06:21]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: do you have a link? i like collaboration!</span></div><div class="line" id="100649"><span class="nick" style="color:#2e2a4a"><a href="#100649" label="[10:06:49]">&lt;fossy&gt;</a></span><span class="message"> gforce_d11977: what do you have in sysa/mescc-tools-seed?</span></div><div class="line" id="100700"><span class="nick" style="color:#2e2a4a"><a href="#100700" label="[10:07:00]">&lt;fossy&gt;</a></span><span class="message">siraben: i tried that with gcc-seed, it utterly failed</span></div><div class="line" id="100710"><span class="nick" style="color:#2e2a4a"><a href="#100710" label="[10:07:10]">&lt;fossy&gt;</a></span><span class="message">everything after tinycc relies soo much on the host system</span></div><div class="line" id="100710"><span class="nick" style="color:#af8d2f"><a href="#100710" label="[10:07:10]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i will publish the link soonish here (tonight or tomorrow), it needs still a lot cosmetics, sorry about that</span></div><div class="line" id="100718"><span class="nick" style="color:#2e2a4a"><a href="#100718" label="[10:07:18]">&lt;fossy&gt;</a></span><span class="message">so many hardcoded paths etcetc</span></div><div class="line" id="100726"><span class="nick" style="color:#2e2a4a"><a href="#100726" label="[10:07:26]">&lt;fossy&gt;</a></span><span class="message">its just way to hard to ensure reproducibility</span></div><div class="line" id="100731"><span class="nick" style="color:#2e2a4a"><a href="#100731" label="[10:07:31]">&lt;fossy&gt;</a></span><span class="message">and that seeds are not being leaked through</span></div><div class="line" id="100743"><span class="nick" style="color:#2e2a4a"><a href="#100743" label="[10:07:43]">&lt;fossy&gt;</a></span><span class="message">if an initramfs is not used it's not really being bootstrapped anyways</span></div><div class="line" id="100743"><span class="nick" style="color:#3c5b35"><a href="#100743" label="[10:07:43]">&lt;siraben&gt;</a></span><span class="message">Ok right, have to get the reproducibility all the way</span></div><div class="line" id="100802"><span class="nick" style="color:#2e2a4a"><a href="#100802" label="[10:08:02]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: so does live-bootstrap tbh :D</span></div><div class="line" id="100848"><span class="nick" style="color:#2e2a4a"><a href="#100848" label="[10:08:48]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: how are you managing teh creation of the initramfs?</span></div><div class="line" id="100902"><span class="nick" style="color:#af8d2f"><a href="#100902" label="[10:09:02]">&lt;gforce_d11977&gt;</a></span><span class="message">another thing what comes to my mind: how do we solve the problem of making the first hex0.bin executable? for now i include a static 'chmod' binary in my initrd</span></div><div class="line" id="100940"><span class="nick" style="color:#2e2a4a"><a href="#100940" label="[10:09:40]">&lt;fossy&gt;</a></span><span class="message">it is put into the initramfs executable for me</span></div><div class="line" id="100950"><span class="nick" style="color:#2e2a4a"><a href="#100950" label="[10:09:50]">&lt;fossy&gt;</a></span><span class="message">but this is something i will solve when i solve the generation of the initramfs</span></div><div class="line" id="100951"><span class="nick" style="color:#af8d2f"><a href="#100951" label="[10:09:51]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i have a script which downloads all the files to 'step1', 'step2', 'stepN' folders and pipes that to cpio</span></div><div class="line" id="100955"><span class="nick" style="color:#2e2a4a"><a href="#100955" label="[10:09:55]">&lt;fossy&gt;</a></span><span class="message">probably with a floppy</span></div><div class="line" id="100957"><span class="nick" style="color:#2e2a4a"><a href="#100957" label="[10:09:57]">&lt;fossy&gt;</a></span><span class="message">ic</span></div><div class="line" id="101001"><span class="nick" style="color:#2e2a4a"><a href="#101001" label="[10:10:01]">&lt;fossy&gt;</a></span><span class="message">is there any automation involved?</span></div><div class="line" id="101009"><span class="nick" style="color:#2e2a4a"><a href="#101009" label="[10:10:09]">&lt;fossy&gt;</a></span><span class="message">like with the acutla build</span></div><div class="line" id="101011"><span class="nick" style="color:#af8d2f"><a href="#101011" label="[10:10:11]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: yes, fully</span></div><div class="line" id="101032"><span class="nick" style="color:#af8d2f"><a href="#101032" label="[10:10:32]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy, it even runs a test and outputs &quot;OK&quot;</span></div><div class="line" id="101118"><span class="nick" style="color:#af8d2f"><a href="#101118" label="[10:11:18]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: for now it only bootstraps till mes-m2 (i'am so eager to have tcc...)</span></div><div class="line" id="101250"><span class="nick" style="color:#af8d2f"><a href="#101250" label="[10:12:50]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: for now i include a static busybox (with ash, mount, chmod)</span></div><div class="line" id="101844"><span class="nick" style="color:#8dd3c7"><a href="#101844" label="[10:18:44]">&lt;janneke&gt;</a></span><span class="message">the blynn compiler, is that written in M2?</span></div><div class="line" id="103605"><span class="nick" style="color:#2e2a4a"><a href="#103605" label="[10:36:05]">&lt;fossy&gt;</a></span><span class="message">janneke: yes</span></div><div class="line" id="103618"><span class="nick" style="color:#2e2a4a"><a href="#103618" label="[10:36:18]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i see</span></div><div class="line" id="103639"><span class="nick" style="color:#234e69"><a href="#103639" label="[10:36:39]">&lt;xentrac&gt;</a></span><span class="message">The beautiful monks of the crying witch.</span></div><div class="line" id="103648"><span class="nick" style="color:#2e2a4a"><a href="#103648" label="[10:36:48]">&lt;fossy&gt;</a></span><span class="message">you may like to investigate kaem, the bootstrap shell</span></div><div class="line" id="103704"><span class="nick" style="color:#2e2a4a"><a href="#103704" label="[10:37:04]">&lt;fossy&gt;</a></span><span class="message">janneke: well, not quite ask siraben about the details but basically</span></div><div class="line" id="103713"><span class="nick" style="color:#234e69"><a href="#103713" label="[10:37:13]">&lt;xentrac&gt;</a></span><span class="message">oops, mispaste, sorry</span></div><div class="line" id="103743"><span class="nick" style="color:#2e2a4a"><a href="#103743" label="[10:37:43]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="103751"><span class="nick" style="color:#af8d2f"><a href="#103751" label="[10:37:51]">&lt;gforce_d11977&gt;</a></span><span class="message">janneke: see <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/blob/master/vm.c">https://github.com/oriansj/blynn-compiler/blob/master/vm.c</a>  - no fancy c-features anymore</span></div><div class="line" id="103921"><span class="nick" style="color:#af8d2f"><a href="#103921" label="[10:39:21]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: for now I avoid kaem, maybe later...i want to have a 'prompt' so that i can interact with the stuff that was built</span></div><div class="line" id="104017"><span class="nick" style="color:#af8d2f"><a href="#104017" label="[10:40:17]">&lt;gforce_d11977&gt;</a></span><span class="message">(and having a posix-shell with only builtins (no external commands) is OK to me...)</span></div><div class="line" id="104036"><span class="nick" style="color:#2e2a4a"><a href="#104036" label="[10:40:36]">&lt;fossy&gt;</a></span><span class="message">ah, fair enough</span></div><div class="line" id="104052"><span class="nick" style="color:#2e2a4a"><a href="#104052" label="[10:40:52]">&lt;fossy&gt;</a></span><span class="message">maybe i'll add a repl into kaem eventually</span></div><div class="line" id="104134"><span class="nick" style="color:#af8d2f"><a href="#104134" label="[10:41:34]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i even started to make a c-ish compiler in posix shell, but stopped for now... 8-)</span></div><div class="line" id="104336"><span class="nick" style="color:#af8d2f"><a href="#104336" label="[10:43:36]">&lt;gforce_d11977&gt;</a></span><span class="message">i was impressed by the g-language from <a rel="nofollow" href="https://github.com/giomasce/asmc">https://github.com/giomasce/asmc</a>  which is better parseable that C 8-)))</span></div><div class="line" id="104425"><span class="nick" style="color:#2e2a4a"><a href="#104425" label="[10:44:25]">&lt;fossy&gt;</a></span><span class="message">gio_ is here! i really like asmc as well, it works very very well</span></div><div class="line" id="105231"><span class="nick" style="color:#3c5b35"><a href="#105231" label="[10:52:31]">&lt;siraben&gt;</a></span><span class="message">janneke: yes, written in m2-planet</span></div><div class="line" id="105322"><span class="nick" style="color:#3c5b35"><a href="#105322" label="[10:53:22]">&lt;siraben&gt;</a></span><span class="message">it would be possible to skip the C step and write vm.c in assembly, since the &quot;C code generation&quot; is really just pasting various bits together with a large int array</span></div><div class="line" id="111957"><span class="nick" style="color:#2e2a4a"><a href="#111957" label="[11:19:57]">&lt;fossy&gt;</a></span><span class="message">no reason to tho</span></div><div class="line" id="112019"><span class="nick" style="color:#3c5b35"><a href="#112019" label="[11:20:19]">&lt;siraben&gt;</a></span><span class="message">true, it's more work on our side</span></div><div class="line" id="114947"><span class="nick" style="color:#8dd3c7"><a href="#114947" label="[11:49:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've now tested my updated PR, it seems to work</span></div><div class="line" id="115027"><span class="nick" style="color:#8dd3c7"><a href="#115027" label="[11:50:27]">&lt;stikonas&gt;</a></span><span class="message">and actually I don't mind completely removing last Hello test but maybe when tcc is added (when tcc will be testing that mes executable)</span></div><div class="line" id="120402"><span class="nick">***</span><span class="message notice">gio_ is now known as gio</span></div><div class="line" id="125703"><span class="nick" style="color:#6c3d55"><a href="#125703" label="[12:57:03]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: currently the only thing preventing totally parallel tests is the fact that AMD64, AArch64, x86, armv7l, knight-native and knight-posix use the same temp files for the same test. eg one can already fully parallel AMD64 tests but when one does ./test/test1000/hello-amd64.sh  and ./test/test1000/hello-aarch64.sh at the same time they both use the same files. So in that case one needs instead of outputting to the generic</span></div><div class="line" id="125704"><span class="nick" style="color:#6c3d55"><a href="#125704" label="[12:57:04]">&lt;OriansJ&gt;</a></span><span class="message">test/test1000/cc.M1 but instead to a test/test1000/cc-$arch.M1 and duplicating that same tweak for all steps. Then none of the steps will write to the same output files at the same time. (then simply tweak the cleanup scripts to pick up the additional mess) boom done.</span></div><div class="line" id="125745"><span class="nick" style="color:#6c3d55"><a href="#125745" label="[12:57:45]">&lt;OriansJ&gt;</a></span><span class="message">it isn't hard, just a little tedious but creates for a great hey I did this sort of thing.</span></div><div class="line" id="131424"><span class="nick" style="color:#6c3d55"><a href="#131424" label="[13:14:24]">&lt;OriansJ&gt;</a></span><span class="message">gforce_d11977: you can use kaem-optional-seed as your /sbin/init ; you just need to add a kaem.run to where it'll read it and run the mescc-tools-seed build script. Then it can spawn the newly built kaem as your shell (after fossy add support for a REPL) or gash</span></div><div class="line" id="131807"><span class="nick" style="color:#6c3d55"><a href="#131807" label="[13:18:07]">&lt;OriansJ&gt;</a></span><span class="message">shortest way to express my strategy: Novelty first search with a bias towards expanding the number of possible future paths to solution. besides I'd bet money that janneke never thought a haskell compiler would show up lower in the bootstrap path than GCC.</span></div><div class="line" id="132014"><span class="nick" style="color:#8dd3c7"><a href="#132014" label="[13:20:14]">&lt;janneke&gt;</a></span><span class="message">given that haskell doesn't have a proper bootstrap story, i wonder who could predict that</span></div><div class="line" id="132033"><span class="nick" style="color:#8dd3c7"><a href="#132033" label="[13:20:33]">&lt;janneke&gt;</a></span><span class="message">let's not forget that we don't have a path from the haskell compiler to GCC yet</span></div><div class="line" id="132044"><span class="nick" style="color:#8dd3c7"><a href="#132044" label="[13:20:44]">&lt;janneke&gt;</a></span><span class="message">many things have &quot;shown up&quot;, right?</span></div><div class="line" id="132105"><span class="nick" style="color:#6c3d55"><a href="#132105" label="[13:21:05]">&lt;OriansJ&gt;</a></span><span class="message">and if we go for full r7rs-small compatibility in the lisp written in Haskell; then Gnu Mes becomes a Haskell interpreter for scheme with a C compiler written in scheme able to bootstrap the blynn-compiler haskell interpreter</span></div><div class="line" id="132137"><span class="nick" style="color:#8dd3c7"><a href="#132137" label="[13:21:37]">&lt;janneke&gt;</a></span><span class="message">sounds lovely</span></div><div class="line" id="132137"><span class="nick" style="color:#6c3d55"><a href="#132137" label="[13:21:37]">&lt;OriansJ&gt;</a></span><span class="message">written in C</span></div><div class="line" id="132213"><span class="nick" style="color:#6c3d55"><a href="#132213" label="[13:22:13]">&lt;OriansJ&gt;</a></span><span class="message">also it would allow us to drop guile from the guix bootstrap entirely</span></div><div class="line" id="132246"><span class="nick" style="color:#6c3d55"><a href="#132246" label="[13:22:46]">&lt;OriansJ&gt;</a></span><span class="message">it'll become once you have Gnu Mes, you are bootstrapped.</span></div><div class="line" id="132338"><span class="nick" style="color:#6d2462"><a href="#132338" label="[13:23:38]">&lt;Hagfish&gt;</a></span><span class="message">that solution to the parallel test suite doesn't sound too bad.  what about putting the arch name in the directory instead of the filename?</span></div><div class="line" id="132420"><span class="nick" style="color:#6c3d55"><a href="#132420" label="[13:24:20]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: could be done that way too but it just requires someone to do the tedious changes.</span></div><div class="line" id="132630"><span class="nick" style="color:#6c3d55"><a href="#132630" label="[13:26:30]">&lt;OriansJ&gt;</a></span><span class="message">siraben: do you think something like this <a rel="nofollow" href="https://github.com/justinethier/husk-scheme">https://github.com/justinethier/husk-scheme</a>  could be fudged into working on blynn-compiler?</span></div><div class="line" id="133312"><span class="nick" style="color:#af8d2f"><a href="#133312" label="[13:33:12]">&lt;gforce_d11977&gt;</a></span><span class="message">OriansJ: fossy: when REPL in kaem is ready, i can simply switch, but these are &quot;long hanging fruits&quot;</span></div><div class="line" id="133640"><span class="nick" style="color:#6c3d55"><a href="#133640" label="[13:36:40]">&lt;OriansJ&gt;</a></span><span class="message">gforce_d11977: there are always lots of low hanging fruits because they are great entry points for other programmers to step in and start feeling productive.</span></div><div class="line" id="141133"><span class="nick" style="color:#af8d2f"><a href="#141133" label="[14:11:33]">&lt;gforce_d11977&gt;</a></span><span class="message">OriansJ: hope this was not meant as a sidekick to me 8-) you are right</span></div><div class="line" id="143156"><span class="nick" style="color:#6c3d55"><a href="#143156" label="[14:31:56]">&lt;OriansJ&gt;</a></span><span class="message">siraben: although if doing it from scratch is more fun; do that instead. ^_^</span></div><div class="line" id="143240"><span class="nick" style="color:#6c3d55"><a href="#143240" label="[14:32:40]">&lt;OriansJ&gt;</a></span><span class="message">gforce_d11977: I encourage people to do what they think is fun or interesting. Choose what makes you happy ^_^</span></div><div class="line" id="143313"><span class="nick" style="color:#3c5b35"><a href="#143313" label="[14:33:13]">&lt;siraben&gt;</a></span><span class="message">OriansJ: it would take a lot of effort to make it work in blynn-compiler</span></div><div class="line" id="143331"><span class="nick" style="color:#3c5b35"><a href="#143331" label="[14:33:31]">&lt;siraben&gt;</a></span><span class="message">I'm planning on porting mine github.com/siraben/r5rs-denot which doesn't use much fancy features</span></div><div class="line" id="143345"><span class="nick" style="color:#3c5b35"><a href="#143345" label="[14:33:45]">&lt;siraben&gt;</a></span><span class="message">Also, it can be verified by comparing against the R5RS language spec</span></div><div class="line" id="183718"><span class="nick" style="color:#6c3d55"><a href="#183718" label="[18:37:18]">&lt;OriansJ&gt;</a></span><span class="message">siraben: sounds good to me</span></div><div class="line" id="185304"><span class="nick" style="color:#2e2a4a"><a href="#185304" label="[18:53:04]">&lt;vancz&gt;</a></span><span class="message">maybe after nothing-up-my-sleeve numbers we can have nothing-up-my-sleeve compilers</span></div><div class="line" id="185322"><span class="nick" style="color:#2e2a4a"><a href="#185322" label="[18:53:22]">&lt;vancz&gt;</a></span><span class="message">(someone find a bootstrap source in the digits of pi?)</span></div><div class="line" id="190555"><span class="nick" style="color:#8dd3c7"><a href="#190555" label="[19:05:55]">&lt;stikonas&gt;</a></span><span class="message">while it almost certainly (certainly not proven) exists somewhere in the decimal expansion of pi (just like any other random subsequence), finding it is impossible</span></div><div class="line" id="190733"><span class="nick" style="color:#234e69"><a href="#190733" label="[19:07:33]">&lt;xentrac&gt;</a></span><span class="message">perhaps</span></div><div class="line" id="190747"><span class="nick" style="color:#8dd3c7"><a href="#190747" label="[19:07:47]">&lt;stikonas&gt;</a></span><span class="message">well, almost all real numbers share this property</span></div><div class="line" id="190807"><span class="nick" style="color:#234e69"><a href="#190807" label="[19:08:07]">&lt;xentrac&gt;</a></span><span class="message">I mean, it might not be impossible</span></div><div class="line" id="191020"><span class="nick" style="color:#3c5b35"><a href="#191020" label="[19:10:20]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://cs.stackexchange.com/questions/42464/are-there-any-compression-algorithms-based-on-pi">https://cs.stackexchange.com/questions/42464/are-there-any-compression-algorithms-based-on-pi</a> </span></div><div class="line" id="191030"><span class="nick" style="color:#8dd3c7"><a href="#191030" label="[19:10:30]">&lt;stikonas&gt;</a></span><span class="message">well, if it's 300 byte sequence, that's probably ~750 digit sequency you are looking for</span></div><div class="line" id="191229"><span class="nick" style="color:#6b8072"><a href="#191229" label="[19:12:29]">&lt;malina&gt;</a></span><span class="message">as &quot;almost certainly&quot; as finding that every irrational number is really rational.</span></div><div class="line" id="191312"><span class="nick" style="color:#8dd3c7"><a href="#191312" label="[19:13:12]">&lt;stikonas&gt;</a></span><span class="message">so you'll have to check about 10^750 digits before finding the right place</span></div><div class="line" id="191427"><span class="nick" style="color:#8dd3c7"><a href="#191427" label="[19:14:27]">&lt;stikonas&gt;</a></span><span class="message">that is way more than age of universe in plank time * number of subatomic particles in visible universe</span></div><div class="line" id="191454"><span class="nick" style="color:#6b8072"><a href="#191454" label="[19:14:54]">&lt;malina&gt;</a></span><span class="message">no, any sequence has a 10^-750 chance of holding a 300 byte sequence then, assuming a non weighted sequence, something PI isn't..</span></div><div class="line" id="191520"><span class="nick" style="color:#6b8072"><a href="#191520" label="[19:15:20]">&lt;malina&gt;</a></span><span class="message">so the chances are even less. so  as Stikonas says. not very likely ,)</span></div><div class="line" id="191629"><span class="nick" style="color:#6b8072"><a href="#191629" label="[19:16:29]">&lt;malina&gt;</a></span><span class="message">although I am not much of science's boogeymen like claims like &quot;planck seconds * molecules in the visible universe'&quot; . cute despite claims of making good estimates</span></div><div class="line" id="191654"><span class="nick" style="color:#6b8072"><a href="#191654" label="[19:16:54]">&lt;malina&gt;</a></span><span class="message">they are just as likely to be so off, it is totally non-sequitur</span></div><div class="line" id="191713"><span class="nick" style="color:#8dd3c7"><a href="#191713" label="[19:17:13]">&lt;stikonas&gt;</a></span><span class="message">anyway, I was just saying no computer will ever find that sequence</span></div><div class="line" id="191718"><span class="nick" style="color:#6b8072"><a href="#191718" label="[19:17:18]">&lt;malina&gt;</a></span><span class="message">ye I know :)</span></div><div class="line" id="191729"><span class="nick" style="color:#8dd3c7"><a href="#191729" label="[19:17:29]">&lt;stikonas&gt;</a></span><span class="message">unless somebody writes much shorter bootstrap sequence</span></div><div class="line" id="191732"><span class="nick" style="color:#8dd3c7"><a href="#191732" label="[19:17:32]">&lt;stikonas&gt;</a></span><span class="message">than 300 bytes</span></div><div class="line" id="191733"><span class="nick" style="color:#234e69"><a href="#191733" label="[19:17:33]">&lt;xentrac&gt;</a></span><span class="message">stikonas: there might exist an efficient pi-specific search algorithm</span></div><div class="line" id="191740"><span class="nick" style="color:#6b8072"><a href="#191740" label="[19:17:40]">&lt;malina&gt;</a></span><span class="message">I know people might _think_ I come across as this or that but I am far more benign than it seems. ,x</span></div><div class="line" id="193125"><span class="nick" style="color:#6d2462"><a href="#193125" label="[19:31:25]">&lt;Hagfish&gt;</a></span><span class="message">maybe you should change your nick then?</span></div><div class="line" id="193159"><span class="nick" style="color:#6d2462"><a href="#193159" label="[19:31:59]">&lt;Hagfish&gt;</a></span><span class="message">anyway, if you wanted the bootstrap sequence to appear in pi, it might be simpler to design a CPU whose machine code happens to make the digits of pi a valid bootstrap program</span></div><div class="line" id="194033"><span class="nick" style="color:#234e69"><a href="#194033" label="[19:40:33]">&lt;xentrac&gt;</a></span><span class="message">not sure how much that helps</span></div><div class="line" id="194248"><span class="nick" style="color:#234e69"><a href="#194248" label="[19:42:48]">&lt;xentrac&gt;</a></span><span class="message">afaik it's an open question whether pi is simply normal in any base</span></div><div class="line" id="194714"><span class="nick" style="color:#8dd3c7"><a href="#194714" label="[19:47:14]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: yeah, that would be eaiser to design CPU that way. Might be even not too hard</span></div><div class="line" id="194803"><span class="nick" style="color:#8dd3c7"><a href="#194803" label="[19:48:03]">&lt;stikonas&gt;</a></span><span class="message">xentrac: yes, but you'll just choose opcode values to match what you already have in the sequence</span></div><div class="line" id="194832"><span class="nick" style="color:#8dd3c7"><a href="#194832" label="[19:48:32]">&lt;stikonas&gt;</a></span><span class="message">that will obviously be very artificial arch....</span></div><div class="line" id="194849"><span class="nick" style="color:#6b8072"><a href="#194849" label="[19:48:49]">&lt;malina&gt;</a></span><span class="message">who should change their nick Hagfish ?</span></div><div class="line" id="194855"><span class="nick" style="color:#6b8072"><a href="#194855" label="[19:48:55]">&lt;malina&gt;</a></span><span class="message">xentrac, stikonas, I?</span></div><div class="line" id="194955"><span class="nick" style="color:#6b8072"><a href="#194955" label="[19:49:55]">&lt;malina&gt;</a></span><span class="message">if me, ye I can grasp that if my nick was hag fish, but mine is malina. It shouldn't be too malignant at all for normal people. I know it's irc but I still rate normal people over the freaks. ,x</span></div><div class="line" id="195012"><span class="nick" style="color:#234e69"><a href="#195012" label="[19:50:12]">&lt;xentrac&gt;</a></span><span class="message">here, we rate freaks over normal people</span></div><div class="line" id="195020"><span class="nick" style="color:#234e69"><a href="#195020" label="[19:50:20]">&lt;xentrac&gt;</a></span><span class="message">that's why we can do things normal people can't</span></div><div class="line" id="195041"><span class="nick" style="color:#234e69"><a href="#195041" label="[19:50:41]">&lt;xentrac&gt;</a></span><span class="message">go back to swilling Budweiser and yellingat your TV, malina</span></div><div class="line" id="195445"><span class="nick" style="color:#80b1d3"><a href="#195445" label="[19:54:45]">&lt;rain1&gt;</a></span><span class="message">hello</span></div><div class="line" id="195509"><span class="nick" style="color:#234e69"><a href="#195509" label="[19:55:09]">&lt;xentrac&gt;</a></span><span class="message">malina: we freaks have no reason to put up with your bullshit.  fuck off</span></div><div class="line" id="195528"><span class="nick" style="color:#234e69"><a href="#195528" label="[19:55:28]">&lt;xentrac&gt;</a></span><span class="message">get out and stay out</span></div><div class="line" id="195627"><span class="nick" style="color:#234e69"><a href="#195627" label="[19:56:27]">&lt;xentrac&gt;</a></span><span class="message">rain1: hello!  how are you doing?</span></div><div class="line" id="195648"><span class="nick" style="color:#80b1d3"><a href="#195648" label="[19:56:48]">&lt;rain1&gt;</a></span><span class="message">i have never been better</span></div><div class="line" id="195703"><span class="nick" style="color:#80b1d3"><a href="#195703" label="[19:57:03]">&lt;rain1&gt;</a></span><span class="message">hope things are going well for you!</span></div><div class="line" id="195850"><span class="nick" style="color:#234e69"><a href="#195850" label="[19:58:50]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful!  I'm not dead yet!</span></div><div class="line" id="201533"><span class="nick" style="color:#2e2a4a"><a href="#201533" label="[20:15:33]">&lt;vancz&gt;</a></span><span class="message">;PP &lt;stikonas&gt; so you'll have to check about 10^750 digits before finding the right place</span></div><div class="line" id="202720"><span class="nick" style="color:#389600"><a href="#202720" label="[20:27:20]">&lt;yt_&gt;</a></span><span class="message">OriansJ: thanks for the super quick review.  the quick turnaround time on patches honestly is one of the best things about contributing to this project: doing cool things and then seeing those included within hours is fantastic</span></div><div class="line" id="204038"><span class="nick" style="color:#6d2462"><a href="#204038" label="[20:40:38]">&lt;Hagfish&gt;</a></span><span class="message">malina: if you are more benign than it seems, perhaps you should change your name to benina :)</span></div><div class="line" id="204609"><span class="nick" style="color:#6d2462"><a href="#204609" label="[20:46:09]">&lt;Hagfish&gt;</a></span><span class="message">xentrac: i appreciate you standing up for the freaks :) but please try to be civil in expressing your objection to malina.  treat this as a teaching opportunity, that we can all learn from</span></div><div class="line" id="204630"><span class="nick" style="color:#6b8072"><a href="#204630" label="[20:46:30]">&lt;malina&gt;</a></span><span class="message">hag fish! I see your point now :D</span></div><div class="line" id="204636"><span class="nick" style="color:#6b8072"><a href="#204636" label="[20:46:36]">&lt;malina&gt;</a></span><span class="message">and it was good &quot;[</span></div><div class="line" id="204639"><span class="nick" style="color:#6b8072"><a href="#204639" label="[20:46:39]">&lt;malina&gt;</a></span><span class="message">:P*</span></div><div class="line" id="204827"><span class="nick" style="color:#6d2462"><a href="#204827" label="[20:48:27]">&lt;Hagfish&gt;</a></span><span class="message">&quot;hag&quot; and &quot;fish&quot; are two separate words, but &quot;hagfish&quot; is itself a single word (just in case you weren't aware)</span></div><div class="line" id="204830"><span class="nick" style="color:#6b8072"><a href="#204830" label="[20:48:30]">&lt;malina&gt;</a></span><span class="message">I'll let the freak alone</span></div><div class="line" id="204858"><span class="nick" style="color:#6b8072"><a href="#204858" label="[20:48:58]">&lt;malina&gt;</a></span><span class="message">is Budweiser an American thing? I'd go for Orval if I were to enjoy ales, me thinks.</span></div><div class="line" id="205239"><span class="nick" style="color:#6b8072"><a href="#205239" label="[20:52:39]">&lt;malina&gt;</a></span><span class="message">you sound kinda just as passive aggressive as the muted one. I don't think there are spaces allowed in irc names, yes? So to be fair, contracted nicks don't always entail intentions of making two words into one</span></div><div class="line" id="205325"><span class="nick" style="color:#6d2462"><a href="#205325" label="[20:53:25]">&lt;Hagfish&gt;</a></span><span class="message">absolutely, your parsing of it was completely understandable</span></div><div class="line" id="205335"><span class="nick" style="color:#6b8072"><a href="#205335" label="[20:53:35]">&lt;malina&gt;</a></span><span class="message">my tab will make sure your nick is usually used Hagfish , even if I would by chance type out hag fish, instead of hagfish ^^.</span></div><div class="line" id="205337"><span class="nick" style="color:#6d2462"><a href="#205337" label="[20:53:37]">&lt;Hagfish&gt;</a></span><span class="message">please don't interpret my words as passive aggressive though</span></div><div class="line" id="205341"><span class="nick" style="color:#6b8072"><a href="#205341" label="[20:53:41]">&lt;malina&gt;</a></span><span class="message">anyway,</span></div><div class="line" id="205429"><span class="nick" style="color:#6d2462"><a href="#205429" label="[20:54:29]">&lt;Hagfish&gt;</a></span><span class="message">if your tab completion removes spaces, that's quite clever</span></div><div class="line" id="205507"><span class="nick" style="color:#6b8072"><a href="#205507" label="[20:55:07]">&lt;malina&gt;</a></span><span class="message">well, it just seems so, but it's just the classic people blowing up , it's irc ,I'm used to it. no worries. moving on, so this schema, is used other places than guix or was it developed for guix specfically?</span></div><div class="line" id="205730"><span class="nick" style="color:#6d2462"><a href="#205730" label="[20:57:30]">&lt;Hagfish&gt;</a></span><span class="message">there was talk that debian could use it for their bootstrapping efforts, but i guess it depends which distros are most motivated to do the work to make use of it</span></div><div class="line" id="205954"><span class="nick" style="color:#6b8072"><a href="#205954" label="[20:59:54]">&lt;malina&gt;</a></span><span class="message">from past days and seeing you guys  at it, I see it being related to mescc which is scheme dependent yes?</span></div><div class="line" id="210102"><span class="nick" style="color:#6b8072"><a href="#210102" label="[21:01:02]">&lt;malina&gt;</a></span><span class="message">well, IF the path of least resistance is to use .scm to bootstrap , then I don't mind as much bringing it in as that, although I _should_ of course spend the time to replicate whatever .scm has done to glue the m2-planet &lt;=&gt; ...&lt;=&gt; tcc....gcc....</span></div><div class="line" id="213423"><span class="nick" style="color:#80b1d3"><a href="#213423" label="[21:34:23]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bpa.st/53FQ">https://bpa.st/53FQ</a>  this was the commands i used to build everything from stage0 to tinycc</span></div><div class="line" id="213816"><span class="nick" style="color:#6d2462"><a href="#213816" label="[21:38:16]">&lt;Hagfish&gt;</a></span><span class="message">rain1: a work of art, thank you :)</span></div><div class="line" id="213847"><span class="nick" style="color:#6d2462"><a href="#213847" label="[21:38:47]">&lt;Hagfish&gt;</a></span><span class="message">could this step be changed, though: &quot;wget <a rel="nofollow" href="http://download.savannah.nongnu.org/...">http://download.savannah.nongnu.org/...</a>&quot;  to use https?</span></div><div class="line" id="213935"><span class="nick" style="color:#80b1d3"><a href="#213935" label="[21:39:35]">&lt;rain1&gt;</a></span><span class="message">yes! works with https ty</span></div><div class="line" id="214006"><span class="nick" style="color:#6d2462"><a href="#214006" label="[21:40:06]">&lt;Hagfish&gt;</a></span><span class="message">it would be nice if wget let you specify a hash</span></div><div class="line" id="214126"><span class="nick" style="color:#6d2462"><a href="#214126" label="[21:41:26]">&lt;Hagfish&gt;</a></span><span class="message">someone requested that be an option to curl, but it was closed as wontfix in 2017: <a rel="nofollow" href="https://github.com/curl/curl/issues/1399">https://github.com/curl/curl/issues/1399</a> </span></div><div class="line" id="214411"><span class="nick" style="color:#6b8072"><a href="#214411" label="[21:44:11]">&lt;malina&gt;</a></span><span class="message">cheers rain1  Hagfish , yes that would be a nice feature. I work a lot on these things in my package manager. and of course almost a decade ago, I wanted to incorporate 'kademlia' into my backend. As I say, guix is kinda my 'rival' in the sense, I see most of the stuff I think about, appear in guix. Which is a good thing, in the sense, better that than somehting awfully proprietary ,p</span></div><div class="line" id="214459"><span class="nick" style="color:#6b8072"><a href="#214459" label="[21:44:59]">&lt;malina&gt;</a></span><span class="message">I just fixed LFS sources yesterday to use b2sums at the very elast instead of md5sums, they can be stubborn :p but ye, to update their sums, I was doing wget $url -O- | b2sum ...</span></div><div class="line" id="214543"><span class="nick" style="color:#6b8072"><a href="#214543" label="[21:45:43]">&lt;malina&gt;</a></span><span class="message">IF I get time, I might see if I might patch something to do something a la, that idea in that link Hagfish . very nice feature request. shame it was closed down.</span></div><div class="line" id="214637"><span class="nick" style="color:#80b1d3"><a href="#214637" label="[21:46:37]">&lt;rain1&gt;</a></span><span class="message">i did this with my LFS system, hash everything downloaded :D</span></div><div class="line" id="214721"><span class="nick" style="color:#6b8072"><a href="#214721" label="[21:47:21]">&lt;malina&gt;</a></span><span class="message">OH, rain1 have I seen you in #lfs perhaps?</span></div><div class="line" id="214743"><span class="nick" style="color:#6b8072"><a href="#214743" label="[21:47:43]">&lt;malina&gt;</a></span><span class="message">if yo uhave been there in the past 4 years you might have come across me there, although I am often away for months.</span></div><div class="line" id="214803"><span class="nick" style="color:#80b1d3"><a href="#214803" label="[21:48:03]">&lt;rain1&gt;</a></span><span class="message">maybe a while back!</span></div><div class="line" id="214807"><span class="nick" style="color:#6b8072"><a href="#214807" label="[21:48:07]">&lt;malina&gt;</a></span><span class="message">yes, I use b3sum in my system rain1, after years of sha35 (sha3-512)</span></div><div class="line" id="214817"><span class="nick" style="color:#80b1d3"><a href="#214817" label="[21:48:17]">&lt;rain1&gt;</a></span><span class="message">yeah probably did</span></div><div class="line" id="214857"><span class="nick" style="color:#6b8072"><a href="#214857" label="[21:48:57]">&lt;malina&gt;</a></span><span class="message">my package formats break so much, which is why I don't offer my distro to people.. I woud only have &quot;oh why is this broken&quot;, and then I would be on support 24/7 instead of actually devving along :D</span></div><div class="line" id="214929"><span class="nick" style="color:#80b1d3"><a href="#214929" label="[21:49:29]">&lt;rain1&gt;</a></span><span class="message">mny prob is all software is constantly updating and i can't possibly keep up</span></div><div class="line" id="214937"><span class="nick" style="color:#80b1d3"><a href="#214937" label="[21:49:37]">&lt;rain1&gt;</a></span><span class="message">and figure out which versions are compatable which</span></div><div class="line" id="215022"><span class="nick" style="color:#6b8072"><a href="#215022" label="[21:50:22]">&lt;malina&gt;</a></span><span class="message">I know :) that's what I lament about always.. _time_. luckily bug time isn't bad, but 'being current' is. and the backlog on 'features' which is what I _really_ want to do has suffered immensely sigh.</span></div><div class="line" id="215115"><span class="nick" style="color:#6b8072"><a href="#215115" label="[21:51:15]">&lt;malina&gt;</a></span><span class="message">err /home/build-logs/something</span></div><div class="line" id="215215"><span class="nick" style="color:#6b8072"><a href="#215215" label="[21:52:15]">&lt;malina&gt;</a></span><span class="message">will show me the compile error and it doesn't take too long to patch stuff. I feel my distro is top tier, so i don't worry abotu bugs too much. it's more features, which I lag behind in years now, being solo :(  but ye, lfs is a desolate passion. :D</span></div><div class="line" id="223745"><span class="nick" style="color:#6b8072"><a href="#223745" label="[22:37:45]">&lt;malina&gt;</a></span><span class="message">rain1, your paste, is it for 32 bit btw or 64 bit machine?</span></div><div class="line" id="224009"><span class="nick" style="color:#80b1d3"><a href="#224009" label="[22:40:09]">&lt;rain1&gt;</a></span><span class="message">im on a 64 bit machine but this builds 32 bit mescc I think, that is the only arch available</span></div><div class="line" id="224034"><span class="nick" style="color:#6b8072"><a href="#224034" label="[22:40:34]">&lt;malina&gt;</a></span><span class="message">yes, I saw now as I trying it.</span></div><div class="line" id="224038"><span class="nick" style="color:#80b1d3"><a href="#224038" label="[22:40:38]">&lt;rain1&gt;</a></span><span class="message">let me check the tinycc binary</span></div><div class="line" id="224045"><span class="nick" style="color:#6b8072"><a href="#224045" label="[22:40:45]">&lt;malina&gt;</a></span><span class="message">it's 32 bit :)</span></div><div class="line" id="224055"><span class="nick" style="color:#80b1d3"><a href="#224055" label="[22:40:55]">&lt;rain1&gt;</a></span><span class="message">yes</span></div><div class="line" id="224057"><span class="nick" style="color:#6b8072"><a href="#224057" label="[22:40:57]">&lt;malina&gt;</a></span><span class="message">but running your paste as-is, it didn't find:</span></div><div class="line" id="224125"><span class="nick" style="color:#6b8072"><a href="#224125" label="[22:41:25]">&lt;malina&gt;</a></span><span class="message">mes/pre-inst-env</span></div><div class="line" id="224139"><span class="nick" style="color:#8dd3c7"><a href="#224139" label="[22:41:39]">&lt;stikonas&gt;</a></span><span class="message">mes pre-inst-env is only available after configure</span></div><div class="line" id="224143"><span class="nick" style="color:#6b8072"><a href="#224143" label="[22:41:43]">&lt;malina&gt;</a></span><span class="message">I will see if , I forgot ot actually double vet the thing. :)</span></div><div class="line" id="224144"><span class="nick" style="color:#8dd3c7"><a href="#224144" label="[22:41:44]">&lt;stikonas&gt;</a></span><span class="message">that's fine</span></div><div class="line" id="224158"><span class="nick" style="color:#8dd3c7"><a href="#224158" label="[22:41:58]">&lt;stikonas&gt;</a></span><span class="message">isn't it juts a warning</span></div><div class="line" id="224213"><span class="nick" style="color:#8dd3c7"><a href="#224213" label="[22:42:13]">&lt;stikonas&gt;</a></span><span class="message">when mescc runs pre-inst-env will already exist</span></div><div class="line" id="224217"><span class="nick" style="color:#6b8072"><a href="#224217" label="[22:42:17]">&lt;malina&gt;</a></span><span class="message">it is stikonas</span></div><div class="line" id="224228"><span class="nick" style="color:#6b8072"><a href="#224228" label="[22:42:28]">&lt;malina&gt;</a></span><span class="message">roger</span></div><div class="line" id="224228"><span class="nick" style="color:#8dd3c7"><a href="#224228" label="[22:42:28]">&lt;stikonas&gt;</a></span><span class="message">in any case, you can build mes without it...</span></div><div class="line" id="224237"><span class="nick" style="color:#8dd3c7"><a href="#224237" label="[22:42:37]">&lt;stikonas&gt;</a></span><span class="message">I just did that yesterday</span></div><div class="line" id="224309"><span class="nick" style="color:#6b8072"><a href="#224309" label="[22:43:09]">&lt;malina&gt;</a></span><span class="message">I built this 2 days ago the first bit, but minute the wip scm guix stuff came into play i thougth, none of this I know, at all.</span></div><div class="line" id="224330"><span class="nick" style="color:#8dd3c7"><a href="#224330" label="[22:43:30]">&lt;stikonas&gt;</a></span><span class="message">rain1: do you need MES_SOURCE?</span></div><div class="line" id="224345"><span class="nick" style="color:#80b1d3"><a href="#224345" label="[22:43:45]">&lt;rain1&gt;</a></span><span class="message">I think that we do</span></div><div class="line" id="224353"><span class="nick" style="color:#80b1d3"><a href="#224353" label="[22:43:53]">&lt;rain1&gt;</a></span><span class="message">but maybe MES_PREFIX is enough</span></div><div class="line" id="224410"><span class="nick" style="color:#8dd3c7"><a href="#224410" label="[22:44:10]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe for tinycc...</span></div><div class="line" id="224942"><span class="nick" style="color:#8dd3c7"><a href="#224942" label="[22:49:42]">&lt;stikonas&gt;</a></span><span class="message">it was a bit harder to get everything in live-bootstrap, but I think, it's now close too</span></div><div class="line" id="225015"><span class="nick" style="color:#8dd3c7"><a href="#225015" label="[22:50:15]">&lt;stikonas&gt;</a></span><span class="message">kaem is a bit more limitted and buggy than bash...</span></div><div class="line" id="225059"><span class="nick" style="color:#80b1d3"><a href="#225059" label="[22:50:59]">&lt;rain1&gt;</a></span><span class="message">very very limited</span></div><div class="line" id="225110"><span class="nick" style="color:#80b1d3"><a href="#225110" label="[22:51:10]">&lt;rain1&gt;</a></span><span class="message">it was originally just to run a sequence of commands, not sure if it grew</span></div><div class="line" id="225113"><span class="nick" style="color:#80b1d3"><a href="#225113" label="[22:51:13]">&lt;rain1&gt;</a></span><span class="message">extra functionality</span></div><div class="line" id="225135"><span class="nick" style="color:#8dd3c7"><a href="#225135" label="[22:51:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, but even sequence of commands was tricky...</span></div><div class="line" id="225140"><span class="nick" style="color:#80b1d3"><a href="#225140" label="[22:51:40]">&lt;rain1&gt;</a></span><span class="message">but i suppose once we have mes we can probably run gash? anyone know if that is true</span></div><div class="line" id="225147"><span class="nick" style="color:#8dd3c7"><a href="#225147" label="[22:51:47]">&lt;stikonas&gt;</a></span><span class="message">e.g. mescc needed to run command containing quotes</span></div><div class="line" id="225151"><span class="nick" style="color:#8dd3c7"><a href="#225151" label="[22:51:51]">&lt;stikonas&gt;</a></span><span class="message">and that failed</span></div><div class="line" id="225155"><span class="nick" style="color:#8dd3c7"><a href="#225155" label="[22:51:55]">&lt;stikonas&gt;</a></span><span class="message">rain1: no</span></div><div class="line" id="225210"><span class="nick" style="color:#8dd3c7"><a href="#225210" label="[22:52:10]">&lt;stikonas&gt;</a></span><span class="message">neither gash  nor bootar run on mes</span></div><div class="line" id="225213"><span class="nick" style="color:#80b1d3"><a href="#225213" label="[22:52:13]">&lt;rain1&gt;</a></span><span class="message">ok</span></div><div class="line" id="225217"><span class="nick" style="color:#80b1d3"><a href="#225217" label="[22:52:17]">&lt;rain1&gt;</a></span><span class="message">what is bootar?</span></div><div class="line" id="225229"><span class="nick" style="color:#8dd3c7"><a href="#225229" label="[22:52:29]">&lt;stikonas&gt;</a></span><span class="message">tar/gzip/bzip/xz implementation in guile</span></div><div class="line" id="225248"><span class="nick" style="color:#8dd3c7"><a href="#225248" label="[22:52:48]">&lt;stikonas&gt;</a></span><span class="message">that's basically where guix bootstrap starts</span></div><div class="line" id="225343"><span class="nick" style="color:#8dd3c7"><a href="#225343" label="[22:53:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, bash is probably not that hard to compile once you have tcc</span></div><div class="line" id="225407"><span class="nick" style="color:#8dd3c7"><a href="#225407" label="[22:54:07]">&lt;stikonas&gt;</a></span><span class="message">I tried gzip and it's quite easy</span></div><div class="line" id="225413"><span class="nick" style="color:#80b1d3"><a href="#225413" label="[22:54:13]">&lt;rain1&gt;</a></span><span class="message">woah \</span></div><div class="line" id="225413"><span class="nick" style="color:#8dd3c7"><a href="#225413" label="[22:54:13]">&lt;stikonas&gt;</a></span><span class="message">even without ./configure</span></div><div class="line" id="225419"><span class="nick" style="color:#80b1d3"><a href="#225419" label="[22:54:19]">&lt;rain1&gt;</a></span><span class="message">is that going to be the next thing?</span></div><div class="line" id="225425"><span class="nick" style="color:#8dd3c7"><a href="#225425" label="[22:54:25]">&lt;stikonas&gt;</a></span><span class="message">probably...</span></div><div class="line" id="225434"><span class="nick" style="color:#80b1d3"><a href="#225434" label="[22:54:34]">&lt;rain1&gt;</a></span><span class="message">or maybe the C impl. of these tools can be built with tcc?</span></div><div class="line" id="225434"><span class="nick" style="color:#8dd3c7"><a href="#225434" label="[22:54:34]">&lt;stikonas&gt;</a></span><span class="message">fossy is still writing tcc compilation script</span></div><div class="line" id="225442"><span class="nick" style="color:#8dd3c7"><a href="#225442" label="[22:54:42]">&lt;stikonas&gt;</a></span><span class="message">well, gzip can</span></div><div class="line" id="225455"><span class="nick" style="color:#8dd3c7"><a href="#225455" label="[22:54:55]">&lt;stikonas&gt;</a></span><span class="message">I tried with bash to test but can be easily done in kaem</span></div><div class="line" id="225523"><span class="nick" style="color:#8dd3c7"><a href="#225523" label="[22:55:23]">&lt;stikonas&gt;</a></span><span class="message">something like for f in *.c; do $CC -c $f; done</span></div><div class="line" id="225554"><span class="nick" style="color:#8dd3c7"><a href="#225554" label="[22:55:54]">&lt;stikonas&gt;</a></span><span class="message">bash is maybe a bit trickier...</span></div><div class="line" id="225718"><span class="nick" style="color:#80b1d3"><a href="#225718" label="[22:57:18]">&lt;rain1&gt;</a></span><span class="message">nice</span></div><div class="line" id="225720"><span class="nick" style="color:#80b1d3"><a href="#225720" label="[22:57:20]">&lt;rain1&gt;</a></span><span class="message">yes bash is hard</span></div><div class="line" id="225734"><span class="nick" style="color:#2e2a4a"><a href="#225734" label="[22:57:34]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah im getting there</span></div><div class="line" id="225746"><span class="nick" style="color:#2e2a4a"><a href="#225746" label="[22:57:46]">&lt;fossy&gt;</a></span><span class="message">MES_DEBUG=5 FTW for finding compilation errors</span></div><div class="line" id="225759"><span class="nick" style="color:#80b1d3"><a href="#225759" label="[22:57:59]">&lt;rain1&gt;</a></span><span class="message">here is a makes file to build bash <a rel="nofollow" href="https://gist.github.com/rain-1/f3434f4b12147d5ef62369e511a184de">https://gist.github.com/rain-1/f3434f4b12147d5ef62369e511a184de</a> </span></div><div class="line" id="225815"><span class="nick" style="color:#2e2a4a"><a href="#225815" label="[22:58:15]">&lt;fossy&gt;</a></span><span class="message">stikonas: can you plz let me know if you find any other kaem bugs. it is still qutie buggy yes</span></div><div class="line" id="225823"><span class="nick" style="color:#8dd3c7"><a href="#225823" label="[22:58:23]">&lt;stikonas&gt;</a></span><span class="message">does bash introduce dependency on pipes in bootstrapped kernel</span></div><div class="line" id="225831"><span class="nick" style="color:#2e2a4a"><a href="#225831" label="[22:58:31]">&lt;fossy&gt;</a></span><span class="message">most likely. hm</span></div><div class="line" id="225853"><span class="nick" style="color:#8dd3c7"><a href="#225853" label="[22:58:53]">&lt;stikonas&gt;</a></span><span class="message">so probably need to build kernel first later...</span></div><div class="line" id="225859"><span class="nick" style="color:#2e2a4a"><a href="#225859" label="[22:58:59]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="225900"><span class="nick" style="color:#8dd3c7"><a href="#225900" label="[22:59:00]">&lt;stikonas&gt;</a></span><span class="message">although that doesn't mean that we have to do it right now</span></div><div class="line" id="225916"><span class="nick" style="color:#2e2a4a"><a href="#225916" label="[22:59:16]">&lt;fossy&gt;</a></span><span class="message">correct we can add in that step later if we want</span></div><div class="line" id="225947"><span class="nick" style="color:#2e2a4a"><a href="#225947" label="[22:59:47]">&lt;fossy&gt;</a></span><span class="message">unfortunatley the output of so much info to stdout in MES_DEBUG=5 makes the process much slower... i think theres only 1 remaining compilation error</span></div><div class="line" id="225952"><span class="nick" style="color:#2e2a4a"><a href="#225952" label="[22:59:52]">&lt;fossy&gt;</a></span><span class="message">then to make sure it works with ur branch</span></div><div class="line" id="230000"><span class="nick" style="color:#2e2a4a"><a href="#230000" label="[23:00:00]">&lt;fossy&gt;</a></span><span class="message">then i'll push</span></div><div class="line" id="230006"><span class="nick" style="color:#8dd3c7"><a href="#230006" label="[23:00:06]">&lt;stikonas&gt;</a></span><span class="message"># do this first</span></div><div class="line" id="230007"><span class="nick" style="color:#8dd3c7"><a href="#230007" label="[23:00:07]">&lt;stikonas&gt;</a></span><span class="message"># ./configure</span></div><div class="line" id="230015"><span class="nick" style="color:#8dd3c7"><a href="#230015" label="[23:00:15]">&lt;stikonas&gt;</a></span><span class="message">rain1: I think fossy is trying to avoid configure</span></div><div class="line" id="230021"><span class="nick" style="color:#2e2a4a"><a href="#230021" label="[23:00:21]">&lt;fossy&gt;</a></span><span class="message">the only thing we need to make from configure is config.h</span></div><div class="line" id="230024"><span class="nick" style="color:#2e2a4a"><a href="#230024" label="[23:00:24]">&lt;fossy&gt;</a></span><span class="message">which we can hand-write</span></div><div class="line" id="230024"><span class="nick" style="color:#8dd3c7"><a href="#230024" label="[23:00:24]">&lt;stikonas&gt;</a></span><span class="message">at least until we have autotools</span></div><div class="line" id="230042"><span class="nick" style="color:#8dd3c7"><a href="#230042" label="[23:00:42]">&lt;stikonas&gt;</a></span><span class="message">well, I guess, it's just some defines</span></div><div class="line" id="230044"><span class="nick" style="color:#2e2a4a"><a href="#230044" label="[23:00:44]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="230046"><span class="nick" style="color:#2e2a4a"><a href="#230046" label="[23:00:46]">&lt;fossy&gt;</a></span><span class="message">and yes</span></div><div class="line" id="230114"><span class="nick" style="color:#8dd3c7"><a href="#230114" label="[23:01:14]">&lt;stikonas&gt;</a></span><span class="message">but at least once we have bash it will be easier to debug live environement...</span></div><div class="line" id="230123"><span class="nick" style="color:#8dd3c7"><a href="#230123" label="[23:01:23]">&lt;stikonas&gt;</a></span><span class="message">now we just get kernel panic...</span></div><div class="line" id="230130"><span class="nick" style="color:#2e2a4a"><a href="#230130" label="[23:01:30]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="230136"><span class="nick" style="color:#8dd3c7"><a href="#230136" label="[23:01:36]">&lt;stikonas&gt;</a></span><span class="message">I was doing most of the testing outside of it</span></div><div class="line" id="230148"><span class="nick" style="color:#2e2a4a"><a href="#230148" label="[23:01:48]">&lt;fossy&gt;</a></span><span class="message">if i have issues in live environment for now i have been putting a busybox.static inside it and adding /busybox.static sh to the end</span></div><div class="line" id="230203"><span class="nick" style="color:#2e2a4a"><a href="#230203" label="[23:02:03]">&lt;fossy&gt;</a></span><span class="message">of a kaem file</span></div><div class="line" id="230232"><span class="nick" style="color:#8dd3c7"><a href="#230232" label="[23:02:32]">&lt;stikonas&gt;</a></span><span class="message">I also tried running it inside chroot but it had some problems...</span></div><div class="line" id="230242"><span class="nick" style="color:#2e2a4a"><a href="#230242" label="[23:02:42]">&lt;fossy&gt;</a></span><span class="message">oh? chroot should work</span></div><div class="line" id="230244"><span class="nick" style="color:#8dd3c7"><a href="#230244" label="[23:02:44]">&lt;stikonas&gt;</a></span><span class="message">somehow PATH failed to find cp in kaem scripts</span></div><div class="line" id="230257"><span class="nick" style="color:#8dd3c7"><a href="#230257" label="[23:02:57]">&lt;stikonas&gt;</a></span><span class="message"> /after/bin/cp works but cp doesn't</span></div><div class="line" id="230307"><span class="nick" style="color:#2e2a4a"><a href="#230307" label="[23:03:07]">&lt;fossy&gt;</a></span><span class="message">odd</span></div><div class="line" id="230319"><span class="nick" style="color:#8dd3c7"><a href="#230319" label="[23:03:19]">&lt;stikonas&gt;</a></span><span class="message">by the way, I think cp has some bug, in my kaem script to build mes-m2 it prints one header file to output...</span></div><div class="line" id="230335"><span class="nick" style="color:#2e2a4a"><a href="#230335" label="[23:03:35]">&lt;fossy&gt;</a></span><span class="message">that's what happens if it cant write to the result for some reason</span></div><div class="line" id="230336"><span class="nick" style="color:#2e2a4a"><a href="#230336" label="[23:03:36]">&lt;fossy&gt;</a></span><span class="message">i think</span></div><div class="line" id="230355"><span class="nick" style="color:#2e2a4a"><a href="#230355" label="[23:03:55]">&lt;fossy&gt;</a></span><span class="message">i wrote it in 2 hrs to fill the current need for it, it is most likely buggy</span></div><div class="line" id="230356"><span class="nick" style="color:#8dd3c7"><a href="#230356" label="[23:03:56]">&lt;stikonas&gt;</a></span><span class="message">oh...</span></div><div class="line" id="230411"><span class="nick" style="color:#8dd3c7"><a href="#230411" label="[23:04:11]">&lt;stikonas&gt;</a></span><span class="message">so maybe mes/include/linux/x86/syscall.h is not installed</span></div><div class="line" id="230412"><span class="nick" style="color:#2e2a4a"><a href="#230412" label="[23:04:12]">&lt;fossy&gt;</a></span><span class="message">normally the target directory dosen't exists</span></div><div class="line" id="230413"><span class="nick" style="color:#8dd3c7"><a href="#230413" label="[23:04:13]">&lt;stikonas&gt;</a></span><span class="message">oh  isee</span></div><div class="line" id="230415"><span class="nick" style="color:#8dd3c7"><a href="#230415" label="[23:04:15]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="230416"><span class="nick" style="color:#8dd3c7"><a href="#230416" label="[23:04:16]">&lt;stikonas&gt;</a></span><span class="message">mkdir doesn't exist</span></div><div class="line" id="230421"><span class="nick" style="color:#8dd3c7"><a href="#230421" label="[23:04:21]">&lt;stikonas&gt;</a></span><span class="message">ok, I need to precreate it</span></div><div class="line" id="230425"><span class="nick" style="color:#2e2a4a"><a href="#230425" label="[23:04:25]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="230432"><span class="nick" style="color:#8dd3c7"><a href="#230432" label="[23:04:32]">&lt;stikonas&gt;</a></span><span class="message">otherwise you won't be able to build tcc...</span></div><div class="line" id="230437"><span class="nick" style="color:#8dd3c7"><a href="#230437" label="[23:04:37]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll update my PR...</span></div><div class="line" id="230443"><span class="nick" style="color:#2e2a4a"><a href="#230443" label="[23:04:43]">&lt;fossy&gt;</a></span><span class="message">thnaks !</span></div><div class="line" id="230456"><span class="nick" style="color:#8dd3c7"><a href="#230456" label="[23:04:56]">&lt;stikonas&gt;</a></span><span class="message">once we have coreutils and bash, life will be easier :)</span></div><div class="line" id="230544"><span class="nick" style="color:#2e2a4a"><a href="#230544" label="[23:05:44]">&lt;fossy&gt;</a></span><span class="message">yeah..</span></div><div class="line" id="230645"><span class="nick" style="color:#8dd3c7"><a href="#230645" label="[23:06:45]">&lt;stikonas&gt;</a></span><span class="message">and maybe even eventually bootstrap to some source based distros like guix or gentoo...</span></div><div class="line" id="230702"><span class="nick" style="color:#8dd3c7"><a href="#230702" label="[23:07:02]">&lt;stikonas&gt;</a></span><span class="message">or others</span></div><div class="line" id="230708"><span class="nick" style="color:#6d2462"><a href="#230708" label="[23:07:08]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="230738"><span class="nick" style="color:#2e2a4a"><a href="#230738" label="[23:07:38]">&lt;fossy&gt;</a></span><span class="message">yeah my first goal is void linux because 1. that's what i use 2. i know how to bootstrap it very well</span></div><div class="line" id="230749"><span class="nick" style="color:#2e2a4a"><a href="#230749" label="[23:07:49]">&lt;fossy&gt;</a></span><span class="message">we can launch off easily to other distros too</span></div><div class="line" id="230751"><span class="nick" style="color:#80b1d3"><a href="#230751" label="[23:07:51]">&lt;civodul&gt;</a></span><span class="message">LWN got the news: <a rel="nofollow" href="https://lwn.net/SubscriberLink/841797/6742a0742f6160ef/">https://lwn.net/SubscriberLink/841797/6742a0742f6160ef/</a> </span></div><div class="line" id="230801"><span class="nick" style="color:#2e2a4a"><a href="#230801" label="[23:08:01]">&lt;fossy&gt;</a></span><span class="message">guix is a target too because of guile dep</span></div><div class="line" id="230810"><span class="nick" style="color:#8dd3c7"><a href="#230810" label="[23:08:10]">&lt;stikonas&gt;</a></span><span class="message">yeah, I might try to do gentoo...</span></div><div class="line" id="230813"><span class="nick" style="color:#6d2462"><a href="#230813" label="[23:08:13]">&lt;Hagfish&gt;</a></span><span class="message">so you could use mes to build void to build mes?  and check that the hashes are the same?  like turtles all the way down :)</span></div><div class="line" id="230814"><span class="nick" style="color:#8dd3c7"><a href="#230814" label="[23:08:14]">&lt;stikonas&gt;</a></span><span class="message">it mostly needs python for emerge</span></div><div class="line" id="230826"><span class="nick" style="color:#2e2a4a"><a href="#230826" label="[23:08:26]">&lt;fossy&gt;</a></span><span class="message">yeah sure Hagfish !</span></div><div class="line" id="230841"><span class="nick" style="color:#2e2a4a"><a href="#230841" label="[23:08:41]">&lt;fossy&gt;</a></span><span class="message">stikonas: we need python late in the bootstrap anyway, glibc has a version too</span></div><div class="line" id="230852"><span class="nick" style="color:#8dd3c7"><a href="#230852" label="[23:08:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's why I was thinking that gentoo shouldn't be too hard</span></div><div class="line" id="230906"><span class="nick" style="color:#8dd3c7"><a href="#230906" label="[23:09:06]">&lt;stikonas&gt;</a></span><span class="message">python can probably be compiled easily with gcc</span></div><div class="line" id="230910"><span class="nick" style="color:#2e2a4a"><a href="#230910" label="[23:09:10]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="230924"><span class="nick" style="color:#2e2a4a"><a href="#230924" label="[23:09:24]">&lt;fossy&gt;</a></span><span class="message">the hard part is now, it's really easy once we get to gcc...</span></div><div class="line" id="230954"><span class="nick" style="color:#2e2a4a"><a href="#230954" label="[23:09:54]">&lt;fossy&gt;</a></span><span class="message">civodul: good artical</span></div><div class="line" id="230958"><span class="nick" style="color:#2e2a4a"><a href="#230958" label="[23:09:58]">&lt;fossy&gt;</a></span><span class="message">s/artical/article</span></div><div class="line" id="231045"><span class="nick" style="color:#80b1d3"><a href="#231045" label="[23:10:45]">&lt;civodul&gt;</a></span><span class="message">yeah it's great that they're spreading the word and showing how important it is</span></div><div class="line" id="231426"><span class="nick" style="color:#6d2462"><a href="#231426" label="[23:14:26]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=25663333">https://news.ycombinator.com/item?id=25663333</a> </span></div><div class="line" id="231439"><span class="nick" style="color:#6d2462"><a href="#231439" label="[23:14:39]">&lt;Hagfish&gt;</a></span><span class="message">well done &quot;foxboron&quot; for submitting that</span></div><div class="line" id="231446"><span class="nick" style="color:#6d2462"><a href="#231446" label="[23:14:46]">&lt;Hagfish&gt;</a></span><span class="message">upvotes if you have them, friends :)</span></div><div class="line" id="232105"><span class="nick" style="color:#6b8072"><a href="#232105" label="[23:21:05]">&lt;malina&gt;</a></span><span class="message">stikonas, I think the bootstrapping is  meant? to be more universal, so posix, not just gnu. and so on, trying t buikd too many coeutils,bash, and so on might make life easier but it should be for Gnu/Linux. This does have enough importance to also cover a broder set.</span></div><div class="line" id="232115"><span class="nick" style="color:#8dd3c7"><a href="#232115" label="[23:21:15]">&lt;janneke&gt;</a></span><span class="message">civodul: oh, great</span></div><div class="line" id="232134"><span class="nick" style="color:#6b8072"><a href="#232134" label="[23:21:34]">&lt;malina&gt;</a></span><span class="message">and lol foxboron, ye, he sees himself as superior superrrace guy, haha. ironic I see his name in that, but since you ask, I will upvote</span></div><div class="line" id="232135"><span class="nick" style="color:#d9d9d9"><a href="#232135" label="[23:21:35]">&lt;pder&gt;</a></span><span class="message">siraben: I created another piece of sample code for the n-queens problem in haskell <a rel="nofollow" href="https://en.wikipedia.org/wiki/Eight_queens_puzzle.">https://en.wikipedia.org/wiki/Eight_queens_puzzle.</a>   I also added a bash script that takes a .hs file and compiles it to an executable using precisely and M2-Planet</span></div><div class="line" id="232147"><span class="nick" style="color:#d9d9d9"><a href="#232147" label="[23:21:47]">&lt;pder&gt;</a></span><span class="message">./compile test/queens.hs &amp;&amp; ./queens</span></div><div class="line" id="232203"><span class="nick" style="color:#8dd3c7"><a href="#232203" label="[23:22:03]">&lt;stikonas&gt;</a></span><span class="message">well, it is more universal</span></div><div class="line" id="232219"><span class="nick" style="color:#8dd3c7"><a href="#232219" label="[23:22:19]">&lt;stikonas&gt;</a></span><span class="message">once you have build one thing you can easily build everything else</span></div><div class="line" id="232230"><span class="nick" style="color:#6b8072"><a href="#232230" label="[23:22:30]">&lt;malina&gt;</a></span><span class="message">had a small confrontation then he blurted out he thinks Norwegians were superior humans and I guess next thing would have been us waving nazi flags lol.</span></div><div class="line" id="232536"><span class="nick" style="color:#6b8072"><a href="#232536" label="[23:25:36]">&lt;malina&gt;</a></span><span class="message">should thank Jake Edge bt.</span></div><div class="line" id="233318"><span class="nick" style="color:#6d2462"><a href="#233318" label="[23:33:18]">&lt;bauen1&gt;</a></span><span class="message">arguably adding pipes (in some half-assed way at least) to a kernel that already has a vfs, a concept of processes and a concept of file descriptors</span></div><div class="line" id="233337"><span class="nick" style="color:#6d2462"><a href="#233337" label="[23:33:37]">&lt;bauen1&gt;</a></span><span class="message">is not too hard or code intensive</span></div><div class="line" id="233349"><span class="nick" style="color:#6d2462"><a href="#233349" label="[23:33:49]">&lt;bauen1&gt;</a></span><span class="message">but that does kind of depend on how &quot;complete&quot; pipes would need to be</span></div><div class="line" id="233353"><span class="nick" style="color:#2e2a4a"><a href="#233353" label="[23:33:53]">&lt;fossy&gt;</a></span><span class="message">right, i see</span></div><div class="line" id="233404"><span class="nick" style="color:#2e2a4a"><a href="#233404" label="[23:34:04]">&lt;fossy&gt;</a></span><span class="message">bauen1: is myunix the latest iteration fo your project?</span></div><div class="line" id="233421"><span class="nick" style="color:#8dd3c7"><a href="#233421" label="[23:34:21]">&lt;stikonas&gt;</a></span><span class="message">but does bash require it? or can it run without pipes in the kernel (with reduced functionality)</span></div><div class="line" id="233427"><span class="nick" style="color:#6d2462"><a href="#233427" label="[23:34:27]">&lt;bauen1&gt;</a></span><span class="message">fossy: it's version 3, currently hosted at <a rel="nofollow" href="https://gitlab.com/myunix/myunix/">https://gitlab.com/myunix/myunix/</a> </span></div><div class="line" id="233432"><span class="nick" style="color:#2e2a4a"><a href="#233432" label="[23:34:32]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="233440"><span class="nick" style="color:#2e2a4a"><a href="#233440" label="[23:34:40]">&lt;fossy&gt;</a></span><span class="message">stikonas: i believe it is required</span></div><div class="line" id="233452"><span class="nick" style="color:#6d2462"><a href="#233452" label="[23:34:52]">&lt;bauen1&gt;</a></span><span class="message">fossy: currently at the stage where it can run some simple userspace and has a syscall layer but still lacks the conecept of processes</span></div><div class="line" id="233507"><span class="nick" style="color:#2e2a4a"><a href="#233507" label="[23:35:07]">&lt;fossy&gt;</a></span><span class="message">hm... Mes C Library will have ability for pipes</span></div><div class="line" id="233514"><span class="nick" style="color:#2e2a4a"><a href="#233514" label="[23:35:14]">&lt;fossy&gt;</a></span><span class="message">but if we don't use them it's fine</span></div><div class="line" id="233528"><span class="nick" style="color:#8dd3c7"><a href="#233528" label="[23:35:28]">&lt;stikonas&gt;</a></span><span class="message">well, in principle once you have tcc you can build linux...</span></div><div class="line" id="233547"><span class="nick" style="color:#8dd3c7"><a href="#233547" label="[23:35:47]">&lt;stikonas&gt;</a></span><span class="message">the smaller bootstrap kernel is the better</span></div><div class="line" id="233555"><span class="nick" style="color:#6d2462"><a href="#233555" label="[23:35:55]">&lt;bauen1&gt;</a></span><span class="message">i would like to point out that having the initial kernel support enough i/o that you can run a minimal text editor is also somewhat important</span></div><div class="line" id="233622"><span class="nick" style="color:#2e2a4a"><a href="#233622" label="[23:36:22]">&lt;fossy&gt;</a></span><span class="message">not if it's automated</span></div><div class="line" id="233631"><span class="nick" style="color:#2e2a4a"><a href="#233631" label="[23:36:31]">&lt;fossy&gt;</a></span><span class="message">yes if you're doing it manually</span></div><div class="line" id="233642"><span class="nick" style="color:#8dd3c7"><a href="#233642" label="[23:36:42]">&lt;stikonas&gt;</a></span><span class="message">if you are doing manually, stage0 monitor should be good enough :)</span></div><div class="line" id="233701"><span class="nick" style="color:#2e2a4a"><a href="#233701" label="[23:37:01]">&lt;fossy&gt;</a></span><span class="message">ya, someone here was looking at stage0 monitor in x86_64 efi</span></div><div class="line" id="233733"><span class="nick" style="color:#6d2462"><a href="#233733" label="[23:37:33]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i could envision a scenario where you have a very minimal x86 mono-tasking kernel (maybe even without userspace seperation) written in assembly (or an alternative), that supports the very basics necessary to get to the point where you can build a more capable kernel, e.g. myunix and reboot</span></div><div class="line" id="233802"><span class="nick" style="color:#8dd3c7"><a href="#233802" label="[23:38:02]">&lt;stikonas&gt;</a></span><span class="message">oh, that's fine then</span></div><div class="line" id="233828"><span class="nick" style="color:#8dd3c7"><a href="#233828" label="[23:38:28]">&lt;stikonas&gt;</a></span><span class="message">what compiler myunix runs on?</span></div><div class="line" id="233831"><span class="nick" style="color:#2e2a4a"><a href="#233831" label="[23:38:31]">&lt;fossy&gt;</a></span><span class="message">well that's basically my plan but use myunix or something similar as the bootstrap kernel for now</span></div><div class="line" id="233835"><span class="nick" style="color:#2e2a4a"><a href="#233835" label="[23:38:35]">&lt;fossy&gt;</a></span><span class="message">i believe it works with tcc</span></div><div class="line" id="233846"><span class="nick" style="color:#8dd3c7"><a href="#233846" label="[23:38:46]">&lt;stikonas&gt;</a></span><span class="message">tcc is not that easy to get though</span></div><div class="line" id="233913"><span class="nick" style="color:#8dd3c7"><a href="#233913" label="[23:39:13]">&lt;stikonas&gt;</a></span><span class="message">but yeah, myunix would still be smaller than linux kernel</span></div><div class="line" id="233921"><span class="nick" style="color:#6d2462"><a href="#233921" label="[23:39:21]">&lt;bauen1&gt;</a></span><span class="message">i did think about just adding kernel module support to myunix, it wouldn't be terribly hard, so you could have the core written in a simpler C, so you boot with just a tmpfs, and start compiling until you can load the file systemd driver and what not</span></div><div class="line" id="233925"><span class="nick" style="color:#2e2a4a"><a href="#233925" label="[23:39:25]">&lt;fossy&gt;</a></span><span class="message">bauen1: while i wait for my toolchain to compile, maybe you can give me stome numbers; what is the size of the myunix kernel</span></div><div class="line" id="233931"><span class="nick" style="color:#2e2a4a"><a href="#233931" label="[23:39:31]">&lt;fossy&gt;</a></span><span class="message">like the resulting binary</span></div><div class="line" id="233955"><span class="nick" style="color:#6d2462"><a href="#233955" label="[23:39:55]">&lt;bauen1&gt;</a></span><span class="message">fossy: stikonas: it can be compiled using gnu binutils and tinycc, i'm pretty sure with a few patches to tinycc it could link the kernel too</span></div><div class="line" id="234021"><span class="nick" style="color:#2e2a4a"><a href="#234021" label="[23:40:21]">&lt;fossy&gt;</a></span><span class="message">nice</span></div><div class="line" id="234026"><span class="nick" style="color:#6d2462"><a href="#234026" label="[23:40:26]">&lt;bauen1&gt;</a></span><span class="message">fossy: 776kb is the size of the kernel i have lying around, no idea how that was compile though</span></div><div class="line" id="234032"><span class="nick" style="color:#2e2a4a"><a href="#234032" label="[23:40:32]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="234036"><span class="nick" style="color:#2e2a4a"><a href="#234036" label="[23:40:36]">&lt;fossy&gt;</a></span><span class="message">configure: error: Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+.</span></div><div class="line" id="234036"><span class="nick" style="color:#6d2462"><a href="#234036" label="[23:40:36]">&lt;bauen1&gt;</a></span><span class="message">might be a lot of &quot;dead space&quot; too</span></div><div class="line" id="234043"><span class="nick" style="color:#2e2a4a"><a href="#234043" label="[23:40:43]">&lt;fossy&gt;</a></span><span class="message">when building the toolchain</span></div><div class="line" id="234055"><span class="nick" style="color:#2e2a4a"><a href="#234055" label="[23:40:55]">&lt;fossy&gt;</a></span><span class="message">should i just install those on hose</span></div><div class="line" id="234058"><span class="nick" style="color:#2e2a4a"><a href="#234058" label="[23:40:58]">&lt;fossy&gt;</a></span><span class="message">host</span></div><div class="line" id="234058"><span class="nick" style="color:#6d2462"><a href="#234058" label="[23:40:58]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="234118"><span class="nick" style="color:#6d2462"><a href="#234118" label="[23:41:18]">&lt;bauen1&gt;</a></span><span class="message">i think you can pass gcc configure an option to have them build it in-tree if you really want to</span></div><div class="line" id="234141"><span class="nick" style="color:#6d2462"><a href="#234141" label="[23:41:41]">&lt;bauen1&gt;</a></span><span class="message">fossy: also make sure you're on the staging branch for more progress</span></div><div class="line" id="234147"><span class="nick" style="color:#2e2a4a"><a href="#234147" label="[23:41:47]">&lt;fossy&gt;</a></span><span class="message">bauen1: ok</span></div><div class="line" id="234200"><span class="nick" style="color:#2e2a4a"><a href="#234200" label="[23:42:00]">&lt;fossy&gt;</a></span><span class="message">ah yes</span></div><div class="line" id="234203"><span class="nick" style="color:#6d2462"><a href="#234203" label="[23:42:03]">&lt;bauen1&gt;</a></span><span class="message">fossy: and if in doubt look at .gitlab-ci.yml</span></div><div class="line" id="234224"><span class="nick" style="color:#2e2a4a"><a href="#234224" label="[23:42:24]">&lt;fossy&gt;</a></span><span class="message">nice</span></div><div class="line" id="234226"><span class="nick" style="color:#8dd3c7"><a href="#234226" label="[23:42:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've just pushed udpate to PR, it finished building successfully now and no output</span></div><div class="line" id="234226"><span class="nick" style="color:#2e2a4a"><a href="#234226" label="[23:42:26]">&lt;fossy&gt;</a></span><span class="message">thanks</span></div><div class="line" id="234234"><span class="nick" style="color:#2e2a4a"><a href="#234234" label="[23:42:34]">&lt;fossy&gt;</a></span><span class="message">stikonas: :D</span></div><div class="line" id="234236"><span class="nick" style="color:#8dd3c7"><a href="#234236" label="[23:42:36]">&lt;stikonas&gt;</a></span><span class="message">once I created that folder</span></div><div class="line" id="234237"><span class="nick" style="color:#6d2462"><a href="#234237" label="[23:42:37]">&lt;bauen1&gt;</a></span><span class="message">but yeah, i didn't spend any time for half a year on this, already so many things i would do differently</span></div><div class="line" id="234237"><span class="nick" style="color:#2e2a4a"><a href="#234237" label="[23:42:37]">&lt;fossy&gt;</a></span><span class="message">ill merge</span></div><div class="line" id="234309"><span class="nick" style="color:#8dd3c7"><a href="#234309" label="[23:43:09]">&lt;stikonas&gt;</a></span><span class="message">hopefully it will just work for tcc...</span></div><div class="line" id="234312"><span class="nick" style="color:#8dd3c7"><a href="#234312" label="[23:43:12]">&lt;stikonas&gt;</a></span><span class="message">without any regressions</span></div><div class="line" id="234323"><span class="nick" style="color:#6d2462"><a href="#234323" label="[23:43:23]">&lt;bauen1&gt;</a></span><span class="message">fossy: by the way, if you want to have nightmares, look at the Makefile code ;) it does allow you to build the entire toolchain, kernel and userspace in parallel where possiible ...</span></div><div class="line" id="234458"><span class="nick" style="color:#6d2462"><a href="#234458" label="[23:44:58]">&lt;bauen1&gt;</a></span><span class="message">huh looks like i don't actually have much changes left locally, so the most interesting parts should be up on git</span></div><div class="line" id="234520"><span class="nick" style="color:#6d2462"><a href="#234520" label="[23:45:20]">&lt;bauen1&gt;</a></span><span class="message">but yes, i think i'll rip out the last few commits and setup a seperate musl fork and use submodules</span></div><div class="line" id="234541"><span class="nick" style="color:#6d2462"><a href="#234541" label="[23:45:41]">&lt;bauen1&gt;</a></span><span class="message">maybe when i find time ._.</span></div><div class="line" id="234855"><span class="nick" style="color:#2e2a4a"><a href="#234855" label="[23:48:55]">&lt;fossy&gt;</a></span><span class="message">you win</span></div><div class="line" id="234858"><span class="nick" style="color:#2e2a4a"><a href="#234858" label="[23:48:58]">&lt;fossy&gt;</a></span><span class="message">184712  kernel.elf</span></div><div class="line" id="235202"><span class="nick" style="color:#2e2a4a"><a href="#235202" label="[23:52:02]">&lt;fossy&gt;</a></span><span class="message">-Os: 127424  kernel/kernel.elf</span></div><div class="line" id="235943"><span class="nick" style="color:#6d2462"><a href="#235943" label="[23:59:43]">&lt;bauen1&gt;</a></span><span class="message">fossy: if you compile with tinycc the code will be a lot less optimal</span></div><div class="line" id="235957"><span class="nick" style="color:#2e2a4a"><a href="#235957" label="[23:59:57]">&lt;fossy&gt;</a></span><span class="message">bauen1: expected</span></div><br /></div></body></html>