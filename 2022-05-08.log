<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003838"><span class="nick" style="color:#8dd3c7"><a href="#003838" label="[00:38:38]">&lt;achaninja&gt;</a></span><span class="message">anyone nkow the status of mes + gash?</span></div><div class="line" id="003841"><span class="nick" style="color:#8dd3c7"><a href="#003841" label="[00:38:41]">&lt;achaninja&gt;</a></span><span class="message">know*</span></div><div class="line" id="010849"><span class="nick" style="color:#2e2a4a"><a href="#010849" label="[01:08:49]">&lt;vagrantc&gt;</a></span><span class="message">achaninja: stumbled upon this thread earlier today about mes + gash <a rel="nofollow" href="https://lists.gnu.org/archive/html/bug-mes/2022-05/msg00000.html">https://lists.gnu.org/archive/html/bug-mes/2022-05/msg00000.html</a> </span></div><div class="line" id="010928"><span class="nick" style="color:#8dd3c7"><a href="#010928" label="[01:09:28]">&lt;achaninja&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="011135"><span class="nick" style="color:#2e2a4a"><a href="#011135" label="[01:11:35]">&lt;vagrantc&gt;</a></span><span class="message">looks like it split from april ...</span></div><div class="line" id="014551"><span class="nick" style="color:#6b8072"><a href="#014551" label="[01:45:51]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well samplet was working on getting mes to add proper scheme module support to mes.c (which I believe they finished) and after that finish getting gash working in mes.c I however don't have more details than that.</span></div><div class="line" id="015510"><span class="nick" style="color:#8dd3c7"><a href="#015510" label="[01:55:10]">&lt;achaninja&gt;</a></span><span class="message">sounds really cool</span></div><div class="line" id="020611"><span class="nick" style="color:#6b8072"><a href="#020611" label="[02:06:11]">&lt;oriansj&gt;</a></span><span class="message">oh and a trivial program for anyone who abuses the crap out of org-mode: <a rel="nofollow" href="https://github.com/oriansj/org-tree">https://github.com/oriansj/org-tree</a> </span></div><div class="line" id="024231"><span class="nick" style="color:#80b1d3"><a href="#024231" label="[02:42:31]">&lt;stikonas&gt;</a></span><span class="message">achaninja: you can find some updates in the logs (maybe a week ago)</span></div><div class="line" id="024249"><span class="nick" style="color:#80b1d3"><a href="#024249" label="[02:42:49]">&lt;stikonas&gt;</a></span><span class="message">I think samplet go some stuff working</span></div><div class="line" id="024256"><span class="nick" style="color:#80b1d3"><a href="#024256" label="[02:42:56]">&lt;stikonas&gt;</a></span><span class="message">but I guess it's still early alpha</span></div><div class="line" id="024304"><span class="nick" style="color:#80b1d3"><a href="#024304" label="[02:43:04]">&lt;stikonas&gt;</a></span><span class="message">probably slow too but that's less important</span></div><div class="line" id="024359"><span class="nick" style="color:#8dd3c7"><a href="#024359" label="[02:43:59]">&lt;achaninja&gt;</a></span><span class="message">I don't mind slow :P</span></div><div class="line" id="024902"><span class="nick" style="color:#80b1d3"><a href="#024902" label="[02:49:02]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh and I think I've sorted that autom4te issue</span></div><div class="line" id="025009"><span class="nick" style="color:#80b1d3"><a href="#025009" label="[02:50:09]">&lt;stikonas&gt;</a></span><span class="message">I was comparing old and new filesystems and the difference is /usr/bin/sh -&gt; /usr/bin/bash symlink which is missing. I can create it manually...</span></div><div class="line" id="025349"><span class="nick" style="color:#80b1d3"><a href="#025349" label="[02:53:49]">&lt;stikonas&gt;</a></span><span class="message">so broken pipes were somewhat of a red herring. I guess perl executes simple system(&quot;...&quot;) calls directly but more complicated are outsourced to system shell</span></div><div class="line" id="032705"><span class="nick" style="color:#6d2462"><a href="#032705" label="[03:27:05]">&lt;pabs3&gt;</a></span><span class="message">from LWN: <a rel="nofollow" href="https://github.com/pzembrod/cc64">https://github.com/pzembrod/cc64</a>  &quot;cc64 is a small-C compiler written in Forth, hosted on the Commodore C64&quot;</span></div><div class="line" id="033809"><span class="nick" style="color:#234e69"><a href="#033809" label="[03:38:09]">&lt;muurkha&gt;</a></span><span class="message">haha, cute</span></div><div class="line" id="050003"><span class="nick" style="color:#6c3d55"><a href="#050003" label="[05:00:03]">&lt;markjenkinssksp&gt;</a></span><span class="message">New tag in my bootstrapping hobby project today <a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme">https://github.com/markjenkins/lox_compiler_scheme</a> </span></div><div class="line" id="050111"><span class="nick" style="color:#6c3d55"><a href="#050111" label="[05:01:11]">&lt;markjenkinssksp&gt;</a></span><span class="message">I believe my attempt to go through Nystrom's Crafting Interpreters with a compiler in primitive scheme and bytecode interpreter in M2-planet is now Turing complete now that I have if-else, while, and logical and/or</span></div><div class="line" id="050123"><span class="nick" style="color:#6c3d55"><a href="#050123" label="[05:01:23]">&lt;markjenkinssksp&gt;</a></span><span class="message">though it's not yet a language anywone would want to work in</span></div><div class="line" id="050233"><span class="nick" style="color:#6c3d55"><a href="#050233" label="[05:02:33]">&lt;markjenkinssksp&gt;</a></span><span class="message">My updated README.md reflects where I'm going to take it to have a bootstrappble Lox sub-variant, which will then be enough to be a language I can write further compilers and tools in</span></div><div class="line" id="050338"><span class="nick" style="color:#6c3d55"><a href="#050338" label="[05:03:38]">&lt;markjenkinssksp&gt;</a></span><span class="message">or in other words, I'll be able to start dogfooding</span></div><div class="line" id="050421"><span class="nick" style="color:#6c3d55"><a href="#050421" label="[05:04:21]">&lt;markjenkinssksp&gt;</a></span><span class="message">before I go on to chapter 24, I should do more testing, including porting relevant parts of Nystrom's test suite</span></div><div class="line" id="050502"><span class="nick" style="color:#234e69"><a href="#050502" label="[05:05:02]">&lt;muurkha&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="050522"><span class="nick" style="color:#234e69"><a href="#050522" label="[05:05:22]">&lt;muurkha&gt;</a></span><span class="message">if you have if-else, true, and false, you don't really need and/or</span></div><div class="line" id="050713"><span class="nick" style="color:#234e69"><a href="#050713" label="[05:07:13]">&lt;muurkha&gt;</a></span><span class="message">and in Scheme, where you have recursion with tail-call elimination, you don't need while either</span></div><div class="line" id="050728"><span class="nick" style="color:#234e69"><a href="#050728" label="[05:07:28]">&lt;muurkha&gt;</a></span><span class="message">but they certainly are convenient!</span></div><div class="line" id="050728"><span class="nick" style="color:#6c3d55"><a href="#050728" label="[05:07:28]">&lt;markjenkinssksp&gt;</a></span><span class="message">indeed muukha, though I am trying to strike a balance on having enough practical features before I start using my own tool</span></div><div class="line" id="050859"><span class="nick" style="color:#234e69"><a href="#050859" label="[05:08:59]">&lt;muurkha&gt;</a></span><span class="message">yeah, in Ur-Scheme there are an inconvenient number of places where I say things like (define (after-wsp s) (after-wsp-2 s (s)))</span></div><div class="line" id="050942"><span class="nick" style="color:#6c3d55"><a href="#050942" label="[05:09:42]">&lt;markjenkinssksp&gt;</a></span><span class="message">No tail recursion in Nystrom's Lox or in my plans for it, once I have enough Lox I'll be writing C/JS style inperitive code... (sort of, because I'm going to have a pair() type that I'll for data structures)</span></div><div class="line" id="051010"><span class="nick" style="color:#6c3d55"><a href="#051010" label="[05:10:10]">&lt;markjenkinssksp&gt;</a></span><span class="message">so my bslox (bootstrap-sub-variant) will be kind of a strange C/JS/lisp hybrid</span></div><div class="line" id="051054"><span class="nick" style="color:#234e69"><a href="#051054" label="[05:10:54]">&lt;muurkha&gt;</a></span><span class="message">aha, makes sense</span></div><div class="line" id="051112"><span class="nick" style="color:#6c3d55"><a href="#051112" label="[05:11:12]">&lt;markjenkinssksp&gt;</a></span><span class="message">My logical AND and OR work was pretty easy today, so it was low cost to add with good payoff in terms of what I'll have</span></div><div class="line" id="051125"><span class="nick" style="color:#6c3d55"><a href="#051125" label="[05:11:25]">&lt;markjenkinssksp&gt;</a></span><span class="message">&quot;and&quot; <a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme/commit/b088c7b8395d9ae33dcd6876071cb79626ac716c">https://github.com/markjenkins/lox_compiler_scheme/commit/b088c7b8395d9ae33dcd6876071cb79626ac716c</a> </span></div><div class="line" id="051128"><span class="nick" style="color:#234e69"><a href="#051128" label="[05:11:28]">&lt;muurkha&gt;</a></span><span class="message">Clojure makes do with something called &quot;recur&quot;</span></div><div class="line" id="051136"><span class="nick" style="color:#6c3d55"><a href="#051136" label="[05:11:36]">&lt;markjenkinssksp&gt;</a></span><span class="message">&quot;or&quot; &quot;<a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme/commit/a5495282e92b7d5b7b9c77b504da4584897eaade">https://github.com/markjenkins/lox_compiler_scheme/commit/a5495282e92b7d5b7b9c77b504da4584897eaade</a>&quot; </span></div><div class="line" id="051143"><span class="nick" style="color:#234e69"><a href="#051143" label="[05:11:43]">&lt;muurkha&gt;</a></span><span class="message">which restarts the current function with new arguments IIRC</span></div><div class="line" id="051250"><span class="nick" style="color:#234e69"><a href="#051250" label="[05:12:50]">&lt;muurkha&gt;</a></span><span class="message">that doesn't look too bad</span></div><div class="line" id="051344"><span class="nick" style="color:#234e69"><a href="#051344" label="[05:13:44]">&lt;muurkha&gt;</a></span><span class="message">I wonder if you can factor out the string-append that generates the label into a label-generating function</span></div><div class="line" id="051422"><span class="nick" style="color:#6c3d55"><a href="#051422" label="[05:14:22]">&lt;markjenkinssksp&gt;</a></span><span class="message">ya, I have some stuff like that happening elsewhere</span></div><div class="line" id="051527"><span class="nick" style="color:#234e69"><a href="#051527" label="[05:15:27]">&lt;muurkha&gt;</a></span><span class="message">what's the experience like for you?</span></div><div class="line" id="051603"><span class="nick" style="color:#234e69"><a href="#051603" label="[05:16:03]">&lt;muurkha&gt;</a></span><span class="message">are you enjoying it?</span></div><div class="line" id="051605"><span class="nick" style="color:#6c3d55"><a href="#051605" label="[05:16:05]">&lt;markjenkinssksp&gt;</a></span><span class="message">the experience of forcing myself to use a relatively primative sub-set of scheme?</span></div><div class="line" id="051655"><span class="nick" style="color:#234e69"><a href="#051655" label="[05:16:55]">&lt;muurkha&gt;</a></span><span class="message">overall writing the lox compiler</span></div><div class="line" id="051714"><span class="nick" style="color:#6c3d55"><a href="#051714" label="[05:17:14]">&lt;markjenkinssksp&gt;</a></span><span class="message">am enjoying, though getting sick of the restricted scheme, but the good news is that I've never gone deep into into scheme to use things like module systems, macros, co-routines, and continuations before, so I'm not missing out of that stuff</span></div><div class="line" id="051829"><span class="nick" style="color:#6c3d55"><a href="#051829" label="[05:18:29]">&lt;markjenkinssksp&gt;</a></span><span class="message">I did take a bit of a break for awhile when I found myself crashing the C/M2-Planet side of this project, but valgrind helped put me back on the right path</span></div><div class="line" id="051845"><span class="nick" style="color:#234e69"><a href="#051845" label="[05:18:45]">&lt;muurkha&gt;</a></span><span class="message">valgrind is very helpful</span></div><div class="line" id="051930"><span class="nick" style="color:#6c3d55"><a href="#051930" label="[05:19:30]">&lt;markjenkinssksp&gt;</a></span><span class="message">plus, I haven't had much opportunity to get myself into memory errors in the C since as most of the work I've done has been in the compiler writen in scheme and the nice thing about a pure bytecode interpreter (with no compiler present) is that it's relatively minimal C, a good thing to say when working in M2-Planet C in particular</span></div><div class="line" id="052029"><span class="nick" style="color:#234e69"><a href="#052029" label="[05:20:29]">&lt;muurkha&gt;</a></span><span class="message">do you miss SRFI-9 records?</span></div><div class="line" id="052130"><span class="nick" style="color:#234e69"><a href="#052130" label="[05:21:30]">&lt;muurkha&gt;</a></span><span class="message">not implementing define-record-type or defstruct was one of the decisions in Ur-Scheme I regretted</span></div><div class="line" id="052153"><span class="nick" style="color:#6c3d55"><a href="#052153" label="[05:21:53]">&lt;markjenkinssksp&gt;</a></span><span class="message">My bytecode interpeter patches are pretty small at this point, plus Nystrom goes out of his way to minimize the number of opcodes, OR was a good example where he notes in the book that he could have added one (OP_JUMP_IF_TRUE perhaps), but he showed off by showing the OP_JUMP and OP_JUMP_IF_FALSE from the if/else part of the chapter were sufficient</span></div><div class="line" id="052207"><span class="nick" style="color:#234e69"><a href="#052207" label="[05:22:07]">&lt;muurkha&gt;</a></span><span class="message">something similar happened in the early history of C, where at some point they added structs and the compiler got smaller</span></div><div class="line" id="052232"><span class="nick" style="color:#234e69"><a href="#052232" label="[05:22:32]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's a useful example to see</span></div><div class="line" id="052240"><span class="nick" style="color:#234e69"><a href="#052240" label="[05:22:40]">&lt;muurkha&gt;</a></span><span class="message">is this your first compiler?</span></div><div class="line" id="052243"><span class="nick" style="color:#6c3d55"><a href="#052243" label="[05:22:43]">&lt;markjenkinssksp&gt;</a></span><span class="message">I can't miss SRFI-9 records as I don't have experience with them, I'm pretty in experienced with scheme, it's pretty much this project and a very much work in progress transpiler project that I was working on (not published) ans shelved</span></div><div class="line" id="052318"><span class="nick" style="color:#234e69"><a href="#052318" label="[05:23:18]">&lt;muurkha&gt;</a></span><span class="message">SRFI-9 records are basically C structs</span></div><div class="line" id="052355"><span class="nick" style="color:#6c3d55"><a href="#052355" label="[05:23:55]">&lt;markjenkinssksp&gt;</a></span><span class="message">I wouldn't say my first compiler, I did take an intro to compilers univeristy course circa 2004-2005, which was mostly on tokenizing and parsing</span></div><div class="line" id="052428"><span class="nick" style="color:#234e69"><a href="#052428" label="[05:24:28]">&lt;muurkha&gt;</a></span><span class="message">yeah, that unfortunately happens a lot with intro to compilers courses</span></div><div class="line" id="052444"><span class="nick" style="color:#6c3d55"><a href="#052444" label="[05:24:44]">&lt;markjenkinssksp&gt;</a></span><span class="message">I also did some hobby (unpublished stuff where I was playing around transpiling a basic scheme into python using the structed python language gen stuff in python (not just doing a str output)</span></div><div class="line" id="052519"><span class="nick" style="color:#234e69"><a href="#052519" label="[05:25:19]">&lt;muurkha&gt;</a></span><span class="message">cool :)</span></div><div class="line" id="052606"><span class="nick" style="color:#6c3d55"><a href="#052606" label="[05:26:06]">&lt;markjenkinssksp&gt;</a></span><span class="message">and in one sense, this isn't truely me doing a compiler from scratch because I'm just working through Nystrom's book and taking his algorithms and data structures, making some feature/design simplifications, and doing the work in different language variants that his C</span></div><div class="line" id="052658"><span class="nick" style="color:#6c3d55"><a href="#052658" label="[05:26:58]">&lt;markjenkinssksp&gt;</a></span><span class="message">so it's going to be very much a immitation is a sincere form of flattery kind of thing in the end, especially if I make a tool here that's useful for bootstrapping other things</span></div><div class="line" id="052724"><span class="nick" style="color:#234e69"><a href="#052724" label="[05:27:24]">&lt;muurkha&gt;</a></span><span class="message">I think that's maybe the best way to do things</span></div><div class="line" id="052739"><span class="nick" style="color:#6c3d55"><a href="#052739" label="[05:27:39]">&lt;markjenkinssksp&gt;</a></span><span class="message">I'm glad I dont' even know about various SRFI's like 9 because I'm keeping myself in some pretty simple scheme here, and so my attempts to minimally bootstrap that later will go nicely</span></div><div class="line" id="052848"><span class="nick" style="color:#6c3d55"><a href="#052848" label="[05:28:48]">&lt;markjenkinssksp&gt;</a></span><span class="message">If the scheme I'm using isn't already compatible with the slow-lisp variant of mes in M2-planet or the M2-planet converted Mes, there's probably not much to do to make ti so</span></div><div class="line" id="052941"><span class="nick" style="color:#6c3d55"><a href="#052941" label="[05:29:41]">&lt;markjenkinssksp&gt;</a></span><span class="message">but those scheme implementations asside, I'm also interested in implementing the scheme I'm using by way of some portable alternatives to M2-planet, but that's a ways off</span></div><div class="line" id="053027"><span class="nick" style="color:#6c3d55"><a href="#053027" label="[05:30:27]">&lt;markjenkinssksp&gt;</a></span><span class="message">anyway, that's a night for me</span></div><div class="line" id="053110"><span class="nick" style="color:#6c3d55"><a href="#053110" label="[05:31:10]">&lt;markjenkinssksp&gt;</a></span><span class="message">Nystrom is definitely giving me a good learning experience which will hopefully make a better toolchain bootstrapper out of me in the end</span></div><div class="line" id="053114"><span class="nick" style="color:#234e69"><a href="#053114" label="[05:31:14]">&lt;muurkha&gt;</a></span><span class="message">sleep well!  nice to see your progress!</span></div><div class="line" id="053117"><span class="nick" style="color:#6c3d55"><a href="#053117" label="[05:31:17]">&lt;markjenkinssksp&gt;</a></span><span class="message">happy hacking</span></div><div class="line" id="053122"><span class="nick" style="color:#234e69"><a href="#053122" label="[05:31:22]">&lt;muurkha&gt;</a></span><span class="message">happy hacking!</span></div><div class="line" id="053600"><span class="nick" style="color:#6c3d55"><a href="#053600" label="[05:36:00]">&lt;markjenkinssksp&gt;</a></span><span class="message">came back to add one last thing, also on my TODO for soon before I implement more features is to check if my bytecode interpreter is compatible with the new M2-Planet release and to then update my git submodules :) Much congrats on that release. Glad it happened, as I pretty much always pin my sub-modules to release tags</span></div><div class="line" id="053745"><span class="nick" style="color:#234e69"><a href="#053745" label="[05:37:45]">&lt;muurkha&gt;</a></span><span class="message">yay! &lt;3</span></div><div class="line" id="053750"><span class="nick" style="color:#234e69"><a href="#053750" label="[05:37:50]">&lt;muurkha&gt;</a></span><span class="message">pinning is a good default</span></div><div class="line" id="172229"><span class="nick" style="color:#80b1d3"><a href="#172229" label="[17:22:29]">&lt;stikonas&gt;</a></span><span class="message">not having /usr/sbin -&gt; /usr/bin  symlink breaks xbps (it can't find pkg-config)</span></div><div class="line" id="172336"><span class="nick" style="color:#80b1d3"><a href="#172336" label="[17:23:36]">&lt;stikonas&gt;</a></span><span class="message">so I guess I'll not remove it for now</span></div><div class="line" id="172412"><span class="nick" style="color:#80b1d3"><a href="#172412" label="[17:24:12]">&lt;stikonas&gt;</a></span><span class="message">or alternatively I should install which</span></div><div class="line" id="175655"><span class="nick" style="color:#6c3d55"><a href="#175655" label="[17:56:55]">&lt;markjenkinssksp&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme/commit/5863925c6e39f90e70217b9801660c2c91c44acb">https://github.com/markjenkins/lox_compiler_scheme/commit/5863925c6e39f90e70217b9801660c2c91c44acb</a>  update git submodules M2-Planet (Release_1.10.0) mescc-tools (Release_1.4.0)</span></div><div class="line" id="210749"><span class="nick" style="color:#d9d9d9"><a href="#210749" label="[21:07:49]">&lt;doras&gt;</a></span><span class="message">Hi. Regarding live-bootstrap, do we happen to already have a way to bootstrap only sysa and only sysc in two different steps?</span></div><div class="line" id="211127"><span class="nick" style="color:#d9d9d9"><a href="#211127" label="[21:11:27]">&lt;doras&gt;</a></span><span class="message">In chroot mode, I mean.</span></div><div class="line" id="211534"><span class="nick" style="color:#80b1d3"><a href="#211534" label="[21:15:34]">&lt;stikonas&gt;</a></span><span class="message">doras: well, sysc is automatically launched</span></div><div class="line" id="211551"><span class="nick" style="color:#80b1d3"><a href="#211551" label="[21:15:51]">&lt;stikonas&gt;</a></span><span class="message">but we are doing some reworking now which might make launching just sysc easier</span></div><div class="line" id="211606"><span class="nick" style="color:#80b1d3"><a href="#211606" label="[21:16:06]">&lt;stikonas&gt;</a></span><span class="message">doras: so first of all it's becoming easier to run live-bootstrap without rootfs.py</span></div><div class="line" id="211745"><span class="nick" style="color:#80b1d3"><a href="#211745" label="[21:17:45]">&lt;stikonas&gt;</a></span><span class="message">and here <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/tree/transition_packages">https://github.com/stikonas/live-bootstrap/tree/transition_packages</a>  I have wip change to reinstall sysc using binary packages from sysa rather than copying /usr from sysa</span></div><div class="line" id="212307"><span class="nick" style="color:#d9d9d9"><a href="#212307" label="[21:23:07]">&lt;doras&gt;</a></span><span class="message">I see...</span></div><div class="line" id="212343"><span class="nick" style="color:#d9d9d9"><a href="#212343" label="[21:23:43]">&lt;doras&gt;</a></span><span class="message">What would be the main benefit? Installing only what's actually needed by sysc?</span></div><div class="line" id="212350"><span class="nick" style="color:#80b1d3"><a href="#212350" label="[21:23:50]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="212402"><span class="nick" style="color:#80b1d3"><a href="#212402" label="[21:24:02]">&lt;stikonas&gt;</a></span><span class="message">so we don't keep broken stuff like tcc or stage0-posix</span></div><div class="line" id="212448"><span class="nick" style="color:#d9d9d9"><a href="#212448" label="[21:24:48]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="212458"><span class="nick" style="color:#80b1d3"><a href="#212458" label="[21:24:58]">&lt;stikonas&gt;</a></span><span class="message">and also it reduces number of stuff that we move</span></div><div class="line" id="212508"><span class="nick" style="color:#80b1d3"><a href="#212508" label="[21:25:08]">&lt;stikonas&gt;</a></span><span class="message">before we moved both packages and /usr</span></div><div class="line" id="212612"><span class="nick" style="color:#d9d9d9"><a href="#212612" label="[21:26:12]">&lt;doras&gt;</a></span><span class="message">I like the benefit, but doesn't installing packages as part of sysc's bootstrap complicate things a little?</span></div><div class="line" id="212708"><span class="nick" style="color:#d9d9d9"><a href="#212708" label="[21:27:08]">&lt;doras&gt;</a></span><span class="message">I feel like it would be better to actually a new sysroot for sysc that only includes what it actually as part of sysa's/sysb's would keep the output of those bootstrap steps simple: a single directory structure.</span></div><div class="line" id="212717"><span class="nick" style="color:#80b1d3"><a href="#212717" label="[21:27:17]">&lt;stikonas&gt;</a></span><span class="message">well, it's fairly simple to install them</span></div><div class="line" id="212723"><span class="nick" style="color:#d9d9d9"><a href="#212723" label="[21:27:23]">&lt;doras&gt;</a></span><span class="message">to actually install a new sysroot*</span></div><div class="line" id="212726"><span class="nick" style="color:#80b1d3"><a href="#212726" label="[21:27:26]">&lt;stikonas&gt;</a></span><span class="message">basically just untaring .tar.bz2 archives</span></div><div class="line" id="212752"><span class="nick" style="color:#80b1d3"><a href="#212752" label="[21:27:52]">&lt;stikonas&gt;</a></span><span class="message">so we need to copy bash, tar, bzip2 binaries (also patch and gzip but that's because we don't have packages for those in sysa, they are built before bash)</span></div><div class="line" id="212840"><span class="nick" style="color:#d9d9d9"><a href="#212840" label="[21:28:40]">&lt;doras&gt;</a></span><span class="message">I mean, I'd like to think of sysa/sysb/sysc as separate input-&gt;output steps. Each starts with a seed and sources as input (can be a large seed with sysb/sysc), and each ends with a sysroot that the next step can consume as its input.</span></div><div class="line" id="212855"><span class="nick" style="color:#d9d9d9"><a href="#212855" label="[21:28:55]">&lt;doras&gt;</a></span><span class="message">This is a very nice quality of the existing design, I think.</span></div><div class="line" id="212911"><span class="nick" style="color:#80b1d3"><a href="#212911" label="[21:29:11]">&lt;stikonas&gt;</a></span><span class="message">well, packages are basically input seed then</span></div><div class="line" id="212942"><span class="nick" style="color:#80b1d3"><a href="#212942" label="[21:29:42]">&lt;stikonas&gt;</a></span><span class="message">though we also copy in older unused packages (for inspection purposes and checksums)</span></div><div class="line" id="212948"><span class="nick" style="color:#d9d9d9"><a href="#212948" label="[21:29:48]">&lt;doras&gt;</a></span><span class="message">Right, you change both the output and input.</span></div><div class="line" id="213112"><span class="nick" style="color:#d9d9d9"><a href="#213112" label="[21:31:12]">&lt;doras&gt;</a></span><span class="message">So if I try to define the flaw regarding the existing design, it's that sysa's (and maybe also sysb's) output contains many unnecessary things.</span></div><div class="line" id="213134"><span class="nick" style="color:#80b1d3"><a href="#213134" label="[21:31:34]">&lt;stikonas&gt;</a></span><span class="message">well, depends on what you mean by output</span></div><div class="line" id="213144"><span class="nick" style="color:#80b1d3"><a href="#213144" label="[21:31:44]">&lt;stikonas&gt;</a></span><span class="message">in /usr, yes they have some unnecessary things</span></div><div class="line" id="213158"><span class="nick" style="color:#80b1d3"><a href="#213158" label="[21:31:58]">&lt;stikonas&gt;</a></span><span class="message">well, it creates unnecessary packages (older versions)</span></div><div class="line" id="213216"><span class="nick" style="color:#d9d9d9"><a href="#213216" label="[21:32:16]">&lt;doras&gt;</a></span><span class="message">Usually the output of a step (say, sysa) is the input for the next step (say, sysc).</span></div><div class="line" id="213231"><span class="nick" style="color:#80b1d3"><a href="#213231" label="[21:32:31]">&lt;stikonas&gt;</a></span><span class="message">but right now they are propagated to the end, so that we can run sha256sum * on all packages and produces sysa/SHA256SUM.pkg file with checksums of all packages</span></div><div class="line" id="213358"><span class="nick" style="color:#80b1d3"><a href="#213358" label="[21:33:58]">&lt;stikonas&gt;</a></span><span class="message">well, sysa moves all binary tarballs (output of sysa) to /sysc/usr/src/repo which we then install in sysc (so I would say that this is input to sysc)</span></div><div class="line" id="213425"><span class="nick" style="color:#80b1d3"><a href="#213425" label="[21:34:25]">&lt;stikonas&gt;</a></span><span class="message">or at least part of the input (plus a few crucial binaries for unpacking)</span></div><div class="line" id="213448"><span class="nick" style="color:#d9d9d9"><a href="#213448" label="[21:34:48]">&lt;doras&gt;</a></span><span class="message">I'll try to explain my thoughts better by describing an alternative solution: instead of unpacking the packages as part of sysc's bootstrap, we could unpack them into a new /usr directory at the end of sysa's and sysb's bootstrap.</span></div><div class="line" id="213504"><span class="nick" style="color:#80b1d3"><a href="#213504" label="[21:35:04]">&lt;stikonas&gt;</a></span><span class="message">in sysa?</span></div><div class="line" id="213516"><span class="nick" style="color:#80b1d3"><a href="#213516" label="[21:35:16]">&lt;stikonas&gt;</a></span><span class="message">but what's the benefit?</span></div><div class="line" id="213546"><span class="nick" style="color:#80b1d3"><a href="#213546" label="[21:35:46]">&lt;stikonas&gt;</a></span><span class="message">the downside is that it would end up in far bigger initramfs image in  sysb or more stuff is moved to sysc</span></div><div class="line" id="213556"><span class="nick" style="color:#80b1d3"><a href="#213556" label="[21:35:56]">&lt;stikonas&gt;</a></span><span class="message">and memory is quite constrained in sysa</span></div><div class="line" id="213632"><span class="nick" style="color:#80b1d3"><a href="#213632" label="[21:36:32]">&lt;stikonas&gt;</a></span><span class="message">since sysa must fit in 3 GiB of RAM for running in qemu/baremetal</span></div><div class="line" id="213709"><span class="nick" style="color:#80b1d3"><a href="#213709" label="[21:37:09]">&lt;stikonas&gt;</a></span><span class="message">well, talk to fossy once he wakes up...</span></div><div class="line" id="213715"><span class="nick" style="color:#d9d9d9"><a href="#213715" label="[21:37:15]">&lt;doras&gt;</a></span><span class="message">The benefit is that the final step in sysa actually creates a useful sysroot that one can chroot into without needing any bootstrap operation to do useful stuff in.</span></div><div class="line" id="213736"><span class="nick" style="color:#80b1d3"><a href="#213736" label="[21:37:36]">&lt;stikonas&gt;</a></span><span class="message">chrooting works just fine now</span></div><div class="line" id="213742"><span class="nick" style="color:#80b1d3"><a href="#213742" label="[21:37:42]">&lt;stikonas&gt;</a></span><span class="message">as it's self-contained in sysa</span></div><div class="line" id="213747"><span class="nick" style="color:#80b1d3"><a href="#213747" label="[21:37:47]">&lt;stikonas&gt;</a></span><span class="message">sorry self-contained in sysc</span></div><div class="line" id="213809"><span class="nick" style="color:#80b1d3"><a href="#213809" label="[21:38:09]">&lt;stikonas&gt;</a></span><span class="message">you can just run sudo chroot /path/to/sysc /init</span></div><div class="line" id="213843"><span class="nick" style="color:#80b1d3"><a href="#213843" label="[21:38:43]">&lt;stikonas&gt;</a></span><span class="message">well, yes, you need to do some bootstrap operation, but it's fairly quick</span></div><div class="line" id="213900"><span class="nick" style="color:#80b1d3"><a href="#213900" label="[21:39:00]">&lt;stikonas&gt;</a></span><span class="message">I do see some benefit for not having bootstrap operation</span></div><div class="line" id="213905"><span class="nick" style="color:#80b1d3"><a href="#213905" label="[21:39:05]">&lt;stikonas&gt;</a></span><span class="message">but there are also cons...</span></div><div class="line" id="213933"><span class="nick" style="color:#d9d9d9"><a href="#213933" label="[21:39:33]">&lt;doras&gt;</a></span><span class="message">I'm referring to ${SYSC} for a moment at the end of sysa's bootstrap. What binaries does it contain other than bash, tar, bzip2, gzip and patch? Only those, right?</span></div><div class="line" id="213942"><span class="nick" style="color:#80b1d3"><a href="#213942" label="[21:39:42]">&lt;stikonas&gt;</a></span><span class="message">yes, only those</span></div><div class="line" id="213952"><span class="nick" style="color:#d9d9d9"><a href="#213952" label="[21:39:52]">&lt;doras&gt;</a></span><span class="message">I can't &quot;ls&quot;, &quot;cp&quot; or anything useful if I chroot into that.</span></div><div class="line" id="214015"><span class="nick" style="color:#d9d9d9"><a href="#214015" label="[21:40:15]">&lt;doras&gt;</a></span><span class="message">I must install packages first.</span></div><div class="line" id="214025"><span class="nick" style="color:#80b1d3"><a href="#214025" label="[21:40:25]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="214026"><span class="nick" style="color:#80b1d3"><a href="#214026" label="[21:40:26]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/blob/transition_packages/sysc/init#L24">https://github.com/stikonas/live-bootstrap/blob/transition_packages/sysc/init#L24</a> </span></div><div class="line" id="214139"><span class="nick" style="color:#d9d9d9"><a href="#214139" label="[21:41:39]">&lt;doras&gt;</a></span><span class="message">Right. This is the downside I see here. That the output of sysa (the ${SYSC} sysroot) is not generally useful without an additional package install step.</span></div><div class="line" id="214142"><span class="nick" style="color:#80b1d3"><a href="#214142" label="[21:41:42]">&lt;stikonas&gt;</a></span><span class="message">well, I guess it's possible to move some of this code to sysa and sysb</span></div><div class="line" id="214152"><span class="nick" style="color:#80b1d3"><a href="#214152" label="[21:41:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, I see what you mean</span></div><div class="line" id="214156"><span class="nick" style="color:#80b1d3"><a href="#214156" label="[21:41:56]">&lt;stikonas&gt;</a></span><span class="message">anyway, let's wait for fossy</span></div><div class="line" id="214230"><span class="nick" style="color:#d9d9d9"><a href="#214230" label="[21:42:30]">&lt;doras&gt;</a></span><span class="message">But with that said, it's also fine to say that we don't want sysa's output to be generally useful to anything other than bootstrapping the next sysx.</span></div><div class="line" id="214259"><span class="nick" style="color:#d9d9d9"><a href="#214259" label="[21:42:59]">&lt;doras&gt;</a></span><span class="message">I think this is an entirely valid decision to make.</span></div><div class="line" id="214422"><span class="nick" style="color:#d9d9d9"><a href="#214422" label="[21:44:22]">&lt;doras&gt;</a></span><span class="message">I agree, both approaches have upsides and downsides. I'm not even sure which I prefer anymore :)</span></div><div class="line" id="214508"><span class="nick" style="color:#d9d9d9"><a href="#214508" label="[21:45:08]">&lt;doras&gt;</a></span><span class="message">But I like the fact that sysa's output will be much smaller and without unnecessary packages. Very nice :)</span></div><div class="line" id="214531"><span class="nick" style="color:#d9d9d9"><a href="#214531" label="[21:45:31]">&lt;doras&gt;</a></span><span class="message">And this will happen either way, so no complaints from me :)</span></div><div class="line" id="214633"><span class="nick" style="color:#d9d9d9"><a href="#214633" label="[21:46:33]">&lt;doras&gt;</a></span><span class="message">I'm currently trying to rebase my bubblewrap branch on top of the latest changes to see if it still builds.</span></div><div class="line" id="215052"><span class="nick" style="color:#d9d9d9"><a href="#215052" label="[21:50:52]">&lt;doras&gt;</a></span><span class="message">Previously I was left with only one workaround that I needed a solution for before I could open PR to have it merged.</span></div><div class="line" id="215118"><span class="nick" style="color:#d9d9d9"><a href="#215118" label="[21:51:18]">&lt;doras&gt;</a></span><span class="message">I still need a solution for it.</span></div><div class="line" id="215153"><span class="nick" style="color:#d9d9d9"><a href="#215153" label="[21:51:53]">&lt;doras&gt;</a></span><span class="message">This one: <a rel="nofollow" href="https://github.com/doraskayo/live-bootstrap/commit/b16e0d1a9eff767e5e27064d86293a0aad66d9bb">https://github.com/doraskayo/live-bootstrap/commit/b16e0d1a9eff767e5e27064d86293a0aad66d9bb</a> </span></div><div class="line" id="215155"><span class="nick" style="color:#80b1d3"><a href="#215155" label="[21:51:55]">&lt;stikonas&gt;</a></span><span class="message">well, bubblewrap should work with either approach</span></div><div class="line" id="215227"><span class="nick" style="color:#80b1d3"><a href="#215227" label="[21:52:27]">&lt;stikonas&gt;</a></span><span class="message">doras: tmpfs should be unnecessary now</span></div><div class="line" id="215232"><span class="nick" style="color:#d9d9d9"><a href="#215232" label="[21:52:32]">&lt;doras&gt;</a></span><span class="message">Of course. The output of sysa and how sysc consumes it is entirely an implementation detail of the two.</span></div><div class="line" id="215233"><span class="nick" style="color:#80b1d3"><a href="#215233" label="[21:52:33]">&lt;stikonas&gt;</a></span><span class="message">you can just run directly on normal fs</span></div><div class="line" id="215246"><span class="nick" style="color:#80b1d3"><a href="#215246" label="[21:52:46]">&lt;stikonas&gt;</a></span><span class="message">basically take stage0-posix</span></div><div class="line" id="215252"><span class="nick" style="color:#80b1d3"><a href="#215252" label="[21:52:52]">&lt;stikonas&gt;</a></span><span class="message">copy over live-bootstrap</span></div><div class="line" id="215301"><span class="nick" style="color:#80b1d3"><a href="#215301" label="[21:53:01]">&lt;stikonas&gt;</a></span><span class="message">and move sysa/after.kaem to after.kaem</span></div><div class="line" id="215309"><span class="nick" style="color:#80b1d3"><a href="#215309" label="[21:53:09]">&lt;stikonas&gt;</a></span><span class="message">and it should be possible to kick it off</span></div><div class="line" id="215351"><span class="nick" style="color:#80b1d3"><a href="#215351" label="[21:53:51]">&lt;stikonas&gt;</a></span><span class="message">we had a couple of issues, without tmpfs (tar order was messed up and something with automake but I think those are fixed now)</span></div><div class="line" id="215611"><span class="nick" style="color:#d9d9d9"><a href="#215611" label="[21:56:11]">&lt;doras&gt;</a></span><span class="message">I actually worked on two projects in parallel at the time which had a shared portion: one was to get live-bootstrap building in a sandbox environment without root permissions (bubblewrap), and another was to build live-bootstrap entirely within BuildStream with 0 dependencies other than a kernel that can chroot+exec.</span></div><div class="line" id="215718"><span class="nick" style="color:#d9d9d9"><a href="#215718" label="[21:57:18]">&lt;doras&gt;</a></span><span class="message">With the first project, python and ./root.py are still used, but instead of doing &quot;sudo&quot;, creating device nodes and other privileged commands, I set up a bubblewrap sandbox that already comes prepared with those.</span></div><div class="line" id="215724"><span class="nick" style="color:#80b1d3"><a href="#215724" label="[21:57:24]">&lt;stikonas&gt;</a></span><span class="message">well, both should be a bit easier now than a few months ago when you last asked</span></div><div class="line" id="215821"><span class="nick" style="color:#d9d9d9"><a href="#215821" label="[21:58:21]">&lt;doras&gt;</a></span><span class="message">Right. I noticed you've done a lot of progress on being able to build with 0 dependencies. Very nice.</span></div><div class="line" id="215835"><span class="nick" style="color:#d9d9d9"><a href="#215835" label="[21:58:35]">&lt;doras&gt;</a></span><span class="message">I'll probably have a lot of work to adjust what I had to the new approach :)</span></div><div class="line" id="215850"><span class="nick" style="color:#d9d9d9"><a href="#215850" label="[21:58:50]">&lt;doras&gt;</a></span><span class="message">But it would mostly be to simplify things, which is nice.</span></div><div class="line" id="215955"><span class="nick" style="color:#d9d9d9"><a href="#215955" label="[21:59:55]">&lt;doras&gt;</a></span><span class="message">But I wanted to start with getting the bwrap build working so I can propose it for merge to live-bootstrap. Basically unprivileged/safe bootstrap inside a sandbox. It's should be a nice feature for the project, I think.</span></div><div class="line" id="220019"><span class="nick" style="color:#d9d9d9"><a href="#220019" label="[22:00:19]">&lt;doras&gt;</a></span><span class="message">But the commit I mentioned was the last &quot;hack&quot; I had remaining in my side-branch.</span></div><div class="line" id="220208"><span class="nick" style="color:#d9d9d9"><a href="#220208" label="[22:02:08]">&lt;doras&gt;</a></span><span class="message">So I wanted to ask you what you thought would be a good solution. My issue is that I can't create a tmpfs for &quot;sysa&quot; because it requires escalated permissions.</span></div><div class="line" id="220240"><span class="nick" style="color:#d9d9d9"><a href="#220240" label="[22:02:40]">&lt;doras&gt;</a></span><span class="message">So up until now I simply commented out this part and instead relied on a normal directory for the bootstrap of sysa.</span></div><div class="line" id="220255"><span class="nick" style="color:#d9d9d9"><a href="#220255" label="[22:02:55]">&lt;doras&gt;</a></span><span class="message">It worked great.</span></div><div class="line" id="220352"><span class="nick" style="color:#80b1d3"><a href="#220352" label="[22:03:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess running witout tmpfs is possibility</span></div><div class="line" id="220355"><span class="nick" style="color:#d9d9d9"><a href="#220355" label="[22:03:55]">&lt;doras&gt;</a></span><span class="message">But I wasn't sure if this was an acceptable approach.</span></div><div class="line" id="220407"><span class="nick" style="color:#80b1d3"><a href="#220407" label="[22:04:07]">&lt;stikonas&gt;</a></span><span class="message">probably, at least in rootless mode</span></div><div class="line" id="220545"><span class="nick" style="color:#d9d9d9"><a href="#220545" label="[22:05:45]">&lt;doras&gt;</a></span><span class="message">I may be able to go a long way to actually create a tmpfs for sysa's bootstrap, but it would probably require creating a &quot;sandbox&quot; that includes the entire host OS, so I could then create another sandbox inside it that is where we'd actually bootstrap sysa.</span></div><div class="line" id="220653"><span class="nick" style="color:#d9d9d9"><a href="#220653" label="[22:06:53]">&lt;doras&gt;</a></span><span class="message">I'm not even sure if it would work, but it sounds like a complicated solution for something that may be a non-issue.</span></div><div class="line" id="221025"><span class="nick" style="color:#80b1d3"><a href="#221025" label="[22:10:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, I would just keep it simple</span></div><div class="line" id="221044"><span class="nick" style="color:#80b1d3"><a href="#221044" label="[22:10:44]">&lt;stikonas&gt;</a></span><span class="message">tmpfs was mostly for automatic cleanup</span></div><div class="line" id="221100"><span class="nick" style="color:#d9d9d9"><a href="#221100" label="[22:11:00]">&lt;doras&gt;</a></span><span class="message">Actually, I just checked and I think it can work and is not very complicated. Though I'm not sure if it will always work because it technically wraps the entire host OS in a &quot;sandbox&quot; (basically chrooting into / with user namespaces enabled).</span></div><div class="line" id="221102"><span class="nick" style="color:#d9d9d9"><a href="#221102" label="[22:11:02]">&lt;doras&gt;</a></span><span class="message">Hmmm</span></div><div class="line" id="221108"><span class="nick" style="color:#80b1d3"><a href="#221108" label="[22:11:08]">&lt;stikonas&gt;</a></span><span class="message">it does seem to affect some things (the order in which tar packed files) but we workarounded that now</span></div><div class="line" id="221120"><span class="nick" style="color:#d9d9d9"><a href="#221120" label="[22:11:20]">&lt;doras&gt;</a></span><span class="message">Not for performance reasons?</span></div><div class="line" id="221132"><span class="nick" style="color:#80b1d3"><a href="#221132" label="[22:11:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, to be honest I'm not sure</span></div><div class="line" id="221146"><span class="nick" style="color:#80b1d3"><a href="#221146" label="[22:11:46]">&lt;stikonas&gt;</a></span><span class="message">I don't think it would run much faster</span></div><div class="line" id="221159"><span class="nick" style="color:#80b1d3"><a href="#221159" label="[22:11:59]">&lt;stikonas&gt;</a></span><span class="message">things are mostly CPU bound</span></div><div class="line" id="221200"><span class="nick" style="color:#d9d9d9"><a href="#221200" label="[22:12:00]">&lt;doras&gt;</a></span><span class="message">Or maybe disk wear?</span></div><div class="line" id="221234"><span class="nick" style="color:#80b1d3"><a href="#221234" label="[22:12:34]">&lt;stikonas&gt;</a></span><span class="message">well, yes, it does help with disk wear</span></div><div class="line" id="221239"><span class="nick" style="color:#80b1d3"><a href="#221239" label="[22:12:39]">&lt;stikonas&gt;</a></span><span class="message">although only for sysa</span></div><div class="line" id="221245"><span class="nick" style="color:#80b1d3"><a href="#221245" label="[22:12:45]">&lt;stikonas&gt;</a></span><span class="message">sysc needs disk</span></div><div class="line" id="221317"><span class="nick" style="color:#80b1d3"><a href="#221317" label="[22:13:17]">&lt;stikonas&gt;</a></span><span class="message">well, it need disk only in qemu mode</span></div><div class="line" id="221319"><span class="nick" style="color:#d9d9d9"><a href="#221319" label="[22:13:19]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="221325"><span class="nick" style="color:#80b1d3"><a href="#221325" label="[22:13:25]">&lt;stikonas&gt;</a></span><span class="message">I think chroot mode always uses tmpfs</span></div><div class="line" id="221754"><span class="nick" style="color:#d9d9d9"><a href="#221754" label="[22:17:54]">&lt;doras&gt;</a></span><span class="message">I'm leaning towards removing that &quot;shared code&quot; for creating a tmpfs from SysA's constructor (is that the right Python term?), and then do it only for the modes where it makes sense to do it (all the current modes), and then do something else for the bwrap mode: either work without tmpfs or come up with a way to create a tempfs using namespaces or something.</span></div><div class="line" id="221844"><span class="nick" style="color:#d9d9d9"><a href="#221844" label="[22:18:44]">&lt;doras&gt;</a></span><span class="message">Because the creation of the tmpfs for sysa is unconditional and too early for me at the moment.</span></div><div class="line" id="222041"><span class="nick" style="color:#80b1d3"><a href="#222041" label="[22:20:41]">&lt;stikonas&gt;</a></span><span class="message">we also need to add download only mode for rootfs.py...</span></div><div class="line" id="223053"><span class="nick" style="color:#d9d9d9"><a href="#223053" label="[22:30:53]">&lt;doras&gt;</a></span><span class="message">Hmmm... I think I managed to create an unprivileged tmpfs using user and mount namespaces.</span></div><div class="line" id="223106"><span class="nick" style="color:#d9d9d9"><a href="#223106" label="[22:31:06]">&lt;doras&gt;</a></span><span class="message">Let's see if it's actually temporary...</span></div><div class="line" id="223241"><span class="nick" style="color:#d9d9d9"><a href="#223241" label="[22:32:41]">&lt;doras&gt;</a></span><span class="message">It's indeed temporary, but also sandboxed, so the host can't see into it ;D</span></div><div class="line" id="223348"><span class="nick" style="color:#d9d9d9"><a href="#223348" label="[22:33:48]">&lt;doras&gt;</a></span><span class="message">I'm not sure if this is actually useful, then. The host can't actually see or access the result of the build process.</span></div><div class="line" id="223353"><span class="nick" style="color:#d9d9d9"><a href="#223353" label="[22:33:53]">&lt;doras&gt;</a></span><span class="message">Well, bootstrap process*</span></div><div class="line" id="223644"><span class="nick" style="color:#d9d9d9"><a href="#223644" label="[22:36:44]">&lt;doras&gt;</a></span><span class="message">I do wish to have a persistent on-disk output of the bootstrap process. Basically the sysc sysroot. So if the entire process is done inside a sandbox in memory, it's not really useful.</span></div><div class="line" id="223843"><span class="nick" style="color:#d9d9d9"><a href="#223843" label="[22:38:43]">&lt;doras&gt;</a></span><span class="message">Hmmm... I think I'll analyze the file structure after the recent changes in live-bootstrap to determine if I can work around this somehow. Maybe bootstrap sysa in a tmpfs and then sysc outside it.</span></div><div class="line" id="225427"><span class="nick" style="color:#d9d9d9"><a href="#225427" label="[22:54:27]">&lt;doras&gt;</a></span><span class="message">I remember the chroot (and therefore also the bwrap) mode was bootstrapping sysc in sysa/tmp/sysc, which was a bit odd.</span></div><div class="line" id="225640"><span class="nick" style="color:#d9d9d9"><a href="#225640" label="[22:56:40]">&lt;doras&gt;</a></span><span class="message">In my case if sysa/tmp is a sandboxed, memory-only, host-inaccessible directory, no output can actually be extracted by the host from the bootstrap process.</span></div><div class="line" id="230100"><span class="nick" style="color:#d9d9d9"><a href="#230100" label="[23:01:00]">&lt;doras&gt;</a></span><span class="message">But I guess this issue partially applies at least to the chroot mode as well. The tmpfs in sysa/tmp disappears after the bootstrap completes and the user exits the shell.</span></div><div class="line" id="230157"><span class="nick" style="color:#d9d9d9"><a href="#230157" label="[23:01:57]">&lt;doras&gt;</a></span><span class="message">So it's mostly an issue of live-boostrap in general not providing any actual persistent output from the bootstrap process, at least for the chroot mode.</span></div><div class="line" id="230455"><span class="nick" style="color:#d9d9d9"><a href="#230455" label="[23:04:55]">&lt;doras&gt;</a></span><span class="message">If we'll solve it for the chroot mode, we'll also solve it for the bwrap/rootless mode automatically.</span></div><div class="line" id="230723"><span class="nick" style="color:#d9d9d9"><a href="#230723" label="[23:07:23]">&lt;doras&gt;</a></span><span class="message">I guess there's the &quot;don't unmount the tmpfs&quot; when I exit mode, which kind of works around that.</span></div><div class="line" id="230740"><span class="nick" style="color:#d9d9d9"><a href="#230740" label="[23:07:40]">&lt;doras&gt;</a></span><span class="message">&quot;don't unmount the tmpfs when I exit&quot; mode*</span></div><div class="line" id="231047"><span class="nick" style="color:#d9d9d9"><a href="#231047" label="[23:10:47]">&lt;doras&gt;</a></span><span class="message">But I this is not possible to do when creating a new mount namespace. Once I exit from it, the tmpfs is automatically unmounted. No way around it.</span></div><div class="line" id="231114"><span class="nick" style="color:#d9d9d9"><a href="#231114" label="[23:11:14]">&lt;doras&gt;</a></span><span class="message">But I think*</span></div><div class="line" id="231732"><span class="nick" style="color:#d9d9d9"><a href="#231732" label="[23:17:32]">&lt;doras&gt;</a></span><span class="message">Oddly enough it doesn't get unmounted, but rather becomes inaccessible and the allocated RAM enters limbo. Very odd.</span></div><div class="line" id="231803"><span class="nick" style="color:#80b1d3"><a href="#231803" label="[23:18:03]">&lt;stikonas&gt;</a></span><span class="message">hmm odd. But at this stage I think you might be more familiar with what's going on there</span></div><div class="line" id="231818"><span class="nick" style="color:#80b1d3"><a href="#231818" label="[23:18:18]">&lt;stikonas&gt;</a></span><span class="message">than others (and me in particular) here...</span></div><div class="line" id="234103"><span class="nick" style="color:#d9d9d9"><a href="#234103" label="[23:41:03]">&lt;doras&gt;</a></span><span class="message">stikonas: is it possible that the chroot-based bootstrap doesn't currently work in live-bootstrap?</span></div><div class="line" id="234135"><span class="nick" style="color:#d9d9d9"><a href="#234135" label="[23:41:35]">&lt;doras&gt;</a></span><span class="message">It seems that &quot;kaem-optional-seed&quot; fails almost immediately for me.</span></div><div class="line" id="234219"><span class="nick" style="color:#d9d9d9"><a href="#234219" label="[23:42:19]">&lt;doras&gt;</a></span><span class="message">All I get is this:</span></div><div class="line" id="234219"><span class="nick" style="color:#d9d9d9"><a href="#234219" label="[23:42:19]">&lt;doras&gt;</a></span><span class="message"> +&gt; ./bootstrap-seeds/POSIX/x86/kaem-optional-seed ./x86/mescc-tools-seed-kaem.kaem</span></div><div class="line" id="234219"><span class="nick" style="color:#d9d9d9"><a href="#234219" label="[23:42:19]">&lt;doras&gt;</a></span><span class="message">Subprocess error</span></div><div class="line" id="234219"><span class="nick" style="color:#d9d9d9"><a href="#234219" label="[23:42:19]">&lt;doras&gt;</a></span><span class="message">ABORTING HARD</span></div><div class="line" id="234516"><span class="nick" style="color:#80b1d3"><a href="#234516" label="[23:45:16]">&lt;stikonas&gt;</a></span><span class="message">doras: how are you starting it?</span></div><div class="line" id="234524"><span class="nick" style="color:#80b1d3"><a href="#234524" label="[23:45:24]">&lt;stikonas&gt;</a></span><span class="message">it definitely should work</span></div><div class="line" id="234612"><span class="nick" style="color:#80b1d3"><a href="#234612" label="[23:46:12]">&lt;stikonas&gt;</a></span><span class="message">I usually run both chroot and qemu builds before pushing</span></div><div class="line" id="234733"><span class="nick" style="color:#d9d9d9"><a href="#234733" label="[23:47:33]">&lt;doras&gt;</a></span><span class="message">Simply ./root.py --chroot</span></div><div class="line" id="234753"><span class="nick" style="color:#d9d9d9"><a href="#234753" label="[23:47:53]">&lt;doras&gt;</a></span><span class="message">I mean: ./rootfs.py --chroot</span></div><div class="line" id="234817"><span class="nick" style="color:#d9d9d9"><a href="#234817" label="[23:48:17]">&lt;doras&gt;</a></span><span class="message">It's as if the seed itself fails. Hmmm...</span></div><div class="line" id="234915"><span class="nick" style="color:#d9d9d9"><a href="#234915" label="[23:49:15]">&lt;doras&gt;</a></span><span class="message">I don't seem to have an &quot;./x86/mescc-tools-seed-kaem.kaem&quot; anywhere...</span></div><div class="line" id="234942"><span class="nick" style="color:#d9d9d9"><a href="#234942" label="[23:49:42]">&lt;doras&gt;</a></span><span class="message">Where is that supposed to come from?</span></div><div class="line" id="235246"><span class="nick" style="color:#d9d9d9"><a href="#235246" label="[23:52:46]">&lt;doras&gt;</a></span><span class="message">I figured it out, it was a submodule issue.</span></div><br /></div></body></html>