<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000150"><span class="nick" style="color:#389600"><a href="#000150" label="[00:01:50]">&lt;oriansj&gt;</a></span><span class="message">sam_: would I be reasonable to guess that in post_src_prepare it is referencing a global variable S which is used by emerge to indicate the build directory?</span></div><div class="line" id="000248"><span class="nick" style="color:#8dd3c7"><a href="#000248" label="[00:02:48]">&lt;stikonas&gt;</a></span><span class="message">well, install procedure is probably quiccker to test...</span></div><div class="line" id="000257"><span class="nick" style="color:#8dd3c7"><a href="#000257" label="[00:02:57]">&lt;stikonas&gt;</a></span><span class="message">rustc bootstrap is not so quick</span></div><div class="line" id="000332"><span class="nick" style="color:#8dd3c7"><a href="#000332" label="[00:03:32]">&lt;stikonas&gt;</a></span><span class="message">oriansj: there is a wiki page with ebuild variables, let me find it for you</span></div><div class="line" id="000355"><span class="nick" style="color:#8dd3c7"><a href="#000355" label="[00:03:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj:  <a rel="nofollow" href="https://devmanual.gentoo.org/ebuild-writing/variables/">https://devmanual.gentoo.org/ebuild-writing/variables/</a> </span></div><div class="line" id="000419"><span class="nick" style="color:#389600"><a href="#000419" label="[00:04:19]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you</span></div><div class="line" id="000552"><span class="nick" style="color:#389600"><a href="#000552" label="[00:05:52]">&lt;oriansj&gt;</a></span><span class="message">and I am guessing there is a place in my setup procedure setting up the overlay is probably optimal</span></div><div class="line" id="000605"><span class="nick" style="color:#389600"><a href="#000605" label="[00:06:05]">&lt;oriansj&gt;</a></span><span class="message">(atleast in terms of testing purposes)</span></div><div class="line" id="000706"><span class="nick" style="color:#389600"><a href="#000706" label="[00:07:06]">&lt;oriansj&gt;</a></span><span class="message">(speaking of which here is the current state of it: <a rel="nofollow" href="https://paste.debian.net/1252670/">https://paste.debian.net/1252670/</a>  )</span></div><div class="line" id="000844"><span class="nick" style="color:#8dd3c7"><a href="#000844" label="[00:08:44]">&lt;stikonas&gt;</a></span><span class="message">well, any overlay stuff is not necessary for basic install</span></div><div class="line" id="000857"><span class="nick" style="color:#389600"><a href="#000857" label="[00:08:57]">&lt;oriansj&gt;</a></span><span class="message">(forgive the slow progress, as I am testing everything and building with only a single core in qemu is slow)</span></div><div class="line" id="000944"><span class="nick" style="color:#389600"><a href="#000944" label="[00:09:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: fair, probably a good idea to put it after the essential luks/grub setup and reboot bit</span></div><div class="line" id="000947"><span class="nick" style="color:#8dd3c7"><a href="#000947" label="[00:09:47]">&lt;stikonas&gt;</a></span><span class="message">but as soon as you try to build e.g. rust stuff (including librsvg) you either have to increase your binary seed (so use rustc-bin) or bootstrap it</span></div><div class="line" id="001353"><span class="nick" style="color:#389600"><a href="#001353" label="[00:13:53]">&lt;oriansj&gt;</a></span><span class="message">well right now the current build target is going to be: xinit slim i3-wm dmenu x11-xserver-utils grub2 cryptsetup linux screen bash most binutils cgdb curl fdupes gcc gdb git gpg guile-2.2 htop make ncdu ranger stow tig time tmux trash-cli tree as that would be at feature parity of Debian's default GUI setup</span></div><div class="line" id="001436"><span class="nick" style="color:#389600"><a href="#001436" label="[00:14:36]">&lt;oriansj&gt;</a></span><span class="message">but yeah if I include mpv and sway, I would definitely need to deal with rust</span></div><div class="line" id="001721"><span class="nick" style="color:#389600"><a href="#001721" label="[00:17:21]">&lt;oriansj&gt;</a></span><span class="message">(vim/emacs too, can't believe I forgot to mention those &gt;.&lt;)</span></div><div class="line" id="001739"><span class="nick" style="color:#8dd3c7"><a href="#001739" label="[00:17:39]">&lt;stikonas&gt;</a></span><span class="message">so I basically masked -bin packages on my install (/etc/portage/package.mask/binary has */*-bin)</span></div><div class="line" id="001802"><span class="nick" style="color:#8dd3c7"><a href="#001802" label="[00:18:02]">&lt;stikonas&gt;</a></span><span class="message">oh emacs depending on USE flags can easily pull in rust</span></div><div class="line" id="001827"><span class="nick" style="color:#8dd3c7"><a href="#001827" label="[00:18:27]">&lt;stikonas&gt;</a></span><span class="message">if you build gtk gui, I imagine it would bring librsvg</span></div><div class="line" id="001958"><span class="nick" style="color:#389600"><a href="#001958" label="[00:19:58]">&lt;oriansj&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="002300"><span class="nick" style="color:#8dd3c7"><a href="#002300" label="[00:23:00]">&lt;stikonas&gt;</a></span><span class="message">emacs with USE=&quot;svg&quot; even has direct dependency on librsvg and hence rust</span></div><div class="line" id="002956"><span class="nick" style="color:#389600"><a href="#002956" label="[00:29:56]">&lt;oriansj&gt;</a></span><span class="message">so emacs gtk install after we setup the overlay and emacs no-x prior</span></div><div class="line" id="003039"><span class="nick" style="color:#389600"><a href="#003039" label="[00:30:39]">&lt;oriansj&gt;</a></span><span class="message">so it would effectively cover setting up USE flags and updating USE flags</span></div><div class="line" id="003427"><span class="nick" style="color:#8dd3c7"><a href="#003427" label="[00:34:27]">&lt;stikonas&gt;</a></span><span class="message">yes, but updating USE flags is not tricky, even automatically</span></div><div class="line" id="003610"><span class="nick" style="color:#8dd3c7"><a href="#003610" label="[00:36:10]">&lt;stikonas&gt;</a></span><span class="message">there are different ways 1. temporary one-off override via env varaible (USE=&quot;-something&quot; or USE=&quot;something). 2. per package setting in package.use. 3. global make.conf (which might be tricker to edit automatically but I think euse from app-portage/gentoolkit can do it</span></div><div class="line" id="003936"><span class="nick" style="color:#389600"><a href="#003936" label="[00:39:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: figuring out which USE flags to use and what they mean however seems like something that requires understanding of how to find that information</span></div><div class="line" id="004032"><span class="nick" style="color:#8dd3c7"><a href="#004032" label="[00:40:32]">&lt;stikonas&gt;</a></span><span class="message">yes, there are lots of them and I'm afraid there is not easy way but reading description of all of them. And even then it might not be clear</span></div><div class="line" id="004124"><span class="nick" style="color:#8dd3c7"><a href="#004124" label="[00:41:24]">&lt;stikonas&gt;</a></span><span class="message">if I do manual install, I install ufed (curses interface for setting global USE flags, and it shows list of all USE flags and their descriptions</span></div><div class="line" id="004211"><span class="nick" style="color:#8dd3c7"><a href="#004211" label="[00:42:11]">&lt;stikonas&gt;</a></span><span class="message">(euse --info seems to show similar info but without ncurses interface, it just prints all descriptions)</span></div><div class="line" id="004420"><span class="nick" style="color:#389600"><a href="#004420" label="[00:44:20]">&lt;oriansj&gt;</a></span><span class="message">well euse isn't in the stage3 install, so probably need to write up a step for installing it and a bit about how to use it</span></div><div class="line" id="004510"><span class="nick" style="color:#389600"><a href="#004510" label="[00:45:10]">&lt;oriansj&gt;</a></span><span class="message">(possibly ufed too)</span></div><div class="line" id="004515"><span class="nick" style="color:#6b8072"><a href="#004515" label="[00:45:15]">&lt;sam_&gt;</a></span><span class="message">you can definitely avoid Rust, it just may take a bit of work</span></div><div class="line" id="004613"><span class="nick" style="color:#8dd3c7"><a href="#004613" label="[00:46:13]">&lt;stikonas&gt;</a></span><span class="message">for now...</span></div><div class="line" id="004617"><span class="nick" style="color:#389600"><a href="#004617" label="[00:46:17]">&lt;oriansj&gt;</a></span><span class="message">sam_: oh, I am not completely avoiding rust. Just until after the core setup is done and everything else can be done as a user with sudo</span></div><div class="line" id="004623"><span class="nick" style="color:#389600"><a href="#004623" label="[00:46:23]">&lt;oriansj&gt;</a></span><span class="message">(or doas)</span></div><div class="line" id="004645"><span class="nick" style="color:#6b8072"><a href="#004645" label="[00:46:45]">&lt;sam_&gt;</a></span><span class="message">ah okay</span></div><div class="line" id="004645"><span class="nick" style="color:#8dd3c7"><a href="#004645" label="[00:46:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, rust stuff if best left for post-install...</span></div><div class="line" id="004703"><span class="nick" style="color:#8dd3c7"><a href="#004703" label="[00:47:03]">&lt;stikonas&gt;</a></span><span class="message">if you just want to document core install, then leave it out</span></div><div class="line" id="004727"><span class="nick" style="color:#389600"><a href="#004727" label="[00:47:27]">&lt;oriansj&gt;</a></span><span class="message">heck, the gui bit is going to be done as a user if possible</span></div><div class="line" id="004849"><span class="nick" style="color:#389600"><a href="#004849" label="[00:48:49]">&lt;oriansj&gt;</a></span><span class="message">only kernel, grub, cryptsetup and sudo (and the new admin user setup) really need to be done as root (the nano replacement bit is optional)</span></div><div class="line" id="005038"><span class="nick" style="color:#389600"><a href="#005038" label="[00:50:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well I am going to do a full install procedure to feature parity with debian/arch/guix</span></div><div class="line" id="012117"><span class="nick" style="color:#389600"><a href="#012117" label="[01:21:17]">&lt;oriansj&gt;</a></span><span class="message">so selecting the overlay is going to be a step with notes explaining what it does and the consequences of if they don't do it. Prior to doing any user builds</span></div><div class="line" id="021420"><span class="nick" style="color:#389600"><a href="#021420" label="[02:14:20]">&lt;oriansj&gt;</a></span><span class="message">sam_: your little function made grub buildable in 1GB ^_^</span></div><div class="line" id="021731"><span class="nick" style="color:#6b8072"><a href="#021731" label="[02:17:31]">&lt;sam_&gt;</a></span><span class="message">yay!</span></div><div class="line" id="021754"><span class="nick" style="color:#6b8072"><a href="#021754" label="[02:17:54]">&lt;sam_&gt;</a></span><span class="message">there are some little hacks you can do to make things use more I/O but less RAM too</span></div><div class="line" id="021818"><span class="nick" style="color:#6b8072"><a href="#021818" label="[02:18:18]">&lt;sam_&gt;</a></span><span class="message">drop -pipe from *FLAGS, and use -Wl,--no-keep-memory in *FLAGS</span></div><div class="line" id="021849"><span class="nick" style="color:#389600"><a href="#021849" label="[02:18:49]">&lt;oriansj&gt;</a></span><span class="message">good to keep in my back pocket if I end up having to hit that situation</span></div><div class="line" id="023702"><span class="nick" style="color:#389600"><a href="#023702" label="[02:37:02]">&lt;oriansj&gt;</a></span><span class="message">well I just mistook euses for euse from  app-portage/gentoolkit</span></div><div class="line" id="024231"><span class="nick" style="color:#389600"><a href="#024231" label="[02:42:31]">&lt;oriansj&gt;</a></span><span class="message"> although app-portage/euses seems easier to use for looking up USE definitions</span></div><div class="line" id="024946"><span class="nick" style="color:#389600"><a href="#024946" label="[02:49:46]">&lt;oriansj&gt;</a></span><span class="message">hmmm emerge is still not liking my cryptsetup USE flags</span></div><div class="line" id="030137"><span class="nick" style="color:#389600"><a href="#030137" label="[03:01:37]">&lt;oriansj&gt;</a></span><span class="message">it says exactly-one-of <a rel="nofollow" href="https://wiki.gentoo.org/wiki/User:Sam/Portage_help/Understanding_REQUIRED_USE">https://wiki.gentoo.org/wiki/User:Sam/Portage_help/Understanding_REQUIRED_USE</a>  and I selected exactly one of the options in the (gcrypt kernel nettle openssl) static? (!gcrypt !udev)</span></div><div class="line" id="030201"><span class="nick" style="color:#389600"><a href="#030201" label="[03:02:01]">&lt;oriansj&gt;</a></span><span class="message">it is just gcrypt static !udev</span></div><div class="line" id="030333"><span class="nick" style="color:#389600"><a href="#030333" label="[03:03:33]">&lt;oriansj&gt;</a></span><span class="message">(full file contents are sys-fs/cryptsetup gcrypt static !udev )</span></div><div class="line" id="030619"><span class="nick" style="color:#6b8072"><a href="#030619" label="[03:06:19]">&lt;sam_&gt;</a></span><span class="message">show me the output in full?</span></div><div class="line" id="032040"><span class="nick" style="color:#389600"><a href="#032040" label="[03:20:40]">&lt;oriansj&gt;</a></span><span class="message">it is in a qemu vm so I don't have copy paste, so lets see if I can use curl to post it somewhere</span></div><div class="line" id="033841"><span class="nick" style="color:#389600"><a href="#033841" label="[03:38:41]">&lt;oriansj&gt;</a></span><span class="message">ooh app-text/pastebinit might be helpful here</span></div><div class="line" id="034415"><span class="nick" style="color:#389600"><a href="#034415" label="[03:44:15]">&lt;oriansj&gt;</a></span><span class="message">YES</span></div><div class="line" id="034416"><span class="nick" style="color:#389600"><a href="#034416" label="[03:44:16]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1252680">https://paste.debian.net/1252680</a> </span></div><div class="line" id="034538"><span class="nick" style="color:#389600"><a href="#034538" label="[03:45:38]">&lt;oriansj&gt;</a></span><span class="message">sam_:  that is the output from emerge -av sys-fs/cryptsetup &amp;&gt; foo</span></div><div class="line" id="034555"><span class="nick" style="color:#6b8072"><a href="#034555" label="[03:45:55]">&lt;sam_&gt;</a></span><span class="message">wgetpaste is another nice one</span></div><div class="line" id="034621"><span class="nick" style="color:#6b8072"><a href="#034621" label="[03:46:21]">&lt;sam_&gt;</a></span><span class="message">you have both gcrypt and openssl on</span></div><div class="line" id="034637"><span class="nick" style="color:#6b8072"><a href="#034637" label="[03:46:37]">&lt;sam_&gt;</a></span><span class="message">also, static requires -gcrypt</span></div><div class="line" id="035424"><span class="nick" style="color:#389600"><a href="#035424" label="[03:54:24]">&lt;oriansj&gt;</a></span><span class="message">ok mine now is: sys-fs/cryptsetup gcrypt static -gcrypt !udev !openssl</span></div><div class="line" id="035544"><span class="nick" style="color:#389600"><a href="#035544" label="[03:55:44]">&lt;oriansj&gt;</a></span><span class="message">which is resulting in: <a rel="nofollow" href="https://paste.debian.net/1252682">https://paste.debian.net/1252682</a> </span></div><div class="line" id="035613"><span class="nick" style="color:#389600"><a href="#035613" label="[03:56:13]">&lt;oriansj&gt;</a></span><span class="message">but I have static and !udev so that doesn't make sense to me</span></div><div class="line" id="035759"><span class="nick" style="color:#389600"><a href="#035759" label="[03:57:59]">&lt;oriansj&gt;</a></span><span class="message">or am I supposed to do something like sys-fs/cryptsetup static gcrypt -gcrypt ?</span></div><div class="line" id="040739"><span class="nick" style="color:#389600"><a href="#040739" label="[04:07:39]">&lt;oriansj&gt;</a></span><span class="message">and I wrote a package.use file but somehow a different use is being picked up</span></div><div class="line" id="040858"><span class="nick" style="color:#389600"><a href="#040858" label="[04:08:58]">&lt;oriansj&gt;</a></span><span class="message">ok, so I deleted my /etc/portage/package.use/cryptsetup file and that seems to have resolved the issue</span></div><div class="line" id="041022"><span class="nick" style="color:#389600"><a href="#041022" label="[04:10:22]">&lt;oriansj&gt;</a></span><span class="message">I though was supposed to override the default package USE definition</span></div><div class="line" id="041117"><span class="nick" style="color:#389600"><a href="#041117" label="[04:11:17]">&lt;oriansj&gt;</a></span><span class="message">so does the /etc/portage/package.use/* just concat with the default package definitions?</span></div><div class="line" id="041408"><span class="nick" style="color:#389600"><a href="#041408" label="[04:14:08]">&lt;oriansj&gt;</a></span><span class="message">because I honestly thought the /etc/portage/package.use/* USE statements would have been used and it made me feel very dumb for not being able to figure out why the emerge was failing</span></div><div class="line" id="042227"><span class="nick" style="color:#389600"><a href="#042227" label="[04:22:27]">&lt;oriansj&gt;</a></span><span class="message">but progress is being made forward and something new has been learned</span></div><div class="line" id="043328"><span class="nick" style="color:#6b8072"><a href="#043328" label="[04:33:28]">&lt;sam_&gt;</a></span><span class="message">it is additive</span></div><div class="line" id="043439"><span class="nick" style="color:#389600"><a href="#043439" label="[04:34:39]">&lt;oriansj&gt;</a></span><span class="message">and is there a way to lookup the default USE definitions for a package prior to an emerge failing?</span></div><div class="line" id="043656"><span class="nick" style="color:#6b8072"><a href="#043656" label="[04:36:56]">&lt;sam_&gt;</a></span><span class="message">equery u, emerge -pvO, I think there's some others</span></div><div class="line" id="043831"><span class="nick" style="color:#389600"><a href="#043831" label="[04:38:31]">&lt;oriansj&gt;</a></span><span class="message">thank you</span></div><div class="line" id="050058"><span class="nick" style="color:#389600"><a href="#050058" label="[05:00:58]">&lt;oriansj&gt;</a></span><span class="message">well I got grub to prompt for password and boot linux. now to figure out how to get systemd to prompt the user for the password to unlock /</span></div><div class="line" id="050350"><span class="nick" style="color:#389600"><a href="#050350" label="[05:03:50]">&lt;oriansj&gt;</a></span><span class="message">well it runs to the end: <a rel="nofollow" href="https://paste.debian.net/1252690/">https://paste.debian.net/1252690/</a>  but I need to figure out how to get that prompt otherwise bleh</span></div><div class="line" id="051204"><span class="nick" style="color:#80b1d3"><a href="#051204" label="[05:12:04]">&lt;aggi&gt;</a></span><span class="message">don't forget, cryptsetup/luks my kick a small system into OOM condition</span></div><div class="line" id="051215"><span class="nick" style="color:#80b1d3"><a href="#051215" label="[05:12:15]">&lt;aggi&gt;</a></span><span class="message">luksFormat --pbkdf-memory</span></div><div class="line" id="051225"><span class="nick" style="color:#80b1d3"><a href="#051225" label="[05:12:25]">&lt;aggi&gt;</a></span><span class="message">not sure if there was other options to consider</span></div><div class="line" id="051427"><span class="nick" style="color:#80b1d3"><a href="#051427" label="[05:14:27]">&lt;aggi&gt;</a></span><span class="message">i had encountered problems with default cryptsetup options 1GiB RAM available...</span></div><div class="line" id="051622"><span class="nick" style="color:#80b1d3"><a href="#051622" label="[05:16:22]">&lt;aggi&gt;</a></span><span class="message">and i could say some more about this type of &quot;security&quot;, off-topic in here</span></div><div class="line" id="052012"><span class="nick" style="color:#389600"><a href="#052012" label="[05:20:12]">&lt;oriansj&gt;</a></span><span class="message">aggi: I maanaged to build that with 1GB of ram by reducing to only 1 build job</span></div><div class="line" id="052034"><span class="nick" style="color:#389600"><a href="#052034" label="[05:20:34]">&lt;oriansj&gt;</a></span><span class="message">(no swap)</span></div><div class="line" id="054642"><span class="nick" style="color:#389600"><a href="#054642" label="[05:46:42]">&lt;oriansj&gt;</a></span><span class="message">I think I need sleep to figure this out</span></div><div class="line" id="055033"><span class="nick" style="color:#80b1d3"><a href="#055033" label="[05:50:33]">&lt;aggi&gt;</a></span><span class="message">oriansj: i was referring to something else, cryptsetup requires alot of RAM while unlocking the volume key</span></div><div class="line" id="055103"><span class="nick" style="color:#80b1d3"><a href="#055103" label="[05:51:03]">&lt;aggi&gt;</a></span><span class="message">on low-RAM systems it may be impossible to unlock the volume</span></div><div class="line" id="070113"><span class="nick">***</span><span class="message notice">silver.libera.chat sets mode: +o ChanServ</span></div><div class="line" id="070320"><span class="nick">***</span><span class="message notice">silver.libera.chat sets mode: +ooo ChanServ oriansj janneke</span></div><div class="line" id="071032"><span class="nick">***</span><span class="message notice">silver.libera.chat sets mode: +o oriansj</span></div><div class="line" id="071405"><span class="nick">***</span><span class="message notice">silver.libera.chat sets mode: +o janneke</span></div><div class="line" id="071518"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="071826"><span class="nick">***</span><span class="message notice">genr8eofl_ is now known as genr8eofl</span></div><div class="line" id="111719"><span class="nick" style="color:#6d2462"><a href="#111719" label="[11:17:19]">&lt;stikonas[m]&gt;</a></span><span class="message">High RAM usage is a deliberate feature of some hash functions, makes it harder to bruteforce in parallel</span></div><div class="line" id="111918"><span class="nick" style="color:#6d2462"><a href="#111918" label="[11:19:18]">&lt;stikonas[m]&gt;</a></span><span class="message">Argon2 is one of them</span></div><div class="line" id="113023"><span class="nick" style="color:#80b1d3"><a href="#113023" label="[11:30:23]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: and it is, a useless feature</span></div><div class="line" id="113034"><span class="nick" style="color:#80b1d3"><a href="#113034" label="[11:30:34]">&lt;aggi&gt;</a></span><span class="message">because brute-force resistance can be achieved at minimal costs</span></div><div class="line" id="114143"><span class="nick" style="color:#80b1d3"><a href="#114143" label="[11:41:43]">&lt;aggi&gt;</a></span><span class="message">with passwords involved, thats a sufficiently strong password + seed, and any fast 256bit hash</span></div><div class="line" id="114243"><span class="nick" style="color:#80b1d3"><a href="#114243" label="[11:42:43]">&lt;aggi&gt;</a></span><span class="message">i am still convinced, a non-primitive LFSR-matrix is the most efficient and resistent with both hashing, and any ECB-cipher mode to prevent known-plaintext key recovery</span></div><div class="line" id="114411"><span class="nick" style="color:#80b1d3"><a href="#114411" label="[11:44:11]">&lt;aggi&gt;</a></span><span class="message">however, i prefer big block-sizes with ECB-ciphers, such as 512byte (4096bit); another reason why i reject dm-crypt/cryptsetup</span></div><div class="line" id="115015"><span class="nick" style="color:#80b1d3"><a href="#115015" label="[11:50:15]">&lt;aggi&gt;</a></span><span class="message">with AES, cipher block size is 128bit, uhum...; thats why i don't care about various block-modes, because with the ECB implementation variant of mine a non-primitive recurse LFSR-matrix prevents all known-plaintext key recovery</span></div><div class="line" id="115059"><span class="nick" style="color:#80b1d3"><a href="#115059" label="[11:50:59]">&lt;aggi&gt;</a></span><span class="message">i don't at least bother with any elaborate password-hashing, because the pw-input is blown up to a _single_ 4096bit ECB block-key</span></div><div class="line" id="115237"><span class="nick" style="color:#80b1d3"><a href="#115237" label="[11:52:37]">&lt;aggi&gt;</a></span><span class="message">i don't know precisely, my cipher design fits into 8KiB RAM or something at that scale...</span></div><div class="line" id="115742"><span class="nick" style="color:#80b1d3"><a href="#115742" label="[11:57:42]">&lt;aggi&gt;</a></span><span class="message">minor mistake, the ECB block key alters itself depending on what's encrypted with it</span></div><div class="line" id="115843"><span class="nick" style="color:#80b1d3"><a href="#115843" label="[11:58:43]">&lt;aggi&gt;</a></span><span class="message">anyway, tcc-toolchain with bounds-checker enabled failed with various configure scripts; i'll keep it disabled for now</span></div><div class="line" id="133012"><span class="nick" style="color:#234e69"><a href="#133012" label="[13:30:12]">&lt;mihi&gt;</a></span><span class="message">aggi, memory-hard key derivation functions are a question of convenience: would you rather make your passphrase 4 characters longer, or have your key derivation function take a gigabyte of RAM? Assuming that your passphrase (even with that four additional letters) still contains less entropy than the derived key has bits, your bruteforce resistance is about equal. (And people easily overestimate</span></div><div class="line" id="133017"><span class="nick" style="color:#234e69"><a href="#133017" label="[13:30:17]">&lt;mihi&gt;</a></span><span class="message">the entropy of their own chosen passphrases).</span></div><div class="line" id="133029"><span class="nick" style="color:#234e69"><a href="#133029" label="[13:30:29]">&lt;mihi&gt;</a></span><span class="message">But for all KDF I know, memory can be configured, so if you don't like your memory being used, you can avoid it and choose a longer passphrase instead.</span></div><div class="line" id="141419"><span class="nick" style="color:#389600"><a href="#141419" label="[14:14:19]">&lt;oriansj&gt;</a></span><span class="message">all engineering is tradeoffs. There is never just one answer to all questions save of course for 42</span></div><div class="line" id="164223"><span class="nick" style="color:#6c3d55"><a href="#164223" label="[16:42:23]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: I'm working on adding a modern binutils to live-bootstrap. I managed to build 2.38 (2.39 will probably work as well) right after GCC 4.7.4. I have one question though: are there any binaries/libraries/headers we want to intentionally avoid when building it?</span></div><div class="line" id="164424"><span class="nick" style="color:#6c3d55"><a href="#164424" label="[16:44:24]">&lt;doras&gt;</a></span><span class="message">I wasn't registered on IRC so my message may not have been visible to IRC users. I'll send it again.</span></div><div class="line" id="164458"><span class="nick" style="color:#6c3d55"><a href="#164458" label="[16:44:58]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: I'm working on adding a modern binutils to live-bootstrap. I managed to build 2.38 (2.39 will probably work as well) right after GCC 4.7.4. I have one question though: are there any binaries/libraries/headers we want to intentionally avoid when building it?</span></div><div class="line" id="164540"><span class="nick" style="color:#6c3d55"><a href="#164540" label="[16:45:40]">&lt;doras&gt;</a></span><span class="message">I mean, do we want to exclude anything in particular from the final package, or should I just take e.g. Fedora as reference for which files to include in the package?</span></div><div class="line" id="171242"><span class="nick" style="color:#d9d9d9"><a href="#171242" label="[17:12:42]">&lt;Hagfish&gt;</a></span><span class="message">(wow, it's really cool that live-bootstrap is at a stage where adding modern stuff to it isn't too much work)</span></div><div class="line" id="171337"><span class="nick" style="color:#d9d9d9"><a href="#171337" label="[17:13:37]">&lt;Hagfish&gt;</a></span><span class="message">(using something like Fedora as a reference seems to make sense, but you're right to ask the question.  thanks for your work on this)</span></div><div class="line" id="175131"><span class="nick" style="color:#389600"><a href="#175131" label="[17:51:31]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well yes, the idea is: do the really hard work first and use better and better languages and tools as they become available.</span></div><div class="line" id="175424"><span class="nick" style="color:#389600"><a href="#175424" label="[17:54:24]">&lt;oriansj&gt;</a></span><span class="message">the less hard work is where bikesheds tend to show up and I am cool with any and all shed colors one chooses as long as someone else does the painting.</span></div><div class="line" id="180243"><span class="nick" style="color:#389600"><a href="#180243" label="[18:02:43]">&lt;oriansj&gt;</a></span><span class="message">Much like the question of what is the best C library or the best window manager or best package manager or the best kernel to use. I am happy to use any and all provided I am able to continue to make progress forward.</span></div><div class="line" id="180411"><span class="nick" style="color:#389600"><a href="#180411" label="[18:04:11]">&lt;oriansj&gt;</a></span><span class="message">heck, after gentoo I'll probably write a procedure for a *BSD (or two)</span></div><div class="line" id="180947"><span class="nick" style="color:#d9d9d9"><a href="#180947" label="[18:09:47]">&lt;Hagfish&gt;</a></span><span class="message">&quot;as long as someone else does the painting&quot; i love that.  freedom (with the correct incentive structure) really is the solution to a lot of problems</span></div><div class="line" id="202916"><span class="nick" style="color:#6c3d55"><a href="#202916" label="[20:29:16]">&lt;doras&gt;</a></span><span class="message">I ended up taking a bit of Fedora and a bit of Arch. It should hopefully cover everything we'll need.</span></div><div class="line" id="211556"><span class="nick" style="color:#bc80bd"><a href="#211556" label="[21:15:56]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: What if some monster wants to paint the shed an obnoxious shade of vomit green? :)</span></div><div class="line" id="211739"><span class="nick" style="color:#6d2462"><a href="#211739" label="[21:17:39]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: we want to avoid top level configure</span></div><div class="line" id="211814"><span class="nick" style="color:#6c3d55"><a href="#211814" label="[21:18:14]">&lt;doras&gt;</a></span><span class="message">stikonas: I did avoid it.</span></div><div class="line" id="213036"><span class="nick" style="color:#6c3d55"><a href="#213036" label="[21:30:36]">&lt;doras&gt;</a></span><span class="message">I'm recalculating the hashes to see they remain reproducible.</span></div><div class="line" id="213047"><span class="nick" style="color:#6c3d55"><a href="#213047" label="[21:30:47]">&lt;doras&gt;</a></span><span class="message">Then I'll upload a PR.</span></div><div class="line" id="223856"><span class="nick" style="color:#6d2462"><a href="#223856" label="[22:38:56]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: thanks</span></div><div class="line" id="224718"><span class="nick" style="color:#6d2462"><a href="#224718" label="[22:47:18]">&lt;stikonas[m]&gt;</a></span><span class="message">Though you might need to wait till another weekend for my review</span></div><div class="line" id="230003"><span class="nick" style="color:#389600"><a href="#230003" label="[23:00:03]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: then the monster can enjoy their shed and we can use it (or not based on personal choice) until someone takes the effort to make a better shed.</span></div><div class="line" id="230402"><span class="nick" style="color:#389600"><a href="#230402" label="[23:04:02]">&lt;oriansj&gt;</a></span><span class="message">for example if someone decided to bootstrap GCC in brainfuck; then neat we have another bootstrap path for GCC (not that I could trust it but it would exist)</span></div><div class="line" id="230542"><span class="nick" style="color:#389600"><a href="#230542" label="[23:05:42]">&lt;oriansj&gt;</a></span><span class="message">If someone bootstrapped Hanna Montana Linux, take the wins they gave us and continue to move forward.</span></div><div class="line" id="230949"><span class="nick" style="color:#6b8072"><a href="#230949" label="[23:09:49]">&lt;sam_&gt;</a></span><span class="message">:)</span></div><div class="line" id="231939"><span class="nick" style="color:#389600"><a href="#231939" label="[23:19:39]">&lt;oriansj&gt;</a></span><span class="message">Who does decides, so if you don't like the direction the monster is heading; pick up your text editor or IDE and start pushing in the direction you want to see progress. Learn from the monster's good ideas and avoid the bad ideas. It cuts both ways, you can use anything you want; which means other people can choose not to use your work in their work if they so desire. But by sharing what we learn, we can bridge the gaps and all become</span></div><div class="line" id="231939"><span class="nick" style="color:#389600"><a href="#231939" label="[23:19:39]">&lt;oriansj&gt;</a></span><span class="message">better as we go along our bootstrapping adventure.</span></div><div class="line" id="233128"><span class="nick" style="color:#389600"><a href="#233128" label="[23:31:28]">&lt;oriansj&gt;</a></span><span class="message">for example I made a FORTH interpreter, thus far it hasn't been used for anything. (same could be said for many things I have made)</span></div><div class="line" id="235121"><span class="nick" style="color:#389600"><a href="#235121" label="[23:51:21]">&lt;oriansj&gt;</a></span><span class="message">although in interesting news, i guess I need to tweak that function as it recognizes The Linux kernel being built as c++</span></div><div class="line" id="235228"><span class="nick" style="color:#6b8072"><a href="#235228" label="[23:52:28]">&lt;sam_&gt;</a></span><span class="message">wonder if we should add .C too to catch e.g. gcc</span></div><div class="line" id="235250"><span class="nick" style="color:#6b8072"><a href="#235250" label="[23:52:50]">&lt;sam_&gt;</a></span><span class="message">oriansj: if desired, you could do something like [[ ${CATEGORY}/${PN} != sys-kernel/gentoo-kernel ]] &amp;&amp; return</span></div><div class="line" id="235412"><span class="nick" style="color:#389600"><a href="#235412" label="[23:54:12]">&lt;oriansj&gt;</a></span><span class="message">sam_: maybe setting if we did a count on the number of cpp files and set a threshold</span></div><div class="line" id="235508"><span class="nick" style="color:#389600"><a href="#235508" label="[23:55:08]">&lt;oriansj&gt;</a></span><span class="message">say having 20 cpp files is the point at which we label something a c++ program sort of thing</span></div><div class="line" id="235525"><span class="nick" style="color:#6b8072"><a href="#235525" label="[23:55:25]">&lt;sam_&gt;</a></span><span class="message">yeah, should be easy to change the if (( to do that actually</span></div><div class="line" id="235540"><span class="nick" style="color:#6b8072"><a href="#235540" label="[23:55:40]">&lt;sam_&gt;</a></span><span class="message">(you can use Bash in full in bashrc, and also ebuilds, fwiw)</span></div><div class="line" id="235738"><span class="nick" style="color:#389600"><a href="#235738" label="[23:57:38]">&lt;oriansj&gt;</a></span><span class="message">I am thinking of adding echo &quot;${CATEGORY}/${PN}: ${count}&quot; &gt;&gt; ~/matches so that we could after the fact have data to look at to make decisions on</span></div><br /></div></body></html>