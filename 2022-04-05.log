<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004850"><span class="nick" style="color:#8dd3c7"><a href="#004850" label="[00:48:50]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas: thanks for the SVG, but how did you get guix graph to recognize all the stage0 stuff when those are not in guix?</span></div><div class="line" id="004915"><span class="nick" style="color:#2e2a4a"><a href="#004915" label="[00:49:15]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: that graph has nothing to do with guix</span></div><div class="line" id="004937"><span class="nick" style="color:#2e2a4a"><a href="#004937" label="[00:49:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a> </span></div><div class="line" id="005021"><span class="nick" style="color:#2e2a4a"><a href="#005021" label="[00:50:21]">&lt;stikonas&gt;</a></span><span class="message">it's manually created</span></div><div class="line" id="005042"><span class="nick" style="color:#2e2a4a"><a href="#005042" label="[00:50:42]">&lt;stikonas&gt;</a></span><span class="message">and hence the further we get to in live-bootstrap, the less accurate dependencies are</span></div><div class="line" id="005113"><span class="nick" style="color:#2e2a4a"><a href="#005113" label="[00:51:13]">&lt;stikonas&gt;</a></span><span class="message">(too many arrows and we don't really know all of them anyway)</span></div><div class="line" id="005146"><span class="nick" style="color:#8dd3c7"><a href="#005146" label="[00:51:46]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: what is ς-calculus never heard of that</span></div><div class="line" id="005200"><span class="nick" style="color:#6b8072"><a href="#005200" label="[00:52:00]">&lt;muurkha&gt;</a></span><span class="message">Abadi and Cardelli's object calculus</span></div><div class="line" id="005227"><span class="nick" style="color:#6b8072"><a href="#005227" label="[00:52:27]">&lt;muurkha&gt;</a></span><span class="message">it's very nearly as simple as the λ-calculus but has a couple of advantages</span></div><div class="line" id="005318"><span class="nick" style="color:#6b8072"><a href="#005318" label="[00:53:18]">&lt;muurkha&gt;</a></span><span class="message">one is that it works much better than the various typed λ calculi for static typing of object-oriented languages, which is what Abadi and Cardelli designed it for, but which I care very little about</span></div><div class="line" id="005335"><span class="nick" style="color:#6b8072"><a href="#005335" label="[00:53:35]">&lt;muurkha&gt;</a></span><span class="message">the other is that it's enormously easier to read and write programs in, which I do care about</span></div><div class="line" id="021022"><span class="nick">***</span><span class="message notice">genr8eofl_ is now known as genr8eofl</span></div><div class="line" id="040101"><span class="nick" style="color:#8dd3c7"><a href="#040101" label="[04:01:01]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: You said risc-v ASM can only handle 31 bit numbers, this is also true on RISCV64-bit?</span></div><div class="line" id="040339"><span class="nick" style="color:#8dd3c7"><a href="#040339" label="[04:03:39]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: Why do you say we do not know all the arrows in dep graph?</span></div><div class="line" id="040358"><span class="nick" style="color:#80b1d3"><a href="#040358" label="[04:03:58]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: the answer to the question &quot;what is M2-Moon&quot; is a scheme compiler written in Assembly</span></div><div class="line" id="040455"><span class="nick" style="color:#8dd3c7"><a href="#040455" label="[04:04:55]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: Abadi, Martin; Cardelli, Luca (9 August 1996). A Theory of Objects</span></div><div class="line" id="040500"><span class="nick" style="color:#80b1d3"><a href="#040500" label="[04:05:00]">&lt;oriansj&gt;</a></span><span class="message">it was dropped when janneke and I started working together to get Mes.c buildable by M2-Planet</span></div><div class="line" id="040554"><span class="nick" style="color:#80b1d3"><a href="#040554" label="[04:05:54]">&lt;oriansj&gt;</a></span><span class="message">ultimately it would have been 10x bigger than cc_* and would have been a nightmare to debug.</span></div><div class="line" id="040749"><span class="nick" style="color:#8dd3c7"><a href="#040749" label="[04:07:49]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: <a rel="nofollow" href="http://library.lol/main/2A40A401B831E4416029EA8535AA0E9A">http://library.lol/main/2A40A401B831E4416029EA8535AA0E9A</a> </span></div><div class="line" id="040751"><span class="nick" style="color:#80b1d3"><a href="#040751" label="[04:07:51]">&lt;oriansj&gt;</a></span><span class="message">turns out the assumed core of lisp actually is much more than originally presented.</span></div><div class="line" id="041027"><span class="nick" style="color:#8dd3c7"><a href="#041027" label="[04:10:27]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: So going directly from ASM to LISP is not good, it is easier to go to C first then LISP?</span></div><div class="line" id="041414"><span class="nick" style="color:#80b1d3"><a href="#041414" label="[04:14:14]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well to put it in simple terms. a toy lisp in assembly like you can find in stage0 that weights in only 10,320bytes took about a month to write. cc_x86 weighing in at 16,386bytes was done in less than 24 hours</span></div><div class="line" id="041521"><span class="nick" style="color:#8dd3c7"><a href="#041521" label="[04:15:21]">&lt;littlebobeep&gt;</a></span><span class="message">Hmm I don't understand why cc_x86 takes so much less time given it is more LOC</span></div><div class="line" id="041642"><span class="nick" style="color:#80b1d3"><a href="#041642" label="[04:16:42]">&lt;oriansj&gt;</a></span><span class="message">1) the only tricky part in cc_x86 is the reader functions and we can write a trivial debug function allowing one to get it sorted in an hour</span></div><div class="line" id="041712"><span class="nick" style="color:#80b1d3"><a href="#041712" label="[04:17:12]">&lt;oriansj&gt;</a></span><span class="message">2) Compilers have less runtime failure modes than interpreters</span></div><div class="line" id="041752"><span class="nick" style="color:#80b1d3"><a href="#041752" label="[04:17:52]">&lt;oriansj&gt;</a></span><span class="message">3) debugging garbage collection in assembly</span></div><div class="line" id="041821"><span class="nick" style="color:#80b1d3"><a href="#041821" label="[04:18:21]">&lt;oriansj&gt;</a></span><span class="message">4) seriously 3 just eats time</span></div><div class="line" id="041936"><span class="nick" style="color:#80b1d3"><a href="#041936" label="[04:19:36]">&lt;oriansj&gt;</a></span><span class="message">5) 90% of cc_* is just calling match and in_set and branching to the next bit while just building a list of strings</span></div><div class="line" id="042007"><span class="nick" style="color:#8dd3c7"><a href="#042007" label="[04:20:07]">&lt;littlebobeep&gt;</a></span><span class="message">okay interesting I have not studied cc_x86 source yet</span></div><div class="line" id="042142"><span class="nick" style="color:#80b1d3"><a href="#042142" label="[04:21:42]">&lt;oriansj&gt;</a></span><span class="message">it is rather simple: take a file and generate a list of tokens. Then walk that list in a state machine and appending to a string list until you read the end of the tokens. Then just the list to the output file and you are done</span></div><div class="line" id="042217"><span class="nick" style="color:#80b1d3"><a href="#042217" label="[04:22:17]">&lt;oriansj&gt;</a></span><span class="message">for those not familiar with assembly, there is a C code version which is rather simple to parse</span></div><div class="line" id="042256"><span class="nick" style="color:#8dd3c7"><a href="#042256" label="[04:22:56]">&lt;littlebobeep&gt;</a></span><span class="message">okay but the C version is not used for bootstrapping, right?</span></div><div class="line" id="042313"><span class="nick" style="color:#80b1d3"><a href="#042313" label="[04:23:13]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: it isn't needed</span></div><div class="line" id="042333"><span class="nick" style="color:#80b1d3"><a href="#042333" label="[04:23:33]">&lt;oriansj&gt;</a></span><span class="message">it is just there for educational purposes</span></div><div class="line" id="042356"><span class="nick" style="color:#80b1d3"><a href="#042356" label="[04:23:56]">&lt;oriansj&gt;</a></span><span class="message">and not used, except by developers needing more insight in to how cc_* works</span></div><div class="line" id="042546"><span class="nick" style="color:#8dd3c7"><a href="#042546" label="[04:25:46]">&lt;littlebobeep&gt;</a></span><span class="message">okay great thank you... then I still feel the need to look at the ASM code if I depend on that to bootstrap I guess</span></div><div class="line" id="042642"><span class="nick" style="color:#8dd3c7"><a href="#042642" label="[04:26:42]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: How did you create this .dot file: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a> </span></div><div class="line" id="042714"><span class="nick" style="color:#8dd3c7"><a href="#042714" label="[04:27:14]">&lt;littlebobeep&gt;</a></span><span class="message">I am familiar with guix graph which calls graphviz but I don't know how to make such an image without that command</span></div><div class="line" id="042736"><span class="nick" style="color:#80b1d3"><a href="#042736" label="[04:27:36]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: I wrote it by hand</span></div><div class="line" id="042933"><span class="nick" style="color:#80b1d3"><a href="#042933" label="[04:29:33]">&lt;oriansj&gt;</a></span><span class="message">the build to pdf process is just: cat Current\ bootstrap\ map.dot | dot -Tpdf &gt; foo.pdf</span></div><div class="line" id="042940"><span class="nick" style="color:#8dd3c7"><a href="#042940" label="[04:29:40]">&lt;littlebobeep&gt;</a></span><span class="message">wow okay... how do you track all those dependencies &gt;_&lt;</span></div><div class="line" id="042954"><span class="nick" style="color:#8dd3c7"><a href="#042954" label="[04:29:54]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m] mentioned that it was incomplete</span></div><div class="line" id="043008"><span class="nick" style="color:#80b1d3"><a href="#043008" label="[04:30:08]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well you just read the kaem scripts</span></div><div class="line" id="043103"><span class="nick" style="color:#80b1d3"><a href="#043103" label="[04:31:03]">&lt;oriansj&gt;</a></span><span class="message">it takes time and is done manually so it inevitably falls behind as fossy and stikonas are doing real work and I just haven't updated to reflect where they are now</span></div><div class="line" id="052449"><span class="nick" style="color:#6b8072"><a href="#052449" label="[05:24:49]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: yes, that's the book.  I wish I had an open-source source to point at</span></div><div class="line" id="052625"><span class="nick" style="color:#8dd3c7"><a href="#052625" label="[05:26:25]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: What you mean &quot;open-source source&quot;, are you saying because the book is copyrighted?</span></div><div class="line" id="052635"><span class="nick" style="color:#6b8072"><a href="#052635" label="[05:26:35]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: RISC-V assembly can handle 32-bit and 64-bit numbers, it's just the `li` pseudo-instruction that expands to `lui ...; addi ...` that can't quite handle the full 32-bit space</span></div><div class="line" id="052804"><span class="nick" style="color:#6b8072"><a href="#052804" label="[05:28:04]">&lt;muurkha&gt;</a></span><span class="message">I wrote a toy something-like-a-Lisp in September, with a 1-kilobyte executable: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/qfitzah.s">http://canonical.org/~kragen/sw/dev3/qfitzah.s</a> </span></div><div class="line" id="052855"><span class="nick" style="color:#6b8072"><a href="#052855" label="[05:28:55]">&lt;muurkha&gt;</a></span><span class="message">test program in <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/example.qf1">http://canonical.org/~kragen/sw/dev3/example.qf1</a> </span></div><div class="line" id="052908"><span class="nick" style="color:#6b8072"><a href="#052908" label="[05:29:08]">&lt;muurkha&gt;</a></span><span class="message">yeah, the book is not free for me to share with you</span></div><div class="line" id="053003"><span class="nick" style="color:#6b8072"><a href="#053003" label="[05:30:03]">&lt;muurkha&gt;</a></span><span class="message">I probably spent a week or two on it</span></div><div class="line" id="053039"><span class="nick" style="color:#6b8072"><a href="#053039" label="[05:30:39]">&lt;muurkha&gt;</a></span><span class="message">but oriansj was only able to write a C compiler in 24 hours because he's about a 100× better programmer than I am, most people couldn't do it in a month I think</span></div><div class="line" id="053205"><span class="nick" style="color:#6b8072"><a href="#053205" label="[05:32:05]">&lt;muurkha&gt;</a></span><span class="message">Qfitzah is not really a Lisp in the sense of being based on car, cdr, cons, eq, cond, null, and function calling, although it does use S-expression syntax</span></div><div class="line" id="053335"><span class="nick" style="color:#6b8072"><a href="#053335" label="[05:33:35]">&lt;muurkha&gt;</a></span><span class="message">but my thought was that it might be possible to get higher-order programming and parametric polymorphism like Lisp, but also pattern matching, ad-hoc polymorphism with dynamic method dispatch, and even multiple dispatch, in a language that was *simpler* than the Ur-Lisp</span></div><div class="line" id="053446"><span class="nick" style="color:#6b8072"><a href="#053446" label="[05:34:46]">&lt;muurkha&gt;</a></span><span class="message">and that might be a nicer language to write compilers in than C or Lisp (or, especially, Forth)</span></div><div class="line" id="053450"><span class="nick" style="color:#6b8072"><a href="#053450" label="[05:34:50]">&lt;muurkha&gt;</a></span><span class="message">I might finish it at some point, we'll see</span></div><div class="line" id="053524"><span class="nick" style="color:#8dd3c7"><a href="#053524" label="[05:35:24]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: It's okay i downloaded it from libgen :P</span></div><div class="line" id="053616"><span class="nick" style="color:#6b8072"><a href="#053616" label="[05:36:16]">&lt;muurkha&gt;</a></span><span class="message">the language interpreter I wrote based on the ς-calculus is <a rel="nofollow" href="http://canonical.org/~kragen/sw/bicicleta/">http://canonical.org/~kragen/sw/bicicleta/</a> </span></div><div class="line" id="053708"><span class="nick" style="color:#6b8072"><a href="#053708" label="[05:37:08]">&lt;muurkha&gt;</a></span><span class="message">the example session in <a rel="nofollow" href="http://canonical.org/~kragen/sw/bicicleta/README">http://canonical.org/~kragen/sw/bicicleta/README</a>  may be illuminating</span></div><div class="line" id="054107"><span class="nick" style="color:#6b8072"><a href="#054107" label="[05:41:07]">&lt;muurkha&gt;</a></span><span class="message">or the example program in <a rel="nofollow" href="http://canonical.org/~kragen/sw/bicicleta/freezer.bicicleta">http://canonical.org/~kragen/sw/bicicleta/freezer.bicicleta</a> </span></div><div class="line" id="104532"><span class="nick" style="color:#6d2462"><a href="#104532" label="[10:45:32]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: i believe the 2&gt;&amp;1 in the tar one silences the command not found warnings from grep, and wrapping that in a command -v grep detracts from clarity throughout the rest of the block so i don't think that</span></div><div class="line" id="104535"><span class="nick" style="color:#6d2462"><a href="#104535" label="[10:45:35]">&lt;fossy&gt;</a></span><span class="message">'s worth it</span></div><div class="line" id="104554"><span class="nick" style="color:#6d2462"><a href="#104554" label="[10:45:54]">&lt;fossy&gt;</a></span><span class="message">i have now wrapped the first one in a command -v grep for clarity instead of 2&gt;&amp;1 now howerver</span></div><div class="line" id="104609"><span class="nick" style="color:#6d2462"><a href="#104609" label="[10:46:09]">&lt;fossy&gt;</a></span><span class="message">let me just check that silences all the errors however</span></div><div class="line" id="104756"><span class="nick" style="color:#6d2462"><a href="#104756" label="[10:47:56]">&lt;fossy&gt;</a></span><span class="message">i am having trouble reasoning that error 13... not a big deal though</span></div><div class="line" id="121726"><span class="nick" style="color:#234e69"><a href="#121726" label="[12:17:26]">&lt;unmatched-paren&gt;</a></span><span class="message">if i wanted to change a number in memory on RISC-V, e.g. add one to it (`*thing += 1`) would I need to load it into a register first?</span></div><div class="line" id="121825"><span class="nick" style="color:#234e69"><a href="#121825" label="[12:18:25]">&lt;unmatched-paren&gt;</a></span><span class="message">sorry, wrong question...</span></div><div class="line" id="121838"><span class="nick" style="color:#234e69"><a href="#121838" label="[12:18:38]">&lt;unmatched-paren&gt;</a></span><span class="message">if i have `foo</span></div><div class="line" id="121845"><span class="nick" style="color:#234e69"><a href="#121845" label="[12:18:45]">&lt;unmatched-paren&gt;</a></span><span class="message">..aargh enter key |:</span></div><div class="line" id="122007"><span class="nick" style="color:#234e69"><a href="#122007" label="[12:20:07]">&lt;unmatched-paren&gt;</a></span><span class="message">SO if I have `foo = &amp;something`, how would I modify `foo` to point to `(&amp;something) + 1`? in C i'd do simply `foo += 1` and the pointer arithmetic would be worked out automatically.</span></div><div class="line" id="122027"><span class="nick" style="color:#234e69"><a href="#122027" label="[12:20:27]">&lt;unmatched-paren&gt;</a></span><span class="message">the thing that `foo` points to is a string, btw.</span></div><div class="line" id="122046"><span class="nick" style="color:#234e69"><a href="#122046" label="[12:20:46]">&lt;unmatched-paren&gt;</a></span><span class="message">(I'm trying to iterate over nul-terminated strings)</span></div><div class="line" id="122207"><span class="nick" style="color:#6d2462"><a href="#122207" label="[12:22:07]">&lt;fossy&gt;</a></span><span class="message">are you doing this in assembly?</span></div><div class="line" id="122859"><span class="nick" style="color:#234e69"><a href="#122859" label="[12:28:59]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah, RISC-V assembly</span></div><div class="line" id="122944"><span class="nick" style="color:#234e69"><a href="#122944" label="[12:29:44]">&lt;unmatched-paren&gt;</a></span><span class="message">i was told yesterday that it was a better choice for starting out than x64, since it's so much smaller</span></div><div class="line" id="123015"><span class="nick" style="color:#234e69"><a href="#123015" label="[12:30:15]">&lt;unmatched-paren&gt;</a></span><span class="message">(riscv64, of course)</span></div><div class="line" id="123151"><span class="nick" style="color:#234e69"><a href="#123151" label="[12:31:51]">&lt;unmatched-paren&gt;</a></span><span class="message">actually, i should probably be keeping track of an `i` instead of adding to the string pointer...</span></div><div class="line" id="124208"><span class="nick" style="color:#6d2462"><a href="#124208" label="[12:42:08]">&lt;fossy&gt;</a></span><span class="message">not familiar with riscv assembly, sorry</span></div><div class="line" id="125930"><span class="nick" style="color:#234e69"><a href="#125930" label="[12:59:30]">&lt;unmatched-paren&gt;</a></span><span class="message">aand... my riscv hello world program works!</span></div><div class="line" id="125933"><span class="nick" style="color:#234e69"><a href="#125933" label="[12:59:33]">&lt;unmatched-paren&gt;</a></span><span class="message">:D</span></div><div class="line" id="140326"><span class="nick" style="color:#6b8072"><a href="#140326" label="[14:03:26]">&lt;muurkha&gt;</a></span><span class="message">yay! congratulations!</span></div><div class="line" id="145538"><span class="nick" style="color:#234e69"><a href="#145538" label="[14:55:38]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: what should i try to do next?</span></div><div class="line" id="145554"><span class="nick" style="color:#234e69"><a href="#145554" label="[14:55:54]">&lt;unmatched-paren&gt;</a></span><span class="message">maybe replicate some basic libc functions?</span></div><div class="line" id="203048"><span class="nick" style="color:#2e2a4a"><a href="#203048" label="[20:30:48]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: we indeed replicate some basic libc functions in stage0-posix</span></div><div class="line" id="203233"><span class="nick" style="color:#2e2a4a"><a href="#203233" label="[20:32:33]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1#L611">https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1#L611</a>  and <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1#L636">https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1#L636</a>  are useful for printing stuff</span></div><div class="line" id="203312"><span class="nick" style="color:#2e2a4a"><a href="#203312" label="[20:33:12]">&lt;stikonas&gt;</a></span><span class="message">that's why going over stage0-posix can help to learn assembly</span></div><div class="line" id="203322"><span class="nick" style="color:#2e2a4a"><a href="#203322" label="[20:33:22]">&lt;stikonas&gt;</a></span><span class="message">early programs are small but by the time you understand cc_* you would be quite good at assembly</span></div><div class="line" id="204900"><span class="nick">***</span><span class="message notice">madage is now known as ichichjunk</span></div><div class="line" id="205742"><span class="nick" style="color:#6c3d55"><a href="#205742" label="[20:57:42]">&lt;Hagfish&gt;</a></span><span class="message">heh, i feel like a self-taught software engineering degree could consist of just:  nand2tetris, live-bootstrap, and linux-from-scratch</span></div><div class="line" id="205909"><span class="nick" style="color:#6c3d55"><a href="#205909" label="[20:59:09]">&lt;Hagfish&gt;</a></span><span class="message">(i'd also feel better about humanity's long term chances if all of those were required modules for every computer science student at university)</span></div><div class="line" id="213144"><span class="nick">***</span><span class="message notice">jackhill is now known as KM4MBG</span></div><div class="line" id="213300"><span class="nick">***</span><span class="message notice">KM4MBG is now known as jackhill</span></div><div class="line" id="231041"><span class="nick">***</span><span class="message notice">ichichjunk is now known as madage</span></div><div class="line" id="234851"><span class="nick">***</span><span class="message notice">madage is now known as pussyriot</span></div><br /></div></body></html>