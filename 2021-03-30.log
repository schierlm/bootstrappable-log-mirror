<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011710"><span class="nick" style="color:#8dd3c7"><a href="#011710" label="[01:17:10]">&lt;stikonas&gt;</a></span><span class="message">fossy: since it might be that we'll need to go gcc3 route, maybe postpone bash rebuild and xz till after that? We can still merge libtool 2 though</span></div><div class="line" id="012351"><span class="nick" style="color:#8dd3c7"><a href="#012351" label="[01:23:51]">&lt;stikonas&gt;</a></span><span class="message">pder: hmm, we still need to deal with fixincludes even in gcc3</span></div><div class="line" id="012651"><span class="nick" style="color:#8dd3c7"><a href="#012651" label="[01:26:51]">&lt;stikonas&gt;</a></span><span class="message">that is a bit annoying...</span></div><div class="line" id="012702"><span class="nick" style="color:#8dd3c7"><a href="#012702" label="[01:27:02]">&lt;stikonas&gt;</a></span><span class="message">gcc 3 (or 2) might not be much easier then</span></div><div class="line" id="015212"><span class="nick" style="color:#8dd3c7"><a href="#015212" label="[01:52:12]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: maybe the easier option is to build gcc4 but do not use top level configure and Makefile?</span></div><div class="line" id="015403"><span class="nick" style="color:#8dd3c7"><a href="#015403" label="[01:54:03]">&lt;stikonas&gt;</a></span><span class="message">I think that is much simpler than trying to build guile with gcc</span></div><div class="line" id="015425"><span class="nick" style="color:#8dd3c7"><a href="#015425" label="[01:54:25]">&lt;stikonas&gt;</a></span><span class="message">and probably easier than gcc 3 route</span></div><div class="line" id="015506"><span class="nick" style="color:#8dd3c7"><a href="#015506" label="[01:55:06]">&lt;stikonas&gt;</a></span><span class="message">since we end up with newer gcc</span></div><div class="line" id="025704"><span class="nick" style="color:#2e2a4a"><a href="#025704" label="[02:57:04]">&lt;pder&gt;</a></span><span class="message">Is fixincludes necessary?  Maybe gcc 4 could be done in two passes  First pass avoids top level Makefile.in.  Then build guile and autogen, then second gcc pass is a normal build.</span></div><div class="line" id="033542"><span class="nick" style="color:#6b8072"><a href="#033542" label="[03:35:42]">&lt;Hagfish&gt;</a></span><span class="message">that would be a really smart solution if it works</span></div><div class="line" id="070946"><span class="nick" style="color:#80b1d3"><a href="#070946" label="[07:09:46]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: hm that might work...</span></div><div class="line" id="070951"><span class="nick" style="color:#80b1d3"><a href="#070951" label="[07:09:51]">&lt;fossy&gt;</a></span><span class="message">i am not 100% sure</span></div><div class="line" id="100022"><span class="nick" style="color:#6d2462"><a href="#100022" label="[10:00:22]">&lt;bauen1&gt;</a></span><span class="message">pder: as far as i know you should be able to get away without fixincludes as that is usually used to &quot;fix&quot; broken system headers, but if we control all headers there should be no harm in patching it out</span></div><div class="line" id="100109"><span class="nick" style="color:#6d2462"><a href="#100109" label="[10:01:09]">&lt;bauen1&gt;</a></span><span class="message">such a weird feature</span></div><div class="line" id="105720"><span class="nick" style="color:#234e69"><a href="#105720" label="[10:57:20]">&lt;gforce_de1977&gt;</a></span><span class="message">i was looking on ebay for an 386DX40 with 8MB RAM for letting bootstrap run on real hardware, and there are really selling people such (working!) stuff for ~100 euro. so booting from floppy, and install all the stuff on IDE-HDD + swap-partitions is maybe possible</span></div><div class="line" id="110727"><span class="nick" style="color:#6d2462"><a href="#110727" label="[11:07:27]">&lt;bauen1&gt;</a></span><span class="message">a swap partition would make things incredibly slow (with just 8mb ram)</span></div><div class="line" id="110734"><span class="nick" style="color:#6d2462"><a href="#110734" label="[11:07:34]">&lt;bauen1&gt;</a></span><span class="message">but probably necessary</span></div><div class="line" id="110846"><span class="nick" style="color:#6d2462"><a href="#110846" label="[11:08:46]">&lt;bauen1&gt;</a></span><span class="message">and i wonder if every program run fits into those 8mb, if yes then it could work good enough, it will be slow</span></div><div class="line" id="110952"><span class="nick" style="color:#6d2462"><a href="#110952" label="[11:09:52]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: better question: how do you plan on loading the first bytes into memory ?</span></div><div class="line" id="110955"><span class="nick" style="color:#80b1d3"><a href="#110955" label="[11:09:55]">&lt;fossy&gt;</a></span><span class="message">oh god that would be slow</span></div><div class="line" id="111011"><span class="nick" style="color:#80b1d3"><a href="#111011" label="[11:10:11]">&lt;fossy&gt;</a></span><span class="message">uh</span></div><div class="line" id="111014"><span class="nick" style="color:#80b1d3"><a href="#111014" label="[11:10:14]">&lt;fossy&gt;</a></span><span class="message">does linux run on 8mb ram</span></div><div class="line" id="111928"><span class="nick" style="color:#234e69"><a href="#111928" label="[11:19:28]">&lt;gforce_de1977&gt;</a></span><span class="message">fossy: ofcourse, also 2mb is ok if you strip some things out (!)</span></div><div class="line" id="111943"><span class="nick" style="color:#80b1d3"><a href="#111943" label="[11:19:43]">&lt;fossy&gt;</a></span><span class="message">really?</span></div><div class="line" id="111946"><span class="nick" style="color:#80b1d3"><a href="#111946" label="[11:19:46]">&lt;fossy&gt;</a></span><span class="message">TIL</span></div><div class="line" id="112007"><span class="nick" style="color:#234e69"><a href="#112007" label="[11:20:07]">&lt;gforce_de1977&gt;</a></span><span class="message">why not? 2 megabyte if a huuuuuuge amount of memory if you think about it.</span></div><div class="line" id="112015"><span class="nick" style="color:#80b1d3"><a href="#112015" label="[11:20:15]">&lt;fossy&gt;</a></span><span class="message">true</span></div><div class="line" id="112017"><span class="nick" style="color:#234e69"><a href="#112017" label="[11:20:17]">&lt;gforce_de1977&gt;</a></span><span class="message">&quot;is a&quot;</span></div><div class="line" id="112027"><span class="nick" style="color:#80b1d3"><a href="#112027" label="[11:20:27]">&lt;fossy&gt;</a></span><span class="message">linux is a monolithic kernel though</span></div><div class="line" id="112035"><span class="nick" style="color:#80b1d3"><a href="#112035" label="[11:20:35]">&lt;fossy&gt;</a></span><span class="message">also mescc will become very very very slow</span></div><div class="line" id="112038"><span class="nick" style="color:#80b1d3"><a href="#112038" label="[11:20:38]">&lt;fossy&gt;</a></span><span class="message">it eats up a lot of ram</span></div><div class="line" id="112050"><span class="nick" style="color:#80b1d3"><a href="#112050" label="[11:20:50]">&lt;fossy&gt;</a></span><span class="message">if you do end up doing this though i would love to hear about it</span></div><div class="line" id="112055"><span class="nick" style="color:#234e69"><a href="#112055" label="[11:20:55]">&lt;gforce_de1977&gt;</a></span><span class="message">yes, so you need support for SWAP</span></div><div class="line" id="112105"><span class="nick" style="color:#80b1d3"><a href="#112105" label="[11:21:05]">&lt;fossy&gt;</a></span><span class="message">that is on my wishlist for live-bootstrap :)</span></div><div class="line" id="112108"><span class="nick" style="color:#234e69"><a href="#112108" label="[11:21:08]">&lt;gforce_de1977&gt;</a></span><span class="message">(but if it lasts some weeks, thats ok)</span></div><div class="line" id="112159"><span class="nick" style="color:#234e69"><a href="#112159" label="[11:21:59]">&lt;gforce_de1977&gt;</a></span><span class="message">there is FUZIX or ELKS, which runs in 64K RAM</span></div><div class="line" id="112220"><span class="nick" style="color:#234e69"><a href="#112220" label="[11:22:20]">&lt;gforce_de1977&gt;</a></span><span class="message">(but thats another story)</span></div><div class="line" id="112328"><span class="nick" style="color:#234e69"><a href="#112328" label="[11:23:28]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: the first bytes into memory? floppy disk! on x86 we have a BIOS, it's ofcourse cheating somehow, but...</span></div><div class="line" id="112747"><span class="nick" style="color:#234e69"><a href="#112747" label="[11:27:47]">&lt;gforce_de1977&gt;</a></span><span class="message">speaking of the 2mb memory: i have a mips box (a wifi router) lying around, where i want to testbuild a initramfs-linux with nothing (only serial console). i know that a full openwrt - webserver, ssh + wifi (!) runs on this box with 8mb ram, but yeah, kernel 2.4.37</span></div><div class="line" id="114842"><span class="nick" style="color:#8dd3c7"><a href="#114842" label="[11:48:42]">&lt;stikonas&gt;</a></span><span class="message">newer openwrt need much more RAM... I have a DSL modem with 32 MB RAM and maybe it would work with 16 but not any fewer</span></div><div class="line" id="114900"><span class="nick" style="color:#8dd3c7"><a href="#114900" label="[11:49:00]">&lt;stikonas&gt;</a></span><span class="message">and it's just a modem, so no routing or wifi</span></div><div class="line" id="121130"><span class="nick" style="color:#234e69"><a href="#121130" label="[12:11:30]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: thats clear, but thats because of extended userspace and a lot of kernelmodules loaded</span></div><div class="line" id="121302"><span class="nick" style="color:#234e69"><a href="#121302" label="[12:13:02]">&lt;gforce_de1977&gt;</a></span><span class="message">BWT: these are all occurences of recursive globs: <a rel="nofollow" href="https://paste.debian.net/1191652/">https://paste.debian.net/1191652/</a> </span></div><div class="line" id="121336"><span class="nick" style="color:#8dd3c7"><a href="#121336" label="[12:13:36]">&lt;stikonas&gt;</a></span><span class="message">that's not all</span></div><div class="line" id="121350"><span class="nick" style="color:#234e69"><a href="#121350" label="[12:13:50]">&lt;gforce_de1977&gt;</a></span><span class="message">i will start to add a wrapper, which calls find first and adds the full path</span></div><div class="line" id="121400"><span class="nick" style="color:#234e69"><a href="#121400" label="[12:14:00]">&lt;gforce_de1977&gt;</a></span><span class="message">not all? which do you have in mind?</span></div><div class="line" id="121516"><span class="nick" style="color:#8dd3c7"><a href="#121516" label="[12:15:16]">&lt;stikonas&gt;</a></span><span class="message">one example would be         ./miniperl -Ilib $&lt; lib/*.pm lib/*/*.pm from sysa/perl-5.6.2/mk/main.mk</span></div><div class="line" id="122507"><span class="nick" style="color:#234e69"><a href="#122507" label="[12:25:07]">&lt;gforce_de1977&gt;</a></span><span class="message">very good catch</span></div><div class="line" id="122953"><span class="nick" style="color:#6d2462"><a href="#122953" label="[12:29:53]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: but how do you write the floppy disk in the first place lol</span></div><div class="line" id="123643"><span class="nick" style="color:#8dd3c7"><a href="#123643" label="[12:36:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm not convinced that floppy disk and old computer would give us more than modern one</span></div><div class="line" id="124125"><span class="nick" style="color:#8dd3c7"><a href="#124125" label="[12:41:25]">&lt;stikonas&gt;</a></span><span class="message">only full bootstrap with visible optical components can help here...</span></div><div class="line" id="124211"><span class="nick" style="color:#8dd3c7"><a href="#124211" label="[12:42:11]">&lt;stikonas&gt;</a></span><span class="message">or at least something that can read data from paper tape</span></div><div class="line" id="124433"><span class="nick" style="color:#6d2462"><a href="#124433" label="[12:44:33]">&lt;bauen1&gt;</a></span><span class="message">i have a 65c816 based computer, add an sd card writer, some bit switches and an array of leds and you can hack in the first 512 bytes per hand into the sd card</span></div><div class="line" id="124637"><span class="nick" style="color:#6d2462"><a href="#124637" label="[12:46:37]">&lt;bauen1&gt;</a></span><span class="message">using bit switches you can even program a rom by hand with a monitor for the 65c816 ; so you can probably get away with just an eeprom, ram, 65c816, sd card rw and a few additional gates to do that</span></div><div class="line" id="124641"><span class="nick" style="color:#6d2462"><a href="#124641" label="[12:46:41]">&lt;bauen1&gt;</a></span><span class="message">doesn't even need leds</span></div><div class="line" id="124926"><span class="nick" style="color:#234e69"><a href="#124926" label="[12:49:26]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: ok, i think we will just wait for universitis building single board computers with dip switches. when you ask about the first bits in memory, thats really hard 8-) because for now we rely on a kernel which is just &quot;there&quot;. our initial binary seed will not work without a kernel.</span></div><div class="line" id="124943"><span class="nick" style="color:#6d2462"><a href="#124943" label="[12:49:43]">&lt;bauen1&gt;</a></span><span class="message">hehe</span></div><div class="line" id="132646"><span class="nick" style="color:#6c3d55"><a href="#132646" label="[13:26:46]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: depends one which binary seed you use. The stage-posix binary seeds absolutely need a POSIX to work but the bare-metal seeds have no such requirements.</span></div><div class="line" id="132851"><span class="nick" style="color:#6c3d55"><a href="#132851" label="[13:28:51]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yes paper tape is certainly an auditable option, the reader/writer need to have an auditable design otherwise it could be possible for firmware inside of it to tamper with what is read/written.</span></div><div class="line" id="133016"><span class="nick" style="color:#6c3d55"><a href="#133016" label="[13:30:16]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I have reservations about SD cards because they have internal software running with KB of RAM and up to 4MB ROM but probably would be fine if they are older than the architectures they are used to bootstrap.</span></div><div class="line" id="133639"><span class="nick" style="color:#6d2462"><a href="#133639" label="[13:36:39]">&lt;bauen1&gt;</a></span><span class="message">oh right</span></div><div class="line" id="133718"><span class="nick" style="color:#6d2462"><a href="#133718" label="[13:37:18]">&lt;bauen1&gt;</a></span><span class="message">but if you implement verification of the storage medium you can in theory use any untrusted medium (such as an ssd), you just need to verify every blob you read before you use it</span></div><div class="line" id="134158"><span class="nick" style="color:#6c3d55"><a href="#134158" label="[13:41:58]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: assuming you have enough ram to do so and solve bootstrapping the verifier in RAM without using that medium.</span></div><div class="line" id="134246"><span class="nick" style="color:#6c3d55"><a href="#134246" label="[13:42:46]">&lt;OriansJ&gt;</a></span><span class="message">it is certainly a much easier task if the untrusted medium isn't used until after you get a kernel with a crypto filesystem support</span></div><div class="line" id="135333"><span class="nick" style="color:#6c3d55"><a href="#135333" label="[13:53:33]">&lt;OriansJ&gt;</a></span><span class="message">a proper luks volume and a checksuming filesystem like btrfs should be sufficient</span></div><div class="line" id="135522"><span class="nick" style="color:#6c3d55"><a href="#135522" label="[13:55:22]">&lt;OriansJ&gt;</a></span><span class="message">Which the /boot should be able to fit on a 50MB Zip Disk or optical media</span></div><div class="line" id="141325"><span class="nick" style="color:#234e69"><a href="#141325" label="[14:13:25]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: great, that there is a binary-seed for bare metal, i have overlooked this</span></div><div class="line" id="141527"><span class="nick" style="color:#234e69"><a href="#141527" label="[14:15:27]">&lt;gforce_de1977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img">https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img</a> </span></div><div class="line" id="141713"><span class="nick" style="color:#234e69"><a href="#141713" label="[14:17:13]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: how is this build? and why dont we use it?</span></div><div class="line" id="141754"><span class="nick" style="color:#234e69"><a href="#141754" label="[14:17:54]">&lt;gforce_de1977&gt;</a></span><span class="message">(seems to be a floppy disk image 1.44mb)</span></div><div class="line" id="142946"><span class="nick" style="color:#234e69"><a href="#142946" label="[14:29:46]">&lt;gforce_de1977&gt;</a></span><span class="message">BTW: a lisp compiler: <a rel="nofollow" href="https://bernsteinbear.com/blog/lisp/">https://bernsteinbear.com/blog/lisp/</a> </span></div><div class="line" id="150016"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="161330"><span class="nick">***</span><span class="message notice">Noisytoot is now known as noisytoot[x]</span></div><div class="line" id="161346"><span class="nick">***</span><span class="message notice">noisytoot[x] is now known as Noisytoot</span></div><div class="line" id="220502"><span class="nick" style="color:#8dd3c7"><a href="#220502" label="[22:05:02]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: so I've got gcc 4.0.4 building without pre-gen</span></div><div class="line" id="220504"><span class="nick" style="color:#8dd3c7"><a href="#220504" label="[22:05:04]">&lt;stikonas&gt;</a></span><span class="message">testing now...</span></div><div class="line" id="220748"><span class="nick" style="color:#2e2a4a"><a href="#220748" label="[22:07:48]">&lt;pder&gt;</a></span><span class="message">stikonas: nice work.  did you have to work around fixincludes?</span></div><div class="line" id="220828"><span class="nick" style="color:#8dd3c7"><a href="#220828" label="[22:08:28]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="220837"><span class="nick" style="color:#8dd3c7"><a href="#220837" label="[22:08:37]">&lt;stikonas&gt;</a></span><span class="message">it wasn't too hard though</span></div><div class="line" id="220854"><span class="nick" style="color:#8dd3c7"><a href="#220854" label="[22:08:54]">&lt;stikonas&gt;</a></span><span class="message">STMP_FIXINC= parameter to make</span></div><div class="line" id="221055"><span class="nick" style="color:#8dd3c7"><a href="#221055" label="[22:10:55]">&lt;stikonas&gt;</a></span><span class="message">well, need to test whether gcc is functional...</span></div><div class="line" id="221110"><span class="nick" style="color:#8dd3c7"><a href="#221110" label="[22:11:10]">&lt;stikonas&gt;</a></span><span class="message">gcc rebuild with gcc should show that</span></div><div class="line" id="222630"><span class="nick" style="color:#6b8072"><a href="#222630" label="[22:26:30]">&lt;Hagfish&gt;</a></span><span class="message">do you have a pre-computed hash you are expecting to see, or are you checking that a chain of self-builds reaches a fixed point?</span></div><div class="line" id="222904"><span class="nick" style="color:#6b8072"><a href="#222904" label="[22:29:04]">&lt;Hagfish&gt;</a></span><span class="message">(it's funny to think that by reaching gcc 4.0.4, we're now starting to focus on code that is younger than most computer science undergraduate students)</span></div><div class="line" id="224410"><span class="nick" style="color:#8dd3c7"><a href="#224410" label="[22:44:10]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: no, I just build it and calculate the hash of that build</span></div><div class="line" id="224416"><span class="nick" style="color:#8dd3c7"><a href="#224416" label="[22:44:16]">&lt;stikonas&gt;</a></span><span class="message">I don't even try to reach fixed point</span></div><div class="line" id="224441"><span class="nick" style="color:#8dd3c7"><a href="#224441" label="[22:44:41]">&lt;stikonas&gt;</a></span><span class="message">one rebuild should be enough to get rid of all tcc issues...</span></div><div class="line" id="225334"><span class="nick" style="color:#8dd3c7"><a href="#225334" label="[22:53:34]">&lt;stikonas&gt;</a></span><span class="message">we still need to build autogen soonish...</span></div><div class="line" id="225344"><span class="nick" style="color:#8dd3c7"><a href="#225344" label="[22:53:44]">&lt;stikonas&gt;</a></span><span class="message">but that should now be a bit easier with GCC...</span></div><div class="line" id="231052"><span class="nick" style="color:#80b1d3"><a href="#231052" label="[23:10:52]">&lt;fossy&gt;</a></span><span class="message">stikonas: neat</span></div><div class="line" id="231129"><span class="nick" style="color:#8dd3c7"><a href="#231129" label="[23:11:29]">&lt;stikonas&gt;</a></span><span class="message">I'll update PR soon (probably just push to libtool PR)</span></div><div class="line" id="231136"><span class="nick" style="color:#8dd3c7"><a href="#231136" label="[23:11:36]">&lt;stikonas&gt;</a></span><span class="message">not sure why libtool PR is failing now...</span></div><div class="line" id="231144"><span class="nick" style="color:#8dd3c7"><a href="#231144" label="[23:11:44]">&lt;stikonas&gt;</a></span><span class="message">I can't reproduce it in either chroot or qemu</span></div><div class="line" id="231155"><span class="nick" style="color:#80b1d3"><a href="#231155" label="[23:11:55]">&lt;fossy&gt;</a></span><span class="message">Ill take a look tonight</span></div><div class="line" id="231156"><span class="nick" style="color:#8dd3c7"><a href="#231156" label="[23:11:56]">&lt;stikonas&gt;</a></span><span class="message">but GCC PR changes the way gcc is built...</span></div><div class="line" id="231203"><span class="nick" style="color:#8dd3c7"><a href="#231203" label="[23:12:03]">&lt;stikonas&gt;</a></span><span class="message">so maybe CI will pass</span></div><div class="line" id="231315"><span class="nick" style="color:#8dd3c7"><a href="#231315" label="[23:13:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, building gcc core with just C backend without top-level Makefile is not too bad</span></div><div class="line" id="231326"><span class="nick" style="color:#8dd3c7"><a href="#231326" label="[23:13:26]">&lt;stikonas&gt;</a></span><span class="message">but for full GCC with C++ I think we should try to get Autogen</span></div><div class="line" id="231745"><span class="nick" style="color:#80b1d3"><a href="#231745" label="[23:17:45]">&lt;fossy&gt;</a></span><span class="message">yeah, sure</span></div><div class="line" id="231813"><span class="nick" style="color:#80b1d3"><a href="#231813" label="[23:18:13]">&lt;fossy&gt;</a></span><span class="message">guile is in-progress, should be OK</span></div><div class="line" id="231858"><span class="nick" style="color:#8dd3c7"><a href="#231858" label="[23:18:58]">&lt;stikonas&gt;</a></span><span class="message">ok, my commit works, just need to update bash checksum</span></div><div class="line" id="231911"><span class="nick" style="color:#8dd3c7"><a href="#231911" label="[23:19:11]">&lt;stikonas&gt;</a></span><span class="message">but that is the very last thing in the build, so next build should work</span></div><div class="line" id="231918"><span class="nick" style="color:#6c3d55"><a href="#231918" label="[23:19:18]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: the initial build of the bootstrap binaries is always an implementation detail left to the person needing it. Be it hand toggled into RAM, read from punched cards or some other implementation detail. That is for the person do in a manner they trust. Everything else after that is the natural result of applying tools to sources.</span></div><div class="line" id="232022"><span class="nick" style="color:#8dd3c7"><a href="#232022" label="[23:20:22]">&lt;stikonas&gt;</a></span><span class="message">I guess bash checksum was affected because I didn't run fixincludes...</span></div><div class="line" id="232144"><span class="nick" style="color:#8dd3c7"><a href="#232144" label="[23:21:44]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed to <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/80">https://github.com/fosslinux/live-bootstrap/pull/80</a> </span></div><div class="line" id="232147"><span class="nick" style="color:#6c3d55"><a href="#232147" label="[23:21:47]">&lt;OriansJ&gt;</a></span><span class="message">As for why the native x86 port isn't further along. Short version POSIX was prioritized to help janneke and Guix get their root of trust first and the handful of pieces could be done at a more relaxed pace.</span></div><div class="line" id="232224"><span class="nick" style="color:#8dd3c7"><a href="#232224" label="[23:22:24]">&lt;stikonas&gt;</a></span><span class="message">also POSIX is easier, especially to automate, so makes sense to start with a bit easier stuff</span></div><div class="line" id="232349"><span class="nick" style="color:#6c3d55"><a href="#232349" label="[23:23:49]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: actually it was a compromise as porting things such as Mes or TCC to run on bare metal appeared as a big problem but Writing a Minimal POSIX in the M2-Planet C subset seemed possible (if not annoying to do)</span></div><div class="line" id="232633"><span class="nick" style="color:#6c3d55"><a href="#232633" label="[23:26:33]">&lt;OriansJ&gt;</a></span><span class="message">The manual steps to M2-Planet could be done in a relatively short period of time (Depending on the speed of media change of course) (90 seconds of compute time on a 1MHz CPU and a couple MB of RAM)</span></div><div class="line" id="232704"><span class="nick" style="color:#6c3d55"><a href="#232704" label="[23:27:04]">&lt;OriansJ&gt;</a></span><span class="message">But the pieces after M2-Planet absolutely needed a POSIX and 1+GB of RAM to run</span></div><div class="line" id="232720"><span class="nick" style="color:#6c3d55"><a href="#232720" label="[23:27:20]">&lt;OriansJ&gt;</a></span><span class="message">with considerably longer build times</span></div><div class="line" id="232926"><span class="nick" style="color:#6c3d55"><a href="#232926" label="[23:29:26]">&lt;OriansJ&gt;</a></span><span class="message">So in theory stage0 from hex0 to M2-Planet should run on a 386 with 4MB or RAM</span></div><div class="line" id="233051"><span class="nick" style="color:#6c3d55"><a href="#233051" label="[23:30:51]">&lt;OriansJ&gt;</a></span><span class="message">Which should give us a huge set of systems we could bootstrap from and get a working POSIX kernel to do the rest to GCC+Linux+Guile</span></div><div class="line" id="233412"><span class="nick" style="color:#6c3d55"><a href="#233412" label="[23:34:12]">&lt;OriansJ&gt;</a></span><span class="message">One could say I am stuck in too many directions: Do M2libc, M3 work, stage0-CPM, stage0 bootstrap work, custom FPGA work and custom Hardware work. And most of my free time is being spent with my son.</span></div><div class="line" id="234414"><span class="nick" style="color:#6b8072"><a href="#234414" label="[23:44:14]">&lt;Hagfish&gt;</a></span><span class="message">if he grows up knowing what a cool dad he has (who wants to spend time with him), and then gets into a project like this when he's old enough, then that's a completely valid long-term strategy :D</span></div><br /></div></body></html>