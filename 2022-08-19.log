<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001714"><span class="nick" style="color:#8dd3c7"><a href="#001714" label="[00:17:14]">&lt;bauen1&gt;</a></span><span class="message">theruran: yeah, iirc there was an email thread some time ago asking for a new release, and it was like &quot;nah&quot;, people of course frequently push things that break setups :(</span></div><div class="line" id="002337"><span class="nick" style="color:#2e2a4a"><a href="#002337" label="[00:23:37]">&lt;theruran&gt;</a></span><span class="message">:( so a developer actually replied &quot;nah&quot; lol</span></div><div class="line" id="002344"><span class="nick" style="color:#2e2a4a"><a href="#002344" label="[00:23:44]">&lt;theruran&gt;</a></span><span class="message">just asking to get forked</span></div><div class="line" id="033708"><span class="nick" style="color:#6b8072"><a href="#033708" label="[03:37:08]">&lt;oriansj&gt;</a></span><span class="message">nimaje: the problem in that case is that two compilers implementing the same spec can result in different behavior or just straight up not be able to compile each other's code.</span></div><div class="line" id="033728"><span class="nick" style="color:#6b8072"><a href="#033728" label="[03:37:28]">&lt;oriansj&gt;</a></span><span class="message">and thank you for the hint for a more proper malloc</span></div><div class="line" id="034346"><span class="nick" style="color:#6b8072"><a href="#034346" label="[03:43:46]">&lt;oriansj&gt;</a></span><span class="message">theruran: if it is really that bad, I might just have to fork TCC and turn it into the previously proposed M3 idea</span></div><div class="line" id="171525"><span class="nick" style="color:#80b1d3"><a href="#171525" label="[17:15:25]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: searching IRC logs didn't turn up much on M3, could you elaborate?</span></div><div class="line" id="171601"><span class="nick" style="color:#6d2462"><a href="#171601" label="[17:16:01]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: <a rel="nofollow" href="https://github.com/oriansj/M3-Meteoroid">https://github.com/oriansj/M3-Meteoroid</a> </span></div><div class="line" id="171834"><span class="nick" style="color:#6d2462"><a href="#171834" label="[17:18:34]">&lt;unmatched-paren&gt;</a></span><span class="message">I think it was an attempt to make a compiler to replace Mes</span></div><div class="line" id="171858"><span class="nick" style="color:#80b1d3"><a href="#171858" label="[17:18:58]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: thanks for the link</span></div><div class="line" id="171943"><span class="nick" style="color:#6d2462"><a href="#171943" label="[17:19:43]">&lt;unmatched-paren&gt;</a></span><span class="message">because Mes is a little s l o o o o o o o o o o o o w and there's really no need to complicate the chain by diverting into Scheme</span></div><div class="line" id="171949"><span class="nick" style="color:#80b1d3"><a href="#171949" label="[17:19:49]">&lt;rickmasters&gt;</a></span><span class="message">there isn't a line of documentation yet so it's mysterious</span></div><div class="line" id="172005"><span class="nick" style="color:#6d2462"><a href="#172005" label="[17:20:05]">&lt;unmatched-paren&gt;</a></span><span class="message">and it doesn't support anything other than x86 yet iiuc?</span></div><div class="line" id="172011"><span class="nick" style="color:#80b1d3"><a href="#172011" label="[17:20:11]">&lt;rickmasters&gt;</a></span><span class="message">the makefile uses gcc whereas I was looking for M2</span></div><div class="line" id="172033"><span class="nick" style="color:#6d2462"><a href="#172033" label="[17:20:33]">&lt;unmatched-paren&gt;</a></span><span class="message">Oh, interesting</span></div><div class="line" id="172043"><span class="nick" style="color:#6d2462"><a href="#172043" label="[17:20:43]">&lt;unmatched-paren&gt;</a></span><span class="message">Strange that it uses _GNU_SOURCE</span></div><div class="line" id="172100"><span class="nick" style="color:#6d2462"><a href="#172100" label="[17:21:00]">&lt;unmatched-paren&gt;</a></span><span class="message">you'd think that you'd want to reduce the amount of extensions in a bootstrap compiler</span></div><div class="line" id="172121"><span class="nick" style="color:#6d2462"><a href="#172121" label="[17:21:21]">&lt;unmatched-paren&gt;</a></span><span class="message">i suppose the plan might have been to build the compiler first with gcc and then simplify it for m2 later</span></div><div class="line" id="172305"><span class="nick" style="color:#80b1d3"><a href="#172305" label="[17:23:05]">&lt;rickmasters&gt;</a></span><span class="message">yes, mes is slow, it takes 53 hours to build itself on qemu without kvm on my machine</span></div><div class="line" id="172316"><span class="nick" style="color:#6d2462"><a href="#172316" label="[17:23:16]">&lt;unmatched-paren&gt;</a></span><span class="message">yikes</span></div><div class="line" id="172330"><span class="nick" style="color:#6d2462"><a href="#172330" label="[17:23:30]">&lt;unmatched-paren&gt;</a></span><span class="message">that's probably slower than building chromium</span></div><div class="line" id="172333"><span class="nick" style="color:#80b1d3"><a href="#172333" label="[17:23:33]">&lt;rickmasters&gt;</a></span><span class="message">i finally broke down and deployed bare metal yesterday, it compiles in 19 minutes with -enable-kvm</span></div><div class="line" id="172728"><span class="nick" style="color:#80b1d3"><a href="#172728" label="[17:27:28]">&lt;rickmasters&gt;</a></span><span class="message">so, my dev cycle just got sped up about by a factor of 160. i was stupid not to have used kvm sooner</span></div><div class="line" id="172957"><span class="nick" style="color:#80b1d3"><a href="#172957" label="[17:29:57]">&lt;rickmasters&gt;</a></span><span class="message">on the other hand I've had a busy summer and bootstrapping was on the back burner any way so I just lived with it.</span></div><div class="line" id="173118"><span class="nick" style="color:#80b1d3"><a href="#173118" label="[17:31:18]">&lt;rickmasters&gt;</a></span><span class="message">i'm now using an AWS bare metal server type m5zn.metal which is not cheap but its worth it until I can get tcc compiled</span></div><div class="line" id="173416"><span class="nick" style="color:#80b1d3"><a href="#173416" label="[17:34:16]">&lt;rickmasters&gt;</a></span><span class="message">anyway, I really like the idea of an M3 compiler replacing mes but I can see that being a lot of work.</span></div><div class="line" id="173500"><span class="nick" style="color:#6d2462"><a href="#173500" label="[17:35:00]">&lt;unmatched-paren&gt;</a></span><span class="message">I think we should try to port QBE and cproc to M2, instead of TCC</span></div><div class="line" id="173531"><span class="nick" style="color:#6d2462"><a href="#173531" label="[17:35:31]">&lt;unmatched-paren&gt;</a></span><span class="message">it'll probably be a little easier, since both are iirc strictly POSIX conforming</span></div><div class="line" id="173542"><span class="nick" style="color:#6d2462"><a href="#173542" label="[17:35:42]">&lt;unmatched-paren&gt;</a></span><span class="message">(as in, their source code is)</span></div><div class="line" id="173548"><span class="nick" style="color:#80b1d3"><a href="#173548" label="[17:35:48]">&lt;rickmasters&gt;</a></span><span class="message">My hats off to whoever wrote the mescc.scm C compiler in scheme. someone must have been really motivated.</span></div><div class="line" id="173609"><span class="nick" style="color:#6d2462"><a href="#173609" label="[17:36:09]">&lt;unmatched-paren&gt;</a></span><span class="message">Although QBE doesn't support x86 yet iirc</span></div><div class="line" id="173616"><span class="nick" style="color:#6d2462"><a href="#173616" label="[17:36:16]">&lt;unmatched-paren&gt;</a></span><span class="message">so that would be a significant problem</span></div><div class="line" id="173625"><span class="nick" style="color:#6d2462"><a href="#173625" label="[17:36:25]">&lt;unmatched-paren&gt;</a></span><span class="message">(only x86-64, aarch64, and riscv64)</span></div><div class="line" id="173633"><span class="nick" style="color:#6d2462"><a href="#173633" label="[17:36:33]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: I believe it was janneke :)</span></div><div class="line" id="173744"><span class="nick" style="color:#234e69"><a href="#173744" label="[17:37:44]">&lt;aggi&gt;</a></span><span class="message">i considered tcc an option to verify if it is possible at all to compile kernel/userspace with any alternative compiler/toolchain (not gcc and not llvm)</span></div><div class="line" id="173805"><span class="nick" style="color:#6d2462"><a href="#173805" label="[17:38:05]">&lt;unmatched-paren&gt;</a></span><span class="message">linux uses gnu extensions... extensively</span></div><div class="line" id="173824"><span class="nick" style="color:#6d2462"><a href="#173824" label="[17:38:24]">&lt;unmatched-paren&gt;</a></span><span class="message">It's even had GNU extensions developed specifically for it, apparently :)</span></div><div class="line" id="173829"><span class="nick" style="color:#234e69"><a href="#173829" label="[17:38:29]">&lt;aggi&gt;</a></span><span class="message">from the 600 ebuilds, it is only two remaining which didn't pass with tcc: musl-libc and kernel</span></div><div class="line" id="173845"><span class="nick" style="color:#6d2462"><a href="#173845" label="[17:38:45]">&lt;unmatched-paren&gt;</a></span><span class="message">i doubt kernel will ever build with tcc</span></div><div class="line" id="173852"><span class="nick" style="color:#234e69"><a href="#173852" label="[17:38:52]">&lt;aggi&gt;</a></span><span class="message">and the situation surrounding any libc (uclibc, musl, dietlibc etc.) is far more concerning than i expected</span></div><div class="line" id="173923"><span class="nick" style="color:#234e69"><a href="#173923" label="[17:39:23]">&lt;aggi&gt;</a></span><span class="message">not because of c-compiler/toolchain, because of vendor-specific and gnu-specific ASM</span></div><div class="line" id="173941"><span class="nick" style="color:#6d2462"><a href="#173941" label="[17:39:41]">&lt;unmatched-paren&gt;</a></span><span class="message">Apparently the support for compiling the kernel with Clang was actually a massive project that took a while</span></div><div class="line" id="173944"><span class="nick" style="color:#80b1d3"><a href="#173944" label="[17:39:44]">&lt;rickmasters&gt;</a></span><span class="message">not too familiar with cproc / QBE but maybe its M2 -&gt; cproc/QBE -&gt; tcc, just looking at what aggi has done with tcc it seems like a good target</span></div><div class="line" id="173956"><span class="nick" style="color:#6d2462"><a href="#173956" label="[17:39:56]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: cproc can build GCC 4.7</span></div><div class="line" id="173956"><span class="nick" style="color:#234e69"><a href="#173956" label="[17:39:56]">&lt;aggi&gt;</a></span><span class="message">which means, this is a battle at two frontlines: to repair/re-write most parts of the ASM inside libc, and to implement/extend any assembler</span></div><div class="line" id="174030"><span class="nick" style="color:#234e69"><a href="#174030" label="[17:40:30]">&lt;aggi&gt;</a></span><span class="message">rickmasters: yes, bootstrappeble is focusing on lower level realms which preceed tcc</span></div><div class="line" id="174052"><span class="nick" style="color:#234e69"><a href="#174052" label="[17:40:52]">&lt;aggi&gt;</a></span><span class="message">the closest intersection now is, the ASM issues with tcc and any libc to choose</span></div><div class="line" id="174115"><span class="nick" style="color:#6d2462"><a href="#174115" label="[17:41:15]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: QBE is a small backend compiler that's used by cproc and harec :)</span></div><div class="line" id="174152"><span class="nick" style="color:#6d2462"><a href="#174152" label="[17:41:52]">&lt;unmatched-paren&gt;</a></span><span class="message">cproc is a similarly small c17/c2x compiler</span></div><div class="line" id="174210"><span class="nick" style="color:#6d2462"><a href="#174210" label="[17:42:10]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://c9x.me/compile">https://c9x.me/compile</a>  and <a rel="nofollow" href="https://git.sr.ht/~mcf/cproc">https://git.sr.ht/~mcf/cproc</a> </span></div><div class="line" id="174213"><span class="nick" style="color:#234e69"><a href="#174213" label="[17:42:13]">&lt;aggi&gt;</a></span><span class="message">what tcc had demonstrated &quot;only&quot;: it is possible to replace c-compiler _and_ binutils/elfutils with it</span></div><div class="line" id="174222"><span class="nick" style="color:#234e69"><a href="#174222" label="[17:42:22]">&lt;aggi&gt;</a></span><span class="message">which is good news for any other compiler choice to be made</span></div><div class="line" id="174227"><span class="nick" style="color:#80b1d3"><a href="#174227" label="[17:42:27]">&lt;rickmasters&gt;</a></span><span class="message">i thought bellard built linux with tcc, i'm looking for the link</span></div><div class="line" id="174243"><span class="nick" style="color:#6d2462"><a href="#174243" label="[17:42:43]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: Maybe that was a really old Linux?</span></div><div class="line" id="174314"><span class="nick" style="color:#234e69"><a href="#174314" label="[17:43:14]">&lt;aggi&gt;</a></span><span class="message">i too began hacking linux-5.10 already, and had seen alot of objects emitted from arm64-tcc... just saying</span></div><div class="line" id="174331"><span class="nick" style="color:#234e69"><a href="#174331" label="[17:43:31]">&lt;aggi&gt;</a></span><span class="message">however, the current show-stopper is another one: the ASM issues</span></div><div class="line" id="174334"><span class="nick" style="color:#234e69"><a href="#174334" label="[17:43:34]">&lt;aggi&gt;</a></span><span class="message">with libc</span></div><div class="line" id="174426"><span class="nick" style="color:#234e69"><a href="#174426" label="[17:44:26]">&lt;aggi&gt;</a></span><span class="message">because, tcc too provides LD/AR/AS... and this is what i was excited about too, to replace binutils/elfutils</span></div><div class="line" id="174452"><span class="nick" style="color:#234e69"><a href="#174452" label="[17:44:52]">&lt;aggi&gt;</a></span><span class="message">which too was possible with almost all of the 600 ebuilds i tested with</span></div><div class="line" id="174512"><span class="nick" style="color:#234e69"><a href="#174512" label="[17:45:12]">&lt;aggi&gt;</a></span><span class="message">however... libc and the vendor-specific and gnu-specific ASM syntax... that's the current issue</span></div><div class="line" id="174627"><span class="nick" style="color:#234e69"><a href="#174627" label="[17:46:27]">&lt;aggi&gt;</a></span><span class="message">because, i consider the initial verification with tcc CC/LD/AR successfull already, which too means any other decent implementation (cproc or whatever else) may succeed</span></div><div class="line" id="174654"><span class="nick" style="color:#234e69"><a href="#174654" label="[17:46:54]">&lt;aggi&gt;</a></span><span class="message">instead, i consider the ASM-related issues almost impossible to resolve</span></div><div class="line" id="174954"><span class="nick" style="color:#80b1d3"><a href="#174954" label="[17:49:54]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: yes, it was tccboot building 2.4.26 but looking at the README again I see it was not a proper bootstrap anyway</span></div><div class="line" id="175209"><span class="nick" style="color:#6d2462"><a href="#175209" label="[17:52:09]">&lt;unmatched-paren&gt;</a></span><span class="message">makes sense</span></div><div class="line" id="175213"><span class="nick" style="color:#80b1d3"><a href="#175213" label="[17:52:13]">&lt;rickmasters&gt;</a></span><span class="message">aggi: to clarify, are you saying your tcc package builds require a pre-built libc and all usable libc's use an ASM that only, what, gcc supports?</span></div><div class="line" id="175221"><span class="nick" style="color:#234e69"><a href="#175221" label="[17:52:21]">&lt;aggi&gt;</a></span><span class="message">tccboot/README: &quot;unsupported assembly directives: .rept, .endr, .subsection&quot; ...</span></div><div class="line" id="175247"><span class="nick" style="color:#234e69"><a href="#175247" label="[17:52:47]">&lt;aggi&gt;</a></span><span class="message">rickmasters: i say the C-compiler issue can be considered almost resolved with tcc</span></div><div class="line" id="175314"><span class="nick" style="color:#234e69"><a href="#175314" label="[17:53:14]">&lt;aggi&gt;</a></span><span class="message">and the ASM problem is almost impossible to repair, AS isn't implemented by gcc either, it's the GNU binutils</span></div><div class="line" id="175348"><span class="nick" style="color:#234e69"><a href="#175348" label="[17:53:48]">&lt;aggi&gt;</a></span><span class="message">and _all_ libc variants i checked quickly yesterday (musl, uclibc-ng, dietlibc) are cluttered with alot of ASM which tcc assembler cannot digest</span></div><div class="line" id="175439"><span class="nick" style="color:#234e69"><a href="#175439" label="[17:54:39]">&lt;aggi&gt;</a></span><span class="message">so, it really depends on the project requirements, and allthough i consider tcc-toolchain verification successfull</span></div><div class="line" id="175451"><span class="nick" style="color:#234e69"><a href="#175451" label="[17:54:51]">&lt;aggi&gt;</a></span><span class="message">i consider ASM support a total failure</span></div><div class="line" id="175539"><span class="nick" style="color:#80b1d3"><a href="#175539" label="[17:55:39]">&lt;rickmasters&gt;</a></span><span class="message">aggi: thanks. ASM support is a total failure of what?</span></div><div class="line" id="175548"><span class="nick" style="color:#234e69"><a href="#175548" label="[17:55:48]">&lt;aggi&gt;</a></span><span class="message">this will be very much work, to re-write many ASM parts inside any of the libc, and too re-implementing ASM support with tcc (or any other non-binutils assembler)</span></div><div class="line" id="175616"><span class="nick" style="color:#234e69"><a href="#175616" label="[17:56:16]">&lt;aggi&gt;</a></span><span class="message">rickmasters: i am not aware of any alternative assembler implementation, and the implementation from tcc failed with _all_ libc i quickly tested</span></div><div class="line" id="175635"><span class="nick" style="color:#80b1d3"><a href="#175635" label="[17:56:35]">&lt;rickmasters&gt;</a></span><span class="message">aggi: sorry for the stupid questions: so all those libc variables use GNU Assembler syntax (gas)?</span></div><div class="line" id="175637"><span class="nick" style="color:#234e69"><a href="#175637" label="[17:56:37]">&lt;aggi&gt;</a></span><span class="message">aarch32 asm that was</span></div><div class="line" id="175708"><span class="nick" style="color:#234e69"><a href="#175708" label="[17:57:08]">&lt;aggi&gt;</a></span><span class="message">rickmasters: i am not a compiler developement expert nor ASM hacker, i don't know what type of vendor-specific and gnu-specific extensions it is</span></div><div class="line" id="175718"><span class="nick" style="color:#80b1d3"><a href="#175718" label="[17:57:18]">&lt;rickmasters&gt;</a></span><span class="message">sorry: /variables/variants</span></div><div class="line" id="175755"><span class="nick" style="color:#234e69"><a href="#175755" label="[17:57:55]">&lt;aggi&gt;</a></span><span class="message">i too quickly tested i386-tcc assmbler to digest one or another asm file from the libc ... didn't look promising</span></div><div class="line" id="175849"><span class="nick" style="color:#6d2462"><a href="#175849" label="[17:58:49]">&lt;unmatched-paren&gt;</a></span><span class="message">I don't think there really are any 'GNU assembler extensions'</span></div><div class="line" id="175857"><span class="nick" style="color:#6d2462"><a href="#175857" label="[17:58:57]">&lt;unmatched-paren&gt;</a></span><span class="message">because POSIX doesn't specify assembler syntax</span></div><div class="line" id="175918"><span class="nick" style="color:#80b1d3"><a href="#175918" label="[17:59:18]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: thanks, that was my next question, re: POSIX</span></div><div class="line" id="175923"><span class="nick" style="color:#234e69"><a href="#175923" label="[17:59:23]">&lt;aggi&gt;</a></span><span class="message">my argument is this: it is absolutely OK to rely on binutils; however, i do insist on any alternative to binutils NOT being locked out</span></div><div class="line" id="175931"><span class="nick" style="color:#6d2462"><a href="#175931" label="[17:59:31]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: it couldn't possibly specify it</span></div><div class="line" id="175940"><span class="nick" style="color:#6d2462"><a href="#175940" label="[17:59:40]">&lt;unmatched-paren&gt;</a></span><span class="message">because asm syntax is different between archs</span></div><div class="line" id="180012"><span class="nick" style="color:#6d2462"><a href="#180012" label="[18:00:12]">&lt;unmatched-paren&gt;</a></span><span class="message">I don't think it even specifies `as`?</span></div><div class="line" id="180036"><span class="nick" style="color:#6d2462"><a href="#180036" label="[18:00:36]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/as.html">https://pubs.opengroup.org/onlinepubs/9699919799/utilities/as.html</a>  &lt;- nope, 404</span></div><div class="line" id="180055"><span class="nick" style="color:#234e69"><a href="#180055" label="[18:00:55]">&lt;aggi&gt;</a></span><span class="message">too tcc-assembler (for any architecture it supports) is a neat verification if it is possible, for example, if it passes with tcc CC|LD and AS(!)</span></div><div class="line" id="180202"><span class="nick" style="color:#6d2462"><a href="#180202" label="[18:02:02]">&lt;unmatched-paren&gt;</a></span><span class="message">I suppose archs specify official assembly syntax</span></div><div class="line" id="180213"><span class="nick" style="color:#6d2462"><a href="#180213" label="[18:02:13]">&lt;unmatched-paren&gt;</a></span><span class="message">but they don't specify pseudoinstructions, I think?</span></div><div class="line" id="180225"><span class="nick" style="color:#6d2462"><a href="#180225" label="[18:02:25]">&lt;unmatched-paren&gt;</a></span><span class="message">because they're the same in gas regardless of the arch</span></div><div class="line" id="180241"><span class="nick" style="color:#6d2462"><a href="#180241" label="[18:02:41]">&lt;unmatched-paren&gt;</a></span><span class="message">if they were specified by the arch, they would be wildly different for each one</span></div><div class="line" id="180337"><span class="nick" style="color:#6d2462"><a href="#180337" label="[18:03:37]">&lt;unmatched-paren&gt;</a></span><span class="message">And POSIX can't specify pseudoinstructions because it can't make assumptions about binary formats, I guess</span></div><div class="line" id="180345"><span class="nick" style="color:#6d2462"><a href="#180345" label="[18:03:45]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; The following areas are outside the scope of POSIX.1-2017:</span></div><div class="line" id="180353"><span class="nick" style="color:#6d2462"><a href="#180353" label="[18:03:53]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; + Object or binary code portability</span></div><div class="line" id="180438"><span class="nick" style="color:#6d2462"><a href="#180438" label="[18:04:38]">&lt;unmatched-paren&gt;</a></span><span class="message">The only thing it could possibly specify is the surface format of instructions</span></div><div class="line" id="180441"><span class="nick" style="color:#6d2462"><a href="#180441" label="[18:04:41]">&lt;unmatched-paren&gt;</a></span><span class="message">maybe</span></div><div class="line" id="180447"><span class="nick" style="color:#234e69"><a href="#180447" label="[18:04:47]">&lt;aggi&gt;</a></span><span class="message">and that's why, i will freeze the project, and terminate my work.</span></div><div class="line" id="180449"><span class="nick" style="color:#6d2462"><a href="#180449" label="[18:04:49]">&lt;unmatched-paren&gt;</a></span><span class="message">INSTRUCTION OP1, OP2, ...</span></div><div class="line" id="180505"><span class="nick" style="color:#6d2462"><a href="#180505" label="[18:05:05]">&lt;unmatched-paren&gt;</a></span><span class="message">and pseudoinstructions as .INSTRUCTION OP1, OP2, ...</span></div><div class="line" id="180516"><span class="nick" style="color:#6d2462"><a href="#180516" label="[18:05:16]">&lt;unmatched-paren&gt;</a></span><span class="message">but that doesn't give you much portability</span></div><div class="line" id="180532"><span class="nick" style="color:#234e69"><a href="#180532" label="[18:05:32]">&lt;aggi&gt;</a></span><span class="message">meaning, the gcc47 c-only toolchain system profile with 600 ebuilds is finished, too the tcc-toolchain did pass compile-time and some quick runtime-test inside a chroot</span></div><div class="line" id="180540"><span class="nick" style="color:#234e69"><a href="#180540" label="[18:05:40]">&lt;aggi&gt;</a></span><span class="message">i'll archive this, and quit working on it</span></div><div class="line" id="180559"><span class="nick" style="color:#234e69"><a href="#180559" label="[18:05:59]">&lt;aggi&gt;</a></span><span class="message">simply because, i consider the ASM problem not feasible to resolve with reasonable efforts</span></div><div class="line" id="180601"><span class="nick" style="color:#6d2462"><a href="#180601" label="[18:06:01]">&lt;unmatched-paren&gt;</a></span><span class="message">aggi: a shame but understandable :)</span></div><div class="line" id="180921"><span class="nick" style="color:#80b1d3"><a href="#180921" label="[18:09:21]">&lt;rickmasters&gt;</a></span><span class="message">aggi: what are your assembler requirements? it can't be GNU Assembler, it must start from scratch? And support multiple architectures?</span></div><div class="line" id="181002"><span class="nick" style="color:#6d2462"><a href="#181002" label="[18:10:02]">&lt;unmatched-paren&gt;</a></span><span class="message">or, anything but gas or eu-as?</span></div><div class="line" id="181026"><span class="nick" style="color:#234e69"><a href="#181026" label="[18:10:26]">&lt;aggi&gt;</a></span><span class="message">rickmasters: this is the approach i had taken CC=arm-tcc LD=arm-tcc AR=arm-tcc-ar AS=arm-tcc</span></div><div class="line" id="181059"><span class="nick" style="color:#6d2462"><a href="#181059" label="[18:10:59]">&lt;unmatched-paren&gt;</a></span><span class="message">I suppose since .s is a nonstandard format there's nothing you can really use other than gas</span></div><div class="line" id="181103"><span class="nick" style="color:#234e69"><a href="#181103" label="[18:11:03]">&lt;aggi&gt;</a></span><span class="message">of cause, if there is any suggestion for AS=??? which is NOT binutils (or anything from llvm)</span></div><div class="line" id="181141"><span class="nick" style="color:#6d2462"><a href="#181141" label="[18:11:41]">&lt;unmatched-paren&gt;</a></span><span class="message">I suppose you could reimplement gas</span></div><div class="line" id="181144"><span class="nick" style="color:#234e69"><a href="#181144" label="[18:11:44]">&lt;aggi&gt;</a></span><span class="message">i simply consider AS=arm-tcc the best bet because CC|LD|AR=arm-tcc did pass with the entire _userspace_ already (except kernel and musl-libc)</span></div><div class="line" id="181148"><span class="nick" style="color:#6d2462"><a href="#181148" label="[18:11:48]">&lt;unmatched-paren&gt;</a></span><span class="message">but then you're, well, reimplementing gas</span></div><div class="line" id="181251"><span class="nick" style="color:#6d2462"><a href="#181251" label="[18:12:51]">&lt;unmatched-paren&gt;</a></span><span class="message">Oh, huh, elfutils doesn't even have an as</span></div><div class="line" id="181252"><span class="nick" style="color:#234e69"><a href="#181252" label="[18:12:52]">&lt;aggi&gt;</a></span><span class="message">it is a battle at two frontlines: to re-write ASM inside any of the libc (currently i chose musl-libc), and too extending/re-writing the assembler inside of tcc (or any other alternative, i don't know any)</span></div><div class="line" id="181312"><span class="nick" style="color:#234e69"><a href="#181312" label="[18:13:12]">&lt;aggi&gt;</a></span><span class="message">and, it is a battle at two frontlines, for many different architectures</span></div><div class="line" id="181312"><span class="nick" style="color:#6d2462"><a href="#181312" label="[18:13:12]">&lt;unmatched-paren&gt;</a></span><span class="message">aggi: Is tcc-as supposed to be a subset of gas?</span></div><div class="line" id="181319"><span class="nick" style="color:#234e69"><a href="#181319" label="[18:13:19]">&lt;aggi&gt;</a></span><span class="message">unmatched-paren: i do not know</span></div><div class="line" id="181336"><span class="nick" style="color:#6d2462"><a href="#181336" label="[18:13:36]">&lt;unmatched-paren&gt;</a></span><span class="message">If it isn't, then any attempt to use it was probably doomed from the start</span></div><div class="line" id="181337"><span class="nick" style="color:#234e69"><a href="#181337" label="[18:13:37]">&lt;aggi&gt;</a></span><span class="message">btw. arm64-tcc hasn't got any asm support implemented yet at all to my knowledge</span></div><div class="line" id="181344"><span class="nick" style="color:#6d2462"><a href="#181344" label="[18:13:44]">&lt;unmatched-paren&gt;</a></span><span class="message">as in, use it in place of gas</span></div><div class="line" id="181417"><span class="nick" style="color:#234e69"><a href="#181417" label="[18:14:17]">&lt;aggi&gt;</a></span><span class="message">just as said, i do not object to relying on GNU gas, i object to the fact any alternative is locked-out, such as arm-tcc assembler</span></div><div class="line" id="181558"><span class="nick" style="color:#6d2462"><a href="#181558" label="[18:15:58]">&lt;unmatched-paren&gt;</a></span><span class="message">&gt; TinyCC Assembler supports most of the gas syntax</span></div><div class="line" id="181602"><span class="nick" style="color:#80b1d3"><a href="#181602" label="[18:16:02]">&lt;rickmasters&gt;</a></span><span class="message">aggi: sorry, could you clarify locked-out? do you mean the maintainers won't accept another assembly syntax, like a new psuedo-architecture when one already exists?</span></div><div class="line" id="181604"><span class="nick" style="color:#6d2462"><a href="#181604" label="[18:16:04]">&lt;unmatched-paren&gt;</a></span><span class="message">looks like it is a subset</span></div><div class="line" id="181650"><span class="nick" style="color:#6d2462"><a href="#181650" label="[18:16:50]">&lt;unmatched-paren&gt;</a></span><span class="message">aggi: Strange that the aN and vN notations for arm32 didn't work in tcc-as</span></div><div class="line" id="181701"><span class="nick" style="color:#6d2462"><a href="#181701" label="[18:17:01]">&lt;unmatched-paren&gt;</a></span><span class="message">I'd think they'd be quite common</span></div><div class="line" id="181702"><span class="nick" style="color:#234e69"><a href="#181702" label="[18:17:02]">&lt;aggi&gt;</a></span><span class="message">rickmasters: with locked-out i mean i did not succed with feeding various arm/&lt;aarch32-asm&gt;.s files from musl-libc into arm-tcc assembler</span></div><div class="line" id="181710"><span class="nick" style="color:#234e69"><a href="#181710" label="[18:17:10]">&lt;aggi&gt;</a></span><span class="message">arm-tcc freaked out all over the place</span></div><div class="line" id="181809"><span class="nick" style="color:#234e69"><a href="#181809" label="[18:18:09]">&lt;aggi&gt;</a></span><span class="message">however i am no expert with ASM hacking, i only suspect it is _not_ tinycc assembler at fault</span></div><div class="line" id="181831"><span class="nick" style="color:#234e69"><a href="#181831" label="[18:18:31]">&lt;aggi&gt;</a></span><span class="message">instead, i think various vendors and GNU locked out any alternative such as tcc</span></div><div class="line" id="181858"><span class="nick" style="color:#80b1d3"><a href="#181858" label="[18:18:58]">&lt;rickmasters&gt;</a></span><span class="message">well, it just sounds like arm-tcc picked a different assembler syntax than gas</span></div><div class="line" id="181911"><span class="nick" style="color:#6d2462"><a href="#181911" label="[18:19:11]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: It seems like it's supposed to be a subset</span></div><div class="line" id="181932"><span class="nick" style="color:#234e69"><a href="#181932" label="[18:19:32]">&lt;aggi&gt;</a></span><span class="message">whatever it is, i consider it a total failure</span></div><div class="line" id="181932"><span class="nick" style="color:#6d2462"><a href="#181932" label="[18:19:32]">&lt;unmatched-paren&gt;</a></span><span class="message">but since it's basically impossible to standardize assemblers, it's pretty hard to make them equivalent, i guess</span></div><div class="line" id="182008"><span class="nick" style="color:#6d2462"><a href="#182008" label="[18:20:08]">&lt;unmatched-paren&gt;</a></span><span class="message">aggi: Eh, that's a little harsh. It was never intended for bootstrapping.</span></div><div class="line" id="182028"><span class="nick" style="color:#234e69"><a href="#182028" label="[18:20:28]">&lt;aggi&gt;</a></span><span class="message">i can't drink as much as i wanted to puke over it, sorry.</span></div><div class="line" id="182119"><span class="nick" style="color:#234e69"><a href="#182119" label="[18:21:19]">&lt;aggi&gt;</a></span><span class="message">and even if i wanted to practice ASM hacking, which i want to btw., i wouldn't pick anything related to GNU</span></div><div class="line" id="182143"><span class="nick" style="color:#6d2462"><a href="#182143" label="[18:21:43]">&lt;unmatched-paren&gt;</a></span><span class="message">Well, that's a problem if you want to support GNU syntax, sadly :/</span></div><div class="line" id="182156"><span class="nick" style="color:#234e69"><a href="#182156" label="[18:21:56]">&lt;aggi&gt;</a></span><span class="message">for example, Rodney Zak programming Z80 book, published 40years ago, seems rather stable</span></div><div class="line" id="182220"><span class="nick" style="color:#234e69"><a href="#182220" label="[18:22:20]">&lt;aggi&gt;</a></span><span class="message">didn't read it yet</span></div><div class="line" id="182343"><span class="nick" style="color:#234e69"><a href="#182343" label="[18:23:43]">&lt;aggi&gt;</a></span><span class="message">Gigatron TTL offers some documentation for their native assembly language and gigatron control language, another candidate</span></div><div class="line" id="182404"><span class="nick" style="color:#80b1d3"><a href="#182404" label="[18:24:04]">&lt;rickmasters&gt;</a></span><span class="message">not sure if stikonas is around, but it looks like live-bootstrap compiles musl with tcc so I'm wondering how bad can it be?</span></div><div class="line" id="182438"><span class="nick" style="color:#80b1d3"><a href="#182438" label="[18:24:38]">&lt;rickmasters&gt;</a></span><span class="message">I believe he mentioned that recently, but I don't remember the details</span></div><div class="line" id="182527"><span class="nick" style="color:#6d2462"><a href="#182527" label="[18:25:27]">&lt;unmatched-paren&gt;</a></span><span class="message">Looks like they apply a few patches to TCC</span></div><div class="line" id="182544"><span class="nick" style="color:#6d2462"><a href="#182544" label="[18:25:44]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/tree/master/sysa/musl-1.1.24/patches">https://github.com/fosslinux/live-bootstrap/tree/master/sysa/musl-1.1.24/patches</a> </span></div><div class="line" id="182546"><span class="nick" style="color:#234e69"><a href="#182546" label="[18:25:46]">&lt;aggi&gt;</a></span><span class="message">and i chose aarch32, not x86/64</span></div><div class="line" id="182637"><span class="nick" style="color:#6c3d55"><a href="#182637" label="[18:26:37]">&lt;stikonas&gt;</a></span><span class="message">yes, I'm kind of around</span></div><div class="line" id="182650"><span class="nick" style="color:#6c3d55"><a href="#182650" label="[18:26:50]">&lt;stikonas&gt;</a></span><span class="message">it wasn't too bad building musl with tcc</span></div><div class="line" id="182656"><span class="nick" style="color:#6c3d55"><a href="#182656" label="[18:26:56]">&lt;stikonas&gt;</a></span><span class="message">we had to apply a few patches</span></div><div class="line" id="182705"><span class="nick" style="color:#6d2462"><a href="#182705" label="[18:27:05]">&lt;unmatched-paren&gt;</a></span><span class="message">s/patches to TCC/patches to musl/</span></div><div class="line" id="182723"><span class="nick" style="color:#6c3d55"><a href="#182723" label="[18:27:23]">&lt;stikonas&gt;</a></span><span class="message">musl</span></div><div class="line" id="182727"><span class="nick" style="color:#6c3d55"><a href="#182727" label="[18:27:27]">&lt;stikonas&gt;</a></span><span class="message">or maybe both</span></div><div class="line" id="182730"><span class="nick" style="color:#6c3d55"><a href="#182730" label="[18:27:30]">&lt;stikonas&gt;</a></span><span class="message">but definitely musl</span></div><div class="line" id="182739"><span class="nick" style="color:#6c3d55"><a href="#182739" label="[18:27:39]">&lt;stikonas&gt;</a></span><span class="message">well, we can check regarding patches to tcc</span></div><div class="line" id="182934"><span class="nick" style="color:#234e69"><a href="#182934" label="[18:29:34]">&lt;aggi&gt;</a></span><span class="message">i386</span></div><div class="line" id="183014"><span class="nick" style="color:#6c3d55"><a href="#183014" label="[18:30:14]">&lt;stikonas&gt;</a></span><span class="message">yes, but musl is not that assembly heavy</span></div><div class="line" id="183044"><span class="nick" style="color:#6c3d55"><a href="#183044" label="[18:30:44]">&lt;stikonas&gt;</a></span><span class="message">I had to patch i386 assembly too</span></div><div class="line" id="183059"><span class="nick" style="color:#234e69"><a href="#183059" label="[18:30:59]">&lt;aggi&gt;</a></span><span class="message">i did a quick find/grep '\.s' inside src-dir only, and decided to quit, aarch32, it's beyond my abilities</span></div><div class="line" id="183114"><span class="nick" style="color:#234e69"><a href="#183114" label="[18:31:14]">&lt;aggi&gt;</a></span><span class="message">and even if i wanted to dig inside asm hacking, i won't do it with aarch32</span></div><div class="line" id="183121"><span class="nick" style="color:#6c3d55"><a href="#183121" label="[18:31:21]">&lt;stikonas&gt;</a></span><span class="message">and yes, I patched both tcc and musl</span></div><div class="line" id="183139"><span class="nick" style="color:#6c3d55"><a href="#183139" label="[18:31:39]">&lt;stikonas&gt;</a></span><span class="message">and some patches were quite ugly</span></div><div class="line" id="183147"><span class="nick" style="color:#6c3d55"><a href="#183147" label="[18:31:47]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.27/patches/ignore-duplicate-symbols.patch">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.27/patches/ignore-duplicate-symbols.patch</a> </span></div><div class="line" id="183225"><span class="nick" style="color:#6c3d55"><a href="#183225" label="[18:32:25]">&lt;stikonas&gt;</a></span><span class="message">tcc weak symbol support is quite bad, so had to use ugly hack</span></div><div class="line" id="183405"><span class="nick" style="color:#6c3d55"><a href="#183405" label="[18:34:05]">&lt;stikonas&gt;</a></span><span class="message">and some x86 assembly support is also not good in tcc, e.g. jecxz was not supported <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/musl-1.1.24/patches/sigsetjmp.patch">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/musl-1.1.24/patches/sigsetjmp.patch</a> </span></div><div class="line" id="183507"><span class="nick" style="color:#6d2462"><a href="#183507" label="[18:35:07]">&lt;unmatched-paren&gt;</a></span><span class="message">how about hacking qbe to generate M1?</span></div><div class="line" id="183523"><span class="nick" style="color:#6d2462"><a href="#183523" label="[18:35:23]">&lt;unmatched-paren&gt;</a></span><span class="message">and then simplify it (remove optimizations, etc)</span></div><div class="line" id="183534"><span class="nick" style="color:#6d2462"><a href="#183534" label="[18:35:34]">&lt;unmatched-paren&gt;</a></span><span class="message">and make it build with tcc + meslibc</span></div><div class="line" id="183614"><span class="nick" style="color:#6d2462"><a href="#183614" label="[18:36:14]">&lt;unmatched-paren&gt;</a></span><span class="message">...what am I going on about? This won't work around this problem...</span></div><div class="line" id="183632"><span class="nick" style="color:#6d2462"><a href="#183632" label="[18:36:32]">&lt;unmatched-paren&gt;</a></span><span class="message">We need to build musl at some point</span></div><div class="line" id="183633"><span class="nick" style="color:#80b1d3"><a href="#183633" label="[18:36:33]">&lt;rickmasters&gt;</a></span><span class="message">yeah, its the assembly in the libcs</span></div><div class="line" id="183644"><span class="nick" style="color:#6d2462"><a href="#183644" label="[18:36:44]">&lt;unmatched-paren&gt;</a></span><span class="message">I had a brainfart :)</span></div><div class="line" id="183803"><span class="nick" style="color:#80b1d3"><a href="#183803" label="[18:38:03]">&lt;rickmasters&gt;</a></span><span class="message">looks like aggi needs tcc to handle the arm 32 bit assembly in musl?</span></div><div class="line" id="183810"><span class="nick" style="color:#6d2462"><a href="#183810" label="[18:38:10]">&lt;unmatched-paren&gt;</a></span><span class="message">ye</span></div><div class="line" id="183835"><span class="nick" style="color:#234e69"><a href="#183835" label="[18:38:35]">&lt;aggi&gt;</a></span><span class="message">nope, just as said, i'll freeze the project, and i will terminate. this decision is made.</span></div><div class="line" id="183906"><span class="nick" style="color:#6d2462"><a href="#183906" label="[18:39:06]">&lt;unmatched-paren&gt;</a></span><span class="message">what if a solution is eventually found (by someone else)?</span></div><div class="line" id="183935"><span class="nick" style="color:#234e69"><a href="#183935" label="[18:39:35]">&lt;aggi&gt;</a></span><span class="message">even then, because integrating tcc-toolchain revealed that much dirt, i had not seen before</span></div><div class="line" id="184024"><span class="nick" style="color:#234e69"><a href="#184024" label="[18:40:24]">&lt;aggi&gt;</a></span><span class="message">and then, i had to migrate the packaging from portage to another package manager... alot of work</span></div><div class="line" id="184032"><span class="nick" style="color:#234e69"><a href="#184032" label="[18:40:32]">&lt;aggi&gt;</a></span><span class="message">it's feasible, but _not_ worth the effort anymore</span></div><div class="line" id="184032"><span class="nick" style="color:#80b1d3"><a href="#184032" label="[18:40:32]">&lt;rickmasters&gt;</a></span><span class="message">yeah, its not a tcc world, maybe that closed the book for you</span></div><div class="line" id="184058"><span class="nick" style="color:#234e69"><a href="#184058" label="[18:40:58]">&lt;aggi&gt;</a></span><span class="message">no, tcc-toolchain was only a verification, which, just as said, succeeded.</span></div><div class="line" id="184125"><span class="nick" style="color:#234e69"><a href="#184125" label="[18:41:25]">&lt;aggi&gt;</a></span><span class="message">and i had been working 70hours/week for almost a year</span></div><div class="line" id="184214"><span class="nick" style="color:#234e69"><a href="#184214" label="[18:42:14]">&lt;aggi&gt;</a></span><span class="message">of cause, i'll not delete what i got here, i'll freeze it, and terminate.</span></div><div class="line" id="184253"><span class="nick" style="color:#234e69"><a href="#184253" label="[18:42:53]">&lt;aggi&gt;</a></span><span class="message">the moment when, i opened developer.arm.com with w3m browser, to gather documentation there...</span></div><div class="line" id="184258"><span class="nick" style="color:#234e69"><a href="#184258" label="[18:42:58]">&lt;aggi&gt;</a></span><span class="message">enough.</span></div><div class="line" id="184318"><span class="nick" style="color:#80b1d3"><a href="#184318" label="[18:43:18]">&lt;rickmasters&gt;</a></span><span class="message">so its the GNU world and other entrenched solutions that you don't agree with that would be too much work to continue?</span></div><div class="line" id="184409"><span class="nick" style="color:#234e69"><a href="#184409" label="[18:44:09]">&lt;aggi&gt;</a></span><span class="message">it's not worth the effort anymore</span></div><div class="line" id="184437"><span class="nick" style="color:#234e69"><a href="#184437" label="[18:44:37]">&lt;aggi&gt;</a></span><span class="message">i already had to block at gcc47, which is 10years old, doesn't support aarch64, and isn't sufficiently stabilized either imo</span></div><div class="line" id="184450"><span class="nick" style="color:#234e69"><a href="#184450" label="[18:44:50]">&lt;aggi&gt;</a></span><span class="message">and blocking perl to a version from year 2005...</span></div><div class="line" id="184504"><span class="nick" style="color:#234e69"><a href="#184504" label="[18:45:04]">&lt;aggi&gt;</a></span><span class="message">i'll just freeze. and quit.</span></div><div class="line" id="184610"><span class="nick" style="color:#80b1d3"><a href="#184610" label="[18:46:10]">&lt;rickmasters&gt;</a></span><span class="message">I hope you understand that I am just trying to understand, as someone who hasn't followed closely, what you're ideal end game was and how you got here...</span></div><div class="line" id="184704"><span class="nick" style="color:#80b1d3"><a href="#184704" label="[18:47:04]">&lt;rickmasters&gt;</a></span><span class="message">it sounds like you wanted an arm 32 bit linux distro with common packages and less GNU stuff and other stuff like not portage and so fort?</span></div><div class="line" id="184800"><span class="nick" style="color:#234e69"><a href="#184800" label="[18:48:00]">&lt;aggi&gt;</a></span><span class="message">how should i explain... i could happily live with a Ti92 calculator, if it was opensource with schematics and source-code available</span></div><div class="line" id="185020"><span class="nick" style="color:#234e69"><a href="#185020" label="[18:50:20]">&lt;aggi&gt;</a></span><span class="message">and i think, precious development man-power shouldn't be wasted</span></div><div class="line" id="185050"><span class="nick" style="color:#234e69"><a href="#185050" label="[18:50:50]">&lt;aggi&gt;</a></span><span class="message">for example, aarch32, just recently there was rumors ARMv9 will abandon aarch32 compatibility</span></div><div class="line" id="185151"><span class="nick" style="color:#234e69"><a href="#185151" label="[18:51:51]">&lt;aggi&gt;</a></span><span class="message">i patched linux-5.10 already to pass with gcc47, meanwhile linux-5.15 announced they had bumped compiler-version requirements, AGAIN, who knows what they did</span></div><div class="line" id="185154"><span class="nick" style="color:#234e69"><a href="#185154" label="[18:51:54]">&lt;aggi&gt;</a></span><span class="message">i don't care anymore</span></div><div class="line" id="185238"><span class="nick" style="color:#234e69"><a href="#185238" label="[18:52:38]">&lt;aggi&gt;</a></span><span class="message">and i am not willing to switch to ia32/amd64 either... the BIOS/UEFI/firmware situation there is unacceptable</span></div><div class="line" id="185331"><span class="nick" style="color:#80b1d3"><a href="#185331" label="[18:53:31]">&lt;rickmasters&gt;</a></span><span class="message">were you working towards a reasonably stable and technically sensible software platform that you could work on top of and invest development in? ... just trying to understand</span></div><div class="line" id="185628"><span class="nick" style="color:#234e69"><a href="#185628" label="[18:56:28]">&lt;aggi&gt;</a></span><span class="message">yes. however certainly i am not the only one who did.</span></div><div class="line" id="185709"><span class="nick" style="color:#80b1d3"><a href="#185709" label="[18:57:09]">&lt;rickmasters&gt;</a></span><span class="message">i mean, i think that you have some of the same principles and goals that bring people here - trying to rebuild a more sensible path of build tools</span></div><div class="line" id="185734"><span class="nick" style="color:#80b1d3"><a href="#185734" label="[18:57:34]">&lt;rickmasters&gt;</a></span><span class="message">... even if it means starting over in many ways</span></div><div class="line" id="190030"><span class="nick" style="color:#80b1d3"><a href="#190030" label="[19:00:30]">&lt;rickmasters&gt;</a></span><span class="message">but the monster is 70 years old or so, glommed together over millions of man years. its a long game and every contribution helps so thank you for deciding to archive your work</span></div><div class="line" id="190054"><span class="nick" style="color:#80b1d3"><a href="#190054" label="[19:00:54]">&lt;rickmasters&gt;</a></span><span class="message">(i mean millions of man hours)</span></div><div class="line" id="190127"><span class="nick" style="color:#234e69"><a href="#190127" label="[19:01:27]">&lt;aggi&gt;</a></span><span class="message">the system-integration with gentoo-tooling is relatively clean, and reproducible, with log-files for almost everything</span></div><div class="line" id="190222"><span class="nick" style="color:#234e69"><a href="#190222" label="[19:02:22]">&lt;aggi&gt;</a></span><span class="message">the gcc47 c-only toolchain profile can compile/cross-compile/gcc-upgrade into any direction desired</span></div><div class="line" id="190246"><span class="nick" style="color:#234e69"><a href="#190246" label="[19:02:46]">&lt;aggi&gt;</a></span><span class="message">the tcc-toolchain build doesn't contain a package manager anymore, because i decided to drop python with tcc-toolchain</span></div><div class="line" id="190314"><span class="nick" style="color:#234e69"><a href="#190314" label="[19:03:14]">&lt;aggi&gt;</a></span><span class="message">anyway, 70hours/week, more than 1year</span></div><div class="line" id="190748"><span class="nick" style="color:#80b1d3"><a href="#190748" label="[19:07:48]">&lt;rickmasters&gt;</a></span><span class="message">so do you call the project you have been working on &quot;tcc-toolchain&quot; and runs from a set of gentoo derived tools (with portage removed)?</span></div><div class="line" id="190757"><span class="nick" style="color:#80b1d3"><a href="#190757" label="[19:07:57]">&lt;rickmasters&gt;</a></span><span class="message">Is this online anywhere yet?</span></div><div class="line" id="191132"><span class="nick" style="color:#234e69"><a href="#191132" label="[19:11:32]">&lt;aggi&gt;</a></span><span class="message">it's several aspects</span></div><div class="line" id="191204"><span class="nick" style="color:#234e69"><a href="#191204" label="[19:12:04]">&lt;aggi&gt;</a></span><span class="message">i began with sanitizing the entire profile with full removal of all c++ dependencies</span></div><div class="line" id="191238"><span class="nick" style="color:#234e69"><a href="#191238" label="[19:12:38]">&lt;aggi&gt;</a></span><span class="message">re-integrated gcc47/binutils-2.22 toolchain, stabilized the compilation/cross-compilation/upgrade paths</span></div><div class="line" id="191342"><span class="nick" style="color:#234e69"><a href="#191342" label="[19:13:42]">&lt;aggi&gt;</a></span><span class="message">and with this setup, i tested tcc-toolchain integration recently</span></div><div class="line" id="191422"><span class="nick" style="color:#234e69"><a href="#191422" label="[19:14:22]">&lt;aggi&gt;</a></span><span class="message">except for musl-libc it seems possible to compile more than 500 ebuilds (which contain almost everything desireable with a linux system)</span></div><div class="line" id="191550"><span class="nick" style="color:#234e69"><a href="#191550" label="[19:15:50]">&lt;aggi&gt;</a></span><span class="message">and this is what i'll freeze</span></div><div class="line" id="191634"><span class="nick" style="color:#234e69"><a href="#191634" label="[19:16:34]">&lt;aggi&gt;</a></span><span class="message">tcc-toolchain, another discussion, because although 99.9% of builds suceeded, it is those 0.01% remaining which conceptually contradict the whole idea</span></div><div class="line" id="191653"><span class="nick" style="color:#234e69"><a href="#191653" label="[19:16:53]">&lt;aggi&gt;</a></span><span class="message">to remove GNU-toolchain (gcc,binutils)</span></div><div class="line" id="191717"><span class="nick" style="color:#234e69"><a href="#191717" label="[19:17:17]">&lt;aggi&gt;</a></span><span class="message">and it's two discussions remaining: linux kernel and libc</span></div><div class="line" id="191845"><span class="nick" style="color:#80b1d3"><a href="#191845" label="[19:18:45]">&lt;rickmasters&gt;</a></span><span class="message">thanks, it sounds like a really worthwhile effort, even if it didn't get to 100%</span></div><div class="line" id="191906"><span class="nick" style="color:#234e69"><a href="#191906" label="[19:19:06]">&lt;aggi&gt;</a></span><span class="message">effectively, it's 0%</span></div><div class="line" id="191934"><span class="nick" style="color:#234e69"><a href="#191934" label="[19:19:34]">&lt;aggi&gt;</a></span><span class="message">because i consider the situation surrounding ASM, a failure</span></div><div class="line" id="192655"><span class="nick" style="color:#6c3d55"><a href="#192655" label="[19:26:55]">&lt;stikonas&gt;</a></span><span class="message">you can fix assembler</span></div><div class="line" id="192708"><span class="nick" style="color:#6c3d55"><a href="#192708" label="[19:27:08]">&lt;stikonas&gt;</a></span><span class="message">assemblers are fairly easy, M0 is 2 KiB binary</span></div><div class="line" id="192805"><span class="nick" style="color:#234e69"><a href="#192805" label="[19:28:05]">&lt;aggi&gt;</a></span><span class="message">ok. if you accept the premise i had to follow with aarch32, it's not worth the effort anymore</span></div><div class="line" id="192823"><span class="nick" style="color:#234e69"><a href="#192823" label="[19:28:23]">&lt;aggi&gt;</a></span><span class="message">for other, practical reasons: which is long-term reliable hardware supply for example</span></div><div class="line" id="192846"><span class="nick" style="color:#234e69"><a href="#192846" label="[19:28:46]">&lt;aggi&gt;</a></span><span class="message">currently i am using some rock64 SBC, which require an aarch64 uboot/kernel, on top of which i worked with an aarch32 userspace</span></div><div class="line" id="192911"><span class="nick" style="color:#234e69"><a href="#192911" label="[19:29:11]">&lt;aggi&gt;</a></span><span class="message">i don't want to discuss all details of this scenario, nonetheless i fear aarch32 is a dead-end, to invest years of work into</span></div><div class="line" id="192938"><span class="nick" style="color:#234e69"><a href="#192938" label="[19:29:38]">&lt;aggi&gt;</a></span><span class="message">one hint: ARMv9 rumors were they decided to drop aarch32 compat... and tcc hasn't got arm64 assembly support</span></div><div class="line" id="193015"><span class="nick" style="color:#234e69"><a href="#193015" label="[19:30:15]">&lt;aggi&gt;</a></span><span class="message">meaning, even if i invested another year of work, it's not worth the effort anymore</span></div><div class="line" id="193112"><span class="nick" style="color:#234e69"><a href="#193112" label="[19:31:12]">&lt;aggi&gt;</a></span><span class="message">and i consider the whole BIOS/UEFI/firmware situation in ia32/amd64 territory unacceptable</span></div><div class="line" id="193201"><span class="nick" style="color:#234e69"><a href="#193201" label="[19:32:01]">&lt;aggi&gt;</a></span><span class="message">besides those two, ARM/64 and X86/64 i am not aware of any other practicually useful platform to work with</span></div><div class="line" id="193234"><span class="nick" style="color:#234e69"><a href="#193234" label="[19:32:34]">&lt;aggi&gt;</a></span><span class="message">maybe SPARC/64 (SPARC leon was chosen by European Space Agency), however, tcc hasn't got SPARC support iirc</span></div><div class="line" id="193501"><span class="nick" style="color:#234e69"><a href="#193501" label="[19:35:01]">&lt;aggi&gt;</a></span><span class="message">reminds me someone mentioned Pineapple One (RISC-V), i would be cautious, since i am not aware gcc47 supported RISC-V</span></div><div class="line" id="193525"><span class="nick" style="color:#80b1d3"><a href="#193525" label="[19:35:25]">&lt;rickmasters&gt;</a></span><span class="message">Can an arm64 platform run aarch32 executables?</span></div><div class="line" id="193530"><span class="nick" style="color:#234e69"><a href="#193530" label="[19:35:30]">&lt;aggi&gt;</a></span><span class="message">and i fear, RISC-V will require recent linux-kernel versions, those kernel versions which aggressively bumped compiler versin requirements</span></div><div class="line" id="193600"><span class="nick" style="color:#234e69"><a href="#193600" label="[19:36:00]">&lt;aggi&gt;</a></span><span class="message">rickmasters: armv8a can, rumors were armv9 will drop aarch32 compat</span></div><div class="line" id="193640"><span class="nick" style="color:#234e69"><a href="#193640" label="[19:36:40]">&lt;aggi&gt;</a></span><span class="message">which isn't an issue yet, not yet, however in a few years it will be, if you had to dumpster dive for some armv8 SBC</span></div><div class="line" id="193655"><span class="nick" style="color:#234e69"><a href="#193655" label="[19:36:55]">&lt;aggi&gt;</a></span><span class="message">ARMv7 SBC are almost gone already</span></div><div class="line" id="193705"><span class="nick" style="color:#d9d9d9"><a href="#193705" label="[19:37:05]">&lt;vagrantc&gt;</a></span><span class="message">rickmasters: some can, some can't, it's hardware-specific</span></div><div class="line" id="193725"><span class="nick" style="color:#d9d9d9"><a href="#193725" label="[19:37:25]">&lt;vagrantc&gt;</a></span><span class="message">rickmasters: 32-bit support is optional in armv8, not all processors support it</span></div><div class="line" id="193743"><span class="nick" style="color:#d9d9d9"><a href="#193743" label="[19:37:43]">&lt;vagrantc&gt;</a></span><span class="message">(technically, there are 32-bit armv8, but that's pretty much just theoretical)</span></div><div class="line" id="193747"><span class="nick" style="color:#6d2462"><a href="#193747" label="[19:37:47]">&lt;unmatched-paren&gt;</a></span><span class="message">Wouldn't sticking to an old Linux that requires a less recent gcc/clang be a terrible idea for security, anyway?</span></div><div class="line" id="193815"><span class="nick" style="color:#234e69"><a href="#193815" label="[19:38:15]">&lt;aggi&gt;</a></span><span class="message">no. but with older kernel versions you'll be locked out with hardware support quickly</span></div><div class="line" id="193826"><span class="nick" style="color:#234e69"><a href="#193826" label="[19:38:26]">&lt;aggi&gt;</a></span><span class="message">then you got a kernel, but no hardware anymore</span></div><div class="line" id="193907"><span class="nick" style="color:#234e69"><a href="#193907" label="[19:39:07]">&lt;aggi&gt;</a></span><span class="message">or, in case of Pineapple One (RISC-V), chances are you'll need a most recent kernel-version which cannot be compiled with an alternative compiler such as tcc</span></div><div class="line" id="193933"><span class="nick" style="color:#234e69"><a href="#193933" label="[19:39:33]">&lt;aggi&gt;</a></span><span class="message">to compiler kernel-5.10 with gcc47 was some dirty hackjob already, and linux bumped compiler-version requirements since then AGAIN</span></div><div class="line" id="193937"><span class="nick" style="color:#234e69"><a href="#193937" label="[19:39:37]">&lt;aggi&gt;</a></span><span class="message">*compile</span></div><div class="line" id="193947"><span class="nick" style="color:#234e69"><a href="#193947" label="[19:39:47]">&lt;aggi&gt;</a></span><span class="message">this is what i mean with locked-out</span></div><div class="line" id="194056"><span class="nick" style="color:#234e69"><a href="#194056" label="[19:40:56]">&lt;aggi&gt;</a></span><span class="message">with ia32 i would accept the following, if an ia32 system could be deployed to FPGA, including USB1 and VGA and ethernet, and used as development system</span></div><div class="line" id="194120"><span class="nick" style="color:#234e69"><a href="#194120" label="[19:41:20]">&lt;aggi&gt;</a></span><span class="message">the ia32 FPGA deployments i had seen seemd inconclusive with their specs (USB1? ethernet? i wouldn't want to work without this)</span></div><div class="line" id="194134"><span class="nick" style="color:#80b1d3"><a href="#194134" label="[19:41:34]">&lt;rickmasters&gt;</a></span><span class="message">I feel for you aggi. I'm currently developing in x86 32-bit with BIOS dependency but I tell myself that at least qemu will support that long enough</span></div><div class="line" id="194135"><span class="nick" style="color:#234e69"><a href="#194135" label="[19:41:35]">&lt;aggi&gt;</a></span><span class="message">and those ia32 FPGA are _slow_</span></div><div class="line" id="194155"><span class="nick" style="color:#80b1d3"><a href="#194155" label="[19:41:55]">&lt;rickmasters&gt;</a></span><span class="message">the qemu BIOS is SeaBIOS which is open source</span></div><div class="line" id="194231"><span class="nick" style="color:#234e69"><a href="#194231" label="[19:42:31]">&lt;aggi&gt;</a></span><span class="message">and yes, the ia32 FPGA deployments used opensource BIOS (seabios, bochs or something)...</span></div><div class="line" id="194253"><span class="nick" style="color:#80b1d3"><a href="#194253" label="[19:42:53]">&lt;rickmasters&gt;</a></span><span class="message">its a compromise because BIOS may disappear in my lifetime but it works for now</span></div><div class="line" id="194306"><span class="nick" style="color:#bc80bd"><a href="#194306" label="[19:43:06]">&lt;nckx&gt;</a></span><span class="message">janneke: Yo!  Did you ever get a patch for &lt;<a rel="nofollow" href="https://issues.guix.gnu.org/41264#6">https://issues.guix.gnu.org/41264#6</a>&gt;?   It seems rather important.</span></div><div class="line" id="194523"><span class="nick" style="color:#80b1d3"><a href="#194523" label="[19:45:23]">&lt;rickmasters&gt;</a></span><span class="message">if intel/AMD started talking about dropping 32 bit support I'd have to seriously question my efforts</span></div><div class="line" id="194617"><span class="nick" style="color:#6d2462"><a href="#194617" label="[19:46:17]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: I doubt that will happen until maybe 2030. There are probably still far, far too many 32-bit only windows applications, and they don't want to upset Lord Microsoft.</span></div><div class="line" id="194617"><span class="nick" style="color:#234e69"><a href="#194617" label="[19:46:17]">&lt;aggi&gt;</a></span><span class="message">i question mine because of the BIOS/UEFI situation with x86/amd64</span></div><div class="line" id="194659"><span class="nick" style="color:#80b1d3"><a href="#194659" label="[19:46:59]">&lt;rickmasters&gt;</a></span><span class="message">how does aarch32 differ in terms of a BIOS/UEFI interface?</span></div><div class="line" id="194734"><span class="nick" style="color:#234e69"><a href="#194734" label="[19:47:34]">&lt;aggi&gt;</a></span><span class="message">well, u-boot loader is opensource/free, too the ATF sources are available, at least</span></div><div class="line" id="194827"><span class="nick" style="color:#6d2462"><a href="#194827" label="[19:48:27]">&lt;unmatched-paren&gt;</a></span><span class="message">i think there's a uefi fork of u-boot</span></div><div class="line" id="194830"><span class="nick" style="color:#6d2462"><a href="#194830" label="[19:48:30]">&lt;unmatched-paren&gt;</a></span><span class="message">tow-boot</span></div><div class="line" id="194849"><span class="nick" style="color:#234e69"><a href="#194849" label="[19:48:49]">&lt;aggi&gt;</a></span><span class="message">i wont accept any UEFI at all anywhere</span></div><div class="line" id="194926"><span class="nick" style="color:#234e69"><a href="#194926" label="[19:49:26]">&lt;aggi&gt;</a></span><span class="message">hence i had to slightly re-work the firmware layout and boot-procedure here, just a side note, it's still possible to wipe all UEFI</span></div><div class="line" id="195006"><span class="nick" style="color:#2e2a4a"><a href="#195006" label="[19:50:06]">&lt;theruran&gt;</a></span><span class="message">aggi: ekaitz got RISC-V 64-bit support into GCC 4.6.4 <a rel="nofollow" href="https://ekaitz.elenq.tech/bootstrapGcc3.html">https://ekaitz.elenq.tech/bootstrapGcc3.html</a> </span></div><div class="line" id="195007"><span class="nick" style="color:#234e69"><a href="#195007" label="[19:50:07]">&lt;aggi&gt;</a></span><span class="message">on x86/amd64 i blocked at an older syslinux version, which hasn't got any UEFI support, for the sake of it</span></div><div class="line" id="195101"><span class="nick" style="color:#234e69"><a href="#195101" label="[19:51:01]">&lt;aggi&gt;</a></span><span class="message">theruran: good to know. thanks. by coincidence would you know which kernel-versions supported the Pineapple One RISC-V system (or any other recent RISC-V SBC)?</span></div><div class="line" id="195117"><span class="nick" style="color:#2e2a4a"><a href="#195117" label="[19:51:17]">&lt;theruran&gt;</a></span><span class="message">aggi: I don't know, sorry.</span></div><div class="line" id="195147"><span class="nick" style="color:#80b1d3"><a href="#195147" label="[19:51:47]">&lt;rickmasters&gt;</a></span><span class="message">aggi: what part of UEFI (and BIOS) is not acceptable? I only ask because I can think of many</span></div><div class="line" id="195205"><span class="nick" style="color:#234e69"><a href="#195205" label="[19:52:05]">&lt;aggi&gt;</a></span><span class="message">rickmasters: short answer, all of it isn't acceptable.</span></div><div class="line" id="195217"><span class="nick" style="color:#234e69"><a href="#195217" label="[19:52:17]">&lt;aggi&gt;</a></span><span class="message">with the exception of seabios/bochs</span></div><div class="line" id="201416"><span class="nick" style="color:#6c3d55"><a href="#201416" label="[20:14:16]">&lt;stikonas&gt;</a></span><span class="message">how is seabios different from tianocore?</span></div><div class="line" id="201426"><span class="nick" style="color:#6c3d55"><a href="#201426" label="[20:14:26]">&lt;stikonas&gt;</a></span><span class="message">if one is acceptable, why the other isn't?</span></div><div class="line" id="201442"><span class="nick" style="color:#6c3d55"><a href="#201442" label="[20:14:42]">&lt;stikonas&gt;</a></span><span class="message">yes, API that they implement are different</span></div><div class="line" id="201507"><span class="nick" style="color:#234e69"><a href="#201507" label="[20:15:07]">&lt;aggi&gt;</a></span><span class="message">i question the entire design-rationale of UEFI, in principle</span></div><div class="line" id="201530"><span class="nick" style="color:#6c3d55"><a href="#201530" label="[20:15:30]">&lt;stikonas&gt;</a></span><span class="message">well, design yes, it's based on windows</span></div><div class="line" id="201532"><span class="nick" style="color:#6c3d55"><a href="#201532" label="[20:15:32]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="201550"><span class="nick" style="color:#6c3d55"><a href="#201550" label="[20:15:50]">&lt;stikonas&gt;</a></span><span class="message">but in principle it does the same stuff as BIOS, does input/ouput</span></div><div class="line" id="201557"><span class="nick" style="color:#234e69"><a href="#201557" label="[20:15:57]">&lt;aggi&gt;</a></span><span class="message">one hint: BIOS image size fits into who knows, 64KiB of RAM? how much ROM/RAM does a UEFI firmware need?</span></div><div class="line" id="201558"><span class="nick" style="color:#6c3d55"><a href="#201558" label="[20:15:58]">&lt;stikonas&gt;</a></span><span class="message">can load other stuff</span></div><div class="line" id="201612"><span class="nick" style="color:#6c3d55"><a href="#201612" label="[20:16:12]">&lt;stikonas&gt;</a></span><span class="message">well yes, I agree that UEFI is much bigger</span></div><div class="line" id="201633"><span class="nick" style="color:#234e69"><a href="#201633" label="[20:16:33]">&lt;aggi&gt;</a></span><span class="message">furthremore, UEFI didn't abandon, and shouldn't abandon legacy BIOS anyway</span></div><div class="line" id="201635"><span class="nick" style="color:#6c3d55"><a href="#201635" label="[20:16:35]">&lt;stikonas&gt;</a></span><span class="message">but it does more stuff</span></div><div class="line" id="201647"><span class="nick" style="color:#234e69"><a href="#201647" label="[20:16:47]">&lt;aggi&gt;</a></span><span class="message">furthremore, legacy BIOS, with ACPI and related, was bad enough already</span></div><div class="line" id="201713"><span class="nick" style="color:#234e69"><a href="#201713" label="[20:17:13]">&lt;aggi&gt;</a></span><span class="message">side note: for a while i hacked inside coreboot to repair support for some Phenom2 board... never again.</span></div><div class="line" id="201733"><span class="nick" style="color:#6c3d55"><a href="#201733" label="[20:17:33]">&lt;stikonas&gt;</a></span><span class="message">well, coreboot is a layer under BIOS/UEFI</span></div><div class="line" id="201743"><span class="nick" style="color:#6c3d55"><a href="#201743" label="[20:17:43]">&lt;stikonas&gt;</a></span><span class="message">it does hw initailization</span></div><div class="line" id="201749"><span class="nick" style="color:#6c3d55"><a href="#201749" label="[20:17:49]">&lt;stikonas&gt;</a></span><span class="message">so closer to U-boot TPL or SPL</span></div><div class="line" id="201804"><span class="nick" style="color:#6c3d55"><a href="#201804" label="[20:18:04]">&lt;stikonas&gt;</a></span><span class="message">whereas BIOS/UEFI corresponds to U-Boot proper</span></div><div class="line" id="201928"><span class="nick" style="color:#234e69"><a href="#201928" label="[20:19:28]">&lt;aggi&gt;</a></span><span class="message">besides, kernel and BIOS duplicate various hw-init and driver support, which is another hint, of the conceptual problems</span></div><div class="line" id="202030"><span class="nick" style="color:#234e69"><a href="#202030" label="[20:20:30]">&lt;aggi&gt;</a></span><span class="message">ACPI is another reason, to stay away from x86/amd64 as far away as possible</span></div><div class="line" id="202112"><span class="nick" style="color:#234e69"><a href="#202112" label="[20:21:12]">&lt;aggi&gt;</a></span><span class="message">i remember, older x86/64 systems at least could offer SMP without ACPI...</span></div><div class="line" id="202134"><span class="nick" style="color:#234e69"><a href="#202134" label="[20:21:34]">&lt;aggi&gt;</a></span><span class="message">similar situation with aarch32/64, who implement some hacks inside their ATF to provide SMP</span></div><div class="line" id="202157"><span class="nick" style="color:#234e69"><a href="#202157" label="[20:21:57]">&lt;aggi&gt;</a></span><span class="message">stumbled upon this, because i wanted to boot an aarch32 kernel on top of an aarch64 uboot-loader, which i proceeded with</span></div><div class="line" id="202231"><span class="nick" style="color:#234e69"><a href="#202231" label="[20:22:31]">&lt;aggi&gt;</a></span><span class="message">up until i noticed PSCI (an ACPI equivalent) was absent then, SMP gone, RAM clocked at a few MHz only then, and CPU core at lowest clock speed</span></div><div class="line" id="202333"><span class="nick" style="color:#234e69"><a href="#202333" label="[20:23:33]">&lt;aggi&gt;</a></span><span class="message">aarch32 kernel, because tcc is limited with aarch64 (no asm support for this yet), and gcc47 hasn't got aarch64 support either</span></div><div class="line" id="202502"><span class="nick" style="color:#234e69"><a href="#202502" label="[20:25:02]">&lt;aggi&gt;</a></span><span class="message">situation with ia32/amd64 isnt any different</span></div><div class="line" id="202533"><span class="nick" style="color:#234e69"><a href="#202533" label="[20:25:33]">&lt;aggi&gt;</a></span><span class="message">the ia32 FPGA deployments with bochs/seabios seem very interesting, however FPGA capable of an ia32 deployment are _expensive_</span></div><div class="line" id="202603"><span class="nick" style="color:#6c3d55"><a href="#202603" label="[20:26:03]">&lt;stikonas&gt;</a></span><span class="message">hmm, double of at least some stuff initialization is probably unavoidable. The question is how much hw we initialize</span></div><div class="line" id="202619"><span class="nick" style="color:#234e69"><a href="#202619" label="[20:26:19]">&lt;aggi&gt;</a></span><span class="message">the altera board i had seen: ~800$... and it would be capable of an ia32 clocked at a few dozen MHz only, insufficient for regular linux/foss development</span></div><div class="line" id="202623"><span class="nick" style="color:#6c3d55"><a href="#202623" label="[20:26:23]">&lt;stikonas&gt;</a></span><span class="message">if you want to have a bootloader, you need ot initialize some hw</span></div><div class="line" id="215444"><span class="nick" style="color:#6b8072"><a href="#215444" label="[21:54:44]">&lt;oriansj&gt;</a></span><span class="message">well it is entirely possible to define a universal assembly language. It wouldn't even be hard; just getting people to actually use it however seems unlikely</span></div><div class="line" id="215534"><span class="nick" style="color:#6d2462"><a href="#215534" label="[21:55:34]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: Isn't that just an IL though?</span></div><div class="line" id="215542"><span class="nick" style="color:#6d2462"><a href="#215542" label="[21:55:42]">&lt;unmatched-paren&gt;</a></span><span class="message">Like QBE or LLVM...</span></div><div class="line" id="215554"><span class="nick" style="color:#6d2462"><a href="#215554" label="[21:55:54]">&lt;unmatched-paren&gt;</a></span><span class="message">Although they're a little higher-level than assembly.</span></div><div class="line" id="220429"><span class="nick">***</span><span class="message notice">chexum_ is now known as chexum</span></div><div class="line" id="222059"><span class="nick" style="color:#234e69"><a href="#222059" label="[22:20:59]">&lt;aggi&gt;</a></span><span class="message">the Gigatron TTL shipped for $150, both gigatron native assembly and the gigatron control language seemed documented</span></div><div class="line" id="222227"><span class="nick" style="color:#234e69"><a href="#222227" label="[22:22:27]">&lt;aggi&gt;</a></span><span class="message">to they implemented MOS6502 ASM emulation; didn't study this in detail yet</span></div><div class="line" id="222257"><span class="nick" style="color:#234e69"><a href="#222257" label="[22:22:57]">&lt;aggi&gt;</a></span><span class="message">with Z80 i appreciate it's somewhat stable now, for 40 years</span></div><div class="line" id="222428"><span class="nick" style="color:#234e69"><a href="#222428" label="[22:24:28]">&lt;aggi&gt;</a></span><span class="message">not sure what Rodney Zak &quot;programming z80&quot; covers, if asm hacking is sufficiently lectured with it</span></div><div class="line" id="222645"><span class="nick" style="color:#234e69"><a href="#222645" label="[22:26:45]">&lt;aggi&gt;</a></span><span class="message">the beauty of gigatron, the ttl7400 series parts can be soldered onto a breadboard</span></div><div class="line" id="222727"><span class="nick" style="color:#234e69"><a href="#222727" label="[22:27:27]">&lt;aggi&gt;</a></span><span class="message">it got single step debugger, a Z80 with SRAM too can be single-stepped</span></div><div class="line" id="223053"><span class="nick" style="color:#234e69"><a href="#223053" label="[22:30:53]">&lt;aggi&gt;</a></span><span class="message">with Z80 i fear, parts supply could be problematic, dumpster diving necessary, to desolder old chips (various peripheral I/O for parallel and serial port, various chips, not sure what's available)</span></div><div class="line" id="223148"><span class="nick" style="color:#234e69"><a href="#223148" label="[22:31:48]">&lt;aggi&gt;</a></span><span class="message">motorola 68K (used inside closed-source and abandoned Ti89/Ti92 series calculators) too are problematic, to source parts... dumpster diving</span></div><div class="line" id="223209"><span class="nick" style="color:#234e69"><a href="#223209" label="[22:32:09]">&lt;aggi&gt;</a></span><span class="message">even NASA reported, they had to dumpster dive for i8086 era parts on ebay, for their Space Shuttle</span></div><div class="line" id="223247"><span class="nick" style="color:#234e69"><a href="#223247" label="[22:32:47]">&lt;aggi&gt;</a></span><span class="message">General Electric reported, they had trouble hiring PDP-11 era hacker skills, for their nuclear facilities...</span></div><div class="line" id="223406"><span class="nick" style="color:#234e69"><a href="#223406" label="[22:34:06]">&lt;aggi&gt;</a></span><span class="message">with hardware deployed onto FPGA, i remain sceptical, it's a nice-to-have, even with open-source software tooling available</span></div><div class="line" id="223445"><span class="nick" style="color:#234e69"><a href="#223445" label="[22:34:45]">&lt;aggi&gt;</a></span><span class="message">i am not willing to depend on IBM Wintel Computers with Altera Studio or Xilinx IDE, Lattice got some offerings open-source</span></div><div class="line" id="223557"><span class="nick" style="color:#234e69"><a href="#223557" label="[22:35:57]">&lt;aggi&gt;</a></span><span class="message">FPGA is expensive, Altera $800, Gigatron TTL 150 coins, a full Z80 system (Zeta V2 or some other S-100 BUS system) is more expensive than the gigatron too</span></div><div class="line" id="223817"><span class="nick" style="color:#234e69"><a href="#223817" label="[22:38:17]">&lt;aggi&gt;</a></span><span class="message">with Gigatron TTL, the developer of the v1.0 ROM died, could be a problem too, in case of questions arise</span></div><div class="line" id="224001"><span class="nick" style="color:#234e69"><a href="#224001" label="[22:40:01]">&lt;aggi&gt;</a></span><span class="message">with Z80, the east-german manufacturing (Robotron, and Erfurt Semiconductors) are defunct since 1990, to my knowledge it's dead.</span></div><div class="line" id="232344"><span class="nick" style="color:#6b8072"><a href="#232344" label="[23:23:44]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well it doesn't even need to be an intermediate language, it can be a 1:1 mapping to native assembly. eg LOAD8U R0::15:8 &lt;- R1::31:0[8]  which would map to mov ah, [ebx+8]; but wouldn't have a mapping on say MIPS but the syntax would still be the same for say LOAD32U R0::31:0 &lt;- R1::31:0[8] and most architectures would have a 1:1 mapping</span></div><br /></div></body></html>