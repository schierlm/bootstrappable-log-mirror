<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000049"><span class="nick" style="color:#389600"><a href="#000049" label="[00:00:49]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: I don't understand why non-human made source code is considered a &quot;blob&quot;</span></div><div class="line" id="000109"><span class="nick" style="color:#8dd3c7"><a href="#000109" label="[00:01:09]">&lt;unmatched-paren&gt;</a></span><span class="message">ogg vorbis, opengl, opengles, libpng, librsvg, gmp, dbus, imagemagick, openal, opencl, vlc, lua, libxml, oracle db, tcl, zlib, fuse, libffi, libcurl, libcups, libmagic, libtar, libusb, curses, openssl, pthreads, x11, ...</span></div><div class="line" id="000126"><span class="nick" style="color:#8dd3c7"><a href="#000126" label="[00:01:26]">&lt;unmatched-paren&gt;</a></span><span class="message">can this even be called a 'standard library'???</span></div><div class="line" id="000257"><span class="nick" style="color:#8dd3c7"><a href="#000257" label="[00:02:57]">&lt;unmatched-paren&gt;</a></span><span class="message">And the most monstrous makefile i have ever seen, generated by a utility called 'fpcmake' (written in pascal)</span></div><div class="line" id="000301"><span class="nick" style="color:#2e2a4a"><a href="#000301" label="[00:03:01]">&lt;vagrantc&gt;</a></span><span class="message">littlebobeep: i think the question is not weather a non-human made it so much as can a human read it?</span></div><div class="line" id="000322"><span class="nick" style="color:#8dd3c7"><a href="#000322" label="[00:03:22]">&lt;unmatched-paren&gt;</a></span><span class="message">that was the debate above re. WEB and literate programming systems</span></div><div class="line" id="000329"><span class="nick" style="color:#8dd3c7"><a href="#000329" label="[00:03:29]">&lt;unmatched-paren&gt;</a></span><span class="message">got to go now, bye :)</span></div><div class="line" id="000355"><span class="nick" style="color:#2e2a4a"><a href="#000355" label="[00:03:55]">&lt;vagrantc&gt;</a></span><span class="message">is it source code or just code? :)</span></div><div class="line" id="000609"><span class="nick" style="color:#389600"><a href="#000609" label="[00:06:09]">&lt;littlebobeep&gt;</a></span><span class="message">How is M2-Planet a transpiler and not a compiler?</span></div><div class="line" id="000919"><span class="nick" style="color:#80b1d3"><a href="#000919" label="[00:09:19]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm not sure if stage0-posix-x86 would actually simplify things much but we'll see</span></div><div class="line" id="001001"><span class="nick" style="color:#80b1d3"><a href="#001001" label="[00:10:01]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is a compiler, not sure why it says transpiler</span></div><div class="line" id="001002"><span class="nick" style="color:#6d2462"><a href="#001002" label="[00:10:02]">&lt;oriansj&gt;</a></span><span class="message">stikonas: patch is up</span></div><div class="line" id="001009"><span class="nick" style="color:#80b1d3"><a href="#001009" label="[00:10:09]">&lt;stikonas&gt;</a></span><span class="message">it produces M1 assembly output</span></div><div class="line" id="001055"><span class="nick" style="color:#389600"><a href="#001055" label="[00:10:55]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas: What does it mean to call it &quot;M1&quot; assembly isn't assembly standardized for a given ISA?</span></div><div class="line" id="001112"><span class="nick" style="color:#80b1d3"><a href="#001112" label="[00:11:12]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: M1 is just different syntax compared to GAS</span></div><div class="line" id="001131"><span class="nick" style="color:#6d2462"><a href="#001131" label="[00:11:31]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: do you consider guile's psyntax.pp human readable?</span></div><div class="line" id="001151"><span class="nick" style="color:#80b1d3"><a href="#001151" label="[00:11:51]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: M1 syntax is designed in a way that is easier to parse in assembly</span></div><div class="line" id="001212"><span class="nick" style="color:#80b1d3"><a href="#001212" label="[00:12:12]">&lt;stikonas&gt;</a></span><span class="message">cause we actually have to write initial version of M0 in hex2 code</span></div><div class="line" id="001218"><span class="nick" style="color:#6d2462"><a href="#001218" label="[00:12:18]">&lt;oriansj&gt;</a></span><span class="message">afk</span></div><div class="line" id="001223"><span class="nick" style="color:#80b1d3"><a href="#001223" label="[00:12:23]">&lt;stikonas&gt;</a></span><span class="message">so the shorter M0 is, the better</span></div><div class="line" id="001322"><span class="nick" style="color:#80b1d3"><a href="#001322" label="[00:13:22]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: e.g. cc_riscv64 compiler looks like <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1">https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1</a> </span></div><div class="line" id="001404"><span class="nick" style="color:#80b1d3"><a href="#001404" label="[00:14:04]">&lt;stikonas&gt;</a></span><span class="message">so we have e.g. &quot;RD_A7 !214 ADDI&quot; instead of &quot;addi a7, 214&quot;</span></div><div class="line" id="001548"><span class="nick" style="color:#80b1d3"><a href="#001548" label="[00:15:48]">&lt;stikonas&gt;</a></span><span class="message">and x86 look even more different</span></div><div class="line" id="001747"><span class="nick" style="color:#80b1d3"><a href="#001747" label="[00:17:47]">&lt;stikonas&gt;</a></span><span class="message">so M0 simply replaces RD_A7 with .80080000, encodes !214 into hex using appropriate risc-v instruction type (I-type if I remember correctly) and ADDI is replaced with 13000000</span></div><div class="line" id="001804"><span class="nick" style="color:#80b1d3"><a href="#001804" label="[00:18:04]">&lt;stikonas&gt;</a></span><span class="message">and then those hex strings are passed into hex2 binary</span></div><div class="line" id="001830"><span class="nick" style="color:#80b1d3"><a href="#001830" label="[00:18:30]">&lt;stikonas&gt;</a></span><span class="message">which processes them, does the linking and outputs actual binary</span></div><div class="line" id="001947"><span class="nick" style="color:#80b1d3"><a href="#001947" label="[00:19:47]">&lt;stikonas&gt;</a></span><span class="message">on the other hand, &quot;addi a7, 214&quot; is much harder to parse as you would need to keep more state, e.g. assembler needs to know how to encode 214</span></div><div class="line" id="002000"><span class="nick" style="color:#80b1d3"><a href="#002000" label="[00:20:00]">&lt;stikonas&gt;</a></span><span class="message">based on the instruction type that it observed earlier</span></div><div class="line" id="011356"><span class="nick" style="color:#6d2462"><a href="#011356" label="[01:13:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well the difference between compile and transpile is compilers convert from a higher level language to a lower lever language and transpiles just convert between two different languages. However as C is just portable assembly and M1 is also portable assembly; it wouldn't really be fair to call it compiling</span></div><div class="line" id="011545"><span class="nick" style="color:#80b1d3"><a href="#011545" label="[01:15:45]">&lt;stikonas&gt;</a></span><span class="message">well, then gcc is also transpiler but oh well...</span></div><div class="line" id="011552"><span class="nick" style="color:#6d2462"><a href="#011552" label="[01:15:52]">&lt;oriansj&gt;</a></span><span class="message">but that might just me being too harsh on C</span></div><div class="line" id="011629"><span class="nick" style="color:#6d2462"><a href="#011629" label="[01:16:29]">&lt;oriansj&gt;</a></span><span class="message">and me being wrong again but it is a bit late for a name change</span></div><div class="line" id="011631"><span class="nick" style="color:#80b1d3"><a href="#011631" label="[01:16:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, it doesn't matter too much how one calls it</span></div><div class="line" id="011706"><span class="nick" style="color:#80b1d3"><a href="#011706" label="[01:17:06]">&lt;stikonas&gt;</a></span><span class="message">and M2-Planec doesn't work...</span></div><div class="line" id="011823"><span class="nick" style="color:#6d2462"><a href="#011823" label="[01:18:23]">&lt;oriansj&gt;</a></span><span class="message">well M2-Place (PLAtform CompilEr) would kinda work but not well</span></div><div class="line" id="011846"><span class="nick" style="color:#6d2462"><a href="#011846" label="[01:18:46]">&lt;oriansj&gt;</a></span><span class="message">oh well</span></div><div class="line" id="012103"><span class="nick" style="color:#6d2462"><a href="#012103" label="[01:21:03]">&lt;oriansj&gt;</a></span><span class="message">also you did a much better job on riscv's M1 assembly than the thrown together mess I did for x86 and AMD64</span></div><div class="line" id="012235"><span class="nick" style="color:#6d2462"><a href="#012235" label="[01:22:35]">&lt;oriansj&gt;</a></span><span class="message">even janneke's M1 output looks much closer to gas but then again, I never expected much programming beyound cc_* to be done in M1</span></div><div class="line" id="012258"><span class="nick" style="color:#80b1d3"><a href="#012258" label="[01:22:58]">&lt;stikonas&gt;</a></span><span class="message">well, it's easier to redo the same work to another arch</span></div><div class="line" id="012328"><span class="nick" style="color:#80b1d3"><a href="#012328" label="[01:23:28]">&lt;stikonas&gt;</a></span><span class="message">and we had to rethink some stuff to deal with fixed length arch</span></div><div class="line" id="012337"><span class="nick" style="color:#6d2462"><a href="#012337" label="[01:23:37]">&lt;oriansj&gt;</a></span><span class="message">and the byte to word refactoring made for a much more advanced M1 and hex2 compared to x86's</span></div><div class="line" id="012400"><span class="nick" style="color:#80b1d3"><a href="#012400" label="[01:24:00]">&lt;stikonas&gt;</a></span><span class="message">yes, but hex2 was quite a bit bigger...</span></div><div class="line" id="012408"><span class="nick" style="color:#80b1d3"><a href="#012408" label="[01:24:08]">&lt;stikonas&gt;</a></span><span class="message">which is not ideal but it's done now</span></div><div class="line" id="012417"><span class="nick" style="color:#234e69"><a href="#012417" label="[01:24:17]">&lt;muurkha&gt;</a></span><span class="message">I learned something interesting about RISC-V last night.  Olof Kindgren has a working RISC-V design called SERV that can be realized in about 200 4-input LUTs and 250 D flip-flops, which is pretty much the simplest I've ever seen a general-purpose CPU</span></div><div class="line" id="012431"><span class="nick" style="color:#234e69"><a href="#012431" label="[01:24:31]">&lt;muurkha&gt;</a></span><span class="message">it's equivalent to about 500-1000 gates (and 250 flip-flops)</span></div><div class="line" id="012509"><span class="nick" style="color:#234e69"><a href="#012509" label="[01:25:09]">&lt;muurkha&gt;</a></span><span class="message">4-input LUTs are the kind in the iCE40UP5K chip on this FPGA devboard I got yesterday</span></div><div class="line" id="012524"><span class="nick" style="color:#234e69"><a href="#012524" label="[01:25:24]">&lt;muurkha&gt;</a></span><span class="message">I think Xilinx and Altera use 6-input and 5-input LUTs</span></div><div class="line" id="012529"><span class="nick" style="color:#6d2462"><a href="#012529" label="[01:25:29]">&lt;oriansj&gt;</a></span><span class="message">muurkha: neat; got a link?</span></div><div class="line" id="012550"><span class="nick" style="color:#234e69"><a href="#012550" label="[01:25:50]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/olofk/serv">https://github.com/olofk/serv</a> </span></div><div class="line" id="012621"><span class="nick" style="color:#80b1d3"><a href="#012621" label="[01:26:21]">&lt;stikonas&gt;</a></span><span class="message">s/Xilinx/AMD/ :D</span></div><div class="line" id="012622"><span class="nick" style="color:#234e69"><a href="#012622" label="[01:26:22]">&lt;muurkha&gt;</a></span><span class="message">but the README doesn't talk about how small it is quantitatively, I got that from an EEVblog forum thread</span></div><div class="line" id="012726"><span class="nick" style="color:#234e69"><a href="#012726" label="[01:27:26]">&lt;muurkha&gt;</a></span><span class="message">even my own ridiculously simple Calculus Vaporis design is about 600 NAND gates, and it's a huge pain to program compared to RISC-V (unless you're hand-assembling I guess, in which case the RISC-V instruction format feels like a malicious prank)</span></div><div class="line" id="012758"><span class="nick" style="color:#234e69"><a href="#012758" label="[01:27:58]">&lt;muurkha&gt;</a></span><span class="message">it has less internal state though</span></div><div class="line" id="012903"><span class="nick" style="color:#234e69"><a href="#012903" label="[01:29:03]">&lt;muurkha&gt;</a></span><span class="message">it might be a good idea to rename M1 to a longer name because after last year most people will think &quot;M1 assembly&quot; is for Apple's M1 chip</span></div><div class="line" id="012904"><span class="nick" style="color:#6d2462"><a href="#012904" label="[01:29:04]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well we don't need to hand-assemble RISC-V anymore now that stage0-posix has a bootstrap for it</span></div><div class="line" id="012934"><span class="nick" style="color:#6d2462"><a href="#012934" label="[01:29:34]">&lt;oriansj&gt;</a></span><span class="message">and Apple can go *FUCK THEMSELVES* with a rusty spoon</span></div><div class="line" id="013009"><span class="nick" style="color:#6d2462"><a href="#013009" label="[01:30:09]">&lt;oriansj&gt;</a></span><span class="message">and the search term is mescc-tools anyway</span></div><div class="line" id="013128"><span class="nick" style="color:#234e69"><a href="#013128" label="[01:31:28]">&lt;muurkha&gt;</a></span><span class="message">I heartily agree about the spoon</span></div><div class="line" id="013147"><span class="nick" style="color:#6d2462"><a href="#013147" label="[01:31:47]">&lt;oriansj&gt;</a></span><span class="message">not like stage0 is that good of a search term anyway lol</span></div><div class="line" id="013157"><span class="nick" style="color:#234e69"><a href="#013157" label="[01:31:57]">&lt;muurkha&gt;</a></span><span class="message">better than &quot;bootstrapping&quot; :)</span></div><div class="line" id="013300"><span class="nick" style="color:#6d2462"><a href="#013300" label="[01:33:00]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I'd argue live-bootstrapping and Gnu Mes are the two big entry names we have</span></div><div class="line" id="013318"><span class="nick" style="color:#6d2462"><a href="#013318" label="[01:33:18]">&lt;oriansj&gt;</a></span><span class="message">^live-bootstrapping^live-bootstrap^</span></div><div class="line" id="013346"><span class="nick" style="color:#6d2462"><a href="#013346" label="[01:33:46]">&lt;oriansj&gt;</a></span><span class="message">and those are where people will probably find what they want anyway</span></div><div class="line" id="013448"><span class="nick" style="color:#6c3d55"><a href="#013448" label="[01:34:48]">&lt;stikonas[m]&gt;</a></span><span class="message">live-bootstrap often shows HTML bootstrap library</span></div><div class="line" id="013458"><span class="nick" style="color:#234e69"><a href="#013458" label="[01:34:58]">&lt;muurkha&gt;</a></span><span class="message">could be, yeah</span></div><div class="line" id="013540"><span class="nick" style="color:#234e69"><a href="#013540" label="[01:35:40]">&lt;muurkha&gt;</a></span><span class="message">[gnu mes] surprisingly finds me only things about GNU Mes</span></div><div class="line" id="013615"><span class="nick" style="color:#234e69"><a href="#013615" label="[01:36:15]">&lt;muurkha&gt;</a></span><span class="message">but of course [mes] tells me, &quot;El mes es una unidad astronómica de tiempo, usada en el calendario como el período que tarda la Luna en dar una vuelta alrededor de la Tierra.&quot;</span></div><div class="line" id="013630"><span class="nick" style="color:#6d2462"><a href="#013630" label="[01:36:30]">&lt;oriansj&gt;</a></span><span class="message">beside dongcarl's talks are probably the most viewed talks about our work because of the crypto community</span></div><div class="line" id="013701"><span class="nick" style="color:#234e69"><a href="#013701" label="[01:37:01]">&lt;muurkha&gt;</a></span><span class="message">(and nothing at all about GNU Mes)</span></div><div class="line" id="013759"><span class="nick" style="color:#234e69"><a href="#013759" label="[01:37:59]">&lt;muurkha&gt;</a></span><span class="message">the #1 hit is a Wikipedia disambiguation page that doesn't mention it, the #3 hit is about what holidays happen this month (&quot;mes&quot;)</span></div><div class="line" id="013911"><span class="nick" style="color:#6d2462"><a href="#013911" label="[01:39:11]">&lt;oriansj&gt;</a></span><span class="message">which reminds me; thank you very much stikonas and fossy for live-bootstrap. The death threat emails stopped shortly after you got the path from stage0 to TCC working. (probably my biggest anger against the crypto community)</span></div><div class="line" id="013924"><span class="nick" style="color:#234e69"><a href="#013924" label="[01:39:24]">&lt;muurkha&gt;</a></span><span class="message">ugh, that's horrible</span></div><div class="line" id="013935"><span class="nick" style="color:#234e69"><a href="#013935" label="[01:39:35]">&lt;muurkha&gt;</a></span><span class="message">why were people threatenig you with death?</span></div><div class="line" id="014002"><span class="nick" style="color:#234e69"><a href="#014002" label="[01:40:02]">&lt;muurkha&gt;</a></span><span class="message">*n</span></div><div class="line" id="014003"><span class="nick" style="color:#234e69"><a href="#014003" label="[01:40:03]">&lt;muurkha&gt;</a></span><span class="message">I also thank you very much but don't have as much reason to</span></div><div class="line" id="014004"><span class="nick" style="color:#6d2462"><a href="#014004" label="[01:40:04]">&lt;oriansj&gt;</a></span><span class="message">because I was holding up their crypto chain's trust from being complete</span></div><div class="line" id="014201"><span class="nick" style="color:#6d2462"><a href="#014201" label="[01:42:01]">&lt;oriansj&gt;</a></span><span class="message">guess they didn't understand WTF they were talking about and just used the breaking bitcoin slides and assumed it was my fault for not closing the gap between stage0 and mes</span></div><div class="line" id="014203"><span class="nick" style="color:#234e69"><a href="#014203" label="[01:42:03]">&lt;muurkha&gt;</a></span><span class="message">anyway I'm super excited to have this FPGA devboard.  for the first time in my life I have the tools I need to design and build a working CPU, even if that's not a particularly smart way to use an FPGA in production</span></div><div class="line" id="014243"><span class="nick" style="color:#234e69"><a href="#014243" label="[01:42:43]">&lt;muurkha&gt;</a></span><span class="message">the FPGA is big enough to hold about 20 instantiations of SERV</span></div><div class="line" id="014249"><span class="nick" style="color:#6d2462"><a href="#014249" label="[01:42:49]">&lt;oriansj&gt;</a></span><span class="message">muurkha: who cares if it is smart if it makes you happy</span></div><div class="line" id="014313"><span class="nick" style="color:#6d2462"><a href="#014313" label="[01:43:13]">&lt;oriansj&gt;</a></span><span class="message">also couldn't pico-riscv fit?</span></div><div class="line" id="014344"><span class="nick" style="color:#234e69"><a href="#014344" label="[01:43:44]">&lt;muurkha&gt;</a></span><span class="message">PicoRV32? yeah, about 8 times, 5 in a more comfortable configuration</span></div><div class="line" id="014357"><span class="nick" style="color:#234e69"><a href="#014357" label="[01:43:57]">&lt;muurkha&gt;</a></span><span class="message">it might even be a smart way to do research on CPU design, but I'm not sure I'll manage to do that</span></div><div class="line" id="021652"><span class="nick" style="color:#6d2462"><a href="#021652" label="[02:16:52]">&lt;oriansj&gt;</a></span><span class="message">oh no... you'll just toy around and enjoy yourself. You might even be inspired to play zork on it</span></div><div class="line" id="022130"><span class="nick" style="color:#234e69"><a href="#022130" label="[02:21:30]">&lt;muurkha&gt;</a></span><span class="message">surely someone has implemented the Z-machine on an FPGA without another CPU before</span></div><div class="line" id="022357"><span class="nick" style="color:#234e69"><a href="#022357" label="[02:23:57]">&lt;muurkha&gt;</a></span><span class="message">in 02014 apparently: <a rel="nofollow" href="https://github.com/charcole/Z3">https://github.com/charcole/Z3</a> </span></div><div class="line" id="023159"><span class="nick" style="color:#6d2462"><a href="#023159" label="[02:31:59]">&lt;oriansj&gt;</a></span><span class="message">well guess we are the generation that might make libre-hardware the standard</span></div><div class="line" id="023336"><span class="nick" style="color:#234e69"><a href="#023336" label="[02:33:36]">&lt;muurkha&gt;</a></span><span class="message">not until we have matter compilers</span></div><div class="line" id="023437"><span class="nick" style="color:#6d2462"><a href="#023437" label="[02:34:37]">&lt;oriansj&gt;</a></span><span class="message">libre-silicon is a good half step there</span></div><div class="line" id="023952"><span class="nick" style="color:#6d2462"><a href="#023952" label="[02:39:52]">&lt;oriansj&gt;</a></span><span class="message">and after that technology, Cory Doctorow's walkaways becomes viable</span></div><div class="line" id="024547"><span class="nick" style="color:#234e69"><a href="#024547" label="[02:45:47]">&lt;muurkha&gt;</a></span><span class="message">agreed about libre silicon</span></div><div class="line" id="025454"><span class="nick" style="color:#d9d9d9"><a href="#025454" label="[02:54:54]">&lt;mid-kid&gt;</a></span><span class="message">How do I get gcc to look for crt1.o in /usr/lib/musl instead of /usr/lib?</span></div><div class="line" id="025459"><span class="nick" style="color:#d9d9d9"><a href="#025459" label="[02:54:59]">&lt;mid-kid&gt;</a></span><span class="message">I'm already passing --libdir</span></div><div class="line" id="025555"><span class="nick" style="color:#d9d9d9"><a href="#025555" label="[02:55:55]">&lt;mid-kid&gt;</a></span><span class="message">Something tells me I need to adapt STANDARD_STARTFILE_PREFIX in a header in the gcc sources but for some reason the live-bootstrap script doesn't need to do that?</span></div><div class="line" id="025636"><span class="nick" style="color:#d9d9d9"><a href="#025636" label="[02:56:36]">&lt;mid-kid&gt;</a></span><span class="message">I should probably mention that I'm trying to upgrade gcc after a live-bootstrap sysc build.</span></div><div class="line" id="104753"><span class="nick" style="color:#8dd3c7"><a href="#104753" label="[10:47:53]">&lt;unmatched-paren&gt;</a></span><span class="message">i've put notes on Pascal bootstrapping up on the wiki: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Aesop/Notes_and_Research">https://bootstrapping.miraheze.org/wiki/Aesop/Notes_and_Research</a> </span></div><div class="line" id="104818"><span class="nick" style="color:#8dd3c7"><a href="#104818" label="[10:48:18]">&lt;unmatched-paren&gt;</a></span><span class="message">(Aesop stands for 'An Extensive Subset Of Pascal', btw :P)</span></div><div class="line" id="111446"><span class="nick" style="color:#80b1d3"><a href="#111446" label="[11:14:46]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: your PR has been merged</span></div><div class="line" id="111525"><span class="nick" style="color:#80b1d3"><a href="#111525" label="[11:15:25]">&lt;stikonas&gt;</a></span><span class="message">fossy: when you have some time, please review <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/146">https://github.com/fosslinux/live-bootstrap/pull/146</a> </span></div><div class="line" id="111648"><span class="nick" style="color:#d9d9d9"><a href="#111648" label="[11:16:48]">&lt;mid-kid&gt;</a></span><span class="message">stikonas: Thanks!</span></div><div class="line" id="111704"><span class="nick" style="color:#d9d9d9"><a href="#111704" label="[11:17:04]">&lt;mid-kid&gt;</a></span><span class="message">Quick question but are file sorted before they're &quot;tar&quot;ed into the repo?</span></div><div class="line" id="111718"><span class="nick" style="color:#d9d9d9"><a href="#111718" label="[11:17:18]">&lt;mid-kid&gt;</a></span><span class="message">I'm getting different tarballs when not building in a tmpfs</span></div><div class="line" id="111728"><span class="nick" style="color:#80b1d3"><a href="#111728" label="[11:17:28]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: not sure, let's check</span></div><div class="line" id="111805"><span class="nick" style="color:#d9d9d9"><a href="#111805" label="[11:18:05]">&lt;mid-kid&gt;</a></span><span class="message">yeah it's the file order that messes up the checksum for gawk-3.0.4_0</span></div><div class="line" id="111824"><span class="nick" style="color:#80b1d3"><a href="#111824" label="[11:18:24]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: it depends</span></div><div class="line" id="111834"><span class="nick" style="color:#80b1d3"><a href="#111834" label="[11:18:34]">&lt;stikonas&gt;</a></span><span class="message">looks like it's sorted if sort exists</span></div><div class="line" id="111848"><span class="nick" style="color:#80b1d3"><a href="#111848" label="[11:18:48]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L267">https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L267</a> </span></div><div class="line" id="111910"><span class="nick" style="color:#d9d9d9"><a href="#111910" label="[11:19:10]">&lt;mid-kid&gt;</a></span><span class="message">oof</span></div><div class="line" id="111921"><span class="nick" style="color:#80b1d3"><a href="#111921" label="[11:19:21]">&lt;stikonas&gt;</a></span><span class="message">hmm,oh, that's only for symlinks</span></div><div class="line" id="111926"><span class="nick" style="color:#80b1d3"><a href="#111926" label="[11:19:26]">&lt;stikonas&gt;</a></span><span class="message">not for actual files</span></div><div class="line" id="111933"><span class="nick" style="color:#80b1d3"><a href="#111933" label="[11:19:33]">&lt;stikonas&gt;</a></span><span class="message">there aren't that many symlinks in live-bootstrap</span></div><div class="line" id="111937"><span class="nick" style="color:#d9d9d9"><a href="#111937" label="[11:19:37]">&lt;mid-kid&gt;</a></span><span class="message">no I'm looking at create_tarball_pkg</span></div><div class="line" id="112004"><span class="nick" style="color:#80b1d3"><a href="#112004" label="[11:20:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's this <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L244">https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L244</a> </span></div><div class="line" id="112017"><span class="nick" style="color:#80b1d3"><a href="#112017" label="[11:20:17]">&lt;stikonas&gt;</a></span><span class="message">this is a fairly new addition by fossy</span></div><div class="line" id="112033"><span class="nick" style="color:#80b1d3"><a href="#112033" label="[11:20:33]">&lt;stikonas&gt;</a></span><span class="message">but it's definitely an improvement to what we had before</span></div><div class="line" id="112042"><span class="nick" style="color:#80b1d3"><a href="#112042" label="[11:20:42]">&lt;stikonas&gt;</a></span><span class="message">(we only used to checksum binaries and libraries)</span></div><div class="line" id="112046"><span class="nick" style="color:#80b1d3"><a href="#112046" label="[11:20:46]">&lt;stikonas&gt;</a></span><span class="message">now we checksum everything</span></div><div class="line" id="112107"><span class="nick" style="color:#d9d9d9"><a href="#112107" label="[11:21:07]">&lt;mid-kid&gt;</a></span><span class="message">coreutils is built fairly late and provides &quot;sort&quot;</span></div><div class="line" id="112117"><span class="nick" style="color:#80b1d3"><a href="#112117" label="[11:21:17]">&lt;stikonas&gt;</a></span><span class="message">so sort is built in step 30</span></div><div class="line" id="112120"><span class="nick" style="color:#80b1d3"><a href="#112120" label="[11:21:20]">&lt;stikonas&gt;</a></span><span class="message">when we hav emusl</span></div><div class="line" id="112126"><span class="nick" style="color:#d9d9d9"><a href="#112126" label="[11:21:26]">&lt;mid-kid&gt;</a></span><span class="message">yeah</span></div><div class="line" id="112145"><span class="nick" style="color:#d9d9d9"><a href="#112145" label="[11:21:45]">&lt;mid-kid&gt;</a></span><span class="message">so anything before there relies on how the linux kernel happens to sort files in a tmpfs</span></div><div class="line" id="112158"><span class="nick" style="color:#d9d9d9"><a href="#112158" label="[11:21:58]">&lt;mid-kid&gt;</a></span><span class="message">which might differ from kernel to kernel, but does differ from filesystem to filesystem</span></div><div class="line" id="112221"><span class="nick" style="color:#d9d9d9"><a href="#112221" label="[11:22:21]">&lt;mid-kid&gt;</a></span><span class="message">Might be able to write a sort implementation in mes or m2</span></div><div class="line" id="112227"><span class="nick" style="color:#80b1d3"><a href="#112227" label="[11:22:27]">&lt;stikonas&gt;</a></span><span class="message">well, you can try to build sort with meslibc in step 13</span></div><div class="line" id="112234"><span class="nick" style="color:#d9d9d9"><a href="#112234" label="[11:22:34]">&lt;mid-kid&gt;</a></span><span class="message">yeah</span></div><div class="line" id="112239"><span class="nick" style="color:#80b1d3"><a href="#112239" label="[11:22:39]">&lt;stikonas&gt;</a></span><span class="message">or even write your own</span></div><div class="line" id="112335"><span class="nick" style="color:#80b1d3"><a href="#112335" label="[11:23:35]">&lt;stikonas&gt;</a></span><span class="message">although there are probably some problems if I didn't build it in step 13 (although thye might be solvable, it's just that I didn't bother back then if there was no immediate need for sort)</span></div><div class="line" id="112418"><span class="nick" style="color:#d9d9d9"><a href="#112418" label="[11:24:18]">&lt;mid-kid&gt;</a></span><span class="message">iirc the issue with coreutils was that its source archives don't go back in time far enough</span></div><div class="line" id="112436"><span class="nick" style="color:#d9d9d9"><a href="#112436" label="[11:24:36]">&lt;mid-kid&gt;</a></span><span class="message">or wait</span></div><div class="line" id="112515"><span class="nick" style="color:#80b1d3"><a href="#112515" label="[11:25:15]">&lt;stikonas&gt;</a></span><span class="message">no, we didn't have any issue with coreutils archives</span></div><div class="line" id="112523"><span class="nick" style="color:#80b1d3"><a href="#112523" label="[11:25:23]">&lt;stikonas&gt;</a></span><span class="message">5.0 is just fine</span></div><div class="line" id="112543"><span class="nick" style="color:#80b1d3"><a href="#112543" label="[11:25:43]">&lt;stikonas&gt;</a></span><span class="message">(appart from missing sha256sum)</span></div><div class="line" id="112555"><span class="nick" style="color:#d9d9d9"><a href="#112555" label="[11:25:55]">&lt;mid-kid&gt;</a></span><span class="message">yeah for some reason I remember gcc was *needed* to build it but looking at this code that appears to not be the case</span></div><div class="line" id="112603"><span class="nick" style="color:#80b1d3"><a href="#112603" label="[11:26:03]">&lt;stikonas&gt;</a></span><span class="message">hmm, so first part of coreutils actually builds tsort</span></div><div class="line" id="112610"><span class="nick" style="color:#80b1d3"><a href="#112610" label="[11:26:10]">&lt;stikonas&gt;</a></span><span class="message">so I wonder why sort is skipped</span></div><div class="line" id="112615"><span class="nick" style="color:#80b1d3"><a href="#112615" label="[11:26:15]">&lt;stikonas&gt;</a></span><span class="message">they must be similar</span></div><div class="line" id="112719"><span class="nick" style="color:#d9d9d9"><a href="#112719" label="[11:27:19]">&lt;mid-kid&gt;</a></span><span class="message">Oh! I didn't notice it in after.kaem</span></div><div class="line" id="112830"><span class="nick" style="color:#80b1d3"><a href="#112830" label="[11:28:30]">&lt;stikonas&gt;</a></span><span class="message">basically you want to look at <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/tree/master/sysa/coreutils-5.0/mk">https://github.com/fosslinux/live-bootstrap/tree/master/sysa/coreutils-5.0/mk</a> </span></div><div class="line" id="112844"><span class="nick" style="color:#80b1d3"><a href="#112844" label="[11:28:44]">&lt;stikonas&gt;</a></span><span class="message">there are two makefiles (one for meslibc build, the other is for musl build and builds more utilities</span></div><div class="line" id="112911"><span class="nick" style="color:#d9d9d9"><a href="#112911" label="[11:29:11]">&lt;mid-kid&gt;</a></span><span class="message">I was already wondering how the hell it was running the main makefile</span></div><div class="line" id="112922"><span class="nick" style="color:#d9d9d9"><a href="#112922" label="[11:29:22]">&lt;mid-kid&gt;</a></span><span class="message">thanks for pointing me to the right dir lol</span></div><div class="line" id="112950"><span class="nick" style="color:#80b1d3"><a href="#112950" label="[11:29:50]">&lt;stikonas&gt;</a></span><span class="message">no, these makefiles are handwritten</span></div><div class="line" id="113003"><span class="nick" style="color:#80b1d3"><a href="#113003" label="[11:30:03]">&lt;stikonas&gt;</a></span><span class="message">to avoid dependency on autotools</span></div><div class="line" id="113024"><span class="nick" style="color:#d9d9d9"><a href="#113024" label="[11:30:24]">&lt;mid-kid&gt;</a></span><span class="message">I see, makes sense.</span></div><div class="line" id="113058"><span class="nick" style="color:#80b1d3"><a href="#113058" label="[11:30:58]">&lt;stikonas&gt;</a></span><span class="message">well, all early build scripts are written in kaem scripts, so basically a list of commands...</span></div><div class="line" id="113118"><span class="nick" style="color:#80b1d3"><a href="#113118" label="[11:31:18]">&lt;stikonas&gt;</a></span><span class="message">then once we build make, we put main building logic in custom makefiles</span></div><div class="line" id="113129"><span class="nick" style="color:#80b1d3"><a href="#113129" label="[11:31:29]">&lt;stikonas&gt;</a></span><span class="message">(unpacking, etc are still done in kaem)</span></div><div class="line" id="113158"><span class="nick" style="color:#80b1d3"><a href="#113158" label="[11:31:58]">&lt;stikonas&gt;</a></span><span class="message">and then once bash is built, everything is switched to more powerful scripting and helpers.sh library</span></div><div class="line" id="134826"><span class="nick" style="color:#6d2462"><a href="#134826" label="[13:48:26]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: well if we wrote a sort it would go into mescc-tools-extra</span></div><div class="line" id="134915"><span class="nick" style="color:#6d2462"><a href="#134915" label="[13:49:15]">&lt;oriansj&gt;</a></span><span class="message">']</span></div><div class="line" id="150224"><span class="nick" style="color:#bc80bd"><a href="#150224" label="[15:02:24]">&lt;Christoph[m]&gt;</a></span><span class="message">unmatched-paren: You want to use Pascal to compile Nim, right? Maybe it is less work to &quot;compile&quot; the Nim-Compiler by hand into an already bootstrapped language? That would of course not bootstrap Pascal, but wouldn't it be easier to translate a Nim-Compiler from Pascal to ??? than to rewrite Pascal from scratch?</span></div><div class="line" id="153051"><span class="nick" style="color:#8dd3c7"><a href="#153051" label="[15:30:51]">&lt;unmatched-paren&gt;</a></span><span class="message">Christoph[m]: you could say the same for FPC; just hand-translate it. But hand-translating sounds very error-prone; there's probably attributes of Nim that would be lost if you translated it to, say, Go (Go doesn't support tagged unions, for example)</span></div><div class="line" id="153133"><span class="nick" style="color:#8dd3c7"><a href="#153133" label="[15:31:33]">&lt;unmatched-paren&gt;</a></span><span class="message">the Nim project does provide *machine-translated* sources of the Nim compiler to c, but that's just what the Nim compiler does</span></div><div class="line" id="153141"><span class="nick" style="color:#8dd3c7"><a href="#153141" label="[15:31:41]">&lt;unmatched-paren&gt;</a></span><span class="message">OH you mean to translate the Pascal to C</span></div><div class="line" id="153303"><span class="nick" style="color:#8dd3c7"><a href="#153303" label="[15:33:03]">&lt;unmatched-paren&gt;</a></span><span class="message">or to something else</span></div><div class="line" id="154724"><span class="nick" style="color:#80b1d3"><a href="#154724" label="[15:47:24]">&lt;stikonas&gt;</a></span><span class="message">well, any language can theoretically be bootstrapped this way by porting source to another language</span></div><div class="line" id="154730"><span class="nick" style="color:#80b1d3"><a href="#154730" label="[15:47:30]">&lt;stikonas&gt;</a></span><span class="message">but that's usually a lot of work</span></div><div class="line" id="154804"><span class="nick" style="color:#80b1d3"><a href="#154804" label="[15:48:04]">&lt;stikonas&gt;</a></span><span class="message">probably C++ is a good choice  to port to</span></div><div class="line" id="154810"><span class="nick" style="color:#80b1d3"><a href="#154810" label="[15:48:10]">&lt;stikonas&gt;</a></span><span class="message">since it has quite a lot of features</span></div><div class="line" id="154955"><span class="nick" style="color:#80b1d3"><a href="#154955" label="[15:49:55]">&lt;stikonas&gt;</a></span><span class="message">even C to simpler C (mes-&gt;mes-m2 took a long time)</span></div><div class="line" id="155040"><span class="nick" style="color:#80b1d3"><a href="#155040" label="[15:50:40]">&lt;stikonas&gt;</a></span><span class="message">probably writing a small bootstrap compiler from scrath is often easier</span></div><div class="line" id="155202"><span class="nick" style="color:#8dd3c7"><a href="#155202" label="[15:52:02]">&lt;unmatched-paren&gt;</a></span><span class="message">in this case the bootstrap compiler probably won't be small</span></div><div class="line" id="155218"><span class="nick" style="color:#8dd3c7"><a href="#155218" label="[15:52:18]">&lt;unmatched-paren&gt;</a></span><span class="message">free pascal has a lot of features, most of which are not formally specified</span></div><div class="line" id="155243"><span class="nick" style="color:#8dd3c7"><a href="#155243" label="[15:52:43]">&lt;unmatched-paren&gt;</a></span><span class="message">it uses e.g. Delphi classes/inheritance in the source</span></div><div class="line" id="155254"><span class="nick" style="color:#6d2462"><a href="#155254" label="[15:52:54]">&lt;oriansj&gt;</a></span><span class="message">well it ultimately is up to the person doing the work</span></div><div class="line" id="155357"><span class="nick" style="color:#6d2462"><a href="#155357" label="[15:53:57]">&lt;oriansj&gt;</a></span><span class="message">and my recommendation is always to do what *you* (the person doing the work) finds most fun</span></div><div class="line" id="155427"><span class="nick" style="color:#8dd3c7"><a href="#155427" label="[15:54:27]">&lt;unmatched-paren&gt;</a></span><span class="message">the other two ways are probably too difficult (transpiling by hand and 'archeology')</span></div><div class="line" id="155444"><span class="nick" style="color:#8dd3c7"><a href="#155444" label="[15:54:44]">&lt;unmatched-paren&gt;</a></span><span class="message">and in this case archeology probably wouldn't work</span></div><div class="line" id="155501"><span class="nick" style="color:#8dd3c7"><a href="#155501" label="[15:55:01]">&lt;unmatched-paren&gt;</a></span><span class="message">since FPC is so old, and has *always* been written in Pascal</span></div><div class="line" id="155514"><span class="nick" style="color:#8dd3c7"><a href="#155514" label="[15:55:14]">&lt;unmatched-paren&gt;</a></span><span class="message">at the start, it was bootstrapped from the proprietary Turbo Pascal</span></div><div class="line" id="155638"><span class="nick" style="color:#8dd3c7"><a href="#155638" label="[15:56:38]">&lt;unmatched-paren&gt;</a></span><span class="message">and only worked on DOS</span></div><div class="line" id="155656"><span class="nick" style="color:#80b1d3"><a href="#155656" label="[15:56:56]">&lt;stikonas&gt;</a></span><span class="message">well, dos itself is not a problem, there is freedos</span></div><div class="line" id="155704"><span class="nick" style="color:#80b1d3"><a href="#155704" label="[15:57:04]">&lt;stikonas&gt;</a></span><span class="message">but proprietary compiler is a problem</span></div><div class="line" id="155723"><span class="nick" style="color:#8dd3c7"><a href="#155723" label="[15:57:23]">&lt;unmatched-paren&gt;</a></span><span class="message">Pascal needs to be extended to be useful; Standard Pascal is pretty primitive afaik</span></div><div class="line" id="155733"><span class="nick" style="color:#6d2462"><a href="#155733" label="[15:57:33]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well what seems like fun to do (ignore restrictions for a minute)</span></div><div class="line" id="155746"><span class="nick" style="color:#8dd3c7"><a href="#155746" label="[15:57:46]">&lt;unmatched-paren&gt;</a></span><span class="message">so fpc has always used turbo pascal extensions (which it implements itself)</span></div><div class="line" id="155802"><span class="nick" style="color:#8dd3c7"><a href="#155802" label="[15:58:02]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: write a new compiler :)</span></div><div class="line" id="155837"><span class="nick" style="color:#6d2462"><a href="#155837" label="[15:58:37]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: and what programming language is the most fun for you to use?</span></div><div class="line" id="155840"><span class="nick" style="color:#8dd3c7"><a href="#155840" label="[15:58:40]">&lt;unmatched-paren&gt;</a></span><span class="message">i've wanted to write a compiler for a while, and this seems like a good opportunity to learn</span></div><div class="line" id="155913"><span class="nick" style="color:#8dd3c7"><a href="#155913" label="[15:59:13]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: probably one of the ones that isn't bootstrapped yet, which would be a bit pointless. it would be a good learning experience to do it in C though</span></div><div class="line" id="155921"><span class="nick" style="color:#8dd3c7"><a href="#155921" label="[15:59:21]">&lt;unmatched-paren&gt;</a></span><span class="message">i.e. haskell</span></div><div class="line" id="155955"><span class="nick" style="color:#8dd3c7"><a href="#155955" label="[15:59:55]">&lt;unmatched-paren&gt;</a></span><span class="message">i'd still find writing it in C fun though :)</span></div><div class="line" id="160004"><span class="nick" style="color:#6d2462"><a href="#160004" label="[16:00:04]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: It isn't pointless because we will bootstrap GHC in the future</span></div><div class="line" id="160029"><span class="nick" style="color:#80b1d3"><a href="#160029" label="[16:00:29]">&lt;stikonas&gt;</a></span><span class="message">but even if we bootstrap GHC, it's a much longer bootstrap path than C</span></div><div class="line" id="160038"><span class="nick" style="color:#8dd3c7"><a href="#160038" label="[16:00:38]">&lt;unmatched-paren&gt;</a></span><span class="message">what stikonas said</span></div><div class="line" id="160044"><span class="nick" style="color:#8dd3c7"><a href="#160044" label="[16:00:44]">&lt;unmatched-paren&gt;</a></span><span class="message">got to go now, bye \o</span></div><div class="line" id="160047"><span class="nick" style="color:#80b1d3"><a href="#160047" label="[16:00:47]">&lt;stikonas&gt;</a></span><span class="message">at least if we go through archeological way of bootstrapping GHC</span></div><div class="line" id="160157"><span class="nick" style="color:#6d2462"><a href="#160157" label="[16:01:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: so?</span></div><div class="line" id="160231"><span class="nick" style="color:#80b1d3"><a href="#160231" label="[16:02:31]">&lt;stikonas&gt;</a></span><span class="message">well, it's not a blocker, but might be hard to run...</span></div><div class="line" id="160450"><span class="nick" style="color:#3c5b35"><a href="#160450" label="[16:04:50]">&lt;bauen1&gt;</a></span><span class="message">writing compilers in a functional language can however be much more pleasant than in C</span></div><div class="line" id="160511"><span class="nick" style="color:#3c5b35"><a href="#160511" label="[16:05:11]">&lt;bauen1&gt;</a></span><span class="message">and you'll pribably get to a point where you want to scrap it anyway</span></div><div class="line" id="160659"><span class="nick" style="color:#6d2462"><a href="#160659" label="[16:06:59]">&lt;oriansj&gt;</a></span><span class="message">remember no language is magic. Those easier to bootstrap are closer to the bootstrapping root and those who are harder to bootstrap  just show up later in the tree.</span></div><div class="line" id="161113"><span class="nick" style="color:#6d2462"><a href="#161113" label="[16:11:13]">&lt;oriansj&gt;</a></span><span class="message">and I much prefer unmatched-paren to have a fun experience learning to build a pascal compiler in a language they find fun (like GHC) than having pascal show up lower in the bootstrapping chain (as it doesn't appear even required yet)</span></div><div class="line" id="163353"><span class="nick" style="color:#6d2462"><a href="#163353" label="[16:33:53]">&lt;oriansj&gt;</a></span><span class="message">unless you are here because someone is paying you to bootstrap their software as quickly as possible; your goal should to have as an enjoyable experience bootstrapping as possible.</span></div><div class="line" id="163840"><span class="nick" style="color:#6d2462"><a href="#163840" label="[16:38:40]">&lt;oriansj&gt;</a></span><span class="message">be it writing a Kernel in assembly, bootstrapping assembly in Haskell or just learning as much as possible. Have the fun you want and share with others who might find it neat or useful</span></div><div class="line" id="172221"><span class="nick" style="color:#8dd3c7"><a href="#172221" label="[17:22:21]">&lt;unmatched-paren&gt;</a></span><span class="message">well, i think i'll enjoy it regardless of the language i write it in</span></div><div class="line" id="172241"><span class="nick" style="color:#8dd3c7"><a href="#172241" label="[17:22:41]">&lt;unmatched-paren&gt;</a></span><span class="message">but thank you for all the encouragement oriansj</span></div><div class="line" id="172244"><span class="nick" style="color:#8dd3c7"><a href="#172244" label="[17:22:44]">&lt;unmatched-paren&gt;</a></span><span class="message">:)</span></div><div class="line" id="172737"><span class="nick" style="color:#af8d2f"><a href="#172737" label="[17:27:37]">&lt;unmatche1-paren&gt;</a></span><span class="message">so, i think i'll write it in C, with a QBE backend, and later experiment with perhaps an asm or M1 backend</span></div><div class="line" id="172745"><span class="nick">***</span><span class="message notice">unmatche1-paren is now known as unmatched-paren</span></div><div class="line" id="172830"><span class="nick" style="color:#8dd3c7"><a href="#172830" label="[17:28:30]">&lt;unmatched-paren&gt;</a></span><span class="message">and maybe add optimizations</span></div><div class="line" id="172905"><span class="nick" style="color:#8dd3c7"><a href="#172905" label="[17:29:05]">&lt;unmatched-paren&gt;</a></span><span class="message">obviously these wouldn't be relevant to bootstrapping, but they'd help me learn how it all works</span></div><div class="line" id="173234"><span class="nick" style="color:#8dd3c7"><a href="#173234" label="[17:32:34]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm not sure whether QBE supports inline asm yet though, which would be important to make a runtime library (syscalls etc.)</span></div><div class="line" id="173328"><span class="nick" style="color:#8dd3c7"><a href="#173328" label="[17:33:28]">&lt;unmatched-paren&gt;</a></span><span class="message">for syscalls, i can see an easy solution: add a `syscall` keyword that lets you call arbitrary syscalls</span></div><div class="line" id="173407"><span class="nick" style="color:#8dd3c7"><a href="#173407" label="[17:34:07]">&lt;unmatched-paren&gt;</a></span><span class="message">or just bake the raw syscall functions into the compiler</span></div><div class="line" id="173509"><span class="nick" style="color:#8dd3c7"><a href="#173509" label="[17:35:09]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: i'm not really sure i can say on the readme 'APC is a bootstrap compiler' if it is itself written in a non-bootstrappable language</span></div><div class="line" id="173622"><span class="nick" style="color:#8dd3c7"><a href="#173622" label="[17:36:22]">&lt;unmatched-paren&gt;</a></span><span class="message">and writing a compiler for $lowlevellang in $highlevellang seems like overengineering to me</span></div><div class="line" id="174001"><span class="nick" style="color:#8dd3c7"><a href="#174001" label="[17:40:01]">&lt;unmatched-paren&gt;</a></span><span class="message">hm, i just noticed that Spry is mentioned on the bootstrapping wiki front page, it's written in nim</span></div><div class="line" id="174059"><span class="nick" style="color:#80b1d3"><a href="#174059" label="[17:40:59]">&lt;stikonas&gt;</a></span><span class="message">I think writing compilers and optimizing them might be different skill sets...</span></div><div class="line" id="174122"><span class="nick" style="color:#80b1d3"><a href="#174122" label="[17:41:22]">&lt;stikonas&gt;</a></span><span class="message">e.g. M2-Planet does not do any optimizations</span></div><div class="line" id="174241"><span class="nick" style="color:#8dd3c7"><a href="#174241" label="[17:42:41]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: I am aware that optimization is way harder and unnecessary for bootstrapping :) it'd just be a nice skill to have, and a compiler for a simple (?) language like pascal seems like the perfect testbed</span></div><div class="line" id="174408"><span class="nick" style="color:#8dd3c7"><a href="#174408" label="[17:44:08]">&lt;unmatched-paren&gt;</a></span><span class="message">if i do decide to add them, i'll probably do it in a different branch, to keep the bootstrap APC simple and easy to audit</span></div><div class="line" id="174608"><span class="nick" style="color:#8dd3c7"><a href="#174608" label="[17:46:08]">&lt;unmatched-paren&gt;</a></span><span class="message">since i'm reading through the Dragon Book, which has bits about optimization, i might as well learn how to do it</span></div><div class="line" id="182200"><span class="nick" style="color:#6d2462"><a href="#182200" label="[18:22:00]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: if pascal was a simple language it would be quick to bootstrap.</span></div><div class="line" id="182225"><span class="nick" style="color:#6d2462"><a href="#182225" label="[18:22:25]">&lt;oriansj&gt;</a></span><span class="message">if it has a boatload of hidden complexity, then no I expect it to be harder work</span></div><div class="line" id="182840"><span class="nick" style="color:#8dd3c7"><a href="#182840" label="[18:28:40]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: it seems simple at its core, but of course we need to implement the object-oriented features and modules etc along with it</span></div><div class="line" id="183142"><span class="nick" style="color:#6d2462"><a href="#183142" label="[18:31:42]">&lt;oriansj&gt;</a></span><span class="message">seems and is in reality are two very different things</span></div><div class="line" id="183433"><span class="nick" style="color:#8dd3c7"><a href="#183433" label="[18:34:33]">&lt;unmatched-paren&gt;</a></span><span class="message">we mustn't forget inline assembly, interfaces, generics, C FFI, operator overloading, exceptions, and the preprocessor, too :P</span></div><div class="line" id="183458"><span class="nick" style="color:#8dd3c7"><a href="#183458" label="[18:34:58]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.freepascal.org/docs-html/current/ref/ref.html">https://www.freepascal.org/docs-html/current/ref/ref.html</a> </span></div><div class="line" id="183517"><span class="nick" style="color:#8dd3c7"><a href="#183517" label="[18:35:17]">&lt;unmatched-paren&gt;</a></span><span class="message">^ everything in there, and probably more</span></div><div class="line" id="183557"><span class="nick" style="color:#8dd3c7"><a href="#183557" label="[18:35:57]">&lt;unmatched-paren&gt;</a></span><span class="message">we WILL need C/C++ FFI because fpc calls into LLVM i think</span></div><div class="line" id="183651"><span class="nick" style="color:#8dd3c7"><a href="#183651" label="[18:36:51]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll take it incrementally. as you've said before: bootstrapping is long-term :)</span></div><div class="line" id="183727"><span class="nick" style="color:#8dd3c7"><a href="#183727" label="[18:37:27]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.freepascal.org/docs-html/current/rtl/index.html">https://www.freepascal.org/docs-html/current/rtl/index.html</a>  &lt;- not sure how much of this we'll need</span></div><div class="line" id="185754"><span class="nick" style="color:#80b1d3"><a href="#185754" label="[18:57:54]">&lt;stikonas&gt;</a></span><span class="message">well, inline assembly is always trivial to implement</span></div><div class="line" id="185842"><span class="nick" style="color:#80b1d3"><a href="#185842" label="[18:58:42]">&lt;stikonas&gt;</a></span><span class="message">the other features are harder</span></div><div class="line" id="190006"><span class="nick" style="color:#8dd3c7"><a href="#190006" label="[19:00:06]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: inline asm might be a bit tricky with QBE, i'm not entirely sure; it isn't implemented in cproc yet</span></div><div class="line" id="190038"><span class="nick" style="color:#80b1d3"><a href="#190038" label="[19:00:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure about QBE, maybe it's not so simple there</span></div><div class="line" id="190115"><span class="nick" style="color:#80b1d3"><a href="#190115" label="[19:01:15]">&lt;stikonas&gt;</a></span><span class="message">in M2-Planet it's implemented like this: M2-Planet just reads the asm statement lines and outputs them unchanged</span></div><div class="line" id="190244"><span class="nick" style="color:#8dd3c7"><a href="#190244" label="[19:02:44]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://todo.sr.ht/~mcf/cproc/5">https://todo.sr.ht/~mcf/cproc/5</a> </span></div><div class="line" id="190702"><span class="nick" style="color:#8dd3c7"><a href="#190702" label="[19:07:02]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;these are all major features that need support from QBE&quot; -- mcf in <a rel="nofollow" href="https://todo.sr.ht/~mcf/cproc/62">https://todo.sr.ht/~mcf/cproc/62</a> </span></div><div class="line" id="190721"><span class="nick" style="color:#8dd3c7"><a href="#190721" label="[19:07:21]">&lt;unmatched-paren&gt;</a></span><span class="message">one of these features is inline asm...</span></div><div class="line" id="190819"><span class="nick" style="color:#389600"><a href="#190819" label="[19:08:19]">*</a></span><span class="message">unmatched-paren having second thoughts about using QBE until it supports these (pretty important) features</span></div><div class="line" id="190840"><span class="nick" style="color:#8dd3c7"><a href="#190840" label="[19:08:40]">&lt;unmatched-paren&gt;</a></span><span class="message">maybe i should just generate M1 or asm</span></div><div class="line" id="190843"><span class="nick" style="color:#80b1d3"><a href="#190843" label="[19:08:43]">&lt;stikonas&gt;</a></span><span class="message">well, yes, musl uses some inline asm. Actually tcc also had some trouble with musl's inline asm and I had to patch musl</span></div><div class="line" id="190907"><span class="nick" style="color:#8dd3c7"><a href="#190907" label="[19:09:07]">&lt;unmatched-paren&gt;</a></span><span class="message">is M2's M1 output portable?</span></div><div class="line" id="190920"><span class="nick" style="color:#80b1d3"><a href="#190920" label="[19:09:20]">&lt;stikonas&gt;</a></span><span class="message">different arches have different M1 macros</span></div><div class="line" id="190924"><span class="nick" style="color:#80b1d3"><a href="#190924" label="[19:09:24]">&lt;stikonas&gt;</a></span><span class="message">so not really</span></div><div class="line" id="190934"><span class="nick" style="color:#8dd3c7"><a href="#190934" label="[19:09:34]">&lt;unmatched-paren&gt;</a></span><span class="message">it calls itself a 'Platform Neutral Transpiler' thought</span></div><div class="line" id="190938"><span class="nick" style="color:#80b1d3"><a href="#190938" label="[19:09:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe in the end LLVM will be easiest...</span></div><div class="line" id="190942"><span class="nick" style="color:#8dd3c7"><a href="#190942" label="[19:09:42]">&lt;unmatched-paren&gt;</a></span><span class="message">s/thought/though/</span></div><div class="line" id="191006"><span class="nick" style="color:#80b1d3"><a href="#191006" label="[19:10:06]">&lt;stikonas&gt;</a></span><span class="message">it's mostly if/else blocks that deal with arches in M2</span></div><div class="line" id="191032"><span class="nick" style="color:#80b1d3"><a href="#191032" label="[19:10:32]">&lt;stikonas&gt;</a></span><span class="message">see e.g. here <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L539">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L539</a> </span></div><div class="line" id="191132"><span class="nick" style="color:#8dd3c7"><a href="#191132" label="[19:11:32]">&lt;unmatched-paren&gt;</a></span><span class="message">or i could just do assembly :) it can't be *too* hard, right? muurkha's ur-scheme emits x64 directly and they said they weren't very experienced with compilers</span></div><div class="line" id="191134"><span class="nick" style="color:#80b1d3"><a href="#191134" label="[19:11:34]">&lt;stikonas&gt;</a></span><span class="message">basucally M1 is assmebly</span></div><div class="line" id="191516"><span class="nick" style="color:#8dd3c7"><a href="#191516" label="[19:15:16]">&lt;unmatched-paren&gt;</a></span><span class="message">can GAS handle multiple assembly syntaxes in the same file? fpc supports both att and intel syntax</span></div><div class="line" id="191533"><span class="nick" style="color:#8dd3c7"><a href="#191533" label="[19:15:33]">&lt;unmatched-paren&gt;</a></span><span class="message">for inline asm</span></div><div class="line" id="191605"><span class="nick" style="color:#8dd3c7"><a href="#191605" label="[19:16:05]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, i think it's per-file selection, nvm</span></div><div class="line" id="191721"><span class="nick" style="color:#8dd3c7"><a href="#191721" label="[19:17:21]">&lt;unmatched-paren&gt;</a></span><span class="message">free pascal's dialect is basically P++</span></div><div class="line" id="205835"><span class="nick" style="color:#6d2462"><a href="#205835" label="[20:58:35]">&lt;oriansj&gt;</a></span><span class="message">well the only point of LLVM and QBE is if you wanted to punt having to deal with the assembly details</span></div><div class="line" id="205848"><span class="nick" style="color:#6d2462"><a href="#205848" label="[20:58:48]">&lt;oriansj&gt;</a></span><span class="message">otherwise just output assembly in a form binutils likes and move on</span></div><div class="line" id="205858"><span class="nick" style="color:#6d2462"><a href="#205858" label="[20:58:58]">&lt;oriansj&gt;</a></span><span class="message">(hint text)</span></div><div class="line" id="215034"><span class="nick" style="color:#8dd3c7"><a href="#215034" label="[21:50:34]">&lt;unmatched-paren&gt;</a></span><span class="message">i think i'll start with supporting riscv64</span></div><div class="line" id="215050"><span class="nick" style="color:#8dd3c7"><a href="#215050" label="[21:50:50]">&lt;unmatched-paren&gt;</a></span><span class="message">then i can do x64, and maybe aarch64 if i feel like it</span></div><div class="line" id="215108"><span class="nick" style="color:#8dd3c7"><a href="#215108" label="[21:51:08]">&lt;unmatched-paren&gt;</a></span><span class="message">x64 resources that aren't thousand-page reference manuals are hard to find :/</span></div><div class="line" id="215119"><span class="nick" style="color:#8dd3c7"><a href="#215119" label="[21:51:19]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: do you know any of ^^^ ?</span></div><div class="line" id="221552"><span class="nick" style="color:#80b1d3"><a href="#221552" label="[22:15:52]">&lt;stikonas&gt;</a></span><span class="message">that's because architecture is complicated...</span></div><div class="line" id="221606"><span class="nick" style="color:#80b1d3"><a href="#221606" label="[22:16:06]">&lt;stikonas&gt;</a></span><span class="message">even riscv ISA documentation is something like 150 pages long</span></div><div class="line" id="221813"><span class="nick" style="color:#8dd3c7"><a href="#221813" label="[22:18:13]">&lt;unmatched-paren&gt;</a></span><span class="message">i found a few riscv guides and reference cards, but not many x64 ones</span></div><div class="line" id="221946"><span class="nick" style="color:#80b1d3"><a href="#221946" label="[22:19:46]">&lt;stikonas&gt;</a></span><span class="message">just found some reference card (although multiple pages) <a rel="nofollow" href="https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf">https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf</a> </span></div><div class="line" id="221955"><span class="nick" style="color:#8dd3c7"><a href="#221955" label="[22:19:55]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, nice!</span></div><br /></div></body></html>