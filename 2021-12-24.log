<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="173102"><span class="nick" style="color:#8dd3c7"><a href="#173102" label="[17:31:02]">&lt;doras&gt;</a></span><span class="message">Is there a docker/oci system image (or similar) which can be bootstrapped using a set of publicly available bootstrappable components? Something projects can rely upon to build larger systems?</span></div><div class="line" id="174006"><span class="nick" style="color:#2e2a4a"><a href="#174006" label="[17:40:06]">&lt;stikonas&gt;</a></span><span class="message">doras: live-bootstrap, although we don't have docker mode</span></div><div class="line" id="174015"><span class="nick" style="color:#2e2a4a"><a href="#174015" label="[17:40:15]">&lt;stikonas&gt;</a></span><span class="message">doras: there is chroot mode or qemu mode</span></div><div class="line" id="174040"><span class="nick" style="color:#2e2a4a"><a href="#174040" label="[17:40:40]">&lt;stikonas&gt;</a></span><span class="message">(one could also try running it on real hw but I don't think you are interested in that right now)</span></div><div class="line" id="174052"><span class="nick" style="color:#2e2a4a"><a href="#174052" label="[17:40:52]">&lt;stikonas&gt;</a></span><span class="message">doras: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a> </span></div><div class="line" id="174214"><span class="nick" style="color:#2e2a4a"><a href="#174214" label="[17:42:14]">&lt;stikonas&gt;</a></span><span class="message">well, I guess there are two separate things that one can try with docker images</span></div><div class="line" id="174240"><span class="nick" style="color:#2e2a4a"><a href="#174240" label="[17:42:40]">&lt;stikonas&gt;</a></span><span class="message">1) run live-bootstrap and then put resulting binaries into scratch docker image</span></div><div class="line" id="174306"><span class="nick" style="color:#2e2a4a"><a href="#174306" label="[17:43:06]">&lt;stikonas&gt;</a></span><span class="message">2) create a docker image that contains live-bootstrap's starting sources and run it in docker</span></div><div class="line" id="174326"><span class="nick" style="color:#2e2a4a"><a href="#174326" label="[17:43:26]">&lt;stikonas&gt;</a></span><span class="message">the former is probably simpler</span></div><div class="line" id="174400"><span class="nick" style="color:#2e2a4a"><a href="#174400" label="[17:44:00]">&lt;stikonas&gt;</a></span><span class="message">2. might hit some docker restrictions that are not present in e.g. chroot</span></div><div class="line" id="174516"><span class="nick" style="color:#8dd3c7"><a href="#174516" label="[17:45:16]">&lt;doras&gt;</a></span><span class="message">It would be nice if we could have the resulting image of (1) publicly available somewhere.</span></div><div class="line" id="174656"><span class="nick" style="color:#2e2a4a"><a href="#174656" label="[17:46:56]">&lt;stikonas&gt;</a></span><span class="message">yes, that might be useful, but so far nobody looked at it. If you have some time, you can try, it shouldn't be too hard</span></div><div class="line" id="174900"><span class="nick" style="color:#2e2a4a"><a href="#174900" label="[17:49:00]">&lt;stikonas&gt;</a></span><span class="message">one of the issues is where can we run it and store results</span></div><div class="line" id="174912"><span class="nick" style="color:#2e2a4a"><a href="#174912" label="[17:49:12]">&lt;stikonas&gt;</a></span><span class="message">runnig itself is actually not hard</span></div><div class="line" id="174923"><span class="nick" style="color:#2e2a4a"><a href="#174923" label="[17:49:23]">&lt;stikonas&gt;</a></span><span class="message">the dependencies are fairly minimal</span></div><div class="line" id="175014"><span class="nick" style="color:#2e2a4a"><a href="#175014" label="[17:50:14]">&lt;stikonas&gt;</a></span><span class="message">there rootfs.py script used to download other source tarballs, so it needs python3 and python3-requests and then you need sudo and chroot to run it</span></div><div class="line" id="175055"><span class="nick" style="color:#2e2a4a"><a href="#175055" label="[17:50:55]">&lt;stikonas&gt;</a></span><span class="message">qemu more also needs qemu and cpio</span></div><div class="line" id="175103"><span class="nick" style="color:#2e2a4a"><a href="#175103" label="[17:51:03]">&lt;stikonas&gt;</a></span><span class="message">(and pre-built 32-bit kernel)</span></div><div class="line" id="181746"><span class="nick" style="color:#6b8072"><a href="#181746" label="[18:17:46]">&lt;oriansj&gt;</a></span><span class="message">doras: the short answer is no one has yet had a need for a docker image; so no one made one yet that I know of but it should be rather simple to make such an image.</span></div><div class="line" id="182414"><span class="nick" style="color:#8dd3c7"><a href="#182414" label="[18:24:14]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="182520"><span class="nick" style="color:#8dd3c7"><a href="#182520" label="[18:25:20]">&lt;doras&gt;</a></span><span class="message">An OSTree repo may also be useful to have.</span></div><div class="line" id="201953"><span class="nick" style="color:#8dd3c7"><a href="#201953" label="[20:19:53]">&lt;doras&gt;</a></span><span class="message">stikonas: regarding running it, it's most likely possible to do so using CI.</span></div><div class="line" id="202105"><span class="nick" style="color:#8dd3c7"><a href="#202105" label="[20:21:05]">&lt;doras&gt;</a></span><span class="message">I'm more familiar with GitLab's, which can definitely run QEMU and also has a docker registry where you can store the result.</span></div><div class="line" id="202247"><span class="nick" style="color:#8dd3c7"><a href="#202247" label="[20:22:47]">&lt;doras&gt;</a></span><span class="message">We use it in the freedestop-sdk project (<a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk">https://gitlab.com/freedesktop-sdk/freedesktop-sdk</a>). </span></div><div class="line" id="202411"><span class="nick" style="color:#8dd3c7"><a href="#202411" label="[20:24:11]">&lt;doras&gt;</a></span><span class="message">You can see the source of our Docker-generating CI here: <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images">https://gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images</a> </span></div><div class="line" id="202438"><span class="nick" style="color:#2e2a4a"><a href="#202438" label="[20:24:38]">&lt;stikonas&gt;</a></span><span class="message">doras: neither of the free CI's would let you run it for as long as live-bootstrap needs</span></div><div class="line" id="202454"><span class="nick" style="color:#8dd3c7"><a href="#202454" label="[20:24:54]">&lt;doras&gt;</a></span><span class="message">How long does a usual build require?</span></div><div class="line" id="202456"><span class="nick" style="color:#2e2a4a"><a href="#202456" label="[20:24:56]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap needs more than 2h if you run it in qemu</span></div><div class="line" id="202515"><span class="nick" style="color:#2e2a4a"><a href="#202515" label="[20:25:15]">&lt;stikonas&gt;</a></span><span class="message">even chroot mode is close to 2h on my laptop</span></div><div class="line" id="202549"><span class="nick" style="color:#2e2a4a"><a href="#202549" label="[20:25:49]">&lt;stikonas&gt;</a></span><span class="message">well, it might be a bit quicker if you disable guile at the end...</span></div><div class="line" id="202556"><span class="nick" style="color:#2e2a4a"><a href="#202556" label="[20:25:56]">&lt;stikonas&gt;</a></span><span class="message">guile takes quite a long time</span></div><div class="line" id="202708"><span class="nick" style="color:#8dd3c7"><a href="#202708" label="[20:27:08]">&lt;doras&gt;</a></span><span class="message">We're interested in making our runtime fully bootstrappable. We currently rely on our previous images to build our newer images, with yocto (I think?) being the foreign source used by the first runtime.</span></div><div class="line" id="202747"><span class="nick" style="color:#2e2a4a"><a href="#202747" label="[20:27:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, live-bootstrap can let you start from hex0</span></div><div class="line" id="202806"><span class="nick" style="color:#2e2a4a"><a href="#202806" label="[20:28:06]">&lt;stikonas&gt;</a></span><span class="message">right now it only goes up to GCC 4.7.4 but you can build newer GCC with it</span></div><div class="line" id="202841"><span class="nick" style="color:#2e2a4a"><a href="#202841" label="[20:28:41]">&lt;stikonas&gt;</a></span><span class="message">especially if you are not too worried about pregenerated files in GCC source</span></div><div class="line" id="204620"><span class="nick" style="color:#2e2a4a"><a href="#204620" label="[20:46:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think bootstrappable.org project can be a good base for freedesktop-sdk</span></div><div class="line" id="204628"><span class="nick" style="color:#2e2a4a"><a href="#204628" label="[20:46:28]">&lt;stikonas&gt;</a></span><span class="message">but there is some gap that has to be bridged</span></div><div class="line" id="204657"><span class="nick" style="color:#2e2a4a"><a href="#204657" label="[20:46:57]">&lt;stikonas&gt;</a></span><span class="message">first of all hex0 to gcc bootstrap only works on x86, rest of the arches have to be cross-compiled</span></div><div class="line" id="204749"><span class="nick" style="color:#2e2a4a"><a href="#204749" label="[20:47:49]">&lt;stikonas&gt;</a></span><span class="message">non-x86 arches only have early bootstrap sorted (e.g. hex0 to simple C compiler, either M2-Planet or mescc)</span></div><div class="line" id="204809"><span class="nick" style="color:#2e2a4a"><a href="#204809" label="[20:48:09]">&lt;stikonas&gt;</a></span><span class="message">but nothing else goes to TCC</span></div><div class="line" id="211733"><span class="nick" style="color:#8dd3c7"><a href="#211733" label="[21:17:33]">&lt;doras&gt;</a></span><span class="message">Is the x86 system we have so far enough to cross-compile other architectures?</span></div><div class="line" id="211829"><span class="nick" style="color:#8dd3c7"><a href="#211829" label="[21:18:29]">&lt;doras&gt;</a></span><span class="message">We need aarch64 at minimum, but probably ppc64le and risc-v too.</span></div><div class="line" id="212653"><span class="nick" style="color:#80b1d3"><a href="#212653" label="[21:26:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, GCC on x86 can compile others</span></div><div class="line" id="212827"><span class="nick" style="color:#80b1d3"><a href="#212827" label="[21:28:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Also you need amd64</span></div><div class="line" id="212851"><span class="nick" style="color:#80b1d3"><a href="#212851" label="[21:28:51]">&lt;stikonas[m]&gt;</a></span><span class="message">But it can run x86 code natively</span></div><div class="line" id="213210"><span class="nick" style="color:#8dd3c7"><a href="#213210" label="[21:32:10]">&lt;doras&gt;</a></span><span class="message">I didn't even think about x86_64, it was too obvious.</span></div><div class="line" id="213729"><span class="nick" style="color:#8dd3c7"><a href="#213729" label="[21:37:29]">&lt;doras&gt;</a></span><span class="message">So how would it work? Say we use live-bootstrap in a CI job along with QEMU to produce the base x86 system. What next? We'll need another layer to cross compile similar base systems for other architectures using the x86 base?</span></div><div class="line" id="213748"><span class="nick" style="color:#80b1d3"><a href="#213748" label="[21:37:48]">&lt;stikonas[m]&gt;</a></span><span class="message">x86_64 might be the easiest next arch to build</span></div><div class="line" id="213812"><span class="nick" style="color:#80b1d3"><a href="#213812" label="[21:38:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes I think you produce base x86 image</span></div><div class="line" id="213829"><span class="nick" style="color:#80b1d3"><a href="#213829" label="[21:38:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Then use another layer to cross-build</span></div><div class="line" id="213859"><span class="nick" style="color:#80b1d3"><a href="#213859" label="[21:38:59]">&lt;stikonas[m]&gt;</a></span><span class="message">Or add hook to live bootstrap to run more stuff that you need</span></div><div class="line" id="213959"><span class="nick" style="color:#80b1d3"><a href="#213959" label="[21:39:59]">&lt;stikonas[m]&gt;</a></span><span class="message">We should add something like <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/after.kaem">https://github.com/oriansj/stage0-posix/blob/master/after.kaem</a>  to live-bootstrap</span></div><div class="line" id="214035"><span class="nick" style="color:#80b1d3"><a href="#214035" label="[21:40:35]">&lt;stikonas[m]&gt;</a></span><span class="message">I.e. empty shell file that is run at the end</span></div><div class="line" id="214133"><span class="nick" style="color:#80b1d3"><a href="#214133" label="[21:41:33]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: qemu is actually not required</span></div><div class="line" id="214201"><span class="nick" style="color:#80b1d3"><a href="#214201" label="[21:42:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Can just run in chroot if your hw is x86_64</span></div><div class="line" id="214205"><span class="nick" style="color:#6b8072"><a href="#214205" label="[21:42:05]">&lt;oriansj&gt;</a></span><span class="message">doras: well just getting from hex0 to your runtime on just x86 is a stepping stone to future progress. Which will be made in live-bootstrap as we get more architectures working</span></div><div class="line" id="214218"><span class="nick" style="color:#6b8072"><a href="#214218" label="[21:42:18]">&lt;oriansj&gt;</a></span><span class="message">cross compiling will provide a short term solution</span></div><div class="line" id="214254"><span class="nick" style="color:#6b8072"><a href="#214254" label="[21:42:54]">&lt;oriansj&gt;</a></span><span class="message">a single step in the right direction is more important than doing everything perfectly in a single step.</span></div><div class="line" id="214601"><span class="nick" style="color:#8dd3c7"><a href="#214601" label="[21:46:01]">&lt;doras&gt;</a></span><span class="message">stikonas[m]: Root is an issue for CI.</span></div><div class="line" id="214628"><span class="nick" style="color:#80b1d3"><a href="#214628" label="[21:46:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Then qemu is the way to go...</span></div><div class="line" id="214648"><span class="nick" style="color:#80b1d3"><a href="#214648" label="[21:46:48]">&lt;stikonas[m]&gt;</a></span><span class="message">If you can get nested KVM on your worker</span></div><div class="line" id="214704"><span class="nick" style="color:#80b1d3"><a href="#214704" label="[21:47:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Without KVM it would be too slow</span></div><div class="line" id="214741"><span class="nick" style="color:#8dd3c7"><a href="#214741" label="[21:47:41]">&lt;doras&gt;</a></span><span class="message">KVM works.</span></div><div class="line" id="214840"><span class="nick" style="color:#80b1d3"><a href="#214840" label="[21:48:40]">&lt;stikonas[m]&gt;</a></span><span class="message">User namespaces might be alternative to chroot but nobody tried it yet...</span></div><div class="line" id="214918"><span class="nick" style="color:#80b1d3"><a href="#214918" label="[21:49:18]">&lt;stikonas[m]&gt;</a></span><span class="message">I.e. run live-bootsrap in podman</span></div><div class="line" id="215436"><span class="nick" style="color:#6d2462"><a href="#215436" label="[21:54:36]">&lt;fossy&gt;</a></span><span class="message">i would love to see live-bootstrap used for applications such as this but be aware it is in still some state of flux, many architectural designs are not set in stone</span></div><div class="line" id="215644"><span class="nick" style="color:#6d2462"><a href="#215644" label="[21:56:44]">&lt;fossy&gt;</a></span><span class="message">doras: depending on what the dependency is that uses the previous image to build the newer image, i would run live-bootstrap in QEMU to the end, then cross compile a toolchain and basic system for any other required architectures</span></div><div class="line" id="220123"><span class="nick" style="color:#80b1d3"><a href="#220123" label="[22:01:23]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: maybe worth making a release?</span></div><div class="line" id="220146"><span class="nick" style="color:#6d2462"><a href="#220146" label="[22:01:46]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: hm, maybe</span></div><div class="line" id="220153"><span class="nick" style="color:#80b1d3"><a href="#220153" label="[22:01:53]">&lt;stikonas[m]&gt;</a></span><span class="message">At least git tag...</span></div><div class="line" id="220229"><span class="nick" style="color:#80b1d3"><a href="#220229" label="[22:02:29]">&lt;stikonas[m]&gt;</a></span><span class="message">We do have a working C/C++ compiler</span></div><div class="line" id="220231"><span class="nick" style="color:#6d2462"><a href="#220231" label="[22:02:31]">&lt;fossy&gt;</a></span><span class="message">btw, i'm working on &quot;packaging&quot; each component of live-bootstrap, so that you can jump to any arbitary point in the bootstrap from those pacakges</span></div><div class="line" id="220238"><span class="nick" style="color:#6d2462"><a href="#220238" label="[22:02:38]">&lt;fossy&gt;</a></span><span class="message">to make development easier</span></div><div class="line" id="220244"><span class="nick" style="color:#80b1d3"><a href="#220244" label="[22:02:44]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: oh that's nice</span></div><div class="line" id="220302"><span class="nick" style="color:#80b1d3"><a href="#220302" label="[22:03:02]">&lt;stikonas[m]&gt;</a></span><span class="message">I think bauen tried it bad abandonned</span></div><div class="line" id="220306"><span class="nick" style="color:#6d2462"><a href="#220306" label="[22:03:06]">&lt;fossy&gt;</a></span><span class="message">up until perl in sysc it just uses tar &amp; fakeroot and past that xbps</span></div><div class="line" id="220315"><span class="nick" style="color:#6d2462"><a href="#220315" label="[22:03:15]">&lt;fossy&gt;</a></span><span class="message">i'm open to chnaging from xbps but that's just what i am most familar with</span></div><div class="line" id="220407"><span class="nick" style="color:#80b1d3"><a href="#220407" label="[22:04:07]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh OK, it's slightly different approach</span></div><div class="line" id="220602"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="221825"><span class="nick" style="color:#8dd3c7"><a href="#221825" label="[22:18:25]">&lt;doras&gt;</a></span><span class="message">So why is chroot actually required? Only to have filesystem-level isolation?</span></div><div class="line" id="221924"><span class="nick" style="color:#2e2a4a"><a href="#221924" label="[22:19:24]">&lt;stikonas&gt;</a></span><span class="message">doras: mostly that but we also mount stuff inside chroot</span></div><div class="line" id="221954"><span class="nick" style="color:#2e2a4a"><a href="#221954" label="[22:19:54]">&lt;stikonas&gt;</a></span><span class="message">e.g /tmp, /dev/, etc...</span></div><div class="line" id="222015"><span class="nick" style="color:#2e2a4a"><a href="#222015" label="[22:20:15]">&lt;stikonas&gt;</a></span><span class="message">so if you want to have non-chroot mode, some extra work would be required</span></div><div class="line" id="222048"><span class="nick" style="color:#8dd3c7"><a href="#222048" label="[22:20:48]">&lt;doras&gt;</a></span><span class="message">So does QEMU do &quot;more&quot; boostrapping in comparison to the chroot method? I'm guessing you need to bootstrap a Linux user space too.</span></div><div class="line" id="222118"><span class="nick" style="color:#2e2a4a"><a href="#222118" label="[22:21:18]">&lt;stikonas&gt;</a></span><span class="message">doras: userspace bootstrap is the same, but qemu also at some point later (after gcc) builds linux-libre kernel and boots it</span></div><div class="line" id="222130"><span class="nick" style="color:#2e2a4a"><a href="#222130" label="[22:21:30]">&lt;stikonas&gt;</a></span><span class="message">chroot mode completely skips it</span></div><div class="line" id="222143"><span class="nick" style="color:#2e2a4a"><a href="#222143" label="[22:21:43]">&lt;stikonas&gt;</a></span><span class="message">doras: userspace parts (non-kernel are the same)</span></div><div class="line" id="222203"><span class="nick" style="color:#2e2a4a"><a href="#222203" label="[22:22:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="222226"><span class="nick" style="color:#2e2a4a"><a href="#222226" label="[22:22:26]">&lt;stikonas&gt;</a></span><span class="message">71-74 are skipped in chroot mode</span></div><div class="line" id="222332"><span class="nick" style="color:#8dd3c7"><a href="#222332" label="[22:23:32]">&lt;doras&gt;</a></span><span class="message">Do you need a real /dev for the bootstrap process?</span></div><div class="line" id="222344"><span class="nick" style="color:#2e2a4a"><a href="#222344" label="[22:23:44]">&lt;stikonas&gt;</a></span><span class="message">right now kernel is a blob for bootstrap purposes...</span></div><div class="line" id="222358"><span class="nick" style="color:#2e2a4a"><a href="#222358" label="[22:23:58]">&lt;stikonas&gt;</a></span><span class="message">doras: qemu mode definitely needs it</span></div><div class="line" id="222416"><span class="nick" style="color:#2e2a4a"><a href="#222416" label="[22:24:16]">&lt;stikonas&gt;</a></span><span class="message">because we create a qemu disk that bootstrap process mounts</span></div><div class="line" id="222417"><span class="nick" style="color:#8dd3c7"><a href="#222417" label="[22:24:17]">&lt;doras&gt;</a></span><span class="message">But for chroot?</span></div><div class="line" id="222425"><span class="nick" style="color:#2e2a4a"><a href="#222425" label="[22:24:25]">&lt;stikonas&gt;</a></span><span class="message">let me check</span></div><div class="line" id="222429"><span class="nick" style="color:#2e2a4a"><a href="#222429" label="[22:24:29]">&lt;stikonas&gt;</a></span><span class="message">I don't remember exactly</span></div><div class="line" id="222616"><span class="nick" style="color:#2e2a4a"><a href="#222616" label="[22:26:16]">&lt;stikonas&gt;</a></span><span class="message">doras: we create these nodes <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L170">https://github.com/fosslinux/live-bootstrap/blob/master/sysglobal/helpers.sh#L170</a> </span></div><div class="line" id="222625"><span class="nick" style="color:#2e2a4a"><a href="#222625" label="[22:26:25]">&lt;stikonas&gt;</a></span><span class="message">I guess some configure scripts fail without them</span></div><div class="line" id="222645"><span class="nick" style="color:#2e2a4a"><a href="#222645" label="[22:26:45]">&lt;stikonas&gt;</a></span><span class="message">this might actually be more than what is necessary</span></div><div class="line" id="222649"><span class="nick" style="color:#2e2a4a"><a href="#222649" label="[22:26:49]">&lt;stikonas&gt;</a></span><span class="message">but at least some are needed</span></div><div class="line" id="222743"><span class="nick" style="color:#2e2a4a"><a href="#222743" label="[22:27:43]">&lt;stikonas&gt;</a></span><span class="message">random and urandom are probably not used... Binaries are deterministic anyway</span></div><div class="line" id="222755"><span class="nick" style="color:#2e2a4a"><a href="#222755" label="[22:27:55]">&lt;stikonas&gt;</a></span><span class="message">well, maybe with the exception of guile</span></div><div class="line" id="222759"><span class="nick" style="color:#8dd3c7"><a href="#222759" label="[22:27:59]">&lt;doras&gt;</a></span><span class="message">And do these have to point at the &quot;real&quot; /dev of the running system?</span></div><div class="line" id="222804"><span class="nick" style="color:#2e2a4a"><a href="#222804" label="[22:28:04]">&lt;stikonas&gt;</a></span><span class="message">guile is only deterministic in qemu mode</span></div><div class="line" id="222824"><span class="nick" style="color:#2e2a4a"><a href="#222824" label="[22:28:24]">&lt;stikonas&gt;</a></span><span class="message">doras: they are created inside bootstrap</span></div><div class="line" id="222838"><span class="nick" style="color:#2e2a4a"><a href="#222838" label="[22:28:38]">&lt;stikonas&gt;</a></span><span class="message">so it's kind of a copy</span></div><div class="line" id="222840"><span class="nick" style="color:#8dd3c7"><a href="#222840" label="[22:28:40]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="222848"><span class="nick" style="color:#2e2a4a"><a href="#222848" label="[22:28:48]">&lt;stikonas&gt;</a></span><span class="message">we have mknode inside live-bootstrap</span></div><div class="line" id="222852"><span class="nick" style="color:#2e2a4a"><a href="#222852" label="[22:28:52]">&lt;stikonas&gt;</a></span><span class="message">mknod</span></div><div class="line" id="222923"><span class="nick" style="color:#8dd3c7"><a href="#222923" label="[22:29:23]">&lt;doras&gt;</a></span><span class="message">We actually need binaries to be deterministic/reproducible for caching purposes.</span></div><div class="line" id="222946"><span class="nick" style="color:#2e2a4a"><a href="#222946" label="[22:29:46]">&lt;stikonas&gt;</a></span><span class="message">well, all binaries should be checksumed</span></div><div class="line" id="222955"><span class="nick" style="color:#2e2a4a"><a href="#222955" label="[22:29:55]">&lt;stikonas&gt;</a></span><span class="message">it's just that guile non-trivially depends on the kernel</span></div><div class="line" id="223022"><span class="nick" style="color:#2e2a4a"><a href="#223022" label="[22:30:22]">&lt;stikonas&gt;</a></span><span class="message">in qemu it's fine since we build our own kernel before that</span></div><div class="line" id="223029"><span class="nick" style="color:#2e2a4a"><a href="#223029" label="[22:30:29]">&lt;stikonas&gt;</a></span><span class="message">in chroot mode it's system kernel</span></div><div class="line" id="223058"><span class="nick" style="color:#2e2a4a"><a href="#223058" label="[22:30:58]">&lt;stikonas&gt;</a></span><span class="message">anyway, guile is just built but not used...</span></div><div class="line" id="223108"><span class="nick" style="color:#2e2a4a"><a href="#223108" label="[22:31:08]">&lt;stikonas&gt;</a></span><span class="message">there is nothing in live-bootstrap that depends on guile</span></div><div class="line" id="223208"><span class="nick" style="color:#2e2a4a"><a href="#223208" label="[22:32:08]">&lt;stikonas&gt;</a></span><span class="message">initially it was built so that autogen could be bootstrapped (to regenerate pre-generated <a rel="nofollow" href="https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in">https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in</a>) </span></div><div class="line" id="223249"><span class="nick" style="color:#2e2a4a"><a href="#223249" label="[22:32:49]">&lt;stikonas&gt;</a></span><span class="message">but GNU autogen is not really bootstrappable in no-pregenerated files sense</span></div><div class="line" id="223304"><span class="nick" style="color:#2e2a4a"><a href="#223304" label="[22:33:04]">&lt;stikonas&gt;</a></span><span class="message">so we just ended up with guile in live-bootstrap that is not used</span></div><div class="line" id="223315"><span class="nick" style="color:#2e2a4a"><a href="#223315" label="[22:33:15]">&lt;stikonas&gt;</a></span><span class="message">it might still be useful if once wants to run GNU Guix...</span></div><div class="line" id="223442"><span class="nick" style="color:#2e2a4a"><a href="#223442" label="[22:34:42]">&lt;stikonas&gt;</a></span><span class="message">anyway, eacgh component in live-bootstrap should have checksum file such as <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/gcc-4.0.4/checksums/pass2">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/gcc-4.0.4/checksums/pass2</a> </span></div><div class="line" id="223525"><span class="nick" style="color:#2e2a4a"><a href="#223525" label="[22:35:25]">&lt;stikonas&gt;</a></span><span class="message">although these are manually created and we mostly checksummed just binaries, not text scripts</span></div><div class="line" id="223556"><span class="nick" style="color:#2e2a4a"><a href="#223556" label="[22:35:56]">&lt;stikonas&gt;</a></span><span class="message">still, those should be deterministic</span></div><div class="line" id="223638"><span class="nick" style="color:#8dd3c7"><a href="#223638" label="[22:36:38]">&lt;doras&gt;</a></span><span class="message">I see the checksum is skipped for guile.</span></div><div class="line" id="223651"><span class="nick" style="color:#2e2a4a"><a href="#223651" label="[22:36:51]">&lt;stikonas&gt;</a></span><span class="message">doras: in chroot mode</span></div><div class="line" id="223702"><span class="nick" style="color:#8dd3c7"><a href="#223702" label="[22:37:02]">&lt;doras&gt;</a></span><span class="message">Yes</span></div><div class="line" id="223710"><span class="nick" style="color:#2e2a4a"><a href="#223710" label="[22:37:10]">&lt;stikonas&gt;</a></span><span class="message">it would be good if somebody could patch out dependency on kernel...</span></div><div class="line" id="223718"><span class="nick" style="color:#2e2a4a"><a href="#223718" label="[22:37:18]">&lt;stikonas&gt;</a></span><span class="message">but in qemu mode we are fine</span></div><div class="line" id="223735"><span class="nick" style="color:#2e2a4a"><a href="#223735" label="[22:37:35]">&lt;stikonas&gt;</a></span><span class="message">in general we try to patch all non-determinism out</span></div><div class="line" id="223807"><span class="nick" style="color:#2e2a4a"><a href="#223807" label="[22:38:07]">&lt;stikonas&gt;</a></span><span class="message">e.g. binutils 2.14 was patched out to not include timestamps <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/binutils-2.14/patches/deterministic_binutils.patch">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/binutils-2.14/patches/deterministic_binutils.patch</a> </span></div><div class="line" id="223933"><span class="nick" style="color:#2e2a4a"><a href="#223933" label="[22:39:33]">&lt;stikonas&gt;</a></span><span class="message">but there is always more work than people to do that work...</span></div><div class="line" id="223950"><span class="nick" style="color:#2e2a4a"><a href="#223950" label="[22:39:50]">&lt;stikonas&gt;</a></span><span class="message">especially considering that live-bootstrap is only on of the projects here</span></div><div class="line" id="224010"><span class="nick" style="color:#2e2a4a"><a href="#224010" label="[22:40:10]">&lt;stikonas&gt;</a></span><span class="message">(live-bootstrap scripting is mostly written by fossy and me)</span></div><div class="line" id="224107"><span class="nick" style="color:#8dd3c7"><a href="#224107" label="[22:41:07]">&lt;doras&gt;</a></span><span class="message">I think we can use ushare(2) to allow chroot.</span></div><div class="line" id="224123"><span class="nick" style="color:#8dd3c7"><a href="#224123" label="[22:41:23]">&lt;doras&gt;</a></span><span class="message">unshare(2)*</span></div><div class="line" id="224220"><span class="nick" style="color:#2e2a4a"><a href="#224220" label="[22:42:20]">&lt;stikonas&gt;</a></span><span class="message">one thing that would be nice to have but is not implemented in live-bootstrap is &quot;packages&quot; inside it now we only produce the whole filesystem image with everything in it</span></div><div class="line" id="224248"><span class="nick" style="color:#2e2a4a"><a href="#224248" label="[22:42:48]">&lt;stikonas&gt;</a></span><span class="message">so it might not be easy to take just some binaries out of it</span></div><div class="line" id="224321"><span class="nick" style="color:#2e2a4a"><a href="#224321" label="[22:43:21]">&lt;stikonas&gt;</a></span><span class="message">although, all binaries there are static, so often is just that 1 binary</span></div><div class="line" id="224341"><span class="nick" style="color:#8dd3c7"><a href="#224341" label="[22:43:41]">&lt;doras&gt;</a></span><span class="message">We use BuildStream to achieve something like this, but I bet this is more difficult before you can actually run Python :)</span></div><div class="line" id="224415"><span class="nick" style="color:#2e2a4a"><a href="#224415" label="[22:44:15]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="224424"><span class="nick" style="color:#2e2a4a"><a href="#224424" label="[22:44:24]">&lt;stikonas&gt;</a></span><span class="message">there are other ways but it needs work</span></div><div class="line" id="224434"><span class="nick" style="color:#2e2a4a"><a href="#224434" label="[22:44:34]">&lt;stikonas&gt;</a></span><span class="message">we do have perl</span></div><div class="line" id="224528"><span class="nick" style="color:#2e2a4a"><a href="#224528" label="[22:45:28]">&lt;stikonas&gt;</a></span><span class="message">and also PREFIX variable is supported, so e.g. make install PREFIX=/staging can be used</span></div><div class="line" id="224544"><span class="nick" style="color:#2e2a4a"><a href="#224544" label="[22:45:44]">&lt;stikonas&gt;</a></span><span class="message">to create individual packages inside</span></div><div class="line" id="224617"><span class="nick" style="color:#2e2a4a"><a href="#224617" label="[22:46:17]">&lt;stikonas&gt;</a></span><span class="message">and then maybe use stow for symlinks</span></div><div class="line" id="224653"><span class="nick" style="color:#2e2a4a"><a href="#224653" label="[22:46:53]">&lt;stikonas&gt;</a></span><span class="message">at this point python should be buildable in live-bootstrap</span></div><div class="line" id="224705"><span class="nick" style="color:#2e2a4a"><a href="#224705" label="[22:47:05]">&lt;stikonas&gt;</a></span><span class="message">fossy did have a quick look at it</span></div><div class="line" id="224727"><span class="nick" style="color:#2e2a4a"><a href="#224727" label="[22:47:27]">&lt;stikonas&gt;</a></span><span class="message">need to build older python2 first...</span></div><div class="line" id="225407"><span class="nick" style="color:#8dd3c7"><a href="#225407" label="[22:54:07]">&lt;doras&gt;</a></span><span class="message">We basically need to be able to reach modern GCC, Python, and everything else you'd expect from a minimal but modern development SDK and runtime environment.</span></div><div class="line" id="225605"><span class="nick" style="color:#8dd3c7"><a href="#225605" label="[22:56:05]">&lt;doras&gt;</a></span><span class="message">We currently bootstrap the following using our previous release image: <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/bootstrap/bootstrap.bst">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/bootstrap/bootstrap.bst</a> </span></div><div class="line" id="225611"><span class="nick" style="color:#2e2a4a"><a href="#225611" label="[22:56:11]">&lt;stikonas&gt;</a></span><span class="message">well, at this stage live-bootrap ends somewhere where you might start building linux from scratch</span></div><div class="line" id="225846"><span class="nick" style="color:#2e2a4a"><a href="#225846" label="[22:58:46]">&lt;stikonas&gt;</a></span><span class="message">I think these packages should be buildable</span></div><div class="line" id="225849"><span class="nick" style="color:#8dd3c7"><a href="#225849" label="[22:58:49]">&lt;doras&gt;</a></span><span class="message">Well, a previous &quot;minimal&quot; image called &quot;PreBootstrap&quot;.</span></div><div class="line" id="225856"><span class="nick" style="color:#2e2a4a"><a href="#225856" label="[22:58:56]">&lt;stikonas&gt;</a></span><span class="message">some are already built, but not everything</span></div><div class="line" id="225910"><span class="nick" style="color:#8dd3c7"><a href="#225910" label="[22:59:10]">&lt;doras&gt;</a></span><span class="message">Which contains, in addition to the above, the following: <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst</a> </span></div><div class="line" id="225924"><span class="nick" style="color:#2e2a4a"><a href="#225924" label="[22:59:24]">&lt;stikonas&gt;</a></span><span class="message">you'll probably want to start by re-building toolchain using live-bootstrap image</span></div><div class="line" id="225931"><span class="nick" style="color:#2e2a4a"><a href="#225931" label="[22:59:31]">&lt;stikonas&gt;</a></span><span class="message">i.e. glibc/gcc</span></div><div class="line" id="230000"><span class="nick" style="color:#2e2a4a"><a href="#230000" label="[23:00:00]">&lt;stikonas&gt;</a></span><span class="message">(although gcc 11 can't be directly built, have to build some earlier gcc first, maybe 10)</span></div><div class="line" id="230039"><span class="nick" style="color:#2e2a4a"><a href="#230039" label="[23:00:39]">&lt;stikonas&gt;</a></span><span class="message">ok, we mostly have thse pre-bootstrap.bst packages</span></div><div class="line" id="230052"><span class="nick" style="color:#2e2a4a"><a href="#230052" label="[23:00:52]">&lt;stikonas&gt;</a></span><span class="message">with the exception of last 3 (python, rsync and go)</span></div><div class="line" id="230134"><span class="nick" style="color:#8dd3c7"><a href="#230134" label="[23:01:34]">&lt;doras&gt;</a></span><span class="message">Go comes from a binary at the moment. We can ignore it for now.</span></div><div class="line" id="230205"><span class="nick" style="color:#2e2a4a"><a href="#230205" label="[23:02:05]">&lt;stikonas&gt;</a></span><span class="message">well, go is not hard to bootstrap once you have recent gcc</span></div><div class="line" id="230213"><span class="nick" style="color:#2e2a4a"><a href="#230213" label="[23:02:13]">&lt;stikonas&gt;</a></span><span class="message">or via go 1.4...</span></div><div class="line" id="230221"><span class="nick" style="color:#2e2a4a"><a href="#230221" label="[23:02:21]">&lt;stikonas&gt;</a></span><span class="message">(which is buildable with older gcc too)</span></div><div class="line" id="230240"><span class="nick" style="color:#2e2a4a"><a href="#230240" label="[23:02:40]">&lt;stikonas&gt;</a></span><span class="message">doras: I guess you use rust binary too?</span></div><div class="line" id="230248"><span class="nick" style="color:#8dd3c7"><a href="#230248" label="[23:02:48]">&lt;doras&gt;</a></span><span class="message">Yes</span></div><div class="line" id="230254"><span class="nick" style="color:#2e2a4a"><a href="#230254" label="[23:02:54]">&lt;stikonas&gt;</a></span><span class="message">for librsvg...</span></div><div class="line" id="230315"><span class="nick" style="color:#2e2a4a"><a href="#230315" label="[23:03:15]">&lt;stikonas&gt;</a></span><span class="message">well, that one is in principle bootstrappable (with mrustc) but also takes time</span></div><div class="line" id="230924"><span class="nick" style="color:#8dd3c7"><a href="#230924" label="[23:09:24]">&lt;doras&gt;</a></span><span class="message">I have a strange question. I want to run live-bootstrap locally to see what I get, but it feels... risky.</span></div><div class="line" id="231031"><span class="nick" style="color:#8dd3c7"><a href="#231031" label="[23:10:31]">&lt;doras&gt;</a></span><span class="message">Do I need to worry about running it in my personal system?</span></div><div class="line" id="231139"><span class="nick" style="color:#8dd3c7"><a href="#231139" label="[23:11:39]">&lt;doras&gt;</a></span><span class="message">I usually build things sandboxed.</span></div><div class="line" id="231203"><span class="nick" style="color:#2e2a4a"><a href="#231203" label="[23:12:03]">&lt;stikonas&gt;</a></span><span class="message">doras: no, it should be fine</span></div><div class="line" id="231213"><span class="nick" style="color:#2e2a4a"><a href="#231213" label="[23:12:13]">&lt;stikonas&gt;</a></span><span class="message">unless you actually run it on baremetal</span></div><div class="line" id="231229"><span class="nick" style="color:#8dd3c7"><a href="#231229" label="[23:12:29]">&lt;doras&gt;</a></span><span class="message">I'll try the chroot method.</span></div><div class="line" id="231231"><span class="nick" style="color:#2e2a4a"><a href="#231231" label="[23:12:31]">&lt;stikonas&gt;</a></span><span class="message">chroot and qemu modes should give enough sandboxing</span></div><div class="line" id="231249"><span class="nick" style="color:#2e2a4a"><a href="#231249" label="[23:12:49]">&lt;stikonas&gt;</a></span><span class="message">by baremetal I mean take the created initramfs and boot it</span></div><div class="line" id="231315"><span class="nick" style="color:#2e2a4a"><a href="#231315" label="[23:13:15]">&lt;stikonas&gt;</a></span><span class="message">then it might be dangerous if you reformat the wrong drive</span></div><div class="line" id="231317"><span class="nick" style="color:#8dd3c7"><a href="#231317" label="[23:13:17]">&lt;doras&gt;</a></span><span class="message">Yes, I won't be doing that ;)</span></div><div class="line" id="231403"><span class="nick" style="color:#2e2a4a"><a href="#231403" label="[23:14:03]">&lt;stikonas&gt;</a></span><span class="message">and we create temporary mounts for chroot mode</span></div><div class="line" id="231423"><span class="nick" style="color:#2e2a4a"><a href="#231423" label="[23:14:23]">&lt;stikonas&gt;</a></span><span class="message">so after you exit, nothing should be modified</span></div><div class="line" id="231519"><span class="nick" style="color:#8dd3c7"><a href="#231519" label="[23:15:19]">&lt;doras&gt;</a></span><span class="message">So where should I expect to see the build products?</span></div><div class="line" id="231539"><span class="nick" style="color:#8dd3c7"><a href="#231539" label="[23:15:39]">&lt;doras&gt;</a></span><span class="message">We'll need a sort of &quot;install&quot; mode for this.</span></div><div class="line" id="231634"><span class="nick" style="color:#8dd3c7"><a href="#231634" label="[23:16:34]">&lt;doras&gt;</a></span><span class="message">So the end result of running rootfs.py would be directory containing the sysroot that was bootstrapped.</span></div><div class="line" id="231659"><span class="nick" style="color:#2e2a4a"><a href="#231659" label="[23:16:59]">&lt;stikonas&gt;</a></span><span class="message">doras: right now live-bootstrap finishes and starts interactive bash</span></div><div class="line" id="231710"><span class="nick" style="color:#2e2a4a"><a href="#231710" label="[23:17:10]">&lt;stikonas&gt;</a></span><span class="message">so build products are in those temp directories</span></div><div class="line" id="231816"><span class="nick" style="color:#8dd3c7"><a href="#231816" label="[23:18:16]">&lt;doras&gt;</a></span><span class="message">Temp like tmpfs or just directories you create wherever rootfs.py is executed?</span></div><div class="line" id="231955"><span class="nick" style="color:#2e2a4a"><a href="#231955" label="[23:19:55]">&lt;stikonas&gt;</a></span><span class="message">rootfs.py uses actual tmpfs</span></div><div class="line" id="231956"><span class="nick" style="color:#2e2a4a"><a href="#231956" label="[23:19:56]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L40">https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L40</a> </span></div><div class="line" id="232028"><span class="nick" style="color:#2e2a4a"><a href="#232028" label="[23:20:28]">&lt;stikonas&gt;</a></span><span class="message">mostly to not mess up your system...</span></div><div class="line" id="232038"><span class="nick" style="color:#2e2a4a"><a href="#232038" label="[23:20:38]">&lt;stikonas&gt;</a></span><span class="message">but one can always add other modes...</span></div><div class="line" id="232102"><span class="nick" style="color:#8dd3c7"><a href="#232102" label="[23:21:02]">&lt;doras&gt;</a></span><span class="message">I wonder if we can do that without root...</span></div><div class="line" id="232104"><span class="nick" style="color:#2e2a4a"><a href="#232104" label="[23:21:04]">&lt;stikonas&gt;</a></span><span class="message">and for &quot;install&quot; mode we might want to add a post-live-bootstrap hook</span></div><div class="line" id="232106"><span class="nick" style="color:#8dd3c7"><a href="#232106" label="[23:21:06]">&lt;doras&gt;</a></span><span class="message">I'll try.</span></div><div class="line" id="232127"><span class="nick" style="color:#2e2a4a"><a href="#232127" label="[23:21:27]">&lt;stikonas&gt;</a></span><span class="message">just like stage0-posix has that hook that live-bootstrap replaces to run itself on top of stage0-posix</span></div><div class="line" id="232219"><span class="nick" style="color:#2e2a4a"><a href="#232219" label="[23:22:19]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix are first steps that go from hex0 to simple self-hosting subset of C compiler: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a> </span></div><div class="line" id="232242"><span class="nick" style="color:#2e2a4a"><a href="#232242" label="[23:22:42]">&lt;stikonas&gt;</a></span><span class="message">it's a git submodule in live-bootstrap</span></div><div class="line" id="232301"><span class="nick" style="color:#2e2a4a"><a href="#232301" label="[23:23:01]">&lt;stikonas&gt;</a></span><span class="message">after that tarballs are used (stage0-posix contains simple untar and ungz implementations)</span></div><div class="line" id="232509"><span class="nick" style="color:#6d2462"><a href="#232509" label="[23:25:09]">&lt;fossy&gt;</a></span><span class="message">You can assume reasonable safety from live-bootstrap</span></div><div class="line" id="232605"><span class="nick" style="color:#6d2462"><a href="#232605" label="[23:26:05]">&lt;fossy&gt;</a></span><span class="message">Especially QEMU mode</span></div><div class="line" id="232644"><span class="nick" style="color:#6d2462"><a href="#232644" label="[23:26:44]">&lt;fossy&gt;</a></span><span class="message">Chroot has a small possibility that we might overwrite a disk somehow, but I cant think how that would happen</span></div><div class="line" id="232749"><span class="nick" style="color:#2e2a4a"><a href="#232749" label="[23:27:49]">&lt;stikonas&gt;</a></span><span class="message">I don't see it happening either...</span></div><div class="line" id="232751"><span class="nick" style="color:#8dd3c7"><a href="#232751" label="[23:27:51]">&lt;doras&gt;</a></span><span class="message">Where can I see the build products when running in QEMU?</span></div><div class="line" id="232758"><span class="nick" style="color:#8dd3c7"><a href="#232758" label="[23:27:58]">&lt;doras&gt;</a></span><span class="message">Does it create a disk image or something?</span></div><div class="line" id="232813"><span class="nick" style="color:#2e2a4a"><a href="#232813" label="[23:28:13]">&lt;stikonas&gt;</a></span><span class="message">chroot mode does not create device nodes for hard drives</span></div><div class="line" id="232824"><span class="nick" style="color:#2e2a4a"><a href="#232824" label="[23:28:24]">&lt;stikonas&gt;</a></span><span class="message">doras: there is hard drive image created in sysc stage</span></div><div class="line" id="232833"><span class="nick" style="color:#2e2a4a"><a href="#232833" label="[23:28:33]">&lt;stikonas&gt;</a></span><span class="message">before that it's all in RAM</span></div><div class="line" id="232856"><span class="nick" style="color:#2e2a4a"><a href="#232856" label="[23:28:56]">&lt;stikonas&gt;</a></span><span class="message">getting stuff out of qemu is indeed tricky...</span></div><div class="line" id="232920"><span class="nick" style="color:#2e2a4a"><a href="#232920" label="[23:29:20]">&lt;stikonas&gt;</a></span><span class="message">it's probably easier now that we create disk image in sysc stage</span></div><div class="line" id="232921"><span class="nick" style="color:#8dd3c7"><a href="#232921" label="[23:29:21]">&lt;doras&gt;</a></span><span class="message">It seems creating tmpfs mounts requires some elevated permissions.</span></div><div class="line" id="232936"><span class="nick" style="color:#2e2a4a"><a href="#232936" label="[23:29:36]">&lt;stikonas&gt;</a></span><span class="message">doras: well, you can try without tmpfs mounts</span></div><div class="line" id="232939"><span class="nick" style="color:#2e2a4a"><a href="#232939" label="[23:29:39]">&lt;stikonas&gt;</a></span><span class="message">just create directories</span></div><div class="line" id="233007"><span class="nick" style="color:#2e2a4a"><a href="#233007" label="[23:30:07]">&lt;stikonas&gt;</a></span><span class="message">oh, but right now chroot mode does recursive chroot later</span></div><div class="line" id="233014"><span class="nick" style="color:#6d2462"><a href="#233014" label="[23:30:14]">&lt;fossy&gt;</a></span><span class="message">Yes, you can see the hard drive image</span></div><div class="line" id="233015"><span class="nick" style="color:#2e2a4a"><a href="#233015" label="[23:30:15]">&lt;stikonas&gt;</a></span><span class="message">it chroots from sysa into sysc</span></div><div class="line" id="233041"><span class="nick" style="color:#2e2a4a"><a href="#233041" label="[23:30:41]">&lt;stikonas&gt;</a></span><span class="message">so it's not completely trivial to get rid of root</span></div><div class="line" id="233113"><span class="nick" style="color:#2e2a4a"><a href="#233113" label="[23:31:13]">&lt;stikonas&gt;</a></span><span class="message">if running in docker as root is possibility, you can try that</span></div><div class="line" id="233124"><span class="nick" style="color:#2e2a4a"><a href="#233124" label="[23:31:24]">&lt;stikonas&gt;</a></span><span class="message">but we don't have any scripting yet for that</span></div><div class="line" id="233559"><span class="nick" style="color:#8dd3c7"><a href="#233559" label="[23:35:59]">&lt;doras&gt;</a></span><span class="message">I see it also downloads some sources.</span></div><div class="line" id="233714"><span class="nick" style="color:#2e2a4a"><a href="#233714" label="[23:37:14]">&lt;stikonas&gt;</a></span><span class="message">doras: yes, all those packages that it compiles</span></div><div class="line" id="233717"><span class="nick" style="color:#8dd3c7"><a href="#233717" label="[23:37:17]">&lt;doras&gt;</a></span><span class="message">The Internet is not accessible during our builds, only during the initial source fetch.</span></div><div class="line" id="233744"><span class="nick" style="color:#2e2a4a"><a href="#233744" label="[23:37:44]">&lt;stikonas&gt;</a></span><span class="message">yes, rootfs.py fetches everything after stage0-posix as tarball</span></div><div class="line" id="233849"><span class="nick" style="color:#8dd3c7"><a href="#233849" label="[23:38:49]">&lt;doras&gt;</a></span><span class="message">The definition of &quot;source fetch&quot; is based on the BuildStream plugin, but generally for git repositories it means the repository itself and its submodules.</span></div><div class="line" id="233924"><span class="nick" style="color:#2e2a4a"><a href="#233924" label="[23:39:24]">&lt;stikonas&gt;</a></span><span class="message">well, those tarballs are fetched only once and are later cached</span></div><div class="line" id="233939"><span class="nick" style="color:#2e2a4a"><a href="#233939" label="[23:39:39]">&lt;stikonas&gt;</a></span><span class="message">maybe one can add command line argument to rootfs.py to do --fetch-only</span></div><div class="line" id="234009"><span class="nick" style="color:#2e2a4a"><a href="#234009" label="[23:40:09]">&lt;stikonas&gt;</a></span><span class="message">oh, buildstream plugin wouldn't be able to run roofs.py even if we add --fetch-only?</span></div><div class="line" id="234050"><span class="nick" style="color:#2e2a4a"><a href="#234050" label="[23:40:50]">&lt;stikonas&gt;</a></span><span class="message">doras: although, that should be workaroundable I guess...</span></div><div class="line" id="234109"><span class="nick" style="color:#2e2a4a"><a href="#234109" label="[23:41:09]">&lt;stikonas&gt;</a></span><span class="message">sources directory is cached, rootfs.py does not have to download every time</span></div><div class="line" id="234122"><span class="nick" style="color:#2e2a4a"><a href="#234122" label="[23:41:22]">&lt;stikonas&gt;</a></span><span class="message">if files are there and have the right checksum, it will happily use them</span></div><div class="line" id="234127"><span class="nick" style="color:#8dd3c7"><a href="#234127" label="[23:41:27]">&lt;doras&gt;</a></span><span class="message">If we were to run live-bootstrap in CI, we can't have it fetch sources &quot;at build time&quot;.</span></div><div class="line" id="234220"><span class="nick" style="color:#2e2a4a"><a href="#234220" label="[23:42:20]">&lt;stikonas&gt;</a></span><span class="message">well, then we somehow need to prefetch it before build time</span></div><div class="line" id="234232"><span class="nick" style="color:#8dd3c7"><a href="#234232" label="[23:42:32]">&lt;doras&gt;</a></span><span class="message">So we'll either need to write a plugin just for this that first does &quot;--fetch-only&quot;, or provide the required files ourselves.</span></div><div class="line" id="234249"><span class="nick" style="color:#8dd3c7"><a href="#234249" label="[23:42:49]">&lt;doras&gt;</a></span><span class="message">The former being kind of an overkill.</span></div><div class="line" id="234300"><span class="nick" style="color:#2e2a4a"><a href="#234300" label="[23:43:00]">&lt;stikonas&gt;</a></span><span class="message">yes, the latter is probably simpler</span></div><div class="line" id="234313"><span class="nick" style="color:#2e2a4a"><a href="#234313" label="[23:43:13]">&lt;stikonas&gt;</a></span><span class="message">although file list might change if you move to another commit in live-bootstrap</span></div><div class="line" id="234333"><span class="nick" style="color:#2e2a4a"><a href="#234333" label="[23:43:33]">&lt;stikonas&gt;</a></span><span class="message">s/might/will often/</span></div><div class="line" id="234348"><span class="nick" style="color:#8dd3c7"><a href="#234348" label="[23:43:48]">&lt;doras&gt;</a></span><span class="message">Do you checksum the fetched files?</span></div><div class="line" id="234554"><span class="nick" style="color:#2e2a4a"><a href="#234554" label="[23:45:54]">&lt;stikonas&gt;</a></span><span class="message">doras: yes</span></div><div class="line" id="234616"><span class="nick" style="color:#2e2a4a"><a href="#234616" label="[23:46:16]">&lt;stikonas&gt;</a></span><span class="message">here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L47">https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L47</a> </span></div><div class="line" id="234711"><span class="nick" style="color:#2e2a4a"><a href="#234711" label="[23:47:11]">&lt;stikonas&gt;</a></span><span class="message">doras: although, to be more precise, only rootfs.py checks hash of fetched files</span></div><div class="line" id="234722"><span class="nick" style="color:#2e2a4a"><a href="#234722" label="[23:47:22]">&lt;stikonas&gt;</a></span><span class="message">we didn't do that inside bootstrap</span></div><div class="line" id="234728"><span class="nick" style="color:#2e2a4a"><a href="#234728" label="[23:47:28]">&lt;stikonas&gt;</a></span><span class="message">although we could add that</span></div><div class="line" id="234745"><span class="nick" style="color:#2e2a4a"><a href="#234745" label="[23:47:45]">&lt;stikonas&gt;</a></span><span class="message">the file with checksums is already copied into rootfs</span></div><div class="line" id="234845"><span class="nick" style="color:#8dd3c7"><a href="#234845" label="[23:48:45]">&lt;doras&gt;</a></span><span class="message">You mean it's checked only when initially fetched, or?</span></div><div class="line" id="234930"><span class="nick" style="color:#2e2a4a"><a href="#234930" label="[23:49:30]">&lt;stikonas&gt;</a></span><span class="message">doras: yes</span></div><div class="line" id="234941"><span class="nick" style="color:#2e2a4a"><a href="#234941" label="[23:49:41]">&lt;stikonas&gt;</a></span><span class="message">with python that is on your host system</span></div><div class="line" id="235002"><span class="nick" style="color:#6b8072"><a href="#235002" label="[23:50:02]">&lt;oriansj&gt;</a></span><span class="message">doras: we also build sha256sum before we even use the tars, so we could check prior to use as well</span></div><div class="line" id="235020"><span class="nick" style="color:#2e2a4a"><a href="#235020" label="[23:50:20]">&lt;stikonas&gt;</a></span><span class="message">we build (custom) sha256sum very early in bootstrap (in stage0-posix), so we could use that but right now it's only used to check compiled binaries</span></div><div class="line" id="235042"><span class="nick" style="color:#2e2a4a"><a href="#235042" label="[23:50:42]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's probably sufficient to check outside live-bootstrap</span></div><div class="line" id="235136"><span class="nick" style="color:#8dd3c7"><a href="#235136" label="[23:51:36]">&lt;doras&gt;</a></span><span class="message">So rootfs.py mostly prepares the environment using host tools, and when it's done we jump into bootstrap mode where we're only allowed to use what we build?</span></div><div class="line" id="235434"><span class="nick" style="color:#6b8072"><a href="#235434" label="[23:54:34]">&lt;oriansj&gt;</a></span><span class="message">doras: only use what sources we have downloaded</span></div><div class="line" id="235443"><span class="nick" style="color:#6b8072"><a href="#235443" label="[23:54:43]">&lt;oriansj&gt;</a></span><span class="message">and our root seed</span></div><div class="line" id="235511"><span class="nick" style="color:#8dd3c7"><a href="#235511" label="[23:55:11]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="235537"><span class="nick" style="color:#8dd3c7"><a href="#235537" label="[23:55:37]">&lt;doras&gt;</a></span><span class="message">Also, BuildStream has a built-in source cache, so it's better to do the fetching ourselves anyway. Sources can then be cached and accessible to different CI builders, etc.</span></div><div class="line" id="235608"><span class="nick" style="color:#8dd3c7"><a href="#235608" label="[23:56:08]">&lt;doras&gt;</a></span><span class="message">So maybe we'll need a plugin after all, and some kind of manifest at live-bootstrap's level.</span></div><div class="line" id="235722"><span class="nick" style="color:#2e2a4a"><a href="#235722" label="[23:57:22]">&lt;stikonas&gt;</a></span><span class="message">well, strictly speaking root seed is not just hex0 but also kaem-optional-seed</span></div><div class="line" id="235732"><span class="nick" style="color:#2e2a4a"><a href="#235732" label="[23:57:32]">&lt;stikonas&gt;</a></span><span class="message">but yes we use just those and sources</span></div><div class="line" id="235744"><span class="nick" style="color:#2e2a4a"><a href="#235744" label="[23:57:44]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is basically trivial shell</span></div><div class="line" id="235755"><span class="nick" style="color:#2e2a4a"><a href="#235755" label="[23:57:55]">&lt;stikonas&gt;</a></span><span class="message">it reads list of commands from the file and runs them</span></div><div class="line" id="235813"><span class="nick" style="color:#8dd3c7"><a href="#235813" label="[23:58:13]">&lt;doras&gt;</a></span><span class="message">BuildStream also verifies the checksum of every source it fetches, so a manifest would contain both the source location and expected checksum.</span></div><div class="line" id="235845"><span class="nick" style="color:#2e2a4a"><a href="#235845" label="[23:58:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, I wonder if manifest can be automatically created</span></div><div class="line" id="235916"><span class="nick" style="color:#2e2a4a"><a href="#235916" label="[23:59:16]">&lt;stikonas&gt;</a></span><span class="message">everything is in sys*.py files</span></div><div class="line" id="235926"><span class="nick" style="color:#2e2a4a"><a href="#235926" label="[23:59:26]">&lt;stikonas&gt;</a></span><span class="message">but parsing them without pythin is probably too complicated</span></div><br /></div></body></html>