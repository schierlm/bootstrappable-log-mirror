<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000033"><span class="nick" style="color:#389600"><a href="#000033" label="[00:00:33]">&lt;OriansJ`&gt;</a></span><span class="message">well less bytes in hex0-seed is probably a good idea; things built by hex0 problem benefit more from being easy to understand.</span></div><div class="line" id="000116"><span class="nick" style="color:#389600"><a href="#000116" label="[00:01:16]">&lt;OriansJ`&gt;</a></span><span class="message">although I am tempted to make sin.hex0 part of the bootstrap-seeds</span></div><div class="line" id="000202"><span class="nick" style="color:#389600"><a href="#000202" label="[00:02:02]">&lt;OriansJ`&gt;</a></span><span class="message">as it'll flag all bytes that are not 7-bit ascii characters</span></div><div class="line" id="000240"><span class="nick" style="color:#389600"><a href="#000240" label="[00:02:40]">&lt;OriansJ`&gt;</a></span><span class="message">so that sneeking in unicode or other source hiding tricks impossible from the start.</span></div><div class="line" id="001205"><span class="nick" style="color:#389600"><a href="#001205" label="[00:12:05]">&lt;OriansJ`&gt;</a></span><span class="message">such as the unicode RTL and LTR characters or zero space characters</span></div><div class="line" id="001312"><span class="nick" style="color:#8dd3c7"><a href="#001312" label="[00:13:12]">&lt;stikonas&gt;</a></span><span class="message">wouldn't those affect file size?</span></div><div class="line" id="001332"><span class="nick" style="color:#8dd3c7"><a href="#001332" label="[00:13:32]">&lt;stikonas&gt;</a></span><span class="message">i.e. file size would be bigger by a few bytes</span></div><div class="line" id="001350"><span class="nick" style="color:#8dd3c7"><a href="#001350" label="[00:13:50]">&lt;stikonas&gt;</a></span><span class="message">well, that's one more check your have to do but doesn't seem particularly hard</span></div><div class="line" id="001429"><span class="nick" style="color:#8dd3c7"><a href="#001429" label="[00:14:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe it depends on where the bootstrap is happening</span></div><div class="line" id="001808"><span class="nick" style="color:#389600"><a href="#001808" label="[00:18:08]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: depends if you are just doing an injection, replacement or an ordering attack but they would all result in different binaries with different checksums (which should be huge red flags too)</span></div><div class="line" id="002004"><span class="nick" style="color:#389600"><a href="#002004" label="[00:20:04]">&lt;OriansJ`&gt;</a></span><span class="message">It is mostly just making attacks impossible to hide in an ever shrinking number of places.</span></div><div class="line" id="002105"><span class="nick" style="color:#389600"><a href="#002105" label="[00:21:05]">&lt;OriansJ`&gt;</a></span><span class="message">right now the example stage0 rootkit hooks into the unique read/write a single byte behavior to inject the attack</span></div><div class="line" id="002122"><span class="nick" style="color:#389600"><a href="#002122" label="[00:21:22]">&lt;OriansJ`&gt;</a></span><span class="message">but it requires a compromised kernel to do it</span></div><div class="line" id="002337"><span class="nick" style="color:#389600"><a href="#002337" label="[00:23:37]">&lt;OriansJ`&gt;</a></span><span class="message">(if I remember correctly bauen1 did that work)</span></div><div class="line" id="002417"><span class="nick" style="color:#389600"><a href="#002417" label="[00:24:17]">&lt;OriansJ`&gt;</a></span><span class="message">but bare metal ports would detect such attacks rather easily.</span></div><div class="line" id="050728"><span class="nick" style="color:#6b8072"><a href="#050728" label="[05:07:28]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I haven't looked into the hex+ stages or M2-Planet yet to say how it would be improved.</span></div><div class="line" id="050901"><span class="nick" style="color:#6b8072"><a href="#050901" label="[05:09:01]">&lt;siraben&gt;</a></span><span class="message">However, assuming enough effort, here's my sort of vision for an alternative bootstrapping path via a more FP oriented way: keep the early stages up to the assembler, then write something like blynn-compiler's vm.c in assembly, then bootstrap Scheme on top of the Haskell dialect</span></div><div class="line" id="051043"><span class="nick" style="color:#6b8072"><a href="#051043" label="[05:10:43]">&lt;siraben&gt;</a></span><span class="message">the reasoning being that the earlier we reach a functional language the easier auditing will be, and so would having a typed language that GHC/Haskell 98 accepts</span></div><div class="line" id="051218"><span class="nick" style="color:#6b8072"><a href="#051218" label="[05:12:18]">&lt;siraben&gt;</a></span><span class="message">but that's just my opinion, I think the more diverse paths we have the more confidence we can put on future-proofing our work.</span></div><div class="line" id="051437"><span class="nick" style="color:#6b8072"><a href="#051437" label="[05:14:37]">&lt;siraben&gt;</a></span><span class="message">blynn-compiler even outperforms miranda (an earlier Haskell-like language), presumably when compiled with optimization, <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/miranda.html">https://crypto.stanford.edu/~blynn/compiler/miranda.html</a>  , and I bet a version in assembly would do the same</span></div><div class="line" id="064852"><span class="nick" style="color:#6b8072"><a href="#064852" label="[06:48:52]">&lt;siraben&gt;</a></span><span class="message">Bootstrappable Prolog, anyone? <a rel="nofollow" href="https://github.com/infradig/trealla">https://github.com/infradig/trealla</a> </span></div><div class="line" id="123401"><span class="nick" style="color:#80b1d3"><a href="#123401" label="[12:34:01]">&lt;nore&gt;</a></span><span class="message">I don't know who is in charge of bootstrappable.org, but it seems like https certificates are broken since a few days (2021-02-27)</span></div><div class="line" id="130958"><span class="nick" style="color:#6d2462"><a href="#130958" label="[13:09:58]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: i made a &quot;stage0&quot; &quot;rootkit&quot;, so an evil hex0 that is very similiar but hooks any resulting binaries (and can propagate to some extend)</span></div><div class="line" id="131003"><span class="nick" style="color:#6d2462"><a href="#131003" label="[13:10:03]">&lt;bauen1&gt;</a></span><span class="message">was quite fun to do</span></div><div class="line" id="131446"><span class="nick" style="color:#234e69"><a href="#131446" label="[13:14:46]">&lt;nckx&gt;</a></span><span class="message">nore: Thanks for the report.</span></div><div class="line" id="131550"><span class="nick" style="color:#234e69"><a href="#131550" label="[13:15:50]">&lt;nckx&gt;</a></span><span class="message">It's hosted on berlin.guix.gnu.org but uses a different configuration (dunno why) that can't work, so it will never auto-renew.  Had to shut down the entire Web server.</span></div><div class="line" id="131559"><span class="nick" style="color:#234e69"><a href="#131559" label="[13:15:59]">&lt;nckx&gt;</a></span><span class="message">‘Not great.’</span></div><div class="line" id="135151"><span class="nick" style="color:#389600"><a href="#135151" label="[13:51:51]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: thank you for correcting my mistaken memory.</span></div><div class="line" id="145535"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="145539"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="180055"><span class="nick" style="color:#6c3d55"><a href="#180055" label="[18:00:55]">&lt;pder&gt;</a></span><span class="message">stikonas: I updated my bash branch and rebased it on your binutils branch.  Again, very nice work- things are really coming together.</span></div><div class="line" id="181608"><span class="nick" style="color:#8dd3c7"><a href="#181608" label="[18:16:08]">&lt;stikonas&gt;</a></span><span class="message">pder: well, I guess bash is still not reproducible?</span></div><div class="line" id="181613"><span class="nick" style="color:#8dd3c7"><a href="#181613" label="[18:16:13]">&lt;stikonas&gt;</a></span><span class="message">or does it happen to work?</span></div><div class="line" id="191410"><span class="nick" style="color:#6c3d55"><a href="#191410" label="[19:14:10]">&lt;pder&gt;</a></span><span class="message">what do you mean by reproducible?</span></div><div class="line" id="191440"><span class="nick" style="color:#6c3d55"><a href="#191440" label="[19:14:40]">&lt;pder&gt;</a></span><span class="message">checksums are matching</span></div><div class="line" id="201022"><span class="nick" style="color:#8dd3c7"><a href="#201022" label="[20:10:22]">&lt;stikonas&gt;</a></span><span class="message">pder: sometimes they are not... maybe it doesn't affect bash</span></div><div class="line" id="201050"><span class="nick" style="color:#8dd3c7"><a href="#201050" label="[20:10:50]">&lt;stikonas&gt;</a></span><span class="message">pder: but at the moment ar (and ranlib) do not yet do zero timestamps</span></div><div class="line" id="201108"><span class="nick" style="color:#8dd3c7"><a href="#201108" label="[20:11:08]">&lt;stikonas&gt;</a></span><span class="message">this might not affect executables, but it does affect .a archives</span></div><div class="line" id="201137"><span class="nick" style="color:#8dd3c7"><a href="#201137" label="[20:11:37]">&lt;stikonas&gt;</a></span><span class="message">but maybe timestamps do not propagate to elf files</span></div><div class="line" id="201153"><span class="nick" style="color:#8dd3c7"><a href="#201153" label="[20:11:53]">&lt;stikonas&gt;</a></span><span class="message">I would still like to patch them out before marking PR as ready</span></div><div class="line" id="201218"><span class="nick" style="color:#6c3d55"><a href="#201218" label="[20:12:18]">&lt;pder&gt;</a></span><span class="message">didnt you mention that later binutils has an option for that?</span></div><div class="line" id="201223"><span class="nick" style="color:#6c3d55"><a href="#201223" label="[20:12:23]">&lt;pder&gt;</a></span><span class="message">could that patch be backported?</span></div><div class="line" id="201307"><span class="nick" style="color:#8dd3c7"><a href="#201307" label="[20:13:07]">&lt;stikonas&gt;</a></span><span class="message">pder: kind of... I was doing manual backport (code changed sligthly), but somehow timestampts were still there</span></div><div class="line" id="201313"><span class="nick" style="color:#8dd3c7"><a href="#201313" label="[20:13:13]">&lt;stikonas&gt;</a></span><span class="message">so I'll have to investigate more</span></div><div class="line" id="201341"><span class="nick" style="color:#8dd3c7"><a href="#201341" label="[20:13:41]">&lt;stikonas&gt;</a></span><span class="message">I probably missed some other patch too...</span></div><div class="line" id="201356"><span class="nick" style="color:#6c3d55"><a href="#201356" label="[20:13:56]">&lt;pder&gt;</a></span><span class="message">In any case Ive done several builds of my bash branch both with chroot and in qemu and checksums match</span></div><div class="line" id="201403"><span class="nick" style="color:#8dd3c7"><a href="#201403" label="[20:14:03]">&lt;stikonas&gt;</a></span><span class="message">but basically just need to get rid of stuf like time, user id / group id and file mode</span></div><div class="line" id="201418"><span class="nick" style="color:#8dd3c7"><a href="#201418" label="[20:14:18]">&lt;stikonas&gt;</a></span><span class="message">ok, I guess it doesn't propagate to elfs</span></div><div class="line" id="201429"><span class="nick" style="color:#8dd3c7"><a href="#201429" label="[20:14:29]">&lt;stikonas&gt;</a></span><span class="message">I tried musl, but libc.a is different every time</span></div><div class="line" id="201554"><span class="nick" style="color:#6c3d55"><a href="#201554" label="[20:15:54]">&lt;pder&gt;</a></span><span class="message">Did you try doing a binary diff of libc.a before and after?</span></div><div class="line" id="201605"><span class="nick" style="color:#8dd3c7"><a href="#201605" label="[20:16:05]">&lt;stikonas&gt;</a></span><span class="message">I tried diffoscope</span></div><div class="line" id="201608"><span class="nick" style="color:#8dd3c7"><a href="#201608" label="[20:16:08]">&lt;stikonas&gt;</a></span><span class="message">I think it's just timestamps</span></div><div class="line" id="201611"><span class="nick" style="color:#8dd3c7"><a href="#201611" label="[20:16:11]">&lt;stikonas&gt;</a></span><span class="message">I can even see them in mc</span></div><div class="line" id="201623"><span class="nick" style="color:#8dd3c7"><a href="#201623" label="[20:16:23]">&lt;stikonas&gt;</a></span><span class="message">(midnight commander when I enter .a archive)</span></div><div class="line" id="201636"><span class="nick" style="color:#8dd3c7"><a href="#201636" label="[20:16:36]">&lt;stikonas&gt;</a></span><span class="message">but need to find where they are inserted...</span></div><div class="line" id="201638"><span class="nick" style="color:#6c3d55"><a href="#201638" label="[20:16:38]">&lt;pder&gt;</a></span><span class="message">something like diff -y &lt;(xxd libc.a) &lt;(xxd libc.a-after)</span></div><div class="line" id="201714"><span class="nick" style="color:#8dd3c7"><a href="#201714" label="[20:17:14]">&lt;stikonas&gt;</a></span><span class="message">I think they are taken from object files in our filesystem, so probably some stat call</span></div><div class="line" id="201740"><span class="nick" style="color:#8dd3c7"><a href="#201740" label="[20:17:40]">&lt;stikonas&gt;</a></span><span class="message">although, if bash is reproducible, we can merge binutils and I'll continue looking at this after merge</span></div><div class="line" id="201815"><span class="nick" style="color:#8dd3c7"><a href="#201815" label="[20:18:15]">&lt;stikonas&gt;</a></span><span class="message">and after that I guess can try looking at gcc...</span></div><div class="line" id="201841"><span class="nick" style="color:#8dd3c7"><a href="#201841" label="[20:18:41]">&lt;stikonas&gt;</a></span><span class="message">there is a range of versions that we can try...</span></div><div class="line" id="201941"><span class="nick" style="color:#8dd3c7"><a href="#201941" label="[20:19:41]">&lt;stikonas&gt;</a></span><span class="message">I think 2.95.3 would need tcc-mes (interestingly that one does not use autotools), gcc 3.x or 4.x might be more compatible with tcc-musl</span></div><div class="line" id="202122"><span class="nick" style="color:#6c3d55"><a href="#202122" label="[20:21:22]">&lt;pder&gt;</a></span><span class="message">you dont think musl would work with 2.95.3?</span></div><div class="line" id="210828"><span class="nick" style="color:#d9d9d9"><a href="#210828" label="[21:08:28]">&lt;stikonas[m]&gt;</a></span><span class="message">I briefly tried hit some problems</span></div><div class="line" id="210852"><span class="nick" style="color:#d9d9d9"><a href="#210852" label="[21:08:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Not sure if easy to fix</span></div><div class="line" id="213440"><span class="nick" style="color:#6c3d55"><a href="#213440" label="[21:34:40]">&lt;pder&gt;</a></span><span class="message">stikonas: not sure if you looked at the binutils git repo but here is the commit that introduces deterministic output: 36e4dce69dd23bea9ea225</span></div><div class="line" id="213523"><span class="nick" style="color:#6c3d55"><a href="#213523" label="[21:35:23]">&lt;pder&gt;</a></span><span class="message">maybe we want to patch our binutils so that is the default behavior?</span></div><div class="line" id="213602"><span class="nick" style="color:#6c3d55"><a href="#213602" label="[21:36:02]">&lt;pder&gt;</a></span><span class="message">Here is the git url: git://sourceware.org/git/binutils-gdb.git</span></div><div class="line" id="213817"><span class="nick" style="color:#8dd3c7"><a href="#213817" label="[21:38:17]">&lt;stikonas&gt;</a></span><span class="message">pder: yes, that's what I was looking at on Sunday</span></div><div class="line" id="213828"><span class="nick" style="color:#8dd3c7"><a href="#213828" label="[21:38:28]">&lt;stikonas&gt;</a></span><span class="message">it was not enough</span></div><div class="line" id="213906"><span class="nick" style="color:#8dd3c7"><a href="#213906" label="[21:39:06]">&lt;stikonas&gt;</a></span><span class="message">I might take a look again today, started live-bootstrap now</span></div><div class="line" id="223927"><span class="nick" style="color:#8dd3c7"><a href="#223927" label="[22:39:27]">&lt;stikonas&gt;</a></span><span class="message">pder: argh, I think it was a stupid error on my side</span></div><div class="line" id="223950"><span class="nick" style="color:#8dd3c7"><a href="#223950" label="[22:39:50]">&lt;stikonas&gt;</a></span><span class="message">I was running binutils build script, but it does not call into default_src_prepare</span></div><div class="line" id="223953"><span class="nick" style="color:#8dd3c7"><a href="#223953" label="[22:39:53]">&lt;stikonas&gt;</a></span><span class="message">so nothing was patched</span></div><div class="line" id="224136"><span class="nick" style="color:#8dd3c7"><a href="#224136" label="[22:41:36]">&lt;stikonas&gt;</a></span><span class="message">we should add some echo to applying patches stage</span></div><div class="line" id="224938"><span class="nick">***</span><span class="message notice">V is now known as v</span></div><div class="line" id="225105"><span class="nick">***</span><span class="message notice">v is now known as V</span></div><div class="line" id="225234"><span class="nick">***</span><span class="message notice">edef is now known as EDEF</span></div><div class="line" id="225702"><span class="nick" style="color:#8dd3c7"><a href="#225702" label="[22:57:02]">&lt;stikonas&gt;</a></span><span class="message">pder: ok, it works</span></div><div class="line" id="225745"><span class="nick">***</span><span class="message notice">Noisytoot is now known as N</span></div><div class="line" id="225756"><span class="nick">***</span><span class="message notice">N is now known as Noisytoot</span></div><div class="line" id="225917"><span class="nick" style="color:#6c3d55"><a href="#225917" label="[22:59:17]">&lt;pder&gt;</a></span><span class="message">ahh ok, nice find</span></div><div class="line" id="230329"><span class="nick" style="color:#8dd3c7"><a href="#230329" label="[23:03:29]">&lt;stikonas&gt;</a></span><span class="message">I've also added a commit to print &quot;Applying patch: &quot; message</span></div><div class="line" id="230337"><span class="nick" style="color:#8dd3c7"><a href="#230337" label="[23:03:37]">&lt;stikonas&gt;</a></span><span class="message">to avoid getting into the same situation</span></div><div class="line" id="230454"><span class="nick" style="color:#8dd3c7"><a href="#230454" label="[23:04:54]">&lt;stikonas&gt;</a></span><span class="message">pder: so should I rebuild binutils/tcc?</span></div><div class="line" id="230457"><span class="nick" style="color:#8dd3c7"><a href="#230457" label="[23:04:57]">&lt;stikonas&gt;</a></span><span class="message">or shall we not bother?</span></div><div class="line" id="230503"><span class="nick" style="color:#8dd3c7"><a href="#230503" label="[23:05:03]">&lt;stikonas&gt;</a></span><span class="message">sorry musl/tcc</span></div><div class="line" id="230510"><span class="nick" style="color:#8dd3c7"><a href="#230510" label="[23:05:10]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe we should</span></div><div class="line" id="230514"><span class="nick" style="color:#8dd3c7"><a href="#230514" label="[23:05:14]">&lt;stikonas&gt;</a></span><span class="message">even if we go for gcc..</span></div><div class="line" id="230523"><span class="nick" style="color:#8dd3c7"><a href="#230523" label="[23:05:23]">&lt;stikonas&gt;</a></span><span class="message">tcc was patched to work with this patched musl</span></div><div class="line" id="230526"><span class="nick" style="color:#8dd3c7"><a href="#230526" label="[23:05:26]">&lt;stikonas&gt;</a></span><span class="message">and gcc wouldn't be</span></div><div class="line" id="231936"><span class="nick" style="color:#6c3d55"><a href="#231936" label="[23:19:36]">&lt;pder&gt;</a></span><span class="message">It might be worth trying either way even if it doesn't prove necessary</span></div><div class="line" id="232003"><span class="nick" style="color:#8dd3c7"><a href="#232003" label="[23:20:03]">&lt;stikonas&gt;</a></span><span class="message">yeah, I basically have musl patch now</span></div><div class="line" id="232011"><span class="nick" style="color:#8dd3c7"><a href="#232011" label="[23:20:11]">&lt;stikonas&gt;</a></span><span class="message">musl rebuild</span></div><div class="line" id="232015"><span class="nick" style="color:#8dd3c7"><a href="#232015" label="[23:20:15]">&lt;stikonas&gt;</a></span><span class="message">still need to rebuild tcc...</span></div><div class="line" id="232023"><span class="nick" style="color:#8dd3c7"><a href="#232023" label="[23:20:23]">&lt;stikonas&gt;</a></span><span class="message">might be worth just running tcc's configure script now</span></div><div class="line" id="232035"><span class="nick" style="color:#8dd3c7"><a href="#232035" label="[23:20:35]">&lt;stikonas&gt;</a></span><span class="message">we should have everything for it now (including uname)</span></div><div class="line" id="232126"><span class="nick" style="color:#6c3d55"><a href="#232126" label="[23:21:26]">&lt;pder&gt;</a></span><span class="message">Oh, dirname is also needed for gcc, but its just adding it to the pass2 makefile</span></div><div class="line" id="232132"><span class="nick" style="color:#6c3d55"><a href="#232132" label="[23:21:32]">&lt;pder&gt;</a></span><span class="message">for coreutils</span></div><div class="line" id="232138"><span class="nick" style="color:#8dd3c7"><a href="#232138" label="[23:21:38]">&lt;stikonas&gt;</a></span><span class="message">oh, I think I saw that</span></div><div class="line" id="232144"><span class="nick" style="color:#8dd3c7"><a href="#232144" label="[23:21:44]">&lt;stikonas&gt;</a></span><span class="message">when I tried configure script</span></div><div class="line" id="232149"><span class="nick" style="color:#8dd3c7"><a href="#232149" label="[23:21:49]">&lt;stikonas&gt;</a></span><span class="message">which gcc are you trying?</span></div><div class="line" id="232158"><span class="nick" style="color:#6c3d55"><a href="#232158" label="[23:21:58]">&lt;pder&gt;</a></span><span class="message">I was trying 2.95.3</span></div><div class="line" id="232201"><span class="nick" style="color:#8dd3c7"><a href="#232201" label="[23:22:01]">&lt;stikonas&gt;</a></span><span class="message">oh ok...</span></div><div class="line" id="232218"><span class="nick" style="color:#8dd3c7"><a href="#232218" label="[23:22:18]">&lt;stikonas&gt;</a></span><span class="message">musl or mes?</span></div><div class="line" id="232227"><span class="nick" style="color:#6c3d55"><a href="#232227" label="[23:22:27]">&lt;pder&gt;</a></span><span class="message">I ran into similar problems as with binutils related to certain types like size_t</span></div><div class="line" id="232227"><span class="nick" style="color:#8dd3c7"><a href="#232227" label="[23:22:27]">&lt;stikonas&gt;</a></span><span class="message">with musl I got some error in alltypes.h or something like that</span></div><div class="line" id="232229"><span class="nick" style="color:#6c3d55"><a href="#232229" label="[23:22:29]">&lt;pder&gt;</a></span><span class="message">musl</span></div><div class="line" id="232241"><span class="nick" style="color:#8dd3c7"><a href="#232241" label="[23:22:41]">&lt;stikonas&gt;</a></span><span class="message">oh, ok, maybe the same error</span></div><div class="line" id="232247"><span class="nick" style="color:#8dd3c7"><a href="#232247" label="[23:22:47]">&lt;stikonas&gt;</a></span><span class="message">I had quite a bit more luck with gcc 3</span></div><div class="line" id="232256"><span class="nick" style="color:#8dd3c7"><a href="#232256" label="[23:22:56]">&lt;stikonas&gt;</a></span><span class="message">build was going much further out of box</span></div><div class="line" id="232256"><span class="nick" style="color:#6c3d55"><a href="#232256" label="[23:22:56]">&lt;pder&gt;</a></span><span class="message">The way to fix that is to find the offending type and remove it from config.h</span></div><div class="line" id="232513"><span class="nick" style="color:#8dd3c7"><a href="#232513" label="[23:25:13]">&lt;stikonas&gt;</a></span><span class="message">well, gcc will be our biggest package so far...</span></div><div class="line" id="232537"><span class="nick" style="color:#8dd3c7"><a href="#232537" label="[23:25:37]">&lt;stikonas&gt;</a></span><span class="message">but on the other hand, after it things are almost done</span></div><div class="line" id="232613"><span class="nick" style="color:#8dd3c7"><a href="#232613" label="[23:26:13]">&lt;stikonas&gt;</a></span><span class="message">musl will have to stay as static library for now...</span></div><div class="line" id="232625"><span class="nick" style="color:#6c3d55"><a href="#232625" label="[23:26:25]">&lt;pder&gt;</a></span><span class="message">we will then have to incrementally build gcc, binutils, and glibc until we have a c++ compiler, and then modern gcc</span></div><div class="line" id="232627"><span class="nick" style="color:#8dd3c7"><a href="#232627" label="[23:26:27]">&lt;stikonas&gt;</a></span><span class="message">tcc is not happy with -Wl,-e,_dlstart</span></div><div class="line" id="232655"><span class="nick" style="color:#8dd3c7"><a href="#232655" label="[23:26:55]">&lt;stikonas&gt;</a></span><span class="message">I'm not even sure if we need to build glibc and binutils right now</span></div><div class="line" id="232708"><span class="nick" style="color:#8dd3c7"><a href="#232708" label="[23:27:08]">&lt;stikonas&gt;</a></span><span class="message">we might be able to just build old gcc -&gt; newer gcc -&gt; even newer gcc</span></div><div class="line" id="232710"><span class="nick" style="color:#8dd3c7"><a href="#232710" label="[23:27:10]">&lt;stikonas&gt;</a></span><span class="message">or something like that</span></div><div class="line" id="232718"><span class="nick" style="color:#8dd3c7"><a href="#232718" label="[23:27:18]">&lt;stikonas&gt;</a></span><span class="message">and then worry about binutils and libc</span></div><div class="line" id="232724"><span class="nick" style="color:#8dd3c7"><a href="#232724" label="[23:27:24]">&lt;stikonas&gt;</a></span><span class="message">well, we'll see</span></div><div class="line" id="232731"><span class="nick" style="color:#8dd3c7"><a href="#232731" label="[23:27:31]">&lt;stikonas&gt;</a></span><span class="message">unlike guix bootstrap, we already have modern libc</span></div><div class="line" id="232807"><span class="nick" style="color:#8dd3c7"><a href="#232807" label="[23:28:07]">&lt;stikonas&gt;</a></span><span class="message">but maybe old glibc will be more compatible...</span></div><div class="line" id="232857"><span class="nick" style="color:#6c3d55"><a href="#232857" label="[23:28:57]">&lt;pder&gt;</a></span><span class="message">it will take some experimenting for sure</span></div><div class="line" id="234807"><span class="nick" style="color:#8dd3c7"><a href="#234807" label="[23:48:07]">&lt;stikonas&gt;</a></span><span class="message">pder: oh I think I also saw some problems with sed when trying to configure gcc...</span></div><div class="line" id="234822"><span class="nick" style="color:#8dd3c7"><a href="#234822" label="[23:48:22]">&lt;stikonas&gt;</a></span><span class="message">I think it's still built with mes</span></div><br /></div></body></html>