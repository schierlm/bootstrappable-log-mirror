<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002959"><span class="nick" style="color:#389600"><a href="#002959" label="[00:29:59]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I was thinking of moving the check for number of arguments to the actual functions themselves and with it reduce the types of function pointers to a single version which accepts a single argument.</span></div><div class="line" id="003229"><span class="nick" style="color:#389600"><a href="#003229" label="[00:32:29]">&lt;OriansJ&gt;</a></span><span class="message">I have demo'd the sort of change in vector_set_x</span></div><div class="line" id="003334"><span class="nick" style="color:#389600"><a href="#003334" label="[00:33:34]">&lt;OriansJ&gt;</a></span><span class="message">as you can see in my latest commit</span></div><div class="line" id="003623"><span class="nick" style="color:#389600"><a href="#003623" label="[00:36:23]">&lt;OriansJ&gt;</a></span><span class="message">I've also noticed some places where you made a cell to point to a value, only to just jump through a hoop to get that value; I've removed a couple of those cases and with it made mes-m2 even more memory efficient</span></div><div class="line" id="121736"><span class="nick" style="color:#389600"><a href="#121736" label="[12:17:36]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: correction, the strnlen turns out to be a bug of my own making &gt;.&lt;</span></div><div class="line" id="123933"><span class="nick" style="color:#2e2a4a"><a href="#123933" label="[12:39:33]">&lt;janneke&gt;</a></span><span class="message">OriansJ: oh, that's a bigger change that i thought, i'll have a look tonight!</span></div><div class="line" id="143200"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="173803"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="190927"><span class="nick" style="color:#2e2a4a"><a href="#190927" label="[19:09:27]">&lt;janneke&gt;</a></span><span class="message">OriansJ: ah, yes vector_set_x i looked at all kinds of other stuff and got lost this morning :)</span></div><div class="line" id="190954"><span class="nick" style="color:#2e2a4a"><a href="#190954" label="[19:09:54]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i have been wondering about this, esp after reading your slow lisp</span></div><div class="line" id="191056"><span class="nick" style="color:#2e2a4a"><a href="#191056" label="[19:10:56]">&lt;janneke&gt;</a></span><span class="message">OriansJ: it could make things cleaner/easier, there is only one puzzle that i have</span></div><div class="line" id="191220"><span class="nick" style="color:#2e2a4a"><a href="#191220" label="[19:12:20]">&lt;janneke&gt;</a></span><span class="message">OriansJ: what if a scheme program calls a primitive function with the wrong number of arguments, can we still catch that?  it is OK for correct programs, but catching an error early can be very helpful</span></div><div class="line" id="191606"><span class="nick" style="color:#2e2a4a"><a href="#191606" label="[19:16:06]">&lt;janneke&gt;</a></span><span class="message">maybe we can keep the `parity' information, and only (optionally?) check that in check_formals?  would that still make things faster/easier?</span></div><div class="line" id="210835"><span class="nick" style="color:#389600"><a href="#210835" label="[21:08:35]">&lt;OriansJ&gt;</a></span><span class="message">janneke: well determining the wrong number of arguments by being put into the primitive function themselves would allow make-vector be able to support both the (make-vector 4) and (make-vector 4 (cons 1 2)) cases</span></div><div class="line" id="210927"><span class="nick" style="color:#389600"><a href="#210927" label="[21:09:27]">&lt;OriansJ&gt;</a></span><span class="message">and for those that don't need to check, skip the check_formals entirely (aka + and - don't need to care)</span></div><div class="line" id="211051"><span class="nick" style="color:#2e2a4a"><a href="#211051" label="[21:10:51]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes</span></div><div class="line" id="211155"><span class="nick" style="color:#2e2a4a"><a href="#211155" label="[21:11:55]">&lt;janneke&gt;</a></span><span class="message">i was just wondering if we would lose something valuable, error reporting is nice</span></div><div class="line" id="211229"><span class="nick" style="color:#389600"><a href="#211229" label="[21:12:29]">&lt;OriansJ&gt;</a></span><span class="message">we don't have to give up the error reporting</span></div><div class="line" id="211300"><span class="nick" style="color:#389600"><a href="#211300" label="[21:13:00]">&lt;OriansJ&gt;</a></span><span class="message">I could add error reporting to Slow_lisp to show you what it could look like if that would make it easier to see?</span></div><div class="line" id="211456"><span class="nick" style="color:#2e2a4a"><a href="#211456" label="[21:14:56]">&lt;janneke&gt;</a></span><span class="message">OriansJ: ah that's not necessary, i'm not even opposing your proposal, just asking</span></div><div class="line" id="211532"><span class="nick" style="color:#389600"><a href="#211532" label="[21:15:32]">&lt;OriansJ&gt;</a></span><span class="message">Honestly, I want mes-m2 to be as fun and easy to use as possible</span></div><div class="line" id="211733"><span class="nick" style="color:#2e2a4a"><a href="#211733" label="[21:17:33]">&lt;janneke&gt;</a></span><span class="message">yes, that's amply clear -- you are doing amazing work</span></div><div class="line" id="211908"><span class="nick" style="color:#389600"><a href="#211908" label="[21:19:08]">&lt;OriansJ&gt;</a></span><span class="message">I still haven't figured out a good guile compatible test for make-struct yet</span></div><div class="line" id="212127"><span class="nick" style="color:#389600"><a href="#212127" label="[21:21:27]">&lt;OriansJ&gt;</a></span><span class="message">as I want all of the mes-m2 primitives to behave exactly like guile's; to make porting of guix to mes-m2 as simple as possible</span></div><div class="line" id="212411"><span class="nick" style="color:#389600"><a href="#212411" label="[21:24:11]">&lt;OriansJ&gt;</a></span><span class="message">plus I still need to get back to slow-utils and finish off the pieces limiting us from eliminating all binaries save for guile</span></div><div class="line" id="215017"><span class="nick" style="color:#389600"><a href="#215017" label="[21:50:17]">&lt;OriansJ&gt;</a></span><span class="message">plus I still need to do an analysis of mes-m2 to ensure proper lexical binding in all scopes</span></div><div class="line" id="215113"><span class="nick" style="color:#389600"><a href="#215113" label="[21:51:13]">&lt;OriansJ&gt;</a></span><span class="message">I don't know about you janneke but some days I feel like the more I achieve, the more that just seems to keep piling up</span></div><div class="line" id="215207"><span class="nick" style="color:#2e2a4a"><a href="#215207" label="[21:52:07]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes...i have started to look into mes-m2 yesterday and again today</span></div><div class="line" id="215243"><span class="nick" style="color:#2e2a4a"><a href="#215243" label="[21:52:43]">&lt;janneke&gt;</a></span><span class="message">it's been a long time that i actually looked at mes core, i've been bootstrapping and doing mescc mainly for quite some time</span></div><div class="line" id="215346"><span class="nick" style="color:#2e2a4a"><a href="#215346" label="[21:53:46]">&lt;janneke&gt;</a></span><span class="message">seeing all the work you have done is inspiring and scary</span></div><div class="line" id="215414"><span class="nick" style="color:#389600"><a href="#215414" label="[21:54:14]">&lt;OriansJ&gt;</a></span><span class="message">why scary?</span></div><div class="line" id="215441"><span class="nick" style="color:#2e2a4a"><a href="#215441" label="[21:54:41]">&lt;janneke&gt;</a></span><span class="message">just now i was wondering whether i would be able to revert the order of some of your latest patches</span></div><div class="line" id="215508"><span class="nick" style="color:#2e2a4a"><a href="#215508" label="[21:55:08]">&lt;janneke&gt;</a></span><span class="message">first finishing the struct-based work and having the 'major change in behaviour' float on top of that</span></div><div class="line" id="215603"><span class="nick" style="color:#389600"><a href="#215603" label="[21:56:03]">&lt;OriansJ&gt;</a></span><span class="message">well I was expecting for mes-m2 to be in a broken state for a little bit</span></div><div class="line" id="215606"><span class="nick" style="color:#2e2a4a"><a href="#215606" label="[21:56:06]">&lt;janneke&gt;</a></span><span class="message">it would be nice to have mes-m2 folded back into mes, and compile it with M2 and run the bootstrap (me dreaming)</span></div><div class="line" id="215653"><span class="nick" style="color:#2e2a4a"><a href="#215653" label="[21:56:53]">&lt;janneke&gt;</a></span><span class="message">yeah...seeing what work you are taking on is really great, but it could take a year to stabilize, i dunno</span></div><div class="line" id="215735"><span class="nick" style="color:#389600"><a href="#215735" label="[21:57:35]">&lt;OriansJ&gt;</a></span><span class="message">well once all of the primitives have tests</span></div><div class="line" id="215736"><span class="nick" style="color:#2e2a4a"><a href="#215736" label="[21:57:36]">&lt;janneke&gt;</a></span><span class="message">otoh, the big restructuring is inspiring, mes toplevel is crap</span></div><div class="line" id="215804"><span class="nick" style="color:#389600"><a href="#215804" label="[21:58:04]">&lt;OriansJ&gt;</a></span><span class="message">I can hammer out most of the details over a weekend</span></div><div class="line" id="215824"><span class="nick" style="color:#389600"><a href="#215824" label="[21:58:24]">&lt;OriansJ&gt;</a></span><span class="message">comparing the mes-m2 behavior exactly gainst guile</span></div><div class="line" id="215826"><span class="nick" style="color:#2e2a4a"><a href="#215826" label="[21:58:26]">&lt;janneke&gt;</a></span><span class="message">mes toplevel is tied together somewhat with the primitives, and also with macro-expansion</span></div><div class="line" id="215913"><span class="nick" style="color:#2e2a4a"><a href="#215913" label="[21:59:13]">&lt;janneke&gt;</a></span><span class="message">it would be nice if we could move macro expansion completely out of the C core</span></div><div class="line" id="215916"><span class="nick" style="color:#389600"><a href="#215916" label="[21:59:16]">&lt;OriansJ&gt;</a></span><span class="message">well, when I am done; you should be able to use the exact same code for guile and mes-m2</span></div><div class="line" id="220011"><span class="nick" style="color:#389600"><a href="#220011" label="[22:00:11]">&lt;OriansJ&gt;</a></span><span class="message">and when I understand the macro expansion better; I'll figure out the correct solution</span></div><div class="line" id="220043"><span class="nick" style="color:#389600"><a href="#220043" label="[22:00:43]">&lt;OriansJ&gt;</a></span><span class="message">if macro expansion in the C core is essential, so be it</span></div><div class="line" id="220128"><span class="nick" style="color:#2e2a4a"><a href="#220128" label="[22:01:28]">&lt;janneke&gt;</a></span><span class="message">what guile does, is basically load psyntax; that creates most of `guile' on top of the primitives</span></div><div class="line" id="220158"><span class="nick" style="color:#2e2a4a"><a href="#220158" label="[22:01:58]">&lt;janneke&gt;</a></span><span class="message">guile has some variable and module handling in its C core for that</span></div><div class="line" id="220254"><span class="nick" style="color:#2e2a4a"><a href="#220254" label="[22:02:54]">&lt;janneke&gt;</a></span><span class="message">psyntax defines syntax-case, which defines syntax-rules and define-macro etc.</span></div><div class="line" id="220300"><span class="nick" style="color:#389600"><a href="#220300" label="[22:03:00]">&lt;OriansJ&gt;</a></span><span class="message">at the same time we can solve the psyntax problem by supporting enough guile in C code.</span></div><div class="line" id="220426"><span class="nick" style="color:#389600"><a href="#220426" label="[22:04:26]">&lt;OriansJ&gt;</a></span><span class="message">So, I am more than willing to throw hours at the problem but it would be must easier for me if someone more familiar with guile's behavior quirks helped with the writing of tests</span></div><div class="line" id="220452"><span class="nick" style="color:#389600"><a href="#220452" label="[22:04:52]">&lt;OriansJ&gt;</a></span><span class="message">^must^much^</span></div><div class="line" id="220617"><span class="nick" style="color:#389600"><a href="#220617" label="[22:06:17]">&lt;OriansJ&gt;</a></span><span class="message">If I end up needing to fork guile 1.0 or do something crazy to solve the problem so be it</span></div><div class="line" id="220653"><span class="nick" style="color:#2e2a4a"><a href="#220653" label="[22:06:53]">&lt;janneke&gt;</a></span><span class="message">i looked at that, the first guile releases :-)</span></div><div class="line" id="220724"><span class="nick" style="color:#2e2a4a"><a href="#220724" label="[22:07:24]">&lt;janneke&gt;</a></span><span class="message">it's very possible we would end up stealing some code from guile and still stay m2/mes and minimal</span></div><div class="line" id="220803"><span class="nick" style="color:#389600"><a href="#220803" label="[22:08:03]">&lt;OriansJ&gt;</a></span><span class="message">well it would be importing since mes-m2 is GPLv3 and I believe the FSF have licensed guile as GPLv3</span></div><div class="line" id="220856"><span class="nick" style="color:#389600"><a href="#220856" label="[22:08:56]">&lt;OriansJ&gt;</a></span><span class="message">The work I can do (provided I know what the correct behavior is)</span></div><div class="line" id="220925"><span class="nick" style="color:#389600"><a href="#220925" label="[22:09:25]">&lt;OriansJ&gt;</a></span><span class="message">This is the last major piece of the bootstrap anyways</span></div><div class="line" id="220957"><span class="nick" style="color:#389600"><a href="#220957" label="[22:09:57]">&lt;OriansJ&gt;</a></span><span class="message">so it is only fitting that it is the one which takes the most effort</span></div><div class="line" id="221013"><span class="nick" style="color:#2e2a4a"><a href="#221013" label="[22:10:13]">&lt;janneke&gt;</a></span><span class="message">previously, i have given up on psyntax as a feasible route aften spending much time (a couple of months)</span></div><div class="line" id="221032"><span class="nick" style="color:#2e2a4a"><a href="#221032" label="[22:10:32]">&lt;janneke&gt;</a></span><span class="message">but mes was slow then</span></div><div class="line" id="221109"><span class="nick" style="color:#2e2a4a"><a href="#221109" label="[22:11:09]">&lt;janneke&gt;</a></span><span class="message">and psyntax has its own bootstrap problem -- however that might be OK and we might have someone else try to solve that for us later</span></div><div class="line" id="221123"><span class="nick" style="color:#389600"><a href="#221123" label="[22:11:23]">&lt;OriansJ&gt;</a></span><span class="message">janneke: we already have a solution</span></div><div class="line" id="221204"><span class="nick" style="color:#2e2a4a"><a href="#221204" label="[22:12:04]">&lt;janneke&gt;</a></span><span class="message">ah right, you mentioned bootstrapping psyntax</span></div><div class="line" id="221223"><span class="nick" style="color:#389600"><a href="#221223" label="[22:12:23]">&lt;OriansJ&gt;</a></span><span class="message">by simply running the scheme code used to generate psyntax</span></div><div class="line" id="221345"><span class="nick" style="color:#2e2a4a"><a href="#221345" label="[22:13:45]">&lt;janneke&gt;</a></span><span class="message">yes, sure, but thats ~30,000 lines of opaque scheme -- not really &quot;source&quot;</span></div><div class="line" id="221403"><span class="nick" style="color:#389600"><a href="#221403" label="[22:14:03]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wingolog.org/archives/2009/03/12/on-psyntax">https://wingolog.org/archives/2009/03/12/on-psyntax</a> </span></div><div class="line" id="221542"><span class="nick" style="color:#389600"><a href="#221542" label="[22:15:42]">&lt;OriansJ&gt;</a></span><span class="message">which means when we add enough guile functionality to mes-m2, we can directly run the source used to generate psyntax</span></div><div class="line" id="221621"><span class="nick" style="color:#2e2a4a"><a href="#221621" label="[22:16:21]">&lt;janneke&gt;</a></span><span class="message">sure</span></div><div class="line" id="221725"><span class="nick" style="color:#2e2a4a"><a href="#221725" label="[22:17:25]">&lt;janneke&gt;</a></span><span class="message">it will work and run, and we can re-create it, but we still load this huge expanded psyntax code to bootstrap</span></div><div class="line" id="221743"><span class="nick" style="color:#2e2a4a"><a href="#221743" label="[22:17:43]">&lt;janneke&gt;</a></span><span class="message">when i have up on psyntax i was hoping to find a nicer solution, or do without syntax-case</span></div><div class="line" id="221812"><span class="nick" style="color:#389600"><a href="#221812" label="[22:18:12]">&lt;OriansJ&gt;</a></span><span class="message">now it would be easier if we had someone willing to simplify that scheme code to be more scheme neutral so we wouldn't need to add support for syntax-case</span></div><div class="line" id="221819"><span class="nick" style="color:#2e2a4a"><a href="#221819" label="[22:18:19]">&lt;janneke&gt;</a></span><span class="message">however, i'm willing to give it another go and reach 100% guile compatibility</span></div><div class="line" id="221936"><span class="nick" style="color:#2e2a4a"><a href="#221936" label="[22:19:36]">&lt;janneke&gt;</a></span><span class="message">yeah, that's another possibility</span></div><div class="line" id="221949"><span class="nick" style="color:#2e2a4a"><a href="#221949" label="[22:19:49]">&lt;janneke&gt;</a></span><span class="message">also we don't have to solve everything at once, by ourselves</span></div><div class="line" id="222000"><span class="nick" style="color:#389600"><a href="#222000" label="[22:20:00]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="222021"><span class="nick" style="color:#389600"><a href="#222021" label="[22:20:21]">&lt;OriansJ&gt;</a></span><span class="message">plus we can revert to the KFFD algorithm for macro expansion as it is simpler (but slower)</span></div><div class="line" id="222130"><span class="nick" style="color:#2e2a4a"><a href="#222130" label="[22:21:30]">&lt;janneke&gt;</a></span><span class="message">yes</span></div><div class="line" id="222305"><span class="nick" style="color:#389600"><a href="#222305" label="[22:23:05]">&lt;OriansJ&gt;</a></span><span class="message">but as always we have lots of room to work with in mes-m2 and the immediate goals should be our top focus</span></div><div class="line" id="222320"><span class="nick" style="color:#389600"><a href="#222320" label="[22:23:20]">&lt;OriansJ&gt;</a></span><span class="message">1) Solid tests for every primitive exposed</span></div><div class="line" id="222347"><span class="nick" style="color:#389600"><a href="#222347" label="[22:23:47]">&lt;OriansJ&gt;</a></span><span class="message">2) matching behavior to guile</span></div><div class="line" id="222419"><span class="nick" style="color:#389600"><a href="#222419" label="[22:24:19]">&lt;OriansJ&gt;</a></span><span class="message">3) M2-Planet compatibility</span></div><div class="line" id="222815"><span class="nick" style="color:#389600"><a href="#222815" label="[22:28:15]">&lt;OriansJ&gt;</a></span><span class="message">Then we can push towards 100% guix compatibility and finally then work to solve 100% compatibility</span></div><div class="line" id="222853"><span class="nick" style="color:#389600"><a href="#222853" label="[22:28:53]">&lt;OriansJ&gt;</a></span><span class="message">as mes-m2 is going to freeze after we get MesCC and guix running on it</span></div><div class="line" id="222913"><span class="nick" style="color:#389600"><a href="#222913" label="[22:29:13]">&lt;OriansJ&gt;</a></span><span class="message">(Or simply tag a release for bootstrapping)</span></div><div class="line" id="222951"><span class="nick" style="color:#389600"><a href="#222951" label="[22:29:51]">&lt;OriansJ&gt;</a></span><span class="message">that way when we push for 100% guile compatibility we can assume GCC (or MesCC)</span></div><div class="line" id="223118"><span class="nick" style="color:#2e2a4a"><a href="#223118" label="[22:31:18]">&lt;janneke&gt;</a></span><span class="message">yes, 1, 2, 3 are good targets</span></div><div class="line" id="223143"><span class="nick" style="color:#2e2a4a"><a href="#223143" label="[22:31:43]">&lt;janneke&gt;</a></span><span class="message">i was skimming through guile-2.0 and guile-2.2's psyntax</span></div><div class="line" id="223227"><span class="nick" style="color:#2e2a4a"><a href="#223227" label="[22:32:27]">&lt;janneke&gt;</a></span><span class="message">guile-2.0 needs letrec, guile-2.2 needs letrec*; both need structs, module and variable primitives</span></div><div class="line" id="223256"><span class="nick" style="color:#389600"><a href="#223256" label="[22:32:56]">&lt;OriansJ&gt;</a></span><span class="message">no problem</span></div><div class="line" id="223312"><span class="nick" style="color:#2e2a4a"><a href="#223312" label="[22:33:12]">&lt;janneke&gt;</a></span><span class="message">yes, that's what i'm thinking now too</span></div><div class="line" id="223410"><span class="nick" style="color:#2e2a4a"><a href="#223410" label="[22:34:10]">&lt;janneke&gt;</a></span><span class="message">after ~400 lines of boot-9.scm, guile just loads psyntax -- so all the primitives we need for 100% compatibility are in that bit of code</span></div><div class="line" id="223456"><span class="nick" style="color:#389600"><a href="#223456" label="[22:34:56]">&lt;OriansJ&gt;</a></span><span class="message">good</span></div><div class="line" id="223552"><span class="nick" style="color:#2e2a4a"><a href="#223552" label="[22:35:52]">&lt;janneke&gt;</a></span><span class="message">we don't need 100% guile feature coverage, of course -- just 100% compatibility</span></div><div class="line" id="223609"><span class="nick" style="color:#389600"><a href="#223609" label="[22:36:09]">&lt;OriansJ&gt;</a></span><span class="message">for the x% that actually matters</span></div><div class="line" id="223651"><span class="nick" style="color:#2e2a4a"><a href="#223651" label="[22:36:51]">&lt;janneke&gt;</a></span><span class="message">we need `define' and letrec* in mes_eval, and some module/variable stuff, but we should be able to drop define-macro expansion from the eval_apply beast</span></div><div class="line" id="223753"><span class="nick" style="color:#2e2a4a"><a href="#223753" label="[22:37:53]">&lt;janneke&gt;</a></span><span class="message">i'm not sure about fluids and exceptions, how much we need initially</span></div><div class="line" id="223815"><span class="nick" style="color:#389600"><a href="#223815" label="[22:38:15]">&lt;OriansJ&gt;</a></span><span class="message">why don't we cross that bridge when we get there?</span></div><div class="line" id="223829"><span class="nick" style="color:#2e2a4a"><a href="#223829" label="[22:38:29]">&lt;janneke&gt;</a></span><span class="message">i worry a bit about how to get it going, extending it should be &quot;just work&quot;</span></div><div class="line" id="223854"><span class="nick" style="color:#2e2a4a"><a href="#223854" label="[22:38:54]">&lt;janneke&gt;</a></span><span class="message">yeah, just reading early boot-9.scm that uses those ...</span></div><div class="line" id="223915"><span class="nick" style="color:#2e2a4a"><a href="#223915" label="[22:39:15]">&lt;janneke&gt;</a></span><span class="message">thinking: hmm, i hope we can skip this initially</span></div><div class="line" id="223920"><span class="nick" style="color:#389600"><a href="#223920" label="[22:39:20]">&lt;OriansJ&gt;</a></span><span class="message">well we do know some guile developers...</span></div><div class="line" id="224013"><span class="nick" style="color:#389600"><a href="#224013" label="[22:40:13]">&lt;OriansJ&gt;</a></span><span class="message">and once we embed enough understanding about the various pieces, the the get going becomes alot simpler</span></div><div class="line" id="224013"><span class="nick" style="color:#2e2a4a"><a href="#224013" label="[22:40:13]">&lt;janneke&gt;</a></span><span class="message">yes :-) :-)</span></div><div class="line" id="224217"><span class="nick" style="color:#389600"><a href="#224217" label="[22:42:17]">&lt;OriansJ&gt;</a></span><span class="message">heck, I'll even make their task easier; if they just give me good examples and tests, I'll do all the work making it happen in C</span></div><div class="line" id="224501"><span class="nick" style="color:#2e2a4a"><a href="#224501" label="[22:45:01]">&lt;janneke&gt;</a></span><span class="message">:)</span></div><div class="line" id="224531"><span class="nick" style="color:#2e2a4a"><a href="#224531" label="[22:45:31]">&lt;janneke&gt;</a></span><span class="message">so yeah, i see what you mean by the more i do, the more work piles up</span></div><div class="line" id="224539"><span class="nick" style="color:#2e2a4a"><a href="#224539" label="[22:45:39]">&lt;janneke&gt;</a></span><span class="message">years of fun ahead</span></div><div class="line" id="224634"><span class="nick" style="color:#389600"><a href="#224634" label="[22:46:34]">&lt;OriansJ&gt;</a></span><span class="message">I can even get 3 months of full time dedicated programming effort allocated from my workplace if we can get another party to match that investment</span></div><div class="line" id="224737"><span class="nick" style="color:#2e2a4a"><a href="#224737" label="[22:47:37]">&lt;janneke&gt;</a></span><span class="message">oh, that's cool!</span></div><div class="line" id="224843"><span class="nick" style="color:#389600"><a href="#224843" label="[22:48:43]">&lt;OriansJ&gt;</a></span><span class="message">and imagine what can be achieved in 3 months with me and another full time programmer working on this</span></div><div class="line" id="224926"><span class="nick" style="color:#2e2a4a"><a href="#224926" label="[22:49:26]">&lt;janneke&gt;</a></span><span class="message">yeah!</span></div><br /></div></body></html>