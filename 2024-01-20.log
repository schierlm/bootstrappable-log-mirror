<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002836"><span class="nick" style="color:#389600"><a href="#002836" label="[00:28:36]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: my suspicion is that it only appears to get stuck. I think its just hanging after the last attempt to print.</span></div><div class="line" id="002901"><span class="nick" style="color:#389600"><a href="#002901" label="[00:29:01]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: I'm trying to narrow down where it is failing. Somewhere in tcc_add_file I think.</span></div><div class="line" id="013304"><span class="nick" style="color:#8dd3c7"><a href="#013304" label="[01:33:04]">&lt;oriansj&gt;</a></span><span class="message">Mikaku: well no details on the firmware situation but you are not alone in using qwerty; but it looks about the right size for a young child.</span></div><div class="line" id="013904"><span class="nick" style="color:#2e2a4a"><a href="#013904" label="[01:39:04]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Probably u-boot. Possibly with some blobs other than BootROM</span></div><div class="line" id="014233"><span class="nick" style="color:#389600"><a href="#014233" label="[01:42:33]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: Preliminary diagnosis is that builder-hex0 is not handling a read of length zero.</span></div><div class="line" id="014304"><span class="nick" style="color:#389600"><a href="#014304" label="[01:43:04]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: This is where it originates: <a rel="nofollow" href="https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/11053b220e492464fade120682ded105c5d95ead/tcc_27/tccelf.c#L2437">https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/11053b220e492464fade120682ded105c5d95ead/tcc_27/tccelf.c#L2437</a> </span></div><div class="line" id="014508"><span class="nick" style="color:#389600"><a href="#014508" label="[01:45:08]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: builder-hex0 decrements the length after each byte and then checks for zero remaining. This won't work for zero lengths.</span></div><div class="line" id="014630"><span class="nick" style="color:#389600"><a href="#014630" label="[01:46:30]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: I actually fixed this for writes but neglected to ensure reads didn't have the same problem.</span></div><div class="line" id="020449"><span class="nick" style="color:#389600"><a href="#020449" label="[02:04:49]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: I'll fix builder-hex0 but I've confirmed thqt adding `if (size &gt; 0)` to the line linked above fixes the problem</span></div><div class="line" id="024558"><span class="nick" style="color:#389600"><a href="#024558" label="[02:45:58]">&lt;rickmasters&gt;</a></span><span class="message">cosinusoidally: fixed builder-hex0 has been pushed.</span></div><div class="line" id="051847"><span class="nick" style="color:#6b8072"><a href="#051847" label="[05:18:47]">&lt;euleritian&gt;</a></span><span class="message">Ah! Very interesting! Are there unit tests for builder-hex0? This sounds like something quickcheck (<a rel="nofollow" href="https://hackage.haskell.org/package/QuickCheck">https://hackage.haskell.org/package/QuickCheck</a>)  or hypothesis (<a rel="nofollow" href="https://hypothesis.readthedocs.io/en/latest/">https://hypothesis.readthedocs.io/en/latest/</a>)  should have found.</span></div><div class="line" id="081123"><span class="nick" style="color:#80b1d3"><a href="#081123" label="[08:11:23]">&lt;Mikaku&gt;</a></span><span class="message">oriansj: :-)</span></div><div class="line" id="083921"><span class="nick" style="color:#6b8072"><a href="#083921" label="[08:39:21]">&lt;euleritian&gt;</a></span><span class="message">orians: How do you fuzz? Do you have a preferred setup and tools? After reading the wikipedia page I'd like to learn more.</span></div><div class="line" id="084101"><span class="nick" style="color:#6b8072"><a href="#084101" label="[08:41:01]">&lt;euleritian&gt;</a></span><span class="message">From what I read, a lot of fuzzing requires compiling the target to be compiled with a special compiler. My hope is that guix can be of use here,</span></div><div class="line" id="103734"><span class="nick" style="color:#6d2462"><a href="#103734" label="[10:37:34]">&lt;muurkha&gt;</a></span><span class="message">you can fuzz things without using a special compiler</span></div><div class="line" id="103819"><span class="nick" style="color:#6d2462"><a href="#103819" label="[10:38:19]">&lt;muurkha&gt;</a></span><span class="message">some fuzzers do use a special compiler, others don't</span></div><div class="line" id="103846"><span class="nick" style="color:#6d2462"><a href="#103846" label="[10:38:46]">&lt;muurkha&gt;</a></span><span class="message">the original fuzz paper just fed random bytes to standard Unix utilities and watched them crash</span></div><div class="line" id="103854"><span class="nick" style="color:#6d2462"><a href="#103854" label="[10:38:54]">&lt;muurkha&gt;</a></span><span class="message">quickcheck is closely related to fuzz</span></div><div class="line" id="103957"><span class="nick" style="color:#6d2462"><a href="#103957" label="[10:39:57]">&lt;muurkha&gt;</a></span><span class="message">I've used Hypothesis for fuzzing at times; this requires some trickery with fork to handle actual crash bugs</span></div><div class="line" id="104432"><span class="nick" style="color:#234e69"><a href="#104432" label="[10:44:32]">&lt;nimaje&gt;</a></span><span class="message">well, property based testing (quickcheck, Hypothesis) is related to fuzzing, you could even call it a generalisation, instead of random bytes you generate proper objects matching the types and you allow more general properties than &quot;it does not crash&quot;</span></div><div class="line" id="104805"><span class="nick" style="color:#6d2462"><a href="#104805" label="[10:48:05]">&lt;muurkha&gt;</a></span><span class="message">fuzzing is more general than most property-based testers in one way, though: you can apply it to programs you know nothing about</span></div><div class="line" id="104920"><span class="nick" style="color:#6d2462"><a href="#104920" label="[10:49:20]">&lt;muurkha&gt;</a></span><span class="message">I don't know if there's a way to get Hypothesis to run a program with an *infinite* stream of random bytes</span></div><div class="line" id="105228"><span class="nick" style="color:#234e69"><a href="#105228" label="[10:52:28]">&lt;nimaje&gt;</a></span><span class="message">you could probably misuse the RuleBasedStateMachine for that and set all limits to some big number, so it seems like infinite, but yeah, hypothesis is not meant for that</span></div><div class="line" id="110509"><span class="nick" style="color:#8dd3c7"><a href="#110509" label="[11:05:09]">&lt;oriansj&gt;</a></span><span class="message">euleritian: I have been using <a rel="nofollow" href="https://github.com/vanhauser-thc/AFLplusplus">https://github.com/vanhauser-thc/AFLplusplus</a>  (unfortunately guix doesn't have it packaged yet, so I have been using a debian system to do the fuzzing)</span></div><div class="line" id="110734"><span class="nick" style="color:#8dd3c7"><a href="#110734" label="[11:07:34]">&lt;oriansj&gt;</a></span><span class="message">all one has to do is replace gcc with afl-gcc when building and then afl-fuzz -i examples/ -m 4G -o results/ -- bin/M1 --architecture x86 -f @@ to get it tested</span></div><div class="line" id="110953"><span class="nick" style="color:#8dd3c7"><a href="#110953" label="[11:09:53]">&lt;oriansj&gt;</a></span><span class="message">for tools that haven't been fuzzed yet, you'll usually get crashes within a few seconds; after a few dozen run/fix cycles the time to crash grows longer and longer.</span></div><div class="line" id="111243"><span class="nick" style="color:#8dd3c7"><a href="#111243" label="[11:12:43]">&lt;oriansj&gt;</a></span><span class="message">at this point, the time to finding a crash is longer than the time to add a new feature and start again. which is nice because no one has reported any crashes for a while now.</span></div><div class="line" id="111450"><span class="nick" style="color:#6d2462"><a href="#111450" label="[11:14:50]">&lt;muurkha&gt;</a></span><span class="message">nimaje: oh, that's an excellent point</span></div><div class="line" id="150332"><span class="nick" style="color:#6c3d55"><a href="#150332" label="[15:03:32]">&lt;musllll&gt;</a></span><span class="message">Hello everyone, just found about stage0 and its related projects. I want to ask, out of curiosity, what is the current opinion of devs in regards to theorem proving and how it could 'free' us from the &quot;Nexus Intruder attack&quot; (as described by jeremiah)?</span></div><div class="line" id="150438"><span class="nick" style="color:#6c3d55"><a href="#150438" label="[15:04:38]">&lt;musllll&gt;</a></span><span class="message">High-assurance software has been using formal specification/proving for decades now. Some software, such as seL4 kernel, has been proved to be correct to the specification down to bit level, thus making a compiler attack impossible (hardware/firmware has not been proved, btw). It is, to my knowledge, the first software to receive EAL7+ ratings (above the maximum described by common criteria). Is this not a possible route to </span></div><div class="line" id="150443"><span class="nick" style="color:#6d2462"><a href="#150443" label="[15:04:43]">&lt;muurkha&gt;</a></span><span class="message">dunno if I count as a dev but I think theorem proving may end up being a more powerful defense than the very useful and important stuff we already have</span></div><div class="line" id="150533"><span class="nick" style="color:#6d2462"><a href="#150533" label="[15:05:33]">&lt;muurkha&gt;</a></span><span class="message">it's not really true in practice that high-assurance software has been using formal specification/proving for decades now.  it's been aspiring to do so, which is why seL4 is the first EAL7+ kernel, rather than the thirtieth</span></div><div class="line" id="150544"><span class="nick" style="color:#6c3d55"><a href="#150544" label="[15:05:44]">&lt;musllll&gt;</a></span><span class="message">To cite another example, CompCert. Although it has not been fully verified, like seL4, it is still a great effort. Another example, CakeML. They recently built their own verified Verilog compiler, called Lutsig.</span></div><div class="line" id="150611"><span class="nick" style="color:#6d2462"><a href="#150611" label="[15:06:11]">&lt;muurkha&gt;</a></span><span class="message">yeah, I think that stuff is really interesting and important, and Metamath shows a convincing way to counter potential attacks on the theorem prover itself</span></div><div class="line" id="150711"><span class="nick" style="color:#6d2462"><a href="#150711" label="[15:07:11]">&lt;muurkha&gt;</a></span><span class="message">CompCert and seL4 are really exciting developments, and formal methods are seeing a lot more uptake now then ten or twenty years ago</span></div><div class="line" id="150803"><span class="nick" style="color:#6c3d55"><a href="#150803" label="[15:08:03]">&lt;musllll&gt;</a></span><span class="message">@murrkha it is true though... formal verification has been done for at least 30 years now, although is a way more rudimentary way than current automated theorem provers like Z3 and Isabelle HOL</span></div><div class="line" id="150817"><span class="nick" style="color:#6d2462"><a href="#150817" label="[15:08:17]">&lt;muurkha&gt;</a></span><span class="message">it started in the 60s, more than 50 years ago</span></div><div class="line" id="150832"><span class="nick" style="color:#6d2462"><a href="#150832" label="[15:08:32]">&lt;muurkha&gt;</a></span><span class="message">but until the last few years was not able to scale up to practical systems</span></div><div class="line" id="150854"><span class="nick" style="color:#6d2462"><a href="#150854" label="[15:08:54]">&lt;muurkha&gt;</a></span><span class="message">seL4 relatively recently (four years ago?) upgraded their proofs to cover not just the C source code but also the executable output from untrusted compilers</span></div><div class="line" id="150910"><span class="nick" style="color:#6d2462"><a href="#150910" label="[15:09:10]">&lt;muurkha&gt;</a></span><span class="message">not, of course, *all* untrusted compilers.  just the ones they happen to be using at the moment</span></div><div class="line" id="151045"><span class="nick" style="color:#6c3d55"><a href="#151045" label="[15:10:45]">&lt;musllll&gt;</a></span><span class="message">@muurkha I'm not familiar with the project/person you mentioned (Metamath), could you tell me where to find it?</span></div><div class="line" id="151141"><span class="nick" style="color:#234e69"><a href="#151141" label="[15:11:41]">&lt;nimaje&gt;</a></span><span class="message"> <a rel="nofollow" href="https://us.metamath.org/">https://us.metamath.org/</a> </span></div><div class="line" id="151252"><span class="nick" style="color:#6c3d55"><a href="#151252" label="[15:12:52]">&lt;musllll&gt;</a></span><span class="message">yes, just saw that, but i meant the part where it shows attacks on theorem provers itself</span></div><div class="line" id="151609"><span class="nick" style="color:#234e69"><a href="#151609" label="[15:16:09]">&lt;nimaje&gt;</a></span><span class="message">well, you have a detailed proof certificate and afaik there are multiple checkers</span></div><div class="line" id="151627"><span class="nick" style="color:#6d2462"><a href="#151627" label="[15:16:27]">&lt;muurkha&gt;</a></span><span class="message">it doesn't show attacks on them; it shows how to make attacks on them impossible</span></div><div class="line" id="152349"><span class="nick" style="color:#6c3d55"><a href="#152349" label="[15:23:49]">&lt;musllll&gt;</a></span><span class="message">oh i see, i misunderstood your previous comment about metamath... but yes, exactly my point, formal proof can be used to escape the trusting trust problem which is one of the main points of stage0</span></div><div class="line" id="152543"><span class="nick" style="color:#6d2462"><a href="#152543" label="[15:25:43]">&lt;muurkha&gt;</a></span><span class="message">I think so, yeah</span></div><div class="line" id="152706"><span class="nick" style="color:#6d2462"><a href="#152706" label="[15:27:06]">&lt;muurkha&gt;</a></span><span class="message">I mean you still need trustworthy hardware to run your metamath verifier on, and some way to get the purported proof certificate onto it, and enough UI to see what theorem it is that you're verifying, and some reasonable assurance that the hardware you're running on has the behavior your proof assumes</span></div><div class="line" id="152726"><span class="nick" style="color:#6d2462"><a href="#152726" label="[15:27:26]">&lt;muurkha&gt;</a></span><span class="message">seL4 had to be patched for Spectre and Meltdown</span></div><div class="line" id="153236"><span class="nick" style="color:#d9d9d9"><a href="#153236" label="[15:32:36]">&lt;janneke&gt;</a></span><span class="message">ACTION is working on <a rel="nofollow" href="https://dezyne.org">https://dezyne.org</a>  -- not really theorem proving but rather automagical application of formal methods</span></div><div class="line" id="154640"><span class="nick" style="color:#bc80bd"><a href="#154640" label="[15:46:40]">&lt;stikonas&gt;</a></span><span class="message">janneke: at some point when you have time could you also review <a rel="nofollow" href="https://lists.gnu.org/archive/html/bug-mes/2024-01/msg00009.html">https://lists.gnu.org/archive/html/bug-mes/2024-01/msg00009.html</a> </span></div><div class="line" id="154644"><span class="nick" style="color:#bc80bd"><a href="#154644" label="[15:46:44]">&lt;stikonas&gt;</a></span><span class="message">I've sent a patch yesterday</span></div><div class="line" id="154741"><span class="nick" style="color:#d9d9d9"><a href="#154741" label="[15:47:41]">&lt;janneke&gt;</a></span><span class="message">stikonas: sure, great work!</span></div><div class="line" id="154905"><span class="nick" style="color:#6d2462"><a href="#154905" label="[15:49:05]">&lt;muurkha&gt;</a></span><span class="message">fantastic!</span></div><div class="line" id="155039"><span class="nick" style="color:#6d2462"><a href="#155039" label="[15:50:39]">&lt;muurkha&gt;</a></span><span class="message">is <a rel="nofollow" href="https://dezyne.org/dezyne/manual/dezyne/html_node/Introduction.html">https://dezyne.org/dezyne/manual/dezyne/html_node/Introduction.html</a>  the place to start, janneke?</span></div><div class="line" id="155117"><span class="nick" style="color:#bc80bd"><a href="#155117" label="[15:51:17]">&lt;stikonas&gt;</a></span><span class="message">I have tried rebuilding mes with mes-m2 and it worked and the resulting binary was fine</span></div><div class="line" id="155146"><span class="nick" style="color:#bc80bd"><a href="#155146" label="[15:51:46]">&lt;stikonas&gt;</a></span><span class="message">haven't tried building tcc-mes yet but x86_64 bootstrap of tcc was never finished anyway</span></div><div class="line" id="155245"><span class="nick" style="color:#d9d9d9"><a href="#155245" label="[15:52:45]">&lt;janneke&gt;</a></span><span class="message">that's great and yes, indeed</span></div><div class="line" id="155440"><span class="nick" style="color:#bc80bd"><a href="#155440" label="[15:54:40]">&lt;stikonas&gt;</a></span><span class="message">probably should try to finish off that x86_64 mes-&gt;tcc step too at some point when I find some time</span></div><div class="line" id="155516"><span class="nick" style="color:#bc80bd"><a href="#155516" label="[15:55:16]">&lt;stikonas&gt;</a></span><span class="message">I suspect it's  very close given that we sorted out most 64-bit bugs with riscv64 bootstrap</span></div><div class="line" id="155535"><span class="nick" style="color:#d9d9d9"><a href="#155535" label="[15:55:35]">&lt;janneke&gt;</a></span><span class="message">exactly, i'd hope/think that too</span></div><div class="line" id="155710"><span class="nick" style="color:#d9d9d9"><a href="#155710" label="[15:57:10]">&lt;janneke&gt;</a></span><span class="message">muurkha: yes, sure</span></div><div class="line" id="155829"><span class="nick" style="color:#d9d9d9"><a href="#155829" label="[15:58:29]">&lt;janneke&gt;</a></span><span class="message">there will (finally) be a talk about dezyne at fosdem this year -- <a rel="nofollow" href="https://fosdem.org/2024/schedule/event/fosdem-2024-1872-how-to-create-the-universal-operating-system/">https://fosdem.org/2024/schedule/event/fosdem-2024-1872-how-to-create-the-universal-operating-system/</a> </span></div><div class="line" id="155846"><span class="nick" style="color:#6d2462"><a href="#155846" label="[15:58:46]">&lt;muurkha&gt;</a></span><span class="message">wonderful!</span></div><div class="line" id="155924"><span class="nick" style="color:#d9d9d9"><a href="#155924" label="[15:59:24]">&lt;janneke&gt;</a></span><span class="message">(the aspirations are much higher than the actual state of affairs, as always ;)</span></div><div class="line" id="160011"><span class="nick" style="color:#6d2462"><a href="#160011" label="[16:00:11]">&lt;muurkha&gt;</a></span><span class="message">the only way to avoid that is to have terrible aspirations</span></div><div class="line" id="160114"><span class="nick" style="color:#d9d9d9"><a href="#160114" label="[16:01:14]">&lt;janneke&gt;</a></span><span class="message">hehe, true</span></div><div class="line" id="165116"><span class="nick" style="color:#bc80bd"><a href="#165116" label="[16:51:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, there is something in mes-m2 that upsets posix-runner after I run it 30 times or so in kaem script. Yet full mes seems to be fine</span></div><div class="line" id="165943"><span class="nick" style="color:#bc80bd"><a href="#165943" label="[16:59:43]">&lt;stikonas&gt;</a></span><span class="message">oh that probably makes sense, that's because mes libc has a trivial free() function</span></div><div class="line" id="170033"><span class="nick" style="color:#bc80bd"><a href="#170033" label="[17:00:33]">&lt;stikonas&gt;</a></span><span class="message">so even if posix-runner breaks something, it's not triggered by free</span></div><div class="line" id="175604"><span class="nick" style="color:#2e2a4a"><a href="#175604" label="[17:56:04]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; @irc_libera_rickmasters:stikonas.eu: Thanks, the fixed builder-hex0 works for me. I might not be invoking qemu correctly, but it gets stuck at the fiwix trampoline. Any ideas on the issue with cdrun? I'm guessing it might be something to do with me using exec rather than fork+exec?</span></div><div class="line" id="183820"><span class="nick" style="color:#6c3d55"><a href="#183820" label="[18:38:20]">&lt;musllll&gt;</a></span><span class="message">@muurkha sorry for the late reply... you don't need to verify it inside the system you're running btw, you can just ship the binary already verified.</span></div><div class="line" id="183829"><span class="nick" style="color:#6c3d55"><a href="#183829" label="[18:38:29]">&lt;musllll&gt;</a></span><span class="message">dezyne looks really interesting, i'll take a look</span></div><div class="line" id="183926"><span class="nick" style="color:#6c3d55"><a href="#183926" label="[18:39:26]">&lt;musllll&gt;</a></span><span class="message">btw, has anybody yet made TCC compile at least some old GCC yet? Or is GCC not required at all to build something like linux kernel?</span></div><div class="line" id="184016"><span class="nick" style="color:#6c3d55"><a href="#184016" label="[18:40:16]">&lt;musllll&gt;</a></span><span class="message">I saw the builder-hex0 project, which seems to do exactly that, but it was not clear if it uses TCC or compiles GCC using stage0-produced binaries</span></div><div class="line" id="184047"><span class="nick" style="color:#bc80bd"><a href="#184047" label="[18:40:47]">&lt;stikonas&gt;</a></span><span class="message">musllll: tcc can compile gcc</span></div><div class="line" id="184102"><span class="nick" style="color:#bc80bd"><a href="#184102" label="[18:41:02]">&lt;stikonas&gt;</a></span><span class="message">and gcc is required to build linux kernel</span></div><div class="line" id="184106"><span class="nick" style="color:#bc80bd"><a href="#184106" label="[18:41:06]">&lt;stikonas&gt;</a></span><span class="message">but you don't need linux kernel to run gcc</span></div><div class="line" id="184149"><span class="nick" style="color:#bc80bd"><a href="#184149" label="[18:41:49]">&lt;stikonas&gt;</a></span><span class="message">so on bios systems you can use builder-hex0 to reach tcc and use it to build Fiwix kernel</span></div><div class="line" id="184209"><span class="nick" style="color:#bc80bd"><a href="#184209" label="[18:42:09]">&lt;stikonas&gt;</a></span><span class="message">then fiwix kernel is good enough to reach GCC an build somewhat older Linux</span></div><div class="line" id="184244"><span class="nick" style="color:#bc80bd"><a href="#184244" label="[18:42:44]">&lt;stikonas&gt;</a></span><span class="message">(could possibly be extended to build newer stuff but there are various limitations, especially if you want to keep bootstrap in the memory)</span></div><div class="line" id="184258"><span class="nick" style="color:#bc80bd"><a href="#184258" label="[18:42:58]">&lt;stikonas&gt;</a></span><span class="message">and this is all just on x86</span></div><div class="line" id="184317"><span class="nick" style="color:#bc80bd"><a href="#184317" label="[18:43:17]">&lt;stikonas&gt;</a></span><span class="message">I'm now working on some builder-hex0 alternative for UEFI/x86_64 systems</span></div><div class="line" id="184438"><span class="nick" style="color:#bc80bd"><a href="#184438" label="[18:44:38]">&lt;stikonas&gt;</a></span><span class="message">but we don't yet have amd64 bootstrap even on POSIX systems (i.e. exclude kernel bootstrap)</span></div><div class="line" id="190039"><span class="nick" style="color:#6c3d55"><a href="#190039" label="[19:00:39]">&lt;musllll&gt;</a></span><span class="message">lol i just now realized you're the author of the repository i was reading (stage0-uefi) haha... great work btw, i like'd you also added gentoo scripts to bootstrap rustc</span></div><div class="line" id="190126"><span class="nick" style="color:#bc80bd"><a href="#190126" label="[19:01:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, I did that too</span></div><div class="line" id="190129"><span class="nick" style="color:#6c3d55"><a href="#190129" label="[19:01:29]">&lt;musllll&gt;</a></span><span class="message">did you take a look at oreboot? this is a bit unrelated to the current project, but RustSBI might be useful somehow</span></div><div class="line" id="190140"><span class="nick" style="color:#bc80bd"><a href="#190140" label="[19:01:40]">&lt;stikonas&gt;</a></span><span class="message">no, I haven't looked at oreboot...</span></div><div class="line" id="190154"><span class="nick" style="color:#bc80bd"><a href="#190154" label="[19:01:54]">&lt;stikonas&gt;</a></span><span class="message">I only have coreboot on one machine</span></div><div class="line" id="190240"><span class="nick" style="color:#6c3d55"><a href="#190240" label="[19:02:40]">&lt;musllll&gt;</a></span><span class="message">it's a minimal version of coreboot, written in rust: <a rel="nofollow" href="https://github.com/oreboot/oreboot">https://github.com/oreboot/oreboot</a> </span></div><div class="line" id="190255"><span class="nick" style="color:#bc80bd"><a href="#190255" label="[19:02:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, I've briefly heard it mentioned before</span></div><div class="line" id="190321"><span class="nick" style="color:#6c3d55"><a href="#190321" label="[19:03:21]">&lt;musllll&gt;</a></span><span class="message">just one more question: is stage0 and it's related project using some building system to ensure deterministic builds (such as Guix or Nix)?</span></div><div class="line" id="190359"><span class="nick" style="color:#bc80bd"><a href="#190359" label="[19:03:59]">&lt;stikonas&gt;</a></span><span class="message">you don't need anything special for deterministic builds</span></div><div class="line" id="190416"><span class="nick" style="color:#bc80bd"><a href="#190416" label="[19:04:16]">&lt;stikonas&gt;</a></span><span class="message">especially stage0-* stuff</span></div><div class="line" id="190435"><span class="nick" style="color:#bc80bd"><a href="#190435" label="[19:04:35]">&lt;stikonas&gt;</a></span><span class="message">it just doesn't have any non-deterministic input there</span></div><div class="line" id="190451"><span class="nick" style="color:#6c3d55"><a href="#190451" label="[19:04:51]">&lt;musllll&gt;</a></span><span class="message">but you guys have sha256 or something?</span></div><div class="line" id="190502"><span class="nick" style="color:#bc80bd"><a href="#190502" label="[19:05:02]">&lt;stikonas&gt;</a></span><span class="message">yes, we do have sha256</span></div><div class="line" id="190508"><span class="nick" style="color:#bc80bd"><a href="#190508" label="[19:05:08]">&lt;stikonas&gt;</a></span><span class="message">and we check outputs with it</span></div><div class="line" id="190519"><span class="nick" style="color:#bc80bd"><a href="#190519" label="[19:05:19]">&lt;stikonas&gt;</a></span><span class="message">there is also live-bootstrap</span></div><div class="line" id="190526"><span class="nick" style="color:#bc80bd"><a href="#190526" label="[19:05:26]">&lt;stikonas&gt;</a></span><span class="message">that builds further stuff after stage0-posix</span></div><div class="line" id="190540"><span class="nick" style="color:#6c3d55"><a href="#190540" label="[19:05:40]">&lt;musllll&gt;</a></span><span class="message">i see, thanks for answering my dumb questions :)</span></div><div class="line" id="190543"><span class="nick" style="color:#bc80bd"><a href="#190543" label="[19:05:43]">&lt;stikonas&gt;</a></span><span class="message">there we have to do occasional tricks for deterministic builds (but not too many)</span></div><div class="line" id="190559"><span class="nick" style="color:#bc80bd"><a href="#190559" label="[19:05:59]">&lt;stikonas&gt;</a></span><span class="message">so the interesting consequence of bootstrapping</span></div><div class="line" id="190610"><span class="nick" style="color:#6c3d55"><a href="#190610" label="[19:06:10]">&lt;musllll&gt;</a></span><span class="message">really excited about this project, i always got the idea to do something like that, but i lacked the expertise, you guys are awesome for actually doing it</span></div><div class="line" id="190611"><span class="nick" style="color:#bc80bd"><a href="#190611" label="[19:06:11]">&lt;stikonas&gt;</a></span><span class="message">is that you get reproducable builds almost for free</span></div><div class="line" id="190625"><span class="nick" style="color:#bc80bd"><a href="#190625" label="[19:06:25]">&lt;stikonas&gt;</a></span><span class="message">i.e. normally output of the binary depends on toolchain, etc...</span></div><div class="line" id="190632"><span class="nick" style="color:#6c3d55"><a href="#190632" label="[19:06:32]">&lt;musllll&gt;</a></span><span class="message">interesting</span></div><div class="line" id="190637"><span class="nick" style="color:#bc80bd"><a href="#190637" label="[19:06:37]">&lt;stikonas&gt;</a></span><span class="message">but here we have the whole chain built from a tiny hex0 binary</span></div><div class="line" id="190646"><span class="nick" style="color:#6c3d55"><a href="#190646" label="[19:06:46]">&lt;musllll&gt;</a></span><span class="message">it's also a good thing that there's no optimizing compiler doing heuristic stuff</span></div><div class="line" id="190710"><span class="nick" style="color:#bc80bd"><a href="#190710" label="[19:07:10]">&lt;stikonas&gt;</a></span><span class="message">yeah, GCC is deterministic...</span></div><div class="line" id="192325"><span class="nick" style="color:#2e2a4a"><a href="#192325" label="[19:23:25]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; Looks like someone did once get a 4.6 Linux kernel built with tcc <a rel="nofollow" href="https://www.youtube.com/watch?v=iU0Z0vBKrtQ">https://www.youtube.com/watch?v=iU0Z0vBKrtQ</a>  . I can't find the code online though.</span></div><div class="line" id="192854"><span class="nick" style="color:#2e2a4a"><a href="#192854" label="[19:28:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; ah it's <a rel="nofollow" href="https://github.com/susematz/linux">https://github.com/susematz/linux</a> </span></div><div class="line" id="193106"><span class="nick" style="color:#2e2a4a"><a href="#193106" label="[19:31:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; ah still depends on gcc <a rel="nofollow" href="https://github.com/susematz/linux/blob/tcc46/README.tcc">https://github.com/susematz/linux/blob/tcc46/README.tcc</a> </span></div><div class="line" id="224243"><span class="nick" style="color:#3c5b35"><a href="#224243" label="[22:42:43]">&lt;fossy&gt;</a></span><span class="message">cosinusoidally yeah i saw that before, it's a huge mess unfortunately</span></div><div class="line" id="224448"><span class="nick" style="color:#3c5b35"><a href="#224448" label="[22:44:48]">&lt;fossy&gt;</a></span><span class="message">snuik: tell musllll in the long term i do think that formal verification does have a role to play in the bootstrap story. but the cost &amp; time expense required for formal verification of most software is immense (i think the figure i've seen quoted for seL4 is it took AU$2 mil?)</span></div><div class="line" id="224456"><span class="nick" style="color:#af8d2f"><a href="#224456" label="[22:44:56]">&lt;snuik&gt;</a></span><span class="message">Does not compute.</span></div><div class="line" id="224456"><span class="nick" style="color:#3c5b35"><a href="#224456" label="[22:44:56]">&lt;fossy&gt;</a></span><span class="message">snuik: help</span></div><div class="line" id="224456"><span class="nick" style="color:#af8d2f"><a href="#224456" label="[22:44:56]">&lt;snuik&gt;</a></span><span class="message">Don't ask me fossy, I'm just a bot!</span></div><div class="line" id="224504"><span class="nick" style="color:#3c5b35"><a href="#224504" label="[22:45:04]">&lt;fossy&gt;</a></span><span class="message">uh ok</span></div><div class="line" id="224530"><span class="nick" style="color:#bc80bd"><a href="#224530" label="[22:45:30]">&lt;stikonas&gt;</a></span><span class="message">fossy: you need to use &quot;later tell&quot;</span></div><div class="line" id="224537"><span class="nick" style="color:#3c5b35"><a href="#224537" label="[22:45:37]">&lt;fossy&gt;</a></span><span class="message">ahhhhh ok</span></div><div class="line" id="224541"><span class="nick" style="color:#3c5b35"><a href="#224541" label="[22:45:41]">&lt;fossy&gt;</a></span><span class="message">snuik: later tell musllll in the long term i do think that formal verification does have a role to play in the bootstrap story. but the cost &amp; time expense required for formal verification of most software is immense (i think the figure i've seen quoted for seL4 is it took AU$2 mil?)</span></div><div class="line" id="224541"><span class="nick" style="color:#af8d2f"><a href="#224541" label="[22:45:41]">&lt;snuik&gt;</a></span><span class="message">Sure thing.</span></div><div class="line" id="224546"><span class="nick" style="color:#3c5b35"><a href="#224546" label="[22:45:46]">&lt;fossy&gt;</a></span><span class="message">thanks</span></div><div class="line" id="224914"><span class="nick" style="color:#bc80bd"><a href="#224914" label="[22:49:14]">&lt;stikonas&gt;</a></span><span class="message">and early hex0 programs are not formally verifiable</span></div><div class="line" id="224919"><span class="nick" style="color:#bc80bd"><a href="#224919" label="[22:49:19]">&lt;stikonas&gt;</a></span><span class="message">they have known crashes</span></div><div class="line" id="224927"><span class="nick" style="color:#bc80bd"><a href="#224927" label="[22:49:27]">&lt;stikonas&gt;</a></span><span class="message">there is basically no error handling</span></div><div class="line" id="224942"><span class="nick" style="color:#bc80bd"><a href="#224942" label="[22:49:42]">&lt;stikonas&gt;</a></span><span class="message">well, maybe you can restrict verification to good input...</span></div><div class="line" id="230554"><span class="nick" style="color:#bc80bd"><a href="#230554" label="[23:05:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: quick question, should --arch be renamed to --architecture</span></div><div class="line" id="230604"><span class="nick" style="color:#bc80bd"><a href="#230604" label="[23:06:04]">&lt;stikonas&gt;</a></span><span class="message">rest of the options are not abbreviated...</span></div><div class="line" id="230629"><span class="nick" style="color:#bc80bd"><a href="#230629" label="[23:06:29]">&lt;stikonas&gt;</a></span><span class="message">right now it's probably still easy to rename since there are not real users of --arch</span></div><div class="line" id="230634"><span class="nick" style="color:#bc80bd"><a href="#230634" label="[23:06:34]">&lt;stikonas&gt;</a></span><span class="message">s/not/no</span></div><div class="line" id="231317"><span class="nick" style="color:#3c5b35"><a href="#231317" label="[23:13:17]">&lt;fossy&gt;</a></span><span class="message">stikonas: i guess so? adds a small amount of clarity without any harm. arch is a super common abbreviation but it doesn't hurt to change</span></div><div class="line" id="231418"><span class="nick" style="color:#bc80bd"><a href="#231418" label="[23:14:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, on the other hand we have bwrap too</span></div><div class="line" id="231424"><span class="nick" style="color:#bc80bd"><a href="#231424" label="[23:14:24]">&lt;stikonas&gt;</a></span><span class="message">rather than full bubblewrap</span></div><div class="line" id="231432"><span class="nick" style="color:#bc80bd"><a href="#231432" label="[23:14:32]">&lt;stikonas&gt;</a></span><span class="message">though the command is also abbreviated...</span></div><div class="line" id="231445"><span class="nick" style="color:#bc80bd"><a href="#231445" label="[23:14:45]">&lt;stikonas&gt;</a></span><span class="message">ok, we actually have a few more</span></div><div class="line" id="231448"><span class="nick" style="color:#bc80bd"><a href="#231448" label="[23:14:48]">&lt;stikonas&gt;</a></span><span class="message">repo...</span></div><div class="line" id="231456"><span class="nick" style="color:#bc80bd"><a href="#231456" label="[23:14:56]">&lt;stikonas&gt;</a></span><span class="message">oh well, maybe it's fine...</span></div><div class="line" id="231735"><span class="nick" style="color:#3c5b35"><a href="#231735" label="[23:17:35]">&lt;fossy&gt;</a></span><span class="message">if they were uncommon abbreviations i'd instantly say yes, but i don't think there's a lack of clarity with any of them</span></div><div class="line" id="231747"><span class="nick" style="color:#bc80bd"><a href="#231747" label="[23:17:47]">&lt;stikonas&gt;</a></span><span class="message">oh well, let's leave as it is then</span></div><br /></div></body></html>