<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005537"><span class="nick" style="color:#8dd3c7"><a href="#005537" label="[00:55:37]">&lt;stikonas&gt;</a></span><span class="message">fossy: should we remove mes rebuild since it's not really needed...</span></div><div class="line" id="022655"><span class="nick" style="color:#2e2a4a"><a href="#022655" label="[02:26:55]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: well that is a noble idea, I much prefer that anyone with a little bit of time could create their own bootstrap seed (from either the hex0 files or from scratch) so that. That being said skipping the ELF header, the hex0 would fit in a tweet</span></div><div class="line" id="023458"><span class="nick" style="color:#6b8072"><a href="#023458" label="[02:34:58]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i imagine that ELF headers are well enough documented out there that anyone who understood the tweet would know what was missing</span></div><div class="line" id="025419"><span class="nick" style="color:#2e2a4a"><a href="#025419" label="[02:54:19]">&lt;OriansJ`&gt;</a></span><span class="message">It might be well documented but unfortunately for some architectures, the documentation is entirely wrong (look at mescc-tools ppc64le e_entry for example)</span></div><div class="line" id="025506"><span class="nick" style="color:#2e2a4a"><a href="#025506" label="[02:55:06]">&lt;OriansJ`&gt;</a></span><span class="message">or armv7l where the instruction encoding documentation is wrong byte-wise</span></div><div class="line" id="092858"><span class="nick">***</span><span class="message notice">gio_ is now known as gio</span></div><div class="line" id="122009"><span class="nick" style="color:#80b1d3"><a href="#122009" label="[12:20:09]">&lt;gforce_de1977&gt;</a></span><span class="message">first try with python rootfs and i'am doing something wrong, but what? <a rel="nofollow" href="https://paste.debian.net/1193466/">https://paste.debian.net/1193466/</a> </span></div><div class="line" id="122025"><span class="nick" style="color:#80b1d3"><a href="#122025" label="[12:20:25]">&lt;gforce_de1977&gt;</a></span><span class="message">sorry!</span></div><div class="line" id="122033"><span class="nick" style="color:#80b1d3"><a href="#122033" label="[12:20:33]">&lt;gforce_de1977&gt;</a></span><span class="message">(the submodules are missing)</span></div><div class="line" id="124624"><span class="nick" style="color:#8dd3c7"><a href="#124624" label="[12:46:24]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: by the way, you can now do parallel runs with rootfs.py</span></div><div class="line" id="124641"><span class="nick" style="color:#8dd3c7"><a href="#124641" label="[12:46:41]">&lt;stikonas&gt;</a></span><span class="message">just need to specify different --tmpdir</span></div><div class="line" id="124649"><span class="nick" style="color:#8dd3c7"><a href="#124649" label="[12:46:49]">&lt;stikonas&gt;</a></span><span class="message">but no need to copy trees anymore</span></div><div class="line" id="124655"><span class="nick" style="color:#8dd3c7"><a href="#124655" label="[12:46:55]">&lt;stikonas&gt;</a></span><span class="message">everything can run from a single checkout</span></div><div class="line" id="131517"><span class="nick" style="color:#80b1d3"><a href="#131517" label="[13:15:17]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: ok, but does not make sense with minikernel, it supports --repeat XX and --multi XX (and then the kernel is only compiled once), but thanks for mention it.</span></div><div class="line" id="131616"><span class="nick" style="color:#8dd3c7"><a href="#131616" label="[13:16:16]">&lt;stikonas&gt;</a></span><span class="message">oh ok...</span></div><div class="line" id="131636"><span class="nick" style="color:#8dd3c7"><a href="#131636" label="[13:16:36]">&lt;stikonas&gt;</a></span><span class="message">anyway, that option is  at least useful outside minikernel...</span></div><div class="line" id="160114"><span class="nick" style="color:#6d2462"><a href="#160114" label="[16:01:14]">&lt;pder&gt;</a></span><span class="message">stikonas: with the new python rootfs.py if I attempt to run ./rootfs.py --chroot I get env: ‘chroot’: No such file or directory</span></div><div class="line" id="160133"><span class="nick" style="color:#6d2462"><a href="#160133" label="[16:01:33]">&lt;pder&gt;</a></span><span class="message">I am on debian and chroot is in /usr/sbin, so I think that needs to be added to the path</span></div><div class="line" id="160218"><span class="nick" style="color:#8dd3c7"><a href="#160218" label="[16:02:18]">&lt;stikonas&gt;</a></span><span class="message">oh, possibly...</span></div><div class="line" id="160235"><span class="nick" style="color:#8dd3c7"><a href="#160235" label="[16:02:35]">&lt;stikonas&gt;</a></span><span class="message">on Gentoo chroot is in PATH</span></div><div class="line" id="160303"><span class="nick" style="color:#6d2462"><a href="#160303" label="[16:03:03]">&lt;pder&gt;</a></span><span class="message">for me as my normal user &quot;which chroot&quot; returns nothing</span></div><div class="line" id="160316"><span class="nick" style="color:#8dd3c7"><a href="#160316" label="[16:03:16]">&lt;stikonas&gt;</a></span><span class="message">$ command -v chroot</span></div><div class="line" id="160317"><span class="nick" style="color:#8dd3c7"><a href="#160317" label="[16:03:17]">&lt;stikonas&gt;</a></span><span class="message">/usr/bin/chroot</span></div><div class="line" id="160338"><span class="nick" style="color:#8dd3c7"><a href="#160338" label="[16:03:38]">&lt;stikonas&gt;</a></span><span class="message">but aren't we running it with sudo</span></div><div class="line" id="160609"><span class="nick" style="color:#6d2462"><a href="#160609" label="[16:06:09]">&lt;pder&gt;</a></span><span class="message">we are, so I am not sure.  But adding PATH=/usr/bin:/bin to line 83 of rootfs.py fixes the issue for me</span></div><div class="line" id="160622"><span class="nick" style="color:#6d2462"><a href="#160622" label="[16:06:22]">&lt;pder&gt;</a></span><span class="message">sorry PATH=/usr/sbin:/bin</span></div><div class="line" id="160639"><span class="nick" style="color:#8dd3c7"><a href="#160639" label="[16:06:39]">&lt;stikonas&gt;</a></span><span class="message">pder: oh, that's because env clears environment</span></div><div class="line" id="160701"><span class="nick" style="color:#8dd3c7"><a href="#160701" label="[16:07:01]">&lt;stikonas&gt;</a></span><span class="message">which I wanted to do to avoid poluting bootstrap environment</span></div><div class="line" id="160719"><span class="nick" style="color:#8dd3c7"><a href="#160719" label="[16:07:19]">&lt;stikonas&gt;</a></span><span class="message">that's extra addition compared to rootfs.sh</span></div><div class="line" id="160750"><span class="nick" style="color:#8dd3c7"><a href="#160750" label="[16:07:50]">&lt;stikonas&gt;</a></span><span class="message">pder: perhaps the best way would be to resolve chroot path in python?</span></div><div class="line" id="160759"><span class="nick" style="color:#8dd3c7"><a href="#160759" label="[16:07:59]">&lt;stikonas&gt;</a></span><span class="message">and then pass it to the next line</span></div><div class="line" id="160827"><span class="nick" style="color:#6d2462"><a href="#160827" label="[16:08:27]">&lt;pder&gt;</a></span><span class="message">that sounds reasonable to me</span></div><div class="line" id="160851"><span class="nick" style="color:#8dd3c7"><a href="#160851" label="[16:08:51]">&lt;stikonas&gt;</a></span><span class="message">probabably need to do it with sudo to work on Debian</span></div><div class="line" id="160918"><span class="nick" style="color:#8dd3c7"><a href="#160918" label="[16:09:18]">&lt;stikonas&gt;</a></span><span class="message">then we'll be able to find chroot, but also environment inside chroot will be reasonably clean</span></div><div class="line" id="181549"><span class="nick" style="color:#234e69"><a href="#181549" label="[18:15:49]">&lt;gef&gt;</a></span><span class="message">has anybody seen this before <a rel="nofollow" href="https://github.com/NieDzejkob/2klinux#2k-linux">https://github.com/NieDzejkob/2klinux#2k-linux</a>  ? I find interesting the claimed fs driver size. Presumably, it implies that the very first c compiler can come out in a minimum of steps.</span></div><div class="line" id="184330"><span class="nick" style="color:#8dd3c7"><a href="#184330" label="[18:43:30]">&lt;stikonas&gt;</a></span><span class="message">not finished though...</span></div><div class="line" id="184608"><span class="nick" style="color:#80b1d3"><a href="#184608" label="[18:46:08]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: bauen1: fossy: a did a &quot;small&quot; massrun (48 full runs), turns out that the already merged PR96 regarding &quot;autom4te.cfg: No such file or directory:&quot; was successful, so no issues regarding this. i will do a real massrun tonight and report tomorrow</span></div><div class="line" id="184947"><span class="nick" style="color:#80b1d3"><a href="#184947" label="[18:49:47]">&lt;gforce_de1977&gt;</a></span><span class="message">gef: the 2klinux looks really interesting, but for now it looks a little bit like cheating, but maybe i'am wrong, have to inspect the binaries...</span></div><div class="line" id="185803"><span class="nick" style="color:#234e69"><a href="#185803" label="[18:58:03]">&lt;gef&gt;</a></span><span class="message">gforce_de1977: Indeed. I got intrigued by it, because if it plays along and can do tcc, then this perhaps can play <a rel="nofollow" href="https://github.com/blynn/compiler">https://github.com/blynn/compiler</a>  . And if that plays, a friend has written the haskell compiler/linker for the sbn4 OISC over here: <a rel="nofollow" href="https://gitlab.com/roosemberth/single-instruction-machine">https://gitlab.com/roosemberth/single-instruction-machine</a>  . It basically means there is a generic arch-independent approach to climb up to this milestone: <a rel="nofollow" href="https://bellard.org/tcc/tccboot.html">https://bellard.org/tcc/tccboot.html</a> </span></div><div class="line" id="185814"><span class="nick" style="color:#234e69"><a href="#185814" label="[18:58:14]">&lt;gef&gt;</a></span><span class="message">of course, it's all midnight summer dream, until it happens :)</span></div><div class="line" id="191038"><span class="nick" style="color:#80b1d3"><a href="#191038" label="[19:10:38]">&lt;gforce_de1977&gt;</a></span><span class="message">gef: getting wet already 8-)))</span></div><div class="line" id="191046"><span class="nick" style="color:#234e69"><a href="#191046" label="[19:10:46]">&lt;gef&gt;</a></span><span class="message">lol</span></div><div class="line" id="191306"><span class="nick" style="color:#8dd3c7"><a href="#191306" label="[19:13:06]">&lt;stikonas&gt;</a></span><span class="message">the plan looks a bit strange though... it seemed to me that stuff like busybox is not easy to build</span></div><div class="line" id="191458"><span class="nick" style="color:#8dd3c7"><a href="#191458" label="[19:14:58]">&lt;stikonas&gt;</a></span><span class="message">maybe it can be done... but some things are easy to say in the plan but when you actually have to do them, it's not so easy</span></div><div class="line" id="192655"><span class="nick" style="color:#80b1d3"><a href="#192655" label="[19:26:55]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: and without peer rewiew there can be a lot of bad smell in there (cheating)</span></div><div class="line" id="192721"><span class="nick" style="color:#8dd3c7"><a href="#192721" label="[19:27:21]">&lt;stikonas&gt;</a></span><span class="message">exactly...</span></div><div class="line" id="192801"><span class="nick" style="color:#8dd3c7"><a href="#192801" label="[19:28:01]">&lt;stikonas&gt;</a></span><span class="message">e.g. might just use bison generated parsers, etc...</span></div><div class="line" id="192848"><span class="nick" style="color:#8dd3c7"><a href="#192848" label="[19:28:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, there isn't much there beyong C preprocessor...</span></div><div class="line" id="192850"><span class="nick" style="color:#234e69"><a href="#192850" label="[19:28:50]">&lt;gef&gt;</a></span><span class="message">(with a shrug posture) not sure what's going on. As a minimum the fs driver in Forth could be reusable across architecture, since forth is cheap to implement. That should get that ticked.</span></div><div class="line" id="192946"><span class="nick" style="color:#234e69"><a href="#192946" label="[19:29:46]">&lt;gef&gt;</a></span><span class="message">am i right all the currently *working* code, is with the assumption that kernel/fs services are available?</span></div><div class="line" id="193005"><span class="nick" style="color:#8dd3c7"><a href="#193005" label="[19:30:05]">&lt;stikonas&gt;</a></span><span class="message">in live-bootstrap and guix that's true</span></div><div class="line" id="193034"><span class="nick" style="color:#8dd3c7"><a href="#193034" label="[19:30:34]">&lt;stikonas&gt;</a></span><span class="message">there is gio's asmc where this is not assumed, although it is a bit larger (15 KB if I remember correctly)</span></div><div class="line" id="193038"><span class="nick" style="color:#80b1d3"><a href="#193038" label="[19:30:38]">&lt;gforce_de1977&gt;</a></span><span class="message">gef: the repo has my attention, but without deeper digging, i'am careful to say *thats-it*</span></div><div class="line" id="193142"><span class="nick" style="color:#8dd3c7"><a href="#193142" label="[19:31:42]">&lt;stikonas&gt;</a></span><span class="message">gef: actually, stuff from OriansJ` stage0 up to M2-Planet does not need kernel/fs services</span></div><div class="line" id="193241"><span class="nick" style="color:#80b1d3"><a href="#193241" label="[19:32:41]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: but only because the kernel provides a ramdisk</span></div><div class="line" id="193316"><span class="nick" style="color:#8dd3c7"><a href="#193316" label="[19:33:16]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: no, you don't need kernel to run those</span></div><div class="line" id="193334"><span class="nick" style="color:#80b1d3"><a href="#193334" label="[19:33:34]">&lt;gforce_de1977&gt;</a></span><span class="message">but how are they loaded into ram?</span></div><div class="line" id="193335"><span class="nick" style="color:#8dd3c7"><a href="#193335" label="[19:33:35]">&lt;stikonas&gt;</a></span><span class="message">you can run it on stuff like knight architecture</span></div><div class="line" id="193345"><span class="nick" style="color:#8dd3c7"><a href="#193345" label="[19:33:45]">&lt;stikonas&gt;</a></span><span class="message">you feed the code in via e.g. paper tape</span></div><div class="line" id="193349"><span class="nick" style="color:#8dd3c7"><a href="#193349" label="[19:33:49]">&lt;stikonas&gt;</a></span><span class="message">and it spits output on the other tape</span></div><div class="line" id="193406"><span class="nick" style="color:#80b1d3"><a href="#193406" label="[19:34:06]">&lt;gforce_de1977&gt;</a></span><span class="message">hmmm....ok...thats cheating on another layer 8-)))</span></div><div class="line" id="193417"><span class="nick" style="color:#8dd3c7"><a href="#193417" label="[19:34:17]">&lt;stikonas&gt;</a></span><span class="message">it's not really cheating :D</span></div><div class="line" id="193421"><span class="nick" style="color:#8dd3c7"><a href="#193421" label="[19:34:21]">&lt;stikonas&gt;</a></span><span class="message">that's proper bootstrapping</span></div><div class="line" id="193448"><span class="nick" style="color:#8dd3c7"><a href="#193448" label="[19:34:48]">&lt;stikonas&gt;</a></span><span class="message">anything else will rely on code to load stuff into ram</span></div><div class="line" id="193501"><span class="nick" style="color:#8dd3c7"><a href="#193501" label="[19:35:01]">&lt;stikonas&gt;</a></span><span class="message">whether we load it from some drive or something similar</span></div><div class="line" id="193513"><span class="nick" style="color:#8dd3c7"><a href="#193513" label="[19:35:13]">&lt;stikonas&gt;</a></span><span class="message">or whether we ask bios to load stuff from 1st sector</span></div><div class="line" id="193800"><span class="nick" style="color:#80b1d3"><a href="#193800" label="[19:38:00]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: sorry, and yes: you are right and i'am wrong. using the BIOS is really cheating, gef: thats a point!</span></div><div class="line" id="193821"><span class="nick" style="color:#234e69"><a href="#193821" label="[19:38:21]">&lt;gef&gt;</a></span><span class="message">gforce_de1977: bootstrapping the kernel and having system calls appears to be a much harder problem (fyi. I am looking at this business one level lower (systems-wise) than you guys: namely, I'm investigating what kind of primitives the machine code should have to do the bootstrapping - it can get complicated with certain kernel services)</span></div><div class="line" id="194006"><span class="nick" style="color:#8dd3c7"><a href="#194006" label="[19:40:06]">&lt;stikonas&gt;</a></span><span class="message">gef: well, that's why M2-Planet is designed to run on baremetal without kernel. The plan is that a simple POSIX kernel might be compiled with it</span></div><div class="line" id="194026"><span class="nick" style="color:#8dd3c7"><a href="#194026" label="[19:40:26]">&lt;stikonas&gt;</a></span><span class="message">well, we only need some VFS in RAM and processes</span></div><div class="line" id="194102"><span class="nick" style="color:#234e69"><a href="#194102" label="[19:41:02]">&lt;gef&gt;</a></span><span class="message">So, the fs driver is worthy of attention and might offer a crack on that part of the challenge: implement a rudimentary VFS?</span></div><div class="line" id="194132"><span class="nick" style="color:#8dd3c7"><a href="#194132" label="[19:41:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe. bauen1 might know more about this</span></div><div class="line" id="194152"><span class="nick" style="color:#8dd3c7"><a href="#194152" label="[19:41:52]">&lt;stikonas&gt;</a></span><span class="message">I think bauen1 said it's not too hard to implement some VFS anyway</span></div><div class="line" id="194505"><span class="nick" style="color:#234e69"><a href="#194505" label="[19:45:05]">&lt;gef&gt;</a></span><span class="message">at some point, I'd like to setup the first gitlab pipelines to make the bootstrapping look more like a ci/cd process; to be clear: there is NO need to move git repos or code, just add a file or two; I know the ropes of gitlab to a level that should get things started, but I'd need to be tour-guided with the current bootstrapping itself</span></div><div class="line" id="194638"><span class="nick" style="color:#234e69"><a href="#194638" label="[19:46:38]">&lt;gef&gt;</a></span><span class="message">ideally, I'm asking someone to spend 10-15mins by voice with me to put my attention to the right places. But there is no rush, it can happen this month or next month</span></div><div class="line" id="194842"><span class="nick" style="color:#80b1d3"><a href="#194842" label="[19:48:42]">&lt;gforce_de1977&gt;</a></span><span class="message">gef: i once started to document all steps verbose: <a rel="nofollow" href="https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/doc.md">https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/doc.md</a> </span></div><div class="line" id="194900"><span class="nick" style="color:#80b1d3"><a href="#194900" label="[19:49:00]">&lt;gforce_de1977&gt;</a></span><span class="message">but I need more time 8-)</span></div><div class="line" id="195153"><span class="nick" style="color:#80b1d3"><a href="#195153" label="[19:51:53]">&lt;gforce_de1977&gt;</a></span><span class="message">afk...cu you tomorrow</span></div><div class="line" id="195253"><span class="nick" style="color:#234e69"><a href="#195253" label="[19:52:53]">&lt;gef&gt;</a></span><span class="message">gforce_de1977: you might not have to, the ci/cd process should be the explanation for others. Ultimately it should make it visible to more eyes</span></div><div class="line" id="195320"><span class="nick" style="color:#8dd3c7"><a href="#195320" label="[19:53:20]">&lt;stikonas&gt;</a></span><span class="message">gef: don't we have ci process already...</span></div><div class="line" id="195531"><span class="nick" style="color:#8dd3c7"><a href="#195531" label="[19:55:31]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="195543"><span class="nick" style="color:#8dd3c7"><a href="#195543" label="[19:55:43]">&lt;stikonas&gt;</a></span><span class="message">this describes basically all stepts live-bootstrap does</span></div><div class="line" id="195616"><span class="nick" style="color:#234e69"><a href="#195616" label="[19:56:16]">&lt;gef&gt;</a></span><span class="message">stikonas: ah, yes. Somehow, I'd like to have an alternative interface, which is meant for people like me as consumers of the bootstrapping. The .cirrus.yml ci can continue doing what it is doing.</span></div><div class="line" id="195616"><span class="nick" style="color:#6c3d55"><a href="#195616" label="[19:56:16]">&lt;bauen1&gt;</a></span><span class="message">gef: stikonas: gforce_de1977: i've written v3 of myunix (<a rel="nofollow" href="https://gitlab.com/myunix/myunix/">https://gitlab.com/myunix/myunix/</a>)  that includes a very decent vfs implementation with mount and symlink support, though there might be a few parts missing right now, and i could reimplement it again very easily now that i know all the pit falls</span></div><div class="line" id="195730"><span class="nick" style="color:#234e69"><a href="#195730" label="[19:57:30]">&lt;gef&gt;</a></span><span class="message">oh, nice reference. Here's how I would like to see the ci pipelines look like! <a rel="nofollow" href="https://gitlab.com/myunix/myunix/-/pipelines">https://gitlab.com/myunix/myunix/-/pipelines</a> </span></div><div class="line" id="195744"><span class="nick" style="color:#6c3d55"><a href="#195744" label="[19:57:44]">&lt;bauen1&gt;</a></span><span class="message">imho the initial &quot;kernel&quot; bootstrap would probably start from hex0 -&gt; a better hex monitor -&gt; a first pseudo assembler -&gt; a monolithic kernel / library ; all done in the hypervisor &quot;ring&quot;, and then you start writing a microkernel</span></div><div class="line" id="195823"><span class="nick" style="color:#6c3d55"><a href="#195823" label="[19:58:23]">&lt;bauen1&gt;</a></span><span class="message">with a microkernel you keep your pseudo assembler or other tooling there and gradually add better &quot;infrastructure&quot;, e.g. a vfs instead of raw memory, a network driver to download more source code etc...</span></div><div class="line" id="195843"><span class="nick" style="color:#6c3d55"><a href="#195843" label="[19:58:43]">&lt;bauen1&gt;</a></span><span class="message">gef: they only build (and rome some basic code linting)</span></div><div class="line" id="195927"><span class="nick" style="color:#8dd3c7"><a href="#195927" label="[19:59:27]">&lt;stikonas&gt;</a></span><span class="message">so how is it different from what live-bootstrap runs?</span></div><div class="line" id="195939"><span class="nick" style="color:#8dd3c7"><a href="#195939" label="[19:59:39]">&lt;stikonas&gt;</a></span><span class="message">there is also code linting and the whole thing runs</span></div><div class="line" id="195954"><span class="nick" style="color:#8dd3c7"><a href="#195954" label="[19:59:54]">&lt;stikonas&gt;</a></span><span class="message">and if you want to consume those binaries, you can even extract them from chroot</span></div><div class="line" id="200007"><span class="nick" style="color:#6c3d55"><a href="#200007" label="[20:00:07]">&lt;bauen1&gt;</a></span><span class="message">we just need enough money to send everyone in this irc room to a remote island for a few months, along with an empty computer and a dozent books about x86 then the problem will solve itself</span></div><div class="line" id="200007"><span class="nick" style="color:#234e69"><a href="#200007" label="[20:00:07]">&lt;gef&gt;</a></span><span class="message">(if you ask about the CI aspect: it is only presentation, to me it is more readable)</span></div><div class="line" id="200015"><span class="nick" style="color:#8dd3c7"><a href="#200015" label="[20:00:15]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="200025"><span class="nick" style="color:#8dd3c7"><a href="#200025" label="[20:00:25]">&lt;stikonas&gt;</a></span><span class="message">you basically want another pipeline to do the same thing</span></div><div class="line" id="200434"><span class="nick" style="color:#234e69"><a href="#200434" label="[20:04:34]">&lt;gef&gt;</a></span><span class="message">stikonas: it would be similar or a parallel build, let's say. Just an alternative interface to the same process, hoping gitlab ci would become attractive for others to explore</span></div><div class="line" id="201954"><span class="nick" style="color:#8dd3c7"><a href="#201954" label="[20:19:54]">&lt;stikonas&gt;</a></span><span class="message">it's best to run it yourself anyway, not in CI... You can run ir on your computer</span></div><div class="line" id="234143"><span class="nick" style="color:#6c3d55"><a href="#234143" label="[23:41:43]">&lt;bauen1&gt;</a></span><span class="message">hm, i may have hit another spurious failure of gcc-4.0.4 related to autotools ...</span></div><br /></div></body></html>