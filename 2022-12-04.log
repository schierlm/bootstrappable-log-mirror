<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="132054"><span class="nick" style="color:#389600"><a href="#132054" label="[13:20:54]">&lt;Christoph[m]&gt;</a></span><span class="message">Ah. I didn't think about bying new hardware, I assumed you'd make Linux work on your machine. Seems a bit na√Øve now. In what sense does the hardware have to support linux?</span></div><div class="line" id="132521"><span class="nick" style="color:#389600"><a href="#132521" label="[13:25:21]">&lt;Christoph[m]&gt;</a></span><span class="message">Actually, it's bootstrapping, why shouldn't one start with nothing?</span></div><div class="line" id="133156"><span class="nick" style="color:#8dd3c7"><a href="#133156" label="[13:31:56]">&lt;stikonas[m]&gt;</a></span><span class="message">I also have aarch64 system (rockpro64).</span></div><div class="line" id="133216"><span class="nick" style="color:#8dd3c7"><a href="#133216" label="[13:32:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Christoph: e.g. my riscv32 system also doesn't support linux</span></div><div class="line" id="133231"><span class="nick" style="color:#8dd3c7"><a href="#133231" label="[13:32:31]">&lt;stikonas[m]&gt;</a></span><span class="message">(Pinecil)</span></div><div class="line" id="133439"><span class="nick" style="color:#8dd3c7"><a href="#133439" label="[13:34:39]">&lt;stikonas[m]&gt;</a></span><span class="message">It just not powerful enough for Linux</span></div><div class="line" id="133523"><span class="nick" style="color:#8dd3c7"><a href="#133523" label="[13:35:23]">&lt;stikonas[m]&gt;</a></span><span class="message">And yes, we do work on some lower level bootstrapping without linux</span></div><div class="line" id="133756"><span class="nick" style="color:#8dd3c7"><a href="#133756" label="[13:37:56]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters work uses BIOS calls to do I/O</span></div><div class="line" id="133757"><span class="nick" style="color:#8dd3c7"><a href="#133757" label="[13:37:57]">&lt;stikonas[m]&gt;</a></span><span class="message">We also have stage0-uefi</span></div><div class="line" id="133831"><span class="nick" style="color:#8dd3c7"><a href="#133831" label="[13:38:31]">&lt;stikonas[m]&gt;</a></span><span class="message">So these rely on system firmware</span></div><div class="line" id="133910"><span class="nick" style="color:#8dd3c7"><a href="#133910" label="[13:39:10]">&lt;stikonas[m]&gt;</a></span><span class="message">Anything without firmware would probably have to be hardware specific rather than arch specific</span></div><div class="line" id="135732"><span class="nick" style="color:#2e2a4a"><a href="#135732" label="[13:57:32]">&lt;oriansj&gt;</a></span><span class="message">Christoph[m]: There are different levels of bootstrapping</span></div><div class="line" id="135826"><span class="nick" style="color:#2e2a4a"><a href="#135826" label="[13:58:26]">&lt;oriansj&gt;</a></span><span class="message">for some building everything upon a trusted kernel is good enough. For others building upon trusted firmware is good enough. For others building upon trusted hardware is good enough and for others they need to make their own hardware</span></div><div class="line" id="135902"><span class="nick" style="color:#2e2a4a"><a href="#135902" label="[13:59:02]">&lt;oriansj&gt;</a></span><span class="message">we support all levels of bootstrapping here</span></div><div class="line" id="140046"><span class="nick" style="color:#2e2a4a"><a href="#140046" label="[14:00:46]">&lt;oriansj&gt;</a></span><span class="message">so to enable that when we wish to test upon a trusted kernel to do stage0-posix's steps we need hardware that is able to run a posix kernel</span></div><div class="line" id="140119"><span class="nick" style="color:#2e2a4a"><a href="#140119" label="[14:01:19]">&lt;oriansj&gt;</a></span><span class="message">if we were doing firmware or baremetal bootstrapping then the requirements would potentially be different</span></div><div class="line" id="140308"><span class="nick" style="color:#2e2a4a"><a href="#140308" label="[14:03:08]">&lt;oriansj&gt;</a></span><span class="message">because as we build paths on an architecture, it makes other paths on that architecture easier to do as well</span></div><div class="line" id="140438"><span class="nick" style="color:#2e2a4a"><a href="#140438" label="[14:04:38]">&lt;oriansj&gt;</a></span><span class="message">as we need to figure out a great many details about the architecture in question. Things like instruction encoding rules, memory map and odd bits which we wouldn't have known about until we started bootstrapping.</span></div><div class="line" id="140535"><span class="nick" style="color:#2e2a4a"><a href="#140535" label="[14:05:35]">&lt;oriansj&gt;</a></span><span class="message">It is usally easiest to start upon a kernel (as good debugging tools are available) and then move down the levels until you are making your own hardware.</span></div><div class="line" id="150935"><span class="nick" style="color:#389600"><a href="#150935" label="[15:09:35]">&lt;Christoph[m]&gt;</a></span><span class="message">I see, thank you!</span></div><div class="line" id="155020"><span class="nick" style="color:#6b8072"><a href="#155020" label="[15:50:20]">&lt;stikonas&gt;</a></span><span class="message">indeed, you can use gdb on linux. When I was writing stage0-uefi I had almost no debugging</span></div><div class="line" id="155042"><span class="nick" style="color:#6b8072"><a href="#155042" label="[15:50:42]">&lt;stikonas&gt;</a></span><span class="message">most of the stuff was figured out by exiting early and looking at return code</span></div><div class="line" id="162351"><span class="nick" style="color:#2e2a4a"><a href="#162351" label="[16:23:51]">&lt;oriansj&gt;</a></span><span class="message">which is a very hard way to do development</span></div><div class="line" id="162406"><span class="nick" style="color:#2e2a4a"><a href="#162406" label="[16:24:06]">&lt;oriansj&gt;</a></span><span class="message">and the lower one goes the less help they can get</span></div><div class="line" id="162436"><span class="nick" style="color:#6b8072"><a href="#162436" label="[16:24:36]">&lt;stikonas&gt;</a></span><span class="message">yes, once you get rid of firmware, you lose easy to read exit codes too</span></div><div class="line" id="162443"><span class="nick" style="color:#2e2a4a"><a href="#162443" label="[16:24:43]">&lt;oriansj&gt;</a></span><span class="message">So it is easiest to first port an architecture upon a kernel and then the next steps become much easier to do</span></div><div class="line" id="162448"><span class="nick" style="color:#6b8072"><a href="#162448" label="[16:24:48]">&lt;stikonas&gt;</a></span><span class="message">unless you have specialized hardware for that</span></div><div class="line" id="162529"><span class="nick" style="color:#6b8072"><a href="#162529" label="[16:25:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, some thing is still quite broken with uint*_t types...</span></div><div class="line" id="162605"><span class="nick" style="color:#6b8072"><a href="#162605" label="[16:26:05]">&lt;stikonas&gt;</a></span><span class="message">despite test0030 passing, when I try to use them to create uefi device_path struct, I get back some garbage</span></div><div class="line" id="162621"><span class="nick" style="color:#6b8072"><a href="#162621" label="[16:26:21]">&lt;stikonas&gt;</a></span><span class="message">i.e. store 1 into struct member, get some large negative number back...</span></div><div class="line" id="162701"><span class="nick" style="color:#6b8072"><a href="#162701" label="[16:27:01]">&lt;stikonas&gt;</a></span><span class="message">maybe I should actually use that struct for test0030...</span></div><div class="line" id="162904"><span class="nick" style="color:#6b8072"><a href="#162904" label="[16:29:04]">&lt;stikonas&gt;</a></span><span class="message">oh, it might actually be caused by something more subtle</span></div><div class="line" id="162919"><span class="nick" style="color:#6b8072"><a href="#162919" label="[16:29:19]">&lt;stikonas&gt;</a></span><span class="message">if I have uint8_t type; and type is set to 1</span></div><div class="line" id="162942"><span class="nick" style="color:#6b8072"><a href="#162942" label="[16:29:42]">&lt;stikonas&gt;</a></span><span class="message">then uint8_t rval = device_path-&gt;type works but unsigned rval = device_path-&gt;type is garbage</span></div><div class="line" id="163247"><span class="nick" style="color:#6b8072"><a href="#163247" label="[16:32:47]">&lt;stikonas&gt;</a></span><span class="message">and uint8_t rval = device_path-&gt;type; unsigned rval = r; also works</span></div><div class="line" id="163304"><span class="nick" style="color:#6b8072"><a href="#163304" label="[16:33:04]">&lt;stikonas&gt;</a></span><span class="message">dirty stack?</span></div><div class="line" id="165328"><span class="nick" style="color:#2e2a4a"><a href="#165328" label="[16:53:28]">&lt;oriansj&gt;</a></span><span class="message">sign vs zero extension</span></div><div class="line" id="165458"><span class="nick" style="color:#6b8072"><a href="#165458" label="[16:54:58]">&lt;stikonas&gt;</a></span><span class="message">oh, possibly...</span></div><div class="line" id="165516"><span class="nick" style="color:#6b8072"><a href="#165516" label="[16:55:16]">&lt;stikonas&gt;</a></span><span class="message">well, I should first create a better test, then I'll fix M2-Planet to pass it</span></div><div class="line" id="165525"><span class="nick" style="color:#6b8072"><a href="#165525" label="[16:55:25]">&lt;stikonas&gt;</a></span><span class="message">I might know where to fix it but we'll see</span></div><div class="line" id="165620"><span class="nick" style="color:#6b8072"><a href="#165620" label="[16:56:20]">&lt;stikonas&gt;</a></span><span class="message">I might need to add signed vs unsigned loading in load_value</span></div><div class="line" id="170136"><span class="nick" style="color:#2e2a4a"><a href="#170136" label="[17:01:36]">&lt;oriansj&gt;</a></span><span class="message">yeah stores don't care about signed or unsigned but loads always should</span></div><div class="line" id="171656"><span class="nick" style="color:#80b1d3"><a href="#171656" label="[17:16:56]">&lt;muurkha&gt;</a></span><span class="message">once you get rid of firmware your exit codes are beep sequences from the PC speaker or LED blinking sequences</span></div><div class="line" id="171707"><span class="nick" style="color:#80b1d3"><a href="#171707" label="[17:17:07]">&lt;muurkha&gt;</a></span><span class="message">depending on the hardware</span></div><div class="line" id="171941"><span class="nick" style="color:#2e2a4a"><a href="#171941" label="[17:19:41]">&lt;oriansj&gt;</a></span><span class="message">or nothing at all if you are unlucky &gt;.&lt;</span></div><div class="line" id="172300"><span class="nick" style="color:#80b1d3"><a href="#172300" label="[17:23:00]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's the hardest exit code to interpret</span></div><div class="line" id="195455"><span class="nick" style="color:#6b8072"><a href="#195455" label="[19:54:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, somehow managed to segfault M2-Planet... :(</span></div><div class="line" id="195530"><span class="nick" style="color:#6b8072"><a href="#195530" label="[19:55:30]">&lt;stikonas&gt;</a></span><span class="message">ok, my C file is illegal, though segfault should not happen even for illegal C</span></div><div class="line" id="213909"><span class="nick" style="color:#6b8072"><a href="#213909" label="[21:39:09]">&lt;stikonas&gt;</a></span><span class="message">oh, that's a bug in load_value...</span></div><div class="line" id="213913"><span class="nick" style="color:#6b8072"><a href="#213913" label="[21:39:13]">&lt;stikonas&gt;</a></span><span class="message">it should never return NULL</span></div><div class="line" id="214449"><span class="nick" style="color:#2e2a4a"><a href="#214449" label="[21:44:49]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'll do some fuzzing and clear out the possible segfaults the new code paths may have introduced.</span></div><div class="line" id="215106"><span class="nick" style="color:#6b8072"><a href="#215106" label="[21:51:06]">&lt;stikonas&gt;</a></span><span class="message">and I still haven't managed to get that stage0-uefi testcase reproduced as M2-Planet test</span></div><div class="line" id="215321"><span class="nick" style="color:#2e2a4a"><a href="#215321" label="[21:53:21]">&lt;oriansj&gt;</a></span><span class="message">well if fuzzing doesn't find anything in 24hours, odds are the bug is in the UEFI functions and then figuring it out become much harder.</span></div><div class="line" id="215548"><span class="nick" style="color:#6b8072"><a href="#215548" label="[21:55:48]">&lt;stikonas&gt;</a></span><span class="message">no, the bug is not in UEFI... it must be in M2-Planet</span></div><div class="line" id="215600"><span class="nick" style="color:#6b8072"><a href="#215600" label="[21:56:00]">&lt;stikonas&gt;</a></span><span class="message">I can reproduce that bug before calling UEFI function</span></div><div class="line" id="215818"><span class="nick" style="color:#6b8072"><a href="#215818" label="[21:58:18]">&lt;stikonas&gt;</a></span><span class="message">oriansj: for now segfault fix: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/48">https://github.com/oriansj/M2-Planet/pull/48</a> </span></div><div class="line" id="220713"><span class="nick" style="color:#2e2a4a"><a href="#220713" label="[22:07:13]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="220724"><span class="nick" style="color:#2e2a4a"><a href="#220724" label="[22:07:24]">&lt;oriansj&gt;</a></span><span class="message">I'll still be fuzzing</span></div><div class="line" id="220800"><span class="nick" style="color:#6b8072"><a href="#220800" label="[22:08:00]">&lt;stikonas&gt;</a></span><span class="message">sure, that's still useful</span></div><div class="line" id="220950"><span class="nick" style="color:#6b8072"><a href="#220950" label="[22:09:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and another segfault...</span></div><div class="line" id="221018"><span class="nick" style="color:#6b8072"><a href="#221018" label="[22:10:18]">&lt;stikonas&gt;</a></span><span class="message">oh, actually this one is not in M2-Planet</span></div><div class="line" id="221020"><span class="nick" style="color:#6b8072"><a href="#221020" label="[22:10:20]">&lt;stikonas&gt;</a></span><span class="message">but in the test</span></div><div class="line" id="221052"><span class="nick" style="color:#2e2a4a"><a href="#221052" label="[22:10:52]">&lt;oriansj&gt;</a></span><span class="message">which is a sign the M2-Planet generated code isn't exactly correct</span></div><div class="line" id="221131"><span class="nick" style="color:#6b8072"><a href="#221131" label="[22:11:31]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="221153"><span class="nick" style="color:#6b8072"><a href="#221153" label="[22:11:53]">&lt;stikonas&gt;</a></span><span class="message">well, that is expected, as I was trying to modify the test to trigger that UEFI bug...</span></div><div class="line" id="221201"><span class="nick" style="color:#6b8072"><a href="#221201" label="[22:12:01]">&lt;stikonas&gt;</a></span><span class="message">though on UEFI I had no crash, just wrong value</span></div><div class="line" id="221249"><span class="nick" style="color:#2e2a4a"><a href="#221249" label="[22:12:49]">&lt;oriansj&gt;</a></span><span class="message">well UEFI doesn't do proper memory protection right? so a segfault wouldn't show up as you would just be reading memory address zero</span></div><div class="line" id="221315"><span class="nick" style="color:#6b8072"><a href="#221315" label="[22:13:15]">&lt;stikonas&gt;</a></span><span class="message">oh I still had illegal C...</span></div><div class="line" id="221323"><span class="nick" style="color:#6b8072"><a href="#221323" label="[22:13:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, that is true...</span></div><div class="line" id="221527"><span class="nick" style="color:#6b8072"><a href="#221527" label="[22:15:27]">&lt;stikonas&gt;</a></span><span class="message">backtrace shows FOR_THEN__malloc_free_list_1</span></div><div class="line" id="221537"><span class="nick" style="color:#6b8072"><a href="#221537" label="[22:15:37]">&lt;stikonas&gt;</a></span><span class="message">but then the incorrect code might have been earlier...</span></div><div class="line" id="221545"><span class="nick" style="color:#6b8072"><a href="#221545" label="[22:15:45]">&lt;stikonas&gt;</a></span><span class="message">well, I should probably first try to fix load_value</span></div><div class="line" id="221610"><span class="nick" style="color:#2e2a4a"><a href="#221610" label="[22:16:10]">&lt;oriansj&gt;</a></span><span class="message">oh malloc and free bugs are always fun</span></div><div class="line" id="221739"><span class="nick" style="color:#2e2a4a"><a href="#221739" label="[22:17:39]">&lt;oriansj&gt;</a></span><span class="message">got to remember to get out the coloring book and crayons and use color to try to figure this out</span></div><div class="line" id="221750"><span class="nick" style="color:#6b8072"><a href="#221750" label="[22:17:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, that segfaults on the first calloc</span></div><div class="line" id="221800"><span class="nick" style="color:#6b8072"><a href="#221800" label="[22:18:00]">&lt;stikonas&gt;</a></span><span class="message">might be that libc.M1 does not initialize it</span></div><div class="line" id="221845"><span class="nick" style="color:#6b8072"><a href="#221845" label="[22:18:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, I need to switch to libc-full...</span></div><div class="line" id="223136"><span class="nick" style="color:#6b8072"><a href="#223136" label="[22:31:36]">&lt;stikonas&gt;</a></span><span class="message">it's possibly that current crash is due to not everything being ported to load/store_value...</span></div><div class="line" id="223145"><span class="nick" style="color:#6b8072"><a href="#223145" label="[22:31:45]">&lt;stikonas&gt;</a></span><span class="message">s/possibly/possible/</span></div><div class="line" id="223510"><span class="nick" style="color:#6b8072"><a href="#223510" label="[22:35:10]">&lt;stikonas&gt;</a></span><span class="message">oh, actually it's because stuff like that is not yet supported array[1]-&gt;member</span></div><div class="line" id="231830"><span class="nick" style="color:#6b8072"><a href="#231830" label="[23:18:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I've been investigating a bit, signed load might be one thing we need to fix, but I think the problem I saw in UEFI is also caused by incorrect load size</span></div><div class="line" id="231906"><span class="nick" style="color:#6b8072"><a href="#231906" label="[23:19:06]">&lt;stikonas&gt;</a></span><span class="message">i.e. when I'm doing uint16_t rval = device_path-&gt;subtype</span></div><div class="line" id="232021"><span class="nick" style="color:#6b8072"><a href="#232021" label="[23:20:21]">&lt;stikonas&gt;</a></span><span class="message">it has 3 from device_path-&gt;type = HARDWARE_DEVICE_PATH; but also higher 8 bits have 24 from device_path-&gt;length = sizeof(struct efi_device_path_protocol);</span></div><div class="line" id="232115"><span class="nick" style="color:#6b8072"><a href="#232115" label="[23:21:15]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's not exactly what I did, let me try again</span></div><div class="line" id="232120"><span class="nick" style="color:#6b8072"><a href="#232120" label="[23:21:20]">&lt;stikonas&gt;</a></span><span class="message">I was reading 2nd element of the struct</span></div><div class="line" id="232128"><span class="nick" style="color:#6b8072"><a href="#232128" label="[23:21:28]">&lt;stikonas&gt;</a></span><span class="message">which was device_path-&gt;subtype = MEMORY_MAPPED;</span></div><div class="line" id="232132"><span class="nick" style="color:#6b8072"><a href="#232132" label="[23:21:32]">&lt;stikonas&gt;</a></span><span class="message">subtype is uint8_t</span></div><div class="line" id="232146"><span class="nick" style="color:#6b8072"><a href="#232146" label="[23:21:46]">&lt;stikonas&gt;</a></span><span class="message">but it's contaminated with the 3rd element of the struct, it ends up in higher bits of rval</span></div><div class="line" id="232216"><span class="nick" style="color:#6b8072"><a href="#232216" label="[23:22:16]">&lt;stikonas&gt;</a></span><span class="message">which probably happens because now read size is taken from uint16_t rval</span></div><div class="line" id="232235"><span class="nick" style="color:#6b8072"><a href="#232235" label="[23:22:35]">&lt;stikonas&gt;</a></span><span class="message">but should be uint8_t...</span></div><div class="line" id="233348"><span class="nick" style="color:#6b8072"><a href="#233348" label="[23:33:48]">&lt;stikonas&gt;</a></span><span class="message">though I don't understand why I can't reproduce it in M2-Planet tests...</span></div><div class="line" id="235200"><span class="nick" style="color:#2e2a4a"><a href="#235200" label="[23:52:00]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I guess I'll need to dig into it to figure out why</span></div><div class="line" id="235652"><span class="nick" style="color:#6b8072"><a href="#235652" label="[23:56:52]">&lt;stikonas&gt;</a></span><span class="message">well, that might help it solve quicker. I'm also digging into it, but it's a bit hard when I can't exactly reproduce it on posix</span></div><br /></div></body></html>