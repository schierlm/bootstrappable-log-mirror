<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000404"><span class="nick" style="color:#389600"><a href="#000404" label="[00:04:04]">&lt;stikonas&gt;</a></span><span class="message">yes, that sounds good</span></div><div class="line" id="000419"><span class="nick" style="color:#389600"><a href="#000419" label="[00:04:19]">&lt;stikonas&gt;</a></span><span class="message">or maybe just M2LIBC=../path/to/M2libc</span></div><div class="line" id="000437"><span class="nick" style="color:#8dd3c7"><a href="#000437" label="[00:04:37]">&lt;oriansj&gt;</a></span><span class="message">if you want</span></div><div class="line" id="000451"><span class="nick" style="color:#389600"><a href="#000451" label="[00:04:51]">&lt;stikonas&gt;</a></span><span class="message">hmm, well I don't really have strong preference</span></div><div class="line" id="000457"><span class="nick" style="color:#8dd3c7"><a href="#000457" label="[00:04:57]">&lt;oriansj&gt;</a></span><span class="message">I'm just setting up the basics and feel free to change the names to suit you</span></div><div class="line" id="000501"><span class="nick" style="color:#389600"><a href="#000501" label="[00:05:01]">&lt;stikonas&gt;</a></span><span class="message">if you think more verbose is better, let's go with that</span></div><div class="line" id="000511"><span class="nick" style="color:#8dd3c7"><a href="#000511" label="[00:05:11]">&lt;oriansj&gt;</a></span><span class="message">well less possible collision</span></div><div class="line" id="000517"><span class="nick" style="color:#389600"><a href="#000517" label="[00:05:17]">&lt;stikonas&gt;</a></span><span class="message">ok, let's go with longer</span></div><div class="line" id="000529"><span class="nick" style="color:#8dd3c7"><a href="#000529" label="[00:05:29]">&lt;oriansj&gt;</a></span><span class="message">and easier for people doing an audit to look at and guess correctly</span></div><div class="line" id="000732"><span class="nick" style="color:#389600"><a href="#000732" label="[00:07:32]">&lt;stikonas&gt;</a></span><span class="message">and spawned utilities are taken from PATH?</span></div><div class="line" id="000744"><span class="nick" style="color:#8dd3c7"><a href="#000744" label="[00:07:44]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="000749"><span class="nick" style="color:#389600"><a href="#000749" label="[00:07:49]">&lt;stikonas&gt;</a></span><span class="message">possibly with some env variable overrides...</span></div><div class="line" id="000804"><span class="nick" style="color:#8dd3c7"><a href="#000804" label="[00:08:04]">&lt;oriansj&gt;</a></span><span class="message">if needed</span></div><div class="line" id="000830"><span class="nick" style="color:#389600"><a href="#000830" label="[00:08:30]">&lt;stikonas&gt;</a></span><span class="message">hmm, before full kaem is built, stage0-posix can't easily use env-variables</span></div><div class="line" id="000900"><span class="nick" style="color:#389600"><a href="#000900" label="[00:09:00]">&lt;stikonas&gt;</a></span><span class="message">but we can just be explicit up to that point</span></div><div class="line" id="000906"><span class="nick" style="color:#8dd3c7"><a href="#000906" label="[00:09:06]">&lt;oriansj&gt;</a></span><span class="message">stikonas: true but M2-Mesoplanet can be done after kaem but before mescc-tools-extra</span></div><div class="line" id="000913"><span class="nick" style="color:#389600"><a href="#000913" label="[00:09:13]">&lt;stikonas&gt;</a></span><span class="message">it will still make building mescc-tools and -extra much easier</span></div><div class="line" id="000942"><span class="nick" style="color:#8dd3c7"><a href="#000942" label="[00:09:42]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="000943"><span class="nick" style="color:#389600"><a href="#000943" label="[00:09:43]">&lt;stikonas&gt;</a></span><span class="message">well, we can build M2-Mesoplanet eariler, just wouldn't rely on auto-spawning</span></div><div class="line" id="001441"><span class="nick" style="color:#8dd3c7"><a href="#001441" label="[00:14:41]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="003048"><span class="nick" style="color:#8dd3c7"><a href="#003048" label="[00:30:48]">&lt;oriansj&gt;</a></span><span class="message">ok basics are up</span></div><div class="line" id="003112"><span class="nick" style="color:#8dd3c7"><a href="#003112" label="[00:31:12]">&lt;oriansj&gt;</a></span><span class="message">wife interrupt indicates dinner. Will resume after; happy hacking</span></div><div class="line" id="013330"><span class="nick" style="color:#389600"><a href="#013330" label="[01:33:30]">&lt;stikonas&gt;</a></span><span class="message">pushed WIP branch macro_functions for M2-Mesoplanet</span></div><div class="line" id="013525"><span class="nick" style="color:#389600"><a href="#013525" label="[01:35:25]">&lt;stikonas&gt;</a></span><span class="message">will need more changes (whitespace processing) before we can merge it</span></div><div class="line" id="014543"><span class="nick" style="color:#8dd3c7"><a href="#014543" label="[01:45:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and I have a stupid idea to hack the preprocessed output so that M2-Planet still produces useful line error numbers</span></div><div class="line" id="014620"><span class="nick" style="color:#8dd3c7"><a href="#014620" label="[01:46:20]">&lt;oriansj&gt;</a></span><span class="message">\x7F FILENAME\n</span></div><div class="line" id="014750"><span class="nick" style="color:#8dd3c7"><a href="#014750" label="[01:47:50]">&lt;oriansj&gt;</a></span><span class="message">cc_reader can use \x7F as a single character flag to reset the line number and change the filename we use when building the tokens</span></div><div class="line" id="014830"><span class="nick" style="color:#8dd3c7"><a href="#014830" label="[01:48:30]">&lt;oriansj&gt;</a></span><span class="message">and as it is the DEL character, it shouldn't ever be in human written input anyway</span></div><div class="line" id="015124"><span class="nick" style="color:#8dd3c7"><a href="#015124" label="[01:51:24]">&lt;oriansj&gt;</a></span><span class="message">I'll be working on the spawn bit in cc.c so it doesn't impact your work in cc_macro.c</span></div><div class="line" id="015216"><span class="nick" style="color:#8dd3c7"><a href="#015216" label="[01:52:16]">&lt;oriansj&gt;</a></span><span class="message">Unless you want me to hack together basic #include support so you can avoid any possible merge conflicts</span></div><div class="line" id="020214"><span class="nick" style="color:#6b8072"><a href="#020214" label="[02:02:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Del might work. Or alternatively, have line info in auto generated comments and strip them in m2-planet</span></div><div class="line" id="020302"><span class="nick" style="color:#6b8072"><a href="#020302" label="[02:03:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Either spawning or include shouldn't cause conflicts for me</span></div><div class="line" id="020320"><span class="nick" style="color:#6b8072"><a href="#020320" label="[02:03:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Or at least easy to resolve...</span></div><div class="line" id="023029"><span class="nick" style="color:#8dd3c7"><a href="#023029" label="[02:30:29]">&lt;oriansj&gt;</a></span><span class="message">well I could also do // FILENAME foo.c much like // CONSTANT foo 4 we have now</span></div><div class="line" id="023110"><span class="nick" style="color:#8dd3c7"><a href="#023110" label="[02:31:10]">&lt;oriansj&gt;</a></span><span class="message">might require more complexity in M2-Planet's cc_reader.c but I'll look into that later</span></div><div class="line" id="024848"><span class="nick" style="color:#8dd3c7"><a href="#024848" label="[02:48:48]">&lt;oriansj&gt;</a></span><span class="message">I guess I'm going to have to add a couple syscalls in M2libc to support proper tempfiles</span></div><div class="line" id="030556"><span class="nick" style="color:#8dd3c7"><a href="#030556" label="[03:05:56]">&lt;oriansj&gt;</a></span><span class="message">and of course risc-v doesn't have unlink</span></div><div class="line" id="031338"><span class="nick" style="color:#8dd3c7"><a href="#031338" label="[03:13:38]">&lt;oriansj&gt;</a></span><span class="message">so best guess attempt and moving on</span></div><div class="line" id="031752"><span class="nick" style="color:#8dd3c7"><a href="#031752" label="[03:17:52]">&lt;oriansj&gt;</a></span><span class="message">prototype for unlink and remove are up</span></div><div class="line" id="031811"><span class="nick" style="color:#8dd3c7"><a href="#031811" label="[03:18:11]">&lt;oriansj&gt;</a></span><span class="message">now to figure out the correct way to deal with mkstemp</span></div><div class="line" id="031905"><span class="nick" style="color:#8dd3c7"><a href="#031905" label="[03:19:05]">&lt;oriansj&gt;</a></span><span class="message">as it is supposed to be: unistd.h for legacy systems but stdlib.h per IEEE Std 1003.1, 2004 but it is just a naked syscall</span></div><div class="line" id="033305"><span class="nick" style="color:#8dd3c7"><a href="#033305" label="[03:33:05]">&lt;oriansj&gt;</a></span><span class="message">why not the way it was likely done by most libcs; make unistd.h have a int _mkstemp(char *template); and put a mkstemp stub function that calls _mkstemp</span></div><div class="line" id="033403"><span class="nick">***</span><span class="message notice">jackhill is now known as KM4MBG</span></div><div class="line" id="033526"><span class="nick" style="color:#8dd3c7"><a href="#033526" label="[03:35:26]">&lt;oriansj&gt;</a></span><span class="message">umm wait, not a syscall</span></div><div class="line" id="034618"><span class="nick" style="color:#8dd3c7"><a href="#034618" label="[03:46:18]">&lt;oriansj&gt;</a></span><span class="message">hmmm we might have to tweak M2libc when we get into doing #includes</span></div><div class="line" id="035946"><span class="nick" style="color:#8dd3c7"><a href="#035946" label="[03:59:46]">&lt;oriansj&gt;</a></span><span class="message">correct me if I am wrong but it looks like <a rel="nofollow" href="https://man7.org/linux/man-pages/man3/mkstemp.3.html">https://man7.org/linux/man-pages/man3/mkstemp.3.html</a>  just does open a bunch until it finds a working new filename</span></div><div class="line" id="040156"><span class="nick" style="color:#8dd3c7"><a href="#040156" label="[04:01:56]">&lt;oriansj&gt;</a></span><span class="message">now to figure out the magic number for O_EXCL</span></div><div class="line" id="042516"><span class="nick">***</span><span class="message notice">KM4MBG is now known as jackhill</span></div><div class="line" id="043525"><span class="nick" style="color:#8dd3c7"><a href="#043525" label="[04:35:25]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1220359/">https://paste.debian.net/1220359/</a> </span></div><div class="line" id="043557"><span class="nick" style="color:#8dd3c7"><a href="#043557" label="[04:35:57]">&lt;oriansj&gt;</a></span><span class="message">a prototype for mkstemp using the tempname bacon for the function</span></div><div class="line" id="044142"><span class="nick" style="color:#8dd3c7"><a href="#044142" label="[04:41:42]">&lt;oriansj&gt;</a></span><span class="message">and prototype for mkstemp is up</span></div><div class="line" id="044238"><span class="nick" style="color:#8dd3c7"><a href="#044238" label="[04:42:38]">&lt;oriansj&gt;</a></span><span class="message">the standards body should have made it part of stdio.h instead of stdlib.h</span></div><div class="line" id="120941"><span class="nick" style="color:#6b8072"><a href="#120941" label="[12:09:41]">&lt;stikonas[m]&gt;</a></span><span class="message">yeah, it looks like mkstemp doesn't need any syscalls. Hmm, and strangely, meslibc does not implement it either</span></div><div class="line" id="121357"><span class="nick" style="color:#8dd3c7"><a href="#121357" label="[12:13:57]">&lt;oriansj&gt;</a></span><span class="message">yeah that is odd isn't it</span></div><div class="line" id="121449"><span class="nick" style="color:#8dd3c7"><a href="#121449" label="[12:14:49]">&lt;oriansj&gt;</a></span><span class="message">perhaps a more clever solution?</span></div><div class="line" id="121557"><span class="nick" style="color:#8dd3c7"><a href="#121557" label="[12:15:57]">&lt;oriansj&gt;</a></span><span class="message">and O_EXCL isn't even used outside its #define in mes</span></div><div class="line" id="122629"><span class="nick" style="color:#8dd3c7"><a href="#122629" label="[12:26:29]">&lt;oriansj&gt;</a></span><span class="message">ok, it appears mes just changes the suffix of the input files and overwrites anyfile that might have that name</span></div><div class="line" id="122801"><span class="nick" style="color:#8dd3c7"><a href="#122801" label="[12:28:01]">&lt;oriansj&gt;</a></span><span class="message">you can find it real quick by looking for M1-&gt;blood-elf in module/mescc/mescc.scm</span></div><div class="line" id="123129"><span class="nick" style="color:#6b8072"><a href="#123129" label="[12:31:29]">&lt;stikonas[m]&gt;</a></span><span class="message">hmm, musl uses something similar</span></div><div class="line" id="123211"><span class="nick" style="color:#6b8072"><a href="#123211" label="[12:32:11]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.musl-libc.org/cgit/musl/tree/src/temp/mkostemps.c">https://git.musl-libc.org/cgit/musl/tree/src/temp/mkostemps.c</a> </span></div><div class="line" id="123312"><span class="nick" style="color:#6b8072"><a href="#123312" label="[12:33:12]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess either way will work (tempfiles or overwriting files with changed suffix)</span></div><div class="line" id="123408"><span class="nick" style="color:#8dd3c7"><a href="#123408" label="[12:34:08]">&lt;oriansj&gt;</a></span><span class="message">well tempfiles is the way least likely to accidentially destroy someone else's work</span></div><div class="line" id="123541"><span class="nick" style="color:#8dd3c7"><a href="#123541" label="[12:35:41]">&lt;oriansj&gt;</a></span><span class="message">but oh well; I've got that all sorted and will get back to hacking on the spawn logic (which is kinda ugly but I'll get it done)</span></div><div class="line" id="124942"><span class="nick" style="color:#8dd3c7"><a href="#124942" label="[12:49:42]">&lt;oriansj&gt;</a></span><span class="message">probably best to set a fuzzing mode flag when dealing with exec as that is kinda dangerous as fuck</span></div><div class="line" id="125959"><span class="nick" style="color:#389600"><a href="#125959" label="[12:59:59]">&lt;stikonas&gt;</a></span><span class="message">yeah, we don't want running random executables...</span></div><div class="line" id="135225"><span class="nick" style="color:#8dd3c7"><a href="#135225" label="[13:52:25]">&lt;oriansj&gt;</a></span><span class="message">hmm what the heck is the standard C way of going from the int file handle to a proper C FILE* object?</span></div><div class="line" id="135302"><span class="nick" style="color:#80b1d3"><a href="#135302" label="[13:53:02]">&lt;riv&gt;</a></span><span class="message">fdopen I think</span></div><div class="line" id="135630"><span class="nick" style="color:#8dd3c7"><a href="#135630" label="[13:56:30]">&lt;oriansj&gt;</a></span><span class="message">might have to add that to M2libc then</span></div><div class="line" id="141144"><span class="nick" style="color:#389600"><a href="#141144" label="[14:11:44]">&lt;stikonas&gt;</a></span><span class="message">well, probably functions needed to build mes should also be moved to m2libc...</span></div><div class="line" id="141401"><span class="nick" style="color:#389600"><a href="#141401" label="[14:14:01]">&lt;stikonas&gt;</a></span><span class="message">but that's for future...</span></div><br /></div></body></html>