<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002518"><span class="nick" style="color:#389600"><a href="#002518" label="[00:25:18]">&lt;oriansj&gt;</a></span><span class="message">and one thing that might be interesting: <a rel="nofollow" href="https://archiveprogram.github.com/">https://archiveprogram.github.com/</a> </span></div><div class="line" id="012444"><span class="nick" style="color:#2e2a4a"><a href="#012444" label="[01:24:44]">&lt;xentrac&gt;</a></span><span class="message">oriansj: hmm, I guess I was wrong</span></div><div class="line" id="012457"><span class="nick" style="color:#2e2a4a"><a href="#012457" label="[01:24:57]">&lt;xentrac&gt;</a></span><span class="message">thanks for the note!</span></div><div class="line" id="014306"><span class="nick" style="color:#389600"><a href="#014306" label="[01:43:06]">&lt;oriansj&gt;</a></span><span class="message">xentrac: no problem; just remember hardware is always faster than software but flaws can't be fixed and everything added has to be supported forever. (Including that little stupid dance bootloaders need to do to get to protected mode)</span></div><div class="line" id="025841"><span class="nick" style="color:#6b8072"><a href="#025841" label="[02:58:41]">&lt;fosslinux&gt;</a></span><span class="message">hey. i'm having an issue with cc_x86 on stage0. the rom sha matches.</span></div><div class="line" id="025844"><span class="nick" style="color:#6b8072"><a href="#025844" label="[02:58:44]">&lt;fosslinux&gt;</a></span><span class="message">when i run it, i get:</span></div><div class="line" id="025853"><span class="nick" style="color:#6b8072"><a href="#025853" label="[02:58:53]">&lt;fosslinux&gt;</a></span><span class="message">âžœ bin/vm --rom roms/cc_x86</span></div><div class="line" id="025855"><span class="nick" style="color:#6b8072"><a href="#025855" label="[02:58:55]">&lt;fosslinux&gt;</a></span><span class="message">Invalid state reached after: 11 instructions</span></div><div class="line" id="025857"><span class="nick" style="color:#6b8072"><a href="#025857" label="[02:58:57]">&lt;fosslinux&gt;</a></span><span class="message">16386: Writeout bytes Address_2 is outside of World</span></div><div class="line" id="025927"><span class="nick" style="color:#6b8072"><a href="#025927" label="[02:59:27]">&lt;fosslinux&gt;</a></span><span class="message">i'm not sure what is causing this.</span></div><div class="line" id="030015"><span class="nick" style="color:#6b8072"><a href="#030015" label="[03:00:15]">&lt;fosslinux&gt;</a></span><span class="message">this still occurs when i add a tape.</span></div><div class="line" id="030047"><span class="nick" style="color:#6b8072"><a href="#030047" label="[03:00:47]">&lt;fosslinux&gt;</a></span><span class="message">this /seems/ to be a problem with my bin/vm binary, but i'm not completely sure</span></div><div class="line" id="030052"><span class="nick" style="color:#6b8072"><a href="#030052" label="[03:00:52]">&lt;fosslinux&gt;</a></span><span class="message">i compiled bin/vm with gcc9</span></div><div class="line" id="045143"><span class="nick" style="color:#6b8072"><a href="#045143" label="[04:51:43]">&lt;fosslinux&gt;</a></span><span class="message">oops</span></div><div class="line" id="045146"><span class="nick" style="color:#6b8072"><a href="#045146" label="[04:51:46]">&lt;fosslinux&gt;</a></span><span class="message">just me being silly</span></div><div class="line" id="045151"><span class="nick" style="color:#6b8072"><a href="#045151" label="[04:51:51]">&lt;fosslinux&gt;</a></span><span class="message">i didnt allocate enough memory</span></div><div class="line" id="045201"><span class="nick" style="color:#6b8072"><a href="#045201" label="[04:52:01]">&lt;fosslinux&gt;</a></span><span class="message">ignore me :P</span></div><div class="line" id="143806"><span class="nick" style="color:#389600"><a href="#143806" label="[14:38:06]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: actually not silly but a useful attempt to help us identify and solve a potential problem. Thank you</span></div><div class="line" id="154421"><span class="nick" style="color:#80b1d3"><a href="#154421" label="[15:44:21]">&lt;janneke&gt;</a></span><span class="message">yeah, i agree; when you (finally) see what went wrong it is often very easy to correct; that hardly changes how easy the puzzle was to solve without that awareness</span></div><div class="line" id="154825"><span class="nick" style="color:#80b1d3"><a href="#154825" label="[15:48:25]">&lt;janneke&gt;</a></span><span class="message">i am having this boot-9 module system integration puzzle, maybe that talking to #bootstrappable works</span></div><div class="line" id="155648"><span class="nick" style="color:#389600"><a href="#155648" label="[15:56:48]">&lt;oriansj&gt;</a></span><span class="message">janneke: usually does</span></div><div class="line" id="155731"><span class="nick" style="color:#80b1d3"><a href="#155731" label="[15:57:31]">&lt;janneke&gt;</a></span><span class="message">mes is using `handle's to store variable values, a pair of a symbol and any value: (key . value); e.g. (foo . &quot;bar&quot;)</span></div><div class="line" id="155734"><span class="nick" style="color:#80b1d3"><a href="#155734" label="[15:57:34]">&lt;janneke&gt;</a></span><span class="message">for local variables and closured variables, these are stored in an alist, globals are stored in a hash table</span></div><div class="line" id="155741"><span class="nick" style="color:#80b1d3"><a href="#155741" label="[15:57:41]">&lt;janneke&gt;</a></span><span class="message">that should not matter, but anyhow</span></div><div class="line" id="155755"><span class="nick" style="color:#80b1d3"><a href="#155755" label="[15:57:55]">&lt;janneke&gt;</a></span><span class="message">now, guile (i am looking at 1.8, but also current versions) has an extra indirection, called #&lt;variable&gt;</span></div><div class="line" id="155820"><span class="nick" style="color:#80b1d3"><a href="#155820" label="[15:58:20]">&lt;janneke&gt;</a></span><span class="message">so, guile stores variables like this: (foo . #&lt;variable &quot;bar&quot;&gt;)</span></div><div class="line" id="155957"><span class="nick" style="color:#80b1d3"><a href="#155957" label="[15:59:57]">&lt;janneke&gt;</a></span><span class="message">actually, it prints like (foo . #&lt;variable value: &quot;bar&quot;&gt;)</span></div><div class="line" id="160107"><span class="nick" style="color:#80b1d3"><a href="#160107" label="[16:01:07]">&lt;janneke&gt;</a></span><span class="message">the boot-9 module system expects such variables, module-variable, variable-ref, module-add etc.</span></div><div class="line" id="160309"><span class="nick" style="color:#80b1d3"><a href="#160309" label="[16:03:09]">&lt;janneke&gt;</a></span><span class="message">that all works now in mes, but it seems problematic for integrating it in eval-apply</span></div><div class="line" id="160501"><span class="nick" style="color:#80b1d3"><a href="#160501" label="[16:05:01]">&lt;janneke&gt;</a></span><span class="message">eval-apply wants to do: symbol -&gt; value</span></div><div class="line" id="160610"><span class="nick" style="color:#80b1d3"><a href="#160610" label="[16:06:10]">&lt;janneke&gt;</a></span><span class="message">adding a simple extra indirection for variable does seem to work</span></div><div class="line" id="160634"><span class="nick" style="color:#80b1d3"><a href="#160634" label="[16:06:34]">&lt;janneke&gt;</a></span><span class="message">'foo -&gt; (foo . &quot;bar&quot;) =&gt; handle-&gt;cdr</span></div><div class="line" id="160658"><span class="nick" style="color:#389600"><a href="#160658" label="[16:06:58]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="160726"><span class="nick" style="color:#389600"><a href="#160726" label="[16:07:26]">&lt;oriansj&gt;</a></span><span class="message">So like how Slow_lisp handles variables</span></div><div class="line" id="160741"><span class="nick" style="color:#80b1d3"><a href="#160741" label="[16:07:41]">&lt;janneke&gt;</a></span><span class="message">'foo-boot9 -&gt; (foo-boot9 . #&lt;variable &quot;bar&quot;) =&gt; handle-&gt;cdr -&gt; #&lt;variable &quot;bar&quot;&gt; -&gt; var-&gt;value *boom* (somewhere deep in eval/apply)</span></div><div class="line" id="160835"><span class="nick" style="color:#389600"><a href="#160835" label="[16:08:35]">&lt;oriansj&gt;</a></span><span class="message">why don't we do something simpler and smarter for modules</span></div><div class="line" id="160852"><span class="nick" style="color:#80b1d3"><a href="#160852" label="[16:08:52]">&lt;janneke&gt;</a></span><span class="message">i cannot see why an extra dereference of a #&lt;variable&gt; would not work; afaiu a #&lt;variable&gt; never directly holds another #&lt;variable....</span></div><div class="line" id="160954"><span class="nick" style="color:#389600"><a href="#160954" label="[16:09:54]">&lt;oriansj&gt;</a></span><span class="message">wouldn't an alist forest be a simpler way to handle modules?</span></div><div class="line" id="161006"><span class="nick" style="color:#80b1d3"><a href="#161006" label="[16:10:06]">&lt;janneke&gt;</a></span><span class="message">yes...i'm pretty ambivalaent -- using guile-1.8 code gives pretty good guile compatibility!</span></div><div class="line" id="161052"><span class="nick" style="color:#389600"><a href="#161052" label="[16:10:52]">&lt;oriansj&gt;</a></span><span class="message">well that is one option we never really took seriously</span></div><div class="line" id="161125"><span class="nick" style="color:#389600"><a href="#161125" label="[16:11:25]">&lt;oriansj&gt;</a></span><span class="message">I mean; converting guile-1.8 to M2-Planet is something entirely technically possible</span></div><div class="line" id="161146"><span class="nick" style="color:#80b1d3"><a href="#161146" label="[16:11:46]">&lt;janneke&gt;</a></span><span class="message">hah, yes i was thinking that too...</span></div><div class="line" id="161315"><span class="nick" style="color:#80b1d3"><a href="#161315" label="[16:13:15]">&lt;janneke&gt;</a></span><span class="message">i would like to not rewrite boot-9 right now, just use it if possible and rewrite later (oh ... my usual pitfall?)</span></div><div class="line" id="161342"><span class="nick" style="color:#389600"><a href="#161342" label="[16:13:42]">&lt;oriansj&gt;</a></span><span class="message">janneke: what if we attacked this from an alternate route?</span></div><div class="line" id="161351"><span class="nick" style="color:#80b1d3"><a href="#161351" label="[16:13:51]">&lt;janneke&gt;</a></span><span class="message">but i also don't want to add this #&lt;variable&gt; indirection everywhere and spend one extra cell for each variable</span></div><div class="line" id="161454"><span class="nick" style="color:#389600"><a href="#161454" label="[16:14:54]">&lt;oriansj&gt;</a></span><span class="message">Let us ignore guile's internals for a second and think in terms of scheme functionality and behavior that actually what we care about.</span></div><div class="line" id="161909"><span class="nick" style="color:#80b1d3"><a href="#161909" label="[16:19:09]">&lt;janneke&gt;</a></span><span class="message">yeah, well... things like variable?, variable-bound?, module-variable, module-define! are public guile functions; so having them could be a feature.  otoh, we could always decide on adding them later and start small</span></div><div class="line" id="162024"><span class="nick" style="color:#80b1d3"><a href="#162024" label="[16:20:24]">&lt;janneke&gt;</a></span><span class="message">or not add them and rewrite nyacc or guix code if it needs such details</span></div><div class="line" id="162625"><span class="nick" style="color:#389600"><a href="#162625" label="[16:26:25]">&lt;oriansj&gt;</a></span><span class="message">well that is the thing, when I see variable? I think walk the current alist and return #t if found and #f if not but nothing that would require any of those implementation details</span></div><div class="line" id="162700"><span class="nick" style="color:#389600"><a href="#162700" label="[16:27:00]">&lt;oriansj&gt;</a></span><span class="message">when I see module-define! I simply imagine a pointer to an alist assigned to a variable name</span></div><div class="line" id="163137"><span class="nick" style="color:#389600"><a href="#163137" label="[16:31:37]">&lt;oriansj&gt;</a></span><span class="message">if I have good primitive tests; I can make mes-m2 do anything you want janneke</span></div><div class="line" id="163249"><span class="nick" style="color:#389600"><a href="#163249" label="[16:32:49]">&lt;oriansj&gt;</a></span><span class="message">for example I made mes-m2 vectors internally lists without it being visable to programs that leverage that functionality</span></div><div class="line" id="163344"><span class="nick" style="color:#389600"><a href="#163344" label="[16:33:44]">&lt;oriansj&gt;</a></span><span class="message">and I can do that for anything else if I have good tests</span></div><div class="line" id="163539"><span class="nick" style="color:#80b1d3"><a href="#163539" label="[16:35:39]">&lt;janneke&gt;</a></span><span class="message">oriansj: yes, that's just great</span></div><div class="line" id="163922"><span class="nick" style="color:#389600"><a href="#163922" label="[16:39:22]">&lt;oriansj&gt;</a></span><span class="message">remember at the core; alternate but compatible where guile doesn't abuse the spec</span></div><div class="line" id="164226"><span class="nick" style="color:#80b1d3"><a href="#164226" label="[16:42:26]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="164602"><span class="nick" style="color:#389600"><a href="#164602" label="[16:46:02]">&lt;oriansj&gt;</a></span><span class="message">we at this moment have 2 paths ahead of us: 1) take our working mes-m2 and expand it slowly with more and more working tests or 2) make guile-1.8 buildable by M2-Planet and hopefully not break it while doing so</span></div><div class="line" id="192851"><span class="nick" style="color:#389600"><a href="#192851" label="[19:28:51]">&lt;oriansj&gt;</a></span><span class="message">personally I find the task of making guile-1.8 buildable by M2-Planet a bit of a task (akin to just making TCC directly buildable by M2-Planet) and thus propose the following plan: MesCC expands to be able to build guile-1.8 and GCC 4.7 directly; during which time I expand mes-m2  to the support all of the functions required to run MesCC directly.</span></div><div class="line" id="195515"><span class="nick" style="color:#6d2462"><a href="#195515" label="[19:55:15]">&lt;Hagfish&gt;</a></span><span class="message">wow, a bold plan</span></div><div class="line" id="195630"><span class="nick" style="color:#6d2462"><a href="#195630" label="[19:56:30]">&lt;Hagfish&gt;</a></span><span class="message">i wish i could picture how the shell/kernel fits into this</span></div><div class="line" id="195830"><span class="nick" style="color:#389600"><a href="#195830" label="[19:58:30]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well the shell is going to run on mes-m2/guile and the kernel becomes a simple spec with a handful of required syscalls</span></div><div class="line" id="195940"><span class="nick" style="color:#389600"><a href="#195940" label="[19:59:40]">&lt;oriansj&gt;</a></span><span class="message">As janneke strips out all binaries except guile from the guix bootstrap; I'll be making mes-m2 a drop in replacement for guile</span></div><div class="line" id="200638"><span class="nick" style="color:#389600"><a href="#200638" label="[20:06:38]">&lt;oriansj&gt;</a></span><span class="message">Once that work is done; I can simply write a trivial bootloader and Posix in M2-Planet, use cc_x86 to build it and the trusted kernel problem is gone too</span></div><div class="line" id="200703"><span class="nick" style="color:#389600"><a href="#200703" label="[20:07:03]">&lt;oriansj&gt;</a></span><span class="message">Then I do Knight in FPGA and then TTL to finish off all bios/firmware/microcode risks</span></div><div class="line" id="200731"><span class="nick" style="color:#389600"><a href="#200731" label="[20:07:31]">&lt;oriansj&gt;</a></span><span class="message">Then I have no idea what I am going to do then</span></div><div class="line" id="204432"><span class="nick" style="color:#389600"><a href="#204432" label="[20:44:32]">&lt;oriansj&gt;</a></span><span class="message">janneke: there is a new branch on mes-m2 that holds the current state of my crazy idea (a merging of mes-m2 and slow_lisp [Not fully complete yet but showing potential])</span></div><div class="line" id="204846"><span class="nick" style="color:#389600"><a href="#204846" label="[20:48:46]">&lt;oriansj&gt;</a></span><span class="message">with it we gain a trivial to add macro capability (I literally left a simple TODO); single S-Expression Stepping and soon a more efficient form of Tail-recursive evaluation</span></div><div class="line" id="205021"><span class="nick" style="color:#389600"><a href="#205021" label="[20:50:21]">&lt;oriansj&gt;</a></span><span class="message">also, it halves Mes-m2's memory requirements; supports both (define foo (lambda (a b) ..)) and (define (foo a b) ...) function types</span></div><div class="line" id="205123"><span class="nick" style="color:#389600"><a href="#205123" label="[20:51:23]">&lt;oriansj&gt;</a></span><span class="message">and the REPL does exactly what one expects</span></div><div class="line" id="205151"><span class="nick" style="color:#389600"><a href="#205151" label="[20:51:51]">&lt;oriansj&gt;</a></span><span class="message">(export MES_CORE=0 first though)</span></div><div class="line" id="205350"><span class="nick" style="color:#6b8072"><a href="#205350" label="[20:53:50]">&lt;fosslinux&gt;</a></span><span class="message">&lt;oriansj&gt; fosslinux: actually not silly but a useful attempt to help us identify and solve a potential problem. Thank you</span></div><div class="line" id="205354"><span class="nick" style="color:#6b8072"><a href="#205354" label="[20:53:54]">&lt;fosslinux&gt;</a></span><span class="message">not a problem!</span></div><div class="line" id="205359"><span class="nick" style="color:#6b8072"><a href="#205359" label="[20:53:59]">&lt;fosslinux&gt;</a></span><span class="message">I do have another question</span></div><div class="line" id="205413"><span class="nick" style="color:#6b8072"><a href="#205413" label="[20:54:13]">&lt;fosslinux&gt;</a></span><span class="message">is mes-m2 currently working at a stage where it can run mesc</span></div><div class="line" id="205415"><span class="nick" style="color:#6b8072"><a href="#205415" label="[20:54:15]">&lt;fosslinux&gt;</a></span><span class="message">mescc*</span></div><div class="line" id="210054"><span class="nick" style="color:#6b8072"><a href="#210054" label="[21:00:54]">&lt;fosslinux&gt;</a></span><span class="message">I like this project</span></div><div class="line" id="210105"><span class="nick" style="color:#6b8072"><a href="#210105" label="[21:01:05]">&lt;fosslinux&gt;</a></span><span class="message">You guys are doing some great work</span></div><div class="line" id="210256"><span class="nick" style="color:#389600"><a href="#210256" label="[21:02:56]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: honestly no, I broke Mes.c when converting it to M2-Planet form</span></div><div class="line" id="210300"><span class="nick" style="color:#234e69"><a href="#210300" label="[21:03:00]">&lt;stikonas&gt;</a></span><span class="message">fosslinux: no, I don't think it can't run mes-m2</span></div><div class="line" id="210319"><span class="nick" style="color:#6b8072"><a href="#210319" label="[21:03:19]">&lt;fosslinux&gt;</a></span><span class="message">hm</span></div><div class="line" id="210321"><span class="nick" style="color:#6b8072"><a href="#210321" label="[21:03:21]">&lt;fosslinux&gt;</a></span><span class="message">ok</span></div><div class="line" id="210331"><span class="nick" style="color:#6b8072"><a href="#210331" label="[21:03:31]">&lt;fosslinux&gt;</a></span><span class="message">do you know what's broken?</span></div><div class="line" id="210334"><span class="nick" style="color:#234e69"><a href="#210334" label="[21:03:34]">&lt;stikonas&gt;</a></span><span class="message">it can run some simple scheme tests only</span></div><div class="line" id="210342"><span class="nick" style="color:#6b8072"><a href="#210342" label="[21:03:42]">&lt;fosslinux&gt;</a></span><span class="message">yeah I saw that much</span></div><div class="line" id="210359"><span class="nick" style="color:#6b8072"><a href="#210359" label="[21:03:59]">&lt;fosslinux&gt;</a></span><span class="message">those worked for me</span></div><div class="line" id="210424"><span class="nick" style="color:#389600"><a href="#210424" label="[21:04:24]">&lt;oriansj&gt;</a></span><span class="message">hence why good scheme tests are needed (That are compatible with both guile and mes.c); So that fixing what is broken can be done methodically</span></div><div class="line" id="210441"><span class="nick" style="color:#6b8072"><a href="#210441" label="[21:04:41]">&lt;fosslinux&gt;</a></span><span class="message">I see</span></div><div class="line" id="210507"><span class="nick" style="color:#6b8072"><a href="#210507" label="[21:05:07]">&lt;fosslinux&gt;</a></span><span class="message">i guess if I want to contribute I should learn a bit of scheme</span></div><div class="line" id="210620"><span class="nick" style="color:#389600"><a href="#210620" label="[21:06:20]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: if you learn scheme one feature at a time and create a test that leverages that one feature; it'll be double useful for us</span></div><div class="line" id="210759"><span class="nick" style="color:#80b1d3"><a href="#210759" label="[21:07:59]">&lt;janneke&gt;</a></span><span class="message">oriansj: oh, that's interesting!  that could work</span></div><div class="line" id="210841"><span class="nick" style="color:#234e69"><a href="#210841" label="[21:08:41]">&lt;stikonas&gt;</a></span><span class="message">fosslinux: I basically know no scheme either, there is some useful stuff for beginners here <a rel="nofollow" href="https://guix.gnu.org/cookbook/en/html_node/A-Scheme-Crash-Course.html#A-Scheme-Crash-Course">https://guix.gnu.org/cookbook/en/html_node/A-Scheme-Crash-Course.html#A-Scheme-Crash-Course</a> </span></div><div class="line" id="210854"><span class="nick" style="color:#80b1d3"><a href="#210854" label="[21:08:54]">&lt;janneke&gt;</a></span><span class="message">fosslinux: mes's wip-m2 branch will run mescc; oriansj is doing something much more experimental and fun :-)</span></div><div class="line" id="211144"><span class="nick" style="color:#389600"><a href="#211144" label="[21:11:44]">&lt;oriansj&gt;</a></span><span class="message">Which has lots of work needed from scheme programmers of naive to professional levels of skill</span></div><div class="line" id="211205"><span class="nick" style="color:#389600"><a href="#211205" label="[21:12:05]">&lt;oriansj&gt;</a></span><span class="message">(More naive than professional right now)</span></div><div class="line" id="211448"><span class="nick" style="color:#389600"><a href="#211448" label="[21:14:48]">&lt;oriansj&gt;</a></span><span class="message">With lots of bits to gain experience on and level up</span></div><div class="line" id="212026"><span class="nick" style="color:#6b8072"><a href="#212026" label="[21:20:26]">&lt;fosslinux&gt;</a></span><span class="message">hold</span></div><div class="line" id="212222"><span class="nick" style="color:#6b8072"><a href="#212222" label="[21:22:22]">&lt;fosslinux&gt;</a></span><span class="message">oops</span></div><div class="line" id="212224"><span class="nick" style="color:#6b8072"><a href="#212224" label="[21:22:24]">&lt;fosslinux&gt;</a></span><span class="message">wrong channel</span></div><div class="line" id="212226"><span class="nick" style="color:#6b8072"><a href="#212226" label="[21:22:26]">&lt;fosslinux&gt;</a></span><span class="message">:P</span></div><div class="line" id="222128"><span class="nick" style="color:#6b8072"><a href="#222128" label="[22:21:28]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: so are the test0* the scheme tests?</span></div><div class="line" id="223627"><span class="nick" style="color:#389600"><a href="#223627" label="[22:36:27]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: all tests in mes-m2 are scheme tests; I just don't have the functionality required for the later tests to enable them yet</span></div><div class="line" id="223726"><span class="nick" style="color:#389600"><a href="#223726" label="[22:37:26]">&lt;oriansj&gt;</a></span><span class="message">the last of which is running MesCC to compile C code (ultimately itself and then TCC)</span></div><div class="line" id="225405"><span class="nick" style="color:#6b8072"><a href="#225405" label="[22:54:05]">&lt;fosslinux&gt;</a></span><span class="message">Ahh</span></div><div class="line" id="225406"><span class="nick" style="color:#6b8072"><a href="#225406" label="[22:54:06]">&lt;fosslinux&gt;</a></span><span class="message">I see</span></div><div class="line" id="225447"><span class="nick" style="color:#6b8072"><a href="#225447" label="[22:54:47]">&lt;fosslinux&gt;</a></span><span class="message">so the test1* ones are not implemented yet?</span></div><div class="line" id="225506"><span class="nick" style="color:#389600"><a href="#225506" label="[22:55:06]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: essentially yes</span></div><div class="line" id="225607"><span class="nick" style="color:#6b8072"><a href="#225607" label="[22:56:07]">&lt;fosslinux&gt;</a></span><span class="message">ok, I get it, thanks</span></div><div class="line" id="225639"><span class="nick" style="color:#389600"><a href="#225639" label="[22:56:39]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="225820"><span class="nick" style="color:#6b8072"><a href="#225820" label="[22:58:20]">&lt;fosslinux&gt;</a></span><span class="message">ok last question for now</span></div><div class="line" id="225831"><span class="nick" style="color:#389600"><a href="#225831" label="[22:58:31]">&lt;oriansj&gt;</a></span><span class="message">ask as many as you like</span></div><div class="line" id="225836"><span class="nick" style="color:#6b8072"><a href="#225836" label="[22:58:36]">&lt;fosslinux&gt;</a></span><span class="message">what is boot-01.scm</span></div><div class="line" id="225843"><span class="nick" style="color:#6b8072"><a href="#225843" label="[22:58:43]">&lt;fosslinux&gt;</a></span><span class="message">and the reader things</span></div><div class="line" id="225953"><span class="nick" style="color:#389600"><a href="#225953" label="[22:59:53]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: it is a part of mes.c that I am cleaning up but essentially boot-01.scm is just a set of scheme functionality loaded by default</span></div><div class="line" id="230004"><span class="nick" style="color:#6b8072"><a href="#230004" label="[23:00:04]">&lt;fosslinux&gt;</a></span><span class="message">cool</span></div><div class="line" id="230443"><span class="nick" style="color:#80b1d3"><a href="#230443" label="[23:04:43]">&lt;janneke&gt;</a></span><span class="message">fosslinux: the scheme tests and mescc tests that i wrote for mes.c are pretty ad-hoc; oriansj is rewriting everything much more vigorously in mes-m2</span></div><div class="line" id="230549"><span class="nick" style="color:#389600"><a href="#230549" label="[23:05:49]">&lt;oriansj&gt;</a></span><span class="message">essentially with the goal of making mes-m2 the ultimate educational scheme</span></div><div class="line" id="230906"><span class="nick" style="color:#6b8072"><a href="#230906" label="[23:09:06]">&lt;fosslinux&gt;</a></span><span class="message">janneke: right</span></div><br /></div></body></html>