<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005632"><span class="nick" style="color:#8dd3c7"><a href="#005632" label="[00:56:32]">&lt;OriansJ&gt;</a></span><span class="message">back</span></div><div class="line" id="005759"><span class="nick" style="color:#8dd3c7"><a href="#005759" label="[00:57:59]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: well having the root filesystem as a tar file is an interesting idea</span></div><div class="line" id="005956"><span class="nick" style="color:#8dd3c7"><a href="#005956" label="[00:59:56]">&lt;OriansJ&gt;</a></span><span class="message">I am guessing that is how you are solving the creating a filesystem without having a filesystem problem</span></div><div class="line" id="010911"><span class="nick" style="color:#8dd3c7"><a href="#010911" label="[01:09:11]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: we also have the issue of the licensing; it needs to be under an FSF approved license to be used.</span></div><div class="line" id="012115"><span class="nick" style="color:#2e2a4a"><a href="#012115" label="[01:21:15]">&lt;dddddd&gt;</a></span><span class="message">M1.scm now handles the other KNIGHT special case, to ensure that &quot;hexified&quot; strings don't break the 32 bits alignment.</span></div><div class="line" id="012216"><span class="nick" style="color:#8dd3c7"><a href="#012216" label="[01:22:16]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: very nice</span></div><div class="line" id="012711"><span class="nick" style="color:#2e2a4a"><a href="#012711" label="[01:27:11]">&lt;dddddd&gt;</a></span><span class="message">I'm wondering if a poorly placed string can break AArch64. I need to recheck if instructions are required to be &quot;evenly&quot; spaced.</span></div><div class="line" id="012730"><span class="nick" style="color:#2e2a4a"><a href="#012730" label="[01:27:30]">&lt;dddddd&gt;</a></span><span class="message">s/spaced/placed/</span></div><div class="line" id="012943"><span class="nick" style="color:#8dd3c7"><a href="#012943" label="[01:29:43]">&lt;OriansJ&gt;</a></span><span class="message">well ARMv7l I know has some serious alignment requirements that are quite annoying</span></div><div class="line" id="013018"><span class="nick" style="color:#8dd3c7"><a href="#013018" label="[01:30:18]">&lt;OriansJ&gt;</a></span><span class="message">(words must be word aligned, half words must be half word aligned and double words need to be double aligned)</span></div><div class="line" id="013125"><span class="nick" style="color:#8dd3c7"><a href="#013125" label="[01:31:25]">&lt;OriansJ&gt;</a></span><span class="message">It is an annoyingly common bad design requirement of old RISC processors; so that they could save transistors to add parity bits to the L1 cache</span></div><div class="line" id="013250"><span class="nick" style="color:#8dd3c7"><a href="#013250" label="[01:32:50]">&lt;OriansJ&gt;</a></span><span class="message">if AArch64 has similiar restrictions, they literally must have been drinking bleach to think that was a good idea.</span></div><div class="line" id="013313"><span class="nick" style="color:#2e2a4a"><a href="#013313" label="[01:33:13]">&lt;dddddd&gt;</a></span><span class="message">&quot;A misaligned PC is defined to be one where bits [1:0] of the PC are not 00.&quot;</span></div><div class="line" id="013331"><span class="nick" style="color:#8dd3c7"><a href="#013331" label="[01:33:31]">&lt;OriansJ&gt;</a></span><span class="message">well, shit</span></div><div class="line" id="013424"><span class="nick" style="color:#2e2a4a"><a href="#013424" label="[01:34:24]">&lt;dddddd&gt;</a></span><span class="message">The checks can be disabled it seems but I guess it's uncommon to do so.</span></div><div class="line" id="013439"><span class="nick" style="color:#8dd3c7"><a href="#013439" label="[01:34:39]">&lt;OriansJ&gt;</a></span><span class="message">Billions of transistors to work with and they still do the absolute wrong thing again</span></div><div class="line" id="013552"><span class="nick" style="color:#8dd3c7"><a href="#013552" label="[01:35:52]">&lt;OriansJ&gt;</a></span><span class="message">What kind of Mickey Mouse grade bullshit Computer Science degrees do their &quot;experts&quot; have?</span></div><div class="line" id="013859"><span class="nick" style="color:#6b8072"><a href="#013859" label="[01:38:59]">&lt;fossy&gt;</a></span><span class="message">OriansJ: why does it have to be under a FSF license? Sure if we are distributing with gnu stuffs but otherwise why?</span></div><div class="line" id="014029"><span class="nick" style="color:#8dd3c7"><a href="#014029" label="[01:40:29]">&lt;OriansJ&gt;</a></span><span class="message">fossy: FSF approved licenses include ISC, MIT, BSDs, Apache, etc</span></div><div class="line" id="014039"><span class="nick" style="color:#6b8072"><a href="#014039" label="[01:40:39]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah I know</span></div><div class="line" id="014115"><span class="nick" style="color:#6b8072"><a href="#014115" label="[01:41:15]">&lt;fossy&gt;</a></span><span class="message">but why would the kernel have to be under a fsf approved license?</span></div><div class="line" id="014115"><span class="nick" style="color:#8dd3c7"><a href="#014115" label="[01:41:15]">&lt;OriansJ&gt;</a></span><span class="message">The reason being: I refuse to contribute to non-free (as in freedom) software</span></div><div class="line" id="014158"><span class="nick" style="color:#2e2a4a"><a href="#014158" label="[01:41:58]">&lt;dddddd&gt;</a></span><span class="message">Well, 'this' and &quot;that&quot; are scape valves in M1. Asking a bit of care to whom uses them is not crazy, I guess.</span></div><div class="line" id="014358"><span class="nick" style="color:#8dd3c7"><a href="#014358" label="[01:43:58]">&lt;OriansJ&gt;</a></span><span class="message">fossy: it is the foundational rule. Without the four freedoms; the best software in the world that does everything isn't worth shit.</span></div><div class="line" id="014411"><span class="nick" style="color:#6b8072"><a href="#014411" label="[01:44:11]">&lt;fossy&gt;</a></span><span class="message">Oh of course</span></div><div class="line" id="014423"><span class="nick" style="color:#6b8072"><a href="#014423" label="[01:44:23]">&lt;fossy&gt;</a></span><span class="message">hence my name &quot;foss&quot;y</span></div><div class="line" id="014439"><span class="nick" style="color:#8dd3c7"><a href="#014439" label="[01:44:39]">&lt;OriansJ&gt;</a></span><span class="message">I'd rather start from scratch than non-fsf license</span></div><div class="line" id="014500"><span class="nick" style="color:#8dd3c7"><a href="#014500" label="[01:45:00]">&lt;OriansJ&gt;</a></span><span class="message">I can make the time if I must</span></div><div class="line" id="014527"><span class="nick" style="color:#2e2a4a"><a href="#014527" label="[01:45:27]">&lt;dddddd&gt;</a></span><span class="message">In some cases, I'd say that if copyleft also not involved, with some exceptions maybe.</span></div><div class="line" id="014547"><span class="nick" style="color:#8dd3c7"><a href="#014547" label="[01:45:47]">&lt;OriansJ&gt;</a></span><span class="message">There will be no negotiation when it comes to the four essential software freedoms in our bootstrapping work.</span></div><div class="line" id="014606"><span class="nick" style="color:#8dd3c7"><a href="#014606" label="[01:46:06]">&lt;OriansJ&gt;</a></span><span class="message">I will not have it.</span></div><div class="line" id="014627"><span class="nick" style="color:#8dd3c7"><a href="#014627" label="[01:46:27]">&lt;OriansJ&gt;</a></span><span class="message">I can accept permissive push over licenses</span></div><div class="line" id="014637"><span class="nick" style="color:#6b8072"><a href="#014637" label="[01:46:37]">&lt;fossy&gt;</a></span><span class="message">I dont recall which, but there was a license that the fsf didnt like but imo 4 essential freedoms were held up and other places also agreed... cant remember which though. But yes fsf approved licenses are always the best way to go</span></div><div class="line" id="014739"><span class="nick" style="color:#6b8072"><a href="#014739" label="[01:47:39]">&lt;fossy&gt;</a></span><span class="message">For certain, anything bootstrappable officially endorses must hold up the four core freedoms</span></div><div class="line" id="014751"><span class="nick" style="color:#6b8072"><a href="#014751" label="[01:47:51]">&lt;fossy&gt;</a></span><span class="message">our whole model revolves around it</span></div><div class="line" id="014923"><span class="nick" style="color:#6b8072"><a href="#014923" label="[01:49:23]">&lt;fossy&gt;</a></span><span class="message">Dont get me wrong the four freedoms are important</span></div><div class="line" id="014936"><span class="nick" style="color:#6b8072"><a href="#014936" label="[01:49:36]">&lt;fossy&gt;</a></span><span class="message">But I mean things like OSI vs FSF approved</span></div><div class="line" id="015001"><span class="nick" style="color:#80b1d3"><a href="#015001" label="[01:50:01]">&lt;Hagfish&gt;</a></span><span class="message">i think one controversial example of the FSF rejecting a license was the old BSD license which required software to print a disclaimer.  their argument was that eventually the disclaimer printing code could become bigger than the code that provides the functionality, if you combined lots of libraries, say</span></div><div class="line" id="015024"><span class="nick" style="color:#6b8072"><a href="#015024" label="[01:50:24]">&lt;fossy&gt;</a></span><span class="message">^^^ that was the one I was thinking of</span></div><div class="line" id="015047"><span class="nick" style="color:#8dd3c7"><a href="#015047" label="[01:50:47]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: thank you for looking that up for us</span></div><div class="line" id="015105"><span class="nick" style="color:#6b8072"><a href="#015105" label="[01:51:05]">&lt;fossy&gt;</a></span><span class="message">another one, the WTFPL is fsf approved but not OSI approved</span></div><div class="line" id="015105"><span class="nick" style="color:#80b1d3"><a href="#015105" label="[01:51:05]">&lt;Hagfish&gt;</a></span><span class="message">that's just from memory, so it might not be fully accurate :)</span></div><div class="line" id="015206"><span class="nick" style="color:#80b1d3"><a href="#015206" label="[01:52:06]">&lt;Hagfish&gt;</a></span><span class="message">one license that Debian and the FSF disagree on is the GFDL, as the GFDL allows invariant sections, which the FSF say is necessary to stop people changing words in a political manifesto</span></div><div class="line" id="015214"><span class="nick" style="color:#8dd3c7"><a href="#015214" label="[01:52:14]">&lt;OriansJ&gt;</a></span><span class="message">Why don't we stick to the core that we know avoid issues</span></div><div class="line" id="015300"><span class="nick" style="color:#6b8072"><a href="#015300" label="[01:53:00]">&lt;fossy&gt;</a></span><span class="message">yes, we should</span></div><div class="line" id="015305"><span class="nick" style="color:#80b1d3"><a href="#015305" label="[01:53:05]">&lt;Hagfish&gt;</a></span><span class="message">yeah, in practice, the controversial licenses are so rare that no one would choose to use them for a significant new project</span></div><div class="line" id="015310"><span class="nick" style="color:#6b8072"><a href="#015310" label="[01:53:10]">&lt;fossy&gt;</a></span><span class="message">^</span></div><div class="line" id="015317"><span class="nick" style="color:#6b8072"><a href="#015317" label="[01:53:17]">&lt;fossy&gt;</a></span><span class="message">excluding the wtfpl</span></div><div class="line" id="015329"><span class="nick" style="color:#6b8072"><a href="#015329" label="[01:53:29]">&lt;fossy&gt;</a></span><span class="message">That is somewhat common</span></div><div class="line" id="015341"><span class="nick" style="color:#8dd3c7"><a href="#015341" label="[01:53:41]">&lt;OriansJ&gt;</a></span><span class="message">It reduces debate; if someone is a permissive hardliner: ISC (as OpenBSD clearly has pointed out is the optimal choice for that) and for Copyleft hardliner: GPLv3 (possibly with the Affero option)</span></div><div class="line" id="015436"><span class="nick" style="color:#8dd3c7"><a href="#015436" label="[01:54:36]">&lt;OriansJ&gt;</a></span><span class="message">Everything I do is GPLv3+</span></div><div class="line" id="015457"><span class="nick" style="color:#6b8072"><a href="#015457" label="[01:54:57]">&lt;fossy&gt;</a></span><span class="message">Same</span></div><div class="line" id="015504"><span class="nick" style="color:#6b8072"><a href="#015504" label="[01:55:04]">&lt;fossy&gt;</a></span><span class="message">small things like my dotfiles are MIT</span></div><div class="line" id="015529"><span class="nick" style="color:#6b8072"><a href="#015529" label="[01:55:29]">&lt;fossy&gt;</a></span><span class="message">Oh, reminds me</span></div><div class="line" id="015533"><span class="nick" style="color:#8dd3c7"><a href="#015533" label="[01:55:33]">&lt;OriansJ&gt;</a></span><span class="message">ISC is better if you want minimal license restrictions</span></div><div class="line" id="015610"><span class="nick" style="color:#6b8072"><a href="#015610" label="[01:56:10]">&lt;fossy&gt;</a></span><span class="message">with the GPL when forking a project, wrt copyright headers, do you have to leave the name intact?</span></div><div class="line" id="015631"><span class="nick" style="color:#6b8072"><a href="#015631" label="[01:56:31]">&lt;fossy&gt;</a></span><span class="message">eg mescc tools seed has Mes in its headers but its gcc seed now</span></div><div class="line" id="015703"><span class="nick" style="color:#6b8072"><a href="#015703" label="[01:57:03]">&lt;fossy&gt;</a></span><span class="message">so can I change Mes to gcc-seed, while leaving oriansj and janneke's lines intact?</span></div><div class="line" id="015820"><span class="nick" style="color:#8dd3c7"><a href="#015820" label="[01:58:20]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I also thought you planned on merging your gcc seed branch back into mescc-tools-seed</span></div><div class="line" id="015822"><span class="nick" style="color:#2e2a4a"><a href="#015822" label="[01:58:22]">&lt;dddddd&gt;</a></span><span class="message">The quick answer is yes, you can not remove the copyright of the other authors.</span></div><div class="line" id="015922"><span class="nick" style="color:#80b1d3"><a href="#015922" label="[01:59:22]">&lt;Hagfish&gt;</a></span><span class="message">(authors can always agree to relicense their works under a different license though)</span></div><div class="line" id="015934"><span class="nick" style="color:#6b8072"><a href="#015934" label="[01:59:34]">&lt;fossy&gt;</a></span><span class="message">OriansJ: Im reconsidering that. If you would still like it that would be fine, but its beginning to significantly differ from mescc tools seed</span></div><div class="line" id="020013"><span class="nick" style="color:#8dd3c7"><a href="#020013" label="[02:00:13]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I saw the restructuring you did</span></div><div class="line" id="020023"><span class="nick" style="color:#6b8072"><a href="#020023" label="[02:00:23]">&lt;fossy&gt;</a></span><span class="message">Especially in terms of structure</span></div><div class="line" id="020026"><span class="nick" style="color:#6b8072"><a href="#020026" label="[02:00:26]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="020029"><span class="nick" style="color:#8dd3c7"><a href="#020029" label="[02:00:29]">&lt;OriansJ&gt;</a></span><span class="message">That is largely fine</span></div><div class="line" id="020049"><span class="nick" style="color:#6b8072"><a href="#020049" label="[02:00:49]">&lt;fossy&gt;</a></span><span class="message">if you are willing to include that in mescc tools seed I do not have a problem with that</span></div><div class="line" id="020137"><span class="nick" style="color:#8dd3c7"><a href="#020137" label="[02:01:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I am willing to include the structure change</span></div><div class="line" id="020201"><span class="nick" style="color:#6b8072"><a href="#020201" label="[02:02:01]">&lt;fossy&gt;</a></span><span class="message">That was more of an example rather than a commitment to make it a fork</span></div><div class="line" id="020220"><span class="nick" style="color:#6b8072"><a href="#020220" label="[02:02:20]">&lt;fossy&gt;</a></span><span class="message">I would love to have it upstreamed</span></div><div class="line" id="020234"><span class="nick" style="color:#6b8072"><a href="#020234" label="[02:02:34]">&lt;fossy&gt;</a></span><span class="message">But of course, we need to wait for mes m2</span></div><div class="line" id="020253"><span class="nick" style="color:#8dd3c7"><a href="#020253" label="[02:02:53]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not entirely</span></div><div class="line" id="020300"><span class="nick" style="color:#6b8072"><a href="#020300" label="[02:03:00]">&lt;fossy&gt;</a></span><span class="message">ATM I am working on the use of gash and gash core utils</span></div><div class="line" id="020304"><span class="nick" style="color:#6b8072"><a href="#020304" label="[02:03:04]">&lt;fossy&gt;</a></span><span class="message">Rather than sh</span></div><div class="line" id="020311"><span class="nick" style="color:#6b8072"><a href="#020311" label="[02:03:11]">&lt;fossy&gt;</a></span><span class="message">And coreutils</span></div><div class="line" id="020335"><span class="nick" style="color:#6b8072"><a href="#020335" label="[02:03:35]">&lt;fossy&gt;</a></span><span class="message">OriansJ: how not, since there should be no guile binary seed?</span></div><div class="line" id="020407"><span class="nick" style="color:#8dd3c7"><a href="#020407" label="[02:04:07]">&lt;OriansJ&gt;</a></span><span class="message">we flag it in a big and obvious way</span></div><div class="line" id="020433"><span class="nick" style="color:#6b8072"><a href="#020433" label="[02:04:33]">&lt;fossy&gt;</a></span><span class="message">Hm</span></div><div class="line" id="020437"><span class="nick" style="color:#8dd3c7"><a href="#020437" label="[02:04:37]">&lt;OriansJ&gt;</a></span><span class="message">We put a great big warning and prompt the user for input (say hit enter)</span></div><div class="line" id="020502"><span class="nick" style="color:#8dd3c7"><a href="#020502" label="[02:05:02]">&lt;OriansJ&gt;</a></span><span class="message">Then we use the system guile for the steps that mes-m2 should be doing</span></div><div class="line" id="020538"><span class="nick" style="color:#8dd3c7"><a href="#020538" label="[02:05:38]">&lt;OriansJ&gt;</a></span><span class="message">leverage kaem's ability to lookup guile from the path; throw an error if it isn't found</span></div><div class="line" id="020618"><span class="nick" style="color:#6b8072"><a href="#020618" label="[02:06:18]">&lt;fossy&gt;</a></span><span class="message">Another idea would be the use of a flag, eg -g that runs the rest of the bootstrap -g denoting use of guile</span></div><div class="line" id="020702"><span class="nick" style="color:#8dd3c7"><a href="#020702" label="[02:07:02]">&lt;OriansJ&gt;</a></span><span class="message">too subtle if you ask me</span></div><div class="line" id="020734"><span class="nick" style="color:#6b8072"><a href="#020734" label="[02:07:34]">&lt;fossy&gt;</a></span><span class="message">Well, along with the message</span></div><div class="line" id="020834"><span class="nick" style="color:#6b8072"><a href="#020834" label="[02:08:34]">&lt;fossy&gt;</a></span><span class="message">Or, adding a flag for the opposite, run the bootstrap with guile seed by default, and -n for only going up to mes m2</span></div><div class="line" id="020857"><span class="nick" style="color:#8dd3c7"><a href="#020857" label="[02:08:57]">&lt;OriansJ&gt;</a></span><span class="message">or if you feel more comfortable about waiting until mes-m2 is done for the merge, we can break it into 2 pieces</span></div><div class="line" id="020936"><span class="nick" style="color:#8dd3c7"><a href="#020936" label="[02:09:36]">&lt;OriansJ&gt;</a></span><span class="message">We merge the structure changes but put the work currently being done in guile on a separate branch</span></div><div class="line" id="021012"><span class="nick" style="color:#6b8072"><a href="#021012" label="[02:10:12]">&lt;fossy&gt;</a></span><span class="message">That is another alternative</span></div><div class="line" id="021050"><span class="nick" style="color:#6b8072"><a href="#021050" label="[02:10:50]">&lt;fossy&gt;</a></span><span class="message">I like that</span></div><div class="line" id="021128"><span class="nick" style="color:#6b8072"><a href="#021128" label="[02:11:28]">&lt;fossy&gt;</a></span><span class="message">The thing I feel the most uncomfortable about it having the guile seed in savannah</span></div><div class="line" id="021203"><span class="nick" style="color:#8dd3c7"><a href="#021203" label="[02:12:03]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not an issue</span></div><div class="line" id="021204"><span class="nick" style="color:#6b8072"><a href="#021204" label="[02:12:04]">&lt;fossy&gt;</a></span><span class="message">as you've said experimental changes are much more workable in github</span></div><div class="line" id="021305"><span class="nick" style="color:#8dd3c7"><a href="#021305" label="[02:13:05]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools-seed isn't even on savannah yet</span></div><div class="line" id="021328"><span class="nick" style="color:#6b8072"><a href="#021328" label="[02:13:28]">&lt;fossy&gt;</a></span><span class="message">Ill make another branch and cherry pick the structure changes</span></div><div class="line" id="021409"><span class="nick" style="color:#8dd3c7"><a href="#021409" label="[02:14:09]">&lt;OriansJ&gt;</a></span><span class="message">and when I get mescc-tools-seed into savannah; I will only upload the master branch and not push any of the development branches</span></div><div class="line" id="021428"><span class="nick" style="color:#6b8072"><a href="#021428" label="[02:14:28]">&lt;fossy&gt;</a></span><span class="message">the release branch?</span></div><div class="line" id="021509"><span class="nick" style="color:#8dd3c7"><a href="#021509" label="[02:15:09]">&lt;OriansJ&gt;</a></span><span class="message">release/master branch if it makes it easier</span></div><div class="line" id="021519"><span class="nick" style="color:#6b8072"><a href="#021519" label="[02:15:19]">&lt;fossy&gt;</a></span><span class="message">ah right</span></div><div class="line" id="021550"><span class="nick" style="color:#8dd3c7"><a href="#021550" label="[02:15:50]">&lt;OriansJ&gt;</a></span><span class="message">You of course can name your WIP branch anything you like (save master, release, production, etc)</span></div><div class="line" id="021705"><span class="nick" style="color:#8dd3c7"><a href="#021705" label="[02:17:05]">&lt;OriansJ&gt;</a></span><span class="message">and when dddddd is done with slow-utils; your guile steps will not even depend upon any earlier stages (save for mes-m2)</span></div><div class="line" id="021845"><span class="nick" style="color:#6b8072"><a href="#021845" label="[02:18:45]">&lt;fossy&gt;</a></span><span class="message">Oh nice</span></div><div class="line" id="022316"><span class="nick" style="color:#8dd3c7"><a href="#022316" label="[02:23:16]">&lt;OriansJ&gt;</a></span><span class="message">hence scheme only bootstrap for guix</span></div><div class="line" id="022846"><span class="nick" style="color:#6b8072"><a href="#022846" label="[02:28:46]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="023843"><span class="nick" style="color:#8dd3c7"><a href="#023843" label="[02:38:43]">&lt;OriansJ&gt;</a></span><span class="message">The idea behind the guix work is if you have guile, the rest can be bootstrapped. Hence the requirement of making mes-m2 a drop in replacement good enough to solve guile's psyntax bootstrap problem.</span></div><div class="line" id="030743"><span class="nick" style="color:#6b8072"><a href="#030743" label="[03:07:43]">&lt;fossy&gt;</a></span><span class="message">ewewew why did I write variable_substitute that way</span></div><div class="line" id="030754"><span class="nick" style="color:#6d2462"><a href="#030754" label="[03:07:54]">*</a></span><span class="message">fossy refractor</span></div><div class="line" id="030757"><span class="nick" style="color:#6b8072"><a href="#030757" label="[03:07:57]">&lt;fossy&gt;</a></span><span class="message">thats so messy</span></div><div class="line" id="030809"><span class="nick" style="color:#6b8072"><a href="#030809" label="[03:08:09]">&lt;fossy&gt;</a></span><span class="message">(Kaem)</span></div><div class="line" id="031139"><span class="nick" style="color:#8dd3c7"><a href="#031139" label="[03:11:39]">&lt;OriansJ&gt;</a></span><span class="message">fossy: sometimes one needs time away from code we write to see the problems in it</span></div><div class="line" id="031150"><span class="nick" style="color:#6b8072"><a href="#031150" label="[03:11:50]">&lt;fossy&gt;</a></span><span class="message">lol yes</span></div><div class="line" id="031155"><span class="nick" style="color:#6b8072"><a href="#031155" label="[03:11:55]">&lt;fossy&gt;</a></span><span class="message">i agree 100%</span></div><div class="line" id="080919"><span class="nick" style="color:#234e69"><a href="#080919" label="[08:09:19]">&lt;theruran&gt;</a></span><span class="message">well, I managed to write a Guile script that imports gash and does (echo &quot;hello, world&quot;) ✅</span></div><div class="line" id="081650"><span class="nick" style="color:#6c3d55"><a href="#081650" label="[08:16:50]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: the root as a tar idea is mostly stolen from how the linux initrd concept</span></div><div class="line" id="081701"><span class="nick" style="color:#6c3d55"><a href="#081701" label="[08:17:01]">&lt;bauen1&gt;</a></span><span class="message">it allows me to test the virtual filesystem layer quickly</span></div><div class="line" id="081722"><span class="nick" style="color:#6c3d55"><a href="#081722" label="[08:17:22]">&lt;bauen1&gt;</a></span><span class="message">without having everything burn in multiple places at the same time (ext2 driver, ata driver, vfs layer)</span></div><div class="line" id="081809"><span class="nick" style="color:#6c3d55"><a href="#081809" label="[08:18:09]">&lt;bauen1&gt;</a></span><span class="message">regarding the license i'll probably use something like gpl 3.0 but i haven't spend time to have a close look at the various possible licenses</span></div><div class="line" id="081933"><span class="nick" style="color:#234e69"><a href="#081933" label="[08:19:33]">&lt;theruran&gt;</a></span><span class="message">janneke: I've also imported your gash-core-utils into my Hello, World script so now I can try out those commands</span></div><div class="line" id="083102"><span class="nick" style="color:#234e69"><a href="#083102" label="[08:31:02]">&lt;theruran&gt;</a></span><span class="message">ei, so what do I do with these config.scm.in files?</span></div><div class="line" id="084904"><span class="nick" style="color:#d9d9d9"><a href="#084904" label="[08:49:04]">&lt;janneke&gt;</a></span><span class="message">theruran: ah, are you using gash for programmatic guile shell scripting?</span></div><div class="line" id="084925"><span class="nick" style="color:#d9d9d9"><a href="#084925" label="[08:49:25]">&lt;janneke&gt;</a></span><span class="message">that's one area that hasn't had any love the past year, but is very interesting!</span></div><div class="line" id="084932"><span class="nick" style="color:#234e69"><a href="#084932" label="[08:49:32]">&lt;theruran&gt;</a></span><span class="message">janneke: yeah, want to!</span></div><div class="line" id="084937"><span class="nick" style="color:#d9d9d9"><a href="#084937" label="[08:49:37]">&lt;janneke&gt;</a></span><span class="message">theruran: great!</span></div><div class="line" id="084953"><span class="nick" style="color:#234e69"><a href="#084953" label="[08:49:53]">&lt;theruran&gt;</a></span><span class="message">instead of porting scsh, huh</span></div><div class="line" id="085011"><span class="nick" style="color:#234e69"><a href="#085011" label="[08:50:11]">&lt;theruran&gt;</a></span><span class="message">looks like you have already implemented most of what I need</span></div><div class="line" id="085012"><span class="nick" style="color:#d9d9d9"><a href="#085012" label="[08:50:12]">&lt;janneke&gt;</a></span><span class="message">what i'm saying is: therey may be rough edges, becaes we took a sharp turn into bootstrapping last year</span></div><div class="line" id="085030"><span class="nick" style="color:#d9d9d9"><a href="#085030" label="[08:50:30]">&lt;janneke&gt;</a></span><span class="message">theruran: that's great, yes the basic stuff should be there</span></div><div class="line" id="085032"><span class="nick" style="color:#234e69"><a href="#085032" label="[08:50:32]">&lt;theruran&gt;</a></span><span class="message">alright! I will be poking at it slowly</span></div><div class="line" id="085108"><span class="nick" style="color:#d9d9d9"><a href="#085108" label="[08:51:08]">&lt;janneke&gt;</a></span><span class="message">gash core utils now lives as `gash utils' here: <a rel="nofollow" href="https://git.savannah.nongnu.org/git/gash/gash-utils.git/">https://git.savannah.nongnu.org/git/gash/gash-utils.git/</a> </span></div><div class="line" id="085119"><span class="nick" style="color:#234e69"><a href="#085119" label="[08:51:19]">&lt;theruran&gt;</a></span><span class="message">ahh thank you!</span></div><div class="line" id="085133"><span class="nick" style="color:#d9d9d9"><a href="#085133" label="[08:51:33]">&lt;janneke&gt;</a></span><span class="message">changes are probably minimal, but still</span></div><div class="line" id="085317"><span class="nick" style="color:#234e69"><a href="#085317" label="[08:53:17]">&lt;theruran&gt;</a></span><span class="message">how do I build config.scm.in into config.scm?</span></div><div class="line" id="085744"><span class="nick" style="color:#d9d9d9"><a href="#085744" label="[08:57:44]">&lt;janneke&gt;</a></span><span class="message">theruran: we usually do that by running ./bootstrap; ./configure</span></div><div class="line" id="085946"><span class="nick" style="color:#234e69"><a href="#085946" label="[08:59:46]">&lt;theruran&gt;</a></span><span class="message">janneke: oh yeah, but when I run that on gash-utils it complains that gash is not installed. I guess I should use ./configure --prefix=/usr on gash, huh?</span></div><div class="line" id="090155"><span class="nick" style="color:#d9d9d9"><a href="#090155" label="[09:01:55]">&lt;janneke&gt;</a></span><span class="message">possibly, did you install gash?</span></div><div class="line" id="090234"><span class="nick" style="color:#d9d9d9"><a href="#090234" label="[09:02:34]">&lt;janneke&gt;</a></span><span class="message">i never install except as guix packages</span></div><div class="line" id="090248"><span class="nick" style="color:#234e69"><a href="#090248" label="[09:02:48]">&lt;theruran&gt;</a></span><span class="message">janneke: yes, using sudo make install. and it put in /usr/local</span></div><div class="line" id="090249"><span class="nick" style="color:#d9d9d9"><a href="#090249" label="[09:02:49]">&lt;janneke&gt;</a></span><span class="message">for development, you can always `./pre-inst-env bash' in the gash directory</span></div><div class="line" id="090312"><span class="nick" style="color:#d9d9d9"><a href="#090312" label="[09:03:12]">&lt;janneke&gt;</a></span><span class="message">ah</span></div><div class="line" id="090334"><span class="nick" style="color:#d9d9d9"><a href="#090334" label="[09:03:34]">&lt;janneke&gt;</a></span><span class="message">that's supposed to work...of course you are one of the first users</span></div><div class="line" id="090346"><span class="nick" style="color:#d9d9d9"><a href="#090346" label="[09:03:46]">&lt;janneke&gt;</a></span><span class="message">so you may find a problem here and there</span></div><div class="line" id="090413"><span class="nick" style="color:#d9d9d9"><a href="#090413" label="[09:04:13]">&lt;janneke&gt;</a></span><span class="message">the install check is real straightforward, guile should be able to find the modules in the load-compiled-path, i think</span></div><div class="line" id="090606"><span class="nick" style="color:#234e69"><a href="#090606" label="[09:06:06]">&lt;theruran&gt;</a></span><span class="message">yeah, I guess guile doesn't know to look in /usr/local since it is installed in /usr</span></div><div class="line" id="091122"><span class="nick" style="color:#d9d9d9"><a href="#091122" label="[09:11:22]">&lt;janneke&gt;</a></span><span class="message">hmm, that could be, but it isn't that what the &quot;site&quot; directories are for?</span></div><div class="line" id="091146"><span class="nick" style="color:#d9d9d9"><a href="#091146" label="[09:11:46]">&lt;janneke&gt;</a></span><span class="message">anyway, you can always add /usr/local/... to GUILE_LOAD_PATH and GUILE_LOAD_COMPILED_PATH</span></div><div class="line" id="091224"><span class="nick" style="color:#d9d9d9"><a href="#091224" label="[09:12:24]">&lt;janneke&gt;</a></span><span class="message">theruran: what os are you running?</span></div><div class="line" id="091255"><span class="nick" style="color:#234e69"><a href="#091255" label="[09:12:55]">&lt;theruran&gt;</a></span><span class="message">janneke: Gentoo. lemme try those environment variables</span></div><div class="line" id="091447"><span class="nick" style="color:#234e69"><a href="#091447" label="[09:14:47]">&lt;theruran&gt;</a></span><span class="message">yes, that did it. passed configure and now running make ✅</span></div><div class="line" id="091523"><span class="nick" style="color:#d9d9d9"><a href="#091523" label="[09:15:23]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="091607"><span class="nick" style="color:#234e69"><a href="#091607" label="[09:16:07]">&lt;theruran&gt;</a></span><span class="message">hey that works! I can run (ls &quot;.&quot;) now from my script</span></div><div class="line" id="091812"><span class="nick" style="color:#6d2462"><a href="#091812" label="[09:18:12]">*</a></span><span class="message">janneke quickly looks at ls code</span></div><div class="line" id="092024"><span class="nick" style="color:#6c3d55"><a href="#092024" label="[09:20:24]">&lt;bauen1&gt;</a></span><span class="message">are there any (arm or x86 based) single board computers that don't involve binary blobs in the boot process or is that already impossible to achieve ?</span></div><div class="line" id="092052"><span class="nick" style="color:#6c3d55"><a href="#092052" label="[09:20:52]">&lt;bauen1&gt;</a></span><span class="message">i've found some allwinner based boards that come quite close but there is still a 32kb binary that runs before the actuall boot code is loaded</span></div><div class="line" id="095654"><span class="nick" style="color:#d9d9d9"><a href="#095654" label="[09:56:54]">&lt;janneke&gt;</a></span><span class="message">bauen1: i would like to know, i have no idea</span></div><div class="line" id="095717"><span class="nick" style="color:#d9d9d9"><a href="#095717" label="[09:57:17]">&lt;janneke&gt;</a></span><span class="message">it seems to me that the ARM world, if there is such a thing, is generally happy when &quot;it runs&quot;</span></div><div class="line" id="095747"><span class="nick" style="color:#d9d9d9"><a href="#095747" label="[09:57:47]">&lt;janneke&gt;</a></span><span class="message">hopefully, devices like the librem 5 and pinebook pro can help raise some awareness and clarity here</span></div><div class="line" id="095826"><span class="nick" style="color:#d9d9d9"><a href="#095826" label="[09:58:26]">&lt;janneke&gt;</a></span><span class="message">i am hearing good things about power9 and risc-v but have no idea how to verify</span></div><div class="line" id="100015"><span class="nick" style="color:#d9d9d9"><a href="#100015" label="[10:00:15]">&lt;janneke&gt;</a></span><span class="message">i am determined to investigate this all harder some time, but i'm focussing on software to get our non-binary (bootstrap) act together</span></div><div class="line" id="100156"><span class="nick" style="color:#6c3d55"><a href="#100156" label="[10:01:56]">&lt;bauen1&gt;</a></span><span class="message">probably a good decision</span></div><div class="line" id="100233"><span class="nick" style="color:#6c3d55"><a href="#100233" label="[10:02:33]">&lt;bauen1&gt;</a></span><span class="message">i was looking at <a rel="nofollow" href="https://libre.computer/products/boards/all-h3-cc/">https://libre.computer/products/boards/all-h3-cc/</a>  the only problem i see is that there is a 32kb &quot;boot0&quot; that loads the actuall boot code</span></div><div class="line" id="100253"><span class="nick" style="color:#6c3d55"><a href="#100253" label="[10:02:53]">&lt;bauen1&gt;</a></span><span class="message">it's the closest i've found to &quot;just a single rom you can flash&quot;</span></div><div class="line" id="100312"><span class="nick" style="color:#6c3d55"><a href="#100312" label="[10:03:12]">&lt;bauen1&gt;</a></span><span class="message">x86 is probably much worse in this regard (intel pch, me, ...)</span></div><div class="line" id="120426"><span class="nick" style="color:#8dd3c7"><a href="#120426" label="[12:04:26]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: yes we will be more than happy with gplv3 and any other alternative as long as it is FSF approved.</span></div><div class="line" id="120458"><span class="nick" style="color:#8dd3c7"><a href="#120458" label="[12:04:58]">&lt;OriansJ&gt;</a></span><span class="message">As for the question of bootstrap binaries in x86/ARM; sadly they all have blobs all over the place</span></div><div class="line" id="120727"><span class="nick" style="color:#8dd3c7"><a href="#120727" label="[12:07:27]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: but that is why stage0 includes a hardware goal and we have tried to recruit FPGA developers to help with that problem</span></div><div class="line" id="120952"><span class="nick" style="color:#8dd3c7"><a href="#120952" label="[12:09:52]">&lt;OriansJ&gt;</a></span><span class="message">In the more long term there is a reason why the libresilicon project is so important</span></div><div class="line" id="135831"><span class="nick" style="color:#bc80bd"><a href="#135831" label="[13:58:31]">&lt;deesix&gt;</a></span><span class="message">bauen1, I'm pretty sure this Allwinner A20 based board boots with mainline u-boot. I don't think there's any binary blob involved. IIRC I got u-boot-sunxi-with-spl.bin from compilation without any external input, just the u-boot repo. For 64 bits there's the ATF, but I think that's all source too.</span></div><div class="line" id="140548"><span class="nick" style="color:#bc80bd"><a href="#140548" label="[14:05:48]">&lt;deesix&gt;</a></span><span class="message">Olinuxino Lime2 (Rev.G2 if that matters)</span></div><div class="line" id="140648"><span class="nick" style="color:#bc80bd"><a href="#140648" label="[14:06:48]">&lt;deesix&gt;</a></span><span class="message">Am I missing something? Glad to be corrected.</span></div><div class="line" id="142332"><span class="nick" style="color:#bc80bd"><a href="#142332" label="[14:23:32]">&lt;deesix&gt;</a></span><span class="message">This was a couple of years ago; I think it's time to upgrade and review my notes of the process (it was quite straigforward if memory serves). If you're interested I can raise the priority a bit.</span></div><div class="line" id="142707"><span class="nick" style="color:#6c3d55"><a href="#142707" label="[14:27:07]">&lt;bauen1&gt;</a></span><span class="message">deesix: yeah the ATF is open source</span></div><div class="line" id="142725"><span class="nick" style="color:#6c3d55"><a href="#142725" label="[14:27:25]">&lt;bauen1&gt;</a></span><span class="message">i'm not sure but according to what i looked up there is a 32kb binary blob (boot0) that isn't open sourced</span></div><div class="line" id="142739"><span class="nick" style="color:#6c3d55"><a href="#142739" label="[14:27:39]">&lt;bauen1&gt;</a></span><span class="message">it sets up ram and finally loads the bootloader from the eeprom</span></div><div class="line" id="142749"><span class="nick" style="color:#6c3d55"><a href="#142749" label="[14:27:49]">&lt;bauen1&gt;</a></span><span class="message">supports some stuff like flashing the eeprom over usb</span></div><div class="line" id="142805"><span class="nick" style="color:#6c3d55"><a href="#142805" label="[14:28:05]">&lt;bauen1&gt;</a></span><span class="message">but it sits on a real rom so no removing that ...</span></div><div class="line" id="143411"><span class="nick" style="color:#bc80bd"><a href="#143411" label="[14:34:11]">&lt;deesix&gt;</a></span><span class="message">It seems there's source for that also, but yeah... ROM</span></div><div class="line" id="143425"><span class="nick" style="color:#bc80bd"><a href="#143425" label="[14:34:25]">&lt;deesix&gt;</a></span><span class="message"> <a rel="nofollow" href="https://linux-sunxi.org/BROM#Source_code_for_boot0_and_boot1">https://linux-sunxi.org/BROM#Source_code_for_boot0_and_boot1</a> </span></div><div class="line" id="145124"><span class="nick" style="color:#8dd3c7"><a href="#145124" label="[14:51:24]">&lt;OriansJ&gt;</a></span><span class="message">deesix: let us just say, we can try to make the best of the bad situation until we get free hardware designs.</span></div><div class="line" id="145249"><span class="nick" style="color:#8dd3c7"><a href="#145249" label="[14:52:49]">&lt;OriansJ&gt;</a></span><span class="message">in the mean time, portability across architectures will remain a goal in the bootstrap pieces that I write; so that we don't depend upon any hardware in particular.</span></div><div class="line" id="145616"><span class="nick" style="color:#bc80bd"><a href="#145616" label="[14:56:16]">&lt;deesix&gt;</a></span><span class="message">hmm, but boot0 comes from NAND or MMC. So that't not what's in ROM (which is onchip even). I think after the ROM you jump to u-boot code (in SD Card in my case).</span></div><div class="line" id="150114"><span class="nick" style="color:#6c3d55"><a href="#150114" label="[15:01:14]">&lt;bauen1&gt;</a></span><span class="message">it's not open source for the more recent chips but yeah</span></div><div class="line" id="151054"><span class="nick" style="color:#bc80bd"><a href="#151054" label="[15:10:54]">&lt;deesix&gt;</a></span><span class="message">I'm positive that I bought this 32 bits card because it was the most free option I found. For 64 bits I got the A64 based TERES-I.</span></div><div class="line" id="151154"><span class="nick" style="color:#bc80bd"><a href="#151154" label="[15:11:54]">&lt;deesix&gt;</a></span><span class="message">As OSHW as you can get (module the SoC of course, which is another battle).</span></div><div class="line" id="151202"><span class="nick" style="color:#bc80bd"><a href="#151202" label="[15:12:02]">&lt;deesix&gt;</a></span><span class="message">*modulo</span></div><div class="line" id="152319"><span class="nick" style="color:#8dd3c7"><a href="#152319" label="[15:23:19]">&lt;OriansJ&gt;</a></span><span class="message">deesix: you are also forgetting the horizontal microcode also inside the CPUs themselves; which applies to all modern processors</span></div><div class="line" id="152334"><span class="nick" style="color:#bc80bd"><a href="#152334" label="[15:23:34]">&lt;deesix&gt;</a></span><span class="message">People at #linux-sunxi is very friendly and did/does an amazing job. #olimex is mostly idle but it's also a good place. I think some other people from here are there. vagrantc for example.</span></div><div class="line" id="152435"><span class="nick" style="color:#8dd3c7"><a href="#152435" label="[15:24:35]">&lt;OriansJ&gt;</a></span><span class="message">deesix: well the community does have alot of cross-polination of ideas and various attempts from numerous directions to address the problems that we collectively see.</span></div><div class="line" id="152439"><span class="nick" style="color:#bc80bd"><a href="#152439" label="[15:24:39]">&lt;deesix&gt;</a></span><span class="message">OriansJ, sure... who knows what's inside those SoC.</span></div><div class="line" id="152522"><span class="nick" style="color:#8dd3c7"><a href="#152522" label="[15:25:22]">&lt;OriansJ&gt;</a></span><span class="message">Some try to mine out freedom from chips we can buy today, others work to enable to us to make chips tomorrow (libresilicon, opencores, etc)</span></div><div class="line" id="152632"><span class="nick" style="color:#8dd3c7"><a href="#152632" label="[15:26:32]">&lt;OriansJ&gt;</a></span><span class="message">all are needed and the diversity of approach is perhaps one of the community's greatest strenghts. No single failure matters</span></div><div class="line" id="152655"><span class="nick" style="color:#8dd3c7"><a href="#152655" label="[15:26:55]">&lt;OriansJ&gt;</a></span><span class="message">Projects are born, grow and either die or bloom.</span></div><div class="line" id="153022"><span class="nick" style="color:#2e2a4a"><a href="#153022" label="[15:30:22]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, M1 negative numbers are somehow funny 0b-1010, 0x-ABCD... but I see how that's simpler (:</span></div><div class="line" id="153210"><span class="nick" style="color:#2e2a4a"><a href="#153210" label="[15:32:10]">&lt;dddddd&gt;</a></span><span class="message">Today I'm going for the '&lt;' elements.</span></div><div class="line" id="153357"><span class="nick" style="color:#8dd3c7"><a href="#153357" label="[15:33:57]">&lt;OriansJ&gt;</a></span><span class="message">very nice</span></div><div class="line" id="153849"><span class="nick" style="color:#2e2a4a"><a href="#153849" label="[15:38:49]">&lt;dddddd&gt;</a></span><span class="message">The NEWLINE stuff is a bit &quot;complex&quot;, as in several parts involved in tricky invariants (for example EOF triggering a NEWLINE, and the not quite obvious interactions with print_hex... where I was in doubt about i-&gt;next-&gt;type not getting NULL for next).</span></div><div class="line" id="154439"><span class="nick" style="color:#2e2a4a"><a href="#154439" label="[15:44:39]">&lt;dddddd&gt;</a></span><span class="message">The padding for Knight also would benefit from some comments, to clarify the intent.</span></div><div class="line" id="154619"><span class="nick" style="color:#2e2a4a"><a href="#154619" label="[15:46:19]">&lt;dddddd&gt;</a></span><span class="message">As easy understanding is a explicit goal, those details are important. One can get to the by study, but a couple of sentences can avoid many [aggregated] hours.</span></div><div class="line" id="154630"><span class="nick" style="color:#2e2a4a"><a href="#154630" label="[15:46:30]">&lt;dddddd&gt;</a></span><span class="message">*get to them</span></div><div class="line" id="160350"><span class="nick" style="color:#2e2a4a"><a href="#160350" label="[16:03:50]">&lt;dddddd&gt;</a></span><span class="message">Hmm, so '&lt;' just pads an amount, not helping with alignment calculation. I see.</span></div><div class="line" id="161515"><span class="nick" style="color:#8dd3c7"><a href="#161515" label="[16:15:15]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: it only helps alignment in hex2</span></div><div class="line" id="161717"><span class="nick" style="color:#2e2a4a"><a href="#161717" label="[16:17:17]">&lt;dddddd&gt;</a></span><span class="message">Also, it doesn't take into account the format requested for the output. It seems that hex is implicit (size = size * 2) AFAIU.</span></div><div class="line" id="161956"><span class="nick" style="color:#8dd3c7"><a href="#161956" label="[16:19:56]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: true, the only architecture that needed alignment to work was ARMv7l and it expected word alignment</span></div><div class="line" id="162059"><span class="nick" style="color:#2e2a4a"><a href="#162059" label="[16:20:59]">&lt;dddddd&gt;</a></span><span class="message">I'm not talking arch, but output format (--binary --octal)</span></div><div class="line" id="162106"><span class="nick" style="color:#8dd3c7"><a href="#162106" label="[16:21:06]">&lt;OriansJ&gt;</a></span><span class="message">and &lt;#### support was added to allow explicit null padding on those architectures where such padding would be needed</span></div><div class="line" id="162142"><span class="nick" style="color:#8dd3c7"><a href="#162142" label="[16:21:42]">&lt;OriansJ&gt;</a></span><span class="message">well alignment is just about the byte addresses, not the number of characters used</span></div><div class="line" id="162241"><span class="nick" style="color:#2e2a4a"><a href="#162241" label="[16:22:41]">&lt;dddddd&gt;</a></span><span class="message">But if you want some bytes of padding and the output is, say, binary... you're not getting those bytes but some bits.</span></div><div class="line" id="162319"><span class="nick" style="color:#8dd3c7"><a href="#162319" label="[16:23:19]">&lt;OriansJ&gt;</a></span><span class="message">ummm dddddd hex2 only outputs individual bytes</span></div><div class="line" id="162329"><span class="nick" style="color:#2e2a4a"><a href="#162329" label="[16:23:29]">&lt;dddddd&gt;</a></span><span class="message">M1</span></div><div class="line" id="162355"><span class="nick" style="color:#8dd3c7"><a href="#162355" label="[16:23:55]">&lt;OriansJ&gt;</a></span><span class="message">M1 doesn't do alignment, only padding</span></div><div class="line" id="162501"><span class="nick" style="color:#8dd3c7"><a href="#162501" label="[16:25:01]">&lt;OriansJ&gt;</a></span><span class="message">but you are correct, for binary and octal it needs more than just 2 0s</span></div><div class="line" id="162612"><span class="nick" style="color:#8dd3c7"><a href="#162612" label="[16:26:12]">&lt;OriansJ&gt;</a></span><span class="message">I should probably add some conditional logic to do the correct behavior for octal and binary</span></div><div class="line" id="162758"><span class="nick" style="color:#2e2a4a"><a href="#162758" label="[16:27:58]">&lt;dddddd&gt;</a></span><span class="message">OK, I'll fix that on M1.scm also. I guess it's not common to ask for binary/octal but at least it won't surprise the user.</span></div><div class="line" id="162843"><span class="nick" style="color:#2e2a4a"><a href="#162843" label="[16:28:43]">&lt;dddddd&gt;</a></span><span class="message">The other option is to remove binary/octal if we don't want to support it, because unused(?)</span></div><div class="line" id="162918"><span class="nick" style="color:#8dd3c7"><a href="#162918" label="[16:29:18]">&lt;OriansJ&gt;</a></span><span class="message">Well some architectures much better map to binary and octal</span></div><div class="line" id="162931"><span class="nick" style="color:#8dd3c7"><a href="#162931" label="[16:29:31]">&lt;OriansJ&gt;</a></span><span class="message">and supporting them is minimal effort</span></div><div class="line" id="162939"><span class="nick" style="color:#2e2a4a"><a href="#162939" label="[16:29:39]">&lt;dddddd&gt;</a></span><span class="message">OK</span></div><div class="line" id="163048"><span class="nick" style="color:#2e2a4a"><a href="#163048" label="[16:30:48]">&lt;dddddd&gt;</a></span><span class="message">Do you feel it might be more features of M1 that lacks proper support for --binary or --octal?</span></div><div class="line" id="163118"><span class="nick" style="color:#8dd3c7"><a href="#163118" label="[16:31:18]">&lt;OriansJ&gt;</a></span><span class="message">well M1 has very few features</span></div><div class="line" id="163146"><span class="nick" style="color:#2e2a4a"><a href="#163146" label="[16:31:46]">&lt;dddddd&gt;</a></span><span class="message">And we just found one hole in them, I'm wondering it happens with some more.</span></div><div class="line" id="163204"><span class="nick" style="color:#8dd3c7"><a href="#163204" label="[16:32:04]">&lt;OriansJ&gt;</a></span><span class="message">well it certainly is possible</span></div><div class="line" id="163217"><span class="nick" style="color:#8dd3c7"><a href="#163217" label="[16:32:17]">&lt;OriansJ&gt;</a></span><span class="message">I am quite human</span></div><div class="line" id="163311"><span class="nick" style="color:#8dd3c7"><a href="#163311" label="[16:33:11]">&lt;OriansJ&gt;</a></span><span class="message">The only other place where it could appear is hexify_string</span></div><div class="line" id="163338"><span class="nick" style="color:#2e2a4a"><a href="#163338" label="[16:33:38]">&lt;dddddd&gt;</a></span><span class="message">Sure, don't get me wrong. But if those corner cases are forgotten for quite some time... maybe you can recall more additions that were added with that blind spot.</span></div><div class="line" id="163451"><span class="nick" style="color:#8dd3c7"><a href="#163451" label="[16:34:51]">&lt;OriansJ&gt;</a></span><span class="message">the only features M1 has are: line comments, the ability to pass labels and pointers, DEFINEs (which you can do arbitrary things with), &lt;### padding, 'hex literals which does not do any processing' and &quot;RAW strings&quot;</span></div><div class="line" id="163518"><span class="nick" style="color:#8dd3c7"><a href="#163518" label="[16:35:18]">&lt;OriansJ&gt;</a></span><span class="message">(oh and the passing of &lt; alignment characters to hex2)</span></div><div class="line" id="163835"><span class="nick" style="color:#2e2a4a"><a href="#163835" label="[16:38:35]">&lt;dddddd&gt;</a></span><span class="message">input numbers in several formats and sizes, endianness (bit endianness non-exposed I think)</span></div><div class="line" id="163945"><span class="nick" style="color:#8dd3c7"><a href="#163945" label="[16:39:45]">&lt;OriansJ&gt;</a></span><span class="message">very true</span></div><div class="line" id="164028"><span class="nick" style="color:#8dd3c7"><a href="#164028" label="[16:40:28]">&lt;OriansJ&gt;</a></span><span class="message">mostly because we haven't found any little bit endian hardware that was manufactored post 1962</span></div><div class="line" id="164055"><span class="nick" style="color:#2e2a4a"><a href="#164055" label="[16:40:55]">&lt;dddddd&gt;</a></span><span class="message">Is mescc-tools/M1-macro.c the canonical one?</span></div><div class="line" id="164109"><span class="nick" style="color:#8dd3c7"><a href="#164109" label="[16:41:09]">&lt;OriansJ&gt;</a></span><span class="message">yes</span></div><div class="line" id="164145"><span class="nick" style="color:#2e2a4a"><a href="#164145" label="[16:41:45]">&lt;dddddd&gt;</a></span><span class="message">OK, I guess I leave out the bit endiannes for now, or just put at the bottom of the list.</span></div><div class="line" id="164257"><span class="nick" style="color:#8dd3c7"><a href="#164257" label="[16:42:57]">&lt;OriansJ&gt;</a></span><span class="message">It is possible but also the sort of thing which is a nightmare to support</span></div><div class="line" id="164324"><span class="nick" style="color:#8dd3c7"><a href="#164324" label="[16:43:24]">&lt;OriansJ&gt;</a></span><span class="message">because virtually all tools assume big endian bits</span></div><div class="line" id="164441"><span class="nick" style="color:#8dd3c7"><a href="#164441" label="[16:44:41]">&lt;OriansJ&gt;</a></span><span class="message">Even ARM with their little Endian, write the whole instruction as a single operation instruction set; still opted for big endian bits</span></div><div class="line" id="164633"><span class="nick" style="color:#8dd3c7"><a href="#164633" label="[16:46:33]">&lt;OriansJ&gt;</a></span><span class="message">So instead of [4bit cond] [8bit op] [4bit reg] [4bit reg] [8bit shift] [4bit reg]</span></div><div class="line" id="164810"><span class="nick" style="color:#8dd3c7"><a href="#164810" label="[16:48:10]">&lt;OriansJ&gt;</a></span><span class="message">it is [4bit shift] [4bits reg] [4bits shift] [4bits reg] [4bits reg] [4bits op] [4bits cond] [4bits op]</span></div><div class="line" id="165101"><span class="nick" style="color:#8dd3c7"><a href="#165101" label="[16:51:01]">&lt;OriansJ&gt;</a></span><span class="message">sorry [4bit shift] [4bits reg] [4bits reg] [4bits shift] [4bits op] [4bits reg] [4bits cond] [4bits op]</span></div><div class="line" id="165238"><span class="nick" style="color:#8dd3c7"><a href="#165238" label="[16:52:38]">&lt;OriansJ&gt;</a></span><span class="message">an instruction set that should be ideal for Hex encoding; a big mess because they thought word endianess mapped to bit endianness?</span></div><div class="line" id="165312"><span class="nick" style="color:#8dd3c7"><a href="#165312" label="[16:53:12]">&lt;OriansJ&gt;</a></span><span class="message">If ARM actually did little bit endian, it would have been a perfect mirror to what their documentation said</span></div><div class="line" id="170030"><span class="nick" style="color:#2e2a4a"><a href="#170030" label="[17:00:30]">&lt;dddddd&gt;</a></span><span class="message">Yes, hexify_string can't be correct.</span></div><div class="line" id="170203"><span class="nick" style="color:#8dd3c7"><a href="#170203" label="[17:02:03]">&lt;OriansJ&gt;</a></span><span class="message">but is easy to make correct</span></div><div class="line" id="170428"><span class="nick" style="color:#8dd3c7"><a href="#170428" label="[17:04:28]">&lt;OriansJ&gt;</a></span><span class="message">and I was thinking about <a rel="nofollow" href="http://www.megaprocessor.com/">http://www.megaprocessor.com/</a>  as a potential hardware source of bootstrap</span></div><div class="line" id="171055"><span class="nick" style="color:#2e2a4a"><a href="#171055" label="[17:10:55]">&lt;dddddd&gt;</a></span><span class="message">I keep thinking about old micro computers, but I think one can't get that far without more RAM. Maybe some of the first steps.</span></div><div class="line" id="171316"><span class="nick" style="color:#8dd3c7"><a href="#171316" label="[17:13:16]">&lt;OriansJ&gt;</a></span><span class="message">well 64KB is enough to run cc_x86</span></div><div class="line" id="171335"><span class="nick" style="color:#8dd3c7"><a href="#171335" label="[17:13:35]">&lt;OriansJ&gt;</a></span><span class="message">just not enough to run the binaries generated from it</span></div><div class="line" id="171432"><span class="nick" style="color:#8dd3c7"><a href="#171432" label="[17:14:32]">&lt;OriansJ&gt;</a></span><span class="message">one needs about 1-2MB to run M2-Planet self-hosted</span></div><div class="line" id="171547"><span class="nick" style="color:#8dd3c7"><a href="#171547" label="[17:15:47]">&lt;OriansJ&gt;</a></span><span class="message">If we broke M2-Planet into smaller pieces and added more optimizations; we could significantly reduce that</span></div><div class="line" id="171652"><span class="nick" style="color:#8dd3c7"><a href="#171652" label="[17:16:52]">&lt;OriansJ&gt;</a></span><span class="message">But mes-m2 needs 2-4GB to run NYACC and thus leverage MesCC to build TCC.</span></div><div class="line" id="171741"><span class="nick" style="color:#8dd3c7"><a href="#171741" label="[17:17:41]">&lt;OriansJ&gt;</a></span><span class="message">Which is why I want a POSIX buildable via M2-Planet; as that can be ported down onto any machine with 64KB of RAM</span></div><div class="line" id="171847"><span class="nick" style="color:#8dd3c7"><a href="#171847" label="[17:18:47]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 is also very posix heavy and couldn't run on bare metal, which is a serious limitation for bootstrapping (You need a POSIX before you could use it)</span></div><div class="line" id="172404"><span class="nick" style="color:#2e2a4a"><a href="#172404" label="[17:24:04]">&lt;dddddd&gt;</a></span><span class="message">I'd like to tackle the M2-Planet POSIX kernel task, you know. But first things first.</span></div><div class="line" id="172425"><span class="nick" style="color:#8dd3c7"><a href="#172425" label="[17:24:25]">&lt;OriansJ&gt;</a></span><span class="message">exactly</span></div><div class="line" id="172433"><span class="nick" style="color:#8dd3c7"><a href="#172433" label="[17:24:33]">&lt;OriansJ&gt;</a></span><span class="message">one problem at a time.</span></div><div class="line" id="172658"><span class="nick" style="color:#8dd3c7"><a href="#172658" label="[17:26:58]">&lt;OriansJ&gt;</a></span><span class="message">but if bauen1 is open to cooperation; the POSIX becomes a priority. We focus first on x86, AMD64, ARMv7l and then AArch64</span></div><div class="line" id="172903"><span class="nick" style="color:#6c3d55"><a href="#172903" label="[17:29:03]">&lt;bauen1&gt;</a></span><span class="message">there's also <a rel="nofollow" href="https://monster6502.com/">https://monster6502.com/</a>  (but that is 6502 which for C is a bit of a problem) and it doesn't seem to have any ram</span></div><div class="line" id="172939"><span class="nick" style="color:#8dd3c7"><a href="#172939" label="[17:29:39]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: yep it is one of the reasons I was thinking of adding a SWEET16 port to M2-Planet</span></div><div class="line" id="173022"><span class="nick" style="color:#6c3d55"><a href="#173022" label="[17:30:22]">&lt;bauen1&gt;</a></span><span class="message">i think a 6502 would be interesting for early stages to have something more capable to create e.g. a floppy or flash eeprom chips while also enjoying the luxury of a keyboard and display</span></div><div class="line" id="173225"><span class="nick" style="color:#8dd3c7"><a href="#173225" label="[17:32:25]">&lt;OriansJ&gt;</a></span><span class="message">It is one of the reasons I am excited by: <a rel="nofollow" href="https://github.com/hsoft/collapseos">https://github.com/hsoft/collapseos</a> </span></div><div class="line" id="173325"><span class="nick" style="color:#2e2a4a"><a href="#173325" label="[17:33:25]">&lt;dddddd&gt;</a></span><span class="message">There's no shortage of things like <a rel="nofollow" href="http://www.homebrewcpu.com/">http://www.homebrewcpu.com/</a>  -- <a rel="nofollow" href="http://www.homebrewcpu.com/links.htm">http://www.homebrewcpu.com/links.htm</a> </span></div><div class="line" id="173356"><span class="nick" style="color:#2e2a4a"><a href="#173356" label="[17:33:56]">&lt;dddddd&gt;</a></span><span class="message">Or modern kits on breadboards (Ben Eaters or something like that comes to mind).</span></div><div class="line" id="173359"><span class="nick" style="color:#8dd3c7"><a href="#173359" label="[17:33:59]">&lt;OriansJ&gt;</a></span><span class="message">I am planning on porting cc_* to the 6502, z80 and 6809 targets to enable more potential roots of trust</span></div><div class="line" id="173426"><span class="nick" style="color:#8dd3c7"><a href="#173426" label="[17:34:26]">&lt;OriansJ&gt;</a></span><span class="message">Hence why I feel no rush to go to hardware with stage0</span></div><div class="line" id="173447"><span class="nick" style="color:#8dd3c7"><a href="#173447" label="[17:34:47]">&lt;OriansJ&gt;</a></span><span class="message">The Pieces are designed to be ported and specialized</span></div><div class="line" id="173553"><span class="nick" style="color:#8dd3c7"><a href="#173553" label="[17:35:53]">&lt;OriansJ&gt;</a></span><span class="message">and M2-Planet is a very comfortable subset of C (structs, unions, inline assembly, gotos, etc)</span></div><div class="line" id="173752"><span class="nick" style="color:#6d2462"><a href="#173752" label="[17:37:52]">*</a></span><span class="message">dddddd is a bit tired of &quot;everything is on github&quot; &lt;/minirant&gt;</span></div><div class="line" id="173809"><span class="nick" style="color:#8dd3c7"><a href="#173809" label="[17:38:09]">&lt;OriansJ&gt;</a></span><span class="message">It is why early on there was a plan for M2-Planet v2.x to be 4 seperate programs (Macro preprocessor, generic C state-machine compiler, High level optimizer and architecture specific specializer)</span></div><div class="line" id="173848"><span class="nick" style="color:#8dd3c7"><a href="#173848" label="[17:38:48]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: completely fair</span></div><div class="line" id="174134"><span class="nick" style="color:#8dd3c7"><a href="#174134" label="[17:41:34]">&lt;OriansJ&gt;</a></span><span class="message">I probably should get a few pieces moved over to savannah</span></div><div class="line" id="174314"><span class="nick" style="color:#6c3d55"><a href="#174314" label="[17:43:14]">&lt;bauen1&gt;</a></span><span class="message">or gitlab or straight to self-hosted ;)</span></div><div class="line" id="174348"><span class="nick" style="color:#8dd3c7"><a href="#174348" label="[17:43:48]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I don't want anything to solely depend upon me to keep it working</span></div><div class="line" id="174427"><span class="nick" style="color:#6c3d55"><a href="#174427" label="[17:44:27]">&lt;bauen1&gt;</a></span><span class="message">fair point</span></div><div class="line" id="174431"><span class="nick" style="color:#6c3d55"><a href="#174431" label="[17:44:31]">&lt;bauen1&gt;</a></span><span class="message">*good point</span></div><div class="line" id="174507"><span class="nick" style="color:#8dd3c7"><a href="#174507" label="[17:45:07]">&lt;OriansJ&gt;</a></span><span class="message">That is why I believe in taking the time to fix anything that is not entirely clear and to always explain in as much detail as anyone desires every single detail about any and all pieces</span></div><div class="line" id="174532"><span class="nick" style="color:#6c3d55"><a href="#174532" label="[17:45:32]">&lt;bauen1&gt;</a></span><span class="message">i should probably reflect a bit on my coding / commenting style ...</span></div><div class="line" id="174607"><span class="nick" style="color:#8dd3c7"><a href="#174607" label="[17:46:07]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: well trust is easiest when people are not confused by what things are doing.</span></div><div class="line" id="174623"><span class="nick" style="color:#8dd3c7"><a href="#174623" label="[17:46:23]">&lt;OriansJ&gt;</a></span><span class="message">What is being done should be easy to understand and check</span></div><div class="line" id="174654"><span class="nick" style="color:#8dd3c7"><a href="#174654" label="[17:46:54]">&lt;OriansJ&gt;</a></span><span class="message">I'd rather a slow program that everyone can easily know is correct than a fast program that no one knows how it works.</span></div><div class="line" id="174732"><span class="nick" style="color:#8dd3c7"><a href="#174732" label="[17:47:32]">&lt;OriansJ&gt;</a></span><span class="message">It also makes it easier to onboard new developers if the cognative load required is reduced.</span></div><div class="line" id="175018"><span class="nick" style="color:#2e2a4a"><a href="#175018" label="[17:50:18]">&lt;dddddd&gt;</a></span><span class="message">To be honest, many pieces are failing on that front.</span></div><div class="line" id="175124"><span class="nick" style="color:#8dd3c7"><a href="#175124" label="[17:51:24]">&lt;OriansJ&gt;</a></span><span class="message">very true dddddd and improvements are definitely required</span></div><div class="line" id="175139"><span class="nick" style="color:#2e2a4a"><a href="#175139" label="[17:51:39]">&lt;dddddd&gt;</a></span><span class="message">We'll get there (:</span></div><div class="line" id="175154"><span class="nick" style="color:#8dd3c7"><a href="#175154" label="[17:51:54]">&lt;OriansJ&gt;</a></span><span class="message">in time</span></div><div class="line" id="175251"><span class="nick" style="color:#2e2a4a"><a href="#175251" label="[17:52:51]">&lt;dddddd&gt;</a></span><span class="message">Note that sometimes it's better to document while coding, instead of later on. Fresher details.</span></div><div class="line" id="175445"><span class="nick" style="color:#2e2a4a"><a href="#175445" label="[17:54:45]">&lt;dddddd&gt;</a></span><span class="message">Good naming helps a lot! I just learned to not trust most of our naming, go figure.</span></div><div class="line" id="175503"><span class="nick" style="color:#8dd3c7"><a href="#175503" label="[17:55:03]">&lt;OriansJ&gt;</a></span><span class="message">Very True and I am bad at documentation, comments and commit messages by default and I need to work more on getting better at it.</span></div><div class="line" id="175551"><span class="nick" style="color:#8dd3c7"><a href="#175551" label="[17:55:51]">&lt;OriansJ&gt;</a></span><span class="message">fortunately fixing of names in C is rather simple</span></div><div class="line" id="175659"><span class="nick" style="color:#2e2a4a"><a href="#175659" label="[17:56:59]">&lt;dddddd&gt;</a></span><span class="message">For example Tokenize_Line... not true at all. Even worst on the scheme version (which handles serveral files, instead on just one --no one line, never). Not to mention that SometimesLikeThis, other_like_this, and every possible combination in the same file. O_o</span></div><div class="line" id="175811"><span class="nick" style="color:#8dd3c7"><a href="#175811" label="[17:58:11]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I guess I am bad at naming conventions too</span></div><div class="line" id="175900"><span class="nick" style="color:#8dd3c7"><a href="#175900" label="[17:59:00]">&lt;OriansJ&gt;</a></span><span class="message">but nothing that a sed command couldn't fix</span></div><div class="line" id="175948"><span class="nick" style="color:#2e2a4a"><a href="#175948" label="[17:59:48]">&lt;dddddd&gt;</a></span><span class="message">The arguments to the programs are a bit of a mess and harder to fix (only add more coherent aliases and keep the old ones for compatibility).</span></div><div class="line" id="180022"><span class="nick" style="color:#2e2a4a"><a href="#180022" label="[18:00:22]">&lt;dddddd&gt;</a></span><span class="message">Commits are not sed fixeable (if one minds that, pet peeve of mine you know).</span></div><div class="line" id="180100"><span class="nick" style="color:#8dd3c7"><a href="#180100" label="[18:01:00]">&lt;OriansJ&gt;</a></span><span class="message">lots of potential cleanup indeed</span></div><div class="line" id="180102"><span class="nick" style="color:#2e2a4a"><a href="#180102" label="[18:01:02]">&lt;dddddd&gt;</a></span><span class="message">Sometimes the priorities are other, and I understand how we got here.</span></div><div class="line" id="180115"><span class="nick" style="color:#2e2a4a"><a href="#180115" label="[18:01:15]">&lt;dddddd&gt;</a></span><span class="message">Just my 0.02</span></div><div class="line" id="180351"><span class="nick" style="color:#8dd3c7"><a href="#180351" label="[18:03:51]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: it is easier to fix externally facing details early on.</span></div><div class="line" id="180523"><span class="nick" style="color:#8dd3c7"><a href="#180523" label="[18:05:23]">&lt;OriansJ&gt;</a></span><span class="message">So if the argument names are wrong, it is best that we fix those immediately before M2-Planet+mescc-tools becomes too successful</span></div><div class="line" id="180608"><span class="nick" style="color:#8dd3c7"><a href="#180608" label="[18:06:08]">&lt;OriansJ&gt;</a></span><span class="message">The internal naming details we can always address later (without having to worry about breaking anyone else's bootstrap)</span></div><div class="line" id="180827"><span class="nick" style="color:#2e2a4a"><a href="#180827" label="[18:08:27]">&lt;dddddd&gt;</a></span><span class="message">--LittleEndian --BigEndian are the worst offenders that come to mind. That camel case does not match at all.</span></div><div class="line" id="180903"><span class="nick" style="color:#8dd3c7"><a href="#180903" label="[18:09:03]">&lt;OriansJ&gt;</a></span><span class="message">we already went through one painful transistion with argument names in mescc-tools (--Architecture # with --architecture $name)</span></div><div class="line" id="180925"><span class="nick" style="color:#2e2a4a"><a href="#180925" label="[18:09:25]">&lt;dddddd&gt;</a></span><span class="message">--BaseAddress</span></div><div class="line" id="180947"><span class="nick" style="color:#8dd3c7"><a href="#180947" label="[18:09:47]">&lt;OriansJ&gt;</a></span><span class="message">you want them all lowercase?</span></div><div class="line" id="181021"><span class="nick" style="color:#2e2a4a"><a href="#181021" label="[18:10:21]">&lt;dddddd&gt;</a></span><span class="message">--exec_enable</span></div><div class="line" id="181101"><span class="nick" style="color:#8dd3c7"><a href="#181101" label="[18:11:01]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I was thinking of doing something alternate with that</span></div><div class="line" id="181101"><span class="nick" style="color:#2e2a4a"><a href="#181101" label="[18:11:01]">&lt;dddddd&gt;</a></span><span class="message">I think so, and dash as word separator is more common I guess.</span></div><div class="line" id="181205"><span class="nick" style="color:#8dd3c7"><a href="#181205" label="[18:12:05]">&lt;OriansJ&gt;</a></span><span class="message">say --non-executable and have the default without the option executable</span></div><div class="line" id="181301"><span class="nick" style="color:#8dd3c7"><a href="#181301" label="[18:13:01]">&lt;OriansJ&gt;</a></span><span class="message">that way the current --exec_enable just becomes a nop</span></div><div class="line" id="183312"><span class="nick" style="color:#8dd3c7"><a href="#183312" label="[18:33:12]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: so --big-endian instead of --BigEndian?</span></div><div class="line" id="183431"><span class="nick" style="color:#2e2a4a"><a href="#183431" label="[18:34:31]">&lt;dddddd&gt;</a></span><span class="message">yeah</span></div><div class="line" id="183707"><span class="nick" style="color:#8dd3c7"><a href="#183707" label="[18:37:07]">&lt;OriansJ&gt;</a></span><span class="message">and --base-address</span></div><div class="line" id="183730"><span class="nick" style="color:#2e2a4a"><a href="#183730" label="[18:37:30]">&lt;dddddd&gt;</a></span><span class="message">makes sense</span></div><div class="line" id="184451"><span class="nick" style="color:#6c3d55"><a href="#184451" label="[18:44:51]">&lt;bauen1&gt;</a></span><span class="message">nice along with a copy of lib6502 i found my own attempt at bootstrapping a 6502 from almost nothing, got all the way to hex and comments ...</span></div><div class="line" id="184725"><span class="nick" style="color:#8dd3c7"><a href="#184725" label="[18:47:25]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: nice</span></div><div class="line" id="185204"><span class="nick" style="color:#8dd3c7"><a href="#185204" label="[18:52:04]">&lt;OriansJ&gt;</a></span><span class="message">hex2 has been renamed and the documentation has been updated</span></div><div class="line" id="192404"><span class="nick" style="color:#2e2a4a"><a href="#192404" label="[19:24:04]">&lt;dddddd&gt;</a></span><span class="message">great, thanks OriansJ. In the manpage [--output FILE --non-executable] shouldn't be [--output FILE [--non-executable]]?</span></div><div class="line" id="192553"><span class="nick" style="color:#2e2a4a"><a href="#192553" label="[19:25:53]">&lt;dddddd&gt;</a></span><span class="message">And, padding with null-bytes is supported by M1.scm, for every possible output format, with the count of bytes expressed in any base.</span></div><div class="line" id="192643"><span class="nick" style="color:#8dd3c7"><a href="#192643" label="[19:26:43]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I'll fix that shortly</span></div><div class="line" id="192654"><span class="nick" style="color:#2e2a4a"><a href="#192654" label="[19:26:54]">&lt;dddddd&gt;</a></span><span class="message">&lt;16   &lt;0x10   &lt;020   &lt;0b10000</span></div><div class="line" id="192724"><span class="nick" style="color:#8dd3c7"><a href="#192724" label="[19:27:24]">&lt;OriansJ&gt;</a></span><span class="message">nice</span></div><div class="line" id="193336"><span class="nick" style="color:#d9d9d9"><a href="#193336" label="[19:33:36]">&lt;janneke&gt;</a></span><span class="message">dddddd, OriansJ: love it, ty!</span></div><div class="line" id="193546"><span class="nick" style="color:#8dd3c7"><a href="#193546" label="[19:35:46]">&lt;OriansJ&gt;</a></span><span class="message">I am currently also fixing hexify_string in M1 to support octal and binary outputs</span></div><div class="line" id="193941"><span class="nick" style="color:#2e2a4a"><a href="#193941" label="[19:39:41]">&lt;dddddd&gt;</a></span><span class="message">janneke, my pleasure. Note that my changes are not public yet. I'll ping you then.</span></div><div class="line" id="194039"><span class="nick" style="color:#d9d9d9"><a href="#194039" label="[19:40:39]">&lt;janneke&gt;</a></span><span class="message">dddddd: np, you're doing great work</span></div><div class="line" id="194118"><span class="nick" style="color:#d9d9d9"><a href="#194118" label="[19:41:18]">&lt;janneke&gt;</a></span><span class="message">i have been distracted since early december, working on the scheme-only bootstrap and arm things, now pinebook pro -- also fun</span></div><div class="line" id="194226"><span class="nick" style="color:#8dd3c7"><a href="#194226" label="[19:42:26]">&lt;OriansJ&gt;</a></span><span class="message">janneke: honestly it is entirely understandable</span></div><div class="line" id="194307"><span class="nick" style="color:#2e2a4a"><a href="#194307" label="[19:43:07]">&lt;dddddd&gt;</a></span><span class="message">janneke, can you connect via serial?</span></div><div class="line" id="194400"><span class="nick" style="color:#8dd3c7"><a href="#194400" label="[19:44:00]">&lt;OriansJ&gt;</a></span><span class="message">also hexified strings will be broken into bytes for easier checking</span></div><div class="line" id="194554"><span class="nick" style="color:#d9d9d9"><a href="#194554" label="[19:45:54]">&lt;janneke&gt;</a></span><span class="message">dddddd: yes, the 2nd serial cable that i oredered &quot;just worked&quot;</span></div><div class="line" id="194608"><span class="nick" style="color:#d9d9d9"><a href="#194608" label="[19:46:08]">&lt;janneke&gt;</a></span><span class="message">dddddd: and i succeeded in installing Guix System: <a rel="nofollow" href="https://joyofsource.com/guix-system-on-the-pinebook-pro.html">https://joyofsource.com/guix-system-on-the-pinebook-pro.html</a> </span></div><div class="line" id="194623"><span class="nick" style="color:#8dd3c7"><a href="#194623" label="[19:46:23]">&lt;OriansJ&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="194625"><span class="nick" style="color:#d9d9d9"><a href="#194625" label="[19:46:25]">&lt;janneke&gt;</a></span><span class="message">with some hacks</span></div><div class="line" id="194717"><span class="nick" style="color:#2e2a4a"><a href="#194717" label="[19:47:17]">&lt;dddddd&gt;</a></span><span class="message">Good idea, OriansJ. Do you think we should do the same (separate bytes) for the null padding?</span></div><div class="line" id="194746"><span class="nick" style="color:#2e2a4a"><a href="#194746" label="[19:47:46]">&lt;dddddd&gt;</a></span><span class="message">janneke, nice!</span></div><div class="line" id="194818"><span class="nick" style="color:#234e69"><a href="#194818" label="[19:48:18]">&lt;theruran&gt;</a></span><span class="message">janneke: yes, well done! good work.</span></div><div class="line" id="194847"><span class="nick" style="color:#8dd3c7"><a href="#194847" label="[19:48:47]">&lt;OriansJ&gt;</a></span><span class="message">well dddddd put this into a test file: <a rel="nofollow" href="https://paste.debian.net/1130857/">https://paste.debian.net/1130857/</a>  and checkout the new M1 output</span></div><div class="line" id="194933"><span class="nick" style="color:#d9d9d9"><a href="#194933" label="[19:49:33]">&lt;janneke&gt;</a></span><span class="message">ty!</span></div><div class="line" id="194942"><span class="nick" style="color:#8dd3c7"><a href="#194942" label="[19:49:42]">&lt;OriansJ&gt;</a></span><span class="message">I've set the NULL padding for knight to only occur when working in Hex (mostly because the padding isnt an architecture requirement but rather to make disassembly simpler)</span></div><div class="line" id="195116"><span class="nick" style="color:#2e2a4a"><a href="#195116" label="[19:51:16]">&lt;dddddd&gt;</a></span><span class="message">I can imagine, OriansJ. A bit noisy for strings. I was wondering if breaking the run of zeroes (not as noisy) into bytes is worth.</span></div><div class="line" id="195208"><span class="nick" style="color:#2e2a4a"><a href="#195208" label="[19:52:08]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, oh... I guessed it was a requirement of Knight.</span></div><div class="line" id="195248"><span class="nick" style="color:#8dd3c7"><a href="#195248" label="[19:52:48]">&lt;OriansJ&gt;</a></span><span class="message">Nope; entirely to make a hand written disassembler's job easier</span></div><div class="line" id="195306"><span class="nick" style="color:#8dd3c7"><a href="#195306" label="[19:53:06]">&lt;OriansJ&gt;</a></span><span class="message">because I had to write my own disassembler for knight</span></div><div class="line" id="195427"><span class="nick" style="color:#8dd3c7"><a href="#195427" label="[19:54:27]">&lt;OriansJ&gt;</a></span><span class="message">and I did something similiar in M0's output, which made it a little more complicated but enabled easier to debug binaries</span></div><div class="line" id="195508"><span class="nick" style="color:#8dd3c7"><a href="#195508" label="[19:55:08]">&lt;OriansJ&gt;</a></span><span class="message">because debugging bootstrapped binaries is hard enough, without also having to debug your disassembler at the same time</span></div><div class="line" id="195516"><span class="nick" style="color:#2e2a4a"><a href="#195516" label="[19:55:16]">&lt;dddddd&gt;</a></span><span class="message">See, that's the kind of insight that a well placed comment can convey. Never guessed that.</span></div><div class="line" id="195603"><span class="nick" style="color:#2e2a4a"><a href="#195603" label="[19:56:03]">&lt;dddddd&gt;</a></span><span class="message">And can separate that reason from the architectural ones that we might add for other archs.</span></div><div class="line" id="195628"><span class="nick" style="color:#8dd3c7"><a href="#195628" label="[19:56:28]">&lt;OriansJ&gt;</a></span><span class="message">Honestly, I am still debating if I should just go back and remove that bit of extra complexity</span></div><div class="line" id="195905"><span class="nick" style="color:#2e2a4a"><a href="#195905" label="[19:59:05]">&lt;dddddd&gt;</a></span><span class="message">Me too... now that's clear that we are not helping arch requirements, maybe don't do it at all. The rationale for align, say AArch64, was grounded on not doing only for some archs (but we're not doing it for any of them, so...)</span></div><div class="line" id="200038"><span class="nick" style="color:#8dd3c7"><a href="#200038" label="[20:00:38]">&lt;OriansJ&gt;</a></span><span class="message">well we can certainly strip out features of M1 and hex2 that are not absolutely needed</span></div><div class="line" id="200109"><span class="nick" style="color:#2e2a4a"><a href="#200109" label="[20:01:09]">&lt;dddddd&gt;</a></span><span class="message">If the user places a &quot;string&quot; between code or some other data, they need to know what they're doing.</span></div><div class="line" id="200236"><span class="nick" style="color:#2e2a4a"><a href="#200236" label="[20:02:36]">&lt;dddddd&gt;</a></span><span class="message">The disassembler simplification is not a bad reason, all said.</span></div><div class="line" id="200250"><span class="nick" style="color:#8dd3c7"><a href="#200250" label="[20:02:50]">&lt;OriansJ&gt;</a></span><span class="message">well, I would prefer to hide as much of that as possible from them when they use M2-Planet but at M1 and below, that is unavoidable</span></div><div class="line" id="200330"><span class="nick" style="color:#8dd3c7"><a href="#200330" label="[20:03:30]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/High_level_prototypes/disasm.c">https://github.com/oriansj/stage0/blob/master/High_level_prototypes/disasm.c</a> </span></div><div class="line" id="200632"><span class="nick" style="color:#2e2a4a"><a href="#200632" label="[20:06:32]">&lt;dddddd&gt;</a></span><span class="message">syncing the instructions if you can't count of alignment is a guess of heuristics at best, I suppose.</span></div><div class="line" id="202718"><span class="nick" style="color:#8dd3c7"><a href="#202718" label="[20:27:18]">&lt;OriansJ&gt;</a></span><span class="message">yeah, it was a very cheap and dirty hack to get a mostly right disassembler</span></div><div class="line" id="202933"><span class="nick" style="color:#8dd3c7"><a href="#202933" label="[20:29:33]">&lt;OriansJ&gt;</a></span><span class="message">I was also tempted to do something like &lt;4 :string_label &quot;foo&quot; to provide a hint to the disassembler that what was to follow would be a string and not instructions</span></div><div class="line" id="205150"><span class="nick" style="color:#8dd3c7"><a href="#205150" label="[20:51:50]">&lt;OriansJ&gt;</a></span><span class="message">but simply adding support for autogenerating labels and tagging the bits after labels pointed to by loads it as data probably would have been a better plan</span></div><div class="line" id="205545"><span class="nick" style="color:#6b8072"><a href="#205545" label="[20:55:45]">&lt;fossy&gt;</a></span><span class="message">I would appreciate thoughts on my plan to refractor kaem to use linked lists</span></div><div class="line" id="205551"><span class="nick" style="color:#6b8072"><a href="#205551" label="[20:55:51]">&lt;fossy&gt;</a></span><span class="message">a doubly linked list</span></div><div class="line" id="205616"><span class="nick" style="color:#6b8072"><a href="#205616" label="[20:56:16]">&lt;fossy&gt;</a></span><span class="message">(For tokens that is)</span></div><div class="line" id="205642"><span class="nick" style="color:#6b8072"><a href="#205642" label="[20:56:42]">&lt;fossy&gt;</a></span><span class="message">I feel like it would make the code at least slightly clearner</span></div><div class="line" id="205702"><span class="nick" style="color:#6b8072"><a href="#205702" label="[20:57:02]">&lt;fossy&gt;</a></span><span class="message">and it would allow more atttributes on the token to be stored much more easily</span></div><div class="line" id="205726"><span class="nick" style="color:#6b8072"><a href="#205726" label="[20:57:26]">&lt;fossy&gt;</a></span><span class="message">rather than a char**</span></div><div class="line" id="210017"><span class="nick" style="color:#8dd3c7"><a href="#210017" label="[21:00:17]">&lt;OriansJ&gt;</a></span><span class="message">it is fine; but you will need to convert the list to an array before calling execve (when it comes to passed args and environment)</span></div><div class="line" id="210217"><span class="nick" style="color:#6b8072"><a href="#210217" label="[21:02:17]">&lt;fossy&gt;</a></span><span class="message">yes, that is what I was thinking about</span></div><div class="line" id="210500"><span class="nick" style="color:#8dd3c7"><a href="#210500" label="[21:05:00]">&lt;OriansJ&gt;</a></span><span class="message">It should be rather simple to do as a function</span></div><div class="line" id="210726"><span class="nick" style="color:#8dd3c7"><a href="#210726" label="[21:07:26]">&lt;OriansJ&gt;</a></span><span class="message">eg char** nenvp = list_to_array(list);</span></div><br /></div></body></html>