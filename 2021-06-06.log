<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="032529"><span class="nick" style="color:#8dd3c7"><a href="#032529" label="[03:25:29]">&lt;oriansj&gt;</a></span><span class="message">Melg8: the only strategy I have seen work for bootstrapping is take the most advanced language you have and use it to make something much more advanced as quickly as possible and then start using that new more advanced language to bootstrap the next language that will replace it.</span></div><div class="line" id="032850"><span class="nick" style="color:#2e2a4a"><a href="#032850" label="[03:28:50]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: how did the vote turn out?</span></div><div class="line" id="032900"><span class="nick" style="color:#8dd3c7"><a href="#032900" label="[03:29:00]">&lt;oriansj&gt;</a></span><span class="message">hex0 -&gt; hex1 (huge improvement in dealing with loops and function calls) -&gt; hex2 (huge improvement in dealing with global variables) -&gt; M0 (huge improvement in readablity) -&gt; cc_* ( major leap in ease of programming) -&gt; M2-Planet ( major improvement in debugging)</span></div><div class="line" id="032951"><span class="nick" style="color:#6b8072"><a href="#032951" label="[03:29:51]">&lt;Melg8[m]&gt;</a></span><span class="message">oriansj: can you once again explain to me what is idea behind emulator? so you want to use it to be compiled by non-trusted compiler + use non-trusted make + all that on top of some kernel program - and use it across different runners with different compiler/make/kernels? so it will trigger inconsistencies if something try to insert some malicious code? or am i hallucinating? if yes (or kinda yes) than how it would build more difficult to</span></div><div class="line" id="032951"><span class="nick" style="color:#6b8072"><a href="#032951" label="[03:29:51]">&lt;Melg8[m]&gt;</a></span><span class="message">build stuff - like non single source non single outup files (like gcc + libs)?</span></div><div class="line" id="033014"><span class="nick" style="color:#8dd3c7"><a href="#033014" label="[03:30:14]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: libera.chat got the most approve votes and no reject votes, so it won</span></div><div class="line" id="033035"><span class="nick" style="color:#2e2a4a"><a href="#033035" label="[03:30:35]">&lt;vagrantc&gt;</a></span><span class="message">ok, so no need to change any of my configurations :)</span></div><div class="line" id="033138"><span class="nick" style="color:#8dd3c7"><a href="#033138" label="[03:31:38]">&lt;oriansj&gt;</a></span><span class="message">Melg8: if you mean the knight emulation in stage0, that is just to enable a bare metal development for a hardware architecture I plan on building in individual gates.</span></div><div class="line" id="033304"><span class="nick" style="color:#6b8072"><a href="#033304" label="[03:33:04]">&lt;Melg8[m]&gt;</a></span><span class="message">than how and will it be glued together? because in stage0-posix kaem glue all steps together - so no manual work required to scale this process to 20 different targets in ci if we like to.</span></div><div class="line" id="033310"><span class="nick" style="color:#8dd3c7"><a href="#033310" label="[03:33:10]">&lt;oriansj&gt;</a></span><span class="message">or if you mean the cross-platform capabilities of M2-Planet+mescc-tools then it means that any single trusted architecture can be used to detect a compromise in any hardware platform. As all architectures can reproduce identical binaries for all targets.</span></div><div class="line" id="034534"><span class="nick" style="color:#8dd3c7"><a href="#034534" label="[03:45:34]">&lt;oriansj&gt;</a></span><span class="message">So x86 can be used to detect compromises for AArch64, armv7l, AMD64, knight (powerpc too when I finish doing that work) and all of those systems can also be used to detect compromises on the x86 hosts as well.</span></div><div class="line" id="034824"><span class="nick" style="color:#8dd3c7"><a href="#034824" label="[03:48:24]">&lt;oriansj&gt;</a></span><span class="message">And once I do knight in individual gates, then any compromise for any other target know will show up instantly when we do a simple diff between the binary produced on the trusted system (knight) and the one produced on the target system. (Straight DDC but with even fewer assumptions [only depends on a single trust hardware platform and a single hex0-monitor seed])</span></div><div class="line" id="035613"><span class="nick" style="color:#80b1d3"><a href="#035613" label="[03:56:13]">&lt;Melg8&gt;</a></span><span class="message">but with that up until what binary program would be verified?</span></div><div class="line" id="083712"><span class="nick">***</span><span class="message notice">copper.libera.chat sets mode: +o janneke</span></div><div class="line" id="121356"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="121622"><span class="nick" style="color:#8dd3c7"><a href="#121622" label="[12:16:22]">&lt;oriansj&gt;</a></span><span class="message">Melg8: well that would be everything that M2-Planet can build. As I am not certain about what MesCC can do in regards to cross-platform builds. And various other pieces in regards to their portability.</span></div><div class="line" id="121726"><span class="nick" style="color:#8dd3c7"><a href="#121726" label="[12:17:26]">&lt;oriansj&gt;</a></span><span class="message">But that is certainly that could be addressed to a level which extends much further if the work required was performed.</span></div><div class="line" id="210356"><span class="nick" style="color:#6b8072"><a href="#210356" label="[21:03:56]">&lt;Melg8[m]&gt;</a></span><span class="message">stikonas: why unified-libc-1/2/3 is split that way? why 1 contains this files, and not others? what reasons behind it? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/8210cc9e24b5495957a074f59a353ca68a1de0a0/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L61">https://github.com/fosslinux/live-bootstrap/blob/8210cc9e24b5495957a074f59a353ca68a1de0a0/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L61</a> </span></div><div class="line" id="210438"><span class="nick" style="color:#6d2462"><a href="#210438" label="[21:04:38]">&lt;stikonas&gt;</a></span><span class="message">Melg8[m]: it's completely arbitrary</span></div><div class="line" id="210445"><span class="nick" style="color:#6d2462"><a href="#210445" label="[21:04:45]">&lt;stikonas&gt;</a></span><span class="message">you just need some split</span></div><div class="line" id="210454"><span class="nick" style="color:#6b8072"><a href="#210454" label="[21:04:54]">&lt;Melg8[m]&gt;</a></span><span class="message">why?</span></div><div class="line" id="210502"><span class="nick" style="color:#6b8072"><a href="#210502" label="[21:05:02]">&lt;Melg8[m]&gt;</a></span><span class="message">is this because 256 rule?</span></div><div class="line" id="210506"><span class="nick" style="color:#6d2462"><a href="#210506" label="[21:05:06]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="210514"><span class="nick" style="color:#6b8072"><a href="#210514" label="[21:05:14]">&lt;Melg8[m]&gt;</a></span><span class="message">not rule, but lack of support of &gt;256 arguments/</span></div><div class="line" id="210517"><span class="nick" style="color:#6d2462"><a href="#210517" label="[21:05:17]">&lt;stikonas&gt;</a></span><span class="message">because of that mes bug</span></div><div class="line" id="210525"><span class="nick" style="color:#6b8072"><a href="#210525" label="[21:05:25]">&lt;Melg8[m]&gt;</a></span><span class="message">okay, thanks!)</span></div><div class="line" id="210529"><span class="nick" style="color:#6d2462"><a href="#210529" label="[21:05:29]">&lt;stikonas&gt;</a></span><span class="message">we had too many arguments</span></div><div class="line" id="210539"><span class="nick" style="color:#6d2462"><a href="#210539" label="[21:05:39]">&lt;stikonas&gt;</a></span><span class="message">well, new mes should fix that</span></div><div class="line" id="210612"><span class="nick" style="color:#6b8072"><a href="#210612" label="[21:06:12]">&lt;Melg8[m]&gt;</a></span><span class="message">cool! so, will you lead this migration to new mes? when it will arrive?</span></div><div class="line" id="212825"><span class="nick" style="color:#6d2462"><a href="#212825" label="[21:28:25]">&lt;stikonas&gt;</a></span><span class="message">Melg8[m]: well, first of all we need to switch to new m2libc based workflow</span></div><div class="line" id="212833"><span class="nick" style="color:#6d2462"><a href="#212833" label="[21:28:33]">&lt;stikonas&gt;</a></span><span class="message">and it might already have newer mes, I haven't checked</span></div><div class="line" id="212939"><span class="nick" style="color:#6d2462"><a href="#212939" label="[21:29:39]">&lt;stikonas&gt;</a></span><span class="message">I started moving live-bootstrap to m2libc</span></div><div class="line" id="212949"><span class="nick" style="color:#6d2462"><a href="#212949" label="[21:29:49]">&lt;stikonas&gt;</a></span><span class="message">and first blocker that I encountered was mescc-extra-tools</span></div><div class="line" id="213013"><span class="nick" style="color:#6d2462"><a href="#213013" label="[21:30:13]">&lt;stikonas&gt;</a></span><span class="message">(there is no kaem build script yet)</span></div><div class="line" id="213020"><span class="nick" style="color:#6d2462"><a href="#213020" label="[21:30:20]">&lt;stikonas&gt;</a></span><span class="message">I think oriansj promissed to write one</span></div><div class="line" id="222740"><span class="nick">***</span><span class="message notice">pritambaral is now known as prite</span></div><div class="line" id="230638"><span class="nick" style="color:#234e69"><a href="#230638" label="[23:06:38]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah, I need to rewrite mescc-tools-extra to use m2libc</span></div><div class="line" id="231611"><span class="nick" style="color:#6c3d55"><a href="#231611" label="[23:16:11]">&lt;mitzman&gt;</a></span><span class="message">hmm, I was reading a bit about the bootstrapping process, and came up across this: &quot;The Guix bootstrap for x86_64 uses x86 mes and that is not expected to change.&quot;. i also saw that x86_64 mes is on its way. would that mean guix will have the possibility to be bootstrapped with the x86_64 mes?</span></div><div class="line" id="231611"><span class="nick" style="color:#d9d9d9"><a href="#231611" label="[23:16:11]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: apps are done</span></div><div class="line" id="231621"><span class="nick" style="color:#d9d9d9"><a href="#231621" label="[23:16:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Only no build script</span></div><div class="line" id="231624"><span class="nick" style="color:#6c3d55"><a href="#231624" label="[23:16:24]">&lt;mitzman&gt;</a></span><span class="message">sorry, wrong chan</span></div><div class="line" id="232018"><span class="nick" style="color:#6d2462"><a href="#232018" label="[23:20:18]">&lt;stikonas&gt;</a></span><span class="message">mitzman: it's not really wrong chan</span></div><div class="line" id="232431"><span class="nick" style="color:#6d2462"><a href="#232431" label="[23:24:31]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra">https://github.com/oriansj/mescc-tools-extra</a> </span></div><br /></div></body></html>