<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000000"><span class="nick" style="color:#389600"><a href="#000000" label="[00:00:00]">&lt;dgpv&gt;</a></span><span class="message">macros yes, tail recursion no</span></div><div class="line" id="000017"><span class="nick" style="color:#8dd3c7"><a href="#000017" label="[00:00:17]">&lt;OriansJ`&gt;</a></span><span class="message">(needed for MesCC)</span></div><div class="line" id="000041"><span class="nick" style="color:#2e2a4a"><a href="#000041" label="[00:00:41]">&lt;xentrac&gt;</a></span><span class="message">really?  &quot;a Lisp&quot; can be a pretty wide range of languages, while &quot;a C compiler&quot; is very specific and requires a lot of coercion rules</span></div><div class="line" id="000114"><span class="nick" style="color:#389600"><a href="#000114" label="[00:01:14]">&lt;dgpv&gt;</a></span><span class="message">well if you make a compiler that is specific to particular codebase</span></div><div class="line" id="000120"><span class="nick" style="color:#389600"><a href="#000120" label="[00:01:20]">&lt;dgpv&gt;</a></span><span class="message">that simplifies things</span></div><div class="line" id="000124"><span class="nick" style="color:#2e2a4a"><a href="#000124" label="[00:01:24]">&lt;xentrac&gt;</a></span><span class="message">last time I wrote a self-compiling Lisp it took me three weeks --- *with* tail recursion and &quot;macros&quot;</span></div><div class="line" id="000146"><span class="nick" style="color:#2e2a4a"><a href="#000146" label="[00:01:46]">&lt;xentrac&gt;</a></span><span class="message">I don't think I could do a C compiler in less than three months, based on people trying</span></div><div class="line" id="000158"><span class="nick" style="color:#8dd3c7"><a href="#000158" label="[00:01:58]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: I wrote a self-hosting C compiler in a day in assembly</span></div><div class="line" id="000159"><span class="nick" style="color:#2e2a4a"><a href="#000159" label="[00:01:59]">&lt;xentrac&gt;</a></span><span class="message">admittedly that wasn't in assembly!</span></div><div class="line" id="000228"><span class="nick" style="color:#2e2a4a"><a href="#000228" label="[00:02:28]">&lt;xentrac&gt;</a></span><span class="message">...self-hosting, in assembly? Wouldn't that make it an assembler, not a C compiler?</span></div><div class="line" id="000251"><span class="nick" style="color:#8dd3c7"><a href="#000251" label="[00:02:51]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: as in it can build it's C code version that is self-hosting</span></div><div class="line" id="000338"><span class="nick" style="color:#2e2a4a"><a href="#000338" label="[00:03:38]">&lt;xentrac&gt;</a></span><span class="message">I see!  yeah, presumably you could do that with Lisp if the Lisp was semantically clsoe to C</span></div><div class="line" id="000342"><span class="nick" style="color:#2e2a4a"><a href="#000342" label="[00:03:42]">&lt;xentrac&gt;</a></span><span class="message">basically C without the C syntax</span></div><div class="line" id="000357"><span class="nick" style="color:#2e2a4a"><a href="#000357" label="[00:03:57]">&lt;xentrac&gt;</a></span><span class="message">but I haven't tried!</span></div><div class="line" id="000358"><span class="nick" style="color:#8dd3c7"><a href="#000358" label="[00:03:58]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet">https://github.com/oriansj/M2-Planet</a>  and <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/bootstrap/x86/cc_x86.M1">https://github.com/oriansj/M2-Planet/blob/master/bootstrap/x86/cc_x86.M1</a> </span></div><div class="line" id="000417"><span class="nick" style="color:#8dd3c7"><a href="#000417" label="[00:04:17]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: C with C syntax</span></div><div class="line" id="000438"><span class="nick" style="color:#2e2a4a"><a href="#000438" label="[00:04:38]">&lt;xentrac&gt;</a></span><span class="message">C with C syntax wouldn't be a Lisp</span></div><div class="line" id="000449"><span class="nick" style="color:#2e2a4a"><a href="#000449" label="[00:04:49]">&lt;xentrac&gt;</a></span><span class="message">you wrote 5000 lines of code in a day?</span></div><div class="line" id="000458"><span class="nick" style="color:#8dd3c7"><a href="#000458" label="[00:04:58]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: yeah</span></div><div class="line" id="000517"><span class="nick" style="color:#8dd3c7"><a href="#000517" label="[00:05:17]">&lt;OriansJ`&gt;</a></span><span class="message">rather easy when most of it is very similiar</span></div><div class="line" id="000538"><span class="nick" style="color:#2e2a4a"><a href="#000538" label="[00:05:38]">&lt;xentrac&gt;</a></span><span class="message">wow</span></div><div class="line" id="000550"><span class="nick" style="color:#389600"><a href="#000550" label="[00:05:50]">&lt;dgpv&gt;</a></span><span class="message">OriansJ` dgpv: well we do have some small lisp programs that need being written if you are interested</span></div><div class="line" id="000550"><span class="nick" style="color:#2e2a4a"><a href="#000550" label="[00:05:50]">&lt;xentrac&gt;</a></span><span class="message">I don't think I could even type that fast</span></div><div class="line" id="000610"><span class="nick" style="color:#389600"><a href="#000610" label="[00:06:10]">&lt;dgpv&gt;</a></span><span class="message">which ones ?</span></div><div class="line" id="000644"><span class="nick" style="color:#389600"><a href="#000644" label="[00:06:44]">&lt;dgpv&gt;</a></span><span class="message">&gt; 5000 lines of code in a day?</span></div><div class="line" id="000706"><span class="nick" style="color:#389600"><a href="#000706" label="[00:07:06]">&lt;dgpv&gt;</a></span><span class="message">including the debugging ? :)</span></div><div class="line" id="000744"><span class="nick" style="color:#8dd3c7"><a href="#000744" label="[00:07:44]">&lt;OriansJ`&gt;</a></span><span class="message">well we are porting mescc-tools to scheme <a rel="nofollow" href="https://github.com/oriansj/mescc-tools">https://github.com/oriansj/mescc-tools</a>  <a rel="nofollow" href="https://github.com/oriansj/slow-utils">https://github.com/oriansj/slow-utils</a>  so that we can remove all binaries except guile from the guix bootstrap binaries (which we then will replace with mes-m2)</span></div><div class="line" id="000823"><span class="nick" style="color:#8dd3c7"><a href="#000823" label="[00:08:23]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: yeah, notice the debug_list at the bottom? It was one of the first things written</span></div><div class="line" id="000856"><span class="nick" style="color:#8dd3c7"><a href="#000856" label="[00:08:56]">&lt;OriansJ`&gt;</a></span><span class="message">Then all I did write the tokenizer by piece; then I could add support for 1 C primitive at a time</span></div><div class="line" id="001019"><span class="nick" style="color:#8dd3c7"><a href="#001019" label="[00:10:19]">&lt;OriansJ`&gt;</a></span><span class="message">lines like :open_curly_brace &quot;{&quot; don't take much time to write</span></div><div class="line" id="001122"><span class="nick" style="color:#8dd3c7"><a href="#001122" label="[00:11:22]">&lt;OriansJ`&gt;</a></span><span class="message">The final important test was to build M2-Planet and it passed with flying colors</span></div><div class="line" id="001127"><span class="nick" style="color:#389600"><a href="#001127" label="[00:11:27]">&lt;dgpv&gt;</a></span><span class="message">mes-m2 simplified to be compilable by this compiler, or it is rewritten/refactored just for clarity ?</span></div><div class="line" id="001136"><span class="nick" style="color:#6b8072"><a href="#001136" label="[00:11:36]">&lt;dddddd&gt;</a></span><span class="message">I'm getting there, indeed. I simplified some bits since last time we talked, OriansJ`. I hope I can allocate more time to work on it soon.</span></div><div class="line" id="001201"><span class="nick" style="color:#8dd3c7"><a href="#001201" label="[00:12:01]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: first for clarity and then I am going to make it buildable via M2-Planet</span></div><div class="line" id="001319"><span class="nick" style="color:#8dd3c7"><a href="#001319" label="[00:13:19]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: take your time, we have plenty of time before the world demands another supported architecture</span></div><div class="line" id="001413"><span class="nick" style="color:#389600"><a href="#001413" label="[00:14:13]">&lt;dgpv&gt;</a></span><span class="message">so currently not buildable yet ?</span></div><div class="line" id="001505"><span class="nick" style="color:#8dd3c7"><a href="#001505" label="[00:15:05]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: it builds just fine with gcc (I've even eliminated all of the warnings as of this afternoon; just haven't pushed that patch yet)</span></div><div class="line" id="001549"><span class="nick" style="color:#8dd3c7"><a href="#001549" label="[00:15:49]">&lt;OriansJ`&gt;</a></span><span class="message">but there are a couple changes needed before I feel it is clear enough such that anyone wishing to audit the code could understand it in a single sitting.</span></div><div class="line" id="001701"><span class="nick" style="color:#8dd3c7"><a href="#001701" label="[00:17:01]">&lt;OriansJ`&gt;</a></span><span class="message">then getting it buildable will be an incremental process (potentially finding bugs in M2-Planet) without much in terms of code changes</span></div><div class="line" id="001831"><span class="nick" style="color:#8dd3c7"><a href="#001831" label="[00:18:31]">&lt;OriansJ`&gt;</a></span><span class="message">for example here is what it took to make slow_lisp buildable via M2-Planet <a rel="nofollow" href="https://github.com/oriansj/Slow_Lisp/commit/c0fcf038359dd56746b99dfc379bce86dca37539?diff=unified">https://github.com/oriansj/Slow_Lisp/commit/c0fcf038359dd56746b99dfc379bce86dca37539?diff=unified</a> </span></div><div class="line" id="002002"><span class="nick" style="color:#389600"><a href="#002002" label="[00:20:02]">&lt;dgpv&gt;</a></span><span class="message">no switch statement ?</span></div><div class="line" id="002101"><span class="nick" style="color:#8dd3c7"><a href="#002101" label="[00:21:01]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: I have not added support for it yet in M2-Planet nor has anyone taken the time to implement and send a pull request</span></div><div class="line" id="002541"><span class="nick" style="color:#8dd3c7"><a href="#002541" label="[00:25:41]">&lt;OriansJ`&gt;</a></span><span class="message">not that I have anything against switch statements; I just didn't feel like writing support for them in assembly and thus M2-Planet doesn't use any but it could easily be made to support them.</span></div><div class="line" id="002816"><span class="nick" style="color:#389600"><a href="#002816" label="[00:28:16]">&lt;dgpv&gt;</a></span><span class="message">makes sense</span></div><div class="line" id="003042"><span class="nick" style="color:#389600"><a href="#003042" label="[00:30:42]">&lt;dgpv&gt;</a></span><span class="message">trivial switch statements can be trivially rewritten, and non-trivial you probably want to refactor, anyway :-)</span></div><div class="line" id="003110"><span class="nick" style="color:#8dd3c7"><a href="#003110" label="[00:31:10]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: and it is much easier to do that work in a subset of C than to do it in assembly multiple times</span></div><div class="line" id="003313"><span class="nick" style="color:#8dd3c7"><a href="#003313" label="[00:33:13]">&lt;OriansJ`&gt;</a></span><span class="message">for example having to write it for NASM assembly <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.S">https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.S</a>  as well as M1-macro assembly <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.M1">https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.M1</a> </span></div><div class="line" id="003442"><span class="nick" style="color:#8dd3c7"><a href="#003442" label="[00:34:42]">&lt;OriansJ`&gt;</a></span><span class="message">fortunately the delta between cc_x86.S and cc_amd64.S was quite small</span></div><div class="line" id="003651"><span class="nick" style="color:#389600"><a href="#003651" label="[00:36:51]">&lt;dgpv&gt;</a></span><span class="message">so this two files implement the same functionality, but with slight differences ?</span></div><div class="line" id="003653"><span class="nick" style="color:#389600"><a href="#003653" label="[00:36:53]">&lt;dgpv&gt;</a></span><span class="message">why ?</span></div><div class="line" id="003804"><span class="nick" style="color:#8dd3c7"><a href="#003804" label="[00:38:04]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: one generates AMD64 binaries and the other x86 binaries as pointers are different sizes for the 2 architectures and different instruction encoding is required in multiple places</span></div><div class="line" id="003906"><span class="nick" style="color:#389600"><a href="#003906" label="[00:39:06]">&lt;dgpv&gt;</a></span><span class="message">ah, the target is different</span></div><div class="line" id="003915"><span class="nick" style="color:#8dd3c7"><a href="#003915" label="[00:39:15]">&lt;OriansJ`&gt;</a></span><span class="message">so about 502 lines of changes total</span></div><div class="line" id="004021"><span class="nick" style="color:#8dd3c7"><a href="#004021" label="[00:40:21]">&lt;OriansJ`&gt;</a></span><span class="message">exactly</span></div><div class="line" id="004231"><span class="nick" style="color:#8dd3c7"><a href="#004231" label="[00:42:31]">&lt;OriansJ`&gt;</a></span><span class="message">essentially I am eliminating every single possible issue that could possibly impact the trust of the bootstrap (include bios/firmware/Operating system/hardware/etc)</span></div><div class="line" id="004325"><span class="nick" style="color:#389600"><a href="#004325" label="[00:43:25]">&lt;dgpv&gt;</a></span><span class="message">it could be possible to break these files into parts and reuse the parts that are not target-dependent</span></div><div class="line" id="004340"><span class="nick" style="color:#389600"><a href="#004340" label="[00:43:40]">&lt;dgpv&gt;</a></span><span class="message">why not? simplicity of audit ?</span></div><div class="line" id="004442"><span class="nick" style="color:#389600"><a href="#004442" label="[00:44:42]">&lt;dgpv&gt;</a></span><span class="message">well, you would need translation from M1 to nasm of course</span></div><div class="line" id="004524"><span class="nick" style="color:#389600"><a href="#004524" label="[00:45:24]">&lt;dgpv&gt;</a></span><span class="message">probably too much to bother, but that is what I would probably do, I hate duplicated code :-)</span></div><div class="line" id="004538"><span class="nick" style="color:#8dd3c7"><a href="#004538" label="[00:45:38]">&lt;OriansJ`&gt;</a></span><span class="message">understandably</span></div><div class="line" id="004600"><span class="nick" style="color:#8dd3c7"><a href="#004600" label="[00:46:00]">&lt;OriansJ`&gt;</a></span><span class="message">and there is no way to mix nasm with M1-macro</span></div><div class="line" id="004627"><span class="nick" style="color:#389600"><a href="#004627" label="[00:46:27]">&lt;dgpv&gt;</a></span><span class="message">M1-macro seems simple enough to parse and translate</span></div><div class="line" id="004638"><span class="nick" style="color:#8dd3c7"><a href="#004638" label="[00:46:38]">&lt;OriansJ`&gt;</a></span><span class="message">also I've left lots of small improvements in the code base for anyone who wants to hop on the project and contribute</span></div><div class="line" id="004722"><span class="nick" style="color:#389600"><a href="#004722" label="[00:47:22]">&lt;dgpv&gt;</a></span><span class="message">yep, I know, words are cheap ;-)</span></div><div class="line" id="004729"><span class="nick" style="color:#8dd3c7"><a href="#004729" label="[00:47:29]">&lt;OriansJ`&gt;</a></span><span class="message">one can even use an alternate M1-macro definition file to convert M1-macro into nasm should one desire</span></div><div class="line" id="004833"><span class="nick" style="color:#8dd3c7"><a href="#004833" label="[00:48:33]">&lt;OriansJ`&gt;</a></span><span class="message">as one could duplicate the steps in <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  for any arbitrary hardware architecture of their choice; port M2-Planet and mescc-tools to that target and one can trivially final all hardware/bios/firmware attack vectors or code modifications.</span></div><div class="line" id="005052"><span class="nick" style="color:#389600"><a href="#005052" label="[00:50:52]">&lt;dgpv&gt;</a></span><span class="message">ok, its time to go to sleep</span></div><div class="line" id="005130"><span class="nick" style="color:#389600"><a href="#005130" label="[00:51:30]">&lt;dgpv&gt;</a></span><span class="message">bye, gentlemen !</span></div><div class="line" id="005744"><span class="nick" style="color:#8dd3c7"><a href="#005744" label="[00:57:44]">&lt;OriansJ`&gt;</a></span><span class="message">and patches are up (mes-m2 now builds without warnings)</span></div><div class="line" id="022347"><span class="nick" style="color:#6d2462"><a href="#022347" label="[02:23:47]">&lt;Hagfish&gt;</a></span><span class="message">a clean mes-m2 build sounds fantastic</span></div><div class="line" id="035128"><span class="nick" style="color:#2e2a4a"><a href="#035128" label="[03:51:28]">&lt;xentrac&gt;</a></span><span class="message">yeah, congratulations on that!</span></div><div class="line" id="111745"><span class="nick" style="color:#389600"><a href="#111745" label="[11:17:45]">&lt;dgpv&gt;</a></span><span class="message">ISA_HEX_Map.org lists `** Bit optimization group` commands that are of 4 bytes length</span></div><div class="line" id="111915"><span class="nick" style="color:#389600"><a href="#111915" label="[11:19:15]">&lt;dgpv&gt;</a></span><span class="message">but High_level_prototypes/asm.c is only able to encode long,  6-byte forms  `setExpression(p, &quot;ORI&quot;, &quot;E100B1&quot;, 6);`</span></div><div class="line" id="112254"><span class="nick" style="color:#389600"><a href="#112254" label="[11:22:54]">&lt;dgpv&gt;</a></span><span class="message">Is it just an inconsistency in ISA_HEX_Map.org file, and ORI, ANDI etc should have been specified with `E1 00` prefix ?</span></div><div class="line" id="112518"><span class="nick" style="color:#389600"><a href="#112518" label="[11:25:18]">&lt;dgpv&gt;</a></span><span class="message">these short instructions are not implemented in vm, and long forms are not documented in ISA_HEX_Map.org</span></div><div class="line" id="112531"><span class="nick" style="color:#389600"><a href="#112531" label="[11:25:31]">&lt;dgpv&gt;</a></span><span class="message">what is inconsistent here, the doc or implementation ?</span></div><div class="line" id="121417"><span class="nick" style="color:#389600"><a href="#121417" label="[12:14:17]">&lt;dgpv&gt;</a></span><span class="message">probably the doc should list ORI/ANDI/... under 2OPI group</span></div><div class="line" id="132423"><span class="nick">***</span><span class="message notice">ng0 is now known as Guest59160</span></div><div class="line" id="132423"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="153324"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><br /></div></body></html>