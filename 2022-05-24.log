<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000102"><span class="nick" style="color:#389600"><a href="#000102" label="[00:01:02]">&lt;stikonas&gt;</a></span><span class="message">although this is only a problem if user namespaces are not enabled</span></div><div class="line" id="000557"><span class="nick" style="color:#8dd3c7"><a href="#000557" label="[00:05:57]">&lt;doras&gt;</a></span><span class="message">Or even add a small helper Python script to execute the two bootstraps.</span></div><div class="line" id="000615"><span class="nick" style="color:#389600"><a href="#000615" label="[00:06:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, we can first merge this PR and then think</span></div><div class="line" id="000620"><span class="nick" style="color:#389600"><a href="#000620" label="[00:06:20]">&lt;stikonas&gt;</a></span><span class="message">if we even want to change</span></div><div class="line" id="000632"><span class="nick" style="color:#389600"><a href="#000632" label="[00:06:32]">&lt;stikonas&gt;</a></span><span class="message">but I guess fix tmpdir stuff first</span></div><div class="line" id="000649"><span class="nick" style="color:#8dd3c7"><a href="#000649" label="[00:06:49]">&lt;doras&gt;</a></span><span class="message">I agree, it's definitely acceptable as it is.</span></div><div class="line" id="000658"><span class="nick" style="color:#389600"><a href="#000658" label="[00:06:58]">&lt;stikonas&gt;</a></span><span class="message">I'm approaching and of sysa, will soon know if transition works</span></div><div class="line" id="000702"><span class="nick" style="color:#8dd3c7"><a href="#000702" label="[00:07:02]">&lt;doras&gt;</a></span><span class="message">I worked hard to get it working well ðŸ˜…</span></div><div class="line" id="000724"><span class="nick" style="color:#389600"><a href="#000724" label="[00:07:24]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, it's very nice not to need root for bootstrapping</span></div><div class="line" id="000802"><span class="nick" style="color:#389600"><a href="#000802" label="[00:08:02]">&lt;stikonas&gt;</a></span><span class="message">I was at some point thinking of putting it into rootless podman</span></div><div class="line" id="000807"><span class="nick" style="color:#389600"><a href="#000807" label="[00:08:07]">&lt;stikonas&gt;</a></span><span class="message">but I guess bwrap does the job too</span></div><div class="line" id="000943"><span class="nick" style="color:#8dd3c7"><a href="#000943" label="[00:09:43]">&lt;doras&gt;</a></span><span class="message">I like the simplicity of bwrap.</span></div><div class="line" id="001144"><span class="nick" style="color:#8dd3c7"><a href="#001144" label="[00:11:44]">&lt;doras&gt;</a></span><span class="message">But we'll have to be more careful with permissions. Not actually being root means the kernel does put additional limits on things.</span></div><div class="line" id="001317"><span class="nick" style="color:#389600"><a href="#001317" label="[00:13:17]">&lt;stikonas&gt;</a></span><span class="message">ok, I'm now in sysc, it seems to work</span></div><div class="line" id="001342"><span class="nick" style="color:#8dd3c7"><a href="#001342" label="[00:13:42]">&lt;doras&gt;</a></span><span class="message">Nice :)</span></div><div class="line" id="001406"><span class="nick" style="color:#8dd3c7"><a href="#001406" label="[00:14:06]">&lt;doras&gt;</a></span><span class="message">Is this in the suid + sudo mode, or unprivileged namespaces mode?</span></div><div class="line" id="002326"><span class="nick" style="color:#8dd3c7"><a href="#002326" label="[00:23:26]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: I think bwrap disallows non-root users from gaining capabilities using as a security measure.</span></div><div class="line" id="002431"><span class="nick" style="color:#8dd3c7"><a href="#002431" label="[00:24:31]">&lt;doras&gt;</a></span><span class="message">using it*</span></div><div class="line" id="002525"><span class="nick" style="color:#389600"><a href="#002525" label="[00:25:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's why I was surprised when you said that most distros enable suid for it</span></div><div class="line" id="002616"><span class="nick" style="color:#8dd3c7"><a href="#002616" label="[00:26:16]">&lt;doras&gt;</a></span><span class="message">I said that most enable user namespaces.</span></div><div class="line" id="002946"><span class="nick" style="color:#8dd3c7"><a href="#002946" label="[00:29:46]">&lt;doras&gt;</a></span><span class="message">Gaining capabilities in a user namespace is less of a security concern because you are given these capabilities in a confined environment.</span></div><div class="line" id="003328"><span class="nick" style="color:#8dd3c7"><a href="#003328" label="[00:33:28]">&lt;doras&gt;</a></span><span class="message">Unlike getting them in the context of the host where you can basically do anything you want.</span></div><div class="line" id="003500"><span class="nick" style="color:#8dd3c7"><a href="#003500" label="[00:35:00]">&lt;doras&gt;</a></span><span class="message">For example, even though a user namespace can be made to &quot;lie&quot; about the user being root, outside the namespace it's still an unprivileged user.</span></div><div class="line" id="003724"><span class="nick" style="color:#8dd3c7"><a href="#003724" label="[00:37:24]">&lt;doras&gt;</a></span><span class="message">So if /etc/shadow is accessible only to the &quot;real&quot; root (i.e., the host/init root), a user namespace that maps to root will not allow a simple user to access it.</span></div><div class="line" id="003911"><span class="nick" style="color:#8dd3c7"><a href="#003911" label="[00:39:11]">&lt;doras&gt;</a></span><span class="message">User namespaces is basically either the kernel lying to user space about privileged, or allow otherwise privileged actions in a confined environment where they can't hurt anyone.</span></div><div class="line" id="003928"><span class="nick" style="color:#8dd3c7"><a href="#003928" label="[00:39:28]">&lt;doras&gt;</a></span><span class="message">or allowing&quot;</span></div><div class="line" id="004234"><span class="nick" style="color:#6b8072"><a href="#004234" label="[00:42:34]">&lt;oriansj&gt;</a></span><span class="message">mihi: I was looking at the assembly code of the sectorforth.asm when I made that statement and you are correct that it could by made out of the FORTH primitives provided (as the example FORTH programs clearly demonstrate)  [I just assumed it was essential enough to FORTH to be a primitive]</span></div><div class="line" id="014938"><span class="nick" style="color:#389600"><a href="#014938" label="[01:49:38]">&lt;stikonas&gt;</a></span><span class="message">doras: why do we need to use find_bwrap?</span></div><div class="line" id="014943"><span class="nick" style="color:#389600"><a href="#014943" label="[01:49:43]">&lt;stikonas&gt;</a></span><span class="message">I'm now looking at your last commit</span></div><div class="line" id="015035"><span class="nick" style="color:#389600"><a href="#015035" label="[01:50:35]">&lt;stikonas&gt;</a></span><span class="message">can't we rely on PATH?</span></div><div class="line" id="015107"><span class="nick" style="color:#389600"><a href="#015107" label="[01:51:07]">&lt;stikonas&gt;</a></span><span class="message">for chroot we had that shutil stuff because chroot might be in sbin which might not be in PATH</span></div><div class="line" id="031314"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="032035"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="032150"><span class="nick" style="color:#6b8072"><a href="#032150" label="[03:21:50]">&lt;oriansj&gt;</a></span><span class="message">might want to add c@ and c! to sectorForth</span></div><div class="line" id="034057"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="035220"><span class="nick" style="color:#6b8072"><a href="#035220" label="[03:52:20]">&lt;oriansj&gt;</a></span><span class="message">and I sorted out the rounding error and now donut.c builds and runs just fine: <a rel="nofollow" href="https://paste.debian.net/1241801/">https://paste.debian.net/1241801/</a>   here is the command for seeing it in all its glory: ./bin/M2-Mesoplanet --architecture amd64 -f ./donut.c -o donut &amp;&amp; ./donut</span></div><div class="line" id="035329"><span class="nick" style="color:#6b8072"><a href="#035329" label="[03:53:29]">&lt;oriansj&gt;</a></span><span class="message">(probably can remove the #include &quot;M2libc/bootstrappable.h&quot; as that was just used to add tracing and require to get things working)</span></div><div class="line" id="040250"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="042135"><span class="nick" style="color:#80b1d3"><a href="#042135" label="[04:21:35]">&lt;muurkha&gt;</a></span><span class="message">oriansj: awesome :)</span></div><div class="line" id="043411"><span class="nick">***</span><span class="message notice">roptat is now known as Guest8848</span></div><div class="line" id="052245"><span class="nick" style="color:#6b8072"><a href="#052245" label="[05:22:45]">&lt;oriansj&gt;</a></span><span class="message">and the generated M2-Mesoplanet code is just slow enough that we don't need a delay</span></div><div class="line" id="052445"><span class="nick" style="color:#80b1d3"><a href="#052445" label="[05:24:45]">&lt;muurkha&gt;</a></span><span class="message">haha</span></div><div class="line" id="052616"><span class="nick" style="color:#80b1d3"><a href="#052616" label="[05:26:16]">&lt;muurkha&gt;</a></span><span class="message">if your I/O is via key and emit, you don't ever need to store more than one byte per memory word, so you can get by without c@ and c!</span></div><div class="line" id="052636"><span class="nick" style="color:#80b1d3"><a href="#052636" label="[05:26:36]">&lt;muurkha&gt;</a></span><span class="message">in StoneKnifeForth I did implement c! but not c@ IIRC</span></div><div class="line" id="052932"><span class="nick" style="color:#6b8072"><a href="#052932" label="[05:29:32]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I was thinking of writing a block of bytes to directly execute later to add needed functionality for writing disk blocks</span></div><div class="line" id="053354"><span class="nick" style="color:#6b8072"><a href="#053354" label="[05:33:54]">&lt;oriansj&gt;</a></span><span class="message">unless you can think of a FORTH primitive for writing a block of memory to disk which would fit in the 23 remaining bytes of SectorForth</span></div><div class="line" id="053609"><span class="nick" style="color:#80b1d3"><a href="#053609" label="[05:36:09]">&lt;muurkha&gt;</a></span><span class="message">I think 23 bytes is about enough for the BIOS call to write a block of memory to disk</span></div><div class="line" id="053912"><span class="nick" style="color:#80b1d3"><a href="#053912" label="[05:39:12]">&lt;muurkha&gt;</a></span><span class="message">you can almost implement c@ and c! in SectorForth I think</span></div><div class="line" id="054018"><span class="nick" style="color:#80b1d3"><a href="#054018" label="[05:40:18]">&lt;muurkha&gt;</a></span><span class="message">well, I guess you technically can</span></div><div class="line" id="054153"><span class="nick" style="color:#80b1d3"><a href="#054153" label="[05:41:53]">&lt;muurkha&gt;</a></span><span class="message">oh, c@'s not actually as hard as I was thinking, because 8086 has unaligned access</span></div><div class="line" id="054402"><span class="nick" style="color:#80b1d3"><a href="#054402" label="[05:44:02]">&lt;muurkha&gt;</a></span><span class="message">: 2* dup + ; : 4* 2* 2* ; : 16* 4* 4* ; : 15 3 4* 3 + ; : 255 15 16* 15 + ; : and nand dup nand ; : c@ @ 255 and ;</span></div><div class="line" id="054507"><span class="nick" style="color:#80b1d3"><a href="#054507" label="[05:45:07]">&lt;muurkha&gt;</a></span><span class="message">doing c! that way requires you to load in the previous word first</span></div><div class="line" id="054652"><span class="nick" style="color:#80b1d3"><a href="#054652" label="[05:46:52]">&lt;muurkha&gt;</a></span><span class="message">I think that's : 0xff00 255 16* 16* ;  variable a  : c! a ! a @ 0xff00 and + a @ ! ;</span></div><div class="line" id="055110"><span class="nick" style="color:#6b8072"><a href="#055110" label="[05:51:10]">&lt;oriansj&gt;</a></span><span class="message">good point muurkha</span></div><div class="line" id="055250"><span class="nick" style="color:#6b8072"><a href="#055250" label="[05:52:50]">&lt;oriansj&gt;</a></span><span class="message">and it now takes on average more than 4 days of fuzzing to find a segfault in M2-Planet</span></div><div class="line" id="055435"><span class="nick" style="color:#80b1d3"><a href="#055435" label="[05:54:35]">&lt;muurkha&gt;</a></span><span class="message">that's a sort of progress</span></div><div class="line" id="055755"><span class="nick" style="color:#6b8072"><a href="#055755" label="[05:57:55]">&lt;oriansj&gt;</a></span><span class="message">right now one needs to write very obviously wrong code to have a chance at segfaulting M2-Planet</span></div><div class="line" id="082517"><span class="nick" style="color:#8dd3c7"><a href="#082517" label="[08:25:17]">&lt;doras&gt;</a></span><span class="message">stikonas: I followed what we had in the chroot mode. I wasn't familiar with the reasoning behind find_chroot. I think we can rely on the PATH, yes.</span></div><div class="line" id="093904"><span class="nick" style="color:#8dd3c7"><a href="#093904" label="[09:39:04]">&lt;doras&gt;</a></span><span class="message">stikonas: regarding the removal of tmp and sysc/tmp, do you think it should happen before the bootstrap starts or after it ends?</span></div><div class="line" id="094015"><span class="nick" style="color:#8dd3c7"><a href="#094015" label="[09:40:15]">&lt;doras&gt;</a></span><span class="message">The tmpfs mounts are currently removed when the bootstrap ends, so to match the behavior it would make sense to also remove the non-tmpfs directories when the bootstrap ends.</span></div><div class="line" id="095451"><span class="nick" style="color:#8dd3c7"><a href="#095451" label="[09:54:51]">&lt;doras&gt;</a></span><span class="message">It looks like del() isn't called on bootstrap failure or Ctrl+C in the bwrap mode for some reason. I'll need to take a look at it later.</span></div><div class="line" id="095505"><span class="nick" style="color:#8dd3c7"><a href="#095505" label="[09:55:05]">&lt;doras&gt;</a></span><span class="message">`__del__()`</span></div><div class="line" id="095808"><span class="nick" style="color:#8dd3c7"><a href="#095808" label="[09:58:08]">&lt;doras&gt;</a></span><span class="message">If I had to guess, the chroot command probably returns 0 in such a case, while the bwrap command forwards the return code of the failing bootstrap.</span></div><div class="line" id="095826"><span class="nick" style="color:#8dd3c7"><a href="#095826" label="[09:58:26]">&lt;doras&gt;</a></span><span class="message">Which is probably non-0.</span></div><div class="line" id="102532"><span class="nick" style="color:#6d2462"><a href="#102532" label="[10:25:32]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: not sure when we should remove it, maybe fossy has any thoughts</span></div><div class="line" id="102603"><span class="nick" style="color:#6d2462"><a href="#102603" label="[10:26:03]">&lt;stikonas[m]&gt;</a></span><span class="message">well, tmp/sysc is actually not very useful to keep, but tmp/ is...</span></div><div class="line" id="102846"><span class="nick" style="color:#6d2462"><a href="#102846" label="[10:28:46]">&lt;stikonas[m]&gt;</a></span><span class="message">although eventually you want to add an option --do-not-exit, so maybe then we would keep it, otherwise delete</span></div><div class="line" id="111245"><span class="nick" style="color:#234e69"><a href="#111245" label="[11:12:45]">&lt;mihi&gt;</a></span><span class="message">oriansj, I just noticed that the source code for the bootstrap seeds in bootstrap-seeds and in stage0-posix-x86 directory are slightly different (both of them) - is that intentional? :D</span></div><div class="line" id="112156"><span class="nick" style="color:#389600"><a href="#112156" label="[11:21:56]">&lt;stikonas&gt;</a></span><span class="message">mihi: no, not intentional, probably got out of sync</span></div><div class="line" id="112252"><span class="nick" style="color:#389600"><a href="#112252" label="[11:22:52]">&lt;stikonas&gt;</a></span><span class="message">only one comment is different</span></div><div class="line" id="112403"><span class="nick" style="color:#389600"><a href="#112403" label="[11:24:03]">&lt;stikonas&gt;</a></span><span class="message">mihi: for kaem the good comment should be &quot;kaem.x86&quot;</span></div><div class="line" id="112449"><span class="nick" style="color:#389600"><a href="#112449" label="[11:24:49]">&lt;stikonas&gt;</a></span><span class="message">oh for kaem it's not just comment</span></div><div class="line" id="112459"><span class="nick" style="color:#389600"><a href="#112459" label="[11:24:59]">&lt;stikonas&gt;</a></span><span class="message">but the one in bootstrap-seeds is the updated one</span></div><div class="line" id="112629"><span class="nick" style="color:#389600"><a href="#112629" label="[11:26:29]">&lt;stikonas&gt;</a></span><span class="message">for hex0 I think it's vice versa</span></div><div class="line" id="112655"><span class="nick" style="color:#389600"><a href="#112655" label="[11:26:55]">&lt;stikonas&gt;</a></span><span class="message">mihi, can you make PRs to sync them back?</span></div><div class="line" id="112936"><span class="nick" style="color:#234e69"><a href="#112936" label="[11:29:36]">&lt;mihi&gt;</a></span><span class="message">so sync the ones in stage0-posix-x86 so that they match the content in bootstrap-seeds? sure.</span></div><div class="line" id="113308"><span class="nick" style="color:#234e69"><a href="#113308" label="[11:33:08]">&lt;mihi&gt;</a></span><span class="message">(or make PRs to both repos and also fix the typo on the &quot;new&quot; line in hex0?)</span></div><div class="line" id="113312"><span class="nick" style="color:#234e69"><a href="#113312" label="[11:33:12]">&lt;mihi&gt;</a></span><span class="message">s/none/no one/</span></div><div class="line" id="113904"><span class="nick" style="color:#389600"><a href="#113904" label="[11:39:04]">&lt;stikonas&gt;</a></span><span class="message">well, basically copy kaem-minimal  source from bootstrap-seeds to stage0-posix-x86</span></div><div class="line" id="113917"><span class="nick" style="color:#389600"><a href="#113917" label="[11:39:17]">&lt;stikonas&gt;</a></span><span class="message">but hex0 source from stage0-posix-x86 to bootstrap-seeds</span></div><div class="line" id="113929"><span class="nick" style="color:#389600"><a href="#113929" label="[11:39:29]">&lt;stikonas&gt;</a></span><span class="message">(that's my impression from reading git history)</span></div><div class="line" id="114009"><span class="nick" style="color:#389600"><a href="#114009" label="[11:40:09]">&lt;stikonas&gt;</a></span><span class="message">and yes, if you fix further types, commit to both repos</span></div><div class="line" id="114431"><span class="nick" style="color:#234e69"><a href="#114431" label="[11:44:31]">&lt;mihi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86/pull/2">https://github.com/oriansj/stage0-posix-x86/pull/2</a>  &amp;&amp; <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/17">https://github.com/oriansj/bootstrap-seeds/pull/17</a> </span></div><div class="line" id="114916"><span class="nick" style="color:#234e69"><a href="#114916" label="[11:49:16]">&lt;mihi&gt;</a></span><span class="message">also, I noticed that stage0-posix-x86 repo has no tags? I'd like to shallow clone it as part of CI, so I'd have to go the long init &amp; fetch route instead of clone --depth=1 (which works for tags but not for commithashes)</span></div><div class="line" id="115108"><span class="nick" style="color:#8dd3c7"><a href="#115108" label="[11:51:08]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: we actually already have a command argument that determines if tmp should be removed or not after the bootstrap ends. So I think the bwrap mode should act accordingly.</span></div><div class="line" id="115141"><span class="nick" style="color:#8dd3c7"><a href="#115141" label="[11:51:41]">&lt;doras&gt;</a></span><span class="message">That is, remove tmp when the bootstrap ends if the argument wasn't used.</span></div><div class="line" id="115327"><span class="nick" style="color:#8dd3c7"><a href="#115327" label="[11:53:27]">&lt;doras&gt;</a></span><span class="message">But first I'll need to find some time to look into the exit code thing.</span></div><div class="line" id="115349"><span class="nick" style="color:#389600"><a href="#115349" label="[11:53:49]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I almost forgot about it</span></div><div class="line" id="115515"><span class="nick" style="color:#389600"><a href="#115515" label="[11:55:15]">&lt;stikonas&gt;</a></span><span class="message">doras: though that said, I think we can always unmount sysc/tmp even before bootstrap begins</span></div><div class="line" id="115531"><span class="nick" style="color:#389600"><a href="#115531" label="[11:55:31]">&lt;stikonas&gt;</a></span><span class="message">as it's always fully coppied into sysa</span></div><div class="line" id="141636"><span class="nick" style="color:#234e69"><a href="#141636" label="[14:16:36]">&lt;mihi&gt;</a></span><span class="message">what is your opinion about using ^L (\f) in source code files? I know that some GNU projects use it on its own line, but mescc-tools-extra/makefile even uses it in the middle of a line...</span></div><div class="line" id="142410"><span class="nick" style="color:#234e69"><a href="#142410" label="[14:24:10]">&lt;mihi&gt;</a></span><span class="message">mescc-tools too...</span></div><div class="line" id="142412"><span class="nick" style="color:#80b1d3"><a href="#142412" label="[14:24:12]">&lt;muurkha&gt;</a></span><span class="message">I think of ^L as ending a line, since whatever comes after it prints on a new page, but I don't actually remember if printers go back to the beginning of the line when they eject a page in response to ^L</span></div><div class="line" id="142451"><span class="nick" style="color:#234e69"><a href="#142451" label="[14:24:51]">&lt;mihi&gt;</a></span><span class="message">the terminal does start on a new line when catting such a file, after clearing the screen.</span></div><div class="line" id="142530"><span class="nick" style="color:#80b1d3"><a href="#142530" label="[14:25:30]">&lt;muurkha&gt;</a></span><span class="message">that is true, though it is not really desirable behavior :)</span></div><div class="line" id="142711"><span class="nick" style="color:#234e69"><a href="#142711" label="[14:27:11]">&lt;mihi&gt;</a></span><span class="message">seems to depend on the terminal emulator. In PuTTY, it acts as I wrote before, linux framebuffer console will indent the new line (i.e. does not return the carriage).</span></div><div class="line" id="142730"><span class="nick" style="color:#80b1d3"><a href="#142730" label="[14:27:30]">&lt;muurkha&gt;</a></span><span class="message">interesting!</span></div><div class="line" id="142740"><span class="nick" style="color:#234e69"><a href="#142740" label="[14:27:40]">&lt;mihi&gt;</a></span><span class="message">echo -e 'X\014Y'</span></div><div class="line" id="142816"><span class="nick" style="color:#80b1d3"><a href="#142816" label="[14:28:16]">&lt;muurkha&gt;</a></span><span class="message">gnome-terminal puts Y indented on its own line</span></div><div class="line" id="142853"><span class="nick" style="color:#80b1d3"><a href="#142853" label="[14:28:53]">&lt;muurkha&gt;</a></span><span class="message">as does xterm</span></div><div class="line" id="142900"><span class="nick" style="color:#234e69"><a href="#142900" label="[14:29:00]">&lt;mihi&gt;</a></span><span class="message">so PuTTY is &quot;the odd one out&quot;.</span></div><div class="line" id="142930"><span class="nick" style="color:#80b1d3"><a href="#142930" label="[14:29:30]">&lt;muurkha&gt;</a></span><span class="message">that is, they don't even clear the screen; they just treat it as ^J</span></div><div class="line" id="143014"><span class="nick" style="color:#80b1d3"><a href="#143014" label="[14:30:14]">&lt;muurkha&gt;</a></span><span class="message">(but the Linux terminal driver doesn't add a ^M to ^L the way it does to ^J when stty onlcr is set)</span></div><div class="line" id="143237"><span class="nick" style="color:#80b1d3"><a href="#143237" label="[14:32:37]">&lt;muurkha&gt;</a></span><span class="message">more surprisingly gnome-terminal (libvte) also handles ^K (\v, VT) the same way</span></div><div class="line" id="151005"><span class="nick" style="color:#234e69"><a href="#151005" label="[15:10:05]">&lt;mihi&gt;</a></span><span class="message">Hmm. When I try to build sha256sum with M2-Mesoplanet, while parsing &lt;sys/stat.h&gt; it complains about missing &lt;amd64/linux/sys/stat.c&gt;? The file is not there as I deleted all other archs from M2libc, but why does it try to read a file that is #ifdef'ed out?</span></div><div class="line" id="151026"><span class="nick" style="color:#234e69"><a href="#151026" label="[15:10:26]">&lt;mihi&gt;</a></span><span class="message">(architecture x86 btw)</span></div><div class="line" id="151531"><span class="nick" style="color:#389600"><a href="#151531" label="[15:15:31]">&lt;stikonas&gt;</a></span><span class="message">mihi: because it's not smart enough</span></div><div class="line" id="151540"><span class="nick" style="color:#389600"><a href="#151540" label="[15:15:40]">&lt;stikonas&gt;</a></span><span class="message">patches are welcome</span></div><div class="line" id="151552"><span class="nick" style="color:#234e69"><a href="#151552" label="[15:15:52]">&lt;mihi&gt;</a></span><span class="message">so, M2-Mesoplanet does not resolve #ifdefs?</span></div><div class="line" id="151553"><span class="nick" style="color:#389600"><a href="#151553" label="[15:15:53]">&lt;stikonas&gt;</a></span><span class="message">but until recently there was no #include support at all</span></div><div class="line" id="151606"><span class="nick" style="color:#389600"><a href="#151606" label="[15:16:06]">&lt;stikonas&gt;</a></span><span class="message">mihi: it does, but includes might be resolved first</span></div><div class="line" id="151619"><span class="nick" style="color:#389600"><a href="#151619" label="[15:16:19]">&lt;stikonas&gt;</a></span><span class="message">oriansj implemented it</span></div><div class="line" id="151623"><span class="nick" style="color:#389600"><a href="#151623" label="[15:16:23]">&lt;stikonas&gt;</a></span><span class="message">there might be some reason behind it</span></div><div class="line" id="151715"><span class="nick" style="color:#234e69"><a href="#151715" label="[15:17:15]">&lt;mihi&gt;</a></span><span class="message">ah ok. Probably fine as long as you don't do &quot;#ifndef HAVE_BAR #include BAR #endif&quot; in FOO and &quot;#ifndef HAVE_FOO #include FOO #endif&quot; in BAR :)</span></div><div class="line" id="185527"><span class="nick" style="color:#6b8072"><a href="#185527" label="[18:55:27]">&lt;oriansj&gt;</a></span><span class="message">mihi: the reason why M2-Mesoplanet tries to read all #includes is because the logic for filtering out the #includes would require a major rewrite in the cc_reader.c and cc_macro.c as you would have to do macro evaluation evaluation on every token and not have any look-head but have to drive reading of new tokens.</span></div><div class="line" id="185622"><span class="nick" style="color:#6b8072"><a href="#185622" label="[18:56:22]">&lt;oriansj&gt;</a></span><span class="message">basically a bunch of work with only the minor advantage of reading less source code files. (small performance improvement)</span></div><div class="line" id="185657"><span class="nick" style="color:#6b8072"><a href="#185657" label="[18:56:57]">&lt;oriansj&gt;</a></span><span class="message">(I'll review your pull requestes as soon as I get out of work)</span></div><div class="line" id="190038"><span class="nick" style="color:#6c3d55"><a href="#190038" label="[19:00:38]">&lt;stikonas_&gt;</a></span><span class="message">I've already merged one PR</span></div><div class="line" id="190042"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="190051"><span class="nick" style="color:#389600"><a href="#190051" label="[19:00:51]">&lt;stikonas&gt;</a></span><span class="message">the one from stage0-posix-x86</span></div><div class="line" id="190105"><span class="nick" style="color:#6b8072"><a href="#190105" label="[19:01:05]">&lt;oriansj&gt;</a></span><span class="message">thank you stikonas</span></div><div class="line" id="190127"><span class="nick" style="color:#389600"><a href="#190127" label="[19:01:27]">&lt;stikonas&gt;</a></span><span class="message">bootstrap seeds looks fine too, but you'll have to merge it yourself</span></div><div class="line" id="190134"><span class="nick" style="color:#389600"><a href="#190134" label="[19:01:34]">&lt;stikonas&gt;</a></span><span class="message">it's just a change in comment</span></div><div class="line" id="193210"><span class="nick" style="color:#389600"><a href="#193210" label="[19:32:10]">&lt;stikonas&gt;</a></span><span class="message">doras: I think I might have found the bug in my PR that was causing change in checksums</span></div><div class="line" id="193550"><span class="nick" style="color:#389600"><a href="#193550" label="[19:35:50]">&lt;stikonas&gt;</a></span><span class="message">return statement that I added means we end up in slightly different environment</span></div><div class="line" id="193605"><span class="nick" style="color:#389600"><a href="#193605" label="[19:36:05]">&lt;stikonas&gt;</a></span><span class="message">though I don't fully understand it</span></div><div class="line" id="200057"><span class="nick" style="color:#389600"><a href="#200057" label="[20:00:57]">&lt;stikonas&gt;</a></span><span class="message">oh actually it was a different bug...</span></div><div class="line" id="200127"><span class="nick" style="color:#389600"><a href="#200127" label="[20:01:27]">&lt;stikonas&gt;</a></span><span class="message">you can't use command; rval=$? with set -e</span></div><div class="line" id="213647"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="214812"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="215828"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="223736"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><br /></div></body></html>