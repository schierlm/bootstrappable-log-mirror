<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001449"><span class="nick" style="color:#389600"><a href="#001449" label="[00:14:49]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: i tested compiling with mes and the time with an if and a case is exactly the same</span></div><div class="line" id="001456"><span class="nick" style="color:#389600"><a href="#001456" label="[00:14:56]">&lt;ekaitz&gt;</a></span><span class="message">but i'll try something longer just in case</span></div><div class="line" id="001526"><span class="nick" style="color:#8dd3c7"><a href="#001526" label="[00:15:26]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: mes might be the same, but it would be good to try mes-m2...</span></div><div class="line" id="001537"><span class="nick" style="color:#8dd3c7"><a href="#001537" label="[00:15:37]">&lt;stikonas&gt;</a></span><span class="message">but you'll have to build it manually using new M2-Planet...</span></div><div class="line" id="001548"><span class="nick" style="color:#8dd3c7"><a href="#001548" label="[00:15:48]">&lt;stikonas&gt;</a></span><span class="message">oh, actually just use M2-Planet</span></div><div class="line" id="001551"><span class="nick" style="color:#8dd3c7"><a href="#001551" label="[00:15:51]">&lt;stikonas&gt;</a></span><span class="message">not mes-m2...</span></div><div class="line" id="001557"><span class="nick" style="color:#8dd3c7"><a href="#001557" label="[00:15:57]">&lt;stikonas&gt;</a></span><span class="message">(since we haven't fixed mes.c yet)</span></div><div class="line" id="001607"><span class="nick" style="color:#8dd3c7"><a href="#001607" label="[00:16:07]">&lt;stikonas&gt;</a></span><span class="message">perhaps only bootstrap step could be faster</span></div><div class="line" id="001730"><span class="nick" style="color:#389600"><a href="#001730" label="[00:17:30]">&lt;ekaitz&gt;</a></span><span class="message">what it's very slow is the mes execution</span></div><div class="line" id="001737"><span class="nick" style="color:#389600"><a href="#001737" label="[00:17:37]">&lt;ekaitz&gt;</a></span><span class="message">so we might want to check other things too</span></div><div class="line" id="001807"><span class="nick" style="color:#8dd3c7"><a href="#001807" label="[00:18:07]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: well, one thing is I/O</span></div><div class="line" id="001812"><span class="nick" style="color:#8dd3c7"><a href="#001812" label="[00:18:12]">&lt;stikonas&gt;</a></span><span class="message">mescc does it byte by byte</span></div><div class="line" id="001828"><span class="nick" style="color:#8dd3c7"><a href="#001828" label="[00:18:28]">&lt;stikonas&gt;</a></span><span class="message">it's definitely slow, but I don't know if that's bottleneck</span></div><div class="line" id="001834"><span class="nick" style="color:#389600"><a href="#001834" label="[00:18:34]">&lt;ekaitz&gt;</a></span><span class="message">oh! in large things it's like a 10% of improvement!</span></div><div class="line" id="001848"><span class="nick" style="color:#8dd3c7"><a href="#001848" label="[00:18:48]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: oh, even 10% would still be good</span></div><div class="line" id="002103"><span class="nick" style="color:#389600"><a href="#002103" label="[00:21:03]">&lt;ekaitz&gt;</a></span><span class="message">it's not a very big difference and I made MANY iterations</span></div><div class="line" id="002111"><span class="nick" style="color:#389600"><a href="#002111" label="[00:21:11]">&lt;ekaitz&gt;</a></span><span class="message">in 3 seconds i can see some difference</span></div><div class="line" id="002120"><span class="nick" style="color:#389600"><a href="#002120" label="[00:21:20]">&lt;ekaitz&gt;</a></span><span class="message">mes being a very long run might benefit more from this</span></div><div class="line" id="002134"><span class="nick" style="color:#8dd3c7"><a href="#002134" label="[00:21:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, mes can easily run for 10 minutes even on x86</span></div><div class="line" id="002145"><span class="nick" style="color:#8dd3c7"><a href="#002145" label="[00:21:45]">&lt;stikonas&gt;</a></span><span class="message">and if we go down to 9, that would be good</span></div><div class="line" id="002216"><span class="nick" style="color:#389600"><a href="#002216" label="[00:22:16]">&lt;ekaitz&gt;</a></span><span class="message">there are many weird if's in the eval-apply.c file</span></div><div class="line" id="002404"><span class="nick" style="color:#8dd3c7"><a href="#002404" label="[00:24:04]">&lt;stikonas&gt;</a></span><span class="message">and calgrind showed that we spend significant amount of time in eval-apply()</span></div><div class="line" id="002752"><span class="nick" style="color:#389600"><a href="#002752" label="[00:27:52]">&lt;ekaitz&gt;</a></span><span class="message">i can try to make some changes but then this must be tested thoroughly</span></div><div class="line" id="002801"><span class="nick" style="color:#389600"><a href="#002801" label="[00:28:01]">&lt;ekaitz&gt;</a></span><span class="message">i'd also like to have the other riscv issues fixed</span></div><div class="line" id="003957"><span class="nick" style="color:#389600"><a href="#003957" label="[00:39:57]">&lt;ekaitz&gt;</a></span><span class="message">oh it's doing some struct =&gt; int conversion</span></div><div class="line" id="004001"><span class="nick" style="color:#389600"><a href="#004001" label="[00:40:01]">&lt;ekaitz&gt;</a></span><span class="message">this is really cool stuf</span></div><div class="line" id="004031"><span class="nick" style="color:#389600"><a href="#004031" label="[00:40:31]">&lt;ekaitz&gt;</a></span><span class="message">i learned this week you can treat structs as their first fields</span></div><div class="line" id="004311"><span class="nick" style="color:#2e2a4a"><a href="#004311" label="[00:43:11]">&lt;fossy&gt;</a></span><span class="message">yeah because of how structs are placed in memory, it is a neat trick</span></div><div class="line" id="004600"><span class="nick" style="color:#389600"><a href="#004600" label="[00:46:00]">&lt;ekaitz&gt;</a></span><span class="message">yeah!</span></div><div class="line" id="004609"><span class="nick" style="color:#389600"><a href="#004609" label="[00:46:09]">&lt;ekaitz&gt;</a></span><span class="message">also i don't think cases can fit here very well</span></div><div class="line" id="004613"><span class="nick" style="color:#8dd3c7"><a href="#004613" label="[00:46:13]">&lt;stikonas&gt;</a></span><span class="message">which program is doing struct =&gt; int?</span></div><div class="line" id="004620"><span class="nick" style="color:#389600"><a href="#004620" label="[00:46:20]">&lt;ekaitz&gt;</a></span><span class="message">eval-apply</span></div><div class="line" id="004622"><span class="nick" style="color:#389600"><a href="#004622" label="[00:46:22]">&lt;ekaitz&gt;</a></span><span class="message">i think</span></div><div class="line" id="004626"><span class="nick" style="color:#8dd3c7"><a href="#004626" label="[00:46:26]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="004635"><span class="nick" style="color:#389600"><a href="#004635" label="[00:46:35]">&lt;ekaitz&gt;</a></span><span class="message">oh not really</span></div><div class="line" id="004640"><span class="nick" style="color:#389600"><a href="#004640" label="[00:46:40]">&lt;ekaitz&gt;</a></span><span class="message">finally all are pointers...</span></div><div class="line" id="004648"><span class="nick" style="color:#389600"><a href="#004648" label="[00:46:48]">&lt;ekaitz&gt;</a></span><span class="message">it's pretty bad dude</span></div><div class="line" id="004708"><span class="nick" style="color:#389600"><a href="#004708" label="[00:47:08]">&lt;ekaitz&gt;</a></span><span class="message">i thought all the cell_ things were integers after all but they are not</span></div><div class="line" id="004721"><span class="nick" style="color:#389600"><a href="#004721" label="[00:47:21]">&lt;ekaitz&gt;</a></span><span class="message">they are pointers</span></div><div class="line" id="004735"><span class="nick" style="color:#389600"><a href="#004735" label="[00:47:35]">&lt;ekaitz&gt;</a></span><span class="message">so we need to do some magic against them to put them in a switch/case</span></div><div class="line" id="004911"><span class="nick" style="color:#389600"><a href="#004911" label="[00:49:11]">&lt;ekaitz&gt;</a></span><span class="message">can i just go intptr_t? is this too much?</span></div><div class="line" id="005008"><span class="nick" style="color:#389600"><a href="#005008" label="[00:50:08]">&lt;ekaitz&gt;</a></span><span class="message">symbol.c is the problem here</span></div><div class="line" id="005726"><span class="nick" style="color:#389600"><a href="#005726" label="[00:57:26]">&lt;ekaitz&gt;</a></span><span class="message">oh stikonas the largest if block won't work</span></div><div class="line" id="005920"><span class="nick" style="color:#8dd3c7"><a href="#005920" label="[00:59:20]">&lt;stikonas&gt;</a></span><span class="message">due to pointers?</span></div><div class="line" id="010255"><span class="nick" style="color:#8dd3c7"><a href="#010255" label="[01:02:55]">&lt;stikonas&gt;</a></span><span class="message">sigh, that eval_apply is pretty scary...</span></div><div class="line" id="010704"><span class="nick" style="color:#389600"><a href="#010704" label="[01:07:04]">&lt;ekaitz&gt;</a></span><span class="message">nah don't worry</span></div><div class="line" id="010750"><span class="nick" style="color:#389600"><a href="#010750" label="[01:07:50]">&lt;ekaitz&gt;</a></span><span class="message">look it generates symbols and then uses them as values</span></div><div class="line" id="010755"><span class="nick" style="color:#389600"><a href="#010755" label="[01:07:55]">&lt;ekaitz&gt;</a></span><span class="message">to be able to deal with them in scheme</span></div><div class="line" id="010812"><span class="nick" style="color:#389600"><a href="#010812" label="[01:08:12]">&lt;ekaitz&gt;</a></span><span class="message">the problem that has is it's comparing structs</span></div><div class="line" id="010822"><span class="nick" style="color:#389600"><a href="#010822" label="[01:08:22]">&lt;ekaitz&gt;</a></span><span class="message">just checking if they are equal</span></div><div class="line" id="010825"><span class="nick" style="color:#389600"><a href="#010825" label="[01:08:25]">&lt;ekaitz&gt;</a></span><span class="message">a == b</span></div><div class="line" id="010927"><span class="nick" style="color:#389600"><a href="#010927" label="[01:09:27]">&lt;ekaitz&gt;</a></span><span class="message">and that's not optimal in any case</span></div><div class="line" id="011129"><span class="nick" style="color:#8dd3c7"><a href="#011129" label="[01:11:29]">&lt;stikonas&gt;</a></span><span class="message">I'm surprised that even works..</span></div><div class="line" id="011135"><span class="nick" style="color:#8dd3c7"><a href="#011135" label="[01:11:35]">&lt;stikonas&gt;</a></span><span class="message">especially in M2-Planet...</span></div><div class="line" id="011207"><span class="nick" style="color:#8dd3c7"><a href="#011207" label="[01:12:07]">&lt;stikonas&gt;</a></span><span class="message">or are we comparing pointers to structs?</span></div><div class="line" id="011301"><span class="nick" style="color:#8dd3c7"><a href="#011301" label="[01:13:01]">&lt;stikonas&gt;</a></span><span class="message">ok, poitners to stcruts comparison would work in M2</span></div><div class="line" id="011339"><span class="nick" style="color:#389600"><a href="#011339" label="[01:13:39]">&lt;ekaitz&gt;</a></span><span class="message">pointers to pointers</span></div><div class="line" id="011433"><span class="nick" style="color:#389600"><a href="#011433" label="[01:14:33]">&lt;ekaitz&gt;</a></span><span class="message">it's not the best i think</span></div><div class="line" id="011455"><span class="nick" style="color:#389600"><a href="#011455" label="[01:14:55]">&lt;ekaitz&gt;</a></span><span class="message">the symbols are allocated and stored in memory</span></div><div class="line" id="011507"><span class="nick" style="color:#389600"><a href="#011507" label="[01:15:07]">&lt;ekaitz&gt;</a></span><span class="message">and then we compare against them</span></div><div class="line" id="011513"><span class="nick" style="color:#389600"><a href="#011513" label="[01:15:13]">&lt;ekaitz&gt;</a></span><span class="message">it's pretty easy to read</span></div><div class="line" id="011754"><span class="nick" style="color:#389600"><a href="#011754" label="[01:17:54]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: i have my starfive running for 1 day with no output in the terminal</span></div><div class="line" id="011759"><span class="nick" style="color:#389600"><a href="#011759" label="[01:17:59]">&lt;ekaitz&gt;</a></span><span class="message">stuck in stack.c</span></div><div class="line" id="011806"><span class="nick" style="color:#389600"><a href="#011806" label="[01:18:06]">&lt;ekaitz&gt;</a></span><span class="message">is this normal?</span></div><div class="line" id="011815"><span class="nick" style="color:#389600"><a href="#011815" label="[01:18:15]">&lt;ekaitz&gt;</a></span><span class="message">because i think it's hanging</span></div><div class="line" id="011943"><span class="nick" style="color:#8dd3c7"><a href="#011943" label="[01:19:43]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: what are you building?</span></div><div class="line" id="012006"><span class="nick" style="color:#8dd3c7"><a href="#012006" label="[01:20:06]">&lt;stikonas&gt;</a></span><span class="message">(moved to #guix-risc-v for this )</span></div><div class="line" id="012456"><span class="nick" style="color:#6b8072"><a href="#012456" label="[01:24:56]">&lt;oriansj&gt;</a></span><span class="message">every percent performance gained is a net win</span></div><div class="line" id="013319"><span class="nick" style="color:#80b1d3"><a href="#013319" label="[01:33:19]">&lt;muurkha&gt;</a></span><span class="message">sometimes, it depends on what you pay for it!</span></div><div class="line" id="015937"><span class="nick" style="color:#6d2462"><a href="#015937" label="[01:59:37]">&lt;GoogulatorMobile&gt;</a></span><span class="message">stikonas: mes can easily run for 10 minutes even on *modern* x86</span></div><div class="line" id="020018"><span class="nick" style="color:#6d2462"><a href="#020018" label="[02:00:18]">&lt;GoogulatorMobile&gt;</a></span><span class="message">On older x86, I get 30-40 minutes</span></div><div class="line" id="020019"><span class="nick" style="color:#8dd3c7"><a href="#020019" label="[02:00:19]">&lt;stikonas&gt;</a></span><span class="message">yaeh, it's about 10 minutes on 8 year old laptop...</span></div><div class="line" id="020042"><span class="nick" style="color:#6d2462"><a href="#020042" label="[02:00:42]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And by older, I mean Core 2 / Conroe uarch</span></div><div class="line" id="020056"><span class="nick" style="color:#6d2462"><a href="#020056" label="[02:00:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I haven't even dared to try on a NetBurst</span></div><div class="line" id="020105"><span class="nick" style="color:#8dd3c7"><a href="#020105" label="[02:01:05]">&lt;stikonas&gt;</a></span><span class="message">tommorrow I'll  finally have riscv64 checksums</span></div><div class="line" id="020111"><span class="nick" style="color:#8dd3c7"><a href="#020111" label="[02:01:11]">&lt;stikonas&gt;</a></span><span class="message">build should finish by then</span></div><div class="line" id="020117"><span class="nick" style="color:#8dd3c7"><a href="#020117" label="[02:01:17]">&lt;stikonas&gt;</a></span><span class="message">though maybe we should wait till mes 0.26.1...</span></div><div class="line" id="020117"><span class="nick" style="color:#6d2462"><a href="#020117" label="[02:01:17]">&lt;GoogulatorMobile&gt;</a></span><span class="message">ugh</span></div><div class="line" id="020139"><span class="nick" style="color:#6d2462"><a href="#020139" label="[02:01:39]">&lt;GoogulatorMobile&gt;</a></span><span class="message">BTW, why is mes version in seed.kaem?</span></div><div class="line" id="020155"><span class="nick" style="color:#6d2462"><a href="#020155" label="[02:01:55]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Can't it be contained in mes's build script?</span></div><div class="line" id="020231"><span class="nick" style="color:#6d2462"><a href="#020231" label="[02:02:31]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Seed shouldn't assume it's gonna be building mes next</span></div><div class="line" id="020246"><span class="nick" style="color:#6d2462"><a href="#020246" label="[02:02:46]">&lt;GoogulatorMobile&gt;</a></span><span class="message">In fact, seed should make no assumptions about the content of the manifest</span></div><div class="line" id="020330"><span class="nick" style="color:#8dd3c7"><a href="#020330" label="[02:03:30]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: that's probably because variable was shared by both mes and tcc packages</span></div><div class="line" id="020415"><span class="nick" style="color:#80b1d3"><a href="#020415" label="[02:04:15]">&lt;muurkha&gt;</a></span><span class="message">haha, NetBurst</span></div><div class="line" id="020432"><span class="nick" style="color:#6d2462"><a href="#020432" label="[02:04:32]">&lt;GoogulatorMobile&gt;</a></span><span class="message">TCC needs to know about mes version?</span></div><div class="line" id="020439"><span class="nick" style="color:#8dd3c7"><a href="#020439" label="[02:04:39]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: yeah...</span></div><div class="line" id="020447"><span class="nick" style="color:#8dd3c7"><a href="#020447" label="[02:04:47]">&lt;stikonas&gt;</a></span><span class="message">because mes is not fully installed into /usr</span></div><div class="line" id="020453"><span class="nick" style="color:#8dd3c7"><a href="#020453" label="[02:04:53]">&lt;stikonas&gt;</a></span><span class="message">and it runs mescc from PREFIX...</span></div><div class="line" id="020503"><span class="nick" style="color:#8dd3c7"><a href="#020503" label="[02:05:03]">&lt;stikonas&gt;</a></span><span class="message">from MES_PREFIX</span></div><div class="line" id="020513"><span class="nick" style="color:#8dd3c7"><a href="#020513" label="[02:05:13]">&lt;stikonas&gt;</a></span><span class="message">and MES_PREFIX is path to mes build dir...</span></div><div class="line" id="020523"><span class="nick" style="color:#8dd3c7"><a href="#020523" label="[02:05:23]">&lt;stikonas&gt;</a></span><span class="message">something to clean up ideally</span></div><div class="line" id="020542"><span class="nick" style="color:#8dd3c7"><a href="#020542" label="[02:05:42]">&lt;stikonas&gt;</a></span><span class="message">but I guess installing mescc requires installing a lot of scheme files</span></div><div class="line" id="020554"><span class="nick" style="color:#8dd3c7"><a href="#020554" label="[02:05:54]">&lt;stikonas&gt;</a></span><span class="message">anyway, that would be good to fix...</span></div><div class="line" id="020611"><span class="nick" style="color:#8dd3c7"><a href="#020611" label="[02:06:11]">&lt;stikonas&gt;</a></span><span class="message">though we have other things that would be good to fix too</span></div><div class="line" id="020745"><span class="nick" style="color:#6d2462"><a href="#020745" label="[02:07:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">muurkha: NetBurst is pretty much the beginning of what I consider viable bootstrap hardware</span></div><div class="line" id="020802"><span class="nick" style="color:#6d2462"><a href="#020802" label="[02:08:02]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Maybe also Coppermine &amp; Tualatin, if you can feed it 3GiB of RAM</span></div><div class="line" id="020849"><span class="nick" style="color:#6d2462"><a href="#020849" label="[02:08:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(needs 1GiB SDRAM modules &amp; a compatible board, which is quite rare)</span></div><div class="line" id="020918"><span class="nick" style="color:#6d2462"><a href="#020918" label="[02:09:18]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Earlier than that, you start to hit the emulation hazard</span></div><div class="line" id="020949"><span class="nick" style="color:#6d2462"><a href="#020949" label="[02:09:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But go too new, and it becomes harder to trust the hardware</span></div><div class="line" id="020952"><span class="nick" style="color:#80b1d3"><a href="#020952" label="[02:09:52]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: yeah, it might be viable!</span></div><div class="line" id="021056"><span class="nick" style="color:#6d2462"><a href="#021056" label="[02:10:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I'd consider anything with &quot;modern&quot; Intel ME (in the sense of always-on mini-cores running secret firmware) unsuitable</span></div><div class="line" id="021126"><span class="nick" style="color:#6d2462"><a href="#021126" label="[02:11:26]">&lt;GoogulatorMobile&gt;</a></span><span class="message">That means no newer than Westmere (iirc)</span></div><div class="line" id="021151"><span class="nick" style="color:#6d2462"><a href="#021151" label="[02:11:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">AMD might be viable for a little longer - not sure when PSP was made mandatory</span></div><div class="line" id="021232"><span class="nick" style="color:#6d2462"><a href="#021232" label="[02:12:32]">&lt;GoogulatorMobile&gt;</a></span><span class="message">For the same reason, I consider Raspberry Pi of any generation NSFB</span></div><div class="line" id="021250"><span class="nick" style="color:#6d2462"><a href="#021250" label="[02:12:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(Not Safe For Bootstrapping)</span></div><div class="line" id="021302"><span class="nick" style="color:#8dd3c7"><a href="#021302" label="[02:13:02]">&lt;stikonas&gt;</a></span><span class="message">stage0-uefi is slowly getting fixed. And it's getting easier, hex1, hex2 and catm are now fixed. M0 next...</span></div><div class="line" id="021330"><span class="nick" style="color:#8dd3c7"><a href="#021330" label="[02:13:30]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: PSP runs on all AMD CPUs too for at least a decade</span></div><div class="line" id="021343"><span class="nick" style="color:#8dd3c7"><a href="#021343" label="[02:13:43]">&lt;stikonas&gt;</a></span><span class="message">though I think PSP does not have any networking capability</span></div><div class="line" id="021401"><span class="nick" style="color:#8dd3c7"><a href="#021401" label="[02:14:01]">&lt;stikonas&gt;</a></span><span class="message">raspberry pi has some open firmware too actually</span></div><div class="line" id="021415"><span class="nick" style="color:#6d2462"><a href="#021415" label="[02:14:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yeah, open</span></div><div class="line" id="021418"><span class="nick" style="color:#8dd3c7"><a href="#021418" label="[02:14:18]">&lt;stikonas&gt;</a></span><span class="message">though I think they only managed to bring up bare minimu</span></div><div class="line" id="021422"><span class="nick" style="color:#6d2462"><a href="#021422" label="[02:14:22]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But hardly bootstrappable</span></div><div class="line" id="021443"><span class="nick" style="color:#8dd3c7"><a href="#021443" label="[02:14:43]">&lt;stikonas&gt;</a></span><span class="message">well, true</span></div><div class="line" id="021451"><span class="nick" style="color:#6d2462"><a href="#021451" label="[02:14:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Unless I missed something, VC4 arch isn't even self-hosting</span></div><div class="line" id="021500"><span class="nick" style="color:#6d2462"><a href="#021500" label="[02:15:00]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Only cross compilers exist</span></div><div class="line" id="021520"><span class="nick" style="color:#8dd3c7"><a href="#021520" label="[02:15:20]">&lt;stikonas&gt;</a></span><span class="message">well, as part of bootstrapping, you write your own compilers anyway</span></div><div class="line" id="021605"><span class="nick" style="color:#8dd3c7"><a href="#021605" label="[02:16:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, I don't think it's very active, this hasn't had any commits for years <a rel="nofollow" href="https://github.com/christinaa/rpi-open-firmware/">https://github.com/christinaa/rpi-open-firmware/</a> </span></div><div class="line" id="021613"><span class="nick" style="color:#6d2462"><a href="#021613" label="[02:16:13]">&lt;GoogulatorMobile&gt;</a></span><span class="message">You do, but I would rather not include writing a native compiler for a largely secret and undocumented ISA that has never in its existence executed a compiler</span></div><div class="line" id="021629"><span class="nick" style="color:#8dd3c7"><a href="#021629" label="[02:16:29]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, that's no fun...</span></div><div class="line" id="021715"><span class="nick" style="color:#6d2462"><a href="#021715" label="[02:17:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">VC4 would be more than powerful enough to bootstrap on, the problem is Broadcom's attitude</span></div><div class="line" id="021743"><span class="nick" style="color:#8dd3c7"><a href="#021743" label="[02:17:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm not suggesting bootstrapping on raspberry pi...</span></div><div class="line" id="021905"><span class="nick" style="color:#80b1d3"><a href="#021905" label="[02:19:05]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: Intel ME is pretty bad, yeah</span></div><div class="line" id="021945"><span class="nick" style="color:#80b1d3"><a href="#021945" label="[02:19:45]">&lt;muurkha&gt;</a></span><span class="message">the VideoCore IV ISA isn't secret and undocumented</span></div><div class="line" id="021958"><span class="nick" style="color:#6d2462"><a href="#021958" label="[02:19:58]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Intel ME is even worse than VC4 - VC4 at least lets you load your own code without signing, if you have a way of compiling for it</span></div><div class="line" id="022009"><span class="nick" style="color:#80b1d3"><a href="#022009" label="[02:20:09]">&lt;muurkha&gt;</a></span><span class="message">what's secret and undocumented is the source code of the firmware they run on it</span></div><div class="line" id="022025"><span class="nick" style="color:#6d2462"><a href="#022025" label="[02:20:25]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Isn't the ISA also only known from reverse engineering said firmware?</span></div><div class="line" id="023232"><span class="nick" style="color:#234e69"><a href="#023232" label="[02:32:32]">&lt;Googulator&gt;</a></span><span class="message">Any idea about this error? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/actions/runs/7299720208/job/19893080535?pr=354#step:7:10823">https://github.com/fosslinux/live-bootstrap/actions/runs/7299720208/job/19893080535?pr=354#step:7:10823</a> </span></div><div class="line" id="023311"><span class="nick" style="color:#234e69"><a href="#023311" label="[02:33:11]">&lt;Googulator&gt;</a></span><span class="message">I can also reproduce this locally on Ubuntu 22.04 in WSL2</span></div><div class="line" id="023358"><span class="nick" style="color:#234e69"><a href="#023358" label="[02:33:58]">&lt;Googulator&gt;</a></span><span class="message">basically, it seems the bwrapped environment lacks the CAP_MKNOD capability - but then how did this work before the refactor?</span></div><div class="line" id="023507"><span class="nick" style="color:#234e69"><a href="#023507" label="[02:35:07]">&lt;Googulator&gt;</a></span><span class="message">(the step that fails is populate_device_nodes in both GitHub and WSL2)</span></div><div class="line" id="031957"><span class="nick" style="color:#234e69"><a href="#031957" label="[03:19:57]">&lt;Googulator&gt;</a></span><span class="message">ok, it seems to be an easy fix, as far as getting bwrap to work in general</span></div><div class="line" id="032018"><span class="nick" style="color:#234e69"><a href="#032018" label="[03:20:18]">&lt;Googulator&gt;</a></span><span class="message">2- or 3-pass bwrap for CI might be harder</span></div><div class="line" id="032355"><span class="nick" style="color:#234e69"><a href="#032355" label="[03:23:55]">&lt;Googulator&gt;</a></span><span class="message">all of the offending mknod operations were in sysb originally - bwrap/chroot just straight up skipped sysb</span></div><div class="line" id="032428"><span class="nick" style="color:#234e69"><a href="#032428" label="[03:24:28]">&lt;Googulator&gt;</a></span><span class="message">now that sysb is no more, the mknods are now attempted in bwrap, and they fail</span></div><div class="line" id="040950"><span class="nick" style="color:#2e2a4a"><a href="#040950" label="[04:09:50]">&lt;fossy&gt;</a></span><span class="message">Googulator: don't worry about CI right now, I have plans for that</span></div><div class="line" id="072316"><span class="nick" style="color:#234e69"><a href="#072316" label="[07:23:16]">&lt;Googulator&gt;</a></span><span class="message">fossy: I read that too late - I already have it working, at least locally :)</span></div><div class="line" id="074651"><span class="nick" style="color:#234e69"><a href="#074651" label="[07:46:51]">&lt;Googulator&gt;</a></span><span class="message">and it turns out, someone else also worked on bwrap (though without CI): <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/360">https://github.com/fosslinux/live-bootstrap/pull/360</a> </span></div><div class="line" id="100258"><span class="nick" style="color:#6c3d55"><a href="#100258" label="[10:02:58]">&lt;lrvick&gt;</a></span><span class="message">Hey all. I am trying to make a general purpose deterministic multi-party-signed container images that don't trust any single existing linux distribution. I got rust bootstrapped all the way from gcc this way, and now I am going down the other path, replacing my alpine sourced &quot;seed&quot; gcc with a full-source-bootstrapped gcc. This rabbithole led me here.</span></div><div class="line" id="100410"><span class="nick" style="color:#6c3d55"><a href="#100410" label="[10:04:10]">&lt;lrvick&gt;</a></span><span class="message">Sadly in dockerland building from actual scratch is pretty hard, so I bootstrapped &quot;stage0-posix&quot; by building in 3 different seed distros and confirming they all agree with each others hashes like so: <a rel="nofollow" href="https://git.distrust.co/public/packages/src/branch/main/src/bootstrap/stage0/Dockerfile">https://git.distrust.co/public/packages/src/branch/main/src/bootstrap/stage0/Dockerfile</a> </span></div><div class="line" id="100507"><span class="nick" style="color:#6c3d55"><a href="#100507" label="[10:05:07]">&lt;lrvick&gt;</a></span><span class="message">My understanding is the next thing I need to do on my path to gcc is build Mes with M2-Planet.</span></div><div class="line" id="100526"><span class="nick" style="color:#6c3d55"><a href="#100526" label="[10:05:26]">&lt;lrvick&gt;</a></span><span class="message">My failing attempt at that is here: <a rel="nofollow" href="https://git.distrust.co/public/packages/src/branch/main/src/bootstrap/mes/Dockerfile">https://git.distrust.co/public/packages/src/branch/main/src/bootstrap/mes/Dockerfile</a> </span></div><div class="line" id="100545"><span class="nick" style="color:#6c3d55"><a href="#100545" label="[10:05:45]">&lt;lrvick&gt;</a></span><span class="message">This lands me with:</span></div><div class="line" id="100558"><span class="nick" style="color:#6c3d55"><a href="#100558" label="[10:05:58]">&lt;lrvick&gt;</a></span><span class="message"> &gt; [build 7/7] RUN [&quot;/M2-Planet&quot;,&quot;--debug&quot;,&quot;--architecture&quot;,&quot;amd64&quot;,&quot;-f&quot;,&quot;src/mes.c&quot;]:</span></div><div class="line" id="100600"><span class="nick" style="color:#6c3d55"><a href="#100600" label="[10:06:00]">&lt;lrvick&gt;</a></span><span class="message">0.220 src/mes.c:35:ERROR in create_struct</span></div><div class="line" id="100602"><span class="nick" style="color:#6c3d55"><a href="#100602" label="[10:06:02]">&lt;lrvick&gt;</a></span><span class="message">0.220  Missing {</span></div><div class="line" id="100648"><span class="nick" style="color:#6c3d55"><a href="#100648" label="[10:06:48]">&lt;lrvick&gt;</a></span><span class="message">I am assuming the source is fine and I am just skipping some steps, or missed some docs somewhere</span></div><div class="line" id="102022"><span class="nick" style="color:#6d2462"><a href="#102022" label="[10:20:22]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Irvick: I suggest starting with live-bootstrap instead</span></div><div class="line" id="102045"><span class="nick" style="color:#6d2462"><a href="#102045" label="[10:20:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Gets you straight up to GCC 13 from stage0</span></div><div class="line" id="102457"><span class="nick" style="color:#80b1d3"><a href="#102457" label="[10:24:57]">&lt;muurkha&gt;</a></span><span class="message">lrvick: sounds like an awesome project!</span></div><div class="line" id="103804"><span class="nick" style="color:#6c3d55"><a href="#103804" label="[10:38:04]">&lt;lrvick&gt;</a></span><span class="message">live-bootstrap?</span></div><div class="line" id="103806"><span class="nick" style="color:#6c3d55"><a href="#103806" label="[10:38:06]">&lt;lrvick&gt;</a></span><span class="message">ACTION looks</span></div><div class="line" id="104026"><span class="nick" style="color:#6c3d55"><a href="#104026" label="[10:40:26]">&lt;lrvick&gt;</a></span><span class="message">okay, looks like maybe I can maybe adapt the chroot path to a container</span></div><div class="line" id="114422"><span class="nick" style="color:#d9d9d9"><a href="#114422" label="[11:44:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; lrvick: or bwrap path...</span></div><div class="line" id="114440"><span class="nick" style="color:#d9d9d9"><a href="#114440" label="[11:44:40]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; bwrap is using Linux namespaces just like docker, just a bit lower level tool</span></div><div class="line" id="114825"><span class="nick" style="color:#6c3d55"><a href="#114825" label="[11:48:25]">&lt;lrvick&gt;</a></span><span class="message">Well, goal is that anyone can take this Dockerfile and run it from podman, buildah, docker, kaniko, or any other OCI compatible runner for maximum portability, and get the same hash</span></div><div class="line" id="114832"><span class="nick" style="color:#6c3d55"><a href="#114832" label="[11:48:32]">&lt;lrvick&gt;</a></span><span class="message">without having to care what their host OS is</span></div><div class="line" id="114846"><span class="nick" style="color:#d9d9d9"><a href="#114846" label="[11:48:46]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Andrius Štikonas: also you were building mes.c without any headers...</span></div><div class="line" id="114907"><span class="nick" style="color:#8dd3c7"><a href="#114907" label="[11:49:07]">&lt;stikonas&gt;</a></span><span class="message">Irvise: yeah, but you need to adjust steps in Dockerfile...</span></div><div class="line" id="114920"><span class="nick" style="color:#8dd3c7"><a href="#114920" label="[11:49:20]">&lt;stikonas&gt;</a></span><span class="message">and I suggest not starting with debian or alpine...</span></div><div class="line" id="114947"><span class="nick" style="color:#8dd3c7"><a href="#114947" label="[11:49:47]">&lt;stikonas&gt;</a></span><span class="message">but start with &quot;scratch&quot; if you want really to bootstrap from source</span></div><div class="line" id="114955"><span class="nick" style="color:#6c3d55"><a href="#114955" label="[11:49:55]">&lt;lrvick&gt;</a></span><span class="message">Well I start with all three, and compare the hashes, in the stage0 one at least.</span></div><div class="line" id="115017"><span class="nick" style="color:#8dd3c7"><a href="#115017" label="[11:50:17]">&lt;stikonas&gt;</a></span><span class="message">yeah, but if you run the right binaries, you don't need anything from host containers</span></div><div class="line" id="115018"><span class="nick" style="color:#6c3d55"><a href="#115018" label="[11:50:18]">&lt;lrvick&gt;</a></span><span class="message">then in the &quot;mes&quot; package I only use debian for downloading sources from the internet, then I pivot to a scratch container</span></div><div class="line" id="115037"><span class="nick" style="color:#8dd3c7"><a href="#115037" label="[11:50:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, you do need to download stuff... true</span></div><div class="line" id="115108"><span class="nick" style="color:#6c3d55"><a href="#115108" label="[11:51:08]">&lt;lrvick&gt;</a></span><span class="message">I download with the untrusted debian container, then pivot to scratch, and check the hash there with stage0 built sha256sum</span></div><div class="line" id="115114"><span class="nick" style="color:#6c3d55"><a href="#115114" label="[11:51:14]">&lt;lrvick&gt;</a></span><span class="message">which seems about as optimal as I can get</span></div><div class="line" id="115127"><span class="nick" style="color:#8dd3c7"><a href="#115127" label="[11:51:27]">&lt;stikonas&gt;</a></span><span class="message">oh, I missed that...</span></div><div class="line" id="115144"><span class="nick" style="color:#8dd3c7"><a href="#115144" label="[11:51:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, ineed, it's lower down</span></div><div class="line" id="115214"><span class="nick" style="color:#8dd3c7"><a href="#115214" label="[11:52:14]">&lt;stikonas&gt;</a></span><span class="message">s/ineed/indeed/</span></div><div class="line" id="115220"><span class="nick" style="color:#8dd3c7"><a href="#115220" label="[11:52:20]">&lt;stikonas&gt;</a></span><span class="message">ACTION will be back in an hour or so</span></div><div class="line" id="120149"><span class="nick" style="color:#6c3d55"><a href="#120149" label="[12:01:49]">&lt;lrvick&gt;</a></span><span class="message">has anyone tested if the final gcc13 produced by live-bootstrap currently deterministic? Would love hashes to compare against</span></div><div class="line" id="122715"><span class="nick" style="color:#389600"><a href="#122715" label="[12:27:15]">&lt;ekaitz&gt;</a></span><span class="message">GoogulatorMobile &amp; stikonas : i sent the patch that avoids double runs to bug-mes</span></div><div class="line" id="122746"><span class="nick" style="color:#389600"><a href="#122746" label="[12:27:46]">&lt;ekaitz&gt;</a></span><span class="message">it's just deleting one line, but it's there so you can just take it and apply it to you mes download if you want to make it faster</span></div><div class="line" id="124616"><span class="nick" style="color:#6c3d55"><a href="#124616" label="[12:46:16]">&lt;lrvick&gt;</a></span><span class="message">Okay attempted live-bootstrap in a scratch container image using a pre-built stage0 image. live-bootsrap: <a rel="nofollow" href="https://git.distrust.co/public/packages/src/branch/fsb/src/bootstrap/live/Dockerfile">https://git.distrust.co/public/packages/src/branch/fsb/src/bootstrap/live/Dockerfile</a>  stage0: <a rel="nofollow" href="https://git.distrust.co/public/packages/src/branch/fsb/src/bootstrap/stage0/Dockerfile">https://git.distrust.co/public/packages/src/branch/fsb/src/bootstrap/stage0/Dockerfile</a> </span></div><div class="line" id="124727"><span class="nick" style="color:#6c3d55"><a href="#124727" label="[12:47:27]">&lt;lrvick&gt;</a></span><span class="message">It explodes like so: <a rel="nofollow" href="https://dpaste.org/VvuSN">https://dpaste.org/VvuSN</a> </span></div><div class="line" id="124743"><span class="nick" style="color:#6c3d55"><a href="#124743" label="[12:47:43]">&lt;lrvick&gt;</a></span><span class="message">core dump in script generator</span></div><div class="line" id="124822"><span class="nick" style="color:#6c3d55"><a href="#124822" label="[12:48:22]">&lt;lrvick&gt;</a></span><span class="message">I barely have any idea what I am doing with this, so probably something tumb</span></div><div class="line" id="130603"><span class="nick" style="color:#8dd3c7"><a href="#130603" label="[13:06:03]">&lt;stikonas&gt;</a></span><span class="message">Irvise: that script generator is very new, probably some bug in it but it could be caused by e.g. missing files?</span></div><div class="line" id="130618"><span class="nick" style="color:#8dd3c7"><a href="#130618" label="[13:06:18]">&lt;stikonas&gt;</a></span><span class="message">I'll take a look at your dockerfiles</span></div><div class="line" id="133914"><span class="nick" style="color:#8dd3c7"><a href="#133914" label="[13:39:14]">&lt;stikonas&gt;</a></span><span class="message">lrvick: ok, building podman now, will try those dockerfiles soon</span></div><div class="line" id="133936"><span class="nick" style="color:#8dd3c7"><a href="#133936" label="[13:39:36]">&lt;stikonas&gt;</a></span><span class="message">though even in docker scratch we depend on docker binary and also kernel</span></div><div class="line" id="140318"><span class="nick" style="color:#6c3d55"><a href="#140318" label="[14:03:18]">&lt;lrvick&gt;</a></span><span class="message">well you depend on -any- oci capable runner of which several exist</span></div><div class="line" id="140339"><span class="nick" style="color:#6c3d55"><a href="#140339" label="[14:03:39]">&lt;lrvick&gt;</a></span><span class="message">and if they all agree in a reproducible build setup, then that is very confidence inspiring</span></div><div class="line" id="140421"><span class="nick" style="color:#6c3d55"><a href="#140421" label="[14:04:21]">&lt;lrvick&gt;</a></span><span class="message">also OCI runners have been adapted to other kernels that provide a linux system call interfac, like FreeBSD.</span></div><div class="line" id="140638"><span class="nick" style="color:#8dd3c7"><a href="#140638" label="[14:06:38]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, I'm using podman both at home and at work...</span></div><div class="line" id="140725"><span class="nick" style="color:#8dd3c7"><a href="#140725" label="[14:07:25]">&lt;stikonas&gt;</a></span><span class="message">though pure live-bootstrap can also do kernel bootstrap on BIOS systems...</span></div><div class="line" id="140745"><span class="nick" style="color:#8dd3c7"><a href="#140745" label="[14:07:45]">&lt;stikonas&gt;</a></span><span class="message">(we haven't got UEFI bootstrap fully working yet, but there is some work in progress)</span></div><div class="line" id="140758"><span class="nick" style="color:#6c3d55"><a href="#140758" label="[14:07:58]">&lt;lrvick&gt;</a></span><span class="message">yeah, so like if you used podman+linux and I used docker+freebsd then we had no code overlap in our runtimes, and then if everything is deterministic from there, great. I am optimizing for maximum diversity.</span></div><div class="line" id="140825"><span class="nick" style="color:#6c3d55"><a href="#140825" label="[14:08:25]">&lt;lrvick&gt;</a></span><span class="message">and hey, if my the builds in my easily-CI-able bootstrap container end up matching the hashes people do by hand on baremetal, the confidence keeps stacking</span></div><div class="line" id="141033"><span class="nick" style="color:#8dd3c7"><a href="#141033" label="[14:10:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, they should match if everything is right</span></div><div class="line" id="141051"><span class="nick" style="color:#8dd3c7"><a href="#141051" label="[14:10:51]">&lt;stikonas&gt;</a></span><span class="message">and yes, more diversity is good, that's why even live-bootstrap itself supports a few different running modes</span></div><div class="line" id="141133"><span class="nick" style="color:#8dd3c7"><a href="#141133" label="[14:11:33]">&lt;stikonas&gt;</a></span><span class="message">I actually planned to look at docker option a couple of years ago, but then doras implemented rootless bubblewrap mode, so I didn't do any work on docker...</span></div><div class="line" id="141150"><span class="nick" style="color:#6c3d55"><a href="#141150" label="[14:11:50]">&lt;lrvick&gt;</a></span><span class="message">mostly my work here is motivated by the overall supply chain integrity story of pretty much every container image that powers the whole internet at this point is based on alpine which is neither signed nor reproducible, and the non-musl alternatives are worse in other ways.</span></div><div class="line" id="141226"><span class="nick" style="color:#6c3d55"><a href="#141226" label="[14:12:26]">&lt;lrvick&gt;</a></span><span class="message">and all my clients want do do reproducible builds of their mission critical software from a wide range of systems and get the same result, and docker is the thing everyone knows.</span></div><div class="line" id="141252"><span class="nick" style="color:#6c3d55"><a href="#141252" label="[14:12:52]">&lt;lrvick&gt;</a></span><span class="message">but yeah... I bootstrap all my stuff from alpine as I needed a musl gcc, so I just kicked the can further down the stack.</span></div><div class="line" id="141255"><span class="nick" style="color:#6c3d55"><a href="#141255" label="[14:12:55]">&lt;lrvick&gt;</a></span><span class="message">time to finish it ^_^</span></div><div class="line" id="141320"><span class="nick" style="color:#8dd3c7"><a href="#141320" label="[14:13:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, we do build musl gcc in live-bootstrap :), so you just need to port it to docker...</span></div><div class="line" id="141326"><span class="nick" style="color:#8dd3c7"><a href="#141326" label="[14:13:26]">&lt;stikonas&gt;</a></span><span class="message">to run exactly the same steps</span></div><div class="line" id="141351"><span class="nick" style="color:#6c3d55"><a href="#141351" label="[14:13:51]">&lt;lrvick&gt;</a></span><span class="message">Yeah, on paper it seems like this should be a drop-in replacement for the alpine container I bootstrap the rest of my distro with.</span></div><div class="line" id="141403"><span class="nick" style="color:#6c3d55"><a href="#141403" label="[14:14:03]">&lt;lrvick&gt;</a></span><span class="message">other than my weird core dumps above. no clue how to debug that</span></div><div class="line" id="141409"><span class="nick" style="color:#6c3d55"><a href="#141409" label="[14:14:09]">&lt;lrvick&gt;</a></span><span class="message">but happy to learn if anyone gets a moment to poke it</span></div><div class="line" id="141426"><span class="nick" style="color:#8dd3c7"><a href="#141426" label="[14:14:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll run it soon</span></div><div class="line" id="141429"><span class="nick" style="color:#8dd3c7"><a href="#141429" label="[14:14:29]">&lt;stikonas&gt;</a></span><span class="message">I'll see what happens there</span></div><div class="line" id="141436"><span class="nick" style="color:#8dd3c7"><a href="#141436" label="[14:14:36]">&lt;stikonas&gt;</a></span><span class="message">my first guess is that some file is missing?</span></div><div class="line" id="141440"><span class="nick" style="color:#8dd3c7"><a href="#141440" label="[14:14:40]">&lt;stikonas&gt;</a></span><span class="message">but I might be wrong</span></div><div class="line" id="141519"><span class="nick" style="color:#6c3d55"><a href="#141519" label="[14:15:19]">&lt;lrvick&gt;</a></span><span class="message">likely. I am only exporting the bin/x86 and m2libc folders from my stage0 build container</span></div><div class="line" id="141533"><span class="nick" style="color:#6c3d55"><a href="#141533" label="[14:15:33]">&lt;lrvick&gt;</a></span><span class="message">so if there is anything obvious beyond those I need, lmk</span></div><div class="line" id="141556"><span class="nick" style="color:#6c3d55"><a href="#141556" label="[14:15:56]">&lt;lrvick&gt;</a></span><span class="message">trying to have only what is aboslutely required in each stage to make it easier to audit</span></div><div class="line" id="142114"><span class="nick" style="color:#8dd3c7"><a href="#142114" label="[14:21:14]">&lt;stikonas&gt;</a></span><span class="message">ok, stage0-posix is building</span></div><div class="line" id="142333"><span class="nick" style="color:#8dd3c7"><a href="#142333" label="[14:23:33]">&lt;stikonas&gt;</a></span><span class="message">lrvick: what is <a rel="nofollow" href="https://codeload.github.com/fosslinux/live-bootstrap/legacy.tar.gz">https://codeload.github.com/fosslinux/live-bootstrap/legacy.tar.gz</a>  ?</span></div><div class="line" id="142340"><span class="nick" style="color:#8dd3c7"><a href="#142340" label="[14:23:40]">&lt;stikonas&gt;</a></span><span class="message">in that 2nd dockerfile</span></div><div class="line" id="142346"><span class="nick" style="color:#8dd3c7"><a href="#142346" label="[14:23:46]">&lt;stikonas&gt;</a></span><span class="message">I just get HTTP 400</span></div><div class="line" id="142913"><span class="nick" style="color:#2e2a4a"><a href="#142913" label="[14:29:13]">&lt;fossy&gt;</a></span><span class="message">oh hello lrvick, i recall you from hashbang</span></div><div class="line" id="143000"><span class="nick" style="color:#2e2a4a"><a href="#143000" label="[14:30:00]">&lt;fossy&gt;</a></span><span class="message">i can't promise that live-bootstrap will be a drop in replacement, but it should be very close to ^-^</span></div><div class="line" id="143030"><span class="nick" style="color:#2e2a4a"><a href="#143030" label="[14:30:30]">&lt;fossy&gt;</a></span><span class="message">re: reproducibility, all package checksums are in steps/SHA256SUMS.pkgs; live-bootstrap should be 100% reproducible</span></div><div class="line" id="143311"><span class="nick" style="color:#8dd3c7"><a href="#143311" label="[14:33:11]">&lt;stikonas&gt;</a></span><span class="message">well, posts bash checksums are there</span></div><div class="line" id="143325"><span class="nick" style="color:#8dd3c7"><a href="#143325" label="[14:33:25]">&lt;stikonas&gt;</a></span><span class="message">pre-bash are in steps/*/*.checksum</span></div><div class="line" id="150742"><span class="nick" style="color:#8dd3c7"><a href="#150742" label="[15:07:42]">&lt;stikonas&gt;</a></span><span class="message">lrvick: I seem to hit some issues earlier</span></div><div class="line" id="150745"><span class="nick" style="color:#8dd3c7"><a href="#150745" label="[15:07:45]">&lt;stikonas&gt;</a></span><span class="message">I run DOCKER_BUILDKIT=1 SOURCE_DATE_EPOCH=1 /usr/bin/docker build -t local/live:latest --build-arg REGISTRY=local --platform linux/amd64 --progress=plain  src/bootstrap/live</span></div><div class="line" id="150752"><span class="nick" style="color:#8dd3c7"><a href="#150752" label="[15:07:52]">&lt;stikonas&gt;</a></span><span class="message">(remove --target package)</span></div><div class="line" id="150756"><span class="nick" style="color:#8dd3c7"><a href="#150756" label="[15:07:56]">&lt;stikonas&gt;</a></span><span class="message">s/remove/removed</span></div><div class="line" id="150813"><span class="nick" style="color:#8dd3c7"><a href="#150813" label="[15:08:13]">&lt;stikonas&gt;</a></span><span class="message">and then it runs STEP 14/24: FORCE_TIMESTAMPS=False and then fails</span></div><div class="line" id="150818"><span class="nick" style="color:#8dd3c7"><a href="#150818" label="[15:08:18]">&lt;stikonas&gt;</a></span><span class="message">something seems wrong with cat syntax</span></div><div class="line" id="150840"><span class="nick" style="color:#8dd3c7"><a href="#150840" label="[15:08:40]">&lt;stikonas&gt;</a></span><span class="message">I think because line endings are not escaped</span></div><div class="line" id="150856"><span class="nick" style="color:#8dd3c7"><a href="#150856" label="[15:08:56]">&lt;stikonas&gt;</a></span><span class="message">so docker build treats RUN cat &lt;&lt;EOF &gt; /rootfs/steps/bootstrap.cfg as the whole command</span></div><div class="line" id="151045"><span class="nick" style="color:#6c3d55"><a href="#151045" label="[15:10:45]">&lt;lrvick&gt;</a></span><span class="message">was this in docker or podman?</span></div><div class="line" id="151108"><span class="nick" style="color:#6c3d55"><a href="#151108" label="[15:11:08]">&lt;lrvick&gt;</a></span><span class="message">also about to pass out any moment. 6am... so may be a few hours before I can take a look.</span></div><div class="line" id="151547"><span class="nick" style="color:#bc80bd"><a href="#151547" label="[15:15:47]">&lt;stikonas_&gt;</a></span><span class="message">Irvise: no problem, take a look tomorrow</span></div><div class="line" id="151552"><span class="nick" style="color:#bc80bd"><a href="#151552" label="[15:15:52]">&lt;stikonas_&gt;</a></span><span class="message">it was with podman...</span></div><div class="line" id="180742"><span class="nick" style="color:#6d2462"><a href="#180742" label="[18:07:42]">&lt;GoogulatorMobile&gt;</a></span><span class="message">early progress towards bootstrapping pine: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/assets/16308406/ac74c34a-8c9f-4fd4-8184-87a3a17febb4">https://github.com/fosslinux/live-bootstrap/assets/16308406/ac74c34a-8c9f-4fd4-8184-87a3a17febb4</a> </span></div><div class="line" id="181801"><span class="nick" style="color:#8dd3c7"><a href="#181801" label="[18:18:01]">&lt;stikonas&gt;</a></span><span class="message">you didn't start with the seed (pine cone)</span></div><div class="line" id="181911"><span class="nick" style="color:#8dd3c7"><a href="#181911" label="[18:19:11]">&lt;stikonas&gt;</a></span><span class="message">in the meantime, I've fixed M0.efi</span></div><div class="line" id="181920"><span class="nick" style="color:#8dd3c7"><a href="#181920" label="[18:19:20]">&lt;stikonas&gt;</a></span><span class="message">so not much left tilll stage0-uefi is fixed</span></div><div class="line" id="181933"><span class="nick" style="color:#8dd3c7"><a href="#181933" label="[18:19:33]">&lt;stikonas&gt;</a></span><span class="message">just need to fix cc_amd64 and M2libc...</span></div><div class="line" id="182000"><span class="nick" style="color:#8dd3c7"><a href="#182000" label="[18:20:00]">&lt;stikonas&gt;</a></span><span class="message">and then I probably should try to write a POSIX kernel on UEFI...</span></div><div class="line" id="182017"><span class="nick" style="color:#8dd3c7"><a href="#182017" label="[18:20:17]">&lt;stikonas&gt;</a></span><span class="message">probably easier way forward than porting meslibc to UEFI...</span></div><div class="line" id="183439"><span class="nick" style="color:#6d2462"><a href="#183439" label="[18:34:39]">&lt;GoogulatorMobile&gt;</a></span><span class="message">stikonas: and it's missing an actual bootstrap for Santa to fill :)</span></div><div class="line" id="200953"><span class="nick" style="color:#8dd3c7"><a href="#200953" label="[20:09:53]">&lt;stikonas&gt;</a></span><span class="message">goggles-bot: before I opened that link, I thought it will be something on one of the pine64 products...</span></div><div class="line" id="201107"><span class="nick" style="color:#8dd3c7"><a href="#201107" label="[20:11:07]">&lt;stikonas&gt;</a></span><span class="message">by the way, how come that pine asset appears under fosslinux repo?</span></div><div class="line" id="203809"><span class="nick" style="color:#6c3d55"><a href="#203809" label="[20:38:09]">&lt;lrvick&gt;</a></span><span class="message">stikonas: looks like you were able to build the stage0 image though?</span></div><div class="line" id="203822"><span class="nick" style="color:#8dd3c7"><a href="#203822" label="[20:38:22]">&lt;stikonas&gt;</a></span><span class="message">lrvick: stage0 yes</span></div><div class="line" id="203839"><span class="nick" style="color:#8dd3c7"><a href="#203839" label="[20:38:39]">&lt;stikonas&gt;</a></span><span class="message">then I tried building live docker image</span></div><div class="line" id="203859"><span class="nick" style="color:#6c3d55"><a href="#203859" label="[20:38:59]">&lt;lrvick&gt;</a></span><span class="message">Okay, good to know that one is at least portable. So probably just my heredoc usage</span></div><div class="line" id="203900"><span class="nick" style="color:#8dd3c7"><a href="#203900" label="[20:39:00]">&lt;stikonas&gt;</a></span><span class="message">and podman first of all complained about command argument</span></div><div class="line" id="203904"><span class="nick" style="color:#8dd3c7"><a href="#203904" label="[20:39:04]">&lt;stikonas&gt;</a></span><span class="message">(--target platform)</span></div><div class="line" id="203932"><span class="nick" style="color:#6c3d55"><a href="#203932" label="[20:39:32]">&lt;lrvick&gt;</a></span><span class="message">ah yeah, that is a buildkit specific thing</span></div><div class="line" id="203934"><span class="nick" style="color:#8dd3c7"><a href="#203934" label="[20:39:34]">&lt;stikonas&gt;</a></span><span class="message">but even if I removed it, it still didn't work (I think cat &lt;&lt;&lt; EOF problem...</span></div><div class="line" id="204244"><span class="nick" style="color:#8dd3c7"><a href="#204244" label="[20:42:44]">&lt;stikonas&gt;</a></span><span class="message">as for you crash, I haven't reached it yet, but maybe worth checking if you have all the files that script-generator tries to fopen...</span></div><div class="line" id="204348"><span class="nick" style="color:#8dd3c7"><a href="#204348" label="[20:43:48]">&lt;stikonas&gt;</a></span><span class="message">lrvick: looking at dockerfile, it seems that you copied it to /rootfs/steps</span></div><div class="line" id="204355"><span class="nick" style="color:#8dd3c7"><a href="#204355" label="[20:43:55]">&lt;stikonas&gt;</a></span><span class="message">and script generator tries to open /steps</span></div><div class="line" id="204614"><span class="nick" style="color:#6c3d55"><a href="#204614" label="[20:46:14]">&lt;lrvick&gt;</a></span><span class="message">stikonas: okay redid it without a heredoc since I can't figure out why podman hates those</span></div><div class="line" id="204755"><span class="nick" style="color:#6c3d55"><a href="#204755" label="[20:47:55]">&lt;lrvick&gt;</a></span><span class="message">stikonas: I put everything in /rootfs in the &quot;fetch&quot; stage, but then it gets into the &quot;build&quot; stage on line 41, which dumps everything from /rootfs into /, once I am safely under a &quot;from scratch&quot;</span></div><div class="line" id="204843"><span class="nick" style="color:#6c3d55"><a href="#204843" label="[20:48:43]">&lt;lrvick&gt;</a></span><span class="message">I'll get a tree of the final filesystem. sec</span></div><div class="line" id="205541"><span class="nick" style="color:#8dd3c7"><a href="#205541" label="[20:55:41]">&lt;stikonas&gt;</a></span><span class="message">oh yes, it does go to /</span></div><div class="line" id="205628"><span class="nick" style="color:#8dd3c7"><a href="#205628" label="[20:56:28]">&lt;stikonas&gt;</a></span><span class="message">ok, now it segfaults in script generator</span></div><div class="line" id="205636"><span class="nick" style="color:#6c3d55"><a href="#205636" label="[20:56:36]">&lt;lrvick&gt;</a></span><span class="message">great.</span></div><div class="line" id="205644"><span class="nick" style="color:#6c3d55"><a href="#205644" label="[20:56:44]">&lt;lrvick&gt;</a></span><span class="message">I mean not great, but you replicated where I am</span></div><div class="line" id="205731"><span class="nick" style="color:#6c3d55"><a href="#205731" label="[20:57:31]">&lt;lrvick&gt;</a></span><span class="message">Here is the state of the filesystem in the final stage. injected busybox at runtime so I could use ls -Rlah : <a rel="nofollow" href="https://sprunge.us/dYeEEO">https://sprunge.us/dYeEEO</a> </span></div><div class="line" id="205732"><span class="nick" style="color:#8dd3c7"><a href="#205732" label="[20:57:32]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="205848"><span class="nick" style="color:#8dd3c7"><a href="#205848" label="[20:58:48]">&lt;stikonas&gt;</a></span><span class="message">maybe FILE *env = fopen(&quot;/steps/env&quot;, &quot;r&quot;); ?</span></div><div class="line" id="205912"><span class="nick" style="color:#8dd3c7"><a href="#205912" label="[20:59:12]">&lt;stikonas&gt;</a></span><span class="message">script-generator opens it but does not check if env is nullptr</span></div><div class="line" id="210058"><span class="nick" style="color:#6c3d55"><a href="#210058" label="[21:00:58]">&lt;lrvick&gt;</a></span><span class="message">I can cat /steps/env and it indeed has env vars in it</span></div><div class="line" id="210107"><span class="nick" style="color:#8dd3c7"><a href="#210107" label="[21:01:07]">&lt;stikonas&gt;</a></span><span class="message">let me try to strace it...</span></div><div class="line" id="210113"><span class="nick" style="color:#6c3d55"><a href="#210113" label="[21:01:13]">&lt;lrvick&gt;</a></span><span class="message">docker run --volume ~/.local/bin/busybox:/bin/busybox --user 0:0 --entrypoint /bin/busybox -ti local/live:latest sh -c &quot;/bin/busybox --install -s /bin &amp;&amp; sh&quot;</span></div><div class="line" id="210124"><span class="nick" style="color:#6c3d55"><a href="#210124" label="[21:01:24]">&lt;lrvick&gt;</a></span><span class="message">use that to get a busybox shell inside the scratch container if you like</span></div><div class="line" id="210143"><span class="nick" style="color:#8dd3c7"><a href="#210143" label="[21:01:43]">&lt;stikonas&gt;</a></span><span class="message">strace might be more useful here...</span></div><div class="line" id="210211"><span class="nick" style="color:#6c3d55"><a href="#210211" label="[21:02:11]">&lt;lrvick&gt;</a></span><span class="message">ACTION figures out static strace binary</span></div><div class="line" id="210239"><span class="nick" style="color:#8dd3c7"><a href="#210239" label="[21:02:39]">&lt;stikonas&gt;</a></span><span class="message">lrvick: no need to inject strace...</span></div><div class="line" id="210244"><span class="nick" style="color:#8dd3c7"><a href="#210244" label="[21:02:44]">&lt;stikonas&gt;</a></span><span class="message">I'll just run strace from outside</span></div><div class="line" id="210250"><span class="nick" style="color:#8dd3c7"><a href="#210250" label="[21:02:50]">&lt;stikonas&gt;</a></span><span class="message">it will be noisy...</span></div><div class="line" id="210251"><span class="nick" style="color:#6c3d55"><a href="#210251" label="[21:02:51]">&lt;lrvick&gt;</a></span><span class="message">oh ofc</span></div><div class="line" id="210256"><span class="nick" style="color:#8dd3c7"><a href="#210256" label="[21:02:56]">&lt;stikonas&gt;</a></span><span class="message">but I only care about the last steps</span></div><div class="line" id="210455"><span class="nick" style="color:#6c3d55"><a href="#210455" label="[21:04:55]">&lt;lrvick&gt;</a></span><span class="message">I am not copying all of stage0 inside. only the &quot;x86&quot; and &quot;M2Libc&quot; dirs make it over. I'll test copying the kitchen sink to test, but my (likely incomplete) understanding is I only need those two dirs.</span></div><div class="line" id="211128"><span class="nick" style="color:#8dd3c7"><a href="#211128" label="[21:11:28]">&lt;stikonas&gt;</a></span><span class="message">I would guess so (just x86 and M2libc...)</span></div><div class="line" id="211157"><span class="nick" style="color:#8dd3c7"><a href="#211157" label="[21:11:57]">&lt;stikonas&gt;</a></span><span class="message">I don't see anything bad with openat syscalls...</span></div><div class="line" id="211530"><span class="nick" style="color:#6c3d55"><a href="#211530" label="[21:15:30]">&lt;lrvick&gt;</a></span><span class="message">Good to know I am not doing something super obviously dumb, though that would have led to a faster answer ^_^</span></div><div class="line" id="211834"><span class="nick" style="color:#6c3d55"><a href="#211834" label="[21:18:34]">&lt;lrvick&gt;</a></span><span class="message">Okay yeah, copying the whole stage0 tree over to / had no impact</span></div><div class="line" id="211840"><span class="nick" style="color:#8dd3c7"><a href="#211840" label="[21:18:40]">&lt;stikonas&gt;</a></span><span class="message">hmm, now I ran both with -e opeat,execve</span></div><div class="line" id="211856"><span class="nick" style="color:#8dd3c7"><a href="#211856" label="[21:18:56]">&lt;stikonas&gt;</a></span><span class="message">and I don't see script generator opening anything at all</span></div><div class="line" id="211935"><span class="nick" style="color:#8dd3c7"><a href="#211935" label="[21:19:35]">&lt;stikonas&gt;</a></span><span class="message">maybe I should do -ff to get split logs...</span></div><div class="line" id="212006"><span class="nick" style="color:#8dd3c7"><a href="#212006" label="[21:20:06]">&lt;stikonas&gt;</a></span><span class="message">will be easier to read...</span></div><div class="line" id="212628"><span class="nick" style="color:#8dd3c7"><a href="#212628" label="[21:26:28]">&lt;stikonas&gt;</a></span><span class="message">lrvick: yes, it is missing a file</span></div><div class="line" id="212629"><span class="nick" style="color:#8dd3c7"><a href="#212629" label="[21:26:29]">&lt;stikonas&gt;</a></span><span class="message">open(&quot;/steps/lwext4-1.0.0-lb1/files/fiwix-file-list.txt&quot;, O_RDONLY) = -1 ENOENT</span></div><div class="line" id="212734"><span class="nick" style="color:#6c3d55"><a href="#212734" label="[21:27:34]">&lt;lrvick&gt;</a></span><span class="message">that is way deeper in the tree than I have interacted with</span></div><div class="line" id="212743"><span class="nick" style="color:#6c3d55"><a href="#212743" label="[21:27:43]">&lt;lrvick&gt;</a></span><span class="message">other files exist in that folder</span></div><div class="line" id="212754"><span class="nick" style="color:#6c3d55"><a href="#212754" label="[21:27:54]">&lt;lrvick&gt;</a></span><span class="message">where does that come from?</span></div><div class="line" id="212833"><span class="nick" style="color:#8dd3c7"><a href="#212833" label="[21:28:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, possibly rootfs.py creates it</span></div><div class="line" id="212841"><span class="nick" style="color:#6c3d55"><a href="#212841" label="[21:28:41]">&lt;lrvick&gt;</a></span><span class="message">which I skip</span></div><div class="line" id="212843"><span class="nick" style="color:#6c3d55"><a href="#212843" label="[21:28:43]">&lt;lrvick&gt;</a></span><span class="message">ACTION looks</span></div><div class="line" id="212844"><span class="nick" style="color:#8dd3c7"><a href="#212844" label="[21:28:44]">&lt;stikonas&gt;</a></span><span class="message">recently fossy refactored live-bootstrap alot</span></div><div class="line" id="212902"><span class="nick" style="color:#6c3d55"><a href="#212902" label="[21:29:02]">&lt;lrvick&gt;</a></span><span class="message">Yeah, looks like I made it just in time to kick the tires on the less-trodden paths post refactor</span></div><div class="line" id="212929"><span class="nick" style="color:#8dd3c7"><a href="#212929" label="[21:29:29]">&lt;stikonas&gt;</a></span><span class="message">and it's not mentioned in the Readme (in the pythonless section)</span></div><div class="line" id="212946"><span class="nick" style="color:#6c3d55"><a href="#212946" label="[21:29:46]">&lt;lrvick&gt;</a></span><span class="message">the the bug might not be by brain this time</span></div><div class="line" id="212955"><span class="nick" style="color:#6c3d55"><a href="#212955" label="[21:29:55]">&lt;lrvick&gt;</a></span><span class="message">my*</span></div><div class="line" id="213037"><span class="nick" style="color:#6c3d55"><a href="#213037" label="[21:30:37]">&lt;lrvick&gt;</a></span><span class="message">in addition to suiting my own needs, this docker setup might become a useful end to end test suite...</span></div><div class="line" id="213201"><span class="nick" style="color:#6c3d55"><a href="#213201" label="[21:32:01]">&lt;lrvick&gt;</a></span><span class="message">no mention in the readme of making a manual bootstrap.cfg either but that one I got a useful error on so easy to work out</span></div><div class="line" id="213255"><span class="nick" style="color:#8dd3c7"><a href="#213255" label="[21:32:55]">&lt;stikonas&gt;</a></span><span class="message">well, you can send a PR with readme updates...</span></div><div class="line" id="213441"><span class="nick" style="color:#6c3d55"><a href="#213441" label="[21:34:41]">&lt;lrvick&gt;</a></span><span class="message">Yeah for sure. Once a working path is confirmed :D</span></div><div class="line" id="213616"><span class="nick" style="color:#6c3d55"><a href="#213616" label="[21:36:16]">&lt;lrvick&gt;</a></span><span class="message">here we go</span></div><div class="line" id="213627"><span class="nick" style="color:#6c3d55"><a href="#213627" label="[21:36:27]">&lt;lrvick&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/55ad47acd764a909e0f337bce322abd346d963fa/lib/generator.py#L137">https://github.com/fosslinux/live-bootstrap/blob/55ad47acd764a909e0f337bce322abd346d963fa/lib/generator.py#L137</a> </span></div><div class="line" id="213712"><span class="nick" style="color:#6c3d55"><a href="#213712" label="[21:37:12]">&lt;lrvick&gt;</a></span><span class="message">okay so I need to replicate that in shell. easy enough</span></div><div class="line" id="214007"><span class="nick" style="color:#6c3d55"><a href="#214007" label="[21:40:07]">&lt;lrvick&gt;</a></span><span class="message">also what strace incantation ended up being most useful for you there to find that</span></div><div class="line" id="214045"><span class="nick" style="color:#6c3d55"><a href="#214045" label="[21:40:45]">&lt;lrvick&gt;</a></span><span class="message">I assume you were just wrapping podman in strace ff?</span></div><div class="line" id="214056"><span class="nick" style="color:#6c3d55"><a href="#214056" label="[21:40:56]">&lt;lrvick&gt;</a></span><span class="message">never tried stracing from -outside- the container</span></div><div class="line" id="214057"><span class="nick" style="color:#8dd3c7"><a href="#214057" label="[21:40:57]">&lt;stikonas&gt;</a></span><span class="message">lrvick: I just ran strace -ff -o logs/logs</span></div><div class="line" id="214101"><span class="nick" style="color:#8dd3c7"><a href="#214101" label="[21:41:01]">&lt;stikonas&gt;</a></span><span class="message">on the whole docker process</span></div><div class="line" id="214112"><span class="nick" style="color:#8dd3c7"><a href="#214112" label="[21:41:12]">&lt;stikonas&gt;</a></span><span class="message">initially I did -f but that creates just one log with everything</span></div><div class="line" id="214117"><span class="nick" style="color:#8dd3c7"><a href="#214117" label="[21:41:17]">&lt;stikonas&gt;</a></span><span class="message">-ff creates one file per process</span></div><div class="line" id="214120"><span class="nick" style="color:#8dd3c7"><a href="#214120" label="[21:41:20]">&lt;stikonas&gt;</a></span><span class="message">so much easier to read</span></div><div class="line" id="214131"><span class="nick" style="color:#8dd3c7"><a href="#214131" label="[21:41:31]">&lt;stikonas&gt;</a></span><span class="message">just had to find file that corresponds to script-generator</span></div><div class="line" id="214139"><span class="nick" style="color:#8dd3c7"><a href="#214139" label="[21:41:39]">&lt;stikonas&gt;</a></span><span class="message">my initial mistake was filtering on openat</span></div><div class="line" id="214203"><span class="nick" style="color:#6c3d55"><a href="#214203" label="[21:42:03]">&lt;lrvick&gt;</a></span><span class="message">I don't know that this would work with docker given the socket indirection, but not sure how podman does process forking</span></div><div class="line" id="214210"><span class="nick" style="color:#8dd3c7"><a href="#214210" label="[21:42:10]">&lt;stikonas&gt;</a></span><span class="message">M2libs was calling open and not openat</span></div><div class="line" id="214240"><span class="nick" style="color:#8dd3c7"><a href="#214240" label="[21:42:40]">&lt;stikonas&gt;</a></span><span class="message">processes for mas normal</span></div><div class="line" id="214248"><span class="nick" style="color:#8dd3c7"><a href="#214248" label="[21:42:48]">&lt;stikonas&gt;</a></span><span class="message">s/for mas/fork as/</span></div><div class="line" id="214310"><span class="nick" style="color:#8dd3c7"><a href="#214310" label="[21:43:10]">&lt;stikonas&gt;</a></span><span class="message">it's just that they are in a separate mount namespace</span></div><div class="line" id="214351"><span class="nick" style="color:#8dd3c7"><a href="#214351" label="[21:43:51]">&lt;stikonas&gt;</a></span><span class="message">anyway, I ran &quot;strace -o logs/logs -ff /usr/bin/docker build -t local/live:latest --build-arg REGISTRY=local --platform linux/amd64 --progress=plain  src/bootstrap/live&quot;</span></div><div class="line" id="214519"><span class="nick" style="color:#8dd3c7"><a href="#214519" label="[21:45:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, that's quite pleasant to debug compared to stage0-uefi...</span></div><div class="line" id="214539"><span class="nick" style="color:#8dd3c7"><a href="#214539" label="[21:45:39]">&lt;stikonas&gt;</a></span><span class="message">maybe it's possible to wire in gdb there too, but it's non-trivial</span></div><div class="line" id="214548"><span class="nick" style="color:#8dd3c7"><a href="#214548" label="[21:45:48]">&lt;stikonas&gt;</a></span><span class="message">so I was mostly debugging that with return condes</span></div><div class="line" id="214551"><span class="nick" style="color:#8dd3c7"><a href="#214551" label="[21:45:51]">&lt;stikonas&gt;</a></span><span class="message">return codes</span></div><div class="line" id="214600"><span class="nick" style="color:#6c3d55"><a href="#214600" label="[21:46:00]">&lt;lrvick&gt;</a></span><span class="message">actually, isn't fiwix only relevant for the live-boot use case vs baremetal or chroot?</span></div><div class="line" id="214616"><span class="nick" style="color:#6c3d55"><a href="#214616" label="[21:46:16]">&lt;lrvick&gt;</a></span><span class="message">Thanks, those are good tips</span></div><div class="line" id="214617"><span class="nick" style="color:#8dd3c7"><a href="#214617" label="[21:46:17]">&lt;stikonas&gt;</a></span><span class="message">lrvick: yeah, it's only relevant to baremetal bootstrap</span></div><div class="line" id="214706"><span class="nick" style="color:#8dd3c7"><a href="#214706" label="[21:47:06]">&lt;stikonas&gt;</a></span><span class="message">lrvick: you could try fixing that crash in script-generator...</span></div><div class="line" id="214723"><span class="nick" style="color:#6c3d55"><a href="#214723" label="[21:47:23]">&lt;lrvick&gt;</a></span><span class="message">So then the actual issue is I should be skipping looking at fiwix at all with my config</span></div><div class="line" id="214729"><span class="nick" style="color:#8dd3c7"><a href="#214729" label="[21:47:29]">&lt;stikonas&gt;</a></span><span class="message">i.e. print a useful error message rather than crash</span></div><div class="line" id="214734"><span class="nick" style="color:#8dd3c7"><a href="#214734" label="[21:47:34]">&lt;stikonas&gt;</a></span><span class="message">when files are not found...</span></div><div class="line" id="215107"><span class="nick" style="color:#6c3d55"><a href="#215107" label="[21:51:07]">&lt;lrvick&gt;</a></span><span class="message">I suck at C, but that sounds easy enough</span></div><div class="line" id="215220"><span class="nick" style="color:#6c3d55"><a href="#215220" label="[21:52:20]">&lt;lrvick&gt;</a></span><span class="message">Ah, I didn't want the tooling to actually try to use a chroot in the container, so my config is BARE_METAL=True, but then that tries to do fwix and other things not relevant to me.</span></div><div class="line" id="215333"><span class="nick" style="color:#6c3d55"><a href="#215333" label="[21:53:33]">&lt;lrvick&gt;</a></span><span class="message">I basically need the chroot path, without actually doing a chroot pivot since the container covers that</span></div><div class="line" id="215402"><span class="nick" style="color:#6c3d55"><a href="#215402" label="[21:54:02]">&lt;lrvick&gt;</a></span><span class="message">so maybe creating a &quot;container&quot; path is the right call here.</span></div><div class="line" id="215556"><span class="nick" style="color:#6c3d55"><a href="#215556" label="[21:55:56]">&lt;lrvick&gt;</a></span><span class="message">going to let it try the chroot path the vanilla way and see if everything is happy, then try ripping out the actual chroot pivot with a flag</span></div><div class="line" id="231028"><span class="nick" style="color:#8dd3c7"><a href="#231028" label="[23:10:28]">&lt;stikonas&gt;</a></span><span class="message">no, you definitely don't want BARE_METAL=true...</span></div><div class="line" id="231114"><span class="nick" style="color:#8dd3c7"><a href="#231114" label="[23:11:14]">&lt;stikonas&gt;</a></span><span class="message">that is either for real bare metal or at the very least qemu mode</span></div><div class="line" id="231737"><span class="nick" style="color:#6d2462"><a href="#231737" label="[23:17:37]">&lt;GoogulatorMobile&gt;</a></span><span class="message">stikonas: GitHub draft comment embedded image trick</span></div><div class="line" id="232106"><span class="nick" style="color:#6d2462"><a href="#232106" label="[23:21:06]">&lt;GoogulatorMobile&gt;</a></span><span class="message">By writing a draft comment, embedding an image, and clicking Preview, images can be uploaded to GitHub, and they persist (at least for some time) even after you discard the draft</span></div><div class="line" id="232153"><span class="nick" style="color:#6d2462"><a href="#232153" label="[23:21:53]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I meant to do that on googulator/live-bootstrap, but accidentally uploaded under fosslinux/live-bootstrap instead</span></div><div class="line" id="232300"><span class="nick" style="color:#6d2462"><a href="#232300" label="[23:23:00]">&lt;GoogulatorMobile&gt;</a></span><span class="message">BTW, I wasn't thinking of Pine64, but pine, the e-mail client</span></div><div class="line" id="232356"><span class="nick" style="color:#8dd3c7"><a href="#232356" label="[23:23:56]">&lt;stikonas&gt;</a></span><span class="message">that pine was replaced by alpine some time ago...</span></div><div class="line" id="232415"><span class="nick" style="color:#8dd3c7"><a href="#232415" label="[23:24:15]">&lt;stikonas&gt;</a></span><span class="message">(not to be confused with distro)</span></div><div class="line" id="233114"><span class="nick" style="color:#6d2462"><a href="#233114" label="[23:31:14]">&lt;GoogulatorMobile&gt;</a></span><span class="message">hmm, looked more at this image upload trick, it's a lot more exploitable than I thought</span></div><div class="line" id="233125"><span class="nick" style="color:#6d2462"><a href="#233125" label="[23:31:25]">&lt;GoogulatorMobile&gt;</a></span><span class="message">maybe it would be wise to report it to GitHub</span></div><div class="line" id="233145"><span class="nick" style="color:#6d2462"><a href="#233145" label="[23:31:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">it's possible to upload arbitrary binaries under any public repo, not even just images</span></div><div class="line" id="233605"><span class="nick" style="color:#8dd3c7"><a href="#233605" label="[23:36:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: you only added $ immediates to M1, not M0?</span></div><div class="line" id="233610"><span class="nick" style="color:#8dd3c7"><a href="#233610" label="[23:36:10]">&lt;stikonas&gt;</a></span><span class="message">at leastt that's my reading of the code</span></div><div class="line" id="233620"><span class="nick" style="color:#8dd3c7"><a href="#233620" label="[23:36:20]">&lt;stikonas&gt;</a></span><span class="message">in cc_amd64.M1 I should still use @</span></div><br /></div></body></html>