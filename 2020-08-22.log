<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-08-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="012508"><span class="nick" style="color:#8dd3c7"><a href="#012508" label="[01:25:08]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: I would take some time to review it first but I always accept patches provided they don't introduce issues.</span></div><div class="line" id="013139"><span class="nick" style="color:#8dd3c7"><a href="#013139" label="[01:31:39]">&lt;OriansJ`&gt;</a></span><span class="message">mihi: actually the crc32 of an empty file is 00000000 but the crc32 of those same zeros is 2144df1c and appending that produces a file with a crc32 of 189eb7b1 (stage0's hex and xeh make it very easy to build such files)</span></div><div class="line" id="013221"><span class="nick">***</span><span class="message notice">terpri_ is now known as terpri</span></div><div class="line" id="014243"><span class="nick" style="color:#8dd3c7"><a href="#014243" label="[01:42:43]">&lt;OriansJ`&gt;</a></span><span class="message">now doing FFFFFFFF does get a crc32 of FFFFFFFF but doing FFFFFFFFFFFFFFFF gets a crc32 of 2144df1c but FFFFFFFF00000000 gives us a crc32 of FFFFFFFF still</span></div><div class="line" id="021203"><span class="nick" style="color:#8dd3c7"><a href="#021203" label="[02:12:03]">&lt;OriansJ`&gt;</a></span><span class="message">mihi: you are probably right if we just get the bits at the start of the file and the crc32 for the rest of the file to equal 00000000; then the crc32 will match; we can probably use half of the padding to make it happen for arbitrary rest of files.</span></div><div class="line" id="021304"><span class="nick" style="color:#8dd3c7"><a href="#021304" label="[02:13:04]">&lt;OriansJ`&gt;</a></span><span class="message">I could possibly modify the crc32.c program I have to generate the needed values; although crc64 presents a much harder problem</span></div><div class="line" id="021910"><span class="nick" style="color:#8dd3c7"><a href="#021910" label="[02:19:10]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: hex1_x86's table is at max 958bytes (256*4) which when added to the 689bytes of binary is less than the 4KB page size; which means it can't hit unallocated memory</span></div><div class="line" id="022143"><span class="nick" style="color:#8dd3c7"><a href="#022143" label="[02:21:43]">&lt;OriansJ`&gt;</a></span><span class="message">hex2_x86.S sbrk's 8,192,000 should be larger than the amount of memory required to build cc_x86.S or mescc-tools' hex2; which does proper calloc</span></div><div class="line" id="031123"><span class="nick" style="color:#8dd3c7"><a href="#031123" label="[03:11:23]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: you are right about the names not being exactly correct. They were just sort of what felt good at the time I wrote it. So improvements and enhancements are of course welcome.</span></div><div class="line" id="032652"><span class="nick" style="color:#8dd3c7"><a href="#032652" label="[03:26:52]">&lt;OriansJ`&gt;</a></span><span class="message">2144df1c bit inverted is DEBB20E3 but appending that doesn't get the desired result but appending E320BBDE does (FFFFFFFF)</span></div><div class="line" id="095026"><span class="nick" style="color:#2e2a4a"><a href="#095026" label="[09:50:26]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: if &quot;defeating&quot; crc is as easy as inverting a qword and shuffling it around a bit, then it is trivial for a backdoor to do</span></div><div class="line" id="095049"><span class="nick" style="color:#2e2a4a"><a href="#095049" label="[09:50:49]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: so i'm not really sure if embedding the hash / checksum in the binary itself and having it self-verify will do very much</span></div><div class="line" id="095123"><span class="nick" style="color:#2e2a4a"><a href="#095123" label="[09:51:23]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: comparing (and differential compilation) and a sha256sum program however could probably go a lot further</span></div><div class="line" id="095714"><span class="nick" style="color:#2e2a4a"><a href="#095714" label="[09:57:14]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: i was under the impression that hex1 uses 8 bytes per entry resulting in 256 * 8 = 2048 (still under the page size)</span></div><div class="line" id="095855"><span class="nick" style="color:#2e2a4a"><a href="#095855" label="[09:58:55]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: and i kind of want to modify hex1 to only allow printable ascii characters as labels</span></div><div class="line" id="121501"><span class="nick" style="color:#8dd3c7"><a href="#121501" label="[12:15:01]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: true however crc was just an example of a checksum we could put in the 8bytes available in the ELF header; finding an alternate checksum that is more computationally expensive would however probably be the better course of action.</span></div><div class="line" id="121720"><span class="nick" style="color:#8dd3c7"><a href="#121720" label="[12:17:20]">&lt;OriansJ`&gt;</a></span><span class="message">probably right about it not doing much, as it is to just increase the amount of work/functionality that an attacker putting in a backdoor would need to handle. Thus making the hiding of the backdoor impossible at the individual ELF level (save for in something big like the kernel)</span></div><div class="line" id="121854"><span class="nick" style="color:#8dd3c7"><a href="#121854" label="[12:18:54]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: 4bytes is the size of a register in x86 but yes in AMD64 the register size is 8bytes and thus the entries in hex1 are 8bytes in size.</span></div><div class="line" id="122115"><span class="nick" style="color:#8dd3c7"><a href="#122115" label="[12:21:15]">&lt;OriansJ`&gt;</a></span><span class="message">I wouldn't put the printable ascii only requirement in hex1 but rather in the mescc-tools hex2 implementation (as it is just C code) and you could use hex2 to check hex1 binaries for such bad behavior and report where such things are found. hex1 itself is only supposed to be as large as required to get hex2 off the ground.</span></div><div class="line" id="122207"><span class="nick" style="color:#8dd3c7"><a href="#122207" label="[12:22:07]">&lt;OriansJ`&gt;</a></span><span class="message">eg smaller hex1 -&gt; better (as manually calculating offsets by hand sucks)</span></div><div class="line" id="123517"><span class="nick" style="color:#2e2a4a"><a href="#123517" label="[12:35:17]">&lt;bauen1&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/bauen1/mescc-tools-seed/commit/9a014284cea5eeaec0c9c6f7d8c0d13185c56c33">https://github.com/bauen1/mescc-tools-seed/commit/9a014284cea5eeaec0c9c6f7d8c0d13185c56c33</a> </span></div><div class="line" id="124105"><span class="nick" style="color:#2e2a4a"><a href="#124105" label="[12:41:05]">&lt;bauen1&gt;</a></span><span class="message">and a sort of backdoor into hex0-seed: <a rel="nofollow" href="https://gitlab.com/bauen1/stage0-backdoor">https://gitlab.com/bauen1/stage0-backdoor</a> </span></div><div class="line" id="124140"><span class="nick" style="color:#2e2a4a"><a href="#124140" label="[12:41:40]">&lt;bauen1&gt;</a></span><span class="message">currently expects a slightly patched source code so syscalls follow the format `B8 beefbeef 0F05`</span></div><div class="line" id="124224"><span class="nick" style="color:#2e2a4a"><a href="#124224" label="[12:42:24]">&lt;bauen1&gt;</a></span><span class="message">and doesn't really work with anything that tries to write past its own memory (according to p_memsz / p_filesz)</span></div><div class="line" id="125054"><span class="nick" style="color:#6b8072"><a href="#125054" label="[12:50:54]">&lt;dannym&gt;</a></span><span class="message">janneke: If you have the time can you show me how to compile your fork of tinycc? (on GNU Mes for ARM)</span></div><div class="line" id="125819"><span class="nick" style="color:#80b1d3"><a href="#125819" label="[12:58:19]">&lt;janneke&gt;</a></span><span class="message">dannym: yeah, sure -- it's been a while since i did that for x86 and never did it yet for ARM</span></div><div class="line" id="125857"><span class="nick" style="color:#80b1d3"><a href="#125857" label="[12:58:57]">&lt;janneke&gt;</a></span><span class="message">i think it involved some silly changing of commented sections in a build script -- let me have a look</span></div><div class="line" id="130955"><span class="nick" style="color:#80b1d3"><a href="#130955" label="[13:09:55]">&lt;janneke&gt;</a></span><span class="message">dannym: i had MES_PREFIX point to a pre-built mes directory, because working on tcc often meant also changing stuff in mes, or adding tests</span></div><div class="line" id="131006"><span class="nick" style="color:#6b8072"><a href="#131006" label="[13:10:06]">&lt;dannym&gt;</a></span><span class="message">janneke: Right now I'm trying to use: tcc-0.9.26-1103-g6e62e0e$ ./doit</span></div><div class="line" id="131014"><span class="nick" style="color:#6b8072"><a href="#131014" label="[13:10:14]">&lt;dannym&gt;</a></span><span class="message">janneke: I get: /bin/sh: 1: etags: not found</span></div><div class="line" id="131101"><span class="nick" style="color:#6b8072"><a href="#131101" label="[13:11:01]">&lt;dannym&gt;</a></span><span class="message">janneke: What package is etags in?  Also, why do we need it for tcc?  Also, does this script set up the guix environment or not?</span></div><div class="line" id="131322"><span class="nick" style="color:#80b1d3"><a href="#131322" label="[13:13:22]">&lt;janneke&gt;</a></span><span class="message">you don't need etags; that's for emacs source code navigation</span></div><div class="line" id="131411"><span class="nick" style="color:#6b8072"><a href="#131411" label="[13:14:11]">&lt;dannym&gt;</a></span><span class="message">janneke: Well, ./doit seems to need it</span></div><div class="line" id="131546"><span class="nick" style="color:#80b1d3"><a href="#131546" label="[13:15:46]">&lt;janneke&gt;</a></span><span class="message">weird; via &quot;configure/make&quot; maybe</span></div><div class="line" id="131611"><span class="nick" style="color:#6b8072"><a href="#131611" label="[13:16:11]">&lt;dannym&gt;</a></span><span class="message">+ ./configure --tccdir=/home/dannym/src/mes-tinycc/tcc-0.9.26-1103-g6e62e0e --crtprefix= '--extra-cflags=-DHAVE_FLOAT=1 -DHAVE_BITFIELD=1'</span></div><div class="line" id="131617"><span class="nick" style="color:#6b8072"><a href="#131617" label="[13:16:17]">&lt;dannym&gt;</a></span><span class="message">Creating config.mak and config.h</span></div><div class="line" id="131617"><span class="nick" style="color:#6b8072"><a href="#131617" label="[13:16:17]">&lt;dannym&gt;</a></span><span class="message">config.h is unchanged</span></div><div class="line" id="131617"><span class="nick" style="color:#6b8072"><a href="#131617" label="[13:16:17]">&lt;dannym&gt;</a></span><span class="message">+ make ETAGS</span></div><div class="line" id="131703"><span class="nick" style="color:#80b1d3"><a href="#131703" label="[13:17:03]">&lt;janneke&gt;</a></span><span class="message">ah, that's in build-gcc.sh</span></div><div class="line" id="131739"><span class="nick" style="color:#80b1d3"><a href="#131739" label="[13:17:39]">&lt;janneke&gt;</a></span><span class="message">you can remove that</span></div><div class="line" id="131747"><span class="nick" style="color:#6b8072"><a href="#131747" label="[13:17:47]">&lt;dannym&gt;</a></span><span class="message">janneke: Ok, removed it</span></div><div class="line" id="131751"><span class="nick" style="color:#6b8072"><a href="#131751" label="[13:17:51]">&lt;dannym&gt;</a></span><span class="message">janneke: Thanks!</span></div><div class="line" id="131803"><span class="nick" style="color:#6b8072"><a href="#131803" label="[13:18:03]">&lt;dannym&gt;</a></span><span class="message">janneke: Hmm, it seems to use gcc to compile tcc and not mescc ?</span></div><div class="line" id="131816"><span class="nick" style="color:#80b1d3"><a href="#131816" label="[13:18:16]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="131849"><span class="nick" style="color:#80b1d3"><a href="#131849" label="[13:18:49]">&lt;janneke&gt;</a></span><span class="message">most of the work in tcc meant: instrumenting the tcc code with tracing, build with gcc and mescc, run both and compare traces</span></div><div class="line" id="131905"><span class="nick" style="color:#80b1d3"><a href="#131905" label="[13:19:05]">&lt;janneke&gt;</a></span><span class="message">so &quot;doit&quot; helps with automating that, i guess</span></div><div class="line" id="131938"><span class="nick" style="color:#6b8072"><a href="#131938" label="[13:19:38]">&lt;dannym&gt;</a></span><span class="message">cp mes-source/gcc-lib/libc+tcc.a .</span></div><div class="line" id="131939"><span class="nick" style="color:#6b8072"><a href="#131939" label="[13:19:39]">&lt;dannym&gt;</a></span><span class="message">cp: cannot stat 'mes-source/gcc-lib/libc+tcc.a': No such file or directory</span></div><div class="line" id="131955"><span class="nick" style="color:#6b8072"><a href="#131955" label="[13:19:55]">&lt;dannym&gt;</a></span><span class="message">*makes symlink*</span></div><div class="line" id="132006"><span class="nick" style="color:#6b8072"><a href="#132006" label="[13:20:06]">&lt;dannym&gt;</a></span><span class="message">I already made one with target ../mes</span></div><div class="line" id="132013"><span class="nick" style="color:#6b8072"><a href="#132013" label="[13:20:13]">&lt;dannym&gt;</a></span><span class="message">source*</span></div><div class="line" id="132018"><span class="nick" style="color:#80b1d3"><a href="#132018" label="[13:20:18]">&lt;janneke&gt;</a></span><span class="message">good</span></div><div class="line" id="132045"><span class="nick" style="color:#6b8072"><a href="#132045" label="[13:20:45]">&lt;dannym&gt;</a></span><span class="message">cp: cannot stat 'mes-source/gcc-lib/libtcc1.a': No such file or directory</span></div><div class="line" id="132057"><span class="nick" style="color:#80b1d3"><a href="#132057" label="[13:20:57]">&lt;janneke&gt;</a></span><span class="message">as you come to see, these scripts are of throwaway/edit-when-needed quality (or less)</span></div><div class="line" id="132138"><span class="nick" style="color:#80b1d3"><a href="#132138" label="[13:21:38]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="132141"><span class="nick" style="color:#80b1d3"><a href="#132141" label="[13:21:41]">&lt;janneke&gt;</a></span><span class="message">13:21:09 janneke@dundal:~/src/mes/wip-arm</span></div><div class="line" id="132141"><span class="nick" style="color:#80b1d3"><a href="#132141" label="[13:21:41]">&lt;janneke&gt;</a></span><span class="message">$ find . -name libtcc1.a</span></div><div class="line" id="132141"><span class="nick" style="color:#80b1d3"><a href="#132141" label="[13:21:41]">&lt;janneke&gt;</a></span><span class="message">./mescc-lib/arm-mes/libtcc1.a</span></div><div class="line" id="132143"><span class="nick" style="color:#80b1d3"><a href="#132143" label="[13:21:43]">&lt;janneke&gt;</a></span><span class="message">./mescc-lib/libtcc1.a</span></div><div class="line" id="132210"><span class="nick" style="color:#80b1d3"><a href="#132210" label="[13:22:10]">&lt;janneke&gt;</a></span><span class="message">i also have ./gcc-lib/arm-mes/libtcc1.c</span></div><div class="line" id="132226"><span class="nick" style="color:#80b1d3"><a href="#132226" label="[13:22:26]">&lt;janneke&gt;</a></span><span class="message">but apparently we don't build it (anymore)</span></div><div class="line" id="132352"><span class="nick" style="color:#6b8072"><a href="#132352" label="[13:23:52]">&lt;dannym&gt;</a></span><span class="message">(env) dannym@banana:~/src/mes$ find -name &quot;libtcc1.*&quot;</span></div><div class="line" id="132352"><span class="nick" style="color:#6b8072"><a href="#132352" label="[13:23:52]">&lt;dannym&gt;</a></span><span class="message">./gcc-lib/arm-mes/libtcc1.c</span></div><div class="line" id="132352"><span class="nick" style="color:#6b8072"><a href="#132352" label="[13:23:52]">&lt;dannym&gt;</a></span><span class="message">./lib/libtcc1.c</span></div><div class="line" id="132649"><span class="nick" style="color:#80b1d3"><a href="#132649" label="[13:26:49]">&lt;janneke&gt;</a></span><span class="message">dannym: are we still configuring --with-courage?</span></div><div class="line" id="132705"><span class="nick" style="color:#80b1d3"><a href="#132705" label="[13:27:05]">&lt;janneke&gt;</a></span><span class="message">build-aux/build-lib.sh:</span></div><div class="line" id="132708"><span class="nick" style="color:#80b1d3"><a href="#132708" label="[13:27:08]">&lt;janneke&gt;</a></span><span class="message">if $courageous; then</span></div><div class="line" id="132709"><span class="nick" style="color:#80b1d3"><a href="#132709" label="[13:27:09]">&lt;janneke&gt;</a></span><span class="message">    exit 0</span></div><div class="line" id="132709"><span class="nick" style="color:#80b1d3"><a href="#132709" label="[13:27:09]">&lt;janneke&gt;</a></span><span class="message">fi</span></div><div class="line" id="132721"><span class="nick" style="color:#80b1d3"><a href="#132721" label="[13:27:21]">&lt;janneke&gt;</a></span><span class="message">(just before building libtcc1) -- to save time</span></div><div class="line" id="132741"><span class="nick" style="color:#6b8072"><a href="#132741" label="[13:27:41]">&lt;dannym&gt;</a></span><span class="message">janneke: Oh.  That explains a lot...</span></div><div class="line" id="132800"><span class="nick" style="color:#80b1d3"><a href="#132800" label="[13:28:00]">&lt;janneke&gt;</a></span><span class="message">the thinking was: --with-courage =&gt; port is not finished =&gt; don't waste time towards tcc yet</span></div><div class="line" id="132902"><span class="nick" style="color:#80b1d3"><a href="#132902" label="[13:29:02]">&lt;janneke&gt;</a></span><span class="message">i forgot, i was looking where to (re-)add libtcc1 build instructions and stumbled upon it just yet</span></div><div class="line" id="132917"><span class="nick" style="color:#6b8072"><a href="#132917" label="[13:29:17]">&lt;dannym&gt;</a></span><span class="message">janneke: *recompiles without --with-courage*</span></div><div class="line" id="132926"><span class="nick" style="color:#80b1d3"><a href="#132926" label="[13:29:26]">&lt;janneke&gt;</a></span><span class="message">dannym: what mes branch are you working on?</span></div><div class="line" id="132942"><span class="nick" style="color:#6b8072"><a href="#132942" label="[13:29:42]">&lt;dannym&gt;</a></span><span class="message">janneke: master</span></div><div class="line" id="133006"><span class="nick" style="color:#6b8072"><a href="#133006" label="[13:30:06]">&lt;dannym&gt;</a></span><span class="message">janneke: mescc for ARM backend has been finished for quite a while now</span></div><div class="line" id="133018"><span class="nick" style="color:#6b8072"><a href="#133018" label="[13:30:18]">&lt;dannym&gt;</a></span><span class="message">janneke: We can do another release of Mes, I guess</span></div><div class="line" id="133039"><span class="nick" style="color:#80b1d3"><a href="#133039" label="[13:30:39]">&lt;janneke&gt;</a></span><span class="message">yeah, i've been postponing that too long</span></div><div class="line" id="133042"><span class="nick" style="color:#6b8072"><a href="#133042" label="[13:30:42]">&lt;dannym&gt;</a></span><span class="message">janneke: However, I changed a few (very few) things for all archs on master, so we should retest guix bootstrap on x86 or something too</span></div><div class="line" id="133107"><span class="nick" style="color:#80b1d3"><a href="#133107" label="[13:31:07]">&lt;janneke&gt;</a></span><span class="message">guess we want some bug reports from vagrantc to be addressed and then make a release</span></div><div class="line" id="133206"><span class="nick" style="color:#80b1d3"><a href="#133206" label="[13:32:06]">&lt;janneke&gt;</a></span><span class="message">yeah, sure -- i also seem to remember some minor breakage (x86_64?)</span></div><div class="line" id="133216"><span class="nick" style="color:#80b1d3"><a href="#133216" label="[13:32:16]">&lt;janneke&gt;</a></span><span class="message">that was to be expected with such a major operation</span></div><div class="line" id="133242"><span class="nick" style="color:#6b8072"><a href="#133242" label="[13:32:42]">&lt;dannym&gt;</a></span><span class="message">janneke: My non-ARM-specific changes in master are: lib/mes/ntoab.c (ntoab), build-aux: Increase test timeout to 20 s., core: Fix unreadchar on string port when unreading EOF., test: Test signed division.,</span></div><div class="line" id="133347"><span class="nick" style="color:#80b1d3"><a href="#133347" label="[13:33:47]">&lt;janneke&gt;</a></span><span class="message">yes, i didn't really worry about that -- just being accurate and thourough with testing is not something that comes natural to me ;)</span></div><div class="line" id="133351"><span class="nick" style="color:#6b8072"><a href="#133351" label="[13:33:51]">&lt;dannym&gt;</a></span><span class="message">janneke: I also made the __syscall things available for non-libc targets so we can use it when dividing by 0</span></div><div class="line" id="133358"><span class="nick" style="color:#6d2462"><a href="#133358" label="[13:33:58]">*</a></span><span class="message">janneke loves guix</span></div><div class="line" id="133411"><span class="nick" style="color:#80b1d3"><a href="#133411" label="[13:34:11]">&lt;janneke&gt;</a></span><span class="message">ah yes, that's great</span></div><div class="line" id="133424"><span class="nick" style="color:#6b8072"><a href="#133424" label="[13:34:24]">&lt;dannym&gt;</a></span><span class="message">janneke: (which was basically just cut&amp;paste)</span></div><div class="line" id="133428"><span class="nick" style="color:#6b8072"><a href="#133428" label="[13:34:28]">&lt;dannym&gt;</a></span><span class="message">into new files</span></div><div class="line" id="133508"><span class="nick" style="color:#6b8072"><a href="#133508" label="[13:35:08]">&lt;dannym&gt;</a></span><span class="message">Which then makes it into (new) libmescc.a</span></div><div class="line" id="133849"><span class="nick" style="color:#80b1d3"><a href="#133849" label="[13:38:49]">&lt;janneke&gt;</a></span><span class="message">right, i remember</span></div><div class="line" id="134141"><span class="nick" style="color:#80b1d3"><a href="#134141" label="[13:41:41]">&lt;janneke&gt;</a></span><span class="message">hmm, HACKING on mes only talks about x86, and PORTING doesn't use (guix/git/mes.scm's) mescc-tools-0.7 yet</span></div><div class="line" id="134155"><span class="nick" style="color:#6d2462"><a href="#134155" label="[13:41:55]">*</a></span><span class="message">janneke tries to play along a bit</span></div><div class="line" id="134224"><span class="nick" style="color:#80b1d3"><a href="#134224" label="[13:42:24]">&lt;janneke&gt;</a></span><span class="message">it would be great if we could remove all junk and make it so that a next port is easier to get into</span></div><div class="line" id="134258"><span class="nick" style="color:#6d2462"><a href="#134258" label="[13:42:58]">*</a></span><span class="message">janneke runs guix environment -s armhf-linux --pure --ad-hoc bash coreutils diffutils gawk gcc-toolchain grep guile help2man make nyacc pkg-config sed texinfo mescc-tools</span></div><div class="line" id="134817"><span class="nick" style="color:#6b8072"><a href="#134817" label="[13:48:17]">&lt;dannym&gt;</a></span><span class="message">janneke: You have an account janneke@banana.pyramid.dynv6.net on the ARM build server btw; but yeah, we can make sure that it works on transparent enumation, too (everything should work fine there by now)</span></div><div class="line" id="134846"><span class="nick" style="color:#80b1d3"><a href="#134846" label="[13:48:46]">&lt;janneke&gt;</a></span><span class="message">ah, sure -- i should use that!</span></div><div class="line" id="135204"><span class="nick" style="color:#6b8072"><a href="#135204" label="[13:52:04]">&lt;dannym&gt;</a></span><span class="message">janneke: By now, you can also use &quot;guix environment -s armhf-linux&quot; on x86_64 and everything should just work</span></div><div class="line" id="135227"><span class="nick" style="color:#6b8072"><a href="#135227" label="[13:52:27]">&lt;dannym&gt;</a></span><span class="message">janneke: (Good if someone tests that, too)</span></div><div class="line" id="135314"><span class="nick" style="color:#6b8072"><a href="#135314" label="[13:53:14]">&lt;dannym&gt;</a></span><span class="message">In unknown file:</span></div><div class="line" id="135319"><span class="nick" style="color:#6b8072"><a href="#135319" label="[13:53:19]">&lt;dannym&gt;</a></span><span class="message">           1 (scm-error misc-error #f &quot;~A ~S&quot; (&quot;unhandled consta?&quot; ?) ?)</span></div><div class="line" id="135323"><span class="nick" style="color:#6b8072"><a href="#135323" label="[13:53:23]">&lt;dannym&gt;</a></span><span class="message">unhandled constant #&lt;procedure &gt;= (#:optional _ _ . _)&gt;</span></div><div class="line" id="135355"><span class="nick" style="color:#6b8072"><a href="#135355" label="[13:53:55]">&lt;dannym&gt;</a></span><span class="message">Uhhh</span></div><div class="line" id="135424"><span class="nick" style="color:#80b1d3"><a href="#135424" label="[13:54:24]">&lt;janneke&gt;</a></span><span class="message">ugh</span></div><div class="line" id="140005"><span class="nick" style="color:#6b8072"><a href="#140005" label="[14:00:05]">&lt;dannym&gt;</a></span><span class="message">(Sounds like a guile thing; maybe need to clean more after make clean)</span></div><div class="line" id="140215"><span class="nick" style="color:#6b8072"><a href="#140215" label="[14:02:15]">&lt;dannym&gt;</a></span><span class="message">After make clean, ./module/mescc/armv4/info.go and ./module/mescc/armv4/as.go are still there</span></div><div class="line" id="140725"><span class="nick" style="color:#80b1d3"><a href="#140725" label="[14:07:25]">&lt;janneke&gt;</a></span><span class="message">dannym: ah, see build-aux/GNUmakefile.in</span></div><div class="line" id="140755"><span class="nick" style="color:#80b1d3"><a href="#140755" label="[14:07:55]">&lt;janneke&gt;</a></span><span class="message">the clean target needs to be amended</span></div><div class="line" id="140823"><span class="nick" style="color:#80b1d3"><a href="#140823" label="[14:08:23]">&lt;janneke&gt;</a></span><span class="message">(there are simpler  'clean-go' and 'all-go' targets)</span></div><div class="line" id="141130"><span class="nick" style="color:#6b8072"><a href="#141130" label="[14:11:30]">&lt;dannym&gt;</a></span><span class="message">janneke: Pushed cleaning fix; rebuilt; now the error message is gone, but it still fails</span></div><div class="line" id="141155"><span class="nick" style="color:#6b8072"><a href="#141155" label="[14:11:55]">&lt;dannym&gt;</a></span><span class="message">*edits GNUmakefile to add &quot;-x&quot; to build target's $(SHELL) build.sh*</span></div><div class="line" id="142216"><span class="nick" style="color:#80b1d3"><a href="#142216" label="[14:22:16]">&lt;janneke&gt;</a></span><span class="message">hmm 'lib/linux/arm-mes-gcc/exit-42.S': No such file or directory</span></div><div class="line" id="143308"><span class="nick" style="color:#80b1d3"><a href="#143308" label="[14:33:08]">&lt;janneke&gt;</a></span><span class="message">ah -- wrong branch</span></div><div class="line" id="143751"><span class="nick" style="color:#80b1d3"><a href="#143751" label="[14:37:51]">&lt;janneke&gt;</a></span><span class="message">hmm -- no code for module (nyacc lang c99 pprint)</span></div><div class="line" id="143938"><span class="nick" style="color:#80b1d3"><a href="#143938" label="[14:39:38]">&lt;janneke&gt;</a></span><span class="message">ah, nyacc/we need guile-2.2</span></div><div class="line" id="144127"><span class="nick" style="color:#80b1d3"><a href="#144127" label="[14:41:27]">&lt;janneke&gt;</a></span><span class="message">this is better =&gt;    guix environment --system=armhf-linux --pure --ad-hoc bash coreutils diffutils gawk gcc-toolchain@7 grep git guile@2.2 help2man make mescc-tools nyacc openssh-sans-x pkg-config sed texinfo</span></div><div class="line" id="144842"><span class="nick" style="color:#80b1d3"><a href="#144842" label="[14:48:42]">&lt;janneke&gt;</a></span><span class="message">dannym: hmm, it seems guile wants something liken <a rel="nofollow" href="https://paste.debian.net/1160841/">https://paste.debian.net/1160841/</a> </span></div><div class="line" id="144857"><span class="nick" style="color:#80b1d3"><a href="#144857" label="[14:48:57]">&lt;janneke&gt;</a></span><span class="message">not sure what mes thinks about that, though</span></div><div class="line" id="144932"><span class="nick" style="color:#80b1d3"><a href="#144932" label="[14:49:32]">&lt;janneke&gt;</a></span><span class="message">(how wasn't this a problem before?)</span></div><div class="line" id="145015"><span class="nick" style="color:#80b1d3"><a href="#145015" label="[14:50:15]">&lt;janneke&gt;</a></span><span class="message">oh, numbers do not need to be unquoted either</span></div><div class="line" id="150906"><span class="nick" style="color:#6b8072"><a href="#150906" label="[15:09:06]">&lt;dannym&gt;</a></span><span class="message">janneke: Not sure why it wasn't a problem before--worked fine for a lot of mescc tests...</span></div><div class="line" id="150929"><span class="nick" style="color:#6b8072"><a href="#150929" label="[15:09:29]">&lt;dannym&gt;</a></span><span class="message">I think...</span></div><div class="line" id="150956"><span class="nick" style="color:#6b8072"><a href="#150956" label="[15:09:56]">&lt;dannym&gt;</a></span><span class="message">janneke: The unquote in the macro is basically because I hate spooky variable capture</span></div><div class="line" id="151032"><span class="nick" style="color:#6b8072"><a href="#151032" label="[15:10:32]">&lt;dannym&gt;</a></span><span class="message">janneke: Like, with a quoted &gt;= it would use whatever &gt;= is in the environment at the user site.  Ugh</span></div><div class="line" id="151048"><span class="nick" style="color:#6b8072"><a href="#151048" label="[15:10:48]">&lt;dannym&gt;</a></span><span class="message">janneke: Even the &quot;if&quot;... but I guess people don't overwrite that anyway</span></div><div class="line" id="151102"><span class="nick" style="color:#6b8072"><a href="#151102" label="[15:11:02]">&lt;dannym&gt;</a></span><span class="message">janneke: In any case, trying your change on banana...</span></div><div class="line" id="151127"><span class="nick" style="color:#80b1d3"><a href="#151127" label="[15:11:27]">&lt;janneke&gt;</a></span><span class="message">yeah, np for now -- i'm just curious</span></div><div class="line" id="160958"><span class="nick" style="color:#6d2462"><a href="#160958" label="[16:09:58]">*</a></span><span class="message">janneke is afk for a bit</span></div><div class="line" id="191203"><span class="nick" style="color:#6b8072"><a href="#191203" label="[19:12:03]">&lt;dannym&gt;</a></span><span class="message">janneke: lib/tests/scaffold/7l-struct-any-size-array-simple.c fails on ARM gcc and so does lib/tests/scaffold/7r-sign-extend.c on ARM gcc, both for obvious reasons.</span></div><div class="line" id="191245"><span class="nick" style="color:#6b8072"><a href="#191245" label="[19:12:45]">&lt;dannym&gt;</a></span><span class="message">janneke: (char is unsigned on ARM)</span></div><div class="line" id="191301"><span class="nick" style="color:#6b8072"><a href="#191301" label="[19:13:01]">&lt;dannym&gt;</a></span><span class="message">janneke: For 7r-sign-extend, gcc even warns: ./../lib/tests/scaffold/7r-sign-extend.c:64:23: warning: large integer implicitly truncated to unsigned type [-Woverflow]</span></div><div class="line" id="191301"><span class="nick" style="color:#6b8072"><a href="#191301" label="[19:13:01]">&lt;dannym&gt;</a></span><span class="message">     char a[2] = { -1, -129 };</span></div><div class="line" id="191301"><span class="nick" style="color:#6b8072"><a href="#191301" label="[19:13:01]">&lt;dannym&gt;</a></span><span class="message">                       ^</span></div><div class="line" id="191301"><span class="nick" style="color:#6b8072"><a href="#191301" label="[19:13:01]">&lt;dannym&gt;</a></span><span class="message">./../lib/tests/scaffold/7r-sign-extend.c:100:23: warning: large integer implicitly truncated to unsigned type [-Woverflow]</span></div><div class="line" id="191302"><span class="nick" style="color:#6b8072"><a href="#191302" label="[19:13:02]">&lt;dannym&gt;</a></span><span class="message">     unsigned char b = -129;</span></div><div class="line" id="191358"><span class="nick" style="color:#6b8072"><a href="#191358" label="[19:13:58]">&lt;dannym&gt;</a></span><span class="message">janneke: And on the 7l-struct-any-size-array-simple.c the struct field &quot;d&quot; is char.</span></div><div class="line" id="200057"><span class="nick" style="color:#80b1d3"><a href="#200057" label="[20:00:57]">&lt;janneke&gt;</a></span><span class="message">dannym: ah the unsigned char thing -- that was known, wasn't it?</span></div><div class="line" id="200204"><span class="nick" style="color:#6b8072"><a href="#200204" label="[20:02:04]">&lt;dannym&gt;</a></span><span class="message">janneke: Yes</span></div><div class="line" id="200302"><span class="nick" style="color:#6b8072"><a href="#200302" label="[20:03:02]">&lt;dannym&gt;</a></span><span class="message">janneke: I didn't want to fiddle around in 7l-struct-any-size-array-simple.c myself is because it's testing something else (the other struct members are int); I think it's trying to find out whether it's possible to have a char unaligned in a struct</span></div><div class="line" id="200331"><span class="nick" style="color:#6b8072"><a href="#200331" label="[20:03:31]">&lt;dannym&gt;</a></span><span class="message">janneke: I think it's an accident that the char is negative, or that it doesn't specify &quot;signed char&quot; (in which case it would work just fine)</span></div><div class="line" id="200343"><span class="nick" style="color:#6b8072"><a href="#200343" label="[20:03:43]">&lt;dannym&gt;</a></span><span class="message">janneke: Do you still know what the test was supposed to test?</span></div><div class="line" id="200442"><span class="nick" style="color:#6b8072"><a href="#200442" label="[20:04:42]">&lt;dannym&gt;</a></span><span class="message">(as for 7r-sign-extend, it seems obvious to me that it was meant to test sign extension of signed things.  So should be fine to put &quot;signed&quot; on all the chars there)</span></div><div class="line" id="200500"><span class="nick" style="color:#80b1d3"><a href="#200500" label="[20:05:00]">&lt;janneke&gt;</a></span><span class="message">OK</span></div><div class="line" id="200517"><span class="nick" style="color:#80b1d3"><a href="#200517" label="[20:05:17]">&lt;janneke&gt;</a></span><span class="message">i can have a loook for 7l-struct-any-size-array-simple.c</span></div><div class="line" id="200553"><span class="nick" style="color:#80b1d3"><a href="#200553" label="[20:05:53]">&lt;janneke&gt;</a></span><span class="message">from the 7x- number i know that it's a test that was isolated from the tcc sources</span></div><div class="line" id="200617"><span class="nick" style="color:#6d2462"><a href="#200617" label="[20:06:17]">*</a></span><span class="message">janneke looks</span></div><div class="line" id="200624"><span class="nick" style="color:#6b8072"><a href="#200624" label="[20:06:24]">&lt;dannym&gt;</a></span><span class="message">janneke: Thanks :)</span></div><div class="line" id="200748"><span class="nick" style="color:#80b1d3"><a href="#200748" label="[20:07:48]">&lt;janneke&gt;</a></span><span class="message">ah that  __packed thingy</span></div><div class="line" id="200753"><span class="nick" style="color:#80b1d3"><a href="#200753" label="[20:07:53]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="201219"><span class="nick" style="color:#80b1d3"><a href="#201219" label="[20:12:19]">&lt;janneke&gt;</a></span><span class="message">dannym: yes, it checks wether you can have an array of structs of any size and have them placed in memory without gaps</span></div><div class="line" id="201301"><span class="nick" style="color:#80b1d3"><a href="#201301" label="[20:13:01]">&lt;janneke&gt;</a></span><span class="message">dannym: iow, initially i was lazy and used 4 bytes for everything</span></div><div class="line" id="201407"><span class="nick" style="color:#80b1d3"><a href="#201407" label="[20:14:07]">&lt;janneke&gt;</a></span><span class="message">some of that kludge still lingered in mescc's struct code -- so it pretty much tests what the name says ;-)</span></div><div class="line" id="201446"><span class="nick" style="color:#80b1d3"><a href="#201446" label="[20:14:46]">&lt;janneke&gt;</a></span><span class="message">dannym: you're right about the signed char/sign extend thing, playing with signedness of char is just a missing feature</span></div><div class="line" id="201604"><span class="nick">***</span><span class="message notice">terpri__ is now known as terpri</span></div><div class="line" id="201728"><span class="nick" style="color:#80b1d3"><a href="#201728" label="[20:17:28]">&lt;janneke&gt;</a></span><span class="message">arm-unknown-linux-gnueabihf-gcc -g -o arm-unknown-linux-gnueabihf-tcc -nostdinc ... tcc.c libtcc1.a libc.a =&gt; ntoab.c:54: undefined reference to `__aeabi_uidivmod'</span></div><div class="line" id="201834"><span class="nick" style="color:#80b1d3"><a href="#201834" label="[20:18:34]">&lt;janneke&gt;</a></span><span class="message">dannym: so...this needs div.c for gcc...hmm</span></div><div class="line" id="201901"><span class="nick" style="color:#80b1d3"><a href="#201901" label="[20:19:01]">&lt;janneke&gt;</a></span><span class="message">(or -lmescc for now...hmm)</span></div><div class="line" id="201914"><span class="nick">***</span><span class="message notice">terpri_ is now known as terpri</span></div><div class="line" id="201933"><span class="nick" style="color:#80b1d3"><a href="#201933" label="[20:19:33]">&lt;janneke&gt;</a></span><span class="message">i copied build-x86.sh =&gt; build-arm.sh</span></div><div class="line" id="202045"><span class="nick" style="color:#80b1d3"><a href="#202045" label="[20:20:45]">&lt;janneke&gt;</a></span><span class="message">ah no, div.c should also be in libc+tcc!</span></div><div class="line" id="202229"><span class="nick" style="color:#6d2462"><a href="#202229" label="[20:22:29]">*</a></span><span class="message">janneke adds $libmescc_SOURCES to libc_tcc_SOURCES=&quot;</span></div><div class="line" id="202707"><span class="nick" style="color:#80b1d3"><a href="#202707" label="[20:27:07]">&lt;janneke&gt;</a></span><span class="message">dannym: just for fun...wrt the struct size thing, there was also &quot;mescc: Support --align, off by default.&quot;</span></div><div class="line" id="202708"><span class="nick" style="color:#80b1d3"><a href="#202708" label="[20:27:08]">&lt;janneke&gt;</a></span><span class="message">)</span></div><div class="line" id="203452"><span class="nick" style="color:#6d2462"><a href="#203452" label="[20:34:52]">*</a></span><span class="message">janneke pushes some stuff to 'wip'</span></div><div class="line" id="204109"><span class="nick" style="color:#6b8072"><a href="#204109" label="[20:41:09]">&lt;dannym&gt;</a></span><span class="message">janneke: Actually, earlier ARM also used 4 bytes for everything.  Struct packing is not really portable.</span></div><div class="line" id="204116"><span class="nick" style="color:#6b8072"><a href="#204116" label="[20:41:16]">&lt;dannym&gt;</a></span><span class="message">janneke: I mean all of ARM, not mes</span></div><div class="line" id="204504"><span class="nick" style="color:#80b1d3"><a href="#204504" label="[20:45:04]">&lt;janneke&gt;</a></span><span class="message">yeah, so i guess for ARM this test makes no sense?</span></div><div class="line" id="204609"><span class="nick" style="color:#80b1d3"><a href="#204609" label="[20:46:09]">&lt;janneke&gt;</a></span><span class="message">dannym: trying to link with arm-unknown-linux-gnueabihf-gcc sans libc, with div.c in libc+tcc, i now get more undefined functions: <a rel="nofollow" href="https://paste.debian.net/1160869/">https://paste.debian.net/1160869/</a> </span></div><div class="line" id="204628"><span class="nick" style="color:#80b1d3"><a href="#204628" label="[20:46:28]">&lt;janneke&gt;</a></span><span class="message">should be mostly trivial for you, i guess...</span></div><div class="line" id="205133"><span class="nick" style="color:#6b8072"><a href="#205133" label="[20:51:33]">&lt;dannym&gt;</a></span><span class="message">janneke: No, armv7 can do struct packing just fine.</span></div><div class="line" id="205140"><span class="nick" style="color:#6b8072"><a href="#205140" label="[20:51:40]">&lt;dannym&gt;</a></span><span class="message">janneke: So we can totally use it</span></div><div class="line" id="205155"><span class="nick" style="color:#6b8072"><a href="#205155" label="[20:51:55]">&lt;dannym&gt;</a></span><span class="message">janneke: The question is why would a compiler like tcc use it?  Sounds totally bogus to me</span></div><div class="line" id="205225"><span class="nick" style="color:#6b8072"><a href="#205225" label="[20:52:25]">&lt;dannym&gt;</a></span><span class="message">janneke: That only concerns the packing of internal tcc structs in the RAM image of the running tcc, right?  WTF...</span></div><div class="line" id="205250"><span class="nick" style="color:#6b8072"><a href="#205250" label="[20:52:50]">&lt;dannym&gt;</a></span><span class="message">janneke: Should make no difference whatsoever to a compiler whether the compiler's source code uses packed structs or non-packed structs</span></div><div class="line" id="205317"><span class="nick" style="color:#6b8072"><a href="#205317" label="[20:53:17]">&lt;dannym&gt;</a></span><span class="message">janneke: I just say that so we keep it in mind for the future.  Maybe this part of tcc is unnecessarily convoluted?</span></div><div class="line" id="205359"><span class="nick" style="color:#6b8072"><a href="#205359" label="[20:53:59]">&lt;dannym&gt;</a></span><span class="message">janneke: Right now, if we are sure that the test 7l-struct-any-size-array-simple is still meaningful with &quot;signed char&quot; instead of &quot;char&quot;</span></div><div class="line" id="205528"><span class="nick" style="color:#80b1d3"><a href="#205528" label="[20:55:28]">&lt;janneke&gt;</a></span><span class="message">dannym: yeah, the meaning does not change</span></div><div class="line" id="205602"><span class="nick" style="color:#6b8072"><a href="#205602" label="[20:56:02]">&lt;dannym&gt;</a></span><span class="message">janneke: ... if we are sure then we can fix up the test on mes master</span></div><div class="line" id="205609"><span class="nick" style="color:#6b8072"><a href="#205609" label="[20:56:09]">&lt;dannym&gt;</a></span><span class="message">janneke: To use &quot;signed char&quot;</span></div><div class="line" id="205611"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="205615"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="205622"><span class="nick" style="color:#6b8072"><a href="#205622" label="[20:56:22]">&lt;dannym&gt;</a></span><span class="message">janneke: Right?  Totally weird to use &quot;packed&quot; in the first place...</span></div><div class="line" id="205624"><span class="nick" style="color:#80b1d3"><a href="#205624" label="[20:56:24]">&lt;janneke&gt;</a></span><span class="message">dannym: i didn't really look into the why of struct packing; i only sought to recreate (bit for bit) the same data structures with mescc as that gcc did</span></div><div class="line" id="205654"><span class="nick" style="color:#80b1d3"><a href="#205654" label="[20:56:54]">&lt;janneke&gt;</a></span><span class="message">dannym: otherwise debug-printing / comparing trace logging becomes very hard / impossible</span></div><div class="line" id="205713"><span class="nick" style="color:#6b8072"><a href="#205713" label="[20:57:13]">&lt;dannym&gt;</a></span><span class="message">janneke: I see.  I think that's a good way to do it.</span></div><div class="line" id="205717"><span class="nick" style="color:#80b1d3"><a href="#205717" label="[20:57:17]">&lt;janneke&gt;</a></span><span class="message">dannym: so, i'm all for it to let that rest for now and first proceed building tcc and looking what we find</span></div><div class="line" id="210201"><span class="nick" style="color:#6b8072"><a href="#210201" label="[21:02:01]">&lt;dannym&gt;</a></span><span class="message">janneke: Ok, I'll push the fixes to master.</span></div><div class="line" id="210210"><span class="nick" style="color:#6b8072"><a href="#210210" label="[21:02:10]">&lt;dannym&gt;</a></span><span class="message">janneke: Both</span></div><div class="line" id="210841"><span class="nick" style="color:#6b8072"><a href="#210841" label="[21:08:41]">&lt;dannym&gt;</a></span><span class="message">janneke: Hmmm... about the arm-unknown-linux-gnueabihf-gcc sans libc, with div.c, is it &quot;uidivmod&quot; or &quot;uldivmod&quot;?</span></div><div class="line" id="210932"><span class="nick" style="color:#6b8072"><a href="#210932" label="[21:09:32]">&lt;dannym&gt;</a></span><span class="message">janneke: I guess we can just s/__aeabi_uidiv/__aeabi_uldiv/ in div.c, or we need both</span></div><div class="line" id="211022"><span class="nick" style="color:#6b8072"><a href="#211022" label="[21:10:22]">&lt;dannym&gt;</a></span><span class="message">janneke: Even though sizeof(unsigned long) == sizeof(unsigned int) on ARM :P</span></div><div class="line" id="211111"><span class="nick" style="color:#80b1d3"><a href="#211111" label="[21:11:11]">&lt;janneke&gt;</a></span><span class="message">dannym: from the commented error messages (let's remove them) we need both -- or at least we need the others on x86/x86_64?</span></div><div class="line" id="211127"><span class="nick" style="color:#6b8072"><a href="#211127" label="[21:11:27]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, the __aeabi are gcc builtin names</span></div><div class="line" id="211149"><span class="nick" style="color:#6b8072"><a href="#211149" label="[21:11:49]">&lt;dannym&gt;</a></span><span class="message">janneke: So when compiling with gcc and using their builtins (the latter is almost always the case), then we need those</span></div><div class="line" id="211201"><span class="nick" style="color:#6b8072"><a href="#211201" label="[21:12:01]">&lt;dannym&gt;</a></span><span class="message">janneke: Trying it right now with gcc on banana</span></div><div class="line" id="211227"><span class="nick" style="color:#6b8072"><a href="#211227" label="[21:12:27]">&lt;dannym&gt;</a></span><span class="message">__aeabi_uidiv used for unsigned long, apparently :P</span></div><div class="line" id="211232"><span class="nick" style="color:#6b8072"><a href="#211232" label="[21:12:32]">&lt;dannym&gt;</a></span><span class="message">gcc 5.4.0</span></div><div class="line" id="211259"><span class="nick" style="color:#6b8072"><a href="#211259" label="[21:12:59]">&lt;dannym&gt;</a></span><span class="message">int main(int argc) {</span></div><div class="line" id="211259"><span class="nick" style="color:#6b8072"><a href="#211259" label="[21:12:59]">&lt;dannym&gt;</a></span><span class="message">        unsigned long a;</span></div><div class="line" id="211259"><span class="nick" style="color:#6b8072"><a href="#211259" label="[21:12:59]">&lt;dannym&gt;</a></span><span class="message">        unsigned int b;</span></div><div class="line" id="211259"><span class="nick" style="color:#6b8072"><a href="#211259" label="[21:12:59]">&lt;dannym&gt;</a></span><span class="message">        return a/argc;</span></div><div class="line" id="211259"><span class="nick" style="color:#6b8072"><a href="#211259" label="[21:12:59]">&lt;dannym&gt;</a></span><span class="message">}</span></div><div class="line" id="211306"><span class="nick" style="color:#6b8072"><a href="#211306" label="[21:13:06]">&lt;dannym&gt;</a></span><span class="message">gcc -c a.c</span></div><div class="line" id="211314"><span class="nick" style="color:#6b8072"><a href="#211314" label="[21:13:14]">&lt;dannym&gt;</a></span><span class="message">objdump -S a.o |grep __aeabi</span></div><div class="line" id="211328"><span class="nick" style="color:#6b8072"><a href="#211328" label="[21:13:28]">&lt;dannym&gt;</a></span><span class="message">The division by argc is to make sure it can't optimize it ;)</span></div><div class="line" id="211338"><span class="nick" style="color:#80b1d3"><a href="#211338" label="[21:13:38]">&lt;janneke&gt;</a></span><span class="message">:)</span></div><div class="line" id="211353"><span class="nick" style="color:#6b8072"><a href="#211353" label="[21:13:53]">&lt;dannym&gt;</a></span><span class="message">In the mes environment, I have gcc 7.5.0 ?</span></div><div class="line" id="211416"><span class="nick" style="color:#6b8072"><a href="#211416" label="[21:14:16]">&lt;dannym&gt;</a></span><span class="message">Which gcc are we targeting for the comparison thing?</span></div><div class="line" id="211440"><span class="nick" style="color:#80b1d3"><a href="#211440" label="[21:14:40]">&lt;janneke&gt;</a></span><span class="message">i have gcc-7.5.0 now (i'm sure i had gcc-5.5 when building x86 tcc)</span></div><div class="line" id="211517"><span class="nick" style="color:#6b8072"><a href="#211517" label="[21:15:17]">&lt;dannym&gt;</a></span><span class="message">gcc 7.5.0: unsigned long / something: __aeabi_uidiv</span></div><div class="line" id="211531"><span class="nick" style="color:#80b1d3"><a href="#211531" label="[21:15:31]">&lt;janneke&gt;</a></span><span class="message">i didn't expect a change here -- we could mandate gcc-5...it's just that gcc-7 is convenient nowadays with guix --prebuilt substitutes</span></div><div class="line" id="211614"><span class="nick" style="color:#80b1d3"><a href="#211614" label="[21:16:14]">&lt;janneke&gt;</a></span><span class="message">well, i get /home/janneke/src/tcc-boot/tccasm.c:218: undefined reference to `__aeabi_uldivmod'</span></div><div class="line" id="211619"><span class="nick" style="color:#6b8072"><a href="#211619" label="[21:16:19]">&lt;dannym&gt;</a></span><span class="message">janneke: It's fine, we can just add the other one.  But we have to be careful because sometimes gcc means unsigned long long (not a typo) by &quot;ul&quot;</span></div><div class="line" id="211635"><span class="nick" style="color:#6b8072"><a href="#211635" label="[21:16:35]">&lt;dannym&gt;</a></span><span class="message">janneke: What types are used in that line?</span></div><div class="line" id="211649"><span class="nick" style="color:#80b1d3"><a href="#211649" label="[21:16:49]">&lt;janneke&gt;</a></span><span class="message">218:            pe-&gt;v %= e2.v;</span></div><div class="line" id="211720"><span class="nick" style="color:#80b1d3"><a href="#211720" label="[21:17:20]">&lt;janneke&gt;</a></span><span class="message">both are ExprValue</span></div><div class="line" id="211752"><span class="nick" style="color:#80b1d3"><a href="#211752" label="[21:17:52]">&lt;janneke&gt;</a></span><span class="message">#ifdef CONFIG_TCC_ASM</span></div><div class="line" id="211753"><span class="nick" style="color:#80b1d3"><a href="#211753" label="[21:17:53]">&lt;janneke&gt;</a></span><span class="message">typedef struct ExprValue {</span></div><div class="line" id="211753"><span class="nick" style="color:#80b1d3"><a href="#211753" label="[21:17:53]">&lt;janneke&gt;</a></span><span class="message">    uint64_t v;</span></div><div class="line" id="211811"><span class="nick" style="color:#6b8072"><a href="#211811" label="[21:18:11]">&lt;dannym&gt;</a></span><span class="message">Yeah, so that's unsigned long long on ARMv7</span></div><div class="line" id="211849"><span class="nick" style="color:#6b8072"><a href="#211849" label="[21:18:49]">&lt;dannym&gt;</a></span><span class="message">And on x86, actually ?</span></div><div class="line" id="211855"><span class="nick" style="color:#80b1d3"><a href="#211855" label="[21:18:55]">&lt;janneke&gt;</a></span><span class="message">yeah (wondering how we work/limp around this in mescc ...)</span></div><div class="line" id="211904"><span class="nick" style="color:#80b1d3"><a href="#211904" label="[21:19:04]">&lt;janneke&gt;</a></span><span class="message">yes, same</span></div><div class="line" id="211941"><span class="nick" style="color:#80b1d3"><a href="#211941" label="[21:19:41]">&lt;janneke&gt;</a></span><span class="message">guess mescc just ignores the most significant 4 bytes</span></div><div class="line" id="212054"><span class="nick" style="color:#6b8072"><a href="#212054" label="[21:20:54]">&lt;dannym&gt;</a></span><span class="message">janneke: I see :)</span></div><div class="line" id="212139"><span class="nick" style="color:#6b8072"><a href="#212139" label="[21:21:39]">&lt;dannym&gt;</a></span><span class="message">janneke: The &quot;__aeabi&quot; things are for gcc only, so we have to make sure to use prototypes compatible with what gcc expects</span></div><div class="line" id="212210"><span class="nick" style="color:#6b8072"><a href="#212210" label="[21:22:10]">&lt;dannym&gt;</a></span><span class="message">janneke: Alternatively, we could also force usage of gcc's builtin library on gcc (-lgcc) instead</span></div><div class="line" id="212302"><span class="nick" style="color:#6b8072"><a href="#212302" label="[21:23:02]">&lt;dannym&gt;</a></span><span class="message">janneke: Back when I did the stuff, it seemed that the rest of mes took care not to pull in any gcc-specific things</span></div><div class="line" id="212349"><span class="nick" style="color:#6b8072"><a href="#212349" label="[21:23:49]">&lt;dannym&gt;</a></span><span class="message">janneke: Also, it's nice that our division algorithm is &quot;independently tested&quot; by having gcc use it in its compiled programs</span></div><div class="line" id="212452"><span class="nick" style="color:#80b1d3"><a href="#212452" label="[21:24:52]">&lt;janneke&gt;</a></span><span class="message">dannym: i did not think of -lgcc -- that could also work; i guess i felt &quot;safer&quot; providing everything in mes</span></div><div class="line" id="212557"><span class="nick" style="color:#80b1d3"><a href="#212557" label="[21:25:57]">&lt;janneke&gt;</a></span><span class="message">dannym: safer as in not accidentally pull in stuff from glibc or so -- standard libraries -- to try making gcc-built resemble mescc-built as much as possible</span></div><div class="line" id="212643"><span class="nick" style="color:#80b1d3"><a href="#212643" label="[21:26:43]">&lt;janneke&gt;</a></span><span class="message">dannym: if you like to try removing these workarounds and use -lgcc, feel free to have a go ;-)</span></div><div class="line" id="212650"><span class="nick" style="color:#6b8072"><a href="#212650" label="[21:26:50]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, sounds good</span></div><div class="line" id="212659"><span class="nick" style="color:#6b8072"><a href="#212659" label="[21:26:59]">&lt;dannym&gt;</a></span><span class="message">janneke: But that also means that we have to provide gcc builtins</span></div><div class="line" id="212709"><span class="nick" style="color:#6b8072"><a href="#212709" label="[21:27:09]">&lt;dannym&gt;</a></span><span class="message">janneke: Look at <a rel="nofollow" href="https://github.com/openzfs/zfs/pull/706">https://github.com/openzfs/zfs/pull/706</a>  into what would be involved in that</span></div><div class="line" id="212725"><span class="nick" style="color:#6b8072"><a href="#212725" label="[21:27:25]">&lt;dannym&gt;</a></span><span class="message">janneke: <a rel="nofollow" href="https://github.com/behlendorf/spl/commit/93b0dc92eab55f8729b4798b383d4670073ebddc">https://github.com/behlendorf/spl/commit/93b0dc92eab55f8729b4798b383d4670073ebddc</a>  arrrrgh</span></div><div class="line" id="212732"><span class="nick" style="color:#80b1d3"><a href="#212732" label="[21:27:32]">&lt;janneke&gt;</a></span><span class="message">dannym: no, we're using -fno-builtins, right?</span></div><div class="line" id="212802"><span class="nick" style="color:#80b1d3"><a href="#212802" label="[21:28:02]">&lt;janneke&gt;</a></span><span class="message">again, to stay close</span></div><div class="line" id="212850"><span class="nick" style="color:#6b8072"><a href="#212850" label="[21:28:50]">&lt;dannym&gt;</a></span><span class="message">janneke: I mean we have to provide the interface the gcc compiler expects when it is emitting calls to gcc builtins</span></div><div class="line" id="212902"><span class="nick" style="color:#6b8072"><a href="#212902" label="[21:29:02]">&lt;dannym&gt;</a></span><span class="message">janneke: For example gcc will emit division builtin calls</span></div><div class="line" id="212931"><span class="nick" style="color:#80b1d3"><a href="#212931" label="[21:29:31]">&lt;janneke&gt;</a></span><span class="message">dannym: yes, this __aeabi*div/mod stuff felt/feels uncomfortable</span></div><div class="line" id="212953"><span class="nick" style="color:#234e69"><a href="#212953" label="[21:29:53]">&lt;vagrantc&gt;</a></span><span class="message">/18/18</span></div><div class="line" id="212957"><span class="nick" style="color:#80b1d3"><a href="#212957" label="[21:29:57]">&lt;janneke&gt;</a></span><span class="message">arbitrary gcc-internals that could be fragile -- dunno</span></div><div class="line" id="213003"><span class="nick" style="color:#6d2462"><a href="#213003" label="[21:30:03]">*</a></span><span class="message">vagrantc waves</span></div><div class="line" id="213008"><span class="nick" style="color:#80b1d3"><a href="#213008" label="[21:30:08]">&lt;janneke&gt;</a></span><span class="message">\o</span></div><div class="line" id="213017"><span class="nick" style="color:#6b8072"><a href="#213017" label="[21:30:17]">&lt;dannym&gt;</a></span><span class="message">Hi vagrantc!</span></div><div class="line" id="213036"><span class="nick" style="color:#6b8072"><a href="#213036" label="[21:30:36]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeha, I think gcc people split off -lgcc exactly so you could use those but not libc</span></div><div class="line" id="213041"><span class="nick" style="color:#6b8072"><a href="#213041" label="[21:30:41]">&lt;dannym&gt;</a></span><span class="message">janneke: If you wanted</span></div><div class="line" id="213052"><span class="nick" style="color:#80b1d3"><a href="#213052" label="[21:30:52]">&lt;janneke&gt;</a></span><span class="message">vagrantc: still thankful for your bug reports -- still posponing to fix them and making a release</span></div><div class="line" id="213111"><span class="nick" style="color:#234e69"><a href="#213111" label="[21:31:11]">&lt;vagrantc&gt;</a></span><span class="message">janneke: :)</span></div><div class="line" id="213116"><span class="nick" style="color:#80b1d3"><a href="#213116" label="[21:31:16]">&lt;janneke&gt;</a></span><span class="message">dannym: yeah, makes sense -- i really had no clue</span></div><div class="line" id="213139"><span class="nick" style="color:#80b1d3"><a href="#213139" label="[21:31:39]">&lt;janneke&gt;</a></span><span class="message">vagrantc: getting back to mescc work (dannym's fault!) anyway, at last</span></div><div class="line" id="213146"><span class="nick" style="color:#234e69"><a href="#213146" label="[21:31:46]">&lt;vagrantc&gt;</a></span><span class="message">managed to get it building again with gcc10 on i386, but amd64 is still grumpy with one of it's tests</span></div><div class="line" id="213156"><span class="nick" style="color:#234e69"><a href="#213156" label="[21:31:56]">&lt;vagrantc&gt;</a></span><span class="message">dannym: thanks for the faults :)</span></div><div class="line" id="213207"><span class="nick" style="color:#80b1d3"><a href="#213207" label="[21:32:07]">&lt;janneke&gt;</a></span><span class="message">lol</span></div><div class="line" id="213302"><span class="nick" style="color:#234e69"><a href="#213302" label="[21:33:02]">&lt;vagrantc&gt;</a></span><span class="message">not sure mes belongs in a debian stable release at this point anyways</span></div><div class="line" id="213430"><span class="nick" style="color:#80b1d3"><a href="#213430" label="[21:34:30]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="213520"><span class="nick" style="color:#80b1d3"><a href="#213520" label="[21:35:20]">&lt;janneke&gt;</a></span><span class="message">dannym: oohh, now i see the libmescc analogy -- which means that the patch i pushed to WIP is wrong, adding div.c to libc+tcc</span></div><div class="line" id="213546"><span class="nick" style="color:#6b8072"><a href="#213546" label="[21:35:46]">&lt;dannym&gt;</a></span><span class="message">janneke: I think so, yes.  I wouldn't say wrong, but that's not how gcc would do it, and not how mescc does it either</span></div><div class="line" id="213607"><span class="nick" style="color:#6b8072"><a href="#213607" label="[21:36:07]">&lt;dannym&gt;</a></span><span class="message">janneke: It would totally work, but the split between libc and builtins does make sense</span></div><div class="line" id="213623"><span class="nick" style="color:#80b1d3"><a href="#213623" label="[21:36:23]">&lt;janneke&gt;</a></span><span class="message">dannym: the correct fix is to change the build-x86.sh/build-arm.sh script in tcc to add -lgcc (or -l mescc when building with mes)</span></div><div class="line" id="213625"><span class="nick" style="color:#80b1d3"><a href="#213625" label="[21:36:25]">&lt;janneke&gt;</a></span><span class="message">*mescc</span></div><div class="line" id="213643"><span class="nick" style="color:#80b1d3"><a href="#213643" label="[21:36:43]">&lt;janneke&gt;</a></span><span class="message">dannym: yeah, sure</span></div><div class="line" id="213648"><span class="nick" style="color:#6b8072"><a href="#213648" label="[21:36:48]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, I agree</span></div><div class="line" id="213712"><span class="nick" style="color:#80b1d3"><a href="#213712" label="[21:37:12]">&lt;janneke&gt;</a></span><span class="message">&quot;love it&quot;</span></div><div class="line" id="231532"><span class="nick" style="color:#6b8072"><a href="#231532" label="[23:15:32]">&lt;dannym&gt;</a></span><span class="message">janneke: Did you rebase wip on master btw?  The wip I checked out is kinda behind I think</span></div><div class="line" id="231828"><span class="nick" style="color:#80b1d3"><a href="#231828" label="[23:18:28]">&lt;janneke&gt;</a></span><span class="message">oops</span></div><div class="line" id="231855"><span class="nick" style="color:#80b1d3"><a href="#231855" label="[23:18:55]">&lt;janneke&gt;</a></span><span class="message">dannym: fixed</span></div><div class="line" id="231929"><span class="nick" style="color:#80b1d3"><a href="#231929" label="[23:19:29]">&lt;janneke&gt;</a></span><span class="message">dannym: eh, but as discussed, &quot;b5d7e1749 build: Include div.c in libc+tcc.a.&quot; is probably wrong/not what we want</span></div><div class="line" id="234046"><span class="nick" style="color:#6d2462"><a href="#234046" label="[23:40:46]">*</a></span><span class="message">janneke -&gt; zZzzz</span></div><div class="line" id="234128"><span class="nick" style="color:#6b8072"><a href="#234128" label="[23:41:28]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah</span></div><div class="line" id="234130"><span class="nick" style="color:#6b8072"><a href="#234130" label="[23:41:30]">&lt;dannym&gt;</a></span><span class="message">janneke: Good night :)</span></div><div class="line" id="234836"><span class="nick" style="color:#6b8072"><a href="#234836" label="[23:48:36]">&lt;dannym&gt;</a></span><span class="message">janneke: (__aeabi_d2ulz, from your error message list, is for floats to integer conversion btw; see &lt;<a rel="nofollow" href="https://www.redhat.com/archives/edk2-devel-archive/2019-May/msg01546.html">https://www.redhat.com/archives/edk2-devel-archive/2019-May/msg01546.html</a>&gt;) </span></div><br /></div></body></html>