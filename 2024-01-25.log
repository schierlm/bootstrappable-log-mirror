<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000352"><span class="nick" style="color:#389600"><a href="#000352" label="[00:03:52]">&lt;Googulator&gt;</a></span><span class="message">USB is orders of magnitude slower than SATA here with BIOS too</span></div><div class="line" id="000422"><span class="nick" style="color:#389600"><a href="#000422" label="[00:04:22]">&lt;Googulator&gt;</a></span><span class="message">srcfs load time from a SATA SSD here is 5 minutes on a bad day, probably even faster</span></div><div class="line" id="000431"><span class="nick" style="color:#389600"><a href="#000431" label="[00:04:31]">&lt;Googulator&gt;</a></span><span class="message">from USB drive, it's over 2 hours</span></div><div class="line" id="000455"><span class="nick" style="color:#8dd3c7"><a href="#000455" label="[00:04:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, but to get to hex1.efi you only need ot read a few KiB</span></div><div class="line" id="000457"><span class="nick" style="color:#389600"><a href="#000457" label="[00:04:57]">&lt;Googulator&gt;</a></span><span class="message">CHS vs LBA made no difference in performance (using SATA)</span></div><div class="line" id="000509"><span class="nick" style="color:#8dd3c7"><a href="#000509" label="[00:05:09]">&lt;stikonas&gt;</a></span><span class="message">though I guess that also includede time to rebuild itself and kaem</span></div><div class="line" id="000509"><span class="nick" style="color:#389600"><a href="#000509" label="[00:05:09]">&lt;Googulator&gt;</a></span><span class="message">of course, LBA is mandatory for USB</span></div><div class="line" id="000527"><span class="nick" style="color:#389600"><a href="#000527" label="[00:05:27]">&lt;Googulator&gt;</a></span><span class="message">at least if hard drive emulation is used</span></div><div class="line" id="000550"><span class="nick" style="color:#389600"><a href="#000550" label="[00:05:50]">&lt;Googulator&gt;</a></span><span class="message">(with floppy emulation, it's the opposite, only CHS is supported - but we take steps to avoid floppy emulation)</span></div><div class="line" id="002629"><span class="nick" style="color:#2e2a4a"><a href="#002629" label="[00:26:29]">&lt;fossy&gt;</a></span><span class="message">ok that is just taking far too long and idk if its hanging or what</span></div><div class="line" id="002633"><span class="nick" style="color:#2e2a4a"><a href="#002633" label="[00:26:33]">&lt;fossy&gt;</a></span><span class="message">retrying on SSD</span></div><div class="line" id="002640"><span class="nick" style="color:#2e2a4a"><a href="#002640" label="[00:26:40]">&lt;fossy&gt;</a></span><span class="message">seems to be going a bit faster at least?</span></div><div class="line" id="002706"><span class="nick" style="color:#2e2a4a"><a href="#002706" label="[00:27:06]">&lt;fossy&gt;</a></span><span class="message">still probably about an order of magnitude slower than stage0-posix</span></div><div class="line" id="003015"><span class="nick" style="color:#8dd3c7"><a href="#003015" label="[00:30:15]">&lt;stikonas&gt;</a></span><span class="message">perhaps the way stage0-uefi does I/O is not optimized in your UEFI implementation...</span></div><div class="line" id="003101"><span class="nick" style="color:#8dd3c7"><a href="#003101" label="[00:31:01]">&lt;stikonas&gt;</a></span><span class="message">it's hard to debug these things though</span></div><div class="line" id="003121"><span class="nick" style="color:#8dd3c7"><a href="#003121" label="[00:31:21]">&lt;stikonas&gt;</a></span><span class="message">basically impossible on real HW and somewhat annoying in qemu</span></div><div class="line" id="003456"><span class="nick" style="color:#2e2a4a"><a href="#003456" label="[00:34:56]">&lt;fossy&gt;</a></span><span class="message">quite likely</span></div><div class="line" id="003518"><span class="nick" style="color:#2e2a4a"><a href="#003518" label="[00:35:18]">&lt;fossy&gt;</a></span><span class="message">it is a lot faster on SSD</span></div><div class="line" id="004804"><span class="nick" style="color:#2e2a4a"><a href="#004804" label="[00:48:04]">&lt;fossy&gt;</a></span><span class="message">ok, running the usb on my laptop now, it is WAYYY faster</span></div><div class="line" id="004824"><span class="nick" style="color:#2e2a4a"><a href="#004824" label="[00:48:24]">&lt;fossy&gt;</a></span><span class="message">at least 100x faster on the usb than it was on the other PC</span></div><div class="line" id="004835"><span class="nick" style="color:#2e2a4a"><a href="#004835" label="[00:48:35]">&lt;fossy&gt;</a></span><span class="message">deffo implementation reasons</span></div><div class="line" id="004901"><span class="nick" style="color:#2e2a4a"><a href="#004901" label="[00:49:01]">&lt;fossy&gt;</a></span><span class="message">yep finished in 45 seconds LOL and the other PC is still on cc_amd64 i think</span></div><div class="line" id="004907"><span class="nick" style="color:#2e2a4a"><a href="#004907" label="[00:49:07]">&lt;fossy&gt;</a></span><span class="message">unless it hung but i cant tell cause it's too slow</span></div><div class="line" id="004914"><span class="nick" style="color:#2e2a4a"><a href="#004914" label="[00:49:14]">&lt;fossy&gt;</a></span><span class="message">will wait a couple hrs :P</span></div><div class="line" id="010129"><span class="nick" style="color:#2e2a4a"><a href="#010129" label="[01:01:29]">&lt;fossy&gt;</a></span><span class="message">stikonas: actually, there is a problem; the building of M2-Planet.efi should have --little-endian in the hex2 invocation, that causes M2-Planet.efi to fail on my system</span></div><div class="line" id="010148"><span class="nick" style="color:#8dd3c7"><a href="#010148" label="[01:01:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, it doesn't have it?</span></div><div class="line" id="010152"><span class="nick" style="color:#2e2a4a"><a href="#010152" label="[01:01:52]">&lt;fossy&gt;</a></span><span class="message">nope</span></div><div class="line" id="010154"><span class="nick" style="color:#8dd3c7"><a href="#010154" label="[01:01:54]">&lt;stikonas&gt;</a></span><span class="message">strange...</span></div><div class="line" id="010156"><span class="nick" style="color:#2e2a4a"><a href="#010156" label="[01:01:56]">&lt;fossy&gt;</a></span><span class="message">no idea how it worked on any system tbh</span></div><div class="line" id="010222"><span class="nick" style="color:#2e2a4a"><a href="#010222" label="[01:02:22]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="010226"><span class="nick" style="color:#2e2a4a"><a href="#010226" label="[01:02:26]">&lt;fossy&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="010231"><span class="nick" style="color:#2e2a4a"><a href="#010231" label="[01:02:31]">&lt;fossy&gt;</a></span><span class="message">ENDIAN_FLAG appears to be empty</span></div><div class="line" id="010233"><span class="nick" style="color:#8dd3c7"><a href="#010233" label="[01:02:33]">&lt;stikonas&gt;</a></span><span class="message">fossy: 2nd rebuild of M2-Planet?</span></div><div class="line" id="010245"><span class="nick" style="color:#8dd3c7"><a href="#010245" label="[01:02:45]">&lt;stikonas&gt;</a></span><span class="message">maybe something else went wrong</span></div><div class="line" id="010247"><span class="nick" style="color:#8dd3c7"><a href="#010247" label="[01:02:47]">&lt;stikonas&gt;</a></span><span class="message">let me check</span></div><div class="line" id="010255"><span class="nick" style="color:#2e2a4a"><a href="#010255" label="[01:02:55]">&lt;fossy&gt;</a></span><span class="message">yeah, something else did go wrong</span></div><div class="line" id="010319"><span class="nick" style="color:#8dd3c7"><a href="#010319" label="[01:03:19]">&lt;stikonas&gt;</a></span><span class="message">sounds like environmental variables are not working...</span></div><div class="line" id="010355"><span class="nick" style="color:#2e2a4a"><a href="#010355" label="[01:03:55]">&lt;fossy&gt;</a></span><span class="message">yeah, only ENDIAN_FLAG though, oddly</span></div><div class="line" id="010356"><span class="nick" style="color:#8dd3c7"><a href="#010356" label="[01:03:56]">&lt;stikonas&gt;</a></span><span class="message">because it is set here <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/kaem.run">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/kaem.run</a> </span></div><div class="line" id="010359"><span class="nick" style="color:#8dd3c7"><a href="#010359" label="[01:03:59]">&lt;stikonas&gt;</a></span><span class="message">odd</span></div><div class="line" id="010403"><span class="nick" style="color:#8dd3c7"><a href="#010403" label="[01:04:03]">&lt;stikonas&gt;</a></span><span class="message">so other stuff is there</span></div><div class="line" id="010412"><span class="nick" style="color:#2e2a4a"><a href="#010412" label="[01:04:12]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="010428"><span class="nick" style="color:#8dd3c7"><a href="#010428" label="[01:04:28]">&lt;stikonas&gt;</a></span><span class="message">e.g. ARCH</span></div><div class="line" id="010430"><span class="nick" style="color:#8dd3c7"><a href="#010430" label="[01:04:30]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="010434"><span class="nick" style="color:#8dd3c7"><a href="#010434" label="[01:04:34]">&lt;stikonas&gt;</a></span><span class="message">that is very stragen</span></div><div class="line" id="010439"><span class="nick" style="color:#8dd3c7"><a href="#010439" label="[01:04:39]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="010458"><span class="nick" style="color:#8dd3c7"><a href="#010458" label="[01:04:58]">&lt;stikonas&gt;</a></span><span class="message">might be up to you to debug :D</span></div><div class="line" id="010503"><span class="nick" style="color:#2e2a4a"><a href="#010503" label="[01:05:03]">&lt;fossy&gt;</a></span><span class="message">yeah i'll have a play around</span></div><div class="line" id="010509"><span class="nick" style="color:#2e2a4a"><a href="#010509" label="[01:05:09]">&lt;fossy&gt;</a></span><span class="message">not much you can do if you cant repro</span></div><div class="line" id="010515"><span class="nick" style="color:#8dd3c7"><a href="#010515" label="[01:05:15]">&lt;stikonas&gt;</a></span><span class="message">exactly :(</span></div><div class="line" id="010522"><span class="nick" style="color:#8dd3c7"><a href="#010522" label="[01:05:22]">&lt;stikonas&gt;</a></span><span class="message">well, you can at least add print stuff in kaem</span></div><div class="line" id="010526"><span class="nick" style="color:#8dd3c7"><a href="#010526" label="[01:05:26]">&lt;stikonas&gt;</a></span><span class="message">print more debug info</span></div><div class="line" id="010537"><span class="nick" style="color:#2e2a4a"><a href="#010537" label="[01:05:37]">&lt;fossy&gt;</a></span><span class="message">yeah, thankfully its not a hex2 stage thats problematic or something, i would give up then</span></div><div class="line" id="010550"><span class="nick" style="color:#8dd3c7"><a href="#010550" label="[01:05:50]">&lt;stikonas&gt;</a></span><span class="message">yeah, if it's hex2 stange and you are not on qemu</span></div><div class="line" id="010610"><span class="nick" style="color:#8dd3c7"><a href="#010610" label="[01:06:10]">&lt;stikonas&gt;</a></span><span class="message">basically the only way to debug that I found was to run it in UEFI shell and rely on exit status</span></div><div class="line" id="062757"><span class="nick" style="color:#389600"><a href="#062757" label="[06:27:57]">&lt;Googulator&gt;</a></span><span class="message">rickmasters: sent some juicy stage1 optimization PRs</span></div><div class="line" id="062822"><span class="nick" style="color:#389600"><a href="#062822" label="[06:28:22]">&lt;Googulator&gt;</a></span><span class="message">we're back to 192 bytes of actual code+data space used</span></div><div class="line" id="062830"><span class="nick" style="color:#389600"><a href="#062830" label="[06:28:30]">&lt;Googulator&gt;</a></span><span class="message">(excluding the boilerplate MBR &amp; signature)</span></div><div class="line" id="111544"><span class="nick" style="color:#6b8072"><a href="#111544" label="[11:15:44]">&lt;lrvick&gt;</a></span><span class="message">Anyone had issues getting binutils 2.41 to build deterministically? I get this in one out of 3 builds: <a rel="nofollow" href="https://dpaste.org/J7WeM">https://dpaste.org/J7WeM</a> </span></div><div class="line" id="113425"><span class="nick" style="color:#2e2a4a"><a href="#113425" label="[11:34:25]">&lt;fossy&gt;</a></span><span class="message">never seen that, seems to be an object ordering thing</span></div><div class="line" id="113432"><span class="nick" style="color:#2e2a4a"><a href="#113432" label="[11:34:32]">&lt;fossy&gt;</a></span><span class="message">what --jobs are you running at</span></div><div class="line" id="114349"><span class="nick" style="color:#6b8072"><a href="#114349" label="[11:43:49]">&lt;lrvick&gt;</a></span><span class="message">20 on one machine and 30 something on another</span></div><div class="line" id="114410"><span class="nick" style="color:#6b8072"><a href="#114410" label="[11:44:10]">&lt;lrvick&gt;</a></span><span class="message">the only linking flag that feels like it might impact this is separate-code vs --disable-separate-code</span></div><div class="line" id="114434"><span class="nick" style="color:#6b8072"><a href="#114434" label="[11:44:34]">&lt;lrvick&gt;</a></span><span class="message">noticing this now, all the binutils builds without any issues have --disable-separate-code</span></div><div class="line" id="114437"><span class="nick" style="color:#6b8072"><a href="#114437" label="[11:44:37]">&lt;lrvick&gt;</a></span><span class="message">which I don't have in this one</span></div><div class="line" id="114515"><span class="nick" style="color:#6b8072"><a href="#114515" label="[11:45:15]">&lt;lrvick&gt;</a></span><span class="message">Makes me think the codepath for separate-code linking layout is not deterministic.</span></div><div class="line" id="114527"><span class="nick" style="color:#6b8072"><a href="#114527" label="[11:45:27]">&lt;lrvick&gt;</a></span><span class="message">also it saves like 2 bytes or something so who cares</span></div><div class="line" id="114546"><span class="nick" style="color:#6b8072"><a href="#114546" label="[11:45:46]">&lt;lrvick&gt;</a></span><span class="message">ACTION tries building with --disable-separate-code</span></div><div class="line" id="115114"><span class="nick" style="color:#80b1d3"><a href="#115114" label="[11:51:14]">&lt;janneke&gt;</a></span><span class="message">lrvick: it's been identical between the three builds i have -- <a rel="nofollow" href="http://paste.debian.net/1305245">http://paste.debian.net/1305245</a> </span></div><div class="line" id="115213"><span class="nick" style="color:#6b8072"><a href="#115213" label="[11:52:13]">&lt;lrvick&gt;</a></span><span class="message">Yeah I got the same hash on two different systems, but then a different hash on a third and that diff</span></div><div class="line" id="115214"><span class="nick" style="color:#80b1d3"><a href="#115214" label="[11:52:14]">&lt;janneke&gt;</a></span><span class="message">that's on guix core-updates branch, fwiw we're not using --disable-separate-code</span></div><div class="line" id="115224"><span class="nick" style="color:#6b8072"><a href="#115224" label="[11:52:24]">&lt;lrvick&gt;</a></span><span class="message">interesting.</span></div><div class="line" id="115431"><span class="nick" style="color:#6b8072"><a href="#115431" label="[11:54:31]">&lt;lrvick&gt;</a></span><span class="message">only 1/3 builds being different for me is making this heisenbug status. Will see if I can reproduce in another set of rounds with --disable-separate-code on the same set of machines.</span></div><div class="line" id="115702"><span class="nick" style="color:#80b1d3"><a href="#115702" label="[11:57:02]">&lt;janneke&gt;</a></span><span class="message">yeah, tricksy</span></div><div class="line" id="120155"><span class="nick" style="color:#2e2a4a"><a href="#120155" label="[12:01:55]">&lt;fossy&gt;</a></span><span class="message">lrvick: hm, suspect it's a race (possibly when separate-code is enabled), i usually am only running with -j6 to -j10</span></div><div class="line" id="122747"><span class="nick" style="color:#6d2462"><a href="#122747" label="[12:27:47]">&lt;oriansj&gt;</a></span><span class="message">fossy: the hex2 used to do the first build of M2-planet would be the one written in assembly and not the one in mescc-tools; so it would only support the host architecture.</span></div><div class="line" id="122911"><span class="nick" style="color:#6d2462"><a href="#122911" label="[12:29:11]">&lt;oriansj&gt;</a></span><span class="message">and yes, caching of the reads/writes would have a significant performance difference in the early stage0 steps. (literally seconds vs hours depending on your firmware's ability to cache pages)</span></div><div class="line" id="123142"><span class="nick" style="color:#234e69"><a href="#123142" label="[12:31:42]">&lt;muurkha&gt;</a></span><span class="message">wow</span></div><div class="line" id="123404"><span class="nick" style="color:#6d2462"><a href="#123404" label="[12:34:04]">&lt;oriansj&gt;</a></span><span class="message">microseconds latency vs nanoseconds latency is kinda a big delta and if they do a read from the USB flash for every byte and a write for every byte and wait for completion, then yes that is the sort of difference compared to just copying a byte into a block of RAM until a flush or close.</span></div><div class="line" id="123800"><span class="nick" style="color:#234e69"><a href="#123800" label="[12:38:00]">&lt;muurkha&gt;</a></span><span class="message">I didn't realize it was doing byte reads from the USB flash</span></div><div class="line" id="123810"><span class="nick" style="color:#234e69"><a href="#123810" label="[12:38:10]">&lt;muurkha&gt;</a></span><span class="message">presumably that involves, as a subroutine, doing a block read from the USB flash</span></div><div class="line" id="124059"><span class="nick" style="color:#6d2462"><a href="#124059" label="[12:40:59]">&lt;oriansj&gt;</a></span><span class="message">and then clearing the block after the read and having to redo the block read again at the next read call</span></div><div class="line" id="124115"><span class="nick" style="color:#6d2462"><a href="#124115" label="[12:41:15]">&lt;oriansj&gt;</a></span><span class="message">which again just reads another single byte from that block</span></div><div class="line" id="124434"><span class="nick" style="color:#6d2462"><a href="#124434" label="[12:44:34]">&lt;oriansj&gt;</a></span><span class="message">as the stage0 steps leading up to M2libc are all single byte read/write from begining to end; (this is to reduce complexity in the pieces but it really kills performance on badly written firmware/kernels)</span></div><div class="line" id="125036"><span class="nick" style="color:#234e69"><a href="#125036" label="[12:50:36]">&lt;muurkha&gt;</a></span><span class="message">I feel like you could mostly close the nanosecond gap with if (requested_block == current_block) return;</span></div><div class="line" id="125121"><span class="nick" style="color:#234e69"><a href="#125121" label="[12:51:21]">&lt;muurkha&gt;</a></span><span class="message">well, I guess it's not quite that simple!</span></div><div class="line" id="125126"><span class="nick" style="color:#234e69"><a href="#125126" label="[12:51:26]">&lt;muurkha&gt;</a></span><span class="message">because then you also need</span></div><div class="line" id="125134"><span class="nick" style="color:#234e69"><a href="#125134" label="[12:51:34]">&lt;muurkha&gt;</a></span><span class="message">current_block = requested_block;</span></div><div class="line" id="125212"><span class="nick" style="color:#234e69"><a href="#125212" label="[12:52:12]">&lt;muurkha&gt;</a></span><span class="message">so it's like three or four machine instructions and a static variable</span></div><div class="line" id="125217"><span class="nick" style="color:#234e69"><a href="#125217" label="[12:52:17]">&lt;muurkha&gt;</a></span><span class="message">?</span></div><div class="line" id="125632"><span class="nick" style="color:#6c3d55"><a href="#125632" label="[12:56:32]">&lt;deesix&gt;</a></span><span class="message">A small talk about the &quot;JustBuild project&quot; <a rel="nofollow" href="https://fosdem.org/2024/schedule/event/fosdem-2024-2690-build-distribution-for-maintaining-the-famous-gcc-4-7/">https://fosdem.org/2024/schedule/event/fosdem-2024-2690-build-distribution-for-maintaining-the-famous-gcc-4-7/</a> </span></div><div class="line" id="131417"><span class="nick" style="color:#d9d9d9"><a href="#131417" label="[13:14:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; They start with tinycc, POSIX shell and coreutils</span></div><div class="line" id="131431"><span class="nick" style="color:#d9d9d9"><a href="#131431" label="[13:14:31]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; That's not a small set though</span></div><div class="line" id="131946"><span class="nick" style="color:#80b1d3"><a href="#131946" label="[13:19:46]">&lt;janneke&gt;</a></span><span class="message">*and* a C library</span></div><div class="line" id="131947"><span class="nick" style="color:#d9d9d9"><a href="#131947" label="[13:19:47]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Generally by then bootstrap is fairly simple and resembles distro packaging</span></div><div class="line" id="132001"><span class="nick" style="color:#d9d9d9"><a href="#132001" label="[13:20:01]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah they assume c library too</span></div><div class="line" id="132155"><span class="nick" style="color:#d9d9d9"><a href="#132155" label="[13:21:55]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; C library is often one of the trickier bits</span></div><div class="line" id="132218"><span class="nick" style="color:#d9d9d9"><a href="#132218" label="[13:22:18]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; As it does have some assembly</span></div><div class="line" id="135315"><span class="nick" style="color:#6d2462"><a href="#135315" label="[13:53:15]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well no, because there are writes between the reads to a different block, so you would need to support atleast 3 pages of disk being cached and it'll take a bit more logic to do even a last in last out cache.</span></div><div class="line" id="135435"><span class="nick" style="color:#6d2462"><a href="#135435" label="[13:54:35]">&lt;oriansj&gt;</a></span><span class="message">4 pages to cover the case of new read page and new write page but what is an extra 4KB of cache when you have a 100+MB firmware blob involved.</span></div><div class="line" id="141907"><span class="nick" style="color:#234e69"><a href="#141907" label="[14:19:07]">&lt;muurkha&gt;</a></span><span class="message">oriansj: in some cases yes. Forth only guaranteed 2</span></div><div class="line" id="141931"><span class="nick" style="color:#234e69"><a href="#141931" label="[14:19:31]">&lt;muurkha&gt;</a></span><span class="message">but in lots of cases you're reading bytes to put them somewhere other than immediately another disk block</span></div><div class="line" id="143153"><span class="nick" style="color:#6d2462"><a href="#143153" label="[14:31:53]">&lt;oriansj&gt;</a></span><span class="message">true buffering (caching) is rather handy for good performance and one doesn't need much memory to get 90% of the benefit</span></div><div class="line" id="145114"><span class="nick" style="color:#234e69"><a href="#145114" label="[14:51:14]">&lt;muurkha&gt;</a></span><span class="message">but it's true that you do need more than three machine instructions.  maybe something like if (num == keys[0]) return 0; if (num == keys[1]) return 1; last ^= 1; keys[last] = num; /* proceed to block loading logic */</span></div><div class="line" id="145141"><span class="nick" style="color:#234e69"><a href="#145141" label="[14:51:41]">&lt;muurkha&gt;</a></span><span class="message">for two block buffers</span></div><div class="line" id="190505"><span class="nick" style="color:#6d2462"><a href="#190505" label="[19:05:05]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well doing 4 pages would be something like: and eax, 0xFFFFF000 ; mov ebx, 1; cmp eax, [$buf1]; je done; cmp eax, [$buf2]; je done; cmp eax, [$buf3]; je done; cmp eax, [$buf4]; je done; (boring page load logic and ); :done mov eax, [ebx+$buf1]; return;</span></div><div class="line" id="190547"><span class="nick" style="color:#6d2462"><a href="#190547" label="[19:05:47]">&lt;oriansj&gt;</a></span><span class="message">not very complicated or slow but will be slightly less likely to hit a page fault than a 2 buffer cache</span></div><br /></div></body></html>