<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-02-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="112940"><span class="nick" style="color:#8dd3c7"><a href="#112940" label="[11:29:40]">&lt;unmatched-paren&gt;</a></span><span class="message">i was wondering, if rekado_'s ghc bootstrapping doesn't work out, could we write a translator from haskell to ocaml, since they're so similar? i don't know much haskell, so i'm not sure if it has some feature that's impossible to add to ocaml (ocaml does have a `lazy` keyword, btw)</span></div><div class="line" id="113037"><span class="nick" style="color:#8dd3c7"><a href="#113037" label="[11:30:37]">&lt;unmatched-paren&gt;</a></span><span class="message">it would be way easier than writing a whole new compiler, at least</span></div><div class="line" id="113149"><span class="nick" style="color:#8dd3c7"><a href="#113149" label="[11:31:49]">&lt;unmatched-paren&gt;</a></span><span class="message">we might even be able to reuse the ghc runtime with ocaml's ffi, idk</span></div><div class="line" id="114421"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="114423"><span class="nick" style="color:#2e2a4a"><a href="#114423" label="[11:44:23]">&lt;rekado_&gt;</a></span><span class="message">unmatched-paren: it would be easier to write a translator from non-standard haskell to haskell 98</span></div><div class="line" id="114435"><span class="nick" style="color:#2e2a4a"><a href="#114435" label="[11:44:35]">&lt;rekado_&gt;</a></span><span class="message">ML and Haskell are only superficially similar.</span></div><div class="line" id="114449"><span class="nick" style="color:#2e2a4a"><a href="#114449" label="[11:44:49]">&lt;rekado_&gt;</a></span><span class="message">GHC Haskell is again rather different from Haskell 98</span></div><div class="line" id="114613"><span class="nick">***</span><span class="message notice">iridium.libera.chat sets mode: +o oriansj</span></div><div class="line" id="114813"><span class="nick" style="color:#6b8072"><a href="#114813" label="[11:48:13]">&lt;fossy&gt;</a></span><span class="message">is ghc haskell the modern standard? or are there other dialects of haskell still used</span></div><div class="line" id="114921"><span class="nick" style="color:#2e2a4a"><a href="#114921" label="[11:49:21]">&lt;rekado_&gt;</a></span><span class="message">there are newer versions of the standard, but there really is only GH</span></div><div class="line" id="114923"><span class="nick" style="color:#2e2a4a"><a href="#114923" label="[11:49:23]">&lt;rekado_&gt;</a></span><span class="message">GHC*</span></div><div class="line" id="114930"><span class="nick" style="color:#6b8072"><a href="#114930" label="[11:49:30]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="114937"><span class="nick" style="color:#2e2a4a"><a href="#114937" label="[11:49:37]">&lt;rekado_&gt;</a></span><span class="message">other compilers exist, but they are written in the GHC dialect</span></div><div class="line" id="114944"><span class="nick" style="color:#2e2a4a"><a href="#114944" label="[11:49:44]">&lt;rekado_&gt;</a></span><span class="message">so they are no viable targets for bootstrapping</span></div><div class="line" id="115004"><span class="nick" style="color:#6b8072"><a href="#115004" label="[11:50:04]">&lt;fossy&gt;</a></span><span class="message">that's rather annoying</span></div><div class="line" id="115044"><span class="nick" style="color:#2e2a4a"><a href="#115044" label="[11:50:44]">&lt;rekado_&gt;</a></span><span class="message">but I think we can make some progress here with STGHugs</span></div><div class="line" id="115134"><span class="nick" style="color:#2e2a4a"><a href="#115134" label="[11:51:34]">&lt;rekado_&gt;</a></span><span class="message">the non-standard Argv.lhs may not be needed at all.  This escape hatch to embed plain C in Haskell files may not be needed, because we *can* translate this to standard Haskell.</span></div><div class="line" id="115211"><span class="nick" style="color:#2e2a4a"><a href="#115211" label="[11:52:11]">&lt;rekado_&gt;</a></span><span class="message">just looking at ``prog_argv'' – there is a pure Haskell way to access argv, so we could use that, I guess</span></div><div class="line" id="115246"><span class="nick" style="color:#2e2a4a"><a href="#115246" label="[11:52:46]">&lt;rekado_&gt;</a></span><span class="message">it has a different type – IO String instead of FASTSTRING, but I think that with some newtype declarations we could work around that</span></div><div class="line" id="142309"><span class="nick" style="color:#80b1d3"><a href="#142309" label="[14:23:09]">&lt;muurkha&gt;</a></span><span class="message">GHC has pretty much eclipsed everything else yeah</span></div><div class="line" id="142328"><span class="nick" style="color:#80b1d3"><a href="#142328" label="[14:23:28]">&lt;muurkha&gt;</a></span><span class="message">janus__: seen the discussion here over the last few days?</span></div><div class="line" id="153311"><span class="nick" style="color:#6d2462"><a href="#153311" label="[15:33:11]">&lt;janus__&gt;</a></span><span class="message">no, i will read it in the new few hours :)</span></div><div class="line" id="155825"><span class="nick">***</span><span class="message notice">janus__ is now known as janus</span></div><div class="line" id="171158"><span class="nick">***</span><span class="message notice">Noisytoot_ is now known as Noisytoot</span></div><div class="line" id="181018"><span class="nick" style="color:#234e69"><a href="#181018" label="[18:10:18]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well to your exact question, yes that could be done. Even if rekado's work is a success, anyone who feels that would be a fun project could certainly do that. To the more likely alternative bootstrap paths: blynn's Haskell compiler is trivial to bootstrap and appears to be actively developed. So once it reaches a large enough subset, it could be used to build GHC directly. But ultimately the solution will be decided by</span></div><div class="line" id="181018"><span class="nick" style="color:#234e69"><a href="#181018" label="[18:10:18]">&lt;oriansj&gt;</a></span><span class="message">people who are hacking on it with the right idea.</span></div><div class="line" id="181309"><span class="nick" style="color:#6c3d55"><a href="#181309" label="[18:13:09]">&lt;slycelote_&gt;</a></span><span class="message">can ocaml be bootstrapped?</span></div><div class="line" id="181432"><span class="nick" style="color:#d9d9d9"><a href="#181432" label="[18:14:32]">&lt;civodul&gt;</a></span><span class="message">yes, see <a rel="nofollow" href="https://github.com/Ekdohibs/camlboot/">https://github.com/Ekdohibs/camlboot/</a> </span></div><div class="line" id="181437"><span class="nick" style="color:#d9d9d9"><a href="#181437" label="[18:14:37]">&lt;civodul&gt;</a></span><span class="message">roptat worked on it</span></div><div class="line" id="181548"><span class="nick" style="color:#6c3d55"><a href="#181548" label="[18:15:48]">&lt;slycelote_&gt;</a></span><span class="message">nice</span></div><div class="line" id="203757"><span class="nick" style="color:#8dd3c7"><a href="#203757" label="[20:37:57]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: even after we've _technically_ bootstrapped all the things that matter, we're still relying on all these gross hacks</span></div><div class="line" id="203819"><span class="nick" style="color:#8dd3c7"><a href="#203819" label="[20:38:19]">&lt;unmatched-paren&gt;</a></span><span class="message">so that kind of thing would allow us to remove said gross hacks</span></div><div class="line" id="203827"><span class="nick" style="color:#8dd3c7"><a href="#203827" label="[20:38:27]">&lt;unmatched-paren&gt;</a></span><span class="message">which is good either way :)</span></div><div class="line" id="203950"><span class="nick" style="color:#8dd3c7"><a href="#203950" label="[20:39:50]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: yes, though i am currently working on bootstrapping pascal myself; i'm in the early stages, tho, so i'm not really talking about it here much yet</span></div><div class="line" id="204022"><span class="nick" style="color:#8dd3c7"><a href="#204022" label="[20:40:22]">&lt;unmatched-paren&gt;</a></span><span class="message">sadly none of the currently available pascal compilers will be adequate</span></div><div class="line" id="204129"><span class="nick" style="color:#8dd3c7"><a href="#204129" label="[20:41:29]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm not particularly knowledgable about C land, so although it _might_ be possible to use gpc with really old gcc, even rekado_ couldn't do it, so i don't fancy my chances</span></div><div class="line" id="204229"><span class="nick" style="color:#8dd3c7"><a href="#204229" label="[20:42:29]">&lt;unmatched-paren&gt;</a></span><span class="message">so i'm in the early stages of writing one (with ocaml and llvm)...</span></div><div class="line" id="204556"><span class="nick" style="color:#8dd3c7"><a href="#204556" label="[20:45:56]">&lt;unmatched-paren&gt;</a></span><span class="message">pascal is popular in that hellscape known as the commercial software industry, not so much in the libre world; however, the &lt;<a rel="nofollow" href="https://nim-lang.org">https://nim-lang.org</a>&gt;  compiler was originally written in Object Pascal, and i like nim :)</span></div><div class="line" id="212349"><span class="nick" style="color:#bc80bd"><a href="#212349" label="[21:23:49]">&lt;roptat&gt;</a></span><span class="message">slycelote_, the main limitation right now is that it targets ocaml 4.07</span></div><div class="line" id="212410"><span class="nick" style="color:#bc80bd"><a href="#212410" label="[21:24:10]">&lt;roptat&gt;</a></span><span class="message">but that's what we use for it in Guix, the later OCaml versions are still not bootstrapped</span></div><div class="line" id="212425"><span class="nick" style="color:#8dd3c7"><a href="#212425" label="[21:24:25]">&lt;unmatched-paren&gt;</a></span><span class="message">...oh</span></div><div class="line" id="212440"><span class="nick" style="color:#8dd3c7"><a href="#212440" label="[21:24:40]">&lt;unmatched-paren&gt;</a></span><span class="message">aaargh</span></div><div class="line" id="212451"><span class="nick" style="color:#8dd3c7"><a href="#212451" label="[21:24:51]">&lt;unmatched-paren&gt;</a></span><span class="message">i thought it was completely bootstrapped :(</span></div><div class="line" id="212521"><span class="nick" style="color:#bc80bd"><a href="#212521" label="[21:25:21]">&lt;roptat&gt;</a></span><span class="message">at least we used it to perform DDC on ocaml 4.07 ;)</span></div><div class="line" id="212618"><span class="nick" style="color:#bc80bd"><a href="#212618" label="[21:26:18]">&lt;roptat&gt;</a></span><span class="message">we'd have to find the bootstrap commits starting from ocaml 4.07 to the current version, otherwise the plan was to port camlboot to the more recent versions</span></div><div class="line" id="212633"><span class="nick" style="color:#bc80bd"><a href="#212633" label="[21:26:33]">&lt;roptat&gt;</a></span><span class="message">it shouldn't be missing too much, but we have to implement the missing features</span></div><div class="line" id="212716"><span class="nick" style="color:#8dd3c7"><a href="#212716" label="[21:27:16]">&lt;unmatched-paren&gt;</a></span><span class="message">i guess i'll try to find those bootstrap commits, because my pascal compiler will otherwise be pretty useless...</span></div><div class="line" id="212819"><span class="nick" style="color:#bc80bd"><a href="#212819" label="[21:28:19]">&lt;roptat&gt;</a></span><span class="message">one reason why we targetted 4.07 is that starting from 4.08, the compiler needs to use menhir to generate its parser, and menhir is written in ocaml</span></div><div class="line" id="212851"><span class="nick" style="color:#8dd3c7"><a href="#212851" label="[21:28:51]">&lt;unmatched-paren&gt;</a></span><span class="message">does menhir not compile with 4.07?</span></div><div class="line" id="212856"><span class="nick" style="color:#bc80bd"><a href="#212856" label="[21:28:56]">&lt;roptat&gt;</a></span><span class="message">it does</span></div><div class="line" id="212907"><span class="nick" style="color:#bc80bd"><a href="#212907" label="[21:29:07]">&lt;roptat&gt;</a></span><span class="message">but that's why we needed 4.07</span></div><div class="line" id="212911"><span class="nick" style="color:#8dd3c7"><a href="#212911" label="[21:29:11]">&lt;unmatched-paren&gt;</a></span><span class="message">right</span></div><div class="line" id="212935"><span class="nick" style="color:#3c5b35"><a href="#212935" label="[21:29:35]">&lt;janus&gt;</a></span><span class="message">what's DDC?</span></div><div class="line" id="213003"><span class="nick" style="color:#af8d2f"><a href="#213003" label="[21:30:03]">&lt;Hagfish&gt;</a></span><span class="message">diverse double compiling</span></div><div class="line" id="213005"><span class="nick" style="color:#bc80bd"><a href="#213005" label="[21:30:05]">&lt;roptat&gt;</a></span><span class="message">diverse double compiling</span></div><div class="line" id="213006"><span class="nick" style="color:#bc80bd"><a href="#213006" label="[21:30:06]">&lt;roptat&gt;</a></span><span class="message"> <a rel="nofollow" href="https://dwheeler.com/trusting-trust/">https://dwheeler.com/trusting-trust/</a> </span></div><div class="line" id="213026"><span class="nick" style="color:#af8d2f"><a href="#213026" label="[21:30:26]">&lt;Hagfish&gt;</a></span><span class="message">(sorry, i couldn't resist.  i knew you must have been going to get a reference)</span></div><div class="line" id="213039"><span class="nick" style="color:#bc80bd"><a href="#213039" label="[21:30:39]">&lt;roptat&gt;</a></span><span class="message">:)</span></div><div class="line" id="214619"><span class="nick" style="color:#8dd3c7"><a href="#214619" label="[21:46:19]">&lt;unmatched-paren&gt;</a></span><span class="message">...i'm really going down a rabbit hole with nim</span></div><div class="line" id="214636"><span class="nick" style="color:#8dd3c7"><a href="#214636" label="[21:46:36]">&lt;unmatched-paren&gt;</a></span><span class="message">first, i try to bootstrap nim, and discover that it needs pascal</span></div><div class="line" id="214731"><span class="nick" style="color:#8dd3c7"><a href="#214731" label="[21:47:31]">&lt;unmatched-paren&gt;</a></span><span class="message">then, i find out that pascal isn't bootstrapped and try to build it with existing stuff</span></div><div class="line" id="214740"><span class="nick" style="color:#8dd3c7"><a href="#214740" label="[21:47:40]">&lt;unmatched-paren&gt;</a></span><span class="message">then i begin to write my own in ocaml</span></div><div class="line" id="214754"><span class="nick" style="color:#8dd3c7"><a href="#214754" label="[21:47:54]">&lt;unmatched-paren&gt;</a></span><span class="message">and i discover that ocaml isn't quite bootstrapped yet...</span></div><div class="line" id="215756"><span class="nick" style="color:#8dd3c7"><a href="#215756" label="[21:57:56]">&lt;unmatched-paren&gt;</a></span><span class="message">urgh, i'll rewrite it in rUsT then, since that's the only other language that i'm comfortable with...</span></div><div class="line" id="215809"><span class="nick" style="color:#8dd3c7"><a href="#215809" label="[21:58:09]">&lt;unmatched-paren&gt;</a></span><span class="message">at least i wasn't too far on :P</span></div><div class="line" id="215855"><span class="nick" style="color:#8dd3c7"><a href="#215855" label="[21:58:55]">&lt;unmatched-paren&gt;</a></span><span class="message">i could do it in scheme, but dynamic typing is the worst</span></div><div class="line" id="220004"><span class="nick" style="color:#8dd3c7"><a href="#220004" label="[22:00:04]">&lt;unmatched-paren&gt;</a></span><span class="message">waitaminute... <a rel="nofollow" href="https://github.com/tylerlaberge/rascal">https://github.com/tylerlaberge/rascal</a> </span></div><div class="line" id="220008"><span class="nick" style="color:#8dd3c7"><a href="#220008" label="[22:00:08]">&lt;unmatched-paren&gt;</a></span><span class="message">i could extend this</span></div><div class="line" id="220239"><span class="nick" style="color:#bc80bd"><a href="#220239" label="[22:02:39]">&lt;roptat&gt;</a></span><span class="message">sounds fun :)</span></div><div class="line" id="220354"><span class="nick" style="color:#8dd3c7"><a href="#220354" label="[22:03:54]">&lt;unmatched-paren&gt;</a></span><span class="message">it's a working interpreter written in a language i'm very comfortable working in, so why not :)</span></div><div class="line" id="220429"><span class="nick" style="color:#8dd3c7"><a href="#220429" label="[22:04:29]">&lt;unmatched-paren&gt;</a></span><span class="message">hm, do i add my name to the license copyright, since i'm forking it?</span></div><div class="line" id="220607"><span class="nick" style="color:#bc80bd"><a href="#220607" label="[22:06:07]">&lt;roptat&gt;</a></span><span class="message">yes, once you do modifications, you own copyright on those modifications</span></div><div class="line" id="221434"><span class="nick" style="color:#389600"><a href="#221434" label="[22:14:34]">&lt;stikonas&gt;</a></span><span class="message">yes, that might work since rust is bootstrapped</span></div><div class="line" id="221531"><span class="nick" style="color:#389600"><a href="#221531" label="[22:15:31]">&lt;stikonas&gt;</a></span><span class="message">and right now mrustc can build rustc-1.54, so it's not even that far behind the latest version</span></div><div class="line" id="222248"><span class="nick" style="color:#8dd3c7"><a href="#222248" label="[22:22:48]">&lt;unmatched-paren&gt;</a></span><span class="message">obviously rust is not the best idea re writing bootstrap programs, but i am not a good c programmer</span></div><div class="line" id="222457"><span class="nick" style="color:#80b1d3"><a href="#222457" label="[22:24:57]">&lt;muurkha&gt;</a></span><span class="message">pascal is popular in the commercial software industry?</span></div><div class="line" id="222613"><span class="nick" style="color:#8dd3c7"><a href="#222613" label="[22:26:13]">&lt;unmatched-paren&gt;</a></span><span class="message">yes, it's pretty popular there afaik</span></div><div class="line" id="222648"><span class="nick" style="color:#8dd3c7"><a href="#222648" label="[22:26:48]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Delphi_">https://en.wikipedia.org/wiki/Delphi_</a>(software) </span></div><div class="line" id="222657"><span class="nick" style="color:#80b1d3"><a href="#222657" label="[22:26:57]">&lt;muurkha&gt;</a></span><span class="message">unmatched-paren: you could write it in OCaml 4.07 too</span></div><div class="line" id="222755"><span class="nick" style="color:#8dd3c7"><a href="#222755" label="[22:27:55]">&lt;unmatched-paren&gt;</a></span><span class="message">no sane free source developer would use an expensive proprietary ide/compiler like Delphi, but it still exists and is being developed, so it must be selling somehow</span></div><div class="line" id="222900"><span class="nick" style="color:#8dd3c7"><a href="#222900" label="[22:29:00]">&lt;unmatched-paren&gt;</a></span><span class="message">apparently there's quite a lot of developers who refuse to learn anything else so they just produce commercial pascal programs</span></div><div class="line" id="222946"><span class="nick" style="color:#80b1d3"><a href="#222946" label="[22:29:46]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/tagged/javascript">https://stackoverflow.com/questions/tagged/javascript</a>  2,335,033 questions</span></div><div class="line" id="223003"><span class="nick" style="color:#80b1d3"><a href="#223003" label="[22:30:03]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/tagged/delphi">https://stackoverflow.com/questions/tagged/delphi</a>  49,205 questions</span></div><div class="line" id="223023"><span class="nick" style="color:#8dd3c7"><a href="#223023" label="[22:30:23]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: true, but i've found an existing tiny rust pascal interpreter which can do basic stuff, so i'd be better off forking that</span></div><div class="line" id="223051"><span class="nick" style="color:#8dd3c7"><a href="#223051" label="[22:30:51]">&lt;unmatched-paren&gt;</a></span><span class="message">obviously not as popular as javascript :) and it's certainly getting less popular.</span></div><div class="line" id="223130"><span class="nick" style="color:#8dd3c7"><a href="#223130" label="[22:31:30]">&lt;unmatched-paren&gt;</a></span><span class="message">i kind of meant 'more popular' in the commercial software industry, not 'very popular', sorry for the bad wording</span></div><div class="line" id="223232"><span class="nick" style="color:#80b1d3"><a href="#223232" label="[22:32:32]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/tagged/sql-server">https://stackoverflow.com/questions/tagged/sql-server</a>  314,785 questions</span></div><div class="line" id="223242"><span class="nick" style="color:#80b1d3"><a href="#223242" label="[22:32:42]">&lt;muurkha&gt;</a></span><span class="message">oh, I'd believe &quot;more popular&quot; for sure</span></div><div class="line" id="223311"><span class="nick" style="color:#80b1d3"><a href="#223311" label="[22:33:11]">&lt;muurkha&gt;</a></span><span class="message">and ⅙ the popularity of SQL Server isn't that bad</span></div><div class="line" id="223328"><span class="nick" style="color:#80b1d3"><a href="#223328" label="[22:33:28]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/tagged/vb6">https://stackoverflow.com/questions/tagged/vb6</a>  10,541 questions</span></div><div class="line" id="223352"><span class="nick" style="color:#8dd3c7"><a href="#223352" label="[22:33:52]">&lt;unmatched-paren&gt;</a></span><span class="message">there's only two free source programs (that are not part of the freepascal project itself) that i know that use pascal: double commander (gui file manager) and the old nim compiler</span></div><div class="line" id="223404"><span class="nick" style="color:#8dd3c7"><a href="#223404" label="[22:34:04]">&lt;unmatched-paren&gt;</a></span><span class="message">the former i don't care about, the latter i do</span></div><div class="line" id="223444"><span class="nick" style="color:#80b1d3"><a href="#223444" label="[22:34:44]">&lt;muurkha&gt;</a></span><span class="message">yeah, bootstrapping nim could be pretty important</span></div><div class="line" id="223524"><span class="nick" style="color:#8dd3c7"><a href="#223524" label="[22:35:24]">&lt;unmatched-paren&gt;</a></span><span class="message">it's a neat language, and i want to look into it more, but i have a rule where i won't use a non-bootstrappable language</span></div><div class="line" id="223530"><span class="nick" style="color:#8dd3c7"><a href="#223530" label="[22:35:30]">&lt;unmatched-paren&gt;</a></span><span class="message">which is why i can't use haskell :(</span></div><div class="line" id="223739"><span class="nick" style="color:#80b1d3"><a href="#223739" label="[22:37:39]">&lt;muurkha&gt;</a></span><span class="message">:(</span></div><div class="line" id="224825"><span class="nick" style="color:#8dd3c7"><a href="#224825" label="[22:48:25]">&lt;unmatched-paren&gt;</a></span><span class="message">most important changes first: change that blasphemous `README.md` to a beautiful `readme.org` :)</span></div><div class="line" id="232126"><span class="nick" style="color:#80b1d3"><a href="#232126" label="[23:21:26]">&lt;muurkha&gt;</a></span><span class="message">hahaha</span></div><div class="line" id="233507"><span class="nick" style="color:#389600"><a href="#233507" label="[23:35:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, looks like rascal is quite limited subset of pascal</span></div><div class="line" id="233520"><span class="nick" style="color:#389600"><a href="#233520" label="[23:35:20]">&lt;stikonas&gt;</a></span><span class="message">but hopefully you can extend it</span></div><div class="line" id="233619"><span class="nick" style="color:#8dd3c7"><a href="#233619" label="[23:36:19]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: well, it's better than starting from scratch :)</span></div><div class="line" id="233659"><span class="nick" style="color:#8dd3c7"><a href="#233659" label="[23:36:59]">&lt;unmatched-paren&gt;</a></span><span class="message">i had to make some minor modifications to make it compile when cargo's edition was set to 2021, but apart from that it works fine</span></div><div class="line" id="233723"><span class="nick" style="color:#8dd3c7"><a href="#233723" label="[23:37:23]">&lt;unmatched-paren&gt;</a></span><span class="message"> &lt;<a rel="nofollow" href="https://codeberg.org/unmatched-paren/rascal-boot">https://codeberg.org/unmatched-paren/rascal-boot</a>&gt;  the journey begins :)</span></div><div class="line" id="233833"><span class="nick" style="color:#389600"><a href="#233833" label="[23:38:33]">&lt;stikonas&gt;</a></span><span class="message">well, I just tried some sample programs from tutorials and it almost always complains</span></div><div class="line" id="233849"><span class="nick" style="color:#389600"><a href="#233849" label="[23:38:49]">&lt;stikonas&gt;</a></span><span class="message">but yes, that's much better than nothing</span></div><div class="line" id="233914"><span class="nick" style="color:#8dd3c7"><a href="#233914" label="[23:39:14]">&lt;unmatched-paren&gt;</a></span><span class="message">it seems like it can't handle `char`s yet, which is a pretty gaping hole</span></div><div class="line" id="233933"><span class="nick" style="color:#389600"><a href="#233933" label="[23:39:33]">&lt;stikonas&gt;</a></span><span class="message">probably more things are missing...</span></div><div class="line" id="234008"><span class="nick" style="color:#8dd3c7"><a href="#234008" label="[23:40:08]">&lt;unmatched-paren&gt;</a></span><span class="message">they have the same syntax as strings in pascal, which makes it quite hard to tell when the programmer means a string and when they mean a char</span></div><div class="line" id="234200"><span class="nick" style="color:#8dd3c7"><a href="#234200" label="[23:42:00]">&lt;unmatched-paren&gt;</a></span><span class="message">sorry, laptop died</span></div><div class="line" id="234229"><span class="nick" style="color:#8dd3c7"><a href="#234229" label="[23:42:29]">&lt;unmatched-paren&gt;</a></span><span class="message">i really need to set up a low battery warning for mako :)</span></div><div class="line" id="234309"><span class="nick" style="color:#8dd3c7"><a href="#234309" label="[23:43:09]">&lt;unmatched-paren&gt;</a></span><span class="message">as i said, you can't tell whether 'a' is a string or a char with just a parser</span></div><div class="line" id="234334"><span class="nick" style="color:#8dd3c7"><a href="#234334" label="[23:43:34]">&lt;unmatched-paren&gt;</a></span><span class="message">you need to do type analysis on the functions and procs you're passing it to</span></div><div class="line" id="234352"><span class="nick" style="color:#8dd3c7"><a href="#234352" label="[23:43:52]">&lt;unmatched-paren&gt;</a></span><span class="message">which is probably why there's no char</span></div><div class="line" id="234525"><span class="nick" style="color:#8dd3c7"><a href="#234525" label="[23:45:25]">&lt;unmatched-paren&gt;</a></span><span class="message">i wonder if it would be worthwhile to change the home-grown parser to something like &lt;<a rel="nofollow" href="https://lib.rs/nom">https://lib.rs/nom</a>&gt; </span></div><br /></div></body></html>