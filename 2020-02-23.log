<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="014221"><span class="nick" style="color:#8dd3c7"><a href="#014221" label="[01:42:21]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ, M0-macro-compact prototype is pretty cool. It was trivial change for me to adapt my test script for M0-macro.hex2 to test your prototype instead <a rel="nofollow" href="https://github.com/markjenkins/stage0/commit/84128fa646e971246b4628933fca550ce45a55d7">https://github.com/markjenkins/stage0/commit/84128fa646e971246b4628933fca550ce45a55d7</a>  . Test passed, of course.</span></div><div class="line" id="014431"><span class="nick" style="color:#8dd3c7"><a href="#014431" label="[01:44:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'll rework this test fully into makefile and make it generic so it can test all of M0-macro.hex2 with vm and vm64 , various prototype and C versions, and the future M0-macro-compact.s against vm16, vm, vm64</span></div><div class="line" id="014449"><span class="nick" style="color:#8dd3c7"><a href="#014449" label="[01:44:49]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'll also pay attention to where test artifacts should go as per other tests in makefile</span></div><div class="line" id="015324"><span class="nick" style="color:#8dd3c7"><a href="#015324" label="[01:53:24]">&lt;markjenkinsznc&gt;</a></span><span class="message">No one should worry that I'm potentially distracting Jeremiah with common interest in knight stuff when there is still work ahead on bootstrapping GNU/Linux on Linux+small ELF binary..</span></div><div class="line" id="015522"><span class="nick" style="color:#8dd3c7"><a href="#015522" label="[01:55:22]">&lt;markjenkinsznc&gt;</a></span><span class="message">but the good news for anyone so inclined is I'm also learning scheme and prototyping my own implementation in a high level language (not yet published) and will be coming up with lots of feature test cases, including ones relevant to mes and guile compatibility</span></div><div class="line" id="015540"><span class="nick" style="color:#2e2a4a"><a href="#015540" label="[01:55:40]">&lt;OriansJ&gt;</a></span><span class="message">ooh markjenkinsznc you'll like this; current prototype .s version can do cc_x86.s in under 32KB</span></div><div class="line" id="015611"><span class="nick" style="color:#8dd3c7"><a href="#015611" label="[01:56:11]">&lt;markjenkinsznc&gt;</a></span><span class="message">if I move on this fast enough I'll be in time publish and share test cases that mes-m2 can use</span></div><div class="line" id="015646"><span class="nick" style="color:#8dd3c7"><a href="#015646" label="[01:56:46]">&lt;markjenkinsznc&gt;</a></span><span class="message">as I recall simple tests being desired as guile's suite is said to get hairy fast</span></div><div class="line" id="015725"><span class="nick" style="color:#2e2a4a"><a href="#015725" label="[01:57:25]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: plus I have kernel work to do if bauen1_ is up for it</span></div><div class="line" id="015814"><span class="nick" style="color:#2e2a4a"><a href="#015814" label="[01:58:14]">&lt;OriansJ&gt;</a></span><span class="message">and a proper POSIX kernel bootstrappable from M2-Planet is a higher priority than mes-m2 anyway</span></div><div class="line" id="020119"><span class="nick" style="color:#8dd3c7"><a href="#020119" label="[02:01:19]">&lt;markjenkinsznc&gt;</a></span><span class="message">I have a bit more interest in mes-m2 as I'm not really that far from being able to run M2-planet and M2-planet compiled mes-M2 with knightpies on some exotic platforms with python not otherwise supported by M2-planet and cc_*.s family</span></div><div class="line" id="020242"><span class="nick" style="color:#8dd3c7"><a href="#020242" label="[02:02:42]">&lt;markjenkinsznc&gt;</a></span><span class="message">Though I have my doubts performance feasability while interpreting mes while interpreting knight while interpreting python, three kinds of interpretation at once could be crushing</span></div><div class="line" id="020553"><span class="nick" style="color:#8dd3c7"><a href="#020553" label="[02:05:53]">&lt;markjenkinsznc&gt;</a></span><span class="message">the other reason I see kernel work as being further in my future is I'm enamoured by the tccboot hack of 2004 (uses linux 2.4), so on any stack where there's just the means to compile tcc then there's the means to make an escape and create self-bootstrapable x86 media for Linux 2.4 compatible old comps</span></div><div class="line" id="020612"><span class="nick" style="color:#8dd3c7"><a href="#020612" label="[02:06:12]">&lt;markjenkinsznc&gt;</a></span><span class="message">that's all for now</span></div><div class="line" id="022216"><span class="nick" style="color:#2e2a4a"><a href="#022216" label="[02:22:16]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: completely fair.</span></div><div class="line" id="022354"><span class="nick" style="color:#2e2a4a"><a href="#022354" label="[02:23:54]">&lt;OriansJ&gt;</a></span><span class="message">as when mes-m2 can run MesCC; it will solve the Linux bootstrap problem on all platforms upon which mes-m2 can run.</span></div><div class="line" id="022525"><span class="nick" style="color:#2e2a4a"><a href="#022525" label="[02:25:25]">&lt;OriansJ&gt;</a></span><span class="message">but that is why I feel the bootstrapping of a POSIX kernel is a higher priority. It gives more time for kernel development such that it'll be ready to build GCC and Linux by the time MesCC is done.</span></div><div class="line" id="022814"><span class="nick" style="color:#2e2a4a"><a href="#022814" label="[02:28:14]">&lt;OriansJ&gt;</a></span><span class="message">also these diversions are a productive use of my time as I am still stuck on a few points for mes-m2 (so I might as well make progress on other fronts)</span></div><div class="line" id="022959"><span class="nick" style="color:#6b8072"><a href="#022959" label="[02:29:59]">&lt;fossy&gt;</a></span><span class="message">what are those points?</span></div><div class="line" id="030002"><span class="nick" style="color:#2e2a4a"><a href="#030002" label="[03:00:02]">&lt;OriansJ&gt;</a></span><span class="message">fossy: string behavior in scheme (which I found in Ur-scheme as previously posted about here) and module support (Which could be done in scheme or C and I can't decided which is a better option)</span></div><div class="line" id="030020"><span class="nick" style="color:#6b8072"><a href="#030020" label="[03:00:20]">&lt;fossy&gt;</a></span><span class="message">hmmmmmmm</span></div><div class="line" id="030026"><span class="nick" style="color:#6b8072"><a href="#030026" label="[03:00:26]">&lt;fossy&gt;</a></span><span class="message">that is tricky</span></div><div class="line" id="030034"><span class="nick" style="color:#6b8072"><a href="#030034" label="[03:00:34]">&lt;fossy&gt;</a></span><span class="message">how does Ur-scheme do it</span></div><div class="line" id="030041"><span class="nick" style="color:#80b1d3"><a href="#030041" label="[03:00:41]">*</a></span><span class="message">fossy google</span></div><div class="line" id="030142"><span class="nick" style="color:#2e2a4a"><a href="#030142" label="[03:01:42]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="http://canonical.org/~kragen/sw/urscheme/">http://canonical.org/~kragen/sw/urscheme/</a> </span></div><div class="line" id="030157"><span class="nick" style="color:#6b8072"><a href="#030157" label="[03:01:57]">&lt;fossy&gt;</a></span><span class="message">you just beat me as the page loaded :P</span></div><div class="line" id="030619"><span class="nick" style="color:#2e2a4a"><a href="#030619" label="[03:06:19]">&lt;OriansJ&gt;</a></span><span class="message">you'll see the error message &quot;(lambda foo ... expressions are not valid scheme\n&quot; which you'll need to fix in Ur-scheme on  line 1880 by replacing (lambda cmd (... with (lambda (. cmd) (...</span></div><div class="line" id="030717"><span class="nick" style="color:#2e2a4a"><a href="#030717" label="[03:07:17]">&lt;OriansJ&gt;</a></span><span class="message">(you can use guile to verify this change doesn't change the behavior of Ur-scheme, only making it more mes-m2 compatible)</span></div><div class="line" id="030836"><span class="nick" style="color:#2e2a4a"><a href="#030836" label="[03:08:36]">&lt;OriansJ&gt;</a></span><span class="message">I need to figure out a trivial enough test to replicate that error; so that I can properly solve that bug in mes-m2</span></div><div class="line" id="032108"><span class="nick" style="color:#2e2a4a"><a href="#032108" label="[03:21:08]">&lt;OriansJ&gt;</a></span><span class="message">most of the issues in mes-m2 is just a lack of proper tests for the scheme primtives; which requires one to play scheme language lawyer to  justify the behavior is correct (or guile is correct) then it is rather trivial for me to fix mes-m2 to comply with the easy to verify result</span></div><div class="line" id="032212"><span class="nick" style="color:#2e2a4a"><a href="#032212" label="[03:22:12]">&lt;OriansJ&gt;</a></span><span class="message">and it is honestly not very fun work to make those tests for me.</span></div><div class="line" id="032420"><span class="nick" style="color:#2e2a4a"><a href="#032420" label="[03:24:20]">&lt;OriansJ&gt;</a></span><span class="message">it is another reason why slow-utils is important (a series of useful scheme programs) to the success of mes-m2 because it gives me half-steps on the path to MesCC</span></div><div class="line" id="032758"><span class="nick" style="color:#2e2a4a"><a href="#032758" label="[03:27:58]">&lt;OriansJ&gt;</a></span><span class="message">and let us be honest here; mes-m2 is effectively the biggest leap in the bootstrapping process. (JUMP from a minimal C compiler to a feature complete compatible for guile, guix and MesCC in one binary)</span></div><div class="line" id="033024"><span class="nick" style="color:#2e2a4a"><a href="#033024" label="[03:30:24]">&lt;OriansJ&gt;</a></span><span class="message">We certainly will get there but like eating an Elephant, you have to do it one bite at a time.</span></div><div class="line" id="033148"><span class="nick" style="color:#2e2a4a"><a href="#033148" label="[03:31:48]">&lt;OriansJ&gt;</a></span><span class="message">we will probably have to force some minimalism on guix (or atleast its early bootstrapping stages)</span></div><div class="line" id="034112"><span class="nick" style="color:#2e2a4a"><a href="#034112" label="[03:41:12]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: I would like to thank you for the M0 enhancement</span></div><div class="line" id="034202"><span class="nick" style="color:#2e2a4a"><a href="#034202" label="[03:42:02]">&lt;OriansJ&gt;</a></span><span class="message">because cc_x86.s just got built with --memory 8K</span></div><div class="line" id="034223"><span class="nick" style="color:#2e2a4a"><a href="#034223" label="[03:42:23]">&lt;OriansJ&gt;</a></span><span class="message">(on the new memory efficient M0)</span></div><div class="line" id="040443"><span class="nick" style="color:#2e2a4a"><a href="#040443" label="[04:04:43]">&lt;OriansJ&gt;</a></span><span class="message">ok for M0 to build M0-compact is 64KB</span></div><div class="line" id="040525"><span class="nick" style="color:#2e2a4a"><a href="#040525" label="[04:05:25]">&lt;OriansJ&gt;</a></span><span class="message">So it is in the scope of a 16bit processor (barely)</span></div><div class="line" id="040734"><span class="nick" style="color:#2e2a4a"><a href="#040734" label="[04:07:34]">&lt;OriansJ&gt;</a></span><span class="message">Now to tweak regular M0 to reduce memory requirements and enable it to run on 16bit and 64bit targets as well</span></div><div class="line" id="044515"><span class="nick" style="color:#2e2a4a"><a href="#044515" label="[04:45:15]">&lt;OriansJ&gt;</a></span><span class="message">and VM16 can build cc_x86.s</span></div><div class="line" id="044543"><span class="nick" style="color:#2e2a4a"><a href="#044543" label="[04:45:43]">&lt;OriansJ&gt;</a></span><span class="message">and 16KB of RAM</span></div><div class="line" id="044558"><span class="nick" style="color:#2e2a4a"><a href="#044558" label="[04:45:58]">&lt;OriansJ&gt;</a></span><span class="message">(mostly needed by hex2 and not M0-compact)</span></div><div class="line" id="051724"><span class="nick" style="color:#6d2462"><a href="#051724" label="[05:17:24]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: protective coatings are often a good idea</span></div><div class="line" id="051840"><span class="nick" style="color:#6d2462"><a href="#051840" label="[05:18:40]">&lt;xentrac&gt;</a></span><span class="message">&quot;(lambda (. cmd) ...)&quot; looks like an ill-formed S-expression to me; is it in fact well-formed?</span></div><div class="line" id="051920"><span class="nick" style="color:#6d2462"><a href="#051920" label="[05:19:20]">&lt;xentrac&gt;</a></span><span class="message">I'm glad Ur-Scheme is usefully contributing to m0* even though my body is not succeeding in doing o</span></div><div class="line" id="051923"><span class="nick" style="color:#6d2462"><a href="#051923" label="[05:19:23]">&lt;xentrac&gt;</a></span><span class="message">so</span></div><div class="line" id="052058"><span class="nick" style="color:#2e2a4a"><a href="#052058" label="[05:20:58]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: would (lambda (. rest) ...) look ill-formed too?</span></div><div class="line" id="052346"><span class="nick" style="color:#6d2462"><a href="#052346" label="[05:23:46]">&lt;xentrac&gt;</a></span><span class="message">it does to me; I'm surprised at the implication that Guile can parse it</span></div><div class="line" id="052400"><span class="nick" style="color:#6d2462"><a href="#052400" label="[05:24:00]">&lt;xentrac&gt;</a></span><span class="message">it does though</span></div><div class="line" id="052424"><span class="nick" style="color:#6d2462"><a href="#052424" label="[05:24:24]">&lt;xentrac&gt;</a></span><span class="message">it parses it to (lambda rest ...)</span></div><div class="line" id="052541"><span class="nick" style="color:#6d2462"><a href="#052541" label="[05:25:41]">&lt;xentrac&gt;</a></span><span class="message">even more surprising, Ur-Scheme evidently parses it too</span></div><div class="line" id="052629"><span class="nick" style="color:#2e2a4a"><a href="#052629" label="[05:26:29]">&lt;OriansJ&gt;</a></span><span class="message">well (. rest) is the most natural s-expression form for variable arguments</span></div><div class="line" id="052700"><span class="nick" style="color:#2e2a4a"><a href="#052700" label="[05:27:00]">&lt;OriansJ&gt;</a></span><span class="message">and the leading dot makes it obvious what should be done if more than 1 argument is passed</span></div><div class="line" id="052743"><span class="nick" style="color:#2e2a4a"><a href="#052743" label="[05:27:43]">&lt;OriansJ&gt;</a></span><span class="message">now if what was ment was only 1 argument should be passed, that would be a different problem</span></div><div class="line" id="052850"><span class="nick" style="color:#6d2462"><a href="#052850" label="[05:28:50]">&lt;xentrac&gt;</a></span><span class="message">heh, I'd forgotten about the minimal quasi-OO mechanism I used in Ur-Scheme's parser to be able to read from strings while also supporting ungetc</span></div><div class="line" id="052904"><span class="nick" style="color:#2e2a4a"><a href="#052904" label="[05:29:04]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: and I added some examples of variable different behavior inside of instructions depending upon register size</span></div><div class="line" id="052945"><span class="nick" style="color:#6d2462"><a href="#052945" label="[05:29:45]">&lt;xentrac&gt;</a></span><span class="message">given that it is an S-expression form, it is indeed the most natural form for purely variadic arguments</span></div><div class="line" id="052955"><span class="nick" style="color:#6d2462"><a href="#052955" label="[05:29:55]">&lt;xentrac&gt;</a></span><span class="message">but it surprises me that it *is* an S-expression form</span></div><div class="line" id="053007"><span class="nick" style="color:#6d2462"><a href="#053007" label="[05:30:07]">&lt;xentrac&gt;</a></span><span class="message">including according to the parser I wrote!</span></div><div class="line" id="053033"><span class="nick" style="color:#2e2a4a"><a href="#053033" label="[05:30:33]">&lt;OriansJ&gt;</a></span><span class="message">it comes for free when you add support for dot forms</span></div><div class="line" id="053058"><span class="nick" style="color:#6d2462"><a href="#053058" label="[05:30:58]">&lt;xentrac&gt;</a></span><span class="message">unless you do it wrong, as I apparently did in my brain</span></div><div class="line" id="053205"><span class="nick" style="color:#6d2462"><a href="#053205" label="[05:32:05]">&lt;xentrac&gt;</a></span><span class="message">I wouldn't advise depending on Ur-Scheme for information about the correct way to handle strings in Scheme.  I mean it's probably compatible with the Scheme interpreters I used to bootstrap it — for the limited set of situations encountered when running Ur-Scheme itself</span></div><div class="line" id="053219"><span class="nick" style="color:#6d2462"><a href="#053219" label="[05:32:19]">&lt;xentrac&gt;</a></span><span class="message">(the correct way to handle strings or anything else)</span></div><div class="line" id="053241"><span class="nick" style="color:#2e2a4a"><a href="#053241" label="[05:32:41]">&lt;OriansJ&gt;</a></span><span class="message">this is literally all it took to add dot form support to mes-m2 <a rel="nofollow" href="https://paste.debian.net/1131633/">https://paste.debian.net/1131633/</a> </span></div><div class="line" id="053325"><span class="nick" style="color:#2e2a4a"><a href="#053325" label="[05:33:25]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well finding good scheme tests has been one heck of a problem for me</span></div><div class="line" id="053349"><span class="nick" style="color:#2e2a4a"><a href="#053349" label="[05:33:49]">&lt;OriansJ&gt;</a></span><span class="message">because without them, progress in mes-m2 is slow at best</span></div><div class="line" id="053653"><span class="nick" style="color:#2e2a4a"><a href="#053653" label="[05:36:53]">&lt;OriansJ&gt;</a></span><span class="message">believe it or not xentrac your Ur-Scheme did result in a half-dozen functional improvements in mes-m2</span></div><div class="line" id="054035"><span class="nick" style="color:#6d2462"><a href="#054035" label="[05:40:35]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful :)</span></div><div class="line" id="054306"><span class="nick" style="color:#2e2a4a"><a href="#054306" label="[05:43:06]">&lt;OriansJ&gt;</a></span><span class="message">and as I work through the remaining issues, I either will have a bug report for you or another feature enhancement for mes-m2</span></div><div class="line" id="054340"><span class="nick" style="color:#2e2a4a"><a href="#054340" label="[05:43:40]">&lt;OriansJ&gt;</a></span><span class="message">It is just sometimes slow to pick out exactly what interaction is resulting in different behavior between guile and mes-m2</span></div><div class="line" id="054358"><span class="nick" style="color:#2e2a4a"><a href="#054358" label="[05:43:58]">&lt;OriansJ&gt;</a></span><span class="message">speaking of mes-m2; fossy patches are up</span></div><div class="line" id="054537"><span class="nick" style="color:#6d2462"><a href="#054537" label="[05:45:37]">&lt;xentrac&gt;</a></span><span class="message">yay!</span></div><div class="line" id="054642"><span class="nick" style="color:#6b8072"><a href="#054642" label="[05:46:42]">&lt;fossy&gt;</a></span><span class="message">OriansJ: have Ur-scheme tests been used in mes-m2 yet?</span></div><div class="line" id="054713"><span class="nick" style="color:#2e2a4a"><a href="#054713" label="[05:47:13]">&lt;OriansJ&gt;</a></span><span class="message">fossy: nope I guess I missed those</span></div><div class="line" id="054842"><span class="nick" style="color:#2e2a4a"><a href="#054842" label="[05:48:42]">&lt;OriansJ&gt;</a></span><span class="message">but I guess working through those is probably a good idea</span></div><div class="line" id="054937"><span class="nick" style="color:#6d2462"><a href="#054937" label="[05:49:37]">&lt;xentrac&gt;</a></span><span class="message">they're kind of crappy; they just test that Ur-Scheme produces the same output as $refscheme (see file urscheme/runtests)</span></div><div class="line" id="055026"><span class="nick" style="color:#2e2a4a"><a href="#055026" label="[05:50:26]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: crappy is better than entirely missing</span></div><div class="line" id="055117"><span class="nick" style="color:#6d2462"><a href="#055117" label="[05:51:17]">&lt;xentrac&gt;</a></span><span class="message">they were enough to get Ur-Scheme running</span></div><div class="line" id="055724"><span class="nick" style="color:#2e2a4a"><a href="#055724" label="[05:57:24]">&lt;OriansJ&gt;</a></span><span class="message">now test.closure.scm has a lambda form which I never would have considered</span></div><div class="line" id="055824"><span class="nick" style="color:#2e2a4a"><a href="#055824" label="[05:58:24]">&lt;OriansJ&gt;</a></span><span class="message">because in mes-m2 (define (foo a) (display a)) is simply converted to (define foo (lambda (a) (display a)))</span></div><div class="line" id="060124"><span class="nick" style="color:#2e2a4a"><a href="#060124" label="[06:01:24]">&lt;OriansJ&gt;</a></span><span class="message">but ironically mes-m2 already supports it</span></div><div class="line" id="060156"><span class="nick" style="color:#2e2a4a"><a href="#060156" label="[06:01:56]">&lt;OriansJ&gt;</a></span><span class="message">with identical output to guile none the less</span></div><div class="line" id="060206"><span class="nick" style="color:#6d2462"><a href="#060206" label="[06:02:06]">&lt;xentrac&gt;</a></span><span class="message">what's the lambda-form you never would have considered?</span></div><div class="line" id="060223"><span class="nick" style="color:#2e2a4a"><a href="#060223" label="[06:02:23]">&lt;OriansJ&gt;</a></span><span class="message">(define (deeper a) (lambda (b) (lambda (c) (display a) (display b) (display c) (newline))))</span></div><div class="line" id="060232"><span class="nick" style="color:#6d2462"><a href="#060232" label="[06:02:32]">&lt;xentrac&gt;</a></span><span class="message">heh, the only comment in that file is wrong</span></div><div class="line" id="060328"><span class="nick" style="color:#6d2462"><a href="#060328" label="[06:03:28]">&lt;xentrac&gt;</a></span><span class="message">Ur-Scheme implements define in the same way, but I think it's converted to (%define ...</span></div><div class="line" id="060421"><span class="nick" style="color:#6d2462"><a href="#060421" label="[06:04:21]">&lt;xentrac&gt;</a></span><span class="message">%define being a primitive define that doesn't support the (define (fn args) ...) syntax</span></div><div class="line" id="060514"><span class="nick" style="color:#2e2a4a"><a href="#060514" label="[06:05:14]">&lt;OriansJ&gt;</a></span><span class="message">I guess I have a rash of tests to integrate tomorrow (if you don't mind xentrac) into mes-m2 (with your copyright header of course)</span></div><div class="line" id="060537"><span class="nick" style="color:#6d2462"><a href="#060537" label="[06:05:37]">&lt;xentrac&gt;</a></span><span class="message">sure, go ahead; do you need me to relicense them or anything?</span></div><div class="line" id="060607"><span class="nick" style="color:#6d2462"><a href="#060607" label="[06:06:07]">&lt;xentrac&gt;</a></span><span class="message">right now they're GPLv3+</span></div><div class="line" id="060618"><span class="nick" style="color:#2e2a4a"><a href="#060618" label="[06:06:18]">&lt;OriansJ&gt;</a></span><span class="message">just permission to make them part of mes-m2 under gplv3+ is great</span></div><div class="line" id="060712"><span class="nick" style="color:#6d2462"><a href="#060712" label="[06:07:12]">&lt;xentrac&gt;</a></span><span class="message">sure, but you don't even need any explicit permission for that; that's the purpose of the GPL</span></div><div class="line" id="060847"><span class="nick" style="color:#2e2a4a"><a href="#060847" label="[06:08:47]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: fair</span></div><div class="line" id="061041"><span class="nick" style="color:#2e2a4a"><a href="#061041" label="[06:10:41]">&lt;OriansJ&gt;</a></span><span class="message">I'll mostly toss on a license header with your info, change them to write to standard test locations, verify the results with guile and then add the expected test results into test.answers.</span></div><div class="line" id="061357"><span class="nick" style="color:#2e2a4a"><a href="#061357" label="[06:13:57]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: if you can think of an order for the tests that simplifies debugging; let me know (I'll probably do an early start tomorrow on it)</span></div><div class="line" id="061408"><span class="nick" style="color:#2e2a4a"><a href="#061408" label="[06:14:08]">&lt;OriansJ&gt;</a></span><span class="message">so good night</span></div><div class="line" id="074103"><span class="nick" style="color:#6d2462"><a href="#074103" label="[07:41:03]">&lt;xentrac&gt;</a></span><span class="message">hmm, it might make sense to run them in the order that they were created</span></div><div class="line" id="075337"><span class="nick" style="color:#6d2462"><a href="#075337" label="[07:53:37]">&lt;xentrac&gt;</a></span><span class="message">specifically crufty quadruple remainder quotient number2string fib simplestring stringlength cons negative variadic assq implicitbegin predicates quote memq niladic tailcall emptyvariadic cond definelist let stringappend eqv case or map closure equal</span></div><div class="line" id="075341"><span class="nick" style="color:#6d2462"><a href="#075341" label="[07:53:41]">&lt;xentrac&gt;</a></span><span class="message">literalchar list2string reverse charwhitespace symbol2string string2symbol charint charalpha set write doubledefine string2number firstclassops fib2 funkyid lessthan append</span></div><div class="line" id="075536"><span class="nick" style="color:#6d2462"><a href="#075536" label="[07:55:36]">&lt;xentrac&gt;</a></span><span class="message">This ordering brought to you by darcs changes --xml-output &quot;$x&quot; and ElementTree.</span></div><div class="line" id="075737"><span class="nick" style="color:#6d2462"><a href="#075737" label="[07:57:37]">&lt;xentrac&gt;</a></span><span class="message">I think I kept adding crap to crufty though</span></div><div class="line" id="075919"><span class="nick" style="color:#6d2462"><a href="#075919" label="[07:59:19]">&lt;xentrac&gt;</a></span><span class="message">so at first it was just display, newline, begin, define, and an IIFE</span></div><div class="line" id="075935"><span class="nick" style="color:#6d2462"><a href="#075935" label="[07:59:35]">&lt;xentrac&gt;</a></span><span class="message">oh and I guess if</span></div><div class="line" id="080107"><span class="nick" style="color:#6d2462"><a href="#080107" label="[08:01:07]">&lt;xentrac&gt;</a></span><span class="message">later I added arithmetic, recursion, and multiple arguments (but no decimal conversion for output! the fibonacci function produces output in unary)</span></div><div class="line" id="080159"><span class="nick" style="color:#6d2462"><a href="#080159" label="[08:01:59]">&lt;xentrac&gt;</a></span><span class="message">then quadruple quadruples a number by adding it to itself and tests it with another recursive unary number representation function</span></div><div class="line" id="080310"><span class="nick" style="color:#6d2462"><a href="#080310" label="[08:03:10]">&lt;xentrac&gt;</a></span><span class="message">hardly a surprise that the next things I added were &quot;remainder&quot; and &quot;quotient&quot;!</span></div><div class="line" id="080350"><span class="nick" style="color:#6d2462"><a href="#080350" label="[08:03:50]">&lt;xentrac&gt;</a></span><span class="message">the next step was number-&gt;string in number2string (but number-&gt;string is defined in the compiler, not the test)</span></div><div class="line" id="080406"><span class="nick" style="color:#6d2462"><a href="#080406" label="[08:04:06]">&lt;xentrac&gt;</a></span><span class="message">(although at first it wasn't!)</span></div><div class="line" id="080519"><span class="nick" style="color:#6d2462"><a href="#080519" label="[08:05:19]">&lt;xentrac&gt;</a></span><span class="message">etc.</span></div><div class="line" id="133150"><span class="nick" style="color:#2e2a4a"><a href="#133150" label="[13:31:50]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: thanks, I'll give that a try</span></div><div class="line" id="142510"><span class="nick" style="color:#2e2a4a"><a href="#142510" label="[14:25:10]">&lt;OriansJ&gt;</a></span><span class="message">4 down 42 to go</span></div><div class="line" id="145045"><span class="nick" style="color:#2e2a4a"><a href="#145045" label="[14:50:45]">&lt;OriansJ&gt;</a></span><span class="message">I guess it is time to add make-string to mes-m2</span></div><div class="line" id="150949"><span class="nick" style="color:#2e2a4a"><a href="#150949" label="[15:09:49]">&lt;OriansJ&gt;</a></span><span class="message">now for a little language lawyerish for (define meh (make-string 8)) (string-set! meh 0 42) is guile correct in setting byte zero to null</span></div><div class="line" id="151111"><span class="nick" style="color:#2e2a4a"><a href="#151111" label="[15:11:11]">&lt;OriansJ&gt;</a></span><span class="message">or for the more questionable: (string-set! meh 0 &quot;huh&quot;)</span></div><div class="line" id="151310"><span class="nick" style="color:#234e69"><a href="#151310" label="[15:13:10]">&lt;dddddd&gt;</a></span><span class="message">guile 2.0 -&gt; ERROR: In procedure string-set!: Wrong type argument in position 3 (expecting character)</span></div><div class="line" id="151417"><span class="nick" style="color:#2e2a4a"><a href="#151417" label="[15:14:17]">&lt;OriansJ&gt;</a></span><span class="message">2.2.6 -&gt; &quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span></div><div class="line" id="151428"><span class="nick" style="color:#2e2a4a"><a href="#151428" label="[15:14:28]">&lt;OriansJ&gt;</a></span><span class="message">So perhaps a regression in guile?</span></div><div class="line" id="151504"><span class="nick" style="color:#234e69"><a href="#151504" label="[15:15:04]">&lt;dddddd&gt;</a></span><span class="message">That's meh after make-string alone</span></div><div class="line" id="151644"><span class="nick" style="color:#2e2a4a"><a href="#151644" label="[15:16:44]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: oh because 2.2.6 simply makes a string of null chars</span></div><div class="line" id="151708"><span class="nick" style="color:#2e2a4a"><a href="#151708" label="[15:17:08]">&lt;OriansJ&gt;</a></span><span class="message">feel free to change to (make-string 8 #\a)</span></div><div class="line" id="151846"><span class="nick" style="color:#234e69"><a href="#151846" label="[15:18:46]">&lt;dddddd&gt;</a></span><span class="message"> -- Scheme Procedure: string-set! str k chr</span></div><div class="line" id="151917"><span class="nick" style="color:#2e2a4a"><a href="#151917" label="[15:19:17]">&lt;OriansJ&gt;</a></span><span class="message">so yes guile has a regression</span></div><div class="line" id="154310"><span class="nick" style="color:#2e2a4a"><a href="#154310" label="[15:43:10]">&lt;OriansJ&gt;</a></span><span class="message">first set of tests are in and new primitives have been added (patches are up)</span></div><div class="line" id="154631"><span class="nick" style="color:#8dd3c7"><a href="#154631" label="[15:46:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">Morning OriansJ, thanks for your recent stage0 commits, a gift from the gods so to speak that will lead to a 0.4.1 release of knightpies with a more comprehensive test suite</span></div><div class="line" id="154732"><span class="nick" style="color:#8dd3c7"><a href="#154732" label="[15:47:32]">&lt;markjenkinsznc&gt;</a></span><span class="message">Even though you were clear you were going to work on it, I've made my own naive attempt to use DEFINE hackery to have a version of M0 that can work on 16/32/64 <a rel="nofollow" href="https://github.com/oriansj/stage0/compare/master...markjenkins:M0-16_32_64-wip">https://github.com/oriansj/stage0/compare/master...markjenkins:M0-16_32_64-wip</a> </span></div><div class="line" id="154800"><span class="nick" style="color:#8dd3c7"><a href="#154800" label="[15:48:00]">&lt;markjenkinsznc&gt;</a></span><span class="message">The commit message for <a rel="nofollow" href="https://github.com/oriansj/stage0/commit/a32bdbb506bb078811112da66e294acc4eb4c001">https://github.com/oriansj/stage0/commit/a32bdbb506bb078811112da66e294acc4eb4c001</a>  shows how this didn't go so well for 16 bit support</span></div><div class="line" id="154837"><span class="nick" style="color:#2e2a4a"><a href="#154837" label="[15:48:37]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: M0-compact is just 200bytes more than regular M0</span></div><div class="line" id="154914"><span class="nick" style="color:#8dd3c7"><a href="#154914" label="[15:49:14]">&lt;markjenkinsznc&gt;</a></span><span class="message">M0-compact is awesome, I think it still makes sense to bootstrap from M0 as makefile is currently doing</span></div><div class="line" id="154945"><span class="nick" style="color:#2e2a4a"><a href="#154945" label="[15:49:45]">&lt;OriansJ&gt;</a></span><span class="message">and the amount of effort of converting M0-compact into hex2 is well within the bounds of a single day's work</span></div><div class="line" id="154953"><span class="nick" style="color:#8dd3c7"><a href="#154953" label="[15:49:53]">&lt;markjenkinsznc&gt;</a></span><span class="message">that is, bootstrap M0-compact from M0</span></div><div class="line" id="155021"><span class="nick" style="color:#8dd3c7"><a href="#155021" label="[15:50:21]">&lt;markjenkinsznc&gt;</a></span><span class="message">I guess I'm just being lazy to avoid much hex2 work</span></div><div class="line" id="155024"><span class="nick" style="color:#2e2a4a"><a href="#155024" label="[15:50:24]">&lt;OriansJ&gt;</a></span><span class="message">that way M0-compact can be built directly from hex2 which already works on 16 and 64bit hosts</span></div><div class="line" id="155053"><span class="nick" style="color:#2e2a4a"><a href="#155053" label="[15:50:53]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: completely fair hex2 work is annoyingly slow and hard to debug</span></div><div class="line" id="155058"><span class="nick" style="color:#8dd3c7"><a href="#155058" label="[15:50:58]">&lt;markjenkinsznc&gt;</a></span><span class="message">always got the minimal diff mentality</span></div><div class="line" id="155231"><span class="nick" style="color:#8dd3c7"><a href="#155231" label="[15:52:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">you mentioned before that you do hex0/1/2 from scratch instead of starting from automated output and adding whitespace and comments and then using tooling to verify produces same binary</span></div><div class="line" id="155307"><span class="nick" style="color:#8dd3c7"><a href="#155307" label="[15:53:07]">&lt;markjenkinsznc&gt;</a></span><span class="message">so I can see how that's extra slow and hard to debug</span></div><div class="line" id="155354"><span class="nick" style="color:#2e2a4a"><a href="#155354" label="[15:53:54]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: it keeps me honest as it forces me to want to minimize the amount of work auditors would have to do with such code</span></div><div class="line" id="155405"><span class="nick" style="color:#8dd3c7"><a href="#155405" label="[15:54:05]">&lt;markjenkinsznc&gt;</a></span><span class="message">the direction I was going would have a minimally changed M0-macro-16.hex2 and M0-macro.hex2 that works on 32 and 64</span></div><div class="line" id="155439"><span class="nick" style="color:#2e2a4a"><a href="#155439" label="[15:54:39]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: less hex? files to audit the better</span></div><div class="line" id="155527"><span class="nick" style="color:#8dd3c7"><a href="#155527" label="[15:55:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">indeed, I guess by doing M0-macro-compact.hex2 which has runtime instead of build time support, we get to stay with one hex2 file</span></div><div class="line" id="155612"><span class="nick" style="color:#2e2a4a"><a href="#155612" label="[15:56:12]">&lt;OriansJ&gt;</a></span><span class="message">yep</span></div><div class="line" id="155631"><span class="nick" style="color:#8dd3c7"><a href="#155631" label="[15:56:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">another consideration in my mind was that someone auditing during their bootstrap would only audit the hex2 files they use specific to their arch and not the ones they don't use</span></div><div class="line" id="155727"><span class="nick" style="color:#8dd3c7"><a href="#155727" label="[15:57:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">what's starting to make sense for me is that M0-compact binary is only slightly larger and the runtime support with READSCID isn't as complicated as I originally imagined</span></div><div class="line" id="155727"><span class="nick" style="color:#2e2a4a"><a href="#155727" label="[15:57:27]">&lt;OriansJ&gt;</a></span><span class="message">1696 bytes is an 8 hour audit (approximately)</span></div><div class="line" id="155807"><span class="nick" style="color:#2e2a4a"><a href="#155807" label="[15:58:07]">&lt;OriansJ&gt;</a></span><span class="message">(less if they don't check the offsets)</span></div><div class="line" id="155903"><span class="nick" style="color:#2e2a4a"><a href="#155903" label="[15:59:03]">&lt;OriansJ&gt;</a></span><span class="message">hex2 at 1006bytes is a 4 hour audit (approximately)</span></div><div class="line" id="155916"><span class="nick" style="color:#8dd3c7"><a href="#155916" label="[15:59:16]">&lt;markjenkinsznc&gt;</a></span><span class="message">All that being said, if I could salvage M0  in the way I've attempted, a shorter audit, even if just a bit, and less instructions used</span></div><div class="line" id="155923"><span class="nick" style="color:#2e2a4a"><a href="#155923" label="[15:59:23]">&lt;OriansJ&gt;</a></span><span class="message">hex1 at 472bytes is a 2 hour audit (approximately)</span></div><div class="line" id="155942"><span class="nick" style="color:#8dd3c7"><a href="#155942" label="[15:59:42]">&lt;markjenkinsznc&gt;</a></span><span class="message">shorter that is if auditer just audits hex2 they're using for their arch and not the other one</span></div><div class="line" id="155959"><span class="nick" style="color:#2e2a4a"><a href="#155959" label="[15:59:59]">&lt;OriansJ&gt;</a></span><span class="message">well 200bytes is only approximately 30-60Minutes of auditing time</span></div><div class="line" id="160024"><span class="nick" style="color:#2e2a4a"><a href="#160024" label="[16:00:24]">&lt;OriansJ&gt;</a></span><span class="message">So it might not be worth the effort on our behalf</span></div><div class="line" id="160048"><span class="nick" style="color:#8dd3c7"><a href="#160048" label="[16:00:48]">&lt;markjenkinsznc&gt;</a></span><span class="message">auditing M0-macro-compact.hex2 is less work if all hex2 files, those to use and not use have to be audited (as my approach produces M0-macro.hex2 and M0-macro16.hex2)</span></div><div class="line" id="160143"><span class="nick" style="color:#2e2a4a"><a href="#160143" label="[16:01:43]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: very true</span></div><div class="line" id="160317"><span class="nick" style="color:#2e2a4a"><a href="#160317" label="[16:03:17]">&lt;OriansJ&gt;</a></span><span class="message">and you are free to do as you see fit markjenkinsznc</span></div><div class="line" id="160401"><span class="nick" style="color:#8dd3c7"><a href="#160401" label="[16:04:01]">&lt;markjenkinsznc&gt;</a></span><span class="message">fixing <a rel="nofollow" href="https://github.com/oriansj/stage0/commit/a32bdbb506bb078811112da66e294acc4eb4c001">https://github.com/oriansj/stage0/commit/a32bdbb506bb078811112da66e294acc4eb4c001</a>  is worth it if it saves you the work of doing M0-macro-compact.hex2 in the short term</span></div><div class="line" id="160423"><span class="nick" style="color:#8dd3c7"><a href="#160423" label="[16:04:23]">&lt;markjenkinsznc&gt;</a></span><span class="message">a fix worth it for me to do that is</span></div><div class="line" id="160459"><span class="nick" style="color:#8dd3c7"><a href="#160459" label="[16:04:59]">&lt;markjenkinsznc&gt;</a></span><span class="message">but if you're going to write M0-macro-compact.hex2 anyway.. I might as well get it started for you</span></div><div class="line" id="160613"><span class="nick" style="color:#2e2a4a"><a href="#160613" label="[16:06:13]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: well it would certainly save me some effort if you are willing to do that work for me</span></div><div class="line" id="160617"><span class="nick" style="color:#8dd3c7"><a href="#160617" label="[16:06:17]">&lt;markjenkinsznc&gt;</a></span><span class="message">You do amazing comments beyond just the instructions in these hex files, but I can at least copy the style in terms of whitespace and get a comment with the instruction name on every line</span></div><div class="line" id="160707"><span class="nick" style="color:#2e2a4a"><a href="#160707" label="[16:07:07]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: if you look at them in emacs with whitespace-mode on you'll notice something else</span></div><div class="line" id="160828"><span class="nick" style="color:#8dd3c7"><a href="#160828" label="[16:08:28]">&lt;markjenkinsznc&gt;</a></span><span class="message">and I've just realized that the hex comments after the instruction are mostly the same as the .s comments, so if I do the hex2 it could be pretty close to what you'd do</span></div><div class="line" id="160858"><span class="nick" style="color:#2e2a4a"><a href="#160858" label="[16:08:58]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: I look forward to seeing it</span></div><div class="line" id="161026"><span class="nick" style="color:#8dd3c7"><a href="#161026" label="[16:10:26]">&lt;markjenkinsznc&gt;</a></span><span class="message">looking at whitespace mode I see there are tabs</span></div><div class="line" id="161154"><span class="nick" style="color:#8dd3c7"><a href="#161154" label="[16:11:54]">&lt;markjenkinsznc&gt;</a></span><span class="message">the other thing I I'm seeing with emacs in X mode (haven't tested term mode) is some lines are highlighted in a special way in their entirity, just realized this is lines longer than window width</span></div><div class="line" id="161245"><span class="nick" style="color:#2e2a4a"><a href="#161245" label="[16:12:45]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: so kinda ugly relative to my later style (which can be seen in mescc-tools-seed)</span></div><div class="line" id="161402"><span class="nick" style="color:#8dd3c7"><a href="#161402" label="[16:14:02]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'll look at mescc-tools-seed for some further style guidance</span></div><div class="line" id="161408"><span class="nick" style="color:#2e2a4a"><a href="#161408" label="[16:14:08]">&lt;OriansJ&gt;</a></span><span class="message">Ideally I'd go back and update the files in stage0 to reflect that later style (as it is much nicer)</span></div><div class="line" id="161422"><span class="nick" style="color:#2e2a4a"><a href="#161422" label="[16:14:22]">&lt;OriansJ&gt;</a></span><span class="message">But I really haven't had the chance to do so</span></div><div class="line" id="161515"><span class="nick" style="color:#2e2a4a"><a href="#161515" label="[16:15:15]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools-seed/x86/hex0_x86.hex0 lines up the # assembly and lines up the ; higher level comments</span></div><div class="line" id="161531"><span class="nick" style="color:#8dd3c7"><a href="#161531" label="[16:15:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">Doing the hex2 conversion is probably the best way I can thank you for M0-compact.s as well. I'm accepting that my attempt to shoehorn M0 as is into 16 bit compatibility has already failed to pass the test of minimal effort, changing as little as I could get away with didn't get a quick result</span></div><div class="line" id="161719"><span class="nick" style="color:#2e2a4a"><a href="#161719" label="[16:17:19]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: well we learned the hardway repeatedly every process of a quick result usually results in alot of wasted effort and delays.</span></div><div class="line" id="161839"><span class="nick" style="color:#2e2a4a"><a href="#161839" label="[16:18:39]">&lt;OriansJ&gt;</a></span><span class="message">every single clever trick ended up biting me square in the ass eventually</span></div><div class="line" id="161928"><span class="nick" style="color:#2e2a4a"><a href="#161928" label="[16:19:28]">&lt;OriansJ&gt;</a></span><span class="message">Heck 2 bytes in M0-compact.s are because of the hack currently in use by High_level_prototypes/disasm.c</span></div><div class="line" id="162013"><span class="nick" style="color:#2e2a4a"><a href="#162013" label="[16:20:13]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: one thing stage0 NEEDs is a proper disassembler</span></div><div class="line" id="162040"><span class="nick" style="color:#2e2a4a"><a href="#162040" label="[16:20:40]">&lt;OriansJ&gt;</a></span><span class="message">then I can remove the backwards compatible pieces for padding to 4byte alignment</span></div><div class="line" id="162111"><span class="nick" style="color:#8dd3c7"><a href="#162111" label="[16:21:11]">&lt;markjenkinsznc&gt;</a></span><span class="message">Might attempt it in python, would also be a high level prototype</span></div><div class="line" id="162130"><span class="nick" style="color:#2e2a4a"><a href="#162130" label="[16:21:30]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: well it being entirely in python is fine</span></div><div class="line" id="162145"><span class="nick" style="color:#8dd3c7"><a href="#162145" label="[16:21:45]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'll probably need a good dissassembler when I start doing hex2 support for other archs</span></div><div class="line" id="162158"><span class="nick" style="color:#2e2a4a"><a href="#162158" label="[16:21:58]">&lt;OriansJ&gt;</a></span><span class="message">as we don't need it to be implemented in the bootstrap stages</span></div><div class="line" id="162236"><span class="nick" style="color:#8dd3c7"><a href="#162236" label="[16:22:36]">&lt;markjenkinsznc&gt;</a></span><span class="message">even when I did hex2tobin.py (or was it M1.py) I was doing funky stuff with hexdump -C and diff to figure out what was wrong with my binaries</span></div><div class="line" id="162322"><span class="nick" style="color:#2e2a4a"><a href="#162322" label="[16:23:22]">&lt;OriansJ&gt;</a></span><span class="message">getting knight into rasm2 would be cool but probably alot of work</span></div><div class="line" id="162627"><span class="nick" style="color:#8dd3c7"><a href="#162627" label="[16:26:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">M0-compact.s will be especially nice if anyone builds a chip minimal knight 16 and wants to do further work from assembly instead of the efforts to make M2 style C happen</span></div><div class="line" id="162704"><span class="nick" style="color:#2e2a4a"><a href="#162704" label="[16:27:04]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="162705"><span class="nick" style="color:#8dd3c7"><a href="#162705" label="[16:27:05]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'm guessing much of the historical 16bit C world involved memory that wasn't byte addressable to get past 64K and/or bank switching and stuff...</span></div><div class="line" id="162754"><span class="nick" style="color:#2e2a4a"><a href="#162754" label="[16:27:54]">&lt;OriansJ&gt;</a></span><span class="message">well 64KB is very tight for a C compiler and one would have to shove in alot of optimizations to ake it fit</span></div><div class="line" id="162757"><span class="nick" style="color:#8dd3c7"><a href="#162757" label="[16:27:57]">&lt;markjenkinsznc&gt;</a></span><span class="message">someone building 16 bit knight might want to do a memory mapped IO device that's a DRAM</span></div><div class="line" id="162907"><span class="nick" style="color:#8dd3c7"><a href="#162907" label="[16:29:07]">&lt;markjenkinsznc&gt;</a></span><span class="message">but the programming techniques to do bank switching or memory mapped IO to a bonus memory device would be super hairy</span></div><div class="line" id="162944"><span class="nick" style="color:#2e2a4a"><a href="#162944" label="[16:29:44]">&lt;OriansJ&gt;</a></span><span class="message">hence why knight has the HALCODE support</span></div><div class="line" id="162959"><span class="nick" style="color:#8dd3c7"><a href="#162959" label="[16:29:59]">&lt;markjenkinsznc&gt;</a></span><span class="message">ah that's right, also thought about that the other day</span></div><div class="line" id="163002"><span class="nick" style="color:#2e2a4a"><a href="#163002" label="[16:30:02]">&lt;OriansJ&gt;</a></span><span class="message">to allow one to define hardware primtitives that software can leverage</span></div><div class="line" id="163022"><span class="nick" style="color:#2e2a4a"><a href="#163022" label="[16:30:22]">&lt;OriansJ&gt;</a></span><span class="message">It allows one to keep the entire memory space clean with no special cases</span></div><div class="line" id="163043"><span class="nick" style="color:#2e2a4a"><a href="#163043" label="[16:30:43]">&lt;OriansJ&gt;</a></span><span class="message">but makes hardware implementation harder</span></div><div class="line" id="163104"><span class="nick" style="color:#8dd3c7"><a href="#163104" label="[16:31:04]">&lt;markjenkinsznc&gt;</a></span><span class="message">so if anyone is reading this chat in future years, the standard warning applies.. before you start glueing chips together or FPGA hacking to get a knight16, they should implement any hardware memory tricks in emulator and built out fancy software using that first...</span></div><div class="line" id="163134"><span class="nick" style="color:#8dd3c7"><a href="#163134" label="[16:31:34]">&lt;markjenkinsznc&gt;</a></span><span class="message">And they should live with the hardware cost of doing any fancyness with HALCODE</span></div><div class="line" id="163146"><span class="nick" style="color:#8dd3c7"><a href="#163146" label="[16:31:46]">&lt;markjenkinsznc&gt;</a></span><span class="message">become a clean memory map is worth keeping</span></div><div class="line" id="163157"><span class="nick" style="color:#2e2a4a"><a href="#163157" label="[16:31:57]">&lt;OriansJ&gt;</a></span><span class="message">absolutely</span></div><div class="line" id="163231"><span class="nick" style="color:#8dd3c7"><a href="#163231" label="[16:32:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">all right, has been a fun chat, now off for some hex2 work off and on for a few days</span></div><div class="line" id="163254"><span class="nick" style="color:#2e2a4a"><a href="#163254" label="[16:32:54]">&lt;OriansJ&gt;</a></span><span class="message">When one has a MMU, HALCODE is also designed to allow the kernel to use its own memory space to provide extended functionality</span></div><div class="line" id="163327"><span class="nick" style="color:#2e2a4a"><a href="#163327" label="[16:33:27]">&lt;OriansJ&gt;</a></span><span class="message">eg SYSCALLs via HALCODE</span></div><div class="line" id="164203"><span class="nick" style="color:#2e2a4a"><a href="#164203" label="[16:42:03]">&lt;OriansJ&gt;</a></span><span class="message">greetings ParadoxUndone</span></div><div class="line" id="164441"><span class="nick" style="color:#6c3d55"><a href="#164441" label="[16:44:41]">&lt;ParadoxUndone&gt;</a></span><span class="message">hello there</span></div><div class="line" id="164706"><span class="nick" style="color:#2e2a4a"><a href="#164706" label="[16:47:06]">&lt;OriansJ&gt;</a></span><span class="message">so ParadoxUndone what fun are you working on?</span></div><div class="line" id="164956"><span class="nick" style="color:#6c3d55"><a href="#164956" label="[16:49:56]">&lt;ParadoxUndone&gt;</a></span><span class="message">well thinking of using this spare ex facebook blade i have sitting here doing nothing</span></div><div class="line" id="165057"><span class="nick" style="color:#6c3d55"><a href="#165057" label="[16:50:57]">&lt;ParadoxUndone&gt;</a></span><span class="message">may as aswell get some use out of it</span></div><div class="line" id="165229"><span class="nick" style="color:#2e2a4a"><a href="#165229" label="[16:52:29]">&lt;OriansJ&gt;</a></span><span class="message">compute heavy or storage?</span></div><div class="line" id="165235"><span class="nick" style="color:#6c3d55"><a href="#165235" label="[16:52:35]">&lt;ParadoxUndone&gt;</a></span><span class="message">what you up to &lt;OriansJ&gt; anything or nawt ?</span></div><div class="line" id="165333"><span class="nick" style="color:#6c3d55"><a href="#165333" label="[16:53:33]">&lt;ParadoxUndone&gt;</a></span><span class="message">im looking to use it as compute rather than storage</span></div><div class="line" id="165408"><span class="nick" style="color:#6c3d55"><a href="#165408" label="[16:54:08]">&lt;ParadoxUndone&gt;</a></span><span class="message">i was thinking of mining some cpu centric crypto maybe</span></div><div class="line" id="165414"><span class="nick" style="color:#2e2a4a"><a href="#165414" label="[16:54:14]">&lt;OriansJ&gt;</a></span><span class="message">oh just a couple of things: <a rel="nofollow" href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a>  <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  <a rel="nofollow" href="https://github.com/oriansj/M2-Planet">https://github.com/oriansj/M2-Planet</a> </span></div><div class="line" id="165435"><span class="nick" style="color:#2e2a4a"><a href="#165435" label="[16:54:35]">&lt;OriansJ&gt;</a></span><span class="message">ParadoxUndone: might be fun</span></div><div class="line" id="165436"><span class="nick" style="color:#6c3d55"><a href="#165436" label="[16:54:36]">&lt;ParadoxUndone&gt;</a></span><span class="message">crypto currency i meant to say</span></div><div class="line" id="165456"><span class="nick" style="color:#2e2a4a"><a href="#165456" label="[16:54:56]">&lt;OriansJ&gt;</a></span><span class="message">ParadoxUndone: understandably</span></div><div class="line" id="165539"><span class="nick" style="color:#6c3d55"><a href="#165539" label="[16:55:39]">&lt;ParadoxUndone&gt;</a></span><span class="message">yeah a stuck it on the grid computing platform years ago and it performed quite well and it has been powered down ever since</span></div><div class="line" id="165558"><span class="nick" style="color:#6c3d55"><a href="#165558" label="[16:55:58]">&lt;ParadoxUndone&gt;</a></span><span class="message">which is just sad</span></div><div class="line" id="165642"><span class="nick" style="color:#2e2a4a"><a href="#165642" label="[16:56:42]">&lt;OriansJ&gt;</a></span><span class="message">fair</span></div><div class="line" id="165647"><span class="nick" style="color:#6c3d55"><a href="#165647" label="[16:56:47]">&lt;ParadoxUndone&gt;</a></span><span class="message">i figure it will double as my heater</span></div><div class="line" id="165738"><span class="nick" style="color:#6c3d55"><a href="#165738" label="[16:57:38]">&lt;ParadoxUndone&gt;</a></span><span class="message">and dehumidifier</span></div><div class="line" id="165741"><span class="nick" style="color:#6c3d55"><a href="#165741" label="[16:57:41]">&lt;ParadoxUndone&gt;</a></span><span class="message">lol</span></div><div class="line" id="165854"><span class="nick" style="color:#2e2a4a"><a href="#165854" label="[16:58:54]">&lt;OriansJ&gt;</a></span><span class="message">atleast for the rest of winter</span></div><div class="line" id="165900"><span class="nick" style="color:#6c3d55"><a href="#165900" label="[16:59:00]">&lt;ParadoxUndone&gt;</a></span><span class="message">yes</span></div><div class="line" id="165917"><span class="nick" style="color:#6c3d55"><a href="#165917" label="[16:59:17]">&lt;ParadoxUndone&gt;</a></span><span class="message">i live on my yacht pretty much so humidity is a daily issue</span></div><div class="line" id="165956"><span class="nick" style="color:#2e2a4a"><a href="#165956" label="[16:59:56]">&lt;OriansJ&gt;</a></span><span class="message">ParadoxUndone: not to mention the salt, unless you prefer the fresh water bodies</span></div><div class="line" id="170006"><span class="nick" style="color:#6c3d55"><a href="#170006" label="[17:00:06]">&lt;ParadoxUndone&gt;</a></span><span class="message">na salt water here</span></div><div class="line" id="170039"><span class="nick" style="color:#6c3d55"><a href="#170039" label="[17:00:39]">&lt;ParadoxUndone&gt;</a></span><span class="message">well marina with a lock and a run off into it from a river so rather brackish  but still</span></div><div class="line" id="170101"><span class="nick" style="color:#2e2a4a"><a href="#170101" label="[17:01:01]">&lt;OriansJ&gt;</a></span><span class="message">less salt then the open sea</span></div><div class="line" id="170107"><span class="nick" style="color:#6c3d55"><a href="#170107" label="[17:01:07]">&lt;ParadoxUndone&gt;</a></span><span class="message">yes</span></div><div class="line" id="170221"><span class="nick" style="color:#2e2a4a"><a href="#170221" label="[17:02:21]">&lt;OriansJ&gt;</a></span><span class="message">as long as it makes you happy</span></div><div class="line" id="170327"><span class="nick" style="color:#6c3d55"><a href="#170327" label="[17:03:27]">&lt;ParadoxUndone&gt;</a></span><span class="message">i wouldnt ever wish to live anywhere else but a boat on the sea in a marina or otherwise again</span></div><div class="line" id="170517"><span class="nick" style="color:#2e2a4a"><a href="#170517" label="[17:05:17]">&lt;OriansJ&gt;</a></span><span class="message">ParadoxUndone: personally I find surfing and life on the beach more enjoyable but to each their own.</span></div><div class="line" id="170626"><span class="nick" style="color:#6c3d55"><a href="#170626" label="[17:06:26]">&lt;ParadoxUndone&gt;</a></span><span class="message">i don't think surfing is for me but i understand,as a youngster i used to swim out to sea and back nearly every day</span></div><div class="line" id="170951"><span class="nick" style="color:#6c3d55"><a href="#170951" label="[17:09:51]">&lt;ParadoxUndone&gt;</a></span><span class="message">our community had it's own private beach next to it and next to that was the nudist beach which used to spill over occasionally</span></div><div class="line" id="171057"><span class="nick" style="color:#6c3d55"><a href="#171057" label="[17:10:57]">&lt;ParadoxUndone&gt;</a></span><span class="message">took me 5 mins to figure out what was wrong with my friend i had brought home from school one day  while i was blowing the tender up on the beach</span></div><div class="line" id="171159"><span class="nick" style="color:#2e2a4a"><a href="#171159" label="[17:11:59]">&lt;OriansJ&gt;</a></span><span class="message">lol</span></div><div class="line" id="171214"><span class="nick" style="color:#6c3d55"><a href="#171214" label="[17:12:14]">&lt;ParadoxUndone&gt;</a></span><span class="message">turns out he was in shock, some ebony beauty had spilled over, I was used to it and thought nothing of it  but my freind was froma quite village in the middle of nowhere so</span></div><div class="line" id="171237"><span class="nick" style="color:#2e2a4a"><a href="#171237" label="[17:12:37]">&lt;OriansJ&gt;</a></span><span class="message">just couldn't process at all</span></div><div class="line" id="171307"><span class="nick" style="color:#6c3d55"><a href="#171307" label="[17:13:07]">&lt;ParadoxUndone&gt;</a></span><span class="message">that'll stay with him forever i think</span></div><div class="line" id="171344"><span class="nick" style="color:#6c3d55"><a href="#171344" label="[17:13:44]">&lt;ParadoxUndone&gt;</a></span><span class="message">he worried the hell out of me that day i tell ya</span></div><div class="line" id="171359"><span class="nick" style="color:#6c3d55"><a href="#171359" label="[17:13:59]">&lt;ParadoxUndone&gt;</a></span><span class="message">then i figured it out as he just couldnt talk at all</span></div><div class="line" id="171421"><span class="nick" style="color:#6c3d55"><a href="#171421" label="[17:14:21]">&lt;ParadoxUndone&gt;</a></span><span class="message">and I couldnt stop chucking</span></div><div class="line" id="171431"><span class="nick" style="color:#6c3d55"><a href="#171431" label="[17:14:31]">&lt;ParadoxUndone&gt;</a></span><span class="message">priceless</span></div><div class="line" id="171449"><span class="nick" style="color:#2e2a4a"><a href="#171449" label="[17:14:49]">&lt;OriansJ&gt;</a></span><span class="message">must have been one heck of a stunner</span></div><div class="line" id="171506"><span class="nick" style="color:#6c3d55"><a href="#171506" label="[17:15:06]">&lt;ParadoxUndone&gt;</a></span><span class="message">oh she was real nice</span></div><div class="line" id="171532"><span class="nick" style="color:#6c3d55"><a href="#171532" label="[17:15:32]">&lt;ParadoxUndone&gt;</a></span><span class="message">lol I was just so used to it</span></div><div class="line" id="171536"><span class="nick" style="color:#234e69"><a href="#171536" label="[17:15:36]">&lt;dddddd&gt;</a></span><span class="message">That's what I'd call a proper bootstrap</span></div><div class="line" id="171547"><span class="nick" style="color:#6c3d55"><a href="#171547" label="[17:15:47]">&lt;ParadoxUndone&gt;</a></span><span class="message">i just didn't think</span></div><div class="line" id="171649"><span class="nick" style="color:#2e2a4a"><a href="#171649" label="[17:16:49]">&lt;OriansJ&gt;</a></span><span class="message">ParadoxUndone: usually a sign of youth</span></div><div class="line" id="171825"><span class="nick" style="color:#6c3d55"><a href="#171825" label="[17:18:25]">&lt;ParadoxUndone&gt;</a></span><span class="message">a bunch of the boaties here do it, as soon as they get out there off come the clothes and they sailing naked</span></div><div class="line" id="171829"><span class="nick" style="color:#6c3d55"><a href="#171829" label="[17:18:29]">&lt;ParadoxUndone&gt;</a></span><span class="message">rolls eyes</span></div><div class="line" id="171900"><span class="nick" style="color:#6c3d55"><a href="#171900" label="[17:19:00]">&lt;ParadoxUndone&gt;</a></span><span class="message">head the pier head telling them to pop some clothes on once or twice coming in though the lock</span></div><div class="line" id="171929"><span class="nick" style="color:#6c3d55"><a href="#171929" label="[17:19:29]">&lt;ParadoxUndone&gt;</a></span><span class="message">and some of the fishing guys do it too</span></div><div class="line" id="171935"><span class="nick" style="color:#6c3d55"><a href="#171935" label="[17:19:35]">&lt;ParadoxUndone&gt;</a></span><span class="message">dafties</span></div><div class="line" id="171951"><span class="nick" style="color:#6c3d55"><a href="#171951" label="[17:19:51]">&lt;ParadoxUndone&gt;</a></span><span class="message">topping up their tans i suppose</span></div><div class="line" id="172518"><span class="nick" style="color:#2e2a4a"><a href="#172518" label="[17:25:18]">&lt;OriansJ&gt;</a></span><span class="message">what adults do to themselves is their own business; so long as it doesn't result in the harm of others.</span></div><div class="line" id="172738"><span class="nick" style="color:#6c3d55"><a href="#172738" label="[17:27:38]">&lt;ParadoxUndone&gt;</a></span><span class="message">yea - be back in a bit  afk</span></div><div class="line" id="173353"><span class="nick" style="color:#2e2a4a"><a href="#173353" label="[17:33:53]">&lt;OriansJ&gt;</a></span><span class="message">and patches for mes-m2 are up</span></div><div class="line" id="182925"><span class="nick" style="color:#8dd3c7"><a href="#182925" label="[18:29:25]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ, I'm off to a good start <a rel="nofollow" href="https://github.com/oriansj/stage0/compare/master...markjenkins:M0-compact-hex2">https://github.com/oriansj/stage0/compare/master...markjenkins:M0-compact-hex2</a> </span></div><div class="line" id="183033"><span class="nick" style="color:#8dd3c7"><a href="#183033" label="[18:30:33]">&lt;markjenkinsznc&gt;</a></span><span class="message">I didn</span></div><div class="line" id="183050"><span class="nick" style="color:#8dd3c7"><a href="#183050" label="[18:30:50]">&lt;markjenkinsznc&gt;</a></span><span class="message">I didn't have to do much to M1.py from knightpies to get some nice output <a rel="nofollow" href="https://github.com/markjenkins/knightpies/commit/157bda9f6ea5d989548026f2ae12e25e8578a41a">https://github.com/markjenkins/knightpies/commit/157bda9f6ea5d989548026f2ae12e25e8578a41a</a> </span></div><div class="line" id="183451"><span class="nick" style="color:#8dd3c7"><a href="#183451" label="[18:34:51]">&lt;markjenkinsznc&gt;</a></span><span class="message">I've verified with multiple tool chains that M0-compact.hex2 still matches the binary M0 + hex2 initially produced and will continue to keep that so</span></div><div class="line" id="183608"><span class="nick" style="color:#8dd3c7"><a href="#183608" label="[18:36:08]">&lt;markjenkinsznc&gt;</a></span><span class="message">The main audit I want to do with M0-macro-compact.s and M0-macro-compact.hex2 side by side after getting the formatting nice is that the comments match and no comments from the .s were lost</span></div><div class="line" id="183927"><span class="nick" style="color:#8dd3c7"><a href="#183927" label="[18:39:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">Seeing how M0-macro.hex2 was produced with a from scratch process and it made the initial binary for M0-compact that ended up in test/SHA256SUMS and that final binary is unchanged, there is a bit of transitive trust one can place in M0-macro-compact.hex2, another reason for M0-macro.hex2/s to live in some kind of legacy pieces dir when all is said and done</span></div><div class="line" id="184024"><span class="nick" style="color:#8dd3c7"><a href="#184024" label="[18:40:24]">&lt;markjenkinsznc&gt;</a></span><span class="message">Another audit I could do to the .hex2 is use find replace in my test editor to match the instruction prefixes with names and do a side by side comparison to the comments after comparing the comments in both files</span></div><div class="line" id="184118"><span class="nick" style="color:#8dd3c7"><a href="#184118" label="[18:41:18]">&lt;markjenkinsznc&gt;</a></span><span class="message">I hope you're not disappointed I started with machine gen as a starting point with audit being second</span></div><div class="line" id="184121"><span class="nick" style="color:#8dd3c7"><a href="#184121" label="[18:41:21]">&lt;markjenkinsznc&gt;</a></span><span class="message">bye for now</span></div><div class="line" id="191846"><span class="nick" style="color:#8dd3c7"><a href="#191846" label="[19:18:46]">&lt;markjenkinsznc&gt;</a></span><span class="message">oops, ignore that M0-compact-hex2 branch, there's an obvious flaw in the comments part of the output that I realized as soon as I went outside for a walk</span></div><div class="line" id="191900"><span class="nick" style="color:#8dd3c7"><a href="#191900" label="[19:19:00]">&lt;markjenkinsznc&gt;</a></span><span class="message">easy fix</span></div><div class="line" id="193636"><span class="nick" style="color:#8dd3c7"><a href="#193636" label="[19:36:36]">&lt;markjenkinsznc&gt;</a></span><span class="message">Okay, maybe not quite as easy as I thought, <a rel="nofollow" href="https://github.com/markjenkins/knightpies/commit/157bda9f6ea5d989548026f2ae12e25e8578a41a">https://github.com/markjenkins/knightpies/commit/157bda9f6ea5d989548026f2ae12e25e8578a41a</a>  gets me macros used in hex2 comment, but no immediate values</span></div><div class="line" id="201633"><span class="nick" style="color:#8dd3c7"><a href="#201633" label="[20:16:33]">&lt;markjenkinsznc&gt;</a></span><span class="message">There we go, much better <a rel="nofollow" href="https://github.com/oriansj/stage0/compare/master...markjenkins:M0-compact-hex2-redo3">https://github.com/oriansj/stage0/compare/master...markjenkins:M0-compact-hex2-redo3</a> </span></div><div class="line" id="201845"><span class="nick" style="color:#8dd3c7"><a href="#201845" label="[20:18:45]">&lt;markjenkinsznc&gt;</a></span><span class="message">much better starting point that is, more to do to make this pretty, audit it against the .s well and style points to learn from newer hex2 files</span></div><div class="line" id="202228"><span class="nick" style="color:#8dd3c7"><a href="#202228" label="[20:22:28]">&lt;markjenkinsznc&gt;</a></span><span class="message">Overall diff of what I had to do to M1.py to get this nice starting point <a rel="nofollow" href="https://github.com/markjenkins/knightpies/compare/6d26eb7c09ce25ca2c229e1f447d06968ca6ec3e..1f0e2c37b541e155050a713f3016c25312bb3c28">https://github.com/markjenkins/knightpies/compare/6d26eb7c09ce25ca2c229e1f447d06968ca6ec3e..1f0e2c37b541e155050a713f3016c25312bb3c28</a> </span></div><div class="line" id="202319"><span class="nick" style="color:#8dd3c7"><a href="#202319" label="[20:23:19]">&lt;markjenkinsznc&gt;</a></span><span class="message">oops, that was backwards <a rel="nofollow" href="https://github.com/markjenkins/knightpies/compare/1f0e2c37b541e155050a713f3016c25312bb3c28..6d26eb7c09ce25ca2c229e1f447d06968ca6ec3e">https://github.com/markjenkins/knightpies/compare/1f0e2c37b541e155050a713f3016c25312bb3c28..6d26eb7c09ce25ca2c229e1f447d06968ca6ec3e</a>  shows how M1.py picked up --comment today</span></div><div class="line" id="223107"><span class="nick" style="color:#6d2462"><a href="#223107" label="[22:31:07]">&lt;xentrac&gt;</a></span><span class="message">I feel like guile is the kind of thing that should throw an error if you (string-set! meh 0 42)</span></div><div class="line" id="223129"><span class="nick" style="color:#6d2462"><a href="#223129" label="[22:31:29]">&lt;xentrac&gt;</a></span><span class="message">although allowing that to pass might be reasonable behavior for a different Scheme</span></div><div class="line" id="225033"><span class="nick" style="color:#2e2a4a"><a href="#225033" label="[22:50:33]">&lt;OriansJ&gt;</a></span><span class="message">I wonder what it would take to add knight to <a rel="nofollow" href="https://ghidra-sre.org/">https://ghidra-sre.org/</a> </span></div><div class="line" id="225610"><span class="nick" style="color:#2e2a4a"><a href="#225610" label="[22:56:10]">&lt;OriansJ&gt;</a></span><span class="message">Because once knight has a &quot;good enough&quot; disassembler I can drop the extra NULL padding from strings and generate some smaller binaries for stage0</span></div><br /></div></body></html>