<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="012617"><span class="nick" style="color:#389600"><a href="#012617" label="[01:26:17]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well stage0 will always opt to support any and all architectures one may wish to use; so we may need to have PowerPC support in live-bootstrap in the future. But removing it today in a way that doesn't make it unreasonable to add it back in the future is entirely reasonable.</span></div><div class="line" id="012658"><span class="nick" style="color:#389600"><a href="#012658" label="[01:26:58]">&lt;oriansj&gt;</a></span><span class="message">well, we always can improve unxz and we probably should.</span></div><div class="line" id="012910"><span class="nick" style="color:#8dd3c7"><a href="#012910" label="[01:29:10]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: he submitted a PR: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/22">https://github.com/oriansj/mescc-tools-extra/pull/22</a> </span></div><div class="line" id="013813"><span class="nick" style="color:#2e2a4a"><a href="#013813" label="[01:38:13]">&lt;GoogulatorMobile&gt;</a></span><span class="message">oriansj: isn't PowerPC a moribund architecture?</span></div><div class="line" id="013857"><span class="nick" style="color:#2e2a4a"><a href="#013857" label="[01:38:57]">&lt;GoogulatorMobile&gt;</a></span><span class="message"> <a rel="nofollow" href="https://android.googlesource.com/kernel/msm/+/android-7.1.0_r0.2/arch/powerpc/sysdev/micropatch.c">https://android.googlesource.com/kernel/msm/+/android-7.1.0_r0.2/arch/powerpc/sysdev/micropatch.c</a>  is the file in question btw</span></div><div class="line" id="013924"><span class="nick" style="color:#2e2a4a"><a href="#013924" label="[01:39:24]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(sorry for the android link, I'm on mobile atm)</span></div><div class="line" id="013955"><span class="nick" style="color:#2e2a4a"><a href="#013955" label="[01:39:55]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I don't know if this is relevant at all for modern PowerISA</span></div><div class="line" id="014124"><span class="nick" style="color:#2e2a4a"><a href="#014124" label="[01:41:24]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Also, IIRC the latest generation of PowerISA has no hope of ever being booted blob-free - the DRAM controller requires a proprietary blob signed by Synopsys to be loaded before RAM can be initialized</span></div><div class="line" id="014509"><span class="nick" style="color:#6b8072"><a href="#014509" label="[01:45:09]">&lt;stikonas&gt;</a></span><span class="message">uu, ugly...</span></div><div class="line" id="014750"><span class="nick" style="color:#6b8072"><a href="#014750" label="[01:47:50]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: by the way, sam_ suggested using another bc implementation</span></div><div class="line" id="014754"><span class="nick" style="color:#6b8072"><a href="#014754" label="[01:47:54]">&lt;stikonas&gt;</a></span><span class="message">(that also doesn't depend on ed)</span></div><div class="line" id="014834"><span class="nick" style="color:#6b8072"><a href="#014834" label="[01:48:34]">&lt;stikonas&gt;</a></span><span class="message">there is bc-gh</span></div><div class="line" id="014851"><span class="nick" style="color:#6b8072"><a href="#014851" label="[01:48:51]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.gavinhoward.com/gavin/bc">https://git.gavinhoward.com/gavin/bc</a> </span></div><div class="line" id="015049"><span class="nick" style="color:#2e2a4a"><a href="#015049" label="[01:50:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I'd rather not remove ed though, it's really useful in interactive mode</span></div><div class="line" id="015108"><span class="nick" style="color:#2e2a4a"><a href="#015108" label="[01:51:08]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Since we have no other editor or pager</span></div><div class="line" id="015135"><span class="nick" style="color:#2e2a4a"><a href="#015135" label="[01:51:35]">&lt;GoogulatorMobile&gt;</a></span><span class="message">In fact, I'd love to build ed earlier than we do now</span></div><div class="line" id="015543"><span class="nick" style="color:#389600"><a href="#015543" label="[01:55:43]">&lt;oriansj&gt;</a></span><span class="message">GoogulatorMobile: who cares, armv7l is dead too but if anyone wants it supported to bootstrap through all the stage0 steps, I am game.</span></div><div class="line" id="015636"><span class="nick" style="color:#389600"><a href="#015636" label="[01:56:36]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: thank you, I never really check github.</span></div><div class="line" id="015737"><span class="nick" style="color:#389600"><a href="#015737" label="[01:57:37]">&lt;oriansj&gt;</a></span><span class="message">GoogulatorMobile: merged</span></div><div class="line" id="015854"><span class="nick" style="color:#2e2a4a"><a href="#015854" label="[01:58:54]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Is there any other editor maybe that we can build before the first Bash?</span></div><div class="line" id="020005"><span class="nick" style="color:#2e2a4a"><a href="#020005" label="[02:00:05]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Ideally, when bash-2.05b is built, and the tty2 shell is spawned, we should already have some kind of editor &amp; pager ready, to enable pausing for audit</span></div><div class="line" id="020311"><span class="nick" style="color:#8dd3c7"><a href="#020311" label="[02:03:11]">&lt;rickmasters&gt;</a></span><span class="message">there are a million editors but I'll toss pico into the running as its from my alma mater.</span></div><div class="line" id="020523"><span class="nick" style="color:#6b8072"><a href="#020523" label="[02:05:23]">&lt;stikonas&gt;</a></span><span class="message">that's basically nano now</span></div><div class="line" id="020524"><span class="nick" style="color:#6b8072"><a href="#020524" label="[02:05:24]">&lt;stikonas&gt;</a></span><span class="message">isn't it?</span></div><div class="line" id="020550"><span class="nick" style="color:#2e2a4a"><a href="#020550" label="[02:05:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Nano would be ideal, but it requires ncurses :(</span></div><div class="line" id="020609"><span class="nick" style="color:#2e2a4a"><a href="#020609" label="[02:06:09]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I doubt we can build that using just kaem, make &amp; tcc</span></div><div class="line" id="020621"><span class="nick" style="color:#2e2a4a"><a href="#020621" label="[02:06:21]">&lt;GoogulatorMobile&gt;</a></span><span class="message">and meslibc</span></div><div class="line" id="020640"><span class="nick" style="color:#2e2a4a"><a href="#020640" label="[02:06:40]">&lt;GoogulatorMobile&gt;</a></span><span class="message">As that's all we have when we bring up bash</span></div><div class="line" id="020642"><span class="nick" style="color:#6b8072"><a href="#020642" label="[02:06:42]">&lt;stikonas&gt;</a></span><span class="message">no ncurses is stricky</span></div><div class="line" id="020700"><span class="nick" style="color:#6b8072"><a href="#020700" label="[02:07:00]">&lt;stikonas&gt;</a></span><span class="message">you probably want at least musl</span></div><div class="line" id="020702"><span class="nick" style="color:#2e2a4a"><a href="#020702" label="[02:07:02]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Is there a heirloom-curses?</span></div><div class="line" id="020717"><span class="nick" style="color:#2e2a4a"><a href="#020717" label="[02:07:17]">&lt;GoogulatorMobile&gt;</a></span><span class="message">wow, that sounded accidentally British</span></div><div class="line" id="020718"><span class="nick" style="color:#6b8072"><a href="#020718" label="[02:07:18]">&lt;stikonas&gt;</a></span><span class="message">argh, but more non-redistributable stuff...</span></div><div class="line" id="020730"><span class="nick" style="color:#6b8072"><a href="#020730" label="[02:07:30]">&lt;stikonas&gt;</a></span><span class="message">we should really move heirloom after basgh</span></div><div class="line" id="020735"><span class="nick" style="color:#2e2a4a"><a href="#020735" label="[02:07:35]">&lt;GoogulatorMobile&gt;</a></span><span class="message">plan9 to the rescue</span></div><div class="line" id="020742"><span class="nick" style="color:#6b8072"><a href="#020742" label="[02:07:42]">&lt;stikonas&gt;</a></span><span class="message">sorry after musl</span></div><div class="line" id="020946"><span class="nick" style="color:#6b8072"><a href="#020946" label="[02:09:46]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: there are some other random things that might just work</span></div><div class="line" id="020948"><span class="nick" style="color:#6b8072"><a href="#020948" label="[02:09:48]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/adsr/mle">https://github.com/adsr/mle</a> </span></div><div class="line" id="021011"><span class="nick" style="color:#6b8072"><a href="#021011" label="[02:10:11]">&lt;stikonas&gt;</a></span><span class="message">oh this uses lua..</span></div><div class="line" id="021015"><span class="nick" style="color:#6b8072"><a href="#021015" label="[02:10:15]">&lt;stikonas&gt;</a></span><span class="message">probably not good then</span></div><div class="line" id="021036"><span class="nick" style="color:#6b8072"><a href="#021036" label="[02:10:36]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://viewsourcecode.org/snaptoken/kilo/">https://viewsourcecode.org/snaptoken/kilo/</a>  ?</span></div><div class="line" id="021056"><span class="nick" style="color:#6b8072"><a href="#021056" label="[02:10:56]">&lt;stikonas&gt;</a></span><span class="message">source is at <a rel="nofollow" href="https://github.com/antirez/kilo">https://github.com/antirez/kilo</a> </span></div><div class="line" id="021114"><span class="nick" style="color:#6b8072"><a href="#021114" label="[02:11:14]">&lt;stikonas&gt;</a></span><span class="message">hmm, probably won't build with meslibc...</span></div><div class="line" id="021115"><span class="nick" style="color:#6b8072"><a href="#021115" label="[02:11:15]">&lt;stikonas&gt;</a></span><span class="message">#include &lt;termios.h&gt;</span></div><div class="line" id="022516"><span class="nick" style="color:#389600"><a href="#022516" label="[02:25:16]">&lt;oriansj&gt;</a></span><span class="message">GoogulatorMobile: well there is always SET</span></div><div class="line" id="022547"><span class="nick" style="color:#389600"><a href="#022547" label="[02:25:47]">&lt;oriansj&gt;</a></span><span class="message">one can write a version in M1 if one wanted or in C</span></div><div class="line" id="022620"><span class="nick" style="color:#2e2a4a"><a href="#022620" label="[02:26:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Isn't that dependent on knight?</span></div><div class="line" id="022718"><span class="nick" style="color:#389600"><a href="#022718" label="[02:27:18]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.sr.ht/~oriansj/stage0/tree/master/item/stage1/High_level_prototypes/SET.c">https://git.sr.ht/~oriansj/stage0/tree/master/item/stage1/High_level_prototypes/SET.c</a> </span></div><div class="line" id="022720"><span class="nick" style="color:#389600"><a href="#022720" label="[02:27:20]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="022745"><span class="nick" style="color:#389600"><a href="#022745" label="[02:27:45]">&lt;oriansj&gt;</a></span><span class="message">it only depends upon fgetc and fputc</span></div><div class="line" id="023026"><span class="nick" style="color:#389600"><a href="#023026" label="[02:30:26]">&lt;oriansj&gt;</a></span><span class="message">I was thinking of adding it with more.c and sin.c to mescc-tools-extra</span></div><div class="line" id="023139"><span class="nick" style="color:#389600"><a href="#023139" label="[02:31:39]">&lt;oriansj&gt;</a></span><span class="message">as a sort of be able to detect utf-8 sort of invisible character attacks and fix them.</span></div><div class="line" id="023307"><span class="nick" style="color:#389600"><a href="#023307" label="[02:33:07]">&lt;oriansj&gt;</a></span><span class="message">and we probably could make it an order of magnitude more efficient in regards to memory usage.</span></div><div class="line" id="023600"><span class="nick" style="color:#389600"><a href="#023600" label="[02:36:00]">&lt;oriansj&gt;</a></span><span class="message">as a general rule, every thing I do; I try to ensure it can run on as many architectures as possible. (real, theory, hobby, etc)</span></div><div class="line" id="023627"><span class="nick" style="color:#80b1d3"><a href="#023627" label="[02:36:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; My gas bug got fixed :) <a rel="nofollow" href="https://sourceware.org/bugzilla/show_bug.cgi?id=30308">https://sourceware.org/bugzilla/show_bug.cgi?id=30308</a> </span></div><div class="line" id="023739"><span class="nick" style="color:#389600"><a href="#023739" label="[02:37:39]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="025321"><span class="nick" style="color:#2e2a4a"><a href="#025321" label="[02:53:21]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I wonder where &quot;AT&amp;T-syntax&quot; x86 assembly even came from</span></div><div class="line" id="025358"><span class="nick" style="color:#2e2a4a"><a href="#025358" label="[02:53:58]">&lt;GoogulatorMobile&gt;</a></span><span class="message">As far as I understand, it's basically VAX assembly syntax adapted to x86</span></div><div class="line" id="025459"><span class="nick" style="color:#2e2a4a"><a href="#025459" label="[02:54:59]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But why create a new syntax long after x86 became a thing?</span></div><div class="line" id="025703"><span class="nick" style="color:#2e2a4a"><a href="#025703" label="[02:57:03]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Intel syntax must have long existed by the time anyone attempted to port Unix</span></div><div class="line" id="025827"><span class="nick" style="color:#2e2a4a"><a href="#025827" label="[02:58:27]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Especially since before the 80286, there was no hope of porting Unix to the architecture, and that was the 3rd iteration of x86 already</span></div><div class="line" id="025832"><span class="nick" style="color:#389600"><a href="#025832" label="[02:58:32]">&lt;oriansj&gt;</a></span><span class="message">well; x86 was an after thought for unixes</span></div><div class="line" id="025848"><span class="nick" style="color:#389600"><a href="#025848" label="[02:58:48]">&lt;oriansj&gt;</a></span><span class="message">it was this weird, slow and cramped target</span></div><div class="line" id="025916"><span class="nick" style="color:#389600"><a href="#025916" label="[02:59:16]">&lt;oriansj&gt;</a></span><span class="message">so they did the least effort work to port their assemblers to x86</span></div><div class="line" id="025935"><span class="nick" style="color:#389600"><a href="#025935" label="[02:59:35]">&lt;oriansj&gt;</a></span><span class="message">it didn't matter that Intel's syntax was better</span></div><div class="line" id="025937"><span class="nick" style="color:#2e2a4a"><a href="#025937" label="[02:59:37]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yeah, x86 was a microcomputer architecture that came well before anyone expected microcomputers to be a success</span></div><div class="line" id="030009"><span class="nick" style="color:#2e2a4a"><a href="#030009" label="[03:00:09]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But what I don't get is, whoever invented AT&amp;T syntax must have already been intimately familiar with Intel syntax</span></div><div class="line" id="030022"><span class="nick" style="color:#2e2a4a"><a href="#030022" label="[03:00:22]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So why port VAX's assembly syntax instead?</span></div><div class="line" id="030047"><span class="nick" style="color:#389600"><a href="#030047" label="[03:00:47]">&lt;oriansj&gt;</a></span><span class="message">AT&amp;T syntax wasn't VAX's assembly syntax either</span></div><div class="line" id="030116"><span class="nick" style="color:#2e2a4a"><a href="#030116" label="[03:01:16]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Wasn't it based on Digital's official docs for the VAX?</span></div><div class="line" id="030137"><span class="nick" style="color:#2e2a4a"><a href="#030137" label="[03:01:37]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Or maybe even earlier, PDP-7 or PDP-11</span></div><div class="line" id="030141"><span class="nick" style="color:#389600"><a href="#030141" label="[03:01:41]">&lt;oriansj&gt;</a></span><span class="message">it was the PDP-7's assembly syntax</span></div><div class="line" id="030215"><span class="nick" style="color:#2e2a4a"><a href="#030215" label="[03:02:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But VAX was derived from that, wasn't it?</span></div><div class="line" id="030217"><span class="nick" style="color:#389600"><a href="#030217" label="[03:02:17]">&lt;oriansj&gt;</a></span><span class="message">which are extremely primitive compared to the VAX's assembly which had proper macros and type checkers.</span></div><div class="line" id="030232"><span class="nick" style="color:#389600"><a href="#030232" label="[03:02:32]">&lt;oriansj&gt;</a></span><span class="message">different family line within DEC</span></div><div class="line" id="030338"><span class="nick" style="color:#2e2a4a"><a href="#030338" label="[03:03:38]">&lt;GoogulatorMobile&gt;</a></span><span class="message">AFAIK early VAX, or &quot;VAX-11&quot; as DEC liked to call it, was PDP-11 with a virtual address extension</span></div><div class="line" id="030351"><span class="nick" style="color:#2e2a4a"><a href="#030351" label="[03:03:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(&amp; a 32-bit address space)</span></div><div class="line" id="030402"><span class="nick" style="color:#389600"><a href="#030402" label="[03:04:02]">&lt;oriansj&gt;</a></span><span class="message">yes but PDP-11 and PDP-7 are different family lines</span></div><div class="line" id="030438"><span class="nick" style="color:#389600"><a href="#030438" label="[03:04:38]">&lt;oriansj&gt;</a></span><span class="message">pdp-7 was 18bit; pdp-11 was 16bit</span></div><div class="line" id="030501"><span class="nick" style="color:#2e2a4a"><a href="#030501" label="[03:05:01]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Oh, so it wasn't a direct progression from PDP-8-&gt;9-&gt;10-&gt;11</span></div><div class="line" id="030531"><span class="nick" style="color:#389600"><a href="#030531" label="[03:05:31]">&lt;oriansj&gt;</a></span><span class="message">pdp-7's assembler came from the pdp-4; pdp-11's assembler came form the pdp-8</span></div><div class="line" id="030552"><span class="nick" style="color:#389600"><a href="#030552" label="[03:05:52]">&lt;oriansj&gt;</a></span><span class="message">DEC's product lines often had very little relation.</span></div><div class="line" id="030613"><span class="nick" style="color:#389600"><a href="#030613" label="[03:06:13]">&lt;oriansj&gt;</a></span><span class="message">For example the PDP-6 was the parent to the PDP-10 which was a 36bit machine</span></div><div class="line" id="030631"><span class="nick" style="color:#2e2a4a"><a href="#030631" label="[03:06:31]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So PDP-8 wasn't an upgraded PDP-7</span></div><div class="line" id="030650"><span class="nick" style="color:#389600"><a href="#030650" label="[03:06:50]">&lt;oriansj&gt;</a></span><span class="message">PDP-8 was a 12bit machine</span></div><div class="line" id="030756"><span class="nick" style="color:#2e2a4a"><a href="#030756" label="[03:07:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So using PDP-7 syntax was established in Unix before PDP-11 even became a thing</span></div><div class="line" id="030805"><span class="nick" style="color:#389600"><a href="#030805" label="[03:08:05]">&lt;oriansj&gt;</a></span><span class="message">nope.</span></div><div class="line" id="030859"><span class="nick" style="color:#389600"><a href="#030859" label="[03:08:59]">&lt;oriansj&gt;</a></span><span class="message">PDP-11s were available as of: 1970. Unix came out 1971</span></div><div class="line" id="030936"><span class="nick" style="color:#389600"><a href="#030936" label="[03:09:36]">&lt;oriansj&gt;</a></span><span class="message">(unix development started in 1969)</span></div><div class="line" id="031011"><span class="nick" style="color:#389600"><a href="#031011" label="[03:10:11]">&lt;oriansj&gt;</a></span><span class="message">They wanted a GE 645 mainframe and got stuck with a computer that no one wanted.</span></div><div class="line" id="031043"><span class="nick" style="color:#389600"><a href="#031043" label="[03:10:43]">&lt;oriansj&gt;</a></span><span class="message">it was all in assembly language until 1973</span></div><div class="line" id="031155"><span class="nick" style="color:#389600"><a href="#031155" label="[03:11:55]">&lt;oriansj&gt;</a></span><span class="message">so changing out assembly syntax would have been impossible</span></div><div class="line" id="031257"><span class="nick" style="color:#389600"><a href="#031257" label="[03:12:57]">&lt;oriansj&gt;</a></span><span class="message">and by the time, it was ported to C (which had a boatload of assembly too); the base had grown to the point changing assembly syntax was also another non-starter.</span></div><div class="line" id="031357"><span class="nick" style="color:#389600"><a href="#031357" label="[03:13:57]">&lt;oriansj&gt;</a></span><span class="message">It wasn't successfully ported to another architecture until 1977</span></div><div class="line" id="031409"><span class="nick" style="color:#2e2a4a"><a href="#031409" label="[03:14:09]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And I guess today it's perpetuated by FSF's desire to do things differently than Microsoft</span></div><div class="line" id="031412"><span class="nick" style="color:#389600"><a href="#031412" label="[03:14:12]">&lt;oriansj&gt;</a></span><span class="message">and that port used the same syntax</span></div><div class="line" id="031501"><span class="nick" style="color:#389600"><a href="#031501" label="[03:15:01]">&lt;oriansj&gt;</a></span><span class="message">well no, FSF used the standard for Unix and supports other assembly standards as options.</span></div><div class="line" id="031614"><span class="nick" style="color:#389600"><a href="#031614" label="[03:16:14]">&lt;oriansj&gt;</a></span><span class="message">it is why one can write .intel_syntax and just use intel syntax when working in assembly</span></div><div class="line" id="031845"><span class="nick" style="color:#2e2a4a"><a href="#031845" label="[03:18:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Today, they do support Intel syntax, but as I see it, there's a strong preference for AT&amp;T</span></div><div class="line" id="031852"><span class="nick" style="color:#389600"><a href="#031852" label="[03:18:52]">&lt;oriansj&gt;</a></span><span class="message">basically people know it and opt to use it despite a better option being a single line away. It is like how people tend to use languages for problems for which they are bad fits.</span></div><div class="line" id="032003"><span class="nick" style="color:#389600"><a href="#032003" label="[03:20:03]">&lt;oriansj&gt;</a></span><span class="message">people don't like learning new syntax and will opt to stick with what they know and thus that is what the next generation learns too.</span></div><div class="line" id="032220"><span class="nick" style="color:#2e2a4a"><a href="#032220" label="[03:22:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Anyway, this all came from trying to figure out what that weird instruction in <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/steps/linux-4.9.10/patches/bad-asm.patch">https://github.com/fosslinux/live-bootstrap/blob/master/steps/linux-4.9.10/patches/bad-asm.patch</a>  means</span></div><div class="line" id="032248"><span class="nick" style="color:#2e2a4a"><a href="#032248" label="[03:22:48]">&lt;GoogulatorMobile&gt;</a></span><span class="message">movw	68(%esp), %di</span></div><div class="line" id="032320"><span class="nick" style="color:#2e2a4a"><a href="#032320" label="[03:23:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Or in Intel syntax, mov di, dword ptr WTF(esp, 68)</span></div><div class="line" id="032412"><span class="nick" style="color:#389600"><a href="#032412" label="[03:24:12]">&lt;oriansj&gt;</a></span><span class="message">or mov di, [esp+68]</span></div><div class="line" id="032427"><span class="nick" style="color:#2e2a4a"><a href="#032427" label="[03:24:27]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Is it just that?</span></div><div class="line" id="032438"><span class="nick" style="color:#389600"><a href="#032438" label="[03:24:38]">&lt;oriansj&gt;</a></span><span class="message">trivial to check</span></div><div class="line" id="032525"><span class="nick" style="color:#2e2a4a"><a href="#032525" label="[03:25:25]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Every AT&amp;T assembler I tried just considered it a syntax error</span></div><div class="line" id="032619"><span class="nick" style="color:#2e2a4a"><a href="#032619" label="[03:26:19]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I was guessing it's mov di, [esp] with a prefix of 0x68</span></div><div class="line" id="032643"><span class="nick" style="color:#389600"><a href="#032643" label="[03:26:43]">&lt;oriansj&gt;</a></span><span class="message">well movw is move word, a word is 16bits %esp is a memory reference and 68 is the offset from the memory reference</span></div><div class="line" id="032702"><span class="nick" style="color:#2e2a4a"><a href="#032702" label="[03:27:02]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Similar to how 0x66 is register size override</span></div><div class="line" id="032757"><span class="nick" style="color:#389600"><a href="#032757" label="[03:27:57]">&lt;oriansj&gt;</a></span><span class="message">well no, prefix encoding isn't involved here</span></div><div class="line" id="032933"><span class="nick" style="color:#2e2a4a"><a href="#032933" label="[03:29:33]">&lt;GoogulatorMobile&gt;</a></span><span class="message">oriansj: what's your opinion on the deblob situation?</span></div><div class="line" id="033000"><span class="nick" style="color:#2e2a4a"><a href="#033000" label="[03:30:00]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(of course, in the end, it's up for fossy to decide)</span></div><div class="line" id="033241"><span class="nick" style="color:#389600"><a href="#033241" label="[03:32:41]">&lt;oriansj&gt;</a></span><span class="message">personally; I am using an x200 with a libreboot kernel running vanilla guix with no substitutes. So I'm fine giving up drivers personally but I also respect that some people use vanilla linux and install blobs that they want/need. So my perspective is if possible let the users choose for themselves what they want.</span></div><div class="line" id="033305"><span class="nick" style="color:#389600"><a href="#033305" label="[03:33:05]">&lt;oriansj&gt;</a></span><span class="message">^kernel^firmware^</span></div><div class="line" id="034003"><span class="nick" style="color:#389600"><a href="#034003" label="[03:40:03]">&lt;oriansj&gt;</a></span><span class="message">make the default whichever you the developer is willing to be responsible for supporting.</span></div><div class="line" id="034126"><span class="nick" style="color:#389600"><a href="#034126" label="[03:41:26]">&lt;oriansj&gt;</a></span><span class="message">but be kind to those who like the old path and create a method for them to opt in to that alternate path; ensure it works when you do that change and after it will be up to those that care about that alternate path to maintain and support it.</span></div><div class="line" id="034335"><span class="nick" style="color:#2e2a4a"><a href="#034335" label="[03:43:35]">&lt;GoogulatorMobile&gt;</a></span><span class="message">That's not really the issue</span></div><div class="line" id="034508"><span class="nick" style="color:#389600"><a href="#034508" label="[03:45:08]">&lt;oriansj&gt;</a></span><span class="message">the use the linux-libre deblob process or just delete the folder (and a couple of files with blobs in them) and be done.</span></div><div class="line" id="034559"><span class="nick" style="color:#2e2a4a"><a href="#034559" label="[03:45:59]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Rather, it's about deblobbing to prevent blob-mediated compromise of the trusted bootstrap environment, vs. deblobbing &amp; removing the firmware loader mechanism (and all the other things the script does or tries to do) for FSF Free Software compliance</span></div><div class="line" id="034656"><span class="nick" style="color:#389600"><a href="#034656" label="[03:46:56]">&lt;oriansj&gt;</a></span><span class="message">agreed</span></div><div class="line" id="034744"><span class="nick" style="color:#2e2a4a"><a href="#034744" label="[03:47:44]">&lt;GoogulatorMobile&gt;</a></span><span class="message">4.9 unfortunately still has the /firmware directory, which is hard to remove (properly) without a debug script</span></div><div class="line" id="034849"><span class="nick" style="color:#2e2a4a"><a href="#034849" label="[03:48:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I'm hoping to upgrade to 4.14, where /firmware is gone, and removing the 3 drivers that actually embed blobs masquerading as code via a patch, and not touch the FSFLA deblob scripts at all</span></div><div class="line" id="034912"><span class="nick" style="color:#2e2a4a"><a href="#034912" label="[03:49:12]">&lt;GoogulatorMobile&gt;</a></span><span class="message">4.14 is the last LTS release that still supports gcc 4.0.4</span></div><div class="line" id="034931"><span class="nick" style="color:#389600"><a href="#034931" label="[03:49:31]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="034938"><span class="nick" style="color:#2e2a4a"><a href="#034938" label="[03:49:38]">&lt;GoogulatorMobile&gt;</a></span><span class="message">its support period ended a month ago</span></div><div class="line" id="035009"><span class="nick" style="color:#2e2a4a"><a href="#035009" label="[03:50:09]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Unfortunately deblob-4.9 does things that I really disagree with</span></div><div class="line" id="035011"><span class="nick" style="color:#389600"><a href="#035011" label="[03:50:11]">&lt;oriansj&gt;</a></span><span class="message">well good thing live-bootstrap can be run in isolated environments.</span></div><div class="line" id="035041"><span class="nick" style="color:#2e2a4a"><a href="#035041" label="[03:50:41]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Starting with removing drivers just because they have the ability to optionally do device firmware updates is requested by the user</span></div><div class="line" id="035117"><span class="nick" style="color:#2e2a4a"><a href="#035117" label="[03:51:17]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And going as far as to inject text into documentation about why saying &quot;GNU/Linux&quot; instead of &quot;Linux&quot; is important</span></div><div class="line" id="035133"><span class="nick" style="color:#389600"><a href="#035133" label="[03:51:33]">&lt;oriansj&gt;</a></span><span class="message">I understand</span></div><div class="line" id="035149"><span class="nick" style="color:#2e2a4a"><a href="#035149" label="[03:51:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Which is totally irrelevant for an automated bootstrap where no one is gonna read that documentation</span></div><div class="line" id="035231"><span class="nick" style="color:#389600"><a href="#035231" label="[03:52:31]">&lt;oriansj&gt;</a></span><span class="message">(and there is no point in building that documentation in the first place)</span></div><div class="line" id="035236"><span class="nick" style="color:#2e2a4a"><a href="#035236" label="[03:52:36]">&lt;GoogulatorMobile&gt;</a></span><span class="message">especially when the bootstrap process involves a liberal mixture of GNU and non-GNU code</span></div><div class="line" id="035250"><span class="nick" style="color:#2e2a4a"><a href="#035250" label="[03:52:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">it's mostly documentation that doesn't need to be bult</span></div><div class="line" id="035254"><span class="nick" style="color:#2e2a4a"><a href="#035254" label="[03:52:54]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Just text files</span></div><div class="line" id="035411"><span class="nick" style="color:#2e2a4a"><a href="#035411" label="[03:54:11]">&lt;GoogulatorMobile&gt;</a></span><span class="message">The script even tries to replace the Tux framebuffer logo because it's &quot;giving too much credit to Linux where credit is actually due to GNU&quot; - in 4.9, it fails</span></div><div class="line" id="035649"><span class="nick" style="color:#389600"><a href="#035649" label="[03:56:49]">&lt;oriansj&gt;</a></span><span class="message">GoogulatorMobile: I understand your perference.</span></div><div class="line" id="040114"><span class="nick" style="color:#389600"><a href="#040114" label="[04:01:14]">&lt;oriansj&gt;</a></span><span class="message">I just merely suggesting a figleaf, set your preference to the default but set things such that if an environment variable like FSF-COMPLIANT is set that it'll do the linux-libre deblob script instead. That way the user choice isn't eliminated and we get a good default because I know you'll do a good job on the deblob.</span></div><div class="line" id="040247"><span class="nick" style="color:#389600"><a href="#040247" label="[04:02:47]">&lt;oriansj&gt;</a></span><span class="message">we can alway remove that variable and path if no one steps up to maintain it.</span></div><div class="line" id="040411"><span class="nick" style="color:#389600"><a href="#040411" label="[04:04:11]">&lt;oriansj&gt;</a></span><span class="message">and because a single environment variable check is cheap and easy to do, it ends any potential argument from those who might not agree with your recommended default.</span></div><div class="line" id="041555"><span class="nick" style="color:#2e2a4a"><a href="#041555" label="[04:15:55]">&lt;GoogulatorMobile&gt;</a></span><span class="message">It's a bit more complicated than a single environment variable</span></div><div class="line" id="041651"><span class="nick" style="color:#2e2a4a"><a href="#041651" label="[04:16:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">2 separate kernel configs need to be maintained</span></div><div class="line" id="041721"><span class="nick" style="color:#2e2a4a"><a href="#041721" label="[04:17:21]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And potentially 2 separate sets of checksums for packages built after the Linux kernel</span></div><div class="line" id="041756"><span class="nick" style="color:#2e2a4a"><a href="#041756" label="[04:17:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Plus, a way to pass all of that to a bare metal environment, where the deblob script makes the biggest difference</span></div><div class="line" id="041928"><span class="nick" style="color:#389600"><a href="#041928" label="[04:19:28]">&lt;oriansj&gt;</a></span><span class="message">but you only need to maintain 1; the checksums for user space packages should not change between the two different paths as they are both Linux and yes the linux-libre deblob will probably break very shortly after but that isn't your problem and worst case someone else steps up and live-bootstrap gains another maintainer.</span></div><div class="line" id="042109"><span class="nick" style="color:#389600"><a href="#042109" label="[04:21:09]">&lt;oriansj&gt;</a></span><span class="message">hence a figleaf and not another burden for you.</span></div><div class="line" id="042320"><span class="nick" style="color:#389600"><a href="#042320" label="[04:23:20]">&lt;oriansj&gt;</a></span><span class="message">or no one steps up, it gets dropped due to lack of support and we all move on with your new default path because ultimately: who does decides.</span></div><div class="line" id="042428"><span class="nick" style="color:#2e2a4a"><a href="#042428" label="[04:24:28]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Unfortunately user space package checksums do change as a result of deblobbing using the FSFLA scripts</span></div><div class="line" id="042505"><span class="nick" style="color:#2e2a4a"><a href="#042505" label="[04:25:05]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Not because of deblobbing per se, or even removal of the firmware loading mechanism, but because of all the other changes it makes</span></div><div class="line" id="042527"><span class="nick" style="color:#389600"><a href="#042527" label="[04:25:27]">&lt;oriansj&gt;</a></span><span class="message">the name change I am guessing</span></div><div class="line" id="042550"><span class="nick" style="color:#389600"><a href="#042550" label="[04:25:50]">&lt;oriansj&gt;</a></span><span class="message">which builds tend to capture (if the proper flags are not set to stop that)</span></div><div class="line" id="042605"><span class="nick" style="color:#2e2a4a"><a href="#042605" label="[04:26:05]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yeah, uname output is changed</span></div><div class="line" id="042746"><span class="nick" style="color:#389600"><a href="#042746" label="[04:27:46]">&lt;oriansj&gt;</a></span><span class="message">so a handful of reproducible build tweaks may be required.</span></div><div class="line" id="042815"><span class="nick" style="color:#389600"><a href="#042815" label="[04:28:15]">&lt;oriansj&gt;</a></span><span class="message">which is probably a good thing.</span></div><div class="line" id="042823"><span class="nick" style="color:#2e2a4a"><a href="#042823" label="[04:28:23]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And all of this is just to take choice away from.the user</span></div><div class="line" id="042857"><span class="nick" style="color:#2e2a4a"><a href="#042857" label="[04:28:57]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Given that it's not actually blobs that are being removed anymore, just code for loading blobs from files if they are presen</span></div><div class="line" id="042917"><span class="nick" style="color:#389600"><a href="#042917" label="[04:29:17]">&lt;oriansj&gt;</a></span><span class="message">well, much like how nonguix is not to be ever discussed on #guix</span></div><div class="line" id="043019"><span class="nick" style="color:#2e2a4a"><a href="#043019" label="[04:30:19]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(and they're not, for live-bootstrap doesn't include linux-firmware - intentionally and rightfully, since IMO it would genuinely compromise trust and provide a path for Karger-Thompson retroviruses to get in)</span></div><div class="line" id="043350"><span class="nick" style="color:#389600"><a href="#043350" label="[04:33:50]">&lt;oriansj&gt;</a></span><span class="message">purity isn't a requirement, it is the default and if someone wants to do the stage0 steps on Windows 11; let them choose their own roots of trust.</span></div><div class="line" id="043532"><span class="nick" style="color:#389600"><a href="#043532" label="[04:35:32]">&lt;oriansj&gt;</a></span><span class="message">The defaults are us collectively doing our best to make a secure, trust-worthy system and bootstrapping it entirely from human written source code.</span></div><div class="line" id="043637"><span class="nick" style="color:#389600"><a href="#043637" label="[04:36:37]">&lt;oriansj&gt;</a></span><span class="message">if people trust Linux or BIOS or UEFI or need to make their own hardware from sand; we will give them the option.</span></div><div class="line" id="043801"><span class="nick" style="color:#389600"><a href="#043801" label="[04:38:01]">&lt;oriansj&gt;</a></span><span class="message">but we need only be responsible for maintaining what we care about.</span></div><div class="line" id="043932"><span class="nick" style="color:#389600"><a href="#043932" label="[04:39:32]">&lt;oriansj&gt;</a></span><span class="message">and we will be collectively more secure by having more diverse platforms and roots that all converge on the exact same results.</span></div><div class="line" id="063812"><span class="nick" style="color:#6d2462"><a href="#063812" label="[06:38:12]">&lt;Guest991&gt;</a></span><span class="message">HI, how to create live-bootstrap ․img on bare metal</span></div><div class="line" id="074011"><span class="nick" style="color:#234e69"><a href="#074011" label="[07:40:11]">&lt;samvel_harutyuny&gt;</a></span><span class="message">HI, we successfully finished bootstrapping with chroot. Now It will be fine if we would be able to run it on bare metal. But instructions seem not enough. Can you help us?</span></div><div class="line" id="082035"><span class="nick" style="color:#6c3d55"><a href="#082035" label="[08:20:35]">&lt;fossy&gt;</a></span><span class="message">rickmasters, most interesting, thanks!</span></div><div class="line" id="082206"><span class="nick" style="color:#6c3d55"><a href="#082206" label="[08:22:06]">&lt;fossy&gt;</a></span><span class="message">stikonas, Googulator: firmware loading support is quite OK with me; it's just pregenerated non-firmware things I'm more concerned about</span></div><div class="line" id="082233"><span class="nick" style="color:#6c3d55"><a href="#082233" label="[08:22:33]">&lt;fossy&gt;</a></span><span class="message">firmware is currently unavoidable tbh, and sufficient hardware to avoid firmware blobs is fairlyyy rare</span></div><div class="line" id="082310"><span class="nick" style="color:#6c3d55"><a href="#082310" label="[08:23:10]">&lt;fossy&gt;</a></span><span class="message">Googulator: regarding update, it should be possible, now that binutils is updated</span></div><div class="line" id="082335"><span class="nick" style="color:#6c3d55"><a href="#082335" label="[08:23:35]">&lt;fossy&gt;</a></span><span class="message">there was a historical reason for 4.9 i think it was binutils, but i'm pretty sure all 4.14 criteria are supoprted now</span></div><div class="line" id="082559"><span class="nick" style="color:#6c3d55"><a href="#082559" label="[08:25:59]">&lt;fossy&gt;</a></span><span class="message">FSF compliance in that regard (deblobbed kernel) is not something I'm particualrly attached about for the bootstrap</span></div><div class="line" id="084608"><span class="nick" style="color:#6c3d55"><a href="#084608" label="[08:46:08]">&lt;fossy&gt;</a></span><span class="message">also - if you're using free hardware then none of the non-free stuff will be used anyway</span></div><div class="line" id="104450"><span class="nick" style="color:#d9d9d9"><a href="#104450" label="[10:44:50]">&lt;mid-kid&gt;</a></span><span class="message">How do I extract the init.img built with ./rootfs.py -q?</span></div><div class="line" id="104522"><span class="nick" style="color:#d9d9d9"><a href="#104522" label="[10:45:22]">&lt;mid-kid&gt;</a></span><span class="message">From what I read it's using a very tiny boot sector that reads the files in the sectors that come right after</span></div><div class="line" id="104530"><span class="nick" style="color:#d9d9d9"><a href="#104530" label="[10:45:30]">&lt;mid-kid&gt;</a></span><span class="message">and builds them directly</span></div><div class="line" id="104544"><span class="nick" style="color:#d9d9d9"><a href="#104544" label="[10:45:44]">&lt;mid-kid&gt;</a></span><span class="message">but I can't really map where the final filesystem is located</span></div><div class="line" id="105036"><span class="nick" style="color:#d9d9d9"><a href="#105036" label="[10:50:36]">&lt;mid-kid&gt;</a></span><span class="message">nevermind it's in external.img</span></div><div class="line" id="105137"><span class="nick" style="color:#6c3d55"><a href="#105137" label="[10:51:37]">&lt;fossy&gt;</a></span><span class="message">:)</span></div><div class="line" id="111158"><span class="nick" style="color:#6b8072"><a href="#111158" label="[11:11:58]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: there is also --bare-metal that will create just that image</span></div><div class="line" id="111601"><span class="nick" style="color:#6c3d55"><a href="#111601" label="[11:16:01]">&lt;fossy&gt;</a></span><span class="message">I think this is probably Guest&lt;random numbers&gt;, but I got an email from them with finally some debugging stuff</span></div><div class="line" id="111657"><span class="nick" style="color:#6c3d55"><a href="#111657" label="[11:16:57]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://greenhosting.am:333/db/get/video5359835051846550769.mp4?id=54b8b2df-1a4c-4e9d-9d3b-6e7b2ca1faf8-b8551d3f-98a5-4c69-b2f0-e0b0271e5d45">https://greenhosting.am:333/db/get/video5359835051846550769.mp4?id=54b8b2df-1a4c-4e9d-9d3b-6e7b2ca1faf8-b8551d3f-98a5-4c69-b2f0-e0b0271e5d45</a>  this is the video I was sent of the behaviour</span></div><div class="line" id="111700"><span class="nick" style="color:#6c3d55"><a href="#111700" label="[11:17:00]">&lt;fossy&gt;</a></span><span class="message">not one i've seen before</span></div><div class="line" id="111704"><span class="nick" style="color:#6c3d55"><a href="#111704" label="[11:17:04]">&lt;fossy&gt;</a></span><span class="message">Googulator any thoughts?</span></div><div class="line" id="111711"><span class="nick" style="color:#6c3d55"><a href="#111711" label="[11:17:11]">&lt;fossy&gt;</a></span><span class="message">i have similar hardware available to me so i'll try and reproduce</span></div><div class="line" id="112307"><span class="nick" style="color:#6b8072"><a href="#112307" label="[11:23:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, fails when building kaem?</span></div><div class="line" id="113744"><span class="nick" style="color:#6c3d55"><a href="#113744" label="[11:37:44]">&lt;fossy&gt;</a></span><span class="message">appears so</span></div><div class="line" id="113758"><span class="nick" style="color:#6c3d55"><a href="#113758" label="[11:37:58]">&lt;fossy&gt;</a></span><span class="message">it's very odd, haven't seen anything like it</span></div><div class="line" id="115115"><span class="nick" style="color:#bc80bd"><a href="#115115" label="[11:51:15]">&lt;Googulator&gt;</a></span><span class="message">Could be a memory map issue</span></div><div class="line" id="115127"><span class="nick" style="color:#bc80bd"><a href="#115127" label="[11:51:27]">&lt;Googulator&gt;</a></span><span class="message">Was this done with the e820 patches already included?</span></div><div class="line" id="115150"><span class="nick" style="color:#bc80bd"><a href="#115150" label="[11:51:50]">&lt;Googulator&gt;</a></span><span class="message">though it probably won't help, because e820 isn't actually used by builder-hex0</span></div><div class="line" id="115157"><span class="nick" style="color:#bc80bd"><a href="#115157" label="[11:51:57]">&lt;Googulator&gt;</a></span><span class="message">it's just saved for later use by Fiwix</span></div><div class="line" id="115923"><span class="nick" style="color:#bc80bd"><a href="#115923" label="[11:59:23]">&lt;Googulator&gt;</a></span><span class="message">...it's indeed a memory map issue</span></div><div class="line" id="120450"><span class="nick" style="color:#bc80bd"><a href="#120450" label="[12:04:50]">&lt;Googulator&gt;</a></span><span class="message">this is the e820 map I got in my PMs:</span></div><div class="line" id="120455"><span class="nick" style="color:#bc80bd"><a href="#120455" label="[12:04:55]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] usable</span></div><div class="line" id="120456"><span class="nick" style="color:#bc80bd"><a href="#120456" label="[12:04:56]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] reserved</span></div><div class="line" id="120456"><span class="nick" style="color:#bc80bd"><a href="#120456" label="[12:04:56]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009efff] usable</span></div><div class="line" id="120457"><span class="nick" style="color:#bc80bd"><a href="#120457" label="[12:04:57]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x000000000009f000-0x00000000000fffff] reserved</span></div><div class="line" id="120457"><span class="nick" style="color:#bc80bd"><a href="#120457" label="[12:04:57]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x00000000a685ffff] usable</span></div><div class="line" id="120458"><span class="nick" style="color:#bc80bd"><a href="#120458" label="[12:04:58]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000a6860000-0x00000000a6860fff] ACPI NVS</span></div><div class="line" id="120459"><span class="nick" style="color:#bc80bd"><a href="#120459" label="[12:04:59]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000a6861000-0x00000000a688afff] reserved</span></div><div class="line" id="120459"><span class="nick" style="color:#bc80bd"><a href="#120459" label="[12:04:59]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000a688b000-0x00000000ab403fff] usable</span></div><div class="line" id="120459"><span class="nick" style="color:#bc80bd"><a href="#120459" label="[12:04:59]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ab404000-0x00000000ab779fff] reserved</span></div><div class="line" id="120500"><span class="nick" style="color:#bc80bd"><a href="#120500" label="[12:05:00]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ab77a000-0x00000000ab7b1fff] ACPI data</span></div><div class="line" id="120500"><span class="nick" style="color:#bc80bd"><a href="#120500" label="[12:05:00]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ab7b2000-0x00000000abe16fff] ACPI NVS</span></div><div class="line" id="120501"><span class="nick" style="color:#bc80bd"><a href="#120501" label="[12:05:01]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000abe17000-0x00000000ac42afff] reserved</span></div><div class="line" id="120501"><span class="nick" style="color:#bc80bd"><a href="#120501" label="[12:05:01]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ac42b000-0x00000000ac4fefff] type 20</span></div><div class="line" id="120502"><span class="nick" style="color:#bc80bd"><a href="#120502" label="[12:05:02]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ac4ff000-0x00000000ac4fffff] usable</span></div><div class="line" id="120502"><span class="nick" style="color:#bc80bd"><a href="#120502" label="[12:05:02]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000ac500000-0x00000000afffffff] reserved</span></div><div class="line" id="120503"><span class="nick" style="color:#bc80bd"><a href="#120503" label="[12:05:03]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000f0000000-0x00000000f7ffffff] reserved</span></div><div class="line" id="120503"><span class="nick" style="color:#bc80bd"><a href="#120503" label="[12:05:03]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000fe000000-0x00000000fe010fff] reserved</span></div><div class="line" id="121713"><span class="nick" style="color:#bc80bd"><a href="#121713" label="[12:17:13]">&lt;Googulator&gt;</a></span><span class="message">this is on a machine with 16GB physical RAM installed</span></div><div class="line" id="121732"><span class="nick" style="color:#bc80bd"><a href="#121732" label="[12:17:32]">&lt;Googulator&gt;</a></span><span class="message">and regular Linux kernels somehow see all of that, despite reporting that e820 map</span></div><div class="line" id="122650"><span class="nick" style="color:#bc80bd"><a href="#122650" label="[12:26:50]">&lt;Googulator&gt;</a></span><span class="message">either way, I don't think this is a system we can support for kernel bootstrap with the current approach</span></div><div class="line" id="123039"><span class="nick" style="color:#bc80bd"><a href="#123039" label="[12:30:39]">&lt;Googulator&gt;</a></span><span class="message">the memory map looks similar to this: <a rel="nofollow" href="https://bbs.archlinux.org/viewtopic.php?id=275750">https://bbs.archlinux.org/viewtopic.php?id=275750</a> </span></div><div class="line" id="123126"><span class="nick" style="color:#bc80bd"><a href="#123126" label="[12:31:26]">&lt;Googulator&gt;</a></span><span class="message">that 0x58000:0x58fff memory hole seems to be a feature of some TianoCore-derived UEFIs</span></div><div class="line" id="130615"><span class="nick" style="color:#6c3d55"><a href="#130615" label="[13:06:15]">&lt;fossy&gt;</a></span><span class="message">ah, and builder-hex0 is writing to 58000-58fff?</span></div><div class="line" id="130626"><span class="nick" style="color:#6c3d55"><a href="#130626" label="[13:06:26]">&lt;fossy&gt;</a></span><span class="message">where is builder-hex0's expected memory map?</span></div><div class="line" id="130631"><span class="nick" style="color:#bc80bd"><a href="#130631" label="[13:06:31]">&lt;Googulator&gt;</a></span><span class="message">probably not</span></div><div class="line" id="130643"><span class="nick" style="color:#bc80bd"><a href="#130643" label="[13:06:43]">&lt;Googulator&gt;</a></span><span class="message">[    0.000000] BIOS-e820: [mem 0x00000000a6861000-0x00000000a688afff] reserved</span></div><div class="line" id="130651"><span class="nick" style="color:#bc80bd"><a href="#130651" label="[13:06:51]">&lt;Googulator&gt;</a></span><span class="message">this is the problematic region</span></div><div class="line" id="130716"><span class="nick" style="color:#bc80bd"><a href="#130716" label="[13:07:16]">&lt;Googulator&gt;</a></span><span class="message">but the 58000 hole is a useful identifier for this kind of system, which apparently is a UEFI</span></div><div class="line" id="130732"><span class="nick" style="color:#bc80bd"><a href="#130732" label="[13:07:32]">&lt;Googulator&gt;</a></span><span class="message">(even though Guest991 insisted to me it's a BIOS)</span></div><div class="line" id="130736"><span class="nick" style="color:#6c3d55"><a href="#130736" label="[13:07:36]">&lt;fossy&gt;</a></span><span class="message">right, that makes more sense</span></div><div class="line" id="130739"><span class="nick" style="color:#6c3d55"><a href="#130739" label="[13:07:39]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="130757"><span class="nick" style="color:#bc80bd"><a href="#130757" label="[13:07:57]">&lt;Googulator&gt;</a></span><span class="message">so IMO the way forward for these systems is posix-runner</span></div><div class="line" id="130805"><span class="nick" style="color:#bc80bd"><a href="#130805" label="[13:08:05]">&lt;Googulator&gt;</a></span><span class="message">just treat them as Class 3</span></div><div class="line" id="130819"><span class="nick" style="color:#6c3d55"><a href="#130819" label="[13:08:19]">&lt;fossy&gt;</a></span><span class="message">yeah agreed</span></div><div class="line" id="130823"><span class="nick" style="color:#bc80bd"><a href="#130823" label="[13:08:23]">&lt;Googulator&gt;</a></span><span class="message">CSM is technically present, but too broken for bootstrapping</span></div><div class="line" id="131118"><span class="nick" style="color:#bc80bd"><a href="#131118" label="[13:11:18]">&lt;Googulator&gt;</a></span><span class="message">meanwhile, prototyping the kernel upgrade to 4.14.336 - had to add 2 patches so far, but we already build all the way up to drivers/gpu/drm, where I had my last failure</span></div><div class="line" id="131143"><span class="nick" style="color:#bc80bd"><a href="#131143" label="[13:11:43]">&lt;Googulator&gt;</a></span><span class="message">hmm, is there a reason why we build findutils with tcc, after gcc is already built?</span></div><div class="line" id="131452"><span class="nick" style="color:#80b1d3"><a href="#131452" label="[13:14:52]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Probably fossy or me reordered some packages</span></div><div class="line" id="131505"><span class="nick" style="color:#80b1d3"><a href="#131505" label="[13:15:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And didn't update compiler</span></div><div class="line" id="131553"><span class="nick" style="color:#bc80bd"><a href="#131553" label="[13:15:53]">&lt;Googulator&gt;</a></span><span class="message">so it's not like &quot;it crashes the first GCC build&quot;</span></div><div class="line" id="131707"><span class="nick" style="color:#6c3d55"><a href="#131707" label="[13:17:07]">&lt;fossy&gt;</a></span><span class="message">i have no recollection of any reason that would be, so i'd take it as a &quot;no, there is no reason&quot;</span></div><div class="line" id="131849"><span class="nick" style="color:#bc80bd"><a href="#131849" label="[13:18:49]">&lt;Googulator&gt;</a></span><span class="message">hopefully with gcc, we can upgrade to a version of findutils that actually supports musl (right now, we have &quot;# Musl is not recognized, pretend to be uClibc&quot;)</span></div><div class="line" id="132132"><span class="nick" style="color:#80b1d3"><a href="#132132" label="[13:21:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, sound good</span></div><div class="line" id="135313"><span class="nick" style="color:#389600"><a href="#135313" label="[13:53:13]">&lt;oriansj&gt;</a></span><span class="message">Guest991: do you mean creating the initial live-bootstrap image? from no running system or from a running system?</span></div><div class="line" id="135510"><span class="nick" style="color:#389600"><a href="#135510" label="[13:55:10]">&lt;oriansj&gt;</a></span><span class="message">samvel_harutyuny: So you are looking for more detailed steps for bare hardware?</span></div><div class="line" id="162219"><span class="nick" style="color:#d9d9d9"><a href="#162219" label="[16:22:19]">&lt;mid-kid&gt;</a></span><span class="message">I was just able to build LFS based on a completed live-bootstrap, without modifications or messing around with installing python and whatnot</span></div><div class="line" id="162224"><span class="nick" style="color:#d9d9d9"><a href="#162224" label="[16:22:24]">&lt;mid-kid&gt;</a></span><span class="message">Major kudos for that</span></div><div class="line" id="162303"><span class="nick" style="color:#d9d9d9"><a href="#162303" label="[16:23:03]">&lt;mid-kid&gt;</a></span><span class="message">Last time I tried this was some years ago so maybe it's been like this for longer &quot;^.^</span></div><div class="line" id="170345"><span class="nick" style="color:#bc80bd"><a href="#170345" label="[17:03:45]">&lt;Googulator&gt;</a></span><span class="message">mid-kid: great news!</span></div><div class="line" id="170917"><span class="nick" style="color:#bc80bd"><a href="#170917" label="[17:09:17]">&lt;Googulator&gt;</a></span><span class="message">IMO next step would be building a Gentoo boot image &amp; stage3 tarball on the LFS system, achieving a fully bootstrapped Gentoo</span></div><div class="line" id="171030"><span class="nick" style="color:#d9d9d9"><a href="#171030" label="[17:10:30]">&lt;mid-kid&gt;</a></span><span class="message">I'm gonna do this right now by using the LFS system as a hopping point, primarily to avoid dealing with cross-compilation</span></div><div class="line" id="171107"><span class="nick" style="color:#d9d9d9"><a href="#171107" label="[17:11:07]">&lt;mid-kid&gt;</a></span><span class="message">chapter 5 and 6 of LFS is essentially making a cross-compiler and cross-compiling a bunch of tools to make a minimal system from which to build the rest</span></div><div class="line" id="171316"><span class="nick" style="color:#d9d9d9"><a href="#171316" label="[17:13:16]">&lt;mid-kid&gt;</a></span><span class="message">*ideally* you'd just build a cross-compiler and then use portage to build a stage1 system with that, but it's a bit less trivial</span></div><div class="line" id="171547"><span class="nick" style="color:#d9d9d9"><a href="#171547" label="[17:15:47]">&lt;mid-kid&gt;</a></span><span class="message">I should mention that I'm using the chroot method for everything here, I don't really have a machine to put aside for this...</span></div><div class="line" id="173226"><span class="nick" style="color:#bc80bd"><a href="#173226" label="[17:32:26]">&lt;Googulator&gt;</a></span><span class="message">Please document your journey somewhere, and we will try to replicate it on bare metal.</span></div><div class="line" id="173251"><span class="nick" style="color:#bc80bd"><a href="#173251" label="[17:32:51]">&lt;Googulator&gt;</a></span><span class="message">You can also use qemu mode to test with kernel bootstrap, without needing dedicated hardware.</span></div><div class="line" id="174132"><span class="nick" style="color:#d9d9d9"><a href="#174132" label="[17:41:32]">&lt;mid-kid&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gcc/notes/gentoo/gentoo_notes.txt">https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gcc/notes/gentoo/gentoo_notes.txt</a> </span></div><div class="line" id="174138"><span class="nick" style="color:#d9d9d9"><a href="#174138" label="[17:41:38]">&lt;mid-kid&gt;</a></span><span class="message">this was my adventure back in 2020</span></div><div class="line" id="174210"><span class="nick" style="color:#d9d9d9"><a href="#174210" label="[17:42:10]">&lt;mid-kid&gt;</a></span><span class="message">though it wasn't live-bootstrap but rather a set of scripts I had based on the guix bootstrap, nowhere near as good as what live-bootstrap is today</span></div><div class="line" id="174252"><span class="nick" style="color:#d9d9d9"><a href="#174252" label="[17:42:52]">&lt;mid-kid&gt;</a></span><span class="message">I was wordier back then than I care to be right now, but I'll document this expedition as well :+1:</span></div><div class="line" id="174709"><span class="nick" style="color:#80b1d3"><a href="#174709" label="[17:47:09]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; mid-kid: really nice! I would like to replicate this too but I only have UEFI machine to spare</span></div><div class="line" id="174732"><span class="nick" style="color:#80b1d3"><a href="#174732" label="[17:47:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So need to fix mescc-&gt;tcc step on amd64 first</span></div><div class="line" id="174743"><span class="nick" style="color:#80b1d3"><a href="#174743" label="[17:47:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And then boot into fiwix...</span></div><div class="line" id="174805"><span class="nick" style="color:#d9d9d9"><a href="#174805" label="[17:48:05]">&lt;mid-kid&gt;</a></span><span class="message">UEFI can't boot 32-bit systems? that sucks</span></div><div class="line" id="180206"><span class="nick" style="color:#80b1d3"><a href="#180206" label="[18:02:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; mid-kid: it can</span></div><div class="line" id="180225"><span class="nick" style="color:#80b1d3"><a href="#180225" label="[18:02:25]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; The problem is not uefi itself</span></div><div class="line" id="180250"><span class="nick" style="color:#80b1d3"><a href="#180250" label="[18:02:50]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; The problem is that posix-runner does not support paging</span></div><div class="line" id="180308"><span class="nick" style="color:#80b1d3"><a href="#180308" label="[18:03:08]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So it can only run code that is position I dependent</span></div><div class="line" id="180317"><span class="nick" style="color:#80b1d3"><a href="#180317" label="[18:03:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Independent</span></div><div class="line" id="180328"><span class="nick" style="color:#80b1d3"><a href="#180328" label="[18:03:28]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So that means amd64</span></div><div class="line" id="180351"><span class="nick" style="color:#80b1d3"><a href="#180351" label="[18:03:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; once we build 32 bit fiwix we can boot into it</span></div><div class="line" id="181129"><span class="nick" style="color:#80b1d3"><a href="#181129" label="[18:11:29]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; mid-kid: well, another option would be to shut down uefi services</span></div><div class="line" id="181141"><span class="nick" style="color:#80b1d3"><a href="#181141" label="[18:11:41]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And conver POSIX runner onto full kernel</span></div><div class="line" id="181152"><span class="nick" style="color:#80b1d3"><a href="#181152" label="[18:11:52]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But that also need a lot of work</span></div><div class="line" id="181206"><span class="nick" style="color:#80b1d3"><a href="#181206" label="[18:12:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; We need to set up framebuffer and fonts</span></div><div class="line" id="181240"><span class="nick" style="color:#bc80bd"><a href="#181240" label="[18:12:40]">&lt;Googulator&gt;</a></span><span class="message">yeah, because in the UEFI model, nothing guarantees that the display output hardware has a native text mode</span></div><div class="line" id="181744"><span class="nick" style="color:#bc80bd"><a href="#181744" label="[18:17:44]">&lt;Googulator&gt;</a></span><span class="message">ar: drivers/input/built-in.o: Too many open files in system</span></div><div class="line" id="181754"><span class="nick" style="color:#bc80bd"><a href="#181754" label="[18:17:54]">&lt;Googulator&gt;</a></span><span class="message">...damn</span></div><div class="line" id="181816"><span class="nick" style="color:#bc80bd"><a href="#181816" label="[18:18:16]">&lt;Googulator&gt;</a></span><span class="message">but at the same time, it got to the end of drivers build - just needs a higher open files limit in Fiwix</span></div><div class="line" id="181842"><span class="nick" style="color:#bc80bd"><a href="#181842" label="[18:18:42]">&lt;Googulator&gt;</a></span><span class="message">this is with kernel 4.14</span></div><div class="line" id="183858"><span class="nick" style="color:#3c5b35"><a href="#183858" label="[18:38:58]">&lt;sam_&gt;</a></span><span class="message">mid-kid: nice!</span></div><br /></div></body></html>