<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-01-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013505"><span class="nick" style="color:#8dd3c7"><a href="#013505" label="[01:35:05]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: do you mean cc_* or M2-Planet</span></div><div class="line" id="013526"><span class="nick" style="color:#8dd3c7"><a href="#013526" label="[01:35:26]">&lt;stikonas&gt;</a></span><span class="message">we don't really have  a list in either case</span></div><div class="line" id="013550"><span class="nick" style="color:#8dd3c7"><a href="#013550" label="[01:35:50]">&lt;stikonas&gt;</a></span><span class="message">it's probably easier to say what is supported...</span></div><div class="line" id="013616"><span class="nick" style="color:#8dd3c7"><a href="#013616" label="[01:36:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, M2-Planet is missing . operator, post/pre increments/decrements</span></div><div class="line" id="013639"><span class="nick" style="color:#8dd3c7"><a href="#013639" label="[01:36:39]">&lt;stikonas&gt;</a></span><span class="message">somethng is still buggy if defines or maybe ifdefs</span></div><div class="line" id="013707"><span class="nick" style="color:#8dd3c7"><a href="#013707" label="[01:37:07]">&lt;stikonas&gt;</a></span><span class="message">then no support for multidimensional int arrays</span></div><div class="line" id="013721"><span class="nick" style="color:#8dd3c7"><a href="#013721" label="[01:37:21]">&lt;stikonas&gt;</a></span><span class="message">no support for type casting, i.e. (int) variable</span></div><div class="line" id="013823"><span class="nick" style="color:#8dd3c7"><a href="#013823" label="[01:38:23]">&lt;stikonas&gt;</a></span><span class="message">maybe related to . operator, but structs can only be defined globally and allocated with malloc, no support for storing structs on stack as local variables</span></div><div class="line" id="013918"><span class="nick" style="color:#8dd3c7"><a href="#013918" label="[01:39:18]">&lt;stikonas&gt;</a></span><span class="message">cc_* is missing even more, but that doesn't really matter since M2-Planet is written to be buidlable with cc_*</span></div><div class="line" id="014030"><span class="nick" style="color:#2e2a4a"><a href="#014030" label="[01:40:30]">&lt;gbrlwck&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="014052"><span class="nick" style="color:#8dd3c7"><a href="#014052" label="[01:40:52]">&lt;stikonas&gt;</a></span><span class="message">it's likely that I missed something</span></div><div class="line" id="014100"><span class="nick" style="color:#8dd3c7"><a href="#014100" label="[01:41:00]">&lt;stikonas&gt;</a></span><span class="message">also, some of the things I mentioned above are not really needed</span></div><div class="line" id="014116"><span class="nick" style="color:#8dd3c7"><a href="#014116" label="[01:41:16]">&lt;stikonas&gt;</a></span><span class="message">e.g. I think we can live without int[X][Y]</span></div><div class="line" id="014301"><span class="nick" style="color:#2e2a4a"><a href="#014301" label="[01:43:01]">&lt;gbrlwck&gt;</a></span><span class="message">i was documenting the bootstrapping path for my thesis and figured, it might illustrate the tools better to know which c construct /don't/ work with them :)</span></div><div class="line" id="014311"><span class="nick" style="color:#8dd3c7"><a href="#014311" label="[01:43:11]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: oh, another big thing is pointer arithmetic</span></div><div class="line" id="014317"><span class="nick" style="color:#8dd3c7"><a href="#014317" label="[01:43:17]">&lt;stikonas&gt;</a></span><span class="message">it works differently in M2-PLanet</span></div><div class="line" id="014403"><span class="nick" style="color:#8dd3c7"><a href="#014403" label="[01:44:03]">&lt;stikonas&gt;</a></span><span class="message">p+=1 means adding 1 to address rather than size of the type</span></div><div class="line" id="014515"><span class="nick" style="color:#8dd3c7"><a href="#014515" label="[01:45:15]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: there are some smaller issues too, e.g. boolean operators do not short circuit</span></div><div class="line" id="014542"><span class="nick" style="color:#8dd3c7"><a href="#014542" label="[01:45:42]">&lt;stikonas&gt;</a></span><span class="message">and in fact they might be bitwise operators rather than boolean</span></div><div class="line" id="014628"><span class="nick" style="color:#8dd3c7"><a href="#014628" label="[01:46:28]">&lt;stikonas&gt;</a></span><span class="message">I think I fixed it for !, so ! acts as boolean not rather than bitwise not because I needed that functionality. But &amp;&amp; and || are probably still &amp; and |</span></div><div class="line" id="014803"><span class="nick" style="color:#8dd3c7"><a href="#014803" label="[01:48:03]">&lt;stikonas&gt;</a></span><span class="message">until recently M2-Planet also didn't support compound assignment operators, e.g. += but that was added recently</span></div><div class="line" id="014906"><span class="nick" style="color:#8dd3c7"><a href="#014906" label="[01:49:06]">&lt;stikonas&gt;</a></span><span class="message">also arrays of pointers now work, e.g. char **argv (so argv[0][2] does work). Not to be confused with int a[2][3] which is not an array of pointers</span></div><div class="line" id="015155"><span class="nick" style="color:#2e2a4a"><a href="#015155" label="[01:51:55]">&lt;gbrlwck&gt;</a></span><span class="message">also, i might have stumbled upon an issue for the riscv port, but maybe you can help</span></div><div class="line" id="015229"><span class="nick" style="color:#8dd3c7"><a href="#015229" label="[01:52:29]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="015234"><span class="nick" style="color:#2e2a4a"><a href="#015234" label="[01:52:34]">&lt;gbrlwck&gt;</a></span><span class="message">in hex2 we use &amp; to prefix 32-bit addresses (the value is replaced when linking the files)</span></div><div class="line" id="015249"><span class="nick" style="color:#8dd3c7"><a href="#015249" label="[01:52:49]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="015305"><span class="nick" style="color:#8dd3c7"><a href="#015305" label="[01:53:05]">&lt;stikonas&gt;</a></span><span class="message">I think that is true generally for all arches</span></div><div class="line" id="015309"><span class="nick" style="color:#2e2a4a"><a href="#015309" label="[01:53:09]">&lt;gbrlwck&gt;</a></span><span class="message">in riscv single-instruction jumps only take 12-bit immediates; for 32bit jumps we need to `lui' first</span></div><div class="line" id="015325"><span class="nick" style="color:#8dd3c7"><a href="#015325" label="[01:53:25]">&lt;stikonas&gt;</a></span><span class="message">&amp; is not for jumps</span></div><div class="line" id="015347"><span class="nick" style="color:#8dd3c7"><a href="#015347" label="[01:53:47]">&lt;stikonas&gt;</a></span><span class="message">it's used for creating pointers</span></div><div class="line" id="015426"><span class="nick" style="color:#2e2a4a"><a href="#015426" label="[01:54:26]">&lt;gbrlwck&gt;</a></span><span class="message">ah, yeah, i meant %</span></div><div class="line" id="015426"><span class="nick" style="color:#8dd3c7"><a href="#015426" label="[01:54:26]">&lt;stikonas&gt;</a></span><span class="message">e.g. to create array of pointers that point to some data later</span></div><div class="line" id="015507"><span class="nick" style="color:#2e2a4a"><a href="#015507" label="[01:55:07]">&lt;gbrlwck&gt;</a></span><span class="message">ah, ok, found it again.</span></div><div class="line" id="015520"><span class="nick" style="color:#8dd3c7"><a href="#015520" label="[01:55:20]">&lt;stikonas&gt;</a></span><span class="message">well, % is same thing but relative displacement</span></div><div class="line" id="015527"><span class="nick" style="color:#8dd3c7"><a href="#015527" label="[01:55:27]">&lt;stikonas&gt;</a></span><span class="message">I don't think I used it though</span></div><div class="line" id="015610"><span class="nick" style="color:#2e2a4a"><a href="#015610" label="[01:56:10]">&lt;gbrlwck&gt;</a></span><span class="message">i do it in the MEScc port</span></div><div class="line" id="015626"><span class="nick" style="color:#8dd3c7"><a href="#015626" label="[01:56:26]">&lt;stikonas&gt;</a></span><span class="message">oh, % is actually used</span></div><div class="line" id="015630"><span class="nick" style="color:#8dd3c7"><a href="#015630" label="[01:56:30]">&lt;stikonas&gt;</a></span><span class="message">oh wait, that's M1</span></div><div class="line" id="015633"><span class="nick" style="color:#8dd3c7"><a href="#015633" label="[01:56:33]">&lt;stikonas&gt;</a></span><span class="message">let me check in hex2</span></div><div class="line" id="015711"><span class="nick" style="color:#8dd3c7"><a href="#015711" label="[01:57:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, I didn't use %</span></div><div class="line" id="015727"><span class="nick" style="color:#2e2a4a"><a href="#015727" label="[01:57:27]">&lt;gbrlwck&gt;</a></span><span class="message">i branch with an immediate value (which is a label); only problem i can imagine is if the label exceeds 12-bit</span></div><div class="line" id="015739"><span class="nick" style="color:#8dd3c7"><a href="#015739" label="[01:57:39]">&lt;stikonas&gt;</a></span><span class="message">well, do indirect branches</span></div><div class="line" id="015749"><span class="nick" style="color:#8dd3c7"><a href="#015749" label="[01:57:49]">&lt;stikonas&gt;</a></span><span class="message">branch + jump</span></div><div class="line" id="015759"><span class="nick" style="color:#8dd3c7"><a href="#015759" label="[01:57:59]">&lt;stikonas&gt;</a></span><span class="message">then you can do 20 bit</span></div><div class="line" id="015807"><span class="nick" style="color:#8dd3c7"><a href="#015807" label="[01:58:07]">&lt;stikonas&gt;</a></span><span class="message">or do you need more?</span></div><div class="line" id="015926"><span class="nick" style="color:#8dd3c7"><a href="#015926" label="[01:59:26]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: e.g. in M2-Planet I used those indirect branches <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L1915">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L1915</a> </span></div><div class="line" id="020005"><span class="nick" style="color:#8dd3c7"><a href="#020005" label="[02:00:05]">&lt;stikonas&gt;</a></span><span class="message">so branching condition skips one instruction (which is jump somewhere far)</span></div><div class="line" id="020046"><span class="nick" style="color:#2e2a4a"><a href="#020046" label="[02:00:46]">&lt;gbrlwck&gt;</a></span><span class="message">i see!</span></div><div class="line" id="020051"><span class="nick" style="color:#8dd3c7"><a href="#020051" label="[02:00:51]">&lt;stikonas&gt;</a></span><span class="message">but for longer jumps you'll need lui</span></div><div class="line" id="020110"><span class="nick" style="color:#2e2a4a"><a href="#020110" label="[02:01:10]">&lt;gbrlwck&gt;</a></span><span class="message">but there's no way to check the length of the jump before linking stage, is there?</span></div><div class="line" id="020117"><span class="nick" style="color:#8dd3c7"><a href="#020117" label="[02:01:17]">&lt;stikonas&gt;</a></span><span class="message">since JAL still only accepts 20-bit intermediate</span></div><div class="line" id="020132"><span class="nick" style="color:#8dd3c7"><a href="#020132" label="[02:01:32]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: I don't think so</span></div><div class="line" id="020143"><span class="nick" style="color:#8dd3c7"><a href="#020143" label="[02:01:43]">&lt;stikonas&gt;</a></span><span class="message">hex2 is still a fairly simple linker</span></div><div class="line" id="020200"><span class="nick" style="color:#2e2a4a"><a href="#020200" label="[02:02:00]">&lt;gbrlwck&gt;</a></span><span class="message">hm</span></div><div class="line" id="020225"><span class="nick" style="color:#8dd3c7"><a href="#020225" label="[02:02:25]">&lt;stikonas&gt;</a></span><span class="message">20-bit is 1 million</span></div><div class="line" id="020245"><span class="nick" style="color:#8dd3c7"><a href="#020245" label="[02:02:45]">&lt;stikonas&gt;</a></span><span class="message">and jumps are in multiple of bytes, I think instructions</span></div><div class="line" id="020254"><span class="nick" style="color:#8dd3c7"><a href="#020254" label="[02:02:54]">&lt;stikonas&gt;</a></span><span class="message">so that's +/- 2MiB</span></div><div class="line" id="020311"><span class="nick" style="color:#8dd3c7"><a href="#020311" label="[02:03:11]">&lt;stikonas&gt;</a></span><span class="message">should be sufficient for M2-Planet and mescc</span></div><div class="line" id="020326"><span class="nick" style="color:#2e2a4a"><a href="#020326" label="[02:03:26]">&lt;gbrlwck&gt;</a></span><span class="message">i hope it suffices for tcc</span></div><div class="line" id="020331"><span class="nick" style="color:#8dd3c7"><a href="#020331" label="[02:03:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, should be fine</span></div><div class="line" id="020420"><span class="nick" style="color:#8dd3c7"><a href="#020420" label="[02:04:20]">&lt;stikonas&gt;</a></span><span class="message">we don't get to 1MiB sized binaries till much much later</span></div><div class="line" id="020429"><span class="nick" style="color:#8dd3c7"><a href="#020429" label="[02:04:29]">&lt;stikonas&gt;</a></span><span class="message">possibly bison...</span></div><div class="line" id="020430"><span class="nick" style="color:#2e2a4a"><a href="#020430" label="[02:04:30]">&lt;gbrlwck&gt;</a></span><span class="message">otherwise we would have to implement a smarter linker (replacing a single instruction with two others also alters all the labels)</span></div><div class="line" id="020439"><span class="nick" style="color:#2e2a4a"><a href="#020439" label="[02:04:39]">&lt;gbrlwck&gt;</a></span><span class="message">phew</span></div><div class="line" id="020553"><span class="nick" style="color:#8dd3c7"><a href="#020553" label="[02:05:53]">&lt;stikonas&gt;</a></span><span class="message">it might be that we can even reach binutils before we reach such big binaries</span></div><div class="line" id="020622"><span class="nick" style="color:#8dd3c7"><a href="#020622" label="[02:06:22]">&lt;stikonas&gt;</a></span><span class="message">anyway, riscv64 will need other problems solved before we can even reach binutils</span></div><div class="line" id="020631"><span class="nick" style="color:#8dd3c7"><a href="#020631" label="[02:06:31]">&lt;stikonas&gt;</a></span><span class="message">that's way way ahead of us</span></div><div class="line" id="021038"><span class="nick" style="color:#2e2a4a"><a href="#021038" label="[02:10:38]">&lt;gbrlwck&gt;</a></span><span class="message">true</span></div><div class="line" id="120704"><span class="nick">***</span><span class="message notice">pritambaral is now known as prite</span></div><div class="line" id="150513"><span class="nick" style="color:#2e2a4a"><a href="#150513" label="[15:05:13]">&lt;gbrlwck&gt;</a></span><span class="message">isn't 2^20 more like 1024^2 aka 1MiB?  and in signed that'd be +- 512KiB (RISC-V addresses in Bytes, an instruction is 4 Bytes) so that'd give us 128 KiB of relative jumps)?</span></div><div class="line" id="150850"><span class="nick" style="color:#2e2a4a"><a href="#150850" label="[15:08:50]">&lt;gbrlwck&gt;</a></span><span class="message">sorry, i mean relative jumps of +- 128Ki instructions</span></div><div class="line" id="152610"><span class="nick" style="color:#8dd3c7"><a href="#152610" label="[15:26:10]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: risc-v instructions are 32-bit long, so that's 4 bytes</span></div><div class="line" id="152622"><span class="nick" style="color:#8dd3c7"><a href="#152622" label="[15:26:22]">&lt;stikonas&gt;</a></span><span class="message">512 KiB * 4 = 2MiB</span></div><div class="line" id="152643"><span class="nick" style="color:#8dd3c7"><a href="#152643" label="[15:26:43]">&lt;stikonas&gt;</a></span><span class="message">it's not divided by but multiplied</span></div><div class="line" id="152701"><span class="nick" style="color:#8dd3c7"><a href="#152701" label="[15:27:01]">&lt;stikonas&gt;</a></span><span class="message">i.e. jal 1 is jump 4 bytes forward</span></div><div class="line" id="152713"><span class="nick" style="color:#8dd3c7"><a href="#152713" label="[15:27:13]">&lt;stikonas&gt;</a></span><span class="message">not jump 2 bits forward</span></div><div class="line" id="152851"><span class="nick" style="color:#2e2a4a"><a href="#152851" label="[15:28:51]">&lt;gbrlwck&gt;</a></span><span class="message">i'm not sure. from the specs: &quot;An instruction-address-misaligned exception is generated on a taken branch or unconditional jump if the target address is not four-byte aligned.&quot;</span></div><div class="line" id="152916"><span class="nick" style="color:#2e2a4a"><a href="#152916" label="[15:29:16]">&lt;gbrlwck&gt;</a></span><span class="message">i'd say jal 1 is 1 byte forward (and raises an instruction-address-misaligned exception)</span></div><div class="line" id="153347"><span class="nick" style="color:#6b8072"><a href="#153347" label="[15:33:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, we can check in .hex0 files</span></div><div class="line" id="153614"><span class="nick" style="color:#6b8072"><a href="#153614" label="[15:36:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh maybe it is 1 byte</span></div><div class="line" id="153631"><span class="nick" style="color:#6b8072"><a href="#153631" label="[15:36:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Still you get +/-512KiB</span></div><div class="line" id="153710"><span class="nick" style="color:#6b8072"><a href="#153710" label="[15:37:10]">&lt;stikonas[m]&gt;</a></span><span class="message">I was prob thinking of B type encoding</span></div><div class="line" id="153729"><span class="nick" style="color:#6b8072"><a href="#153729" label="[15:37:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Where it's not 1 byte</span></div><div class="line" id="153833"><span class="nick" style="color:#2e2a4a"><a href="#153833" label="[15:38:33]">&lt;gbrlwck&gt;</a></span><span class="message">it's the same in both :) and in the link you posted hours ago you &quot;RS1_A0 @8 BNEZ&quot; :)</span></div><div class="line" id="154150"><span class="nick" style="color:#6b8072"><a href="#154150" label="[15:41:50]">&lt;stikonas[m]&gt;</a></span><span class="message">@8 is 4 when encoded</span></div><div class="line" id="154251"><span class="nick" style="color:#6b8072"><a href="#154251" label="[15:42:51]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/99cdd03a78b67f58deab47f52b2819c3ecf7d3bc/riscv64/hex0_riscv64.hex0#L113">https://github.com/oriansj/stage0-posix/blob/99cdd03a78b67f58deab47f52b2819c3ecf7d3bc/riscv64/hex0_riscv64.hex0#L113</a> </span></div><div class="line" id="154311"><span class="nick" style="color:#6b8072"><a href="#154311" label="[15:43:11]">&lt;stikonas[m]&gt;</a></span><span class="message">@16 becomes 8 in third position</span></div><div class="line" id="154327"><span class="nick" style="color:#6b8072"><a href="#154327" label="[15:43:27]">&lt;stikonas[m]&gt;</a></span><span class="message">hex1/2 handle this</span></div><div class="line" id="154857"><span class="nick" style="color:#8dd3c7"><a href="#154857" label="[15:48:57]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L77">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L77</a> </span></div><div class="line" id="154910"><span class="nick" style="color:#8dd3c7"><a href="#154910" label="[15:49:10]">&lt;stikonas&gt;</a></span><span class="message">if you look at that line, value must be even</span></div><div class="line" id="163503"><span class="nick" style="color:#2e2a4a"><a href="#163503" label="[16:35:03]">&lt;gbrlwck&gt;</a></span><span class="message">true!  i now see that the LSB is omitted from the B and J instruction types</span></div><div class="line" id="163831"><span class="nick" style="color:#2e2a4a"><a href="#163831" label="[16:38:31]">&lt;gbrlwck&gt;</a></span><span class="message">so we virtually have 21 bits at disposal, so +- 20bit which is +- 1MiB, but since we do full 32bit instructions the lowest bit is discarded again -- hence +-512KiB</span></div><div class="line" id="164509"><span class="nick" style="color:#8dd3c7"><a href="#164509" label="[16:45:09]">&lt;stikonas&gt;</a></span><span class="message">no, that was true only for B-type instructions</span></div><div class="line" id="164518"><span class="nick" style="color:#8dd3c7"><a href="#164518" label="[16:45:18]">&lt;stikonas&gt;</a></span><span class="message">which are 12 bit encoded</span></div><div class="line" id="164524"><span class="nick" style="color:#2e2a4a"><a href="#164524" label="[16:45:24]">&lt;gbrlwck&gt;</a></span><span class="message">i mean J type</span></div><div class="line" id="164545"><span class="nick" style="color:#8dd3c7"><a href="#164545" label="[16:45:45]">&lt;stikonas&gt;</a></span><span class="message">J-type (JAL) is just 20-bit, there is no unused bit</span></div><div class="line" id="164645"><span class="nick" style="color:#2e2a4a"><a href="#164645" label="[16:46:45]">&lt;gbrlwck&gt;</a></span><span class="message">there's also no LSB (bit 0) in J type instructions</span></div><div class="line" id="164738"><span class="nick" style="color:#8dd3c7"><a href="#164738" label="[16:47:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, or maybe I'm misunderstanding</span></div><div class="line" id="164741"><span class="nick" style="color:#8dd3c7"><a href="#164741" label="[16:47:41]">&lt;stikonas&gt;</a></span><span class="message">let me double check</span></div><div class="line" id="164850"><span class="nick" style="color:#8dd3c7"><a href="#164850" label="[16:48:50]">&lt;stikonas&gt;</a></span><span class="message">oh yes, risc-v also has 1 unused bit</span></div><div class="line" id="164855"><span class="nick" style="color:#8dd3c7"><a href="#164855" label="[16:48:55]">&lt;stikonas&gt;</a></span><span class="message">for j-type</span></div><div class="line" id="164926"><span class="nick" style="color:#8dd3c7"><a href="#164926" label="[16:49:26]">&lt;stikonas&gt;</a></span><span class="message">so jump amount has to be even</span></div><div class="line" id="164936"><span class="nick" style="color:#8dd3c7"><a href="#164936" label="[16:49:36]">&lt;stikonas&gt;</a></span><span class="message">so I guess +/- 1MiB then</span></div><div class="line" id="164947"><span class="nick" style="color:#8dd3c7"><a href="#164947" label="[16:49:47]">&lt;stikonas&gt;</a></span><span class="message">anyway, the linker deals with these issues</span></div><div class="line" id="164959"><span class="nick" style="color:#8dd3c7"><a href="#164959" label="[16:49:59]">&lt;stikonas&gt;</a></span><span class="message">just assume that jumps fit</span></div><div class="line" id="165007"><span class="nick" style="color:#8dd3c7"><a href="#165007" label="[16:50:07]">&lt;stikonas&gt;</a></span><span class="message">and if we ever hit limits, then that can be fixed</span></div><div class="line" id="165054"><span class="nick" style="color:#2e2a4a"><a href="#165054" label="[16:50:54]">&lt;gbrlwck&gt;</a></span><span class="message">i will and i do :) thanks for the clarifications!</span></div><br /></div></body></html>