<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-07-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="132241"><span class="nick" style="color:#389600"><a href="#132241" label="[13:22:41]">&lt;Irvise_&gt;</a></span><span class="message">In case someone wants to follow the discussion <a rel="nofollow" href="https://lists.gnu.org/archive/html/guix-devel/2023-07/msg00092.html">https://lists.gnu.org/archive/html/guix-devel/2023-07/msg00092.html</a> </span></div><div class="line" id="132249"><span class="nick" style="color:#389600"><a href="#132249" label="[13:22:49]">&lt;Irvise_&gt;</a></span><span class="message">(GCC-Ada in Guix)</span></div><div class="line" id="153622"><span class="nick" style="color:#8dd3c7"><a href="#153622" label="[15:36:22]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: If they proposed using the Debian binary (which is much smaller and a single blob) and had the following plan, it'll probably be accepted. They will using the oldest (and smallest) possible Debian Ada binary, create a bootstrap chain to the newest Ada binaries and frameworks [thus giving as minimal fixed target as possible going forward]</span></div><div class="line" id="154046"><span class="nick" style="color:#2e2a4a"><a href="#154046" label="[15:40:46]">&lt;sam_&gt;</a></span><span class="message">Irvise_: thanks for sharing</span></div><div class="line" id="154053"><span class="nick" style="color:#2e2a4a"><a href="#154053" label="[15:40:53]">&lt;sam_&gt;</a></span><span class="message">this is a huge pain for us in gentoo still (for D as well)</span></div><div class="line" id="154706"><span class="nick" style="color:#389600"><a href="#154706" label="[15:47:06]">&lt;Irvise_&gt;</a></span><span class="message">sam_: Lucretia, from the #ada channel has been working on the Ada overlay recently, trying to improve the situation, so at least you are not alone :)</span></div><div class="line" id="154805"><span class="nick" style="color:#389600"><a href="#154805" label="[15:48:05]">&lt;Irvise_&gt;</a></span><span class="message">oriansj: I expect Guix will prefer the smaller binary, I just don't know how well will it play with the system GCC... That is why I proposed Alire's. But Guix did not pick the tough path for no reason X)</span></div><div class="line" id="155004"><span class="nick" style="color:#2e2a4a"><a href="#155004" label="[15:50:04]">&lt;sam_&gt;</a></span><span class="message">Irvise_: :)</span></div><div class="line" id="155539"><span class="nick" style="color:#6b8072"><a href="#155539" label="[15:55:39]">&lt;markjenkinswpg&gt;</a></span><span class="message">Hi folks. It's been awhile since I said hello. Haven't been reading the chat logs either so out of the loop.</span></div><div class="line" id="155651"><span class="nick" style="color:#6b8072"><a href="#155651" label="[15:56:51]">&lt;markjenkinswpg&gt;</a></span><span class="message">Good news, I haven't been entirely distracted by other things (though true at times). Some of my bootstrapping work has continued quietly in pre-release form</span></div><div class="line" id="160101"><span class="nick" style="color:#6b8072"><a href="#160101" label="[16:01:01]">&lt;markjenkinswpg&gt;</a></span><span class="message">Folks may recall that I started to implement a sub-set of the toy language Lox, the subject of Bob Nystrom's book, Crafting Interpreters, which has been a big inspiration <a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme">https://github.com/markjenkins/lox_compiler_scheme</a> </span></div><div class="line" id="160149"><span class="nick" style="color:#6b8072"><a href="#160149" label="[16:01:49]">&lt;markjenkinswpg&gt;</a></span><span class="message">Wrote my byte code interpreter in M2-Planet C and wrote my bytecode compiler in a very minimal scheme variant</span></div><div class="line" id="160419"><span class="nick" style="color:#6b8072"><a href="#160419" label="[16:04:19]">&lt;markjenkinswpg&gt;</a></span><span class="message">For that aspect of things, I still have to implement compiler features for Lox functions (limited to just global), a garbage collector, and a bootstrappable minimal scheme interpreter <a rel="nofollow" href="https://github.com/markjenkins/mes-m2-rewrite">https://github.com/markjenkins/mes-m2-rewrite</a> </span></div><div class="line" id="160527"><span class="nick" style="color:#6b8072"><a href="#160527" label="[16:05:27]">&lt;markjenkinswpg&gt;</a></span><span class="message">But, being easily distractable I decided to pause and first move up the stack to see if I could write something more high level in this Lox subset, demonstrating it's worth finishing the job of bootstrapping</span></div><div class="line" id="160709"><span class="nick" style="color:#6b8072"><a href="#160709" label="[16:07:09]">&lt;markjenkinswpg&gt;</a></span><span class="message">So I decided to &quot;slay the Dragon&quot; (book reference) and started writing a parser generator that could replace the heritage yacc that folks were using to bootstrap bash, but which had licensing issues</span></div><div class="line" id="161012"><span class="nick" style="color:#6b8072"><a href="#161012" label="[16:10:12]">&lt;markjenkinswpg&gt;</a></span><span class="message">I got as far as being able to generate a LR0 automaton, but the limitations of the language started to catch up with me, the classic challenge of bootstrapping</span></div><div class="line" id="161318"><span class="nick" style="color:#6b8072"><a href="#161318" label="[16:13:18]">&lt;markjenkinswpg&gt;</a></span><span class="message">So more recently I've added another layer to the rabbit hole, writing a prototype in Java to force some type safety on me. I'm avoiding features like polymorphism and only using data structure that are like the stack of pairs I was working with in &quot;sublox1&quot; or which I've otherwise already implemented from that in sublox1</span></div><div class="line" id="161507"><span class="nick" style="color:#6b8072"><a href="#161507" label="[16:15:07]">&lt;markjenkinswpg&gt;</a></span><span class="message">From the java prototype I think I will be able to do a disciplined 1-to-1 re-write to my sublox1 code</span></div><div class="line" id="161640"><span class="nick" style="color:#80b1d3"><a href="#161640" label="[16:16:40]">&lt;stikonas[m]&gt;</a></span><span class="message">markjenkinswpg: in case you haven't been following logs, we actually have a problem even earlier</span></div><div class="line" id="161658"><span class="nick" style="color:#6b8072"><a href="#161658" label="[16:16:58]">&lt;markjenkinswpg&gt;</a></span><span class="message">It could easily be another year before I could bootstrap bash's yacc in this manner</span></div><div class="line" id="161659"><span class="nick" style="color:#80b1d3"><a href="#161659" label="[16:16:59]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/306">https://github.com/fosslinux/live-bootstrap/issues/306</a> </span></div><div class="line" id="161723"><span class="nick" style="color:#80b1d3"><a href="#161723" label="[16:17:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, I suspect we'll get gash working sooner</span></div><div class="line" id="161746"><span class="nick" style="color:#80b1d3"><a href="#161746" label="[16:17:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Which kind of solves that licencing issue too</span></div><div class="line" id="161828"><span class="nick" style="color:#80b1d3"><a href="#161828" label="[16:18:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Still, if you find it fun to work on yacc, you can still continue</span></div><div class="line" id="161953"><span class="nick" style="color:#6b8072"><a href="#161953" label="[16:19:53]">&lt;markjenkinswpg&gt;</a></span><span class="message">interesting stikonas, in both respects I'm trying to work in parallel away from scheme, I use a primitive version of it very early on and my goal is to get away from scheme in the bootstrap path as soon as possible and this may invite other developers</span></div><div class="line" id="162021"><span class="nick" style="color:#6b8072"><a href="#162021" label="[16:20:21]">&lt;markjenkinswpg&gt;</a></span><span class="message">though I appreciate a lot of great work has been done in scheme, more then I could ever hope to catch up on</span></div><div class="line" id="162353"><span class="nick" style="color:#6b8072"><a href="#162353" label="[16:23:53]">&lt;markjenkinswpg&gt;</a></span><span class="message">I'm playing a long game here. Would be very interesting if efforts could eventually converge by me trying to bootstrap that Nyacc problem my own way or to even write a different scheme implementation that's bytecode based with a compiler to bytecode that's not written in C or scheme, but instead in a more high level imperative language</span></div><div class="line" id="162551"><span class="nick" style="color:#6b8072"><a href="#162551" label="[16:25:51]">&lt;markjenkinswpg&gt;</a></span><span class="message">generally low performance (language interpreter vs bytecode interpreter) is okay in bootstrapping, but at a certain point there could be value in ensuring folks writing bootstrappable stuff can have performance not only through guile while they're doing initial work, but also when they're testing the bootstrap path</span></div><div class="line" id="162830"><span class="nick" style="color:#6b8072"><a href="#162830" label="[16:28:30]">&lt;markjenkinswpg&gt;</a></span><span class="message">Another imperative program that I think would be interesting to put through a re-write to lox and also use my parser generator (yacc) along the way would be pcc</span></div><div class="line" id="163044"><span class="nick" style="color:#6b8072"><a href="#163044" label="[16:30:44]">&lt;markjenkinswpg&gt;</a></span><span class="message">Though, even if I can write stuff in this toy language Lox, who knows if anyone else will want to work in it even if I can write/re-write some useful high level programs like yacc/pcc. Possibly folks will need to improve the reference implemention to provide better debug feedback and better interactivity</span></div><div class="line" id="163429"><span class="nick" style="color:#8dd3c7"><a href="#163429" label="[16:34:29]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: not playing well with the system GCC isn't an issue with guix (as we could just package a version of gcc which does play well with that version of Ada)</span></div><div class="line" id="163648"><span class="nick" style="color:#8dd3c7"><a href="#163648" label="[16:36:48]">&lt;oriansj&gt;</a></span><span class="message">markjenkinswpg: glad to hear that you are having some fun; exploring the potential solution space ^_^</span></div><div class="line" id="163656"><span class="nick" style="color:#6b8072"><a href="#163656" label="[16:36:56]">&lt;markjenkinswpg&gt;</a></span><span class="message">Reading that Nyacc related report (306), I see the parser table there is to be re-generated from scheme code. Would be pretty bizarre for me to re-generate that parser table through another path, as ultimately Nyacc makes a lot more sense if everything is done through scheme</span></div><div class="line" id="163820"><span class="nick" style="color:#6b8072"><a href="#163820" label="[16:38:20]">&lt;markjenkinswpg&gt;</a></span><span class="message">But reading back a little bit and just from my own imagination, mes sounds like a challenging scheme interpreter to maintain and extend</span></div><div class="line" id="163828"><span class="nick" style="color:#6d2462"><a href="#163828" label="[16:38:28]">&lt;stikonas&gt;</a></span><span class="message">yeah, that one is perhaps best done in mes</span></div><div class="line" id="163916"><span class="nick" style="color:#6d2462"><a href="#163916" label="[16:39:16]">&lt;stikonas&gt;</a></span><span class="message">I think it's just that fewer people know scheme than C</span></div><div class="line" id="163945"><span class="nick" style="color:#6d2462"><a href="#163945" label="[16:39:45]">&lt;stikonas&gt;</a></span><span class="message">in some sense a lot of our tools get hard to extend at some point</span></div><div class="line" id="163957"><span class="nick" style="color:#6d2462"><a href="#163957" label="[16:39:57]">&lt;stikonas&gt;</a></span><span class="message">e.g. it's not easy to add much more support to M2-Planet...</span></div><div class="line" id="164025"><span class="nick" style="color:#6d2462"><a href="#164025" label="[16:40:25]">&lt;stikonas&gt;</a></span><span class="message">there are some limitations in design</span></div><div class="line" id="164026"><span class="nick" style="color:#6b8072"><a href="#164026" label="[16:40:26]">&lt;markjenkinswpg&gt;</a></span><span class="message">ah yes, another imperative program I want to attempt a re-write of in a higher level imperitive lang</span></div><div class="line" id="164105"><span class="nick" style="color:#6d2462"><a href="#164105" label="[16:41:05]">&lt;stikonas&gt;</a></span><span class="message">tcc is also ugly...</span></div><div class="line" id="164132"><span class="nick" style="color:#6d2462"><a href="#164132" label="[16:41:32]">&lt;stikonas&gt;</a></span><span class="message">it has quite good support for C99 but the way tcc itself is written is very ugly</span></div><div class="line" id="164142"><span class="nick" style="color:#6b8072"><a href="#164142" label="[16:41:42]">&lt;markjenkinswpg&gt;</a></span><span class="message">I think part of how bootstrapping has to succeed over the long run is to rely more on tools building higher level tools vs trying to maintain a lot at a lower level. tcc sounds like another good example to get away from</span></div><div class="line" id="164149"><span class="nick" style="color:#6d2462"><a href="#164149" label="[16:41:49]">&lt;stikonas&gt;</a></span><span class="message">(one letter variable names, poorly commented, etc...)</span></div><div class="line" id="164258"><span class="nick" style="color:#8dd3c7"><a href="#164258" label="[16:42:58]">&lt;oriansj&gt;</a></span><span class="message">well int i as an index is fine; poorly commented on the other hand is hard to excuse...</span></div><div class="line" id="164321"><span class="nick" style="color:#6b8072"><a href="#164321" label="[16:43:21]">&lt;markjenkinswpg&gt;</a></span><span class="message">I personally want to work with as little assembler, M2-Planet C, Scheme, and C that I can get away with</span></div><div class="line" id="164349"><span class="nick" style="color:#6d2462"><a href="#164349" label="[16:43:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: int i as an index is indeed fine as it is a well known convention, but when all other variables are like this, it's hard to read</span></div><div class="line" id="164633"><span class="nick" style="color:#6b8072"><a href="#164633" label="[16:46:33]">&lt;markjenkinswpg&gt;</a></span><span class="message">To my list of &quot;avoids&quot; I should add &quot;forth&quot;. I'm fascinated by the theoretical bootstrappability of my power macs, OCPC-XO and other people's Sparc machines, but if I ever go there I'll be looking to leap out of Forth asap too</span></div><div class="line" id="164848"><span class="nick" style="color:#8dd3c7"><a href="#164848" label="[16:48:48]">&lt;oriansj&gt;</a></span><span class="message">markjenkinswpg: completely fair; parser generators and the like really can save a good deal of manual effort</span></div><div class="line" id="165021"><span class="nick" style="color:#6b8072"><a href="#165021" label="[16:50:21]">&lt;markjenkinswpg&gt;</a></span><span class="message">My thinking is just that parser generators are nice when somebody has already done the hard work of constructing the right grammer, precedence indications and actions. Bash an pcc come to mind first.</span></div><div class="line" id="165139"><span class="nick" style="color:#6b8072"><a href="#165139" label="[16:51:39]">&lt;markjenkinswpg&gt;</a></span><span class="message">Not sure how much I actually want to use parser generators as a tool beyond that, though I'm going to attempt as a dogfooding exercise to put together a grammer for my loxsubset + a few extra features</span></div><div class="line" id="165332"><span class="nick" style="color:#6b8072"><a href="#165332" label="[16:53:32]">&lt;markjenkinswpg&gt;</a></span><span class="message">I would actually add yacc grammers and specifically parser generators only accepting LALR(1) to the list of tools I want to bootstrap away from :). Am kind of facinated by Python using something else, &quot;PEG&quot; or something</span></div><div class="line" id="165912"><span class="nick" style="color:#6b8072"><a href="#165912" label="[16:59:12]">&lt;markjenkinswpg&gt;</a></span><span class="message">anyway, I'm going to go back to my research cave. (not an academic by trade FYI). Will try to check back and read more, maybe drop some github gist links as pre-releases, and hopefully switch this parser gen project to public mode within a few months</span></div><div class="line" id="171159"><span class="nick" style="color:#234e69"><a href="#171159" label="[17:11:59]">&lt;[exa]&gt;</a></span><span class="message">PEGs ain't bad, just sometimes very cringely slow</span></div><div class="line" id="171552"><span class="nick" style="color:#6b8072"><a href="#171552" label="[17:15:52]">&lt;markjenkinswpg&gt;</a></span><span class="message">that seems to be the trade-off with these things [exa]</span></div><div class="line" id="173235"><span class="nick" style="color:#234e69"><a href="#173235" label="[17:32:35]">&lt;[exa]&gt;</a></span><span class="message">yeah the landscape is complex</span></div><div class="line" id="173335"><span class="nick" style="color:#234e69"><a href="#173335" label="[17:33:35]">&lt;[exa]&gt;</a></span><span class="message">I'm not sure if someone solved it but the last time I looked at the theory it was still unknown whether PEGs are strictly stronger or weaker than usual context-free grammars</span></div><div class="line" id="173506"><span class="nick" style="color:#234e69"><a href="#173506" label="[17:35:06]">&lt;[exa]&gt;</a></span><span class="message">PEGs can do e.g. {a^nb^nc^n|n is natural} but the trick doesn't generally apply to context-sensitive grammars</span></div><div class="line" id="173618"><span class="nick" style="color:#234e69"><a href="#173618" label="[17:36:18]">&lt;[exa]&gt;</a></span><span class="message">and general contextfree grammars (Earley/CYK/etc) can explore the whole possible parse tree but no one showed yet if that would be a problem for PEGs</span></div><div class="line" id="174748"><span class="nick" style="color:#234e69"><a href="#174748" label="[17:47:48]">&lt;[exa]&gt;</a></span><span class="message">s/grammars/grammar parsers/  s/parse tree/parsetree space/</span></div><div class="line" id="212550"><span class="nick" style="color:#6c3d55"><a href="#212550" label="[21:25:50]">&lt;doras&gt;</a></span><span class="message">fossy: when you have some time, review would be appreciated: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/311">https://github.com/fosslinux/live-bootstrap/pull/311</a> </span></div><div class="line" id="215053"><span class="nick" style="color:#6d2462"><a href="#215053" label="[21:50:53]">&lt;stikonas&gt;</a></span><span class="message">doras: do you know why python checksums differ?</span></div><div class="line" id="215116"><span class="nick" style="color:#6d2462"><a href="#215116" label="[21:51:16]">&lt;stikonas&gt;</a></span><span class="message">i.e. would it not break qemu bootstrap where you are not changing available devices?</span></div><div class="line" id="215135"><span class="nick" style="color:#6c3d55"><a href="#215135" label="[21:51:35]">&lt;doras&gt;</a></span><span class="message">stikonas: yes: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5943">https://gitlab.gnome.org/-/snippets/5943</a> </span></div><div class="line" id="215216"><span class="nick" style="color:#6d2462"><a href="#215216" label="[21:52:16]">&lt;stikonas&gt;</a></span><span class="message">ok, so just config file...</span></div><div class="line" id="215233"><span class="nick" style="color:#6c3d55"><a href="#215233" label="[21:52:33]">&lt;doras&gt;</a></span><span class="message">Yes. No impact on binaries as far as I could tell.</span></div><div class="line" id="215248"><span class="nick" style="color:#6d2462"><a href="#215248" label="[21:52:48]">&lt;stikonas&gt;</a></span><span class="message">ok, but test -c &quot;/dev/ptmx&quot; would run in qemu mode</span></div><div class="line" id="215253"><span class="nick" style="color:#6d2462"><a href="#215253" label="[21:52:53]">&lt;stikonas&gt;</a></span><span class="message">so I think it should be fine</span></div><div class="line" id="215407"><span class="nick" style="color:#6c3d55"><a href="#215407" label="[21:54:07]">&lt;doras&gt;</a></span><span class="message">I ran all possible bootstrap modes other than bare-metal, I think.</span></div><div class="line" id="215416"><span class="nick" style="color:#6c3d55"><a href="#215416" label="[21:54:16]">&lt;doras&gt;</a></span><span class="message">All got the same hashes.</span></div><div class="line" id="215451"><span class="nick" style="color:#6d2462"><a href="#215451" label="[21:54:51]">&lt;stikonas&gt;</a></span><span class="message">qemu should be good enough...</span></div><div class="line" id="215454"><span class="nick" style="color:#6d2462"><a href="#215454" label="[21:54:54]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="215458"><span class="nick" style="color:#6d2462"><a href="#215458" label="[21:54:58]">&lt;stikonas&gt;</a></span><span class="message">I think let's merge it then</span></div><div class="line" id="215552"><span class="nick" style="color:#6d2462"><a href="#215552" label="[21:55:52]">&lt;stikonas&gt;</a></span><span class="message">I don't see any harm it it anywya</span></div><div class="line" id="220258"><span class="nick" style="color:#6c3d55"><a href="#220258" label="[22:02:58]">&lt;doras&gt;</a></span><span class="message">Thanks stikonas :)</span></div><br /></div></body></html>