<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-01-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003248"><span class="nick" style="color:#8dd3c7"><a href="#003248" label="[00:32:48]">&lt;dddddd&gt;</a></span><span class="message">A fresh pair of eyes would be great for this bit of documentation I'm perpetrating with help of my broken english. Any comments are appreciated!</span></div><div class="line" id="003253"><span class="nick" style="color:#8dd3c7"><a href="#003253" label="[00:32:53]">&lt;dddddd&gt;</a></span><span class="message"> <a rel="nofollow" href="https://notabug.org/deesix/M2-Planet-WIP/commit/6e83a726f04d68264ee6dc6f45259bca3b0c7575">https://notabug.org/deesix/M2-Planet-WIP/commit/6e83a726f04d68264ee6dc6f45259bca3b0c7575</a> </span></div><div class="line" id="010539"><span class="nick" style="color:#2e2a4a"><a href="#010539" label="[01:05:39]">&lt;fossy&gt;</a></span><span class="message">oriansj: unfortunatly not.</span></div><div class="line" id="011130"><span class="nick" style="color:#6b8072"><a href="#011130" label="[01:11:30]">&lt;oriansj&gt;</a></span><span class="message">fossy: I know but you'll get there ^_^</span></div><div class="line" id="013445"><span class="nick" style="color:#6b8072"><a href="#013445" label="[01:34:45]">&lt;oriansj&gt;</a></span><span class="message">dddddd: in the phrase: the problem about immediates bits us; don't you mean bytes ;-p</span></div><div class="line" id="013727"><span class="nick" style="color:#8dd3c7"><a href="#013727" label="[01:37:27]">&lt;dddddd&gt;</a></span><span class="message">Not that fun I think, the bits all around are causing the problems, but bytes sounds more like bites indeed. Hard to choose :P</span></div><div class="line" id="013930"><span class="nick" style="color:#6b8072"><a href="#013930" label="[01:39:30]">&lt;oriansj&gt;</a></span><span class="message">your choice indeed</span></div><div class="line" id="014314"><span class="nick" style="color:#80b1d3"><a href="#014314" label="[01:43:14]">&lt;Hagfish&gt;</a></span><span class="message">Create one independent definition per _needed_ operation, instead of 		 +  reuse common parts</span></div><div class="line" id="014319"><span class="nick" style="color:#80b1d3"><a href="#014319" label="[01:43:19]">&lt;Hagfish&gt;</a></span><span class="message">should that be &quot;reusing&quot;?</span></div><div class="line" id="014434"><span class="nick" style="color:#80b1d3"><a href="#014434" label="[01:44:34]">&lt;Hagfish&gt;</a></span><span class="message">also &quot;preliminar&quot; should be &quot;preliminary&quot; (did you really write all this without a spell checker?  the english is great, over all)</span></div><div class="line" id="014441"><span class="nick" style="color:#8dd3c7"><a href="#014441" label="[01:44:41]">&lt;dddddd&gt;</a></span><span class="message">I think so, changed to reusing.</span></div><div class="line" id="014614"><span class="nick" style="color:#6b8072"><a href="#014614" label="[01:46:14]">&lt;oriansj&gt;</a></span><span class="message">dddddd: the technical details look good.</span></div><div class="line" id="014615"><span class="nick" style="color:#8dd3c7"><a href="#014615" label="[01:46:15]">&lt;dddddd&gt;</a></span><span class="message">changed to preliminary. No spell checker, a bit of dictionary.</span></div><div class="line" id="014643"><span class="nick" style="color:#80b1d3"><a href="#014643" label="[01:46:43]">&lt;Hagfish&gt;</a></span><span class="message">uses 		 +as part of the generation of 'if', 'for', 'do' and 'while' 		 +statements.</span></div><div class="line" id="014653"><span class="nick" style="color:#80b1d3"><a href="#014653" label="[01:46:53]">&lt;Hagfish&gt;</a></span><span class="message">i think &quot;uses&quot; might need to be &quot;used&quot;</span></div><div class="line" id="014804"><span class="nick" style="color:#80b1d3"><a href="#014804" label="[01:48:04]">&lt;Hagfish&gt;</a></span><span class="message">&quot;A bit too invasive change to the codebase.&quot;</span></div><div class="line" id="014819"><span class="nick" style="color:#80b1d3"><a href="#014819" label="[01:48:19]">&lt;Hagfish&gt;</a></span><span class="message">that might be valid english, but i'm not sure :)</span></div><div class="line" id="014850"><span class="nick" style="color:#80b1d3"><a href="#014850" label="[01:48:50]">&lt;Hagfish&gt;</a></span><span class="message">i would feel more confident about &quot;A bit too invasive a change to make to the codebase.&quot; (even though that is still a sentence fragment, or something)</span></div><div class="line" id="014906"><span class="nick" style="color:#8dd3c7"><a href="#014906" label="[01:49:06]">&lt;dddddd&gt;</a></span><span class="message">Nice, on the technical side I was a bit worried about not being correct in &quot;the value returned from the function, if any, is on X0&quot;</span></div><div class="line" id="014938"><span class="nick" style="color:#8dd3c7"><a href="#014938" label="[01:49:38]">&lt;dddddd&gt;</a></span><span class="message">... but I don't find any exception.</span></div><div class="line" id="014947"><span class="nick" style="color:#80b1d3"><a href="#014947" label="[01:49:47]">&lt;Hagfish&gt;</a></span><span class="message">i wish i understood enough to spot technical mistakes too :)</span></div><div class="line" id="015008"><span class="nick" style="color:#80b1d3"><a href="#015008" label="[01:50:08]">&lt;Hagfish&gt;</a></span><span class="message">&quot;It's a lot of fun to came up with basic solutions&quot; -&gt; &quot;... come ...&quot;</span></div><div class="line" id="015058"><span class="nick" style="color:#80b1d3"><a href="#015058" label="[01:50:58]">&lt;Hagfish&gt;</a></span><span class="message">&quot; See how 		 +unsurprising are the depths&quot;</span></div><div class="line" id="015120"><span class="nick" style="color:#80b1d3"><a href="#015120" label="[01:51:20]">&lt;Hagfish&gt;</a></span><span class="message">not technically wrong, but sounds a bit archaic/poetic.  i think most english speakers would put the &quot;are&quot; at the end of the sentence</span></div><div class="line" id="015213"><span class="nick" style="color:#6b8072"><a href="#015213" label="[01:52:13]">&lt;oriansj&gt;</a></span><span class="message">dddddd: well; there is one exception but it would be if you called a void function that doesn't return anything but before the return does something like 1+2; which would result in it returning 3. but I am not certain of the best solution to that problem.</span></div><div class="line" id="015216"><span class="nick" style="color:#8dd3c7"><a href="#015216" label="[01:52:16]">&lt;dddddd&gt;</a></span><span class="message">thanks Hagfish, I'm looking at your suggestions.</span></div><div class="line" id="015247"><span class="nick" style="color:#6b8072"><a href="#015247" label="[01:52:47]">&lt;oriansj&gt;</a></span><span class="message">(in X0 of course)</span></div><div class="line" id="015405"><span class="nick" style="color:#6b8072"><a href="#015405" label="[01:54:05]">&lt;oriansj&gt;</a></span><span class="message">something like this: <a rel="nofollow" href="https://paste.debian.net/1128279/">https://paste.debian.net/1128279/</a> </span></div><div class="line" id="015416"><span class="nick" style="color:#8dd3c7"><a href="#015416" label="[01:54:16]">&lt;dddddd&gt;</a></span><span class="message">Something like that I was looking for, oriansj. I see how the expression is in the register in that moment.</span></div><div class="line" id="015419"><span class="nick" style="color:#80b1d3"><a href="#015419" label="[01:54:19]">&lt;Hagfish&gt;</a></span><span class="message">&quot;ommited&quot; i think should be &quot;omitted&quot;</span></div><div class="line" id="015555"><span class="nick" style="color:#80b1d3"><a href="#015555" label="[01:55:55]">&lt;Hagfish&gt;</a></span><span class="message">&quot;X16, LR and BP contains&quot; that should probably be &quot;contain&quot;, if i understand correctly</span></div><div class="line" id="015652"><span class="nick" style="color:#80b1d3"><a href="#015652" label="[01:56:52]">&lt;Hagfish&gt;</a></span><span class="message">&quot;workaround the architectural restriction&quot; i think &quot;work around&quot; is the verb, and &quot;workaround&quot; is the noun</span></div><div class="line" id="015742"><span class="nick" style="color:#80b1d3"><a href="#015742" label="[01:57:42]">&lt;Hagfish&gt;</a></span><span class="message">anyway, the document is already great, so thank you for writing it</span></div><div class="line" id="015811"><span class="nick" style="color:#8dd3c7"><a href="#015811" label="[01:58:11]">&lt;dddddd&gt;</a></span><span class="message">No, thank you, that was great! (:</span></div><div class="line" id="015816"><span class="nick" style="color:#6b8072"><a href="#015816" label="[01:58:16]">&lt;oriansj&gt;</a></span><span class="message">dddddd: it of course is not valid C code (every good C compiler should complain about it)</span></div><div class="line" id="020450"><span class="nick" style="color:#8dd3c7"><a href="#020450" label="[02:04:50]">&lt;dddddd&gt;</a></span><span class="message">As in &quot;work the architectural restriction around&quot;?</span></div><div class="line" id="020457"><span class="nick" style="color:#6b8072"><a href="#020457" label="[02:04:57]">&lt;oriansj&gt;</a></span><span class="message">gcc however appears to think it means return 242?? and clang (does warn about it) returns 16</span></div><div class="line" id="020552"><span class="nick" style="color:#6b8072"><a href="#020552" label="[02:05:52]">&lt;oriansj&gt;</a></span><span class="message">(one has to add -Wunused-value to get gcc to complain about it)</span></div><div class="line" id="020722"><span class="nick" style="color:#6b8072"><a href="#020722" label="[02:07:22]">&lt;oriansj&gt;</a></span><span class="message">I guess none of the standard C compilers have an issue with void functions returning values; how odd</span></div><div class="line" id="021015"><span class="nick" style="color:#6b8072"><a href="#021015" label="[02:10:15]">&lt;oriansj&gt;</a></span><span class="message">but they do have a problem with returning the value from a void function or assigning it</span></div><div class="line" id="021031"><span class="nick" style="color:#6b8072"><a href="#021031" label="[02:10:31]">&lt;oriansj&gt;</a></span><span class="message">atleast some sanity to that optimization I guess</span></div><div class="line" id="021235"><span class="nick" style="color:#8dd3c7"><a href="#021235" label="[02:12:35]">&lt;dddddd&gt;</a></span><span class="message">oriansj, to generate the proof hashes &quot;make Generate-test-answers&quot; does almost everything, AFAIU. Then, another hash need to be update, I did it by hand last time I think.. Sounds correct or I'm missing something?</span></div><div class="line" id="021334"><span class="nick" style="color:#8dd3c7"><a href="#021334" label="[02:13:34]">&lt;dddddd&gt;</a></span><span class="message">(this for every commit that changes the compiler or the generated output)</span></div><div class="line" id="021442"><span class="nick" style="color:#6b8072"><a href="#021442" label="[02:14:42]">&lt;oriansj&gt;</a></span><span class="message">make Generate-test-answers will update all of the hashes; test100's proof will need to be updated as it needs to match the x86 output of compiling M2-Planet. The command to fix that is: sha256sum test/test100/proof &gt;| test/test100/proof.answer</span></div><div class="line" id="021514"><span class="nick" style="color:#8dd3c7"><a href="#021514" label="[02:15:14]">&lt;dddddd&gt;</a></span><span class="message">OK, that sounds familiar. Thanks for the confirmation.</span></div><div class="line" id="021548"><span class="nick" style="color:#6b8072"><a href="#021548" label="[02:15:48]">&lt;oriansj&gt;</a></span><span class="message">you'll hit an error on the first test100 after every compiler update</span></div><div class="line" id="021605"><span class="nick" style="color:#8dd3c7"><a href="#021605" label="[02:16:05]">&lt;dddddd&gt;</a></span><span class="message">yes</span></div><div class="line" id="021632"><span class="nick" style="color:#6b8072"><a href="#021632" label="[02:16:32]">&lt;oriansj&gt;</a></span><span class="message">which is a good thing (gives you a chance to compare the difference in output to see if it looks how you want)</span></div><div class="line" id="021841"><span class="nick" style="color:#8dd3c7"><a href="#021841" label="[02:18:41]">&lt;dddddd&gt;</a></span><span class="message">Makes sense. I was a bit worried about the &quot;by hand&quot; part. Who am I to change the hashes? :P</span></div><div class="line" id="021913"><span class="nick" style="color:#6b8072"><a href="#021913" label="[02:19:13]">&lt;oriansj&gt;</a></span><span class="message">dddddd: you are a real developer; who is changing how the world works</span></div><div class="line" id="022023"><span class="nick" style="color:#6b8072"><a href="#022023" label="[02:20:23]">&lt;oriansj&gt;</a></span><span class="message">It is now your duty to update the hashes to reflect what you honestly believe the checksums should be.</span></div><div class="line" id="022142"><span class="nick" style="color:#6b8072"><a href="#022142" label="[02:21:42]">&lt;oriansj&gt;</a></span><span class="message">and it is ok to be wrong.</span></div><div class="line" id="022207"><span class="nick" style="color:#8dd3c7"><a href="#022207" label="[02:22:07]">&lt;dddddd&gt;</a></span><span class="message">which means doing it with the correct directory state. I'll try not to mess it.</span></div><div class="line" id="022259"><span class="nick" style="color:#6b8072"><a href="#022259" label="[02:22:59]">&lt;oriansj&gt;</a></span><span class="message">dddddd: no commit has to be  perfect</span></div><div class="line" id="022325"><span class="nick" style="color:#6b8072"><a href="#022325" label="[02:23:25]">&lt;oriansj&gt;</a></span><span class="message">They just need to be an honest attempt at doing the right thing.</span></div><div class="line" id="022351"><span class="nick" style="color:#8dd3c7"><a href="#022351" label="[02:23:51]">&lt;dddddd&gt;</a></span><span class="message">I guess releases are critical, and some intermediate bad commit is not the end of the world.</span></div><div class="line" id="022401"><span class="nick" style="color:#8dd3c7"><a href="#022401" label="[02:24:01]">&lt;dddddd&gt;</a></span><span class="message">... wrt hashes</span></div><div class="line" id="022440"><span class="nick" style="color:#6b8072"><a href="#022440" label="[02:24:40]">&lt;oriansj&gt;</a></span><span class="message">release just need extra testing and updating of the Changelog (post release)</span></div><div class="line" id="022545"><span class="nick" style="color:#6b8072"><a href="#022545" label="[02:25:45]">&lt;oriansj&gt;</a></span><span class="message">There isn't a Gnu project more than 10 years old that doesn't have atleast 1 broken release</span></div><div class="line" id="022614"><span class="nick" style="color:#6b8072"><a href="#022614" label="[02:26:14]">&lt;oriansj&gt;</a></span><span class="message">even guix had to do a quick new release after v1.0</span></div><div class="line" id="022623"><span class="nick" style="color:#8dd3c7"><a href="#022623" label="[02:26:23]">&lt;dddddd&gt;</a></span><span class="message">I'm planning to include a line in the changelog at the end of the branch, I think that's expected. Also, the manpage to reflect the new option early on.</span></div><div class="line" id="022804"><span class="nick" style="color:#6b8072"><a href="#022804" label="[02:28:04]">&lt;oriansj&gt;</a></span><span class="message">any commit prior to the merge is fine</span></div><div class="line" id="040235"><span class="nick" style="color:#80b1d3"><a href="#040235" label="[04:02:35]">&lt;Hagfish&gt;</a></span><span class="message">dddddd:  &quot;work the architectural restriction around&quot;? no, sorry, i meant &quot;work around the architectural restriction&quot;</span></div><div class="line" id="040246"><span class="nick" style="color:#80b1d3"><a href="#040246" label="[04:02:46]">&lt;Hagfish&gt;</a></span><span class="message">it just needed a space</span></div><div class="line" id="064517"><span class="nick" style="color:#6d2462"><a href="#064517" label="[06:45:17]">&lt;markjenkinsznc&gt;</a></span><span class="message">i noticed something super minor in stage0 that I'm tempted to not even file an issue on. Sometimes it's worth it to have &quot;won't fix&quot; on record to discourage the next person, but I'm not sure this is even worth it, so I'll put it in the chat first</span></div><div class="line" id="064527"><span class="nick" style="color:#6d2462"><a href="#064527" label="[06:45:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">stage1_assembler-2.s and stage1_assembler-2.hex1 (knight implementations) are different in one tiny way.</span></div><div class="line" id="064535"><span class="nick" style="color:#6d2462"><a href="#064535" label="[06:45:35]">&lt;markjenkinsznc&gt;</a></span><span class="message">stage1_assembler-2.hex1 being in hex1 doesn't have access to absolute addressing, so $stack is hard coded as 0x400, which is totally an acceptable and aesthetically nice place to start the stack</span></div><div class="line" id="064542"><span class="nick" style="color:#6d2462"><a href="#064542" label="[06:45:42]">&lt;markjenkinsznc&gt;</a></span><span class="message">but stage1_assembler-2.s uses an absolute reference to $stack and has a :stack label at the end of the file, and the address for this turns out to be a little bit before 0x400.</span></div><div class="line" id="064550"><span class="nick" style="color:#6d2462"><a href="#064550" label="[06:45:50]">&lt;markjenkinsznc&gt;</a></span><span class="message">so I end up with a binary that's different on the two bytes where 0x0400 is hard coded into the first instruction LOADUI R15 $stack when I use knightpies and run $ ./M1tobin.py stage0/High_level_prototypes/defs stage0/stage1/stage1_assembler-2.s -o stage0/roms/stage1_assembler-2; sha256sum stage0/roms/stage1_assembler-2 ; grep stage1_assembler-2 stage0/test/SHA256SUMS</span></div><div class="line" id="064557"><span class="nick" style="color:#6d2462"><a href="#064557" label="[06:45:57]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'm not sure any change is required, as it's fine if stage0_assembler-2.s from a documentation perspective if stage1_assembler-2.s only different from stage1_assembler-2.hex1 in this regard.</span></div><div class="line" id="064608"><span class="nick" style="color:#6d2462"><a href="#064608" label="[06:46:08]">&lt;markjenkinsznc&gt;</a></span><span class="message">I did want to use stage0_assembler-2.s in my test suite, so I do some binary monkey patching to these two bytes in the binary after assembler/link/encode to get a matching result <a rel="nofollow" href="https://github.com/markjenkins/knightpies/commit/072e4cb1ea1f4e224a04fa7de5f4bb829155e477">https://github.com/markjenkins/knightpies/commit/072e4cb1ea1f4e224a04fa7de5f4bb829155e477</a> </span></div><div class="line" id="064617"><span class="nick" style="color:#6d2462"><a href="#064617" label="[06:46:17]">&lt;markjenkinsznc&gt;</a></span><span class="message">If there was a desire to fix, 3 approaches come to mind, 1) adding padding before $stack to get it to 0x400 which will have to appear in the hex1 version as well (changing the test/SHA256SUMS result), 2) changing to a less beautiful stack start in the .hex1 version to match the .s version, 3) changing the code if possible to use a relative @stack reference in both the .hex1 and .s</span></div><div class="line" id="073215"><span class="nick" style="color:#2e2a4a"><a href="#073215" label="[07:32:15]">&lt;fossy&gt;</a></span><span class="message">markjenkinsznc: that is important, actually</span></div><div class="line" id="073220"><span class="nick" style="color:#2e2a4a"><a href="#073220" label="[07:32:20]">&lt;fossy&gt;</a></span><span class="message">oriansj: ^</span></div><div class="line" id="120548"><span class="nick" style="color:#6b8072"><a href="#120548" label="[12:05:48]">&lt;oriansj&gt;</a></span><span class="message">markjenkinsznc: you are absolutely correct; a relative @stack is probably the best solution</span></div><div class="line" id="120855"><span class="nick" style="color:#6b8072"><a href="#120855" label="[12:08:55]">&lt;oriansj&gt;</a></span><span class="message">These sorts of differences are extremely important to eliminate</span></div><div class="line" id="122705"><span class="nick" style="color:#6b8072"><a href="#122705" label="[12:27:05]">&lt;oriansj&gt;</a></span><span class="message">as everything in the early stages must be beyound question</span></div><div class="line" id="122925"><span class="nick" style="color:#6b8072"><a href="#122925" label="[12:29:25]">&lt;oriansj&gt;</a></span><span class="message">actually @stack will not work; after the change of calculating of the difference from the end of the instruction rather than the beginning.</span></div><div class="line" id="123811"><span class="nick" style="color:#6b8072"><a href="#123811" label="[12:38:11]">&lt;oriansj&gt;</a></span><span class="message">So I am going to change it to hardcode the address 0x400 and include a comment about it</span></div><div class="line" id="213738"><span class="nick">***</span><span class="message notice">nckx- is now known as nckx</span></div><div class="line" id="224952"><span class="nick" style="color:#6d2462"><a href="#224952" label="[22:49:52]">&lt;markjenkinsznc&gt;</a></span><span class="message">oriansj, thanks. I've halted the monkey business when the new stage1_assembler-2.s is present: <a rel="nofollow" href="https://github.com/markjenkins/knightpies/commit/19bbd29a60b89f9f08d736f7aac43670fa513baf">https://github.com/markjenkins/knightpies/commit/19bbd29a60b89f9f08d736f7aac43670fa513baf</a> </span></div><div class="line" id="225211"><span class="nick" style="color:#6d2462"><a href="#225211" label="[22:52:11]">&lt;markjenkinsznc&gt;</a></span><span class="message">Going to keep this around for awhile to keep my codebase compatible with stage0 Release_0.2.0 and Release_0.3.0 . But eventually knightpies will git submodule reference a future stage0 release and I'll drop it to keep my test suite clean</span></div><div class="line" id="225404"><span class="nick" style="color:#6d2462"><a href="#225404" label="[22:54:04]">&lt;markjenkinsznc&gt;</a></span><span class="message">hmmm, oops, I also committed additional test cases in the commit I just made, oh well, one thing that's nice about working in a public repo that has had other people's notice is I feel an obligation to not rewrite published history, so it gits me off the hook for my git commit perfectionism</span></div><div class="line" id="225616"><span class="nick" style="color:#6d2462"><a href="#225616" label="[22:56:16]">&lt;markjenkinsznc&gt;</a></span><span class="message">as for @stack, I did think that it could be offset wrong, but that SUB or ADD instructions or something could be added to adjust to the intended target... but that would be ugly, I think your patch to stage1_assembler-2.s is good for leaving the .hex1 alone</span></div><div class="line" id="225736"><span class="nick" style="color:#6d2462"><a href="#225736" label="[22:57:36]">&lt;markjenkinsznc&gt;</a></span><span class="message">one could go further than the good comment present and comment out the :stack reference in the .s file so as to make it's slight inaccuracy more clear</span></div><div class="line" id="230533"><span class="nick" style="color:#6d2462"><a href="#230533" label="[23:05:33]">&lt;markjenkinsznc&gt;</a></span><span class="message">as for keeping my knightpies test suite compatible with different stage0 releases, I am very pleased to see git submodule references to the related code bases. Having falling in love with python3 unittest.skipIf, I can see myself conditionally testing against files from those submodules if the user has them present and otherwise just skip such tests. That will come once M1.py and hex2tbin.py support other archs, though for now I'm included to</span></div><div class="line" id="230533"><span class="nick" style="color:#6d2462"><a href="#230533" label="[23:05:33]">&lt;markjenkinsznc&gt;</a></span><span class="message">focus on getting to the point where I can cc_x86.s (implemented in knight) and using M2-planet to machine generate a cc_knight.s (implemented in knight) which can be commented, made more human readable in terms of instructions used, and become a tool to build M2-planet in knight isa.</span></div><br /></div></body></html>