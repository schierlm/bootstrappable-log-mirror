<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002836"><span class="nick" style="color:#8dd3c7"><a href="#002836" label="[00:28:36]">&lt;oriansj&gt;</a></span><span class="message">rekado_: worst case is that it is a step in the right direction.</span></div><div class="line" id="002944"><span class="nick" style="color:#8dd3c7"><a href="#002944" label="[00:29:44]">&lt;oriansj&gt;</a></span><span class="message">as it'll finally remove the GHC binary from the guix Haskell build chain and reduce it to just some generated C sources; which we can use as a fixed target to hit</span></div><div class="line" id="003000"><span class="nick" style="color:#8dd3c7"><a href="#003000" label="[00:30:00]">&lt;oriansj&gt;</a></span><span class="message">(in terms of haskell support and functionality)</span></div><div class="line" id="062134"><span class="nick" style="color:#2e2a4a"><a href="#062134" label="[06:21:34]">&lt;janus&gt;</a></span><span class="message">rekado_: which platform are you compiling on? nhc98 doesn't need a lot of patching on redhat 6.1. ghc 4 might have some of the same assumptions about the generated ABI?</span></div><div class="line" id="062356"><span class="nick" style="color:#2e2a4a"><a href="#062356" label="[06:23:56]">&lt;janus&gt;</a></span><span class="message">i have some progress on getting ghc 0.29 compiled with nhc98, the main issue is that the interface files (.hi) from nhc have a different syntax. so i am rewriting some of them by hand, which is error prone. will be a problem if i ever get to the linking step :P</span></div><div class="line" id="062516"><span class="nick" style="color:#2e2a4a"><a href="#062516" label="[06:25:16]">&lt;janus&gt;</a></span><span class="message">regarding HBC, i saw <a rel="nofollow" href="https://github.com/haskell-implementations/hbc">https://github.com/haskell-implementations/hbc</a>  but gave up on it as it is written in LML and i don't know where to get an LML compiler</span></div><div class="line" id="075950"><span class="nick" style="color:#6b8072"><a href="#075950" label="[07:59:50]">&lt;rekado_&gt;</a></span><span class="message">janus: we have nhc98 in Guix</span></div><div class="line" id="080025"><span class="nick" style="color:#6b8072"><a href="#080025" label="[08:00:25]">&lt;rekado_&gt;</a></span><span class="message">I’m building for i686-linux</span></div><div class="line" id="080118"><span class="nick" style="color:#6b8072"><a href="#080118" label="[08:01:18]">&lt;rekado_&gt;</a></span><span class="message">the HBC code on github doesn’t have a license, so I ignored it.</span></div><div class="line" id="080154"><span class="nick" style="color:#2e2a4a"><a href="#080154" label="[08:01:54]">&lt;janus&gt;</a></span><span class="message">rekado_: oooh, does the nhc98 in guix run? i got the impression from your article that it didn't</span></div><div class="line" id="080220"><span class="nick" style="color:#6b8072"><a href="#080220" label="[08:02:20]">&lt;rekado_&gt;</a></span><span class="message">we built it with the generated C “source” files.</span></div><div class="line" id="080241"><span class="nick" style="color:#6b8072"><a href="#080241" label="[08:02:41]">&lt;rekado_&gt;</a></span><span class="message">in my blog post I tried to do without</span></div><div class="line" id="080308"><span class="nick" style="color:#2e2a4a"><a href="#080308" label="[08:03:08]">&lt;janus&gt;</a></span><span class="message">ah right, ok</span></div><div class="line" id="080814"><span class="nick" style="color:#2e2a4a"><a href="#080814" label="[08:08:14]">&lt;janus&gt;</a></span><span class="message">even ghc 0.29 is checking for a bunch of haskell compilers in it's build system without actually being compatible with anything but ghc</span></div><div class="line" id="080913"><span class="nick" style="color:#2e2a4a"><a href="#080913" label="[08:09:13]">&lt;janus&gt;</a></span><span class="message">i tried using it because i thought it could be closer to the point where it was still somewhat portable</span></div><div class="line" id="081047"><span class="nick" style="color:#6b8072"><a href="#081047" label="[08:10:47]">&lt;rekado_&gt;</a></span><span class="message">in ghc 4 you can set HC (via WithGhcHc in mk/config.mk.in) to nhc98, but GHC does require GHC and nhc98 just segfaults when building the first file.</span></div><div class="line" id="081058"><span class="nick" style="color:#6b8072"><a href="#081058" label="[08:10:58]">&lt;rekado_&gt;</a></span><span class="message">it also complains about unknown command line options</span></div><div class="line" id="081104"><span class="nick" style="color:#6b8072"><a href="#081104" label="[08:11:04]">&lt;rekado_&gt;</a></span><span class="message">I don’t think anyone ever tested this</span></div><div class="line" id="081336"><span class="nick" style="color:#2e2a4a"><a href="#081336" label="[08:13:36]">&lt;janus&gt;</a></span><span class="message">the ghc website seems to suggest that people were contributing binaries. but they were probably all built with ghc, yeah</span></div><div class="line" id="081444"><span class="nick" style="color:#6b8072"><a href="#081444" label="[08:14:44]">&lt;rekado_&gt;</a></span><span class="message">here’s my gdb session for the ghc 4 hsc segfault: <a rel="nofollow" href="https://elephly.net/paste/1666332860.html">https://elephly.net/paste/1666332860.html</a> </span></div><div class="line" id="081448"><span class="nick" style="color:#6b8072"><a href="#081448" label="[08:14:48]">&lt;rekado_&gt;</a></span><span class="message">I don’t know what I’m doing</span></div><div class="line" id="081511"><span class="nick" style="color:#6b8072"><a href="#081511" label="[08:15:11]">&lt;rekado_&gt;</a></span><span class="message">I’ve built whatever I could with -g and -gdwarf-2</span></div><div class="line" id="081604"><span class="nick" style="color:#2e2a4a"><a href="#081604" label="[08:16:04]">&lt;janus&gt;</a></span><span class="message">but a modern compiler, right? how can you trust it to lay out the code in a way they expect</span></div><div class="line" id="081613"><span class="nick" style="color:#6b8072"><a href="#081613" label="[08:16:13]">&lt;rekado_&gt;</a></span><span class="message">I used GCC 2.95.3</span></div><div class="line" id="081625"><span class="nick" style="color:#6b8072"><a href="#081625" label="[08:16:25]">&lt;rekado_&gt;</a></span><span class="message">that’s as unmodern as I can afford</span></div><div class="line" id="081656"><span class="nick" style="color:#2e2a4a"><a href="#081656" label="[08:16:56]">&lt;janus&gt;</a></span><span class="message">ooh interesting. i tried using gcc 2.95 for ghc-0.29 and it crashed. which is why i use eGCS now</span></div><div class="line" id="081715"><span class="nick" style="color:#2e2a4a"><a href="#081715" label="[08:17:15]">&lt;janus&gt;</a></span><span class="message">or actually, i think it was 2.96 (the hacked redhat version of 2.95)</span></div><div class="line" id="081843"><span class="nick" style="color:#2e2a4a"><a href="#081843" label="[08:18:43]">&lt;janus&gt;</a></span><span class="message">gcc 0.29 is from Jan '96 if i can trust these timestamps. gcc 2.95 is from july '99.</span></div><div class="line" id="081911"><span class="nick" style="color:#2e2a4a"><a href="#081911" label="[08:19:11]">&lt;janus&gt;</a></span><span class="message">things were changing a lot back then in GCC, so it makes sense to me how gcc 2.95 would already be too new</span></div><div class="line" id="082008"><span class="nick" style="color:#6b8072"><a href="#082008" label="[08:20:08]">&lt;rekado_&gt;</a></span><span class="message">the release announcement for 0.29 is from July 96</span></div><div class="line" id="082039"><span class="nick" style="color:#2e2a4a"><a href="#082039" label="[08:20:39]">&lt;janus&gt;</a></span><span class="message">right. still three years of gcc changes, which is my point</span></div><div class="line" id="082046"><span class="nick" style="color:#6b8072"><a href="#082046" label="[08:20:46]">&lt;rekado_&gt;</a></span><span class="message">yes, I understand</span></div><div class="line" id="082054"><span class="nick" style="color:#6b8072"><a href="#082054" label="[08:20:54]">&lt;rekado_&gt;</a></span><span class="message">(I just felt like looking it up)</span></div><div class="line" id="082059"><span class="nick" style="color:#6b8072"><a href="#082059" label="[08:20:59]">&lt;rekado_&gt;</a></span><span class="message">have you tried any of the other GHC releases?</span></div><div class="line" id="082145"><span class="nick" style="color:#2e2a4a"><a href="#082145" label="[08:21:45]">&lt;janus&gt;</a></span><span class="message">i have tried ghc-3.02, and i ported happy to work with nhc98. but i gave it up relatively early when it became apparent that ghc 3 hadn't been ever compiled with anything else</span></div><div class="line" id="082218"><span class="nick" style="color:#2e2a4a"><a href="#082218" label="[08:22:18]">&lt;janus&gt;</a></span><span class="message">ghc 0.29 actually has a lot of HBC-specific code, more than for any other alternative compiler. so that is one argument in favour of HBC</span></div><div class="line" id="082310"><span class="nick" style="color:#6b8072"><a href="#082310" label="[08:23:10]">&lt;rekado_&gt;</a></span><span class="message">ghc 0.29 has an intimidatingly custom build system</span></div><div class="line" id="082343"><span class="nick" style="color:#2e2a4a"><a href="#082343" label="[08:23:43]">&lt;janus&gt;</a></span><span class="message">it has something called Jmakefiles which are used to generate normal Makefiles</span></div><div class="line" id="082400"><span class="nick" style="color:#2e2a4a"><a href="#082400" label="[08:24:00]">&lt;janus&gt;</a></span><span class="message">and I think this Jmake build system was the one i didn't get to work on gcc 2.95</span></div><div class="line" id="082500"><span class="nick" style="color:#2e2a4a"><a href="#082500" label="[08:25:00]">&lt;janus&gt;</a></span><span class="message">it also has some perl hacks to check which haskell files require which one. when they don't want that perl script to pick up an import, they put a newline after the &quot;import&quot; keyword, hah! so hacky</span></div><div class="line" id="082607"><span class="nick" style="color:#2e2a4a"><a href="#082607" label="[08:26:07]">&lt;janus&gt;</a></span><span class="message">and the perl script also has some hardcoded lists of modules to treat a certain way</span></div><div class="line" id="082634"><span class="nick" style="color:#6b8072"><a href="#082634" label="[08:26:34]">&lt;rekado_&gt;</a></span><span class="message">for GHC 4 I’m using perl 5.6 because that’s old enough to support multi-line matching with $*</span></div><div class="line" id="082746"><span class="nick" style="color:#2e2a4a"><a href="#082746" label="[08:27:46]">&lt;janus&gt;</a></span><span class="message">heh good to hear that even newer ghc releases are using the weirdest features :P</span></div><div class="line" id="083237"><span class="nick" style="color:#6b8072"><a href="#083237" label="[08:32:37]">&lt;rekado_&gt;</a></span><span class="message">re LML: it’s probably Lazy ML, which is presented here: <a rel="nofollow" href="https://dl.acm.org/doi/epdf/10.1145/800055.802038">https://dl.acm.org/doi/epdf/10.1145/800055.802038</a> </span></div><div class="line" id="083254"><span class="nick" style="color:#6b8072"><a href="#083254" label="[08:32:54]">&lt;rekado_&gt;</a></span><span class="message">but the paper only contains a few code snippets, no implementation</span></div><div class="line" id="083349"><span class="nick" style="color:#6b8072"><a href="#083349" label="[08:33:49]">&lt;rekado_&gt;</a></span><span class="message">the release tarball hbc-2004-06-29.src.tar includes a directory “LML”</span></div><div class="line" id="083349"><span class="nick" style="color:#2e2a4a"><a href="#083349" label="[08:33:49]">&lt;janus&gt;</a></span><span class="message">yeah. actually Lennart Augustsson which worked on HBC, and also on LML, now works with Simon Peyton Jones at Epic Games</span></div><div class="line" id="083411"><span class="nick" style="color:#2e2a4a"><a href="#083411" label="[08:34:11]">&lt;janus&gt;</a></span><span class="message">so unlike the authors of the other alternative compilers, he is still around</span></div><div class="line" id="083427"><span class="nick" style="color:#2e2a4a"><a href="#083427" label="[08:34:27]">&lt;janus&gt;</a></span><span class="message">even did a Haskell podcast episode that i listened to</span></div><div class="line" id="083448"><span class="nick" style="color:#2e2a4a"><a href="#083448" label="[08:34:48]">&lt;janus&gt;</a></span><span class="message">i wish there was some way to challenge him to get his compiler building again :P</span></div><div class="line" id="083500"><span class="nick" style="color:#2e2a4a"><a href="#083500" label="[08:35:00]">&lt;janus&gt;</a></span><span class="message">but i can't find his email anywhere</span></div><div class="line" id="083706"><span class="nick" style="color:#2e2a4a"><a href="#083706" label="[08:37:06]">&lt;janus&gt;</a></span><span class="message">here are the logs of my current progress on ghc-0.29: <a rel="nofollow" href="https://paste.sr.ht/~janus/883278312e5cb9bf62d16c31f0c9f31ff896dc4f">https://paste.sr.ht/~janus/883278312e5cb9bf62d16c31f0c9f31ff896dc4f</a> </span></div><div class="line" id="083828"><span class="nick" style="color:#2e2a4a"><a href="#083828" label="[08:38:28]">&lt;janus&gt;</a></span><span class="message">the errors at the very end are due to the .hi files being incompatible, and i have already fixed a dozen, but there are many left</span></div><div class="line" id="083926"><span class="nick" style="color:#2e2a4a"><a href="#083926" label="[08:39:26]">&lt;janus&gt;</a></span><span class="message">i could push this somewhere if anybody cares...</span></div><div class="line" id="084139"><span class="nick" style="color:#6b8072"><a href="#084139" label="[08:41:39]">&lt;rekado_&gt;</a></span><span class="message">do you have flex and bison to build the parser from scratch?</span></div><div class="line" id="084222"><span class="nick" style="color:#6b8072"><a href="#084222" label="[08:42:22]">&lt;rekado_&gt;</a></span><span class="message">(asking because of the yyin / yyout errors)</span></div><div class="line" id="084222"><span class="nick" style="color:#2e2a4a"><a href="#084222" label="[08:42:22]">&lt;janus&gt;</a></span><span class="message">i have bison 1.28 and flex 2.5.4</span></div><div class="line" id="084249"><span class="nick" style="color:#2e2a4a"><a href="#084249" label="[08:42:49]">&lt;janus&gt;</a></span><span class="message">but i havn't worried about it because there are so many haskell incompatibilities to fix</span></div><div class="line" id="084311"><span class="nick" style="color:#6b8072"><a href="#084311" label="[08:43:11]">&lt;rekado_&gt;</a></span><span class="message">do you use GhcWithHscBuiltViaC to build from .hc files?</span></div><div class="line" id="084403"><span class="nick" style="color:#2e2a4a"><a href="#084403" label="[08:44:03]">&lt;janus&gt;</a></span><span class="message">i think it isn't trying that, i remember trying to unset that, and it didn't seem to make a difference</span></div><div class="line" id="084423"><span class="nick" style="color:#2e2a4a"><a href="#084423" label="[08:44:23]">&lt;janus&gt;</a></span><span class="message">but since it is invoking nhc98, i guess it isn't building ViaC?</span></div><div class="line" id="084626"><span class="nick" style="color:#2e2a4a"><a href="#084626" label="[08:46:26]">&lt;janus&gt;</a></span><span class="message">i should note that it nhc98 does actually build some files in my patched tree successfully. it's just that the custom build system they use starts out with a module that has many dependencies</span></div><div class="line" id="084649"><span class="nick" style="color:#2e2a4a"><a href="#084649" label="[08:46:49]">&lt;janus&gt;</a></span><span class="message">so the modules that i can compile, are not visible because the log just shows whatever the custom build system tries</span></div><div class="line" id="084723"><span class="nick" style="color:#2e2a4a"><a href="#084723" label="[08:47:23]">&lt;janus&gt;</a></span><span class="message">but since they rely on shipped interface files, they are indirectly actually relying on handwritten/regenerated .hi files that i have overwritten before the build starts</span></div><div class="line" id="085008"><span class="nick" style="color:#2e2a4a"><a href="#085008" label="[08:50:08]">&lt;janus&gt;</a></span><span class="message">maybe i should make mkdependHS not error, maybe that would make it choose a better build order...</span></div><div class="line" id="085051"><span class="nick" style="color:#2e2a4a"><a href="#085051" label="[08:50:51]">&lt;janus&gt;</a></span><span class="message">since i have adjusted imports to get things building with nhc, it is not surprising that this breaks mkdependHS</span></div><div class="line" id="113002"><span class="nick" style="color:#80b1d3"><a href="#113002" label="[11:30:02]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm a bit confused by cc_amd64 arithmetic, any idea what is going on? I have the following asm and C (M2) codes <a rel="nofollow" href="https://paste.debian.net/1257796/">https://paste.debian.net/1257796/</a> </span></div><div class="line" id="113020"><span class="nick" style="color:#80b1d3"><a href="#113020" label="[11:30:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: note C9 in assembly vs CA in C</span></div><div class="line" id="113056"><span class="nick" style="color:#80b1d3"><a href="#113056" label="[11:30:56]">&lt;stikonas&gt;</a></span><span class="message">(but I only need this for the second line)</span></div><div class="line" id="113124"><span class="nick" style="color:#80b1d3"><a href="#113124" label="[11:31:24]">&lt;stikonas&gt;</a></span><span class="message">is that due to signed arithmetic being applied? Even though we have unsigned type</span></div><div class="line" id="122604"><span class="nick" style="color:#6b8072"><a href="#122604" label="[12:26:04]">&lt;rekado_&gt;</a></span><span class="message">I’m giving up on GHC 4 for now.  Moving on to hbc.</span></div><div class="line" id="132635"><span class="nick" style="color:#6b8072"><a href="#132635" label="[13:26:35]">&lt;rekado_&gt;</a></span><span class="message">gah, hbc makefile says: “It is impossible to make from scratch.  You must have a running lmlc, to recompile it (of course).”</span></div><div class="line" id="132817"><span class="nick" style="color:#6b8072"><a href="#132817" label="[13:28:17]">&lt;rekado_&gt;</a></span><span class="message">lmlc is hbc</span></div><div class="line" id="133311"><span class="nick" style="color:#8dd3c7"><a href="#133311" label="[13:33:11]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well M2-Planet behaves badly when you work on 64bit values because it tries to standardize the behavior between 32bit and 64bit systems (aka would that same code produce the exact same results running on a 32bit system)</span></div><div class="line" id="133620"><span class="nick" style="color:#8dd3c7"><a href="#133620" label="[13:36:20]">&lt;oriansj&gt;</a></span><span class="message">and I thought that bit was needed to start a UEFI program, so it would probably belong in the libc.M1 anyway</span></div><div class="line" id="141236"><span class="nick" style="color:#6d2462"><a href="#141236" label="[14:12:36]">*</a></span><span class="message">rekado_ just built gofer</span></div><div class="line" id="142732"><span class="nick" style="color:#6b8072"><a href="#142732" label="[14:27:32]">&lt;rekado_&gt;</a></span><span class="message">only just noticed that the gofer license is … weird</span></div><div class="line" id="142819"><span class="nick" style="color:#6b8072"><a href="#142819" label="[14:28:19]">&lt;rekado_&gt;</a></span><span class="message">“Permission to use […] for any personal or educational use without fee is hereby granted, […]”</span></div><div class="line" id="142847"><span class="nick" style="color:#6b8072"><a href="#142847" label="[14:28:47]">&lt;rekado_&gt;</a></span><span class="message">is permission granted without fee, or is only permission granted for “use without fee”?</span></div><div class="line" id="142911"><span class="nick" style="color:#6b8072"><a href="#142911" label="[14:29:11]">&lt;rekado_&gt;</a></span><span class="message">in other words: is this a non-commercial license?</span></div><div class="line" id="142931"><span class="nick" style="color:#234e69"><a href="#142931" label="[14:29:31]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">rekado_: I think this is a non-commercial license</span></div><div class="line" id="143121"><span class="nick" style="color:#6b8072"><a href="#143121" label="[14:31:21]">&lt;rekado_&gt;</a></span><span class="message">crud</span></div><div class="line" id="143441"><span class="nick" style="color:#6c3d55"><a href="#143441" label="[14:34:41]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: hmm, I was thinking of putting some of early initialisation into bootstrap.c rather than libc-core.M1</span></div><div class="line" id="143501"><span class="nick" style="color:#6c3d55"><a href="#143501" label="[14:35:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Though maybe I can put pritocol guids into .M1</span></div><div class="line" id="144100"><span class="nick" style="color:#6d2462"><a href="#144100" label="[14:41:00]">*</a></span><span class="message">civodul wonders How Hard it could be to write a stupid Haskell implementation without type checking</span></div><div class="line" id="144809"><span class="nick" style="color:#6b8072"><a href="#144809" label="[14:48:09]">&lt;rekado_&gt;</a></span><span class="message">civodul: the thought has crossed my mind many times.</span></div><div class="line" id="144824"><span class="nick" style="color:#6b8072"><a href="#144824" label="[14:48:24]">&lt;rekado_&gt;</a></span><span class="message">we don’t need any of the fancy features.  We just trust that the GHC sources are fine.</span></div><div class="line" id="150114"><span class="nick" style="color:#d9d9d9"><a href="#150114" label="[15:01:14]">&lt;civodul&gt;</a></span><span class="message">might be interesting to team up with one of the labs/companies and invite them to be as good as OCaml in that regard :-)</span></div><div class="line" id="151544"><span class="nick" style="color:#6c3d55"><a href="#151544" label="[15:15:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed, bootstrap compiler with no checks shouldn't be super hard</span></div><div class="line" id="153741"><span class="nick" style="color:#6b8072"><a href="#153741" label="[15:37:41]">&lt;rekado_&gt;</a></span><span class="message">lml2hs exist: <a rel="nofollow" href="http://web.archive.org/web/19970305125612/http://www.cs.chalmers.se/pub/haskell/chalmers/hbc/hbc/lml2hs.tar.gz">http://web.archive.org/web/19970305125612/http://www.cs.chalmers.se/pub/haskell/chalmers/hbc/hbc/lml2hs.tar.gz</a> </span></div><div class="line" id="153806"><span class="nick" style="color:#6b8072"><a href="#153806" label="[15:38:06]">&lt;rekado_&gt;</a></span><span class="message">maybe this could be used to convert the LML sources to HS with Hugs</span></div><div class="line" id="153820"><span class="nick" style="color:#6b8072"><a href="#153820" label="[15:38:20]">&lt;rekado_&gt;</a></span><span class="message">and then use the haskellified lmlc to build lmlc</span></div><div class="line" id="153828"><span class="nick" style="color:#6b8072"><a href="#153828" label="[15:38:28]">&lt;rekado_&gt;</a></span><span class="message">and then we’d have what we need for hbc</span></div><div class="line" id="154228"><span class="nick" style="color:#6b8072"><a href="#154228" label="[15:42:28]">&lt;rekado_&gt;</a></span><span class="message">I patched ghc 4 to print more info as it starts up.  The segfault happens on the first module initialization in ghc/rts/RtsStartup.c (initModules).</span></div><div class="line" id="154713"><span class="nick" style="color:#6b8072"><a href="#154713" label="[15:47:13]">&lt;rekado_&gt;</a></span><span class="message">that’s supposed to call all the init functions for each module in turn, but it already fails on __init_PrelMain.</span></div><div class="line" id="155144"><span class="nick" style="color:#6b8072"><a href="#155144" label="[15:51:44]">&lt;rekado_&gt;</a></span><span class="message">this seems relevant: <a rel="nofollow" href="https://elephly.net/paste/1666360296.c.html">https://elephly.net/paste/1666360296.c.html</a> </span></div><div class="line" id="190601"><span class="nick" style="color:#6b8072"><a href="#190601" label="[19:06:01]">&lt;rekado_&gt;</a></span><span class="message">allocation in the RTS has changed a little bit between GHC 4 and 5.</span></div><div class="line" id="190641"><span class="nick" style="color:#6b8072"><a href="#190641" label="[19:06:41]">&lt;rekado_&gt;</a></span><span class="message">but I don’t think this is the problem here</span></div><div class="line" id="200213"><span class="nick" style="color:#80b1d3"><a href="#200213" label="[20:02:13]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I think I'll end up using the following trick to create 64-bit constants in M2: (0x3B7269C9 &lt;&lt; 32) + 0x50003F8E + 0x50000000 (with the comment explaining why we have double sum)</span></div><div class="line" id="200232"><span class="nick" style="color:#80b1d3"><a href="#200232" label="[20:02:32]">&lt;stikonas&gt;</a></span><span class="message">restricting to 31-bit constants works and let's me create 128-bit GUIDs</span></div><div class="line" id="200307"><span class="nick" style="color:#80b1d3"><a href="#200307" label="[20:03:07]">&lt;stikonas&gt;</a></span><span class="message">and it seems nicer to offload as much of UEFI initialization to C as possible...</span></div><div class="line" id="223711"><span class="nick" style="color:#6d2462"><a href="#223711" label="[22:37:11]">*</a></span><span class="message">rekado_ learns how to use gdb</span></div><div class="line" id="231654"><span class="nick" style="color:#8dd3c7"><a href="#231654" label="[23:16:54]">&lt;oriansj&gt;</a></span><span class="message">rekado_: here are some gdb notes xz'd and uuencoded <a rel="nofollow" href="https://paste.debian.net/1257896/">https://paste.debian.net/1257896/</a> </span></div><div class="line" id="231906"><span class="nick" style="color:#8dd3c7"><a href="#231906" label="[23:19:06]">&lt;oriansj&gt;</a></span><span class="message">(org-mode text file of course)</span></div><div class="line" id="233158"><span class="nick" style="color:#8dd3c7"><a href="#233158" label="[23:31:58]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well as long as it is only done during runtime, I guess that is fine.</span></div><div class="line" id="233539"><span class="nick" style="color:#80b1d3"><a href="#233539" label="[23:35:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what do you mean during runtime?</span></div><div class="line" id="233701"><span class="nick" style="color:#8dd3c7"><a href="#233701" label="[23:37:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: as is in that block executed during runtime and wouldn't result in different compile results for 32bit hosts doing a build of the binary</span></div><div class="line" id="233730"><span class="nick" style="color:#8dd3c7"><a href="#233730" label="[23:37:30]">&lt;oriansj&gt;</a></span><span class="message">^as is in that block^as in that block is^</span></div><div class="line" id="233738"><span class="nick" style="color:#80b1d3"><a href="#233738" label="[23:37:38]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="233756"><span class="nick" style="color:#80b1d3"><a href="#233756" label="[23:37:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, we want 32-bit M2-Planet to be able to build 64-bit binaries</span></div><div class="line" id="233815"><span class="nick" style="color:#8dd3c7"><a href="#233815" label="[23:38:15]">&lt;oriansj&gt;</a></span><span class="message">and have them be bit for bit identicial</span></div><div class="line" id="233833"><span class="nick" style="color:#8dd3c7"><a href="#233833" label="[23:38:33]">&lt;oriansj&gt;</a></span><span class="message">^identicial^identical^</span></div><div class="line" id="233837"><span class="nick" style="color:#80b1d3"><a href="#233837" label="[23:38:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, got it</span></div><div class="line" id="233908"><span class="nick" style="color:#6b8072"><a href="#233908" label="[23:39:08]">&lt;rekado_&gt;</a></span><span class="message">oriansj: thanks for the notes!</span></div><div class="line" id="233912"><span class="nick" style="color:#80b1d3"><a href="#233912" label="[23:39:12]">&lt;stikonas&gt;</a></span><span class="message">I&quot;ll have to double check it, but I think it should be fine. I'm just adding __init and __cleanup functions in addition to main</span></div><div class="line" id="233928"><span class="nick" style="color:#80b1d3"><a href="#233928" label="[23:39:28]">&lt;stikonas&gt;</a></span><span class="message">something like:  <a rel="nofollow" href="https://paste.debian.net/1257899/">https://paste.debian.net/1257899/</a>  ( ignore some debug stuff I have there)</span></div><div class="line" id="234008"><span class="nick" style="color:#6b8072"><a href="#234008" label="[23:40:08]">&lt;rekado_&gt;</a></span><span class="message">stumbled upon more undocumented debug output for the RTS.  Tells me where it’s jumping to in its custom stack.</span></div><div class="line" id="234015"><span class="nick" style="color:#8dd3c7"><a href="#234015" label="[23:40:15]">&lt;oriansj&gt;</a></span><span class="message">yeah that looks like it should be fine</span></div><div class="line" id="234111"><span class="nick" style="color:#80b1d3"><a href="#234111" label="[23:41:11]">&lt;stikonas&gt;</a></span><span class="message">I'm now thinking how strict should I be while tokenizing load_options into argv[] (i.e. should I assume only single spaces or now)</span></div><div class="line" id="234118"><span class="nick" style="color:#80b1d3"><a href="#234118" label="[23:41:18]">&lt;stikonas&gt;</a></span><span class="message">s/now/not/</span></div><div class="line" id="234118"><span class="nick" style="color:#8dd3c7"><a href="#234118" label="[23:41:18]">&lt;oriansj&gt;</a></span><span class="message">and you'll need to also include _exit and decide if that calls clean up as well (which may impact forked processes)</span></div><div class="line" id="234120"><span class="nick" style="color:#6b8072"><a href="#234120" label="[23:41:20]">&lt;rekado_&gt;</a></span><span class="message">and I noticed that when the RTS is built with -unreg (i.e. with -DUSE_MININTERPRETER) it will always segfault upon *returning* from all init jumps.</span></div><div class="line" id="234142"><span class="nick" style="color:#80b1d3"><a href="#234142" label="[23:41:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, right now I have __exit too but without cleanup</span></div><div class="line" id="234218"><span class="nick" style="color:#80b1d3"><a href="#234218" label="[23:42:18]">&lt;stikonas&gt;</a></span><span class="message">I just have mov_rsp,[rip+DWORD] %__return_address and ret</span></div><div class="line" id="234223"><span class="nick" style="color:#6b8072"><a href="#234223" label="[23:42:23]">&lt;rekado_&gt;</a></span><span class="message">so I built without -unreg (and with GhcLibWays= instead of GhcLibWays=u) and this uses architecture-dependent assembly code leading to a much later segfault.</span></div><div class="line" id="234230"><span class="nick" style="color:#8dd3c7"><a href="#234230" label="[23:42:30]">&lt;oriansj&gt;</a></span><span class="message">(sorry I ment to say :FUNCTION__exit)</span></div><div class="line" id="234256"><span class="nick" style="color:#80b1d3"><a href="#234256" label="[23:42:56]">&lt;stikonas&gt;</a></span><span class="message">yes, that's FUNCTION__exit. C version for now is just goto FUNCTION__exit;</span></div><div class="line" id="234320"><span class="nick" style="color:#80b1d3"><a href="#234320" label="[23:43:20]">&lt;stikonas&gt;</a></span><span class="message">I'll check how M2-Planet and M1 use exit...</span></div><div class="line" id="234356"><span class="nick" style="color:#8dd3c7"><a href="#234356" label="[23:43:56]">&lt;oriansj&gt;</a></span><span class="message">well :FUNCTION_exit does cleanup and :FUNCTION__exit do no clean up and just direct syscall to exit</span></div><div class="line" id="234507"><span class="nick" style="color:#80b1d3"><a href="#234507" label="[23:45:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, that makes sense, I'll do cleanup there though maybe after I get command line arguments and fopen working</span></div><div class="line" id="234521"><span class="nick" style="color:#80b1d3"><a href="#234521" label="[23:45:21]">&lt;stikonas&gt;</a></span><span class="message">(and this is still just the bootstrap M2libc...)</span></div><div class="line" id="234601"><span class="nick" style="color:#80b1d3"><a href="#234601" label="[23:46:01]">&lt;stikonas&gt;</a></span><span class="message">took me some time to sort out user stack stack __open_protocol functions but now they are working</span></div><div class="line" id="234607"><span class="nick" style="color:#8dd3c7"><a href="#234607" label="[23:46:07]">&lt;oriansj&gt;</a></span><span class="message">well it shouldn't take much extra logic to drop extra whitesapce and would make it more robust against bad user input</span></div><div class="line" id="234804"><span class="nick" style="color:#80b1d3"><a href="#234804" label="[23:48:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, I've already added it to argc counting</span></div><div class="line" id="234815"><span class="nick" style="color:#80b1d3"><a href="#234815" label="[23:48:15]">&lt;stikonas&gt;</a></span><span class="message">(haven't worked on argv yet)</span></div><div class="line" id="234857"><span class="nick" style="color:#8dd3c7"><a href="#234857" label="[23:48:57]">&lt;oriansj&gt;</a></span><span class="message">and there is the question if you want to setup envp</span></div><div class="line" id="234901"><span class="nick" style="color:#80b1d3"><a href="#234901" label="[23:49:01]">&lt;stikonas&gt;</a></span><span class="message">well, it's easier to work with cc_* dialect than in assembly or hex</span></div><div class="line" id="234914"><span class="nick" style="color:#8dd3c7"><a href="#234914" label="[23:49:14]">&lt;oriansj&gt;</a></span><span class="message">or just set a null</span></div><div class="line" id="234930"><span class="nick" style="color:#80b1d3"><a href="#234930" label="[23:49:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I thought about it and I think yes, but not yet, maybe for full libc</span></div><div class="line" id="234934"><span class="nick" style="color:#80b1d3"><a href="#234934" label="[23:49:34]">&lt;stikonas&gt;</a></span><span class="message">nothing uses it yet</span></div><div class="line" id="235004"><span class="nick" style="color:#80b1d3"><a href="#235004" label="[23:50:04]">&lt;stikonas&gt;</a></span><span class="message">but we'll need it for kaem</span></div><div class="line" id="235004"><span class="nick" style="color:#8dd3c7"><a href="#235004" label="[23:50:04]">&lt;oriansj&gt;</a></span><span class="message">kaem can work with a NULL</span></div><div class="line" id="235004"><span class="nick" style="color:#80b1d3"><a href="#235004" label="[23:50:04]">&lt;stikonas&gt;</a></span><span class="message">and we need to pack that stuff into load_options</span></div><div class="line" id="235016"><span class="nick" style="color:#80b1d3"><a href="#235016" label="[23:50:16]">&lt;stikonas&gt;</a></span><span class="message">but it needs to pass it to child binaries</span></div><div class="line" id="235202"><span class="nick" style="color:#80b1d3"><a href="#235202" label="[23:52:02]">&lt;stikonas&gt;</a></span><span class="message">oriansj: how do you think we should encode that?</span></div><div class="line" id="235231"><span class="nick" style="color:#80b1d3"><a href="#235231" label="[23:52:31]">&lt;stikonas&gt;</a></span><span class="message">load_options=&quot;ENV=env applications.efi arguments...&quot;?</span></div><div class="line" id="235307"><span class="nick" style="color:#80b1d3"><a href="#235307" label="[23:53:07]">&lt;stikonas&gt;</a></span><span class="message">of course that will only work with kaem and not UEFI shell but I guess that's fine</span></div><div class="line" id="235427"><span class="nick" style="color:#8dd3c7"><a href="#235427" label="[23:54:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'll need to think about that a bit more</span></div><div class="line" id="235444"><span class="nick" style="color:#80b1d3"><a href="#235444" label="[23:54:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I haven't thought too much about it yet...</span></div><div class="line" id="235545"><span class="nick" style="color:#80b1d3"><a href="#235545" label="[23:55:45]">&lt;stikonas&gt;</a></span><span class="message">but I think breaking compatibility with UEFI shell at that stage should be fine</span></div><div class="line" id="235557"><span class="nick" style="color:#8dd3c7"><a href="#235557" label="[23:55:57]">&lt;oriansj&gt;</a></span><span class="message">we could reserve ::: as a separater for kaem</span></div><div class="line" id="235601"><span class="nick" style="color:#80b1d3"><a href="#235601" label="[23:56:01]">&lt;stikonas&gt;</a></span><span class="message">especially if we are replacing \ with /</span></div><div class="line" id="235620"><span class="nick" style="color:#80b1d3"><a href="#235620" label="[23:56:20]">&lt;stikonas&gt;</a></span><span class="message">we could do that too...</span></div><div class="line" id="235653"><span class="nick" style="color:#80b1d3"><a href="#235653" label="[23:56:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, let's worry about it after I get bootstrap M2libc working</span></div><div class="line" id="235706"><span class="nick" style="color:#80b1d3"><a href="#235706" label="[23:57:06]">&lt;stikonas&gt;</a></span><span class="message">that can be used to build M2.efi</span></div><div class="line" id="235707"><span class="nick" style="color:#8dd3c7"><a href="#235707" label="[23:57:07]">&lt;oriansj&gt;</a></span><span class="message">so kaem would do: program arg1 arg2 argN ::: envp1 envp2 envpN</span></div><div class="line" id="235719"><span class="nick" style="color:#80b1d3"><a href="#235719" label="[23:57:19]">&lt;stikonas&gt;</a></span><span class="message">then I can submit it for review</span></div><div class="line" id="235730"><span class="nick" style="color:#80b1d3"><a href="#235730" label="[23:57:30]">&lt;stikonas&gt;</a></span><span class="message">but yes ::: sounds alright</span></div><br /></div></body></html>