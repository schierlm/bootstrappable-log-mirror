<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000552"><span class="nick" style="color:#389600"><a href="#000552" label="[00:05:52]">&lt;warren&gt;</a></span><span class="message">vagrantc: <a rel="nofollow" href="https://www.reddit.com/r/rust/comments/5ag60z/how_do_i_bootstrap_rust_to_crosscompile_for_a_new/">https://www.reddit.com/r/rust/comments/5ag60z/how_do_i_bootstrap_rust_to_crosscompile_for_a_new/</a>   Would it be unacceptable for Guix to cross-compile x86_64 rustc 1.37 to the other archs? You'd skip a month+ of build time (not including bug fixes and rebuild attempts)</span></div><div class="line" id="000611"><span class="nick" style="color:#389600"><a href="#000611" label="[00:06:11]">&lt;warren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/japaric/rust-cross">https://github.com/japaric/rust-cross</a> </span></div><div class="line" id="001006"><span class="nick" style="color:#389600"><a href="#001006" label="[00:10:06]">&lt;warren&gt;</a></span><span class="message">It seems this should be acceptable to Guix because it's from the clean mrustc bootstrap</span></div><div class="line" id="001124"><span class="nick" style="color:#8dd3c7"><a href="#001124" label="[00:11:24]">&lt;vagrantc&gt;</a></span><span class="message">i think the core should be internally consistant, bootstrappability-wise</span></div><div class="line" id="001140"><span class="nick" style="color:#8dd3c7"><a href="#001140" label="[00:11:40]">&lt;vagrantc&gt;</a></span><span class="message">but i'm not sure what more involved opinions would say :)</span></div><div class="line" id="002412"><span class="nick" style="color:#389600"><a href="#002412" label="[00:24:12]">&lt;warren&gt;</a></span><span class="message">I'm told that mrustc bootstrapped rustc has been shown to be capable of being bit-for-bit identical to upstream bootstrapped rustc. That could be demonstrated here again.</span></div><div class="line" id="004256"><span class="nick" style="color:#2e2a4a"><a href="#004256" label="[00:42:56]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: the file-system bootstrap problem is all tools for making file-systems only run on operating systems and all known operating systems require an existing file-system to run. So to bootstrap any known operating system you need the ability to make a file-system (that is supported by that operating system) and populate it with the kernel and other essential pieces before you can use said operating system. It is a problem because no</span></div><div class="line" id="004256"><span class="nick" style="color:#2e2a4a"><a href="#004256" label="[00:42:56]">&lt;OriansJ&gt;</a></span><span class="message">one has made those tools run on bare metal yet.</span></div><div class="line" id="005135"><span class="nick" style="color:#2e2a4a"><a href="#005135" label="[00:51:35]">&lt;OriansJ&gt;</a></span><span class="message">warren: to answer your question about stage0; we are a single program away (mes-m2)</span></div><div class="line" id="005315"><span class="nick" style="color:#2e2a4a"><a href="#005315" label="[00:53:15]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 already is buildable via various C compilers but there a couple C features that need to be added to M2-Planet and some changes to mes-m2 to get it buildable via M2-Plaet. Once that is done the path from stage0 to gcc will be done</span></div><div class="line" id="005522"><span class="nick" style="color:#389600"><a href="#005522" label="[00:55:22]">&lt;warren&gt;</a></span><span class="message">nice!</span></div><div class="line" id="005524"><span class="nick" style="color:#2e2a4a"><a href="#005524" label="[00:55:24]">&lt;OriansJ&gt;</a></span><span class="message">warren: in case you haven't seen it yet <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="005600"><span class="nick" style="color:#2e2a4a"><a href="#005600" label="[00:56:00]">&lt;OriansJ&gt;</a></span><span class="message">full bootstrap from hex0 to M2-Planet + mescc-tools</span></div><div class="line" id="005618"><span class="nick" style="color:#389600"><a href="#005618" label="[00:56:18]">&lt;warren&gt;</a></span><span class="message">OriansJ: please confirm is my understanding correct ... stage0 starts as a 1KB hex assembler but it needs to run on an existing OS that handles the filesystem?</span></div><div class="line" id="005742"><span class="nick" style="color:#2e2a4a"><a href="#005742" label="[00:57:42]">&lt;OriansJ&gt;</a></span><span class="message">warren: 357byte hex0 assembler for the linux port 250bytes for bare metal</span></div><div class="line" id="005755"><span class="nick" style="color:#389600"><a href="#005755" label="[00:57:55]">&lt;warren&gt;</a></span><span class="message">ahh</span></div><div class="line" id="005814"><span class="nick" style="color:#2e2a4a"><a href="#005814" label="[00:58:14]">&lt;OriansJ&gt;</a></span><span class="message">bare metal does not depend on any bios or firmware</span></div><div class="line" id="005836"><span class="nick" style="color:#389600"><a href="#005836" label="[00:58:36]">&lt;warren&gt;</a></span><span class="message">so usually qemu?</span></div><div class="line" id="005858"><span class="nick" style="color:#2e2a4a"><a href="#005858" label="[00:58:58]">&lt;OriansJ&gt;</a></span><span class="message">I wrote a hardware simulator: <a rel="nofollow" href="https://github.com/oriansj/knight-vm">https://github.com/oriansj/knight-vm</a> </span></div><div class="line" id="005948"><span class="nick" style="color:#2e2a4a"><a href="#005948" label="[00:59:48]">&lt;OriansJ&gt;</a></span><span class="message">that I am going to implement in first FPGA and then in TTL</span></div><div class="line" id="010008"><span class="nick" style="color:#2e2a4a"><a href="#010008" label="[01:00:08]">&lt;OriansJ&gt;</a></span><span class="message">Thus using librehardware as an absolute basis of trust</span></div><div class="line" id="010050"><span class="nick" style="color:#389600"><a href="#010050" label="[01:00:50]">&lt;warren&gt;</a></span><span class="message">It will be a huge achievement</span></div><div class="line" id="010115"><span class="nick" style="color:#2e2a4a"><a href="#010115" label="[01:01:15]">&lt;OriansJ&gt;</a></span><span class="message">but not to get ahead of myself, here is what the current path looks like: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="010612"><span class="nick" style="color:#2e2a4a"><a href="#010612" label="[01:06:12]">&lt;OriansJ&gt;</a></span><span class="message">I however am currently planning on pulling mes.c's dependence on mescc-tools to reduce the number of binaries in the guix bootstrap down to exactly 1 (mes-m2) as when it is done it will be able to directly run the mescc-tools scheme version, MesCC and ideally guix. Thus reducing the distributed binary down to 200KB with a 357byte bootstrap</span></div><div class="line" id="011121"><span class="nick" style="color:#2e2a4a"><a href="#011121" label="[01:11:21]">&lt;OriansJ&gt;</a></span><span class="message">warren: also one thing you might want to notice is that M2-Planet + mescc-tools currently is not only reproducible but also cross-platform reproducible (aka aarch64, armv7l, x86, knight and amd64 hosts building all of the platforms produce bit for bit identical binaries)</span></div><div class="line" id="011306"><span class="nick" style="color:#389600"><a href="#011306" label="[01:13:06]">&lt;warren&gt;</a></span><span class="message">So theoretically after the bootstrap from this to gcc is complete, it would be true that it is proven to not be compromised?  (at least not by anything outside of the source code)</span></div><div class="line" id="011539"><span class="nick" style="color:#2e2a4a"><a href="#011539" label="[01:15:39]">&lt;OriansJ&gt;</a></span><span class="message">warren: well one has to validate their hex0 binary corresponds with the hex0 impementation of that binary (takes about 40 minutes) then every step of after that can be inspected using only source code as none of the tools in stage0 use anything but passed input (source code)</span></div><div class="line" id="011632"><span class="nick" style="color:#2e2a4a"><a href="#011632" label="[01:16:32]">&lt;OriansJ&gt;</a></span><span class="message">as otherwise the behavior wouldn't be identical between the linux port and the bare metal port</span></div><div class="line" id="011758"><span class="nick" style="color:#2e2a4a"><a href="#011758" label="[01:17:58]">&lt;OriansJ&gt;</a></span><span class="message">and the hardware only assumes 3 serial ports, 1 cpu and a specified amount of RAM</span></div><div class="line" id="011835"><span class="nick" style="color:#2e2a4a"><a href="#011835" label="[01:18:35]">&lt;OriansJ&gt;</a></span><span class="message">(no firmware, no bios, nothing but pure hardware)</span></div><div class="line" id="012015"><span class="nick" style="color:#2e2a4a"><a href="#012015" label="[01:20:15]">&lt;OriansJ&gt;</a></span><span class="message">(on the bare metal port as the linux port just uses file handles per standard posix calls)</span></div><div class="line" id="012249"><span class="nick" style="color:#2e2a4a"><a href="#012249" label="[01:22:49]">&lt;OriansJ&gt;</a></span><span class="message">and if you notice; stage0 doesn't even depend upon trusting existing source code files [It bootstraps SET to allow read/create/write of source files] Thus one can know what binaries are being given</span></div><div class="line" id="012445"><span class="nick" style="color:#2e2a4a"><a href="#012445" label="[01:24:45]">&lt;OriansJ&gt;</a></span><span class="message">now there is always the possibility that the hardware itself or the posix kernel it is running on could compromise the binaries but I have engineered it such that such a compromise can easily be discovered once one has a trusted kernel and trusted hardware</span></div><div class="line" id="012641"><span class="nick" style="color:#2e2a4a"><a href="#012641" label="[01:26:41]">&lt;OriansJ&gt;</a></span><span class="message">as the steps of trusted hardware with a trusted kernel should produce identical binaries with all other hardware in the world. If there is a deviation of even a single byte; we know something is wrong.</span></div><div class="line" id="012824"><span class="nick" style="color:#2e2a4a"><a href="#012824" label="[01:28:24]">&lt;OriansJ&gt;</a></span><span class="message">warren: hopefully that answers your question exactly.</span></div><div class="line" id="012853"><span class="nick" style="color:#389600"><a href="#012853" label="[01:28:53]">&lt;warren&gt;</a></span><span class="message">OriansJ: yes very interesting</span></div><div class="line" id="013918"><span class="nick" style="color:#2e2a4a"><a href="#013918" label="[01:39:18]">&lt;OriansJ&gt;</a></span><span class="message">also you'll notice the entire x86 bootstrap is only a total of 7,929 lines to audit before M2-Planet self-hosts itself and mescc-tools from the much easier to audit C code.</span></div><div class="line" id="014137"><span class="nick" style="color:#2e2a4a"><a href="#014137" label="[01:41:37]">&lt;OriansJ&gt;</a></span><span class="message">(4974 of which is the C compiler written in assembly and 869 is the macro assembler written in hex2) which includes the 330line kaem.run script (which is just the steps of build everything)</span></div><div class="line" id="014255"><span class="nick" style="color:#2e2a4a"><a href="#014255" label="[01:42:55]">&lt;OriansJ&gt;</a></span><span class="message">I certainly hope <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/cc_x86.M1">https://github.com/oriansj/mescc-tools-seed/blob/master/cc_x86.M1</a>  is quite easy to follow</span></div><div class="line" id="020105"><span class="nick" style="color:#8dd3c7"><a href="#020105" label="[02:01:05]">&lt;vagrantc&gt;</a></span><span class="message">yup, guix build rust failed at build rust 1.19</span></div><div class="line" id="020150"><span class="nick" style="color:#8dd3c7"><a href="#020150" label="[02:01:50]">&lt;vagrantc&gt;</a></span><span class="message">ah well.</span></div><div class="line" id="020227"><span class="nick" style="color:#389600"><a href="#020227" label="[02:02:27]">&lt;warren&gt;</a></span><span class="message">vagrantc: who to ask if cross-build from one arch to another would be acceptable, because it's impossible otherwise?</span></div><div class="line" id="020331"><span class="nick" style="color:#8dd3c7"><a href="#020331" label="[02:03:31]">&lt;vagrantc&gt;</a></span><span class="message">warren: probably ask in #guix civodul or rekado or on guix-devel@gnu.org</span></div><div class="line" id="020346"><span class="nick" style="color:#80b1d3"><a href="#020346" label="[02:03:46]">*</a></span><span class="message">vagrantc waves</span></div><div class="line" id="090404"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="215136"><span class="nick" style="color:#389600"><a href="#215136" label="[21:51:36]">&lt;warren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.reddit.com/r/rust/comments/7lu6di/mrustc_alternate_rust_compiler_in_c_now_broken/">https://www.reddit.com/r/rust/comments/7lu6di/mrustc_alternate_rust_compiler_in_c_now_broken/</a>   Somebody bootstrapped x86_64 rust from mrustc and got it identical to rust bootstrapped from upstream.</span></div><div class="line" id="222430"><span class="nick" style="color:#2e2a4a"><a href="#222430" label="[22:24:30]">&lt;OriansJ&gt;</a></span><span class="message">janneke: after much thought; I am going to be removing a couple of the implicit assumptions of mes.c from mes-m2</span></div><div class="line" id="222505"><span class="nick" style="color:#6d2462"><a href="#222505" label="[22:25:05]">&lt;janneke&gt;</a></span><span class="message">OriansJ: what have you seen, been thinking about?</span></div><div class="line" id="222549"><span class="nick" style="color:#2e2a4a"><a href="#222549" label="[22:25:49]">&lt;OriansJ&gt;</a></span><span class="message">first I am pulling the loading of boot-0.scm and removing the entire argv chunk out</span></div><div class="line" id="222608"><span class="nick" style="color:#2e2a4a"><a href="#222608" label="[22:26:08]">&lt;OriansJ&gt;</a></span><span class="message">This instantly breaks all tests</span></div><div class="line" id="222619"><span class="nick" style="color:#2e2a4a"><a href="#222619" label="[22:26:19]">&lt;OriansJ&gt;</a></span><span class="message">and the default repl doesn't echo</span></div><div class="line" id="222638"><span class="nick" style="color:#2e2a4a"><a href="#222638" label="[22:26:38]">&lt;OriansJ&gt;</a></span><span class="message">So, it is going to be ugly for a bit until I fix it</span></div><div class="line" id="222917"><span class="nick" style="color:#6d2462"><a href="#222917" label="[22:29:17]">&lt;janneke&gt;</a></span><span class="message">Ah, good.</span></div><div class="line" id="222922"><span class="nick" style="color:#2e2a4a"><a href="#222922" label="[22:29:22]">&lt;OriansJ&gt;</a></span><span class="message">So the new main is looking something like this: <a rel="nofollow" href="https://paste.debian.net/1104522/">https://paste.debian.net/1104522/</a> </span></div><div class="line" id="223123"><span class="nick" style="color:#2e2a4a"><a href="#223123" label="[22:31:23]">&lt;OriansJ&gt;</a></span><span class="message">Then I am going to rework your lisp reader to first read the S-expression as a text block (allowing for easy inspection and debugging) before tokenization and manipulation</span></div><div class="line" id="223220"><span class="nick" style="color:#2e2a4a"><a href="#223220" label="[22:32:20]">&lt;OriansJ&gt;</a></span><span class="message">That way the entire reader will be easier to extend and understand (I'm aiming to make it as easy to follow as: <a rel="nofollow" href="https://github.com/oriansj/Slow_Lisp/blob/master/lisp_read.c">https://github.com/oriansj/Slow_Lisp/blob/master/lisp_read.c</a> </span></div><div class="line" id="223250"><span class="nick" style="color:#2e2a4a"><a href="#223250" label="[22:32:50]">&lt;OriansJ&gt;</a></span><span class="message">Then I'll figure out what to do from there</span></div><div class="line" id="223311"><span class="nick" style="color:#6d2462"><a href="#223311" label="[22:33:11]">&lt;janneke&gt;</a></span><span class="message">i have been rewriting the boot sequence so many times...</span></div><div class="line" id="223334"><span class="nick" style="color:#2e2a4a"><a href="#223334" label="[22:33:34]">&lt;OriansJ&gt;</a></span><span class="message">looks like I can put it in a form where it can stick for a long long time</span></div><div class="line" id="223337"><span class="nick" style="color:#6d2462"><a href="#223337" label="[22:33:37]">&lt;janneke&gt;</a></span><span class="message">this was the best i could come up with, but i also was fed-up with changing it and i was still not happy with it</span></div><div class="line" id="223457"><span class="nick" style="color:#6d2462"><a href="#223457" label="[22:34:57]">&lt;janneke&gt;</a></span><span class="message">the reader also saw quite some rewrites -- i had a minimal s-expression reader in C and then a full scheme reader (quote, # etc) in scheme</span></div><div class="line" id="223506"><span class="nick" style="color:#2e2a4a"><a href="#223506" label="[22:35:06]">&lt;OriansJ&gt;</a></span><span class="message">well, I hope I can make it to the standard you will be happy with ^_^</span></div><div class="line" id="223513"><span class="nick" style="color:#6d2462"><a href="#223513" label="[22:35:13]">&lt;janneke&gt;</a></span><span class="message">to try to make a minimal C core</span></div><div class="line" id="223524"><span class="nick" style="color:#6d2462"><a href="#223524" label="[22:35:24]">&lt;janneke&gt;</a></span><span class="message">far too clever, not really helping...</span></div><div class="line" id="223551"><span class="nick" style="color:#6d2462"><a href="#223551" label="[22:35:51]">&lt;janneke&gt;</a></span><span class="message">it's so amazing that you are looking at this, really</span></div><div class="line" id="223643"><span class="nick" style="color:#2e2a4a"><a href="#223643" label="[22:36:43]">&lt;OriansJ&gt;</a></span><span class="message">I said I would, I just had to overcome the wall of &quot;I have no idea how this works&quot; and be in a place where failing is easier and faster</span></div><div class="line" id="223700"><span class="nick" style="color:#6d2462"><a href="#223700" label="[22:37:00]">&lt;janneke&gt;</a></span><span class="message">btw, what's the plan with temp.c/good2bad and the weird capitalizet GetSCM etc?</span></div><div class="line" id="223713"><span class="nick" style="color:#6d2462"><a href="#223713" label="[22:37:13]">&lt;janneke&gt;</a></span><span class="message">yes, i can imagine</span></div><div class="line" id="223715"><span class="nick" style="color:#2e2a4a"><a href="#223715" label="[22:37:15]">&lt;OriansJ&gt;</a></span><span class="message">I am going to eliminate it entirely</span></div><div class="line" id="223734"><span class="nick" style="color:#6d2462"><a href="#223734" label="[22:37:34]">&lt;janneke&gt;</a></span><span class="message">bad2good! :)</span></div><div class="line" id="223808"><span class="nick" style="color:#2e2a4a"><a href="#223808" label="[22:38:08]">&lt;OriansJ&gt;</a></span><span class="message">it was just a placeholder so I could get mes.c into a place I could sorta figure out what I was doing</span></div><div class="line" id="223810"><span class="nick" style="color:#6d2462"><a href="#223810" label="[22:38:10]">&lt;janneke&gt;</a></span><span class="message">that's what i thought, i just wondered why it was &quot;lingering&quot; around still</span></div><div class="line" id="223816"><span class="nick" style="color:#6d2462"><a href="#223816" label="[22:38:16]">&lt;janneke&gt;</a></span><span class="message">yes</span></div><div class="line" id="223836"><span class="nick" style="color:#2e2a4a"><a href="#223836" label="[22:38:36]">&lt;OriansJ&gt;</a></span><span class="message">because I was still trying to figure mes.c out</span></div><div class="line" id="223849"><span class="nick" style="color:#6d2462"><a href="#223849" label="[22:38:49]">&lt;janneke&gt;</a></span><span class="message">ah -- figures</span></div><div class="line" id="223908"><span class="nick" style="color:#2e2a4a"><a href="#223908" label="[22:39:08]">&lt;OriansJ&gt;</a></span><span class="message">Now I am at the stage of building up breaking assumptions</span></div><div class="line" id="223933"><span class="nick" style="color:#2e2a4a"><a href="#223933" label="[22:39:33]">&lt;OriansJ&gt;</a></span><span class="message">I'll be writing tiny tests and slowly getting everything to a place I like</span></div><div class="line" id="224030"><span class="nick" style="color:#2e2a4a"><a href="#224030" label="[22:40:30]">&lt;OriansJ&gt;</a></span><span class="message">now that I am able to use cgdb effectively with mes-m2</span></div><div class="line" id="224057"><span class="nick" style="color:#2e2a4a"><a href="#224057" label="[22:40:57]">&lt;OriansJ&gt;</a></span><span class="message">I can start drilling down into individual primitives and ensure my assumptions about behavior matches guile</span></div><div class="line" id="224118"><span class="nick" style="color:#6d2462"><a href="#224118" label="[22:41:18]">&lt;janneke&gt;</a></span><span class="message">ah yes, i have been giving that some thought...</span></div><div class="line" id="224220"><span class="nick" style="color:#6d2462"><a href="#224220" label="[22:42:20]">&lt;janneke&gt;</a></span><span class="message">actually, guile is built using (a heavily modified) psyntax, are you familiar with that setup?</span></div><div class="line" id="224305"><span class="nick" style="color:#2e2a4a"><a href="#224305" label="[22:43:05]">&lt;OriansJ&gt;</a></span><span class="message">to a small degree</span></div><div class="line" id="224315"><span class="nick" style="color:#6d2462"><a href="#224315" label="[22:43:15]">&lt;janneke&gt;</a></span><span class="message">i tried some things with psyntax, but did not fully get it working and also it's not bootstrappable that i know of</span></div><div class="line" id="224400"><span class="nick" style="color:#6d2462"><a href="#224400" label="[22:44:00]">&lt;janneke&gt;</a></span><span class="message">so it's about 30,000 lines of pretty primitive scheme, lambdas mostly, gensym and some hooks to register flavours of variable</span></div><div class="line" id="224442"><span class="nick" style="color:#6d2462"><a href="#224442" label="[22:44:42]">&lt;janneke&gt;</a></span><span class="message">so...if we really want to go 100% guile compatible, we should aim to load guile's generated psyntax.scm</span></div><div class="line" id="224454"><span class="nick" style="color:#6d2462"><a href="#224454" label="[22:44:54]">&lt;janneke&gt;</a></span><span class="message">i'm not sure...</span></div><div class="line" id="224457"><span class="nick" style="color:#2e2a4a"><a href="#224457" label="[22:44:57]">&lt;OriansJ&gt;</a></span><span class="message">I was thinking of doing one better</span></div><div class="line" id="224539"><span class="nick" style="color:#2e2a4a"><a href="#224539" label="[22:45:39]">&lt;OriansJ&gt;</a></span><span class="message">be able to run the human written guile used to generate psyntax.scm and thus eliminate that bootstrap problem</span></div><div class="line" id="224540"><span class="nick" style="color:#6d2462"><a href="#224540" label="[22:45:40]">&lt;janneke&gt;</a></span><span class="message">i went another route, only supporting the simpler syntax-rules and and create guile compatibility &quot;by hand&quot; in the .c and .scm libraries</span></div><div class="line" id="224626"><span class="nick" style="color:#6d2462"><a href="#224626" label="[22:46:26]">&lt;janneke&gt;</a></span><span class="message">yeah, i would like that; and like to help</span></div><div class="line" id="224726"><span class="nick" style="color:#6d2462"><a href="#224726" label="[22:47:26]">&lt;janneke&gt;</a></span><span class="message">but first i'm going to concentrate on the scheme-only bootstrap with guile</span></div><div class="line" id="224822"><span class="nick" style="color:#2e2a4a"><a href="#224822" label="[22:48:22]">&lt;OriansJ&gt;</a></span><span class="message">and I'll try to finish up the M1 in scheme this weekend; so you can use that to eliminate all binaries except guile from the bootstrap binaries</span></div><div class="line" id="225001"><span class="nick" style="color:#2e2a4a"><a href="#225001" label="[22:50:01]">&lt;OriansJ&gt;</a></span><span class="message">thus we will have a single binary bootstrap for you to clean up while I have time to hammer through mes-m2 to the point of it being able to be built by M2-Planet and then I'll work to extend it to the degree we can be a drop in replacement for guile</span></div><div class="line" id="225724"><span class="nick" style="color:#6d2462"><a href="#225724" label="[22:57:24]">&lt;janneke&gt;</a></span><span class="message">beautiful!</span></div><div class="line" id="232028"><span class="nick" style="color:#2e2a4a"><a href="#232028" label="[23:20:28]">&lt;OriansJ&gt;</a></span><span class="message">So what I am going to do is commit the currently ugly state, so you'll be able to see and feel what I am currently playing with (along with anyone else who wants to get dirty)</span></div><div class="line" id="232648"><span class="nick" style="color:#2e2a4a"><a href="#232648" label="[23:26:48]">&lt;OriansJ&gt;</a></span><span class="message">and breaking change is up</span></div><div class="line" id="232906"><span class="nick" style="color:#2e2a4a"><a href="#232906" label="[23:29:06]">&lt;OriansJ&gt;</a></span><span class="message">(I've tagged the commit prior to the change should we wish to later use it as a placeholder for mes-m2)</span></div><div class="line" id="233646"><span class="nick" style="color:#6d2462"><a href="#233646" label="[23:36:46]">&lt;janneke&gt;</a></span><span class="message">that's great, thanks</span></div><div class="line" id="234037"><span class="nick" style="color:#2e2a4a"><a href="#234037" label="[23:40:37]">&lt;OriansJ&gt;</a></span><span class="message">and I am making a change which will ensure you'll know if you are working on a primitive or something built ontop of the primitives</span></div><div class="line" id="235249"><span class="nick" style="color:#2e2a4a"><a href="#235249" label="[23:52:49]">&lt;OriansJ&gt;</a></span><span class="message">(basically prim:thing for all the mes-m2 primitives)</span></div><div class="line" id="235323"><span class="nick" style="color:#6d2462"><a href="#235323" label="[23:53:23]">&lt;janneke&gt;</a></span><span class="message">that's a good idea</span></div><div class="line" id="235418"><span class="nick" style="color:#80b1d3"><a href="#235418" label="[23:54:18]">*</a></span><span class="message">janneke -&gt; zZzzz</span></div><div class="line" id="235446"><span class="nick" style="color:#2e2a4a"><a href="#235446" label="[23:54:46]">&lt;OriansJ&gt;</a></span><span class="message">hopefully I have something more fun to look at when you wake up. Sweet dreams janneke</span></div><br /></div></body></html>