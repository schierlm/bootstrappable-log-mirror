<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000424"><span class="nick">***</span><span class="message notice">midnight_ is now known as midnight</span></div><div class="line" id="002307"><span class="nick" style="color:#8dd3c7"><a href="#002307" label="[00:23:07]">&lt;oriansj&gt;</a></span><span class="message">pabs3: I guess it was a good thing that I cloned it when I saw the thread</span></div><div class="line" id="002357"><span class="nick" style="color:#8dd3c7"><a href="#002357" label="[00:23:57]">&lt;oriansj&gt;</a></span><span class="message">although the readme with clone instructions is actually straight up wrong</span></div><div class="line" id="002426"><span class="nick" style="color:#8dd3c7"><a href="#002426" label="[00:24:26]">&lt;oriansj&gt;</a></span><span class="message">if you do git clone on the github url, it would allow proper cloning</span></div><div class="line" id="002540"><span class="nick" style="color:#8dd3c7"><a href="#002540" label="[00:25:40]">&lt;oriansj&gt;</a></span><span class="message">and 1GB of git history is a shitload if it is source and not generated crap.</span></div><div class="line" id="002642"><span class="nick">***</span><span class="message notice">civodul` is now known as civodul</span></div><div class="line" id="002910"><span class="nick" style="color:#8dd3c7"><a href="#002910" label="[00:29:10]">&lt;oriansj&gt;</a></span><span class="message">even if only half of that volume was additions (and the other half deletes); that is still 500 Million letters or 50 Million written words (assuming 10chars per word). Assuming a person typing 500 words per minute 24/7 that would be 100,000 minutes of typing or 69.44years of typing at that crazy high rate.</span></div><div class="line" id="002951"><span class="nick" style="color:#8dd3c7"><a href="#002951" label="[00:29:51]">&lt;oriansj&gt;</a></span><span class="message">even split across 10 people, it would still be 7 years of 24/7 work at 500 words per minute</span></div><div class="line" id="003115"><span class="nick" style="color:#2e2a4a"><a href="#003115" label="[00:31:15]">&lt;stikonas&gt;</a></span><span class="message">oriansj: in the end I think I'll reserve memory for that label table in hex1...</span></div><div class="line" id="003131"><span class="nick" style="color:#2e2a4a"><a href="#003131" label="[00:31:31]">&lt;stikonas&gt;</a></span><span class="message">a bit more code, but pointer will be easier to work with anyway for relocatable code</span></div><div class="line" id="003214"><span class="nick" style="color:#2e2a4a"><a href="#003214" label="[00:32:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, 1 GiB of git history sounds like something wrong</span></div><div class="line" id="003216"><span class="nick" style="color:#8dd3c7"><a href="#003216" label="[00:32:16]">&lt;oriansj&gt;</a></span><span class="message">stikonas: sounds like a conservative plan and is quite reasonable</span></div><div class="line" id="003339"><span class="nick" style="color:#8dd3c7"><a href="#003339" label="[00:33:39]">&lt;oriansj&gt;</a></span><span class="message">also depending on relocation sections is a recipe for depending on functionality not currently in hex2/blood-elf</span></div><div class="line" id="003351"><span class="nick" style="color:#2e2a4a"><a href="#003351" label="[00:33:51]">&lt;stikonas&gt;</a></span><span class="message">on related note, apparently OVMF  is able to run non-relocatable binaries</span></div><div class="line" id="003407"><span class="nick" style="color:#2e2a4a"><a href="#003407" label="[00:34:07]">&lt;stikonas&gt;</a></span><span class="message">but we shouldn't rely on that...</span></div><div class="line" id="003645"><span class="nick" style="color:#8dd3c7"><a href="#003645" label="[00:36:45]">&lt;oriansj&gt;</a></span><span class="message">well PC relative addressing is certainly something easy to do in AMD64 and we have hex2 support already so solves both of those issues</span></div><div class="line" id="003905"><span class="nick" style="color:#8dd3c7"><a href="#003905" label="[00:39:05]">&lt;oriansj&gt;</a></span><span class="message">although doing the PC relative version of LOAD EAX &amp;label for function pointers is going to be eseential for cc_* and M2-Planet (not to mention mes.c)</span></div><div class="line" id="003953"><span class="nick" style="color:#2e2a4a"><a href="#003953" label="[00:39:53]">&lt;stikonas&gt;</a></span><span class="message">well, it most cases we just care about contents of varaible there</span></div><div class="line" id="004012"><span class="nick" style="color:#2e2a4a"><a href="#004012" label="[00:40:12]">&lt;stikonas&gt;</a></span><span class="message">although I don't remember now how exactly it is used in cc_amd64...</span></div><div class="line" id="004023"><span class="nick" style="color:#2e2a4a"><a href="#004023" label="[00:40:23]">&lt;stikonas&gt;</a></span><span class="message">we'll get there...</span></div><div class="line" id="004119"><span class="nick" style="color:#8dd3c7"><a href="#004119" label="[00:41:19]">&lt;oriansj&gt;</a></span><span class="message">in cc_* and M2-Planet (and mes.c) it is used for function pointers passed to call eax [call rax]</span></div><div class="line" id="004150"><span class="nick" style="color:#2e2a4a"><a href="#004150" label="[00:41:50]">&lt;stikonas&gt;</a></span><span class="message">oh, they are called using global addresses, ok...</span></div><div class="line" id="004232"><span class="nick" style="color:#8dd3c7"><a href="#004232" label="[00:42:32]">&lt;oriansj&gt;</a></span><span class="message">hence the need to figure out the way to do PC relative version of LOADI32 EAX &amp;label</span></div><div class="line" id="004327"><span class="nick" style="color:#2e2a4a"><a href="#004327" label="[00:43:27]">&lt;stikonas&gt;</a></span><span class="message">yeah, I see...</span></div><div class="line" id="013008"><span class="nick" style="color:#8dd3c7"><a href="#013008" label="[01:30:08]">&lt;oriansj&gt;</a></span><span class="message">but I am probably over thinking it and it is probably something simple like: mov rax, rip label or knowing x86 stupidity lea rax, [rip+label]</span></div><div class="line" id="022437"><span class="nick" style="color:#6b8072"><a href="#022437" label="[02:24:37]">&lt;pabs3&gt;</a></span><span class="message">oriansj: did you find out what took up 1GB of git? any generated/binary files?</span></div><div class="line" id="025955"><span class="nick" style="color:#8dd3c7"><a href="#025955" label="[02:59:55]">&lt;oriansj&gt;</a></span><span class="message">pabs3: well the git clone of the repo I have is only 8.3M in size</span></div><div class="line" id="030012"><span class="nick" style="color:#6b8072"><a href="#030012" label="[03:00:12]">&lt;pabs3&gt;</a></span><span class="message">I guess you got the new one?</span></div><div class="line" id="030034"><span class="nick" style="color:#8dd3c7"><a href="#030034" label="[03:00:34]">&lt;oriansj&gt;</a></span><span class="message">yeah, literally all of thre code in a single commit</span></div><div class="line" id="030120"><span class="nick" style="color:#8dd3c7"><a href="#030120" label="[03:01:20]">&lt;oriansj&gt;</a></span><span class="message">effectively zero history</span></div><div class="line" id="030126"><span class="nick" style="color:#8dd3c7"><a href="#030126" label="[03:01:26]">&lt;oriansj&gt;</a></span><span class="message">real shame honestly</span></div><div class="line" id="030148"><span class="nick" style="color:#6b8072"><a href="#030148" label="[03:01:48]">&lt;pabs3&gt;</a></span><span class="message">hmm, cloning the fork still gets me 8.3M too</span></div><div class="line" id="030230"><span class="nick" style="color:#6b8072"><a href="#030230" label="[03:02:30]">&lt;pabs3&gt;</a></span><span class="message">7448 commits in the fork though</span></div><div class="line" id="030249"><span class="nick" style="color:#6b8072"><a href="#030249" label="[03:02:49]">&lt;pabs3&gt;</a></span><span class="message">weird :/</span></div><div class="line" id="030319"><span class="nick" style="color:#6b8072"><a href="#030319" label="[03:03:19]">&lt;pabs3&gt;</a></span><span class="message">software heritage might have the old one. they plan to republish the old repo too according to that issue</span></div><div class="line" id="030343"><span class="nick" style="color:#80b1d3"><a href="#030343" label="[03:03:43]">&lt;drakonis&gt;</a></span><span class="message">which repository?</span></div><div class="line" id="030417"><span class="nick" style="color:#6b8072"><a href="#030417" label="[03:04:17]">&lt;pabs3&gt;</a></span><span class="message">the fork <a rel="nofollow" href="https://github.com/guregu/trealla">https://github.com/guregu/trealla</a>  and the issue <a rel="nofollow" href="https://github.com/trealla-prolog/trealla/issues/1">https://github.com/trealla-prolog/trealla/issues/1</a> </span></div><div class="line" id="030517"><span class="nick" style="color:#80b1d3"><a href="#030517" label="[03:05:17]">&lt;drakonis&gt;</a></span><span class="message">oh</span></div><div class="line" id="030519"><span class="nick" style="color:#80b1d3"><a href="#030519" label="[03:05:19]">&lt;drakonis&gt;</a></span><span class="message">yikes</span></div><div class="line" id="040010"><span class="nick" style="color:#6b8072"><a href="#040010" label="[04:00:10]">&lt;pabs3&gt;</a></span><span class="message">they posted a screenshot of the gigabyte on <a rel="nofollow" href="https://github.com/trealla-prolog/trealla/issues/1">https://github.com/trealla-prolog/trealla/issues/1</a> </span></div><div class="line" id="050313"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="083803"><span class="nick">***</span><span class="message notice">hl_ is now known as hl</span></div><div class="line" id="134522"><span class="nick" style="color:#8dd3c7"><a href="#134522" label="[13:45:22]">&lt;oriansj&gt;</a></span><span class="message">well a dozen or so failed git repacks could produce that much blob in a repo without it having anything to do with the git history itself.</span></div><div class="line" id="165328"><span class="nick">***</span><span class="message notice">rkeene_ is now known as rkeene</span></div><div class="line" id="181856"><span class="nick">***</span><span class="message notice">Noisytoot_ is now known as Noisytoot</span></div><div class="line" id="184205"><span class="nick" style="color:#6d2462"><a href="#184205" label="[18:42:05]">&lt;rickmasters&gt;</a></span><span class="message">Hello, I'm back with another update on my bootstrap kernel work.</span></div><div class="line" id="184220"><span class="nick" style="color:#6d2462"><a href="#184220" label="[18:42:20]">&lt;rickmasters&gt;</a></span><span class="message">As a reminder, I reported on July 6th that I had built mes with mes-m2</span></div><div class="line" id="184232"><span class="nick" style="color:#6d2462"><a href="#184232" label="[18:42:32]">&lt;rickmasters&gt;</a></span><span class="message">on the booostrap kernel (builder-hex0) and was proceeding to try to build tcc with mes.</span></div><div class="line" id="184243"><span class="nick" style="color:#6d2462"><a href="#184243" label="[18:42:43]">&lt;rickmasters&gt;</a></span><span class="message">We also talked a lot about EFI and I hoped to help with that.</span></div><div class="line" id="184258"><span class="nick" style="color:#6d2462"><a href="#184258" label="[18:42:58]">&lt;rickmasters&gt;</a></span><span class="message">Unfortunately, my hopes that I could get mes to build tcc quickly were dashed because</span></div><div class="line" id="184309"><span class="nick" style="color:#6d2462"><a href="#184309" label="[18:43:09]">&lt;rickmasters&gt;</a></span><span class="message">it crashed trying to compile tcc.c (after 16 hours or so).</span></div><div class="line" id="184318"><span class="nick" style="color:#6d2462"><a href="#184318" label="[18:43:18]">&lt;rickmasters&gt;</a></span><span class="message">This was perplexing because mes-m2 built over a hundred C files and</span></div><div class="line" id="184325"><span class="nick" style="color:#6d2462"><a href="#184325" label="[18:43:25]">&lt;rickmasters&gt;</a></span><span class="message">mes is essentially the same program as mes-m2.</span></div><div class="line" id="184335"><span class="nick" style="color:#6d2462"><a href="#184335" label="[18:43:35]">&lt;rickmasters&gt;</a></span><span class="message">After two weeks of arduous debugging I managed to compile tcc.c into tcc.s.</span></div><div class="line" id="184348"><span class="nick" style="color:#6d2462"><a href="#184348" label="[18:43:48]">&lt;rickmasters&gt;</a></span><span class="message">Turned out that mes used more memory (over 570MB) than the kernel anticipated,</span></div><div class="line" id="184356"><span class="nick" style="color:#6d2462"><a href="#184356" label="[18:43:56]">&lt;rickmasters&gt;</a></span><span class="message">(and other issues) but I finally got it to work.</span></div><div class="line" id="184407"><span class="nick" style="color:#6d2462"><a href="#184407" label="[18:44:07]">&lt;rickmasters&gt;</a></span><span class="message">The next command I tried was to assemble and link mes-tcc but that also crashed.</span></div><div class="line" id="184418"><span class="nick" style="color:#6d2462"><a href="#184418" label="[18:44:18]">&lt;rickmasters&gt;</a></span><span class="message">After another two weeks of debugging, mostly stabs in the dark with a full day</span></div><div class="line" id="184426"><span class="nick" style="color:#6d2462"><a href="#184426" label="[18:44:26]">&lt;rickmasters&gt;</a></span><span class="message">of turn-around, I finally got confirmation this morning that the stack was not</span></div><div class="line" id="184433"><span class="nick" style="color:#6d2462"><a href="#184433" label="[18:44:33]">&lt;rickmasters&gt;</a></span><span class="message">restored properly when mes resumed after spawning M1. This was the clue I was looking for.</span></div><div class="line" id="184442"><span class="nick" style="color:#6d2462"><a href="#184442" label="[18:44:42]">&lt;rickmasters&gt;</a></span><span class="message">I am testing a possible fix for that now and hopefully I can produce mes-tcc and leave mes behind.</span></div><div class="line" id="184452"><span class="nick" style="color:#6d2462"><a href="#184452" label="[18:44:52]">&lt;rickmasters&gt;</a></span><span class="message">Mes is extremely slow. I am not using kvm which explains some slowness, but still, mes is painful to work with.</span></div><div class="line" id="184500"><span class="nick" style="color:#6d2462"><a href="#184500" label="[18:45:00]">&lt;rickmasters&gt;</a></span><span class="message">After mes-tcc, I will try to build tcc with mes-tcc. The compile chain is:</span></div><div class="line" id="184509"><span class="nick" style="color:#6d2462"><a href="#184509" label="[18:45:09]">&lt;rickmasters&gt;</a></span><span class="message">M2 -&gt; mes-m2 -&gt; mes -&gt; mes-tcc -&gt; boot0-tcc -&gt; boot1-tcc -&gt; boot2-tcc -&gt; boot3-tcc -&gt; boot4-tcc -&gt; boot5-tcc</span></div><div class="line" id="184518"><span class="nick" style="color:#6d2462"><a href="#184518" label="[18:45:18]">&lt;rickmasters&gt;</a></span><span class="message">boot5-tcc is copied as the final tcc 0.9.26</span></div><div class="line" id="184524"><span class="nick" style="color:#6d2462"><a href="#184524" label="[18:45:24]">&lt;rickmasters&gt;</a></span><span class="message">Running tcc is a new game with unknown syscalls so I can only hope it goes well.</span></div><div class="line" id="184540"><span class="nick" style="color:#6d2462"><a href="#184540" label="[18:45:40]">&lt;rickmasters&gt;</a></span><span class="message">I may disappear for a while again but I have been following the discussions about EFI and reducing the seeds which is great work.</span></div><div class="line" id="184625"><span class="nick" style="color:#234e69"><a href="#184625" label="[18:46:25]">*</a></span><span class="message">vagrantc claps :)</span></div><div class="line" id="184630"><span class="nick" style="color:#6c3d55"><a href="#184630" label="[18:46:30]">&lt;Hagfish_&gt;</a></span><span class="message">incredible work, thank you!</span></div><div class="line" id="184632"><span class="nick" style="color:#d9d9d9"><a href="#184632" label="[18:46:32]">&lt;vagrantc&gt;</a></span><span class="message">sounds like some good progress</span></div><div class="line" id="184718"><span class="nick" style="color:#d9d9d9"><a href="#184718" label="[18:47:18]">&lt;vagrantc&gt;</a></span><span class="message">mes has been languishing in debian since the default compiler switched to gcc-11</span></div><div class="line" id="184748"><span class="nick" style="color:#6c3d55"><a href="#184748" label="[18:47:48]">&lt;Hagfish_&gt;</a></span><span class="message">570 MB of memory sounds...  generous, let's say.  it's orders of magnitude bigger than most of the other numbers that get mentioned here :)</span></div><div class="line" id="185048"><span class="nick">***</span><span class="message notice">Hagfish_ is now known as Hagfish</span></div><div class="line" id="185220"><span class="nick" style="color:#6d2462"><a href="#185220" label="[18:52:20]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, that much memory meant the kernel could not used a fixed size for saving a process when a child was spawned...</span></div><div class="line" id="185258"><span class="nick" style="color:#6d2462"><a href="#185258" label="[18:52:58]">&lt;rickmasters&gt;</a></span><span class="message">I had to look at the brk pointer and dynamically allocate the memory, so it took some rework</span></div><div class="line" id="185706"><span class="nick" style="color:#6d2462"><a href="#185706" label="[18:57:06]">&lt;rickmasters&gt;</a></span><span class="message">mes also used a different ELF header structure so I had to discover and support that before it would even run</span></div><div class="line" id="190424"><span class="nick" style="color:#6d2462"><a href="#190424" label="[19:04:24]">&lt;rickmasters&gt;</a></span><span class="message">I also made some other fun discoveries like our untar does not support long file names, silently corrupting those files</span></div><div class="line" id="191855"><span class="nick" style="color:#d9d9d9"><a href="#191855" label="[19:18:55]">&lt;vagrantc&gt;</a></span><span class="message">probably an older tar format?</span></div><div class="line" id="192252"><span class="nick" style="color:#6d2462"><a href="#192252" label="[19:22:52]">&lt;rickmasters&gt;</a></span><span class="message">The basic tar format only supports 100 bytes for file names</span></div><div class="line" id="192359"><span class="nick" style="color:#bc80bd"><a href="#192359" label="[19:23:59]">&lt;rkeene&gt;</a></span><span class="message">Isn't tar deprecated ?</span></div><div class="line" id="193342"><span class="nick" style="color:#d9d9d9"><a href="#193342" label="[19:33:42]">&lt;vagrantc&gt;</a></span><span class="message">if you can switch to ustar, that effectively gives you 151 (in some cases larger, but not all)</span></div><div class="line" id="193459"><span class="nick" style="color:#d9d9d9"><a href="#193459" label="[19:34:59]">&lt;vagrantc&gt;</a></span><span class="message">rickmasters: or are you talking about upstream tarballs of arbitrary formats you need to unpack during the bootstrap?</span></div><div class="line" id="193817"><span class="nick" style="color:#6d2462"><a href="#193817" label="[19:38:17]">&lt;rickmasters&gt;</a></span><span class="message">vagrantc: I am saying the untar command in stage0-posix/mescc-tools-extra does not support &gt; 100 byte file names</span></div><div class="line" id="193944"><span class="nick" style="color:#6d2462"><a href="#193944" label="[19:39:44]">&lt;rickmasters&gt;</a></span><span class="message">so, I created a tar file using modern tar with long filenames and untar didn't extract it properly so I had to workaround that by using shorter relative paths</span></div><div class="line" id="194028"><span class="nick" style="color:#3c5b35"><a href="#194028" label="[19:40:28]">&lt;samplet&gt;</a></span><span class="message">The GNU long name extension is pretty simple to implement.</span></div><div class="line" id="194055"><span class="nick" style="color:#3c5b35"><a href="#194055" label="[19:40:55]">&lt;samplet&gt;</a></span><span class="message">Compared to pax, say.</span></div><div class="line" id="194142"><span class="nick" style="color:#6d2462"><a href="#194142" label="[19:41:42]">&lt;rickmasters&gt;</a></span><span class="message">samplet: TBH, it was easier to work around but yes that would have been a good improvement to add but I wasn't up for it</span></div><div class="line" id="194146"><span class="nick" style="color:#2e2a4a"><a href="#194146" label="[19:41:46]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: well UEFI work is kind of parallel (and somewhat higher level) to what you are doing</span></div><div class="line" id="194210"><span class="nick" style="color:#2e2a4a"><a href="#194210" label="[19:42:10]">&lt;stikonas&gt;</a></span><span class="message">I'll probably have hex1 soonish but I was sick last week (still not healthy), so things were pretty slow</span></div><div class="line" id="194251"><span class="nick" style="color:#6d2462"><a href="#194251" label="[19:42:51]">&lt;rickmasters&gt;</a></span><span class="message">the pain was discovering what happened - the file name was truncated and you can't even see that without --verbose so figuring out that the compiler crashed</span></div><div class="line" id="194300"><span class="nick" style="color:#2e2a4a"><a href="#194300" label="[19:43:00]">&lt;stikonas&gt;</a></span><span class="message">but yes, you are doing incredible progress</span></div><div class="line" id="194308"><span class="nick" style="color:#6d2462"><a href="#194308" label="[19:43:08]">&lt;rickmasters&gt;</a></span><span class="message">... due to a missing file was a bit of a chore</span></div><div class="line" id="194409"><span class="nick" style="color:#3c5b35"><a href="#194409" label="[19:44:09]">&lt;samplet&gt;</a></span><span class="message">rickmasters: Definitely.  The only thing better than solving a problem is avoiding it!  :)</span></div><div class="line" id="194951"><span class="nick" style="color:#6d2462"><a href="#194951" label="[19:49:51]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: covid? several people I know got it recently, I got it in April so it seems to bounce off me now</span></div><div class="line" id="195020"><span class="nick" style="color:#2e2a4a"><a href="#195020" label="[19:50:20]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, covid, one co-worker got it, in a few days most of my other coworkers got it...</span></div><div class="line" id="195136"><span class="nick" style="color:#6d2462"><a href="#195136" label="[19:51:36]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: this last variant is finding everyone it seems. its a wild fire</span></div><div class="line" id="195204"><span class="nick" style="color:#6d2462"><a href="#195204" label="[19:52:04]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: hopefully its burning out ... until ...</span></div><div class="line" id="195637"><span class="nick" style="color:#6d2462"><a href="#195637" label="[19:56:37]">&lt;rickmasters&gt;</a></span><span class="message">covid seems to never end but I'll say no more, don't want to side track on that</span></div><div class="line" id="200922"><span class="nick" style="color:#6d2462"><a href="#200922" label="[20:09:22]">&lt;rickmasters&gt;</a></span><span class="message">on a longer term topic - I've been thinking about how live-bootstrap could be restructured to support building bootstrap kernels.</span></div><div class="line" id="201016"><span class="nick" style="color:#6d2462"><a href="#201016" label="[20:10:16]">&lt;rickmasters&gt;</a></span><span class="message">sysa would need to be split up but that shouldn't be too hard</span></div><div class="line" id="201108"><span class="nick" style="color:#2e2a4a"><a href="#201108" label="[20:11:08]">&lt;stikonas&gt;</a></span><span class="message">yes, I agree, sysa would become a few systems</span></div><div class="line" id="201124"><span class="nick" style="color:#2e2a4a"><a href="#201124" label="[20:11:24]">&lt;stikonas&gt;</a></span><span class="message">a bit unfortunate that current numbering means we would have to rename e.g. sysc -&gt; sysd</span></div><div class="line" id="201142"><span class="nick" style="color:#6d2462"><a href="#201142" label="[20:11:42]">&lt;rickmasters&gt;</a></span><span class="message">perhaps split after tcc-0.9.27. yeah naming is tricky</span></div><div class="line" id="201218"><span class="nick" style="color:#af8d2f"><a href="#201218" label="[20:12:18]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;note: Despite the name, sysd is not a bootstrap implementation of systemd.&quot; :)</span></div><div class="line" id="201239"><span class="nick" style="color:#6d2462"><a href="#201239" label="[20:12:39]">&lt;rickmasters&gt;</a></span><span class="message">or sysa1, sysa2 but not as clean in terms of naming conventions</span></div><div class="line" id="201355"><span class="nick" style="color:#389600"><a href="#201355" label="[20:13:55]">&lt;nimaje&gt;</a></span><span class="message">could use a unary numbering system</span></div><div class="line" id="201705"><span class="nick" style="color:#6d2462"><a href="#201705" label="[20:17:05]">&lt;rickmasters&gt;</a></span><span class="message">whoops. I should say a split somewhere after building tcc-0.9.26 and a new kernel because running make is the inflection point for a new kernel I think</span></div><div class="line" id="201915"><span class="nick" style="color:#6d2462"><a href="#201915" label="[20:19:15]">&lt;rickmasters&gt;</a></span><span class="message">the current bootstrap kernel can only spawn one child and presumes fork, exec, waitpid are run in an exact sequence</span></div><div class="line" id="202052"><span class="nick" style="color:#6d2462"><a href="#202052" label="[20:20:52]">&lt;rickmasters&gt;</a></span><span class="message">its possible that make -j1 might work but I wouldn't count on it</span></div><div class="line" id="202252"><span class="nick" style="color:#2e2a4a"><a href="#202252" label="[20:22:52]">&lt;stikonas&gt;</a></span><span class="message">well, we only use make -j1 for now</span></div><div class="line" id="202314"><span class="nick" style="color:#6d2462"><a href="#202314" label="[20:23:14]">&lt;rickmasters&gt;</a></span><span class="message">oh, I didn't know that. why's that?</span></div><div class="line" id="202411"><span class="nick" style="color:#2e2a4a"><a href="#202411" label="[20:24:11]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap never introduced parallelization, partially because we didn't get to it, partially because there might be some new reproducibility bugs</span></div><div class="line" id="204052"><span class="nick" style="color:#6d2462"><a href="#204052" label="[20:40:52]">&lt;rickmasters&gt;</a></span><span class="message">ok, well I'll see how far I can get before this kernel runs out of steam, only testing will tell</span></div><div class="line" id="210526"><span class="nick" style="color:#2e2a4a"><a href="#210526" label="[21:05:26]">&lt;stikonas&gt;</a></span><span class="message">ok, stage0-uefi now goes to hex1</span></div><div class="line" id="210748"><span class="nick" style="color:#2e2a4a"><a href="#210748" label="[21:07:48]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="211444"><span class="nick" style="color:#6d2462"><a href="#211444" label="[21:14:44]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: nice job</span></div><div class="line" id="212529"><span class="nick" style="color:#6d2462"><a href="#212529" label="[21:25:29]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: for the minimal boot, how is the Optional Data used?</span></div><div class="line" id="212545"><span class="nick" style="color:#2e2a4a"><a href="#212545" label="[21:25:45]">&lt;stikonas&gt;</a></span><span class="message">Optional Data is used as command line</span></div><div class="line" id="212630"><span class="nick" style="color:#2e2a4a"><a href="#212630" label="[21:26:30]">&lt;stikonas&gt;</a></span><span class="message">so if we run  with hex0 amd64\kaem-minimal.hex0 EFI\BOOT\BOOTX64.efi then hex0 builds kaem-minimal</span></div><div class="line" id="212650"><span class="nick" style="color:#6d2462"><a href="#212650" label="[21:26:50]">&lt;rickmasters&gt;</a></span><span class="message">what runs that command line?</span></div><div class="line" id="212706"><span class="nick" style="color:#2e2a4a"><a href="#212706" label="[21:27:06]">&lt;stikonas&gt;</a></span><span class="message">UEFI</span></div><div class="line" id="212716"><span class="nick" style="color:#2e2a4a"><a href="#212716" label="[21:27:16]">&lt;stikonas&gt;</a></span><span class="message">You can set Optional Data in your boot entry</span></div><div class="line" id="212723"><span class="nick" style="color:#2e2a4a"><a href="#212723" label="[21:27:23]">&lt;stikonas&gt;</a></span><span class="message">in UEFI setup menu</span></div><div class="line" id="212925"><span class="nick" style="color:#6d2462"><a href="#212925" label="[21:29:25]">&lt;rickmasters&gt;</a></span><span class="message">You pick hex0-seed.efi as the executable, but pass a different executable name &quot;hex0&quot; for the command line?</span></div><div class="line" id="212942"><span class="nick" style="color:#2e2a4a"><a href="#212942" label="[21:29:42]">&lt;stikonas&gt;</a></span><span class="message">first word is ignored</span></div><div class="line" id="212950"><span class="nick" style="color:#2e2a4a"><a href="#212950" label="[21:29:50]">&lt;stikonas&gt;</a></span><span class="message">see here in prototype <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex0.c#L22">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex0.c#L22</a> </span></div><div class="line" id="212950"><span class="nick" style="color:#6d2462"><a href="#212950" label="[21:29:50]">&lt;rickmasters&gt;</a></span><span class="message">ok</span></div><div class="line" id="213001"><span class="nick" style="color:#2e2a4a"><a href="#213001" label="[21:30:01]">&lt;stikonas&gt;</a></span><span class="message">it's like argv[0]</span></div><div class="line" id="213154"><span class="nick" style="color:#2e2a4a"><a href="#213154" label="[21:31:54]">&lt;stikonas&gt;</a></span><span class="message">in principle one does not have to add that first word at all</span></div><div class="line" id="213204"><span class="nick" style="color:#2e2a4a"><a href="#213204" label="[21:32:04]">&lt;stikonas&gt;</a></span><span class="message">but then we lose compatibility with UEFI Shell</span></div><div class="line" id="213211"><span class="nick" style="color:#2e2a4a"><a href="#213211" label="[21:32:11]">&lt;stikonas&gt;</a></span><span class="message">which would make debugging a bit harder</span></div><div class="line" id="213404"><span class="nick" style="color:#6d2462"><a href="#213404" label="[21:34:04]">&lt;rickmasters&gt;</a></span><span class="message">so you would you use \bootstrap-seeds\UEFI\amd64\hex0-seed.efi for the command name if you were using the UEFI shell?</span></div><div class="line" id="213533"><span class="nick" style="color:#2e2a4a"><a href="#213533" label="[21:35:33]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="213540"><span class="nick" style="color:#6d2462"><a href="#213540" label="[21:35:40]">&lt;rickmasters&gt;</a></span><span class="message">thanks</span></div><div class="line" id="213544"><span class="nick" style="color:#2e2a4a"><a href="#213544" label="[21:35:44]">&lt;stikonas&gt;</a></span><span class="message">(or as boot entry)</span></div><div class="line" id="213554"><span class="nick" style="color:#2e2a4a"><a href="#213554" label="[21:35:54]">&lt;stikonas&gt;</a></span><span class="message">if you don't have UEFI shell</span></div><div class="line" id="213602"><span class="nick" style="color:#2e2a4a"><a href="#213602" label="[21:36:02]">&lt;stikonas&gt;</a></span><span class="message">e.g. on my laptop there is no UEFI shell</span></div><div class="line" id="214527"><span class="nick" style="color:#2e2a4a"><a href="#214527" label="[21:45:27]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: also error checking is almost non-existant and OptionalData (command line) parsing also doesn't check for length limits</span></div><div class="line" id="214535"><span class="nick" style="color:#2e2a4a"><a href="#214535" label="[21:45:35]">&lt;stikonas&gt;</a></span><span class="message">but I might change that in later programs</span></div><div class="line" id="214539"><span class="nick" style="color:#2e2a4a"><a href="#214539" label="[21:45:39]">&lt;stikonas&gt;</a></span><span class="message">e.g. for hex2.efi</span></div><div class="line" id="214553"><span class="nick" style="color:#2e2a4a"><a href="#214553" label="[21:45:53]">&lt;stikonas&gt;</a></span><span class="message">since it's much easier to do if we have hex1 to calculate jumps for us</span></div><div class="line" id="215544"><span class="nick" style="color:#6d2462"><a href="#215544" label="[21:55:44]">&lt;rickmasters&gt;</a></span><span class="message">the value of error checking isn't as clear in a bootstrap scenario so its not something i've put a lot of effort into to be honest,</span></div><div class="line" id="215618"><span class="nick" style="color:#6d2462"><a href="#215618" label="[21:56:18]">&lt;rickmasters&gt;</a></span><span class="message">although I have to admit it probably would have saved some debugging time for a couple of issues</span></div><div class="line" id="221235"><span class="nick" style="color:#2e2a4a"><a href="#221235" label="[22:12:35]">&lt;stikonas&gt;</a></span><span class="message">yes, but it's the same in stage0-posix</span></div><div class="line" id="221247"><span class="nick" style="color:#2e2a4a"><a href="#221247" label="[22:12:47]">&lt;stikonas&gt;</a></span><span class="message">e.g. M0 does almost no error checking and prints no useful error messages</span></div><div class="line" id="221254"><span class="nick" style="color:#2e2a4a"><a href="#221254" label="[22:12:54]">&lt;stikonas&gt;</a></span><span class="message">whereas M1 is much more helpful</span></div><div class="line" id="223947"><span class="nick" style="color:#6d2462"><a href="#223947" label="[22:39:47]">&lt;rickmasters&gt;</a></span><span class="message">one distinction is whether the tool is used in a narrow way to build another tool or is re-used many times in ongoing new scenarios in which error reporting has more value</span></div><div class="line" id="224032"><span class="nick" style="color:#2e2a4a"><a href="#224032" label="[22:40:32]">&lt;stikonas&gt;</a></span><span class="message">well yes, I agree</span></div><div class="line" id="224041"><span class="nick" style="color:#2e2a4a"><a href="#224041" label="[22:40:41]">&lt;stikonas&gt;</a></span><span class="message">that's why so far I've done minimal error checking</span></div><div class="line" id="224057"><span class="nick" style="color:#2e2a4a"><a href="#224057" label="[22:40:57]">&lt;stikonas&gt;</a></span><span class="message">although I've tried to keep to UEFI specs and released freed memory and close file handles</span></div><br /></div></body></html>