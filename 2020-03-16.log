<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000656"><span class="nick" style="color:#8dd3c7"><a href="#000656" label="[00:06:56]">&lt;OriansJ&gt;</a></span><span class="message">well it could become possible to run M2-Planet on 64KB if we break it up a little bit to enable optimizations and sepecializations.</span></div><div class="line" id="000717"><span class="nick" style="color:#8dd3c7"><a href="#000717" label="[00:07:17]">&lt;OriansJ&gt;</a></span><span class="message">^sepecializations^specializations^</span></div><div class="line" id="000753"><span class="nick" style="color:#8dd3c7"><a href="#000753" label="[00:07:53]">&lt;OriansJ&gt;</a></span><span class="message">but that would mean taking 2 steps backwards in our current bootstrapping path and admit we made a few bad design decisions</span></div><div class="line" id="001513"><span class="nick" style="color:#2e2a4a"><a href="#001513" label="[00:15:13]">&lt;xentrac&gt;</a></span><span class="message">the majority of C programs don't include any inline assembly</span></div><div class="line" id="001544"><span class="nick" style="color:#2e2a4a"><a href="#001544" label="[00:15:44]">&lt;xentrac&gt;</a></span><span class="message">(although after growing to a sufficiently large size, people often find it worthwhile to add it)</span></div><div class="line" id="001626"><span class="nick" style="color:#2e2a4a"><a href="#001626" label="[00:16:26]">&lt;xentrac&gt;</a></span><span class="message">because inline assembly is nonportable, and many C programs are portable</span></div><div class="line" id="001636"><span class="nick" style="color:#2e2a4a"><a href="#001636" label="[00:16:36]">&lt;xentrac&gt;</a></span><span class="message">so many people think that C without inline assembly support is worth the trouble.  it's situational</span></div><div class="line" id="002417"><span class="nick" style="color:#8dd3c7"><a href="#002417" label="[00:24:17]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: without inline assembly, syscalls become quite hard to implement (unless one just links to an assembly file that achieves approximately the same thing)</span></div><div class="line" id="002837"><span class="nick" style="color:#2e2a4a"><a href="#002837" label="[00:28:37]">&lt;xentrac&gt;</a></span><span class="message">yeah, although Windows NT on the 286 did it; the idea was that user programs wouldn't be able to just call into the kernel because the kernel DLLs would be loaded in unpredictable cases</span></div><div class="line" id="002843"><span class="nick" style="color:#2e2a4a"><a href="#002843" label="[00:28:43]">&lt;xentrac&gt;</a></span><span class="message">unpredictable places</span></div><div class="line" id="002858"><span class="nick" style="color:#2e2a4a"><a href="#002858" label="[00:28:58]">&lt;xentrac&gt;</a></span><span class="message">and if they guessed wrong they would crash</span></div><div class="line" id="002912"><span class="nick" style="color:#2e2a4a"><a href="#002912" label="[00:29:12]">&lt;xentrac&gt;</a></span><span class="message">doesn't seem like a good plan to me</span></div><div class="line" id="003006"><span class="nick" style="color:#2e2a4a"><a href="#003006" label="[00:30:06]">&lt;xentrac&gt;</a></span><span class="message">at least not for running untrusted code</span></div><div class="line" id="003030"><span class="nick" style="color:#2e2a4a"><a href="#003030" label="[00:30:30]">&lt;xentrac&gt;</a></span><span class="message">not too different from what Windows 3.0 did, but of course that did use asm</span></div><div class="line" id="003121"><span class="nick" style="color:#8dd3c7"><a href="#003121" label="[00:31:21]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: and those DLLs needed assembly to work</span></div><div class="line" id="003137"><span class="nick" style="color:#2e2a4a"><a href="#003137" label="[00:31:37]">&lt;xentrac&gt;</a></span><span class="message">in Windows 3.0, but not really in NT</span></div><div class="line" id="003210"><span class="nick" style="color:#8dd3c7"><a href="#003210" label="[00:32:10]">&lt;OriansJ&gt;</a></span><span class="message">In the end; assembly will always be tucked into the back of C be it in standard libraries or otherwise.</span></div><div class="line" id="003214"><span class="nick" style="color:#2e2a4a"><a href="#003214" label="[00:32:14]">&lt;xentrac&gt;</a></span><span class="message">I mean yeah the linking was accomplished by twiddling registers and doing indirect jumps and whatnot but that was in the compiler, not the OS</span></div><div class="line" id="003236"><span class="nick" style="color:#2e2a4a"><a href="#003236" label="[00:32:36]">&lt;xentrac&gt;</a></span><span class="message">I've been thinking that in modern machines with room for lots of cores, it might make sense to just give them separate memory spaces and load different processes onto different cores</span></div><div class="line" id="003316"><span class="nick" style="color:#8dd3c7"><a href="#003316" label="[00:33:16]">&lt;OriansJ&gt;</a></span><span class="message">or provide them with the illusion that they have the whole machine to themselves</span></div><div class="line" id="003324"><span class="nick" style="color:#2e2a4a"><a href="#003324" label="[00:33:24]">&lt;xentrac&gt;</a></span><span class="message">right, they would</span></div><div class="line" id="003329"><span class="nick" style="color:#8dd3c7"><a href="#003329" label="[00:33:29]">&lt;OriansJ&gt;</a></span><span class="message">with no idea about any other software installed or running</span></div><div class="line" id="003331"><span class="nick" style="color:#2e2a4a"><a href="#003331" label="[00:33:31]">&lt;xentrac&gt;</a></span><span class="message">they would have a whole machine to themselves</span></div><div class="line" id="003337"><span class="nick" style="color:#2e2a4a"><a href="#003337" label="[00:33:37]">&lt;xentrac&gt;</a></span><span class="message">just a very small one</span></div><div class="line" id="003351"><span class="nick" style="color:#8dd3c7"><a href="#003351" label="[00:33:51]">&lt;OriansJ&gt;</a></span><span class="message">or the illusion of the whole one</span></div><div class="line" id="003420"><span class="nick" style="color:#2e2a4a"><a href="#003420" label="[00:34:20]">&lt;xentrac&gt;</a></span><span class="message">on a machine with memory-mapped I/O and an interrupt calling sequence compatible with your C ABI, you could plausibly do everything in C, with things like *(uint32_t*)0x2eff = 3;</span></div><div class="line" id="003505"><span class="nick" style="color:#2e2a4a"><a href="#003505" label="[00:35:05]">&lt;xentrac&gt;</a></span><span class="message">but that's really more an effort in restricted programming, like writing A Void without the letter &quot;e&quot;, than a practical thing to aim for</span></div><div class="line" id="003511"><span class="nick" style="color:#8dd3c7"><a href="#003511" label="[00:35:11]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well unless one uses tagged memory but such machines are quite rare</span></div><div class="line" id="003528"><span class="nick" style="color:#2e2a4a"><a href="#003528" label="[00:35:28]">&lt;xentrac&gt;</a></span><span class="message">yeah, C doesn't deal well with tagged memory</span></div><div class="line" id="003542"><span class="nick" style="color:#2e2a4a"><a href="#003542" label="[00:35:42]">&lt;xentrac&gt;</a></span><span class="message">despite how far backwards the standard bends to support weird machines</span></div><div class="line" id="003551"><span class="nick" style="color:#8dd3c7"><a href="#003551" label="[00:35:51]">&lt;OriansJ&gt;</a></span><span class="message">actually it enables alot of amazing performance optimizations if I remember correctly</span></div><div class="line" id="003608"><span class="nick" style="color:#2e2a4a"><a href="#003608" label="[00:36:08]">&lt;xentrac&gt;</a></span><span class="message">what does, tagged memory?</span></div><div class="line" id="003628"><span class="nick" style="color:#2e2a4a"><a href="#003628" label="[00:36:28]">&lt;xentrac&gt;</a></span><span class="message">or purely memory-mapped I/O?</span></div><div class="line" id="003629"><span class="nick" style="color:#8dd3c7"><a href="#003629" label="[00:36:29]">&lt;OriansJ&gt;</a></span><span class="message">Lisp machine C was the golden standard for performance for a little bit there if I remember  correctly.</span></div><div class="line" id="003702"><span class="nick" style="color:#2e2a4a"><a href="#003702" label="[00:37:02]">&lt;xentrac&gt;</a></span><span class="message">could be.  Lisp is a much better language to write an optimizing compiler in than C is</span></div><div class="line" id="003703"><span class="nick" style="color:#8dd3c7"><a href="#003703" label="[00:37:03]">&lt;OriansJ&gt;</a></span><span class="message">all error catching and handling is done entirely in hardware</span></div><div class="line" id="003735"><span class="nick" style="color:#8dd3c7"><a href="#003735" label="[00:37:35]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well as I have yet to write an optimizing Compiler I don't honestly know.</span></div><div class="line" id="003744"><span class="nick" style="color:#2e2a4a"><a href="#003744" label="[00:37:44]">&lt;xentrac&gt;</a></span><span class="message">and early-80s C compilers were not very good at optimizing</span></div><div class="line" id="003802"><span class="nick" style="color:#2e2a4a"><a href="#003802" label="[00:38:02]">&lt;xentrac&gt;</a></span><span class="message">in part because they were written in C, which makes that kind of thing especially challenging</span></div><div class="line" id="003803"><span class="nick" style="color:#8dd3c7"><a href="#003803" label="[00:38:03]">&lt;OriansJ&gt;</a></span><span class="message">but I do know assembly is an amazing language for writing a minimal C compiler in.</span></div><div class="line" id="003811"><span class="nick" style="color:#2e2a4a"><a href="#003811" label="[00:38:11]">&lt;xentrac&gt;</a></span><span class="message">yes, so you've said :)</span></div><div class="line" id="003822"><span class="nick" style="color:#2e2a4a"><a href="#003822" label="[00:38:22]">&lt;xentrac&gt;</a></span><span class="message">you should send Ken Thompson a thank-you note</span></div><div class="line" id="003838"><span class="nick" style="color:#8dd3c7"><a href="#003838" label="[00:38:38]">&lt;OriansJ&gt;</a></span><span class="message">possibly</span></div><div class="line" id="003848"><span class="nick" style="color:#8dd3c7"><a href="#003848" label="[00:38:48]">&lt;OriansJ&gt;</a></span><span class="message">we all should when mes-m2 is done</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;OriansJ&gt;</a></span><span class="message">So if one had alot of RAM and a sufficiently fast CPU, ther is nothing stopping a C compiler written in C from being a good optimizing C compiler. (See GCC)</span></div><div class="line" id="004014"><span class="nick" style="color:#8dd3c7"><a href="#004014" label="[00:40:14]">&lt;OriansJ&gt;</a></span><span class="message">(even if bootstrapped from a minimal C compiler)</span></div><div class="line" id="004052"><span class="nick" style="color:#8dd3c7"><a href="#004052" label="[00:40:52]">&lt;OriansJ&gt;</a></span><span class="message">I just think it is a matter of of human effort applied.</span></div><div class="line" id="004150"><span class="nick" style="color:#8dd3c7"><a href="#004150" label="[00:41:50]">&lt;OriansJ&gt;</a></span><span class="message">once one goes past C, there are marginal gains in programmer efficiencies beyound  the benefits of DSLs where one trades systems efficiency for programmer efficiency</span></div><div class="line" id="004332"><span class="nick" style="color:#2e2a4a"><a href="#004332" label="[00:43:32]">&lt;xentrac&gt;</a></span><span class="message">well, you can of course write anything in C</span></div><div class="line" id="004411"><span class="nick" style="color:#8dd3c7"><a href="#004411" label="[00:44:11]">&lt;OriansJ&gt;</a></span><span class="message">but then again, I have long stopped believing in magic in computers and started to appreciate the lifetime efforts of many loving, caring and passionate humans; carving a future out of the stone of the computing environments in which they lived.</span></div><div class="line" id="004416"><span class="nick" style="color:#2e2a4a"><a href="#004416" label="[00:44:16]">&lt;xentrac&gt;</a></span><span class="message">but GCC's original optimizer used a Lispy DSL, implemented in C, to express its optimizations (and indeed the whole code generation thing)</span></div><div class="line" id="004434"><span class="nick" style="color:#8dd3c7"><a href="#004434" label="[00:44:34]">&lt;OriansJ&gt;</a></span><span class="message">well RMS was very much a Lisp hacker</span></div><div class="line" id="004448"><span class="nick" style="color:#8dd3c7"><a href="#004448" label="[00:44:48]">&lt;OriansJ&gt;</a></span><span class="message">and thus heavily influenced his code choices and style</span></div><div class="line" id="004449"><span class="nick" style="color:#2e2a4a"><a href="#004449" label="[00:44:49]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="004455"><span class="nick" style="color:#2e2a4a"><a href="#004455" label="[00:44:55]">&lt;xentrac&gt;</a></span><span class="message">yes</span></div><div class="line" id="004518"><span class="nick" style="color:#2e2a4a"><a href="#004518" label="[00:45:18]">&lt;xentrac&gt;</a></span><span class="message">and that was why GCC produced dramatically better code than most Unix vendor compilers</span></div><div class="line" id="004528"><span class="nick" style="color:#2e2a4a"><a href="#004528" label="[00:45:28]">&lt;xentrac&gt;</a></span><span class="message">I mean, not the only reason</span></div><div class="line" id="004529"><span class="nick" style="color:#2e2a4a"><a href="#004529" label="[00:45:29]">&lt;xentrac&gt;</a></span><span class="message">but one reason</span></div><div class="line" id="004537"><span class="nick" style="color:#8dd3c7"><a href="#004537" label="[00:45:37]">&lt;OriansJ&gt;</a></span><span class="message">So, I feel that is less about Lisp and more about the sheer number of amazing programmers who threw hours/days/years at GCC.</span></div><div class="line" id="004649"><span class="nick" style="color:#8dd3c7"><a href="#004649" label="[00:46:49]">&lt;OriansJ&gt;</a></span><span class="message">Technical advantages rarely surpass social advantages.</span></div><div class="line" id="004717"><span class="nick" style="color:#8dd3c7"><a href="#004717" label="[00:47:17]">&lt;OriansJ&gt;</a></span><span class="message">Hence why major projects are done in things like node.js and not haskell or scheme.</span></div><div class="line" id="004748"><span class="nick" style="color:#8dd3c7"><a href="#004748" label="[00:47:48]">&lt;OriansJ&gt;</a></span><span class="message">It is just a natural side effect of human choice.</span></div><div class="line" id="004837"><span class="nick" style="color:#2e2a4a"><a href="#004837" label="[00:48:37]">&lt;xentrac&gt;</a></span><span class="message">well, also, node.js is just freaking awesome</span></div><div class="line" id="004842"><span class="nick" style="color:#8dd3c7"><a href="#004842" label="[00:48:42]">&lt;OriansJ&gt;</a></span><span class="message">More people like language X, therefor the greatest progress is made in language X even though language Y is logically superior.</span></div><div class="line" id="004901"><span class="nick" style="color:#2e2a4a"><a href="#004901" label="[00:49:01]">&lt;xentrac&gt;</a></span><span class="message">generally speaking, JS takes about half as many tokens as Scheme to express the same thing</span></div><div class="line" id="004923"><span class="nick" style="color:#8dd3c7"><a href="#004923" label="[00:49:23]">&lt;OriansJ&gt;</a></span><span class="message">personally I can't stand javascript; it just doesn't appeal to my tastes.</span></div><div class="line" id="004949"><span class="nick" style="color:#2e2a4a"><a href="#004949" label="[00:49:49]">&lt;xentrac&gt;</a></span><span class="message">and there are things that are much flatter in JS than in Scheme, like the K combinator</span></div><div class="line" id="005005"><span class="nick" style="color:#2e2a4a"><a href="#005005" label="[00:50:05]">&lt;xentrac&gt;</a></span><span class="message">a =&gt; b =&gt; a</span></div><div class="line" id="005013"><span class="nick" style="color:#2e2a4a"><a href="#005013" label="[00:50:13]">&lt;xentrac&gt;</a></span><span class="message">or the S combinator</span></div><div class="line" id="005032"><span class="nick" style="color:#8dd3c7"><a href="#005032" label="[00:50:32]">&lt;OriansJ&gt;</a></span><span class="message">every language has advantages, otherwise who would bother to use them?</span></div><div class="line" id="005038"><span class="nick" style="color:#2e2a4a"><a href="#005038" label="[00:50:38]">&lt;xentrac&gt;</a></span><span class="message">f =&gt; g =&gt; x =&gt; f(x, g(x)) or if you like f(x)(g(x))</span></div><div class="line" id="005205"><span class="nick" style="color:#2e2a4a"><a href="#005205" label="[00:52:05]">&lt;xentrac&gt;</a></span><span class="message">also V8 produces faster code than most Scheme compilers</span></div><div class="line" id="005228"><span class="nick" style="color:#2e2a4a"><a href="#005228" label="[00:52:28]">&lt;xentrac&gt;</a></span><span class="message">which is a technical advantage that arises from a social advantage, since Scheme is probably less difficult to optimize</span></div><div class="line" id="005340"><span class="nick" style="color:#2e2a4a"><a href="#005340" label="[00:53:40]">&lt;xentrac&gt;</a></span><span class="message">I think one of the significant choices that made Stallman amazing at writing a C compiler was specifically taking an AI/Lisp approach to the problem of writing a compiler</span></div><div class="line" id="005402"><span class="nick" style="color:#2e2a4a"><a href="#005402" label="[00:54:02]">&lt;xentrac&gt;</a></span><span class="message">which turned out to give better results with less effort than most of the vendor compilers</span></div><div class="line" id="005432"><span class="nick" style="color:#2e2a4a"><a href="#005432" label="[00:54:32]">&lt;xentrac&gt;</a></span><span class="message">TI DSPs for many years used a C compiler that was actually written in Lisp, but that wasn't really consonant with Stallman's goal</span></div><div class="line" id="005727"><span class="nick" style="color:#2e2a4a"><a href="#005727" label="[00:57:27]">&lt;xentrac&gt;</a></span><span class="message">I think JS has all of the compiler-writing-relevant advantages that Lisp had at the time, and there are better languages for writing compilers in today</span></div><div class="line" id="005727"><span class="nick" style="color:#2e2a4a"><a href="#005727" label="[00:57:27]">&lt;xentrac&gt;</a></span><span class="message">like Haskell or OCaml</span></div><div class="line" id="005753"><span class="nick" style="color:#2e2a4a"><a href="#005753" label="[00:57:53]">&lt;xentrac&gt;</a></span><span class="message">I think npm has been a big advantage for Node, but I don't know Haskell well enough to compare npm to Hackage.  is there an npm equivalent for Scheme?  Raven, Akku, the Racket Package Index?</span></div><div class="line" id="005849"><span class="nick" style="color:#8dd3c7"><a href="#005849" label="[00:58:49]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: perhaps I see JS from a very different perspective.</span></div><div class="line" id="005919"><span class="nick" style="color:#8dd3c7"><a href="#005919" label="[00:59:19]">&lt;OriansJ&gt;</a></span><span class="message">It is generally lazy, inefficient and very poorly engineered software.</span></div><div class="line" id="005954"><span class="nick" style="color:#8dd3c7"><a href="#005954" label="[00:59:54]">&lt;OriansJ&gt;</a></span><span class="message">Leaning heavily on pyramid building levels of human suffering to get mediocre performance.</span></div><div class="line" id="010036"><span class="nick" style="color:#2e2a4a"><a href="#010036" label="[01:00:36]">&lt;xentrac&gt;</a></span><span class="message">the Racket thing seems to have 1400 packages, Raven has like 25, Akku has 278</span></div><div class="line" id="010106"><span class="nick" style="color:#8dd3c7"><a href="#010106" label="[01:01:06]">&lt;OriansJ&gt;</a></span><span class="message">also outside of standard libraries, why bother supporting packages?</span></div><div class="line" id="010113"><span class="nick" style="color:#2e2a4a"><a href="#010113" label="[01:01:13]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's how I saw JS in 2000 before I started programming in it</span></div><div class="line" id="010137"><span class="nick" style="color:#8dd3c7"><a href="#010137" label="[01:01:37]">&lt;OriansJ&gt;</a></span><span class="message">why import a package to see if a number is even or odd?</span></div><div class="line" id="010159"><span class="nick" style="color:#8dd3c7"><a href="#010159" label="[01:01:59]">&lt;OriansJ&gt;</a></span><span class="message">That is just stupidly bad engineering.</span></div><div class="line" id="010237"><span class="nick" style="color:#2e2a4a"><a href="#010237" label="[01:02:37]">&lt;xentrac&gt;</a></span><span class="message">now JS's performance is, as I said, better than most Schemes, although still much poorer than C or LuaJIT</span></div><div class="line" id="010238"><span class="nick" style="color:#8dd3c7"><a href="#010238" label="[01:02:38]">&lt;OriansJ&gt;</a></span><span class="message">I could understand if one imported a package to support HTTPS or bitorrent or another complex protocol</span></div><div class="line" id="010301"><span class="nick" style="color:#8dd3c7"><a href="#010301" label="[01:03:01]">&lt;OriansJ&gt;</a></span><span class="message">but the sheer number of questionable things in JS packages is just beyound the pale</span></div><div class="line" id="010328"><span class="nick" style="color:#2e2a4a"><a href="#010328" label="[01:03:28]">&lt;xentrac&gt;</a></span><span class="message">well, by reducing the costs of software reuse to such a minuscule level, npm guarantees that many packages will have very little value</span></div><div class="line" id="010342"><span class="nick" style="color:#2e2a4a"><a href="#010342" label="[01:03:42]">&lt;xentrac&gt;</a></span><span class="message">using leftpad really doesn't save you a lot of work</span></div><div class="line" id="010401"><span class="nick" style="color:#8dd3c7"><a href="#010401" label="[01:04:01]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: and enables a backdoor to be slid in quietly</span></div><div class="line" id="010409"><span class="nick" style="color:#8dd3c7"><a href="#010409" label="[01:04:09]">&lt;OriansJ&gt;</a></span><span class="message">again</span></div><div class="line" id="010411"><span class="nick" style="color:#2e2a4a"><a href="#010411" label="[01:04:11]">&lt;xentrac&gt;</a></span><span class="message">but it's excellent evidence that npm makes the costs of software reuse quite low for most people</span></div><div class="line" id="010425"><span class="nick" style="color:#8dd3c7"><a href="#010425" label="[01:04:25]">&lt;OriansJ&gt;</a></span><span class="message">which is a bad idea to a degree</span></div><div class="line" id="010428"><span class="nick" style="color:#2e2a4a"><a href="#010428" label="[01:04:28]">&lt;xentrac&gt;</a></span><span class="message">less so perhaps for those of us who are worried about security ;)</span></div><div class="line" id="010454"><span class="nick" style="color:#8dd3c7"><a href="#010454" label="[01:04:54]">&lt;OriansJ&gt;</a></span><span class="message">why bother running code you can't trust?</span></div><div class="line" id="010502"><span class="nick" style="color:#2e2a4a"><a href="#010502" label="[01:05:02]">&lt;xentrac&gt;</a></span><span class="message">it's fun</span></div><div class="line" id="010512"><span class="nick" style="color:#2e2a4a"><a href="#010512" label="[01:05:12]">&lt;xentrac&gt;</a></span><span class="message">also, it can be profitable</span></div><div class="line" id="010524"><span class="nick" style="color:#8dd3c7"><a href="#010524" label="[01:05:24]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: for whom?</span></div><div class="line" id="010539"><span class="nick" style="color:#8dd3c7"><a href="#010539" label="[01:05:39]">&lt;OriansJ&gt;</a></span><span class="message">the person who just stole your bank credentials?</span></div><div class="line" id="010546"><span class="nick" style="color:#2e2a4a"><a href="#010546" label="[01:05:46]">&lt;xentrac&gt;</a></span><span class="message">especially for them!</span></div><div class="line" id="010607"><span class="nick" style="color:#8dd3c7"><a href="#010607" label="[01:06:07]">&lt;OriansJ&gt;</a></span><span class="message">thanks to your bank not doing a proper audit of their JS code pulled via NPM?</span></div><div class="line" id="010620"><span class="nick" style="color:#2e2a4a"><a href="#010620" label="[01:06:20]">&lt;xentrac&gt;</a></span><span class="message">also for the company that built the bank's site</span></div><div class="line" id="010628"><span class="nick" style="color:#8dd3c7"><a href="#010628" label="[01:06:28]">&lt;OriansJ&gt;</a></span><span class="message">we are better than this</span></div><div class="line" id="010650"><span class="nick" style="color:#2e2a4a"><a href="#010650" label="[01:06:50]">&lt;xentrac&gt;</a></span><span class="message">I'm just as worried about whether a prototype I'm slapping together to try out a UI prototype is &quot;stupidly bad engineering&quot; as I am worried about whether my shopping list is &quot;stupidly bad writing&quot;</span></div><div class="line" id="010725"><span class="nick" style="color:#8dd3c7"><a href="#010725" label="[01:07:25]">&lt;OriansJ&gt;</a></span><span class="message">we shouldn't have infinitely nested bootstrap dependencies hiding god knows what as the basis of anything we depend upon for real business.</span></div><div class="line" id="010728"><span class="nick" style="color:#2e2a4a"><a href="#010728" label="[01:07:28]">&lt;xentrac&gt;</a></span><span class="message">which, to be clear, it is.  my shopping list is poorly written</span></div><div class="line" id="010740"><span class="nick" style="color:#2e2a4a"><a href="#010740" label="[01:07:40]">&lt;xentrac&gt;</a></span><span class="message">oh, I agree</span></div><div class="line" id="010818"><span class="nick" style="color:#2e2a4a"><a href="#010818" label="[01:08:18]">&lt;xentrac&gt;</a></span><span class="message">but lots of people accept the risks because the tradeoffs seem reasonable and the wins are big</span></div><div class="line" id="010905"><span class="nick" style="color:#2e2a4a"><a href="#010905" label="[01:09:05]">&lt;xentrac&gt;</a></span><span class="message">I was pretty shocked at the number of dependencies of a simple Rails app when I did some work with a Rails consultancy in like 2012 but it's nothing compared to what's in an empty app from create-react-app</span></div><div class="line" id="010951"><span class="nick" style="color:#2e2a4a"><a href="#010951" label="[01:09:51]">&lt;xentrac&gt;</a></span><span class="message">anyway, having more libraries available generally makes you more powerful as a programmer, at least if you have some way to find the libraries you need</span></div><div class="line" id="011105"><span class="nick" style="color:#2e2a4a"><a href="#011105" label="[01:11:05]">&lt;xentrac&gt;</a></span><span class="message">and the fact that JS gets used for writing lazy, inefficient, and very poorly engineered software is no more a black mark against it than the fact that English gets used for saying lazy, inefficient, and very poorly written sentences and speeches</span></div><div class="line" id="011154"><span class="nick" style="color:#2e2a4a"><a href="#011154" label="[01:11:54]">&lt;xentrac&gt;</a></span><span class="message">on the contrary, the fact that even the most vulgar and ignorant find it to their advantage to climb over the absurd irregularities of English and use it anyway is a powerful testimony to the great advantages of English</span></div><div class="line" id="011250"><span class="nick" style="color:#8dd3c7"><a href="#011250" label="[01:12:50]">&lt;OriansJ&gt;</a></span><span class="message">I honestly feel programming should be an engineering activity. where one thinks about what they code and are willing to admit when they did the wrong thing and try to fix it.</span></div><div class="line" id="011304"><span class="nick" style="color:#2e2a4a"><a href="#011304" label="[01:13:04]">&lt;xentrac&gt;</a></span><span class="message">That's definitely the right way to do programming in an engineering context</span></div><div class="line" id="011321"><span class="nick" style="color:#2e2a4a"><a href="#011321" label="[01:13:21]">&lt;xentrac&gt;</a></span><span class="message">But there are lots of other reasons to program</span></div><div class="line" id="011353"><span class="nick" style="color:#8dd3c7"><a href="#011353" label="[01:13:53]">&lt;OriansJ&gt;</a></span><span class="message">Look, I program for the benefit of society as a whole.</span></div><div class="line" id="011357"><span class="nick" style="color:#2e2a4a"><a href="#011357" label="[01:13:57]">&lt;xentrac&gt;</a></span><span class="message">aside from JS, Node is great because it comes with a fairly comprehensive asynchronous I/O library, and the only other language I know of for which that's true is Tcl, which has big disadvantages of its own</span></div><div class="line" id="011447"><span class="nick" style="color:#2e2a4a"><a href="#011447" label="[01:14:47]">&lt;xentrac&gt;</a></span><span class="message">I appreciate it!  But not everybody does; a lot of people program because they like it, or because it's a medium for them to communicate what they want to communicate, or because they have a repetitive task they would benefit from automating, and that's okay</span></div><div class="line" id="011645"><span class="nick" style="color:#8dd3c7"><a href="#011645" label="[01:16:45]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: selfish goals only last until you scratch enough of the itch to stop feeling the pain. Real progress is when the goals are bigger than you.</span></div><div class="line" id="011650"><span class="nick" style="color:#2e2a4a"><a href="#011650" label="[01:16:50]">&lt;xentrac&gt;</a></span><span class="message">We have derived enormous benefits from the limited extent to which even the smallest-minded people can see that their interests are aligned with ours</span></div><div class="line" id="011707"><span class="nick" style="color:#8dd3c7"><a href="#011707" label="[01:17:07]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: agreed</span></div><div class="line" id="011744"><span class="nick" style="color:#8dd3c7"><a href="#011744" label="[01:17:44]">&lt;OriansJ&gt;</a></span><span class="message">but how many people stopped short of solving real social problems correctly forever because they finished scratching their own itch?</span></div><div class="line" id="011817"><span class="nick" style="color:#8dd3c7"><a href="#011817" label="[01:18:17]">&lt;OriansJ&gt;</a></span><span class="message">Look, I assume everyone will utlimately act in their own selfish interests</span></div><div class="line" id="011820"><span class="nick" style="color:#2e2a4a"><a href="#011820" label="[01:18:20]">&lt;xentrac&gt;</a></span><span class="message">&quot;It is not from the benevolence of the butcher, the brewer, or the baker that we expect our dinner,&quot; etc.  The great breakthrough of free software was to find a way for self-interest to succeed in solving real social problems by contributing to a shared commons, due to the replication power of general-purpose computers.</span></div><div class="line" id="011904"><span class="nick" style="color:#2e2a4a"><a href="#011904" label="[01:19:04]">&lt;xentrac&gt;</a></span><span class="message">even if those problems aren't solved correctly, an imperfect solution is often better than none.</span></div><div class="line" id="012003"><span class="nick" style="color:#2e2a4a"><a href="#012003" label="[01:20:03]">&lt;xentrac&gt;</a></span><span class="message">back to JS, I really like it, even though sometimes I'm writing things that aren't lazy, inefficient, and very poorly engineered.  (Sometimes I am!)</span></div><div class="line" id="012038"><span class="nick" style="color:#2e2a4a"><a href="#012038" label="[01:20:38]">&lt;xentrac&gt;</a></span><span class="message">but I like it for doing things properly and efficiently for much the same reasons that it's good for doing things lazily and inefficiently</span></div><div class="line" id="012124"><span class="nick" style="color:#8dd3c7"><a href="#012124" label="[01:21:24]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: it is just one tool in the toolbox we have collectively made together.</span></div><div class="line" id="012129"><span class="nick" style="color:#2e2a4a"><a href="#012129" label="[01:21:29]">&lt;xentrac&gt;</a></span><span class="message">namely, it's a higher-order garbage-collected language with a reasonable OO system, a bitchin compiler, and excellent support in interstices where nothing else will work.</span></div><div class="line" id="012146"><span class="nick" style="color:#2e2a4a"><a href="#012146" label="[01:21:46]">&lt;xentrac&gt;</a></span><span class="message">Also, its syntax is pretty reasonable, which is a nice plus.</span></div><div class="line" id="012207"><span class="nick" style="color:#2e2a4a"><a href="#012207" label="[01:22:07]">&lt;xentrac&gt;</a></span><span class="message">Also, its debugging tools are a fricking dream.</span></div><div class="line" id="012238"><span class="nick" style="color:#8dd3c7"><a href="#012238" label="[01:22:38]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: there are no magic languages; only cases where languages are a great fit for the problem at hand.</span></div><div class="line" id="012242"><span class="nick" style="color:#2e2a4a"><a href="#012242" label="[01:22:42]">&lt;xentrac&gt;</a></span><span class="message">I still use Python pretty often though, and Lua also has a special place in my heart.</span></div><div class="line" id="012314"><span class="nick" style="color:#2e2a4a"><a href="#012314" label="[01:23:14]">&lt;xentrac&gt;</a></span><span class="message">I think there are better and worse languages, though, even though the best language for a particular thing may not be the best language for something else.</span></div><div class="line" id="012400"><span class="nick" style="color:#2e2a4a"><a href="#012400" label="[01:24:00]">&lt;xentrac&gt;</a></span><span class="message">JS wouldn't be any good for programming an antilock braking system, though, and it would be pretty challenging to write an OS (kernel) in.</span></div><div class="line" id="012553"><span class="nick" style="color:#8dd3c7"><a href="#012553" label="[01:25:53]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: have you seen <a rel="nofollow" href="https://projecthawkthorne.com/">https://projecthawkthorne.com/</a>  ?</span></div><div class="line" id="012640"><span class="nick" style="color:#2e2a4a"><a href="#012640" label="[01:26:40]">&lt;xentrac&gt;</a></span><span class="message">no!  it looks cute!</span></div><div class="line" id="015733"><span class="nick" style="color:#8dd3c7"><a href="#015733" label="[01:57:33]">&lt;OriansJ&gt;</a></span><span class="message">JS appeals to the short term thinking patterns we are all vulnerable to. But we need to think long term if we wish to do what is best for the generations that follow us. Moore's law in regards to shrinking transistors and Dennard scaling is dead. Koomey's law is approaching its final limits. The limitless resources dreamed of in years past will never appear. We must accept reality and sacrifice short term advantage if we wish to</span></div><div class="line" id="015733"><span class="nick" style="color:#8dd3c7"><a href="#015733" label="[01:57:33]">&lt;OriansJ&gt;</a></span><span class="message">survive.</span></div><div class="line" id="015906"><span class="nick" style="color:#8dd3c7"><a href="#015906" label="[01:59:06]">&lt;OriansJ&gt;</a></span><span class="message">bootstrapping provides no short term advantages. Economically no one cares, not even the groups that desperately should.</span></div><div class="line" id="015938"><span class="nick" style="color:#8dd3c7"><a href="#015938" label="[01:59:38]">&lt;OriansJ&gt;</a></span><span class="message">How many cryptocurrencies have funded such developments?</span></div><div class="line" id="015951"><span class="nick" style="color:#8dd3c7"><a href="#015951" label="[01:59:51]">&lt;OriansJ&gt;</a></span><span class="message">how many banks, militaries or governments?</span></div><div class="line" id="020102"><span class="nick" style="color:#8dd3c7"><a href="#020102" label="[02:01:02]">&lt;OriansJ&gt;</a></span><span class="message">There is no fame in this work; no great demand.</span></div><div class="line" id="020645"><span class="nick" style="color:#6b8072"><a href="#020645" label="[02:06:45]">&lt;dddddd&gt;</a></span><span class="message">Future generations will invent neutrino-computing or something like that we can't even imagine :P We'll be here in the meantime.</span></div><div class="line" id="021042"><span class="nick" style="color:#8dd3c7"><a href="#021042" label="[02:10:42]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: we already have quantum machines, but JS is not the language one uses on such machines.</span></div><div class="line" id="021107"><span class="nick" style="color:#8dd3c7"><a href="#021107" label="[02:11:07]">&lt;OriansJ&gt;</a></span><span class="message">Its assembly (and scheme like assembly)</span></div><div class="line" id="021230"><span class="nick" style="color:#8dd3c7"><a href="#021230" label="[02:12:30]">&lt;OriansJ&gt;</a></span><span class="message">because programmer effort is cheaper again.</span></div><div class="line" id="021251"><span class="nick" style="color:#8dd3c7"><a href="#021251" label="[02:12:51]">&lt;OriansJ&gt;</a></span><span class="message">The wheel of reincarnation rolls on again.</span></div><div class="line" id="021358"><span class="nick" style="color:#6b8072"><a href="#021358" label="[02:13:58]">&lt;dddddd&gt;</a></span><span class="message">quantum stage0 when? :D</span></div><div class="line" id="021530"><span class="nick" style="color:#8dd3c7"><a href="#021530" label="[02:15:30]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: no need.</span></div><div class="line" id="021557"><span class="nick" style="color:#8dd3c7"><a href="#021557" label="[02:15:57]">&lt;OriansJ&gt;</a></span><span class="message">a $1 computer is sufficient to bootstrap GCC and software for a quantum computer</span></div><div class="line" id="021623"><span class="nick" style="color:#8dd3c7"><a href="#021623" label="[02:16:23]">&lt;OriansJ&gt;</a></span><span class="message">which right now costs in the Millions of Dollars</span></div><div class="line" id="021702"><span class="nick" style="color:#8dd3c7"><a href="#021702" label="[02:17:02]">&lt;OriansJ&gt;</a></span><span class="message">honestly, there are many ideas that are good for hardware architectures that are just plan bad for bootstrapping (like tagged memory)</span></div><div class="line" id="022250"><span class="nick" style="color:#8dd3c7"><a href="#022250" label="[02:22:50]">&lt;OriansJ&gt;</a></span><span class="message">I enjoy bootstrapping but I understand that there are places where it just doesn't make sense to go there.</span></div><div class="line" id="023237"><span class="nick" style="color:#8dd3c7"><a href="#023237" label="[02:32:37]">&lt;OriansJ&gt;</a></span><span class="message">like a brainfuck CPU (those actually exist) or OISC processors</span></div><div class="line" id="025452"><span class="nick" style="color:#2e2a4a"><a href="#025452" label="[02:54:52]">&lt;xentrac&gt;</a></span><span class="message">Yeah, I think there's definitely something to that: to some extent rapid feedback crowds out deep thinking in programming just as in any other discipline.</span></div><div class="line" id="025500"><span class="nick" style="color:#2e2a4a"><a href="#025500" label="[02:55:00]">&lt;xentrac&gt;</a></span><span class="message">But I think they're complementary virtues.</span></div><div class="line" id="043423"><span class="nick" style="color:#80b1d3"><a href="#043423" label="[04:34:23]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'd say there is some minor fame at the end of this, I expect this project of projects will be recognized with a FSF award some day</span></div><div class="line" id="095020"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="154406"><span class="nick" style="color:#6d2462"><a href="#154406" label="[15:44:06]">&lt;bauen1&gt;</a></span><span class="message">it appears that switching to user space is working (and causing a syscall interrupt)</span></div><div class="line" id="154429"><span class="nick" style="color:#6d2462"><a href="#154429" label="[15:44:29]">&lt;bauen1&gt;</a></span><span class="message">now for the fun part of making everything preemptible, and have it not break on nested interrupts ...</span></div><div class="line" id="160957"><span class="nick" style="color:#2e2a4a"><a href="#160957" label="[16:09:57]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="161018"><span class="nick" style="color:#2e2a4a"><a href="#161018" label="[16:10:18]">&lt;xentrac&gt;</a></span><span class="message">are nested interrupts really necessary?  Can you just turn them off?</span></div><div class="line" id="161049"><span class="nick" style="color:#2e2a4a"><a href="#161049" label="[16:10:49]">&lt;xentrac&gt;</a></span><span class="message">or is this an experiment in seeing how far you can go with preemptibility, as opposed to writing your first kernel?</span></div><div class="line" id="170302"><span class="nick" style="color:#6d2462"><a href="#170302" label="[17:03:02]">&lt;bauen1&gt;</a></span><span class="message">xentrac: i guess nested interrupts are the wrong term, but bad things happend if you have kernel code that disabled interrupts call kernel code that assumes it has to disable and reenable interrupts</span></div><div class="line" id="170911"><span class="nick" style="color:#234e69"><a href="#170911" label="[17:09:11]">&lt;`Lion&gt;</a></span><span class="message">very interruptive things would happen</span></div><div class="line" id="171948"><span class="nick">***</span><span class="message notice">roptat_ is now known as roptat</span></div><div class="line" id="172445"><span class="nick" style="color:#2e2a4a"><a href="#172445" label="[17:24:45]">&lt;xentrac&gt;</a></span><span class="message">bauen1: nested interrupts are when an interrupt happens while you're in an interrupt handler for, generally, a different interrupt.  some CPUs can handle them</span></div><div class="line" id="220514"><span class="nick" style="color:#8dd3c7"><a href="#220514" label="[22:05:14]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: who cares if they are necessary? If bauen1 wants to have that in their kernel, who are we to say otherwise? Whoever does decides, no exceptions.</span></div><div class="line" id="220538"><span class="nick" style="color:#2e2a4a"><a href="#220538" label="[22:05:38]">&lt;xentrac&gt;</a></span><span class="message">oh, for sure, I didn't mean to deprecate them</span></div><div class="line" id="220608"><span class="nick" style="color:#2e2a4a"><a href="#220608" label="[22:06:08]">&lt;xentrac&gt;</a></span><span class="message">just wondering if they were writing reentrant interrupt handlers because they didn't know there was an alternative</span></div><div class="line" id="220653"><span class="nick" style="color:#2e2a4a"><a href="#220653" label="[22:06:53]">&lt;xentrac&gt;</a></span><span class="message">but it seems like they weren't really talking about nested interrupts but rather keeping their prologues and epilogues consistent with their callsites</span></div><div class="line" id="220728"><span class="nick" style="color:#2e2a4a"><a href="#220728" label="[22:07:28]">&lt;xentrac&gt;</a></span><span class="message">nested interrupts are definitely a very worthwhile thing to implement for some kinds of real-time OSes</span></div><div class="line" id="223123"><span class="nick" style="color:#2e2a4a"><a href="#223123" label="[22:31:23]">&lt;xentrac&gt;</a></span><span class="message">and, as you say, certainly a valid thing to implement just because you want to, but in other OSes it's often a more practical choice to just not use interrupt priorities</span></div><br /></div></body></html>