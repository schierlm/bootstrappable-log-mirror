<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-11-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025221"><span class="nick" style="color:#389600"><a href="#025221" label="[02:52:21]">&lt;Googulator&gt;</a></span><span class="message">Had this idea today to further secure the bootstrap process by encrypting the newly created FS on the disk, e.g. using luks, to exclude the HDD firmware from potentially tampering with the build</span></div><div class="line" id="025304"><span class="nick" style="color:#389600"><a href="#025304" label="[02:53:04]">&lt;Googulator&gt;</a></span><span class="message">If all that the HDD firmware ever sees is ciphertext, it can't possibly inject a backdoor, unless it cracks the encryption first</span></div><div class="line" id="025613"><span class="nick" style="color:#389600"><a href="#025613" label="[02:56:13]">&lt;Googulator&gt;</a></span><span class="message">That leaves only the boot drive (which isn't necessarily the final HDD holding the bootstrapped system - see my &quot;trusted Flash drive&quot; plan), the CPU, the RAM, the chipset, and the NIC handling plaintext</span></div><div class="line" id="025648"><span class="nick" style="color:#389600"><a href="#025648" label="[02:56:48]">&lt;Googulator&gt;</a></span><span class="message">NIC can be eliminated by including anything needed before HTTPS is available in srcfs</span></div><div class="line" id="025759"><span class="nick" style="color:#389600"><a href="#025759" label="[02:57:59]">&lt;Googulator&gt;</a></span><span class="message">Oh, and of course, the BIOS / system firmware, at least on x86</span></div><div class="line" id="025858"><span class="nick" style="color:#389600"><a href="#025858" label="[02:58:58]">&lt;Googulator&gt;</a></span><span class="message">RAM I think we can reasonably trust, as current RAM technology is pure storage</span></div><div class="line" id="025913"><span class="nick" style="color:#389600"><a href="#025913" label="[02:59:13]">&lt;Googulator&gt;</a></span><span class="message">No place to secretly hide processing capability</span></div><div class="line" id="025939"><span class="nick" style="color:#389600"><a href="#025939" label="[02:59:39]">&lt;Googulator&gt;</a></span><span class="message">CPU... well, if you can't trust that, all bets are off</span></div><div class="line" id="030020"><span class="nick" style="color:#389600"><a href="#030020" label="[03:00:20]">&lt;Googulator&gt;</a></span><span class="message">Chipset generally does no processing on its own, though watch out for things like Intel ME...</span></div><div class="line" id="030108"><span class="nick" style="color:#389600"><a href="#030108" label="[03:01:08]">&lt;Googulator&gt;</a></span><span class="message">For the bootstrap drive, I've already outlined my plans</span></div><div class="line" id="030348"><span class="nick" style="color:#389600"><a href="#030348" label="[03:03:48]">&lt;Googulator&gt;</a></span><span class="message">And for the BIOS - ideally we can bootstrap something like u-boot, coreboot or edk2 onntop of just the CPU's embedded boot ROM, which is probably unavoidable as the last vendor binary in the boot path</span></div><div class="line" id="030458"><span class="nick" style="color:#389600"><a href="#030458" label="[03:04:58]">&lt;Googulator&gt;</a></span><span class="message">(though bootstrapping RAM training could get tricky - again, RK3588 or another similar SoC with significant SRAM available right from the reset vector is helpful here)</span></div><div class="line" id="030616"><span class="nick" style="color:#389600"><a href="#030616" label="[03:06:16]">&lt;Googulator&gt;</a></span><span class="message">Also, the NIC interfering isn't really an issue - we already do hash checking on everything that comes through the network before using it</span></div><div class="line" id="030721"><span class="nick" style="color:#389600"><a href="#030721" label="[03:07:21]">&lt;Googulator&gt;</a></span><span class="message">So if the NIC injects a backdoor, it will cause the hash to not match, unless the attack also includes colliding SHA-256.</span></div><div class="line" id="030841"><span class="nick" style="color:#8dd3c7"><a href="#030841" label="[03:08:41]">&lt;notgull&gt;</a></span><span class="message">Are there CPU boot ROMs that are open source?</span></div><div class="line" id="035006"><span class="nick" style="color:#2e2a4a"><a href="#035006" label="[03:50:06]">&lt;pabs3&gt;</a></span><span class="message">does the NIC need to be involved in bootstrap?</span></div><div class="line" id="035106"><span class="nick" style="color:#6b8072"><a href="#035106" label="[03:51:06]">&lt;oriansj&gt;</a></span><span class="message">notgull: not yet but we can change that too</span></div><div class="line" id="035125"><span class="nick" style="color:#2e2a4a"><a href="#035125" label="[03:51:25]">&lt;pabs3&gt;</a></span><span class="message">surely some of the RISC-V ones are?</span></div><div class="line" id="035322"><span class="nick" style="color:#6b8072"><a href="#035322" label="[03:53:22]">&lt;oriansj&gt;</a></span><span class="message">pabs3: perhaps but I haven't seen one for a RISC-V chip that I can buy and use yet.</span></div><div class="line" id="035530"><span class="nick" style="color:#6b8072"><a href="#035530" label="[03:55:30]">&lt;oriansj&gt;</a></span><span class="message">Googulator: it only takes about 3K gates too backdoor a RAM chip; which on a 1Gb chip isnt much</span></div><div class="line" id="035642"><span class="nick" style="color:#389600"><a href="#035642" label="[03:56:42]">&lt;Googulator&gt;</a></span><span class="message">Open-source doesn't help with CPU boot ROMs</span></div><div class="line" id="035651"><span class="nick" style="color:#389600"><a href="#035651" label="[03:56:51]">&lt;Googulator&gt;</a></span><span class="message">Because they're true mask ROM</span></div><div class="line" id="035709"><span class="nick" style="color:#389600"><a href="#035709" label="[03:57:09]">&lt;Googulator&gt;</a></span><span class="message">You can't swap it out for a source-built version</span></div><div class="line" id="035816"><span class="nick" style="color:#389600"><a href="#035816" label="[03:58:16]">&lt;Googulator&gt;</a></span><span class="message">&amp; a CPU with a backdoored mask ROM will probably also include a copy of a clean version of the boot ROM &amp; redirect subsequent attempts to read it to the clean one, thwarting comparison with a source-compiled one</span></div><div class="line" id="040337"><span class="nick" style="color:#389600"><a href="#040337" label="[04:03:37]">&lt;Googulator&gt;</a></span><span class="message">Meanwhile, testing the &quot;simplify&quot; branch - why do we now predownload guile-3.0.9, and especially why in 2 copies (once as gz, once as xz)?</span></div><div class="line" id="040412"><span class="nick" style="color:#389600"><a href="#040412" label="[04:04:12]">&lt;Googulator&gt;</a></span><span class="message">In fact, looks like it now predownloads everything</span></div><div class="line" id="040427"><span class="nick" style="color:#389600"><a href="#040427" label="[04:04:27]">&lt;Googulator&gt;</a></span><span class="message">fossy: is this a bug?</span></div><div class="line" id="040535"><span class="nick" style="color:#389600"><a href="#040535" label="[04:05:35]">&lt;Googulator&gt;</a></span><span class="message">(I'm testing on bare metal with kernel bootstrap)</span></div><div class="line" id="040727"><span class="nick" style="color:#389600"><a href="#040727" label="[04:07:27]">&lt;Googulator&gt;</a></span><span class="message">oriansj: can that be done in practice on a modern (LP)DDR4/5 chip while still having it function as a proper DRAM, including performance?</span></div><div class="line" id="040914"><span class="nick" style="color:#389600"><a href="#040914" label="[04:09:14]">&lt;Googulator&gt;</a></span><span class="message">Assuming APTs don't have access to silicon manufacturing technology far more advanced than what legit DRAM makers currently use</span></div><div class="line" id="042410"><span class="nick" style="color:#389600"><a href="#042410" label="[04:24:10]">&lt;Googulator&gt;</a></span><span class="message">fossy: right before I was about to boot into simplify on bare metal, I can see a reason why kernel bootstrap could be failing</span></div><div class="line" id="042456"><span class="nick" style="color:#389600"><a href="#042456" label="[04:24:56]">&lt;Googulator&gt;</a></span><span class="message">The ext3 root partition is never created, only /external is</span></div><div class="line" id="042508"><span class="nick" style="color:#389600"><a href="#042508" label="[04:25:08]">&lt;Googulator&gt;</a></span><span class="message">(why the move back to ext3, btw?)</span></div><div class="line" id="042612"><span class="nick" style="color:#389600"><a href="#042612" label="[04:26:12]">&lt;Googulator&gt;</a></span><span class="message">sfdisk is never called during bootstrap, while generator.py only creates /external</span></div><div class="line" id="043041"><span class="nick" style="color:#80b1d3"><a href="#043041" label="[04:30:41]">&lt;fossy&gt;</a></span><span class="message">Googulator: yes, bug/not yet implemented, i haven't quite fixed up the external sources code</span></div><div class="line" id="043108"><span class="nick" style="color:#389600"><a href="#043108" label="[04:31:08]">&lt;Googulator&gt;</a></span><span class="message">Why is it even hitting the externals path?</span></div><div class="line" id="043114"><span class="nick" style="color:#80b1d3"><a href="#043114" label="[04:31:14]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="043121"><span class="nick" style="color:#80b1d3"><a href="#043121" label="[04:31:21]">&lt;fossy&gt;</a></span><span class="message">why is what hitting the externals path</span></div><div class="line" id="043156"><span class="nick" style="color:#389600"><a href="#043156" label="[04:31:56]">&lt;Googulator&gt;</a></span><span class="message">Why is externals.img even being created? I didn't specify --external-sources</span></div><div class="line" id="043224"><span class="nick" style="color:#80b1d3"><a href="#043224" label="[04:32:24]">&lt;fossy&gt;</a></span><span class="message">see above, the external-sources handling/lack thereof is not quite fixed up yet</span></div><div class="line" id="043252"><span class="nick" style="color:#80b1d3"><a href="#043252" label="[04:32:52]">&lt;fossy&gt;</a></span><span class="message">regarding creation of ext3 root partition, what partition are you talking about exactly?</span></div><div class="line" id="043312"><span class="nick" style="color:#389600"><a href="#043312" label="[04:33:12]">&lt;Googulator&gt;</a></span><span class="message">The one that becomes the root partition after kexecing into Linux</span></div><div class="line" id="043328"><span class="nick" style="color:#80b1d3"><a href="#043328" label="[04:33:28]">&lt;fossy&gt;</a></span><span class="message">ah, yes, that is as of yet unimplemented - we do not get anywhere nearly that far yet in kernel bootstrap mode</span></div><div class="line" id="043331"><span class="nick" style="color:#389600"><a href="#043331" label="[04:33:31]">&lt;Googulator&gt;</a></span><span class="message">The mount command is there, but not the mkfs that creates it</span></div><div class="line" id="043332"><span class="nick" style="color:#80b1d3"><a href="#043332" label="[04:33:32]">&lt;fossy&gt;</a></span><span class="message">it fails with a segfault in make</span></div><div class="line" id="043333"><span class="nick" style="color:#389600"><a href="#043333" label="[04:33:33]">&lt;Googulator&gt;</a></span><span class="message">Oh...</span></div><div class="line" id="043340"><span class="nick" style="color:#389600"><a href="#043340" label="[04:33:40]">&lt;Googulator&gt;</a></span><span class="message">We fail earier than that?</span></div><div class="line" id="043352"><span class="nick" style="color:#80b1d3"><a href="#043352" label="[04:33:52]">&lt;fossy&gt;</a></span><span class="message">yes, and i have no idea why :P</span></div><div class="line" id="043405"><span class="nick" style="color:#389600"><a href="#043405" label="[04:34:05]">&lt;Googulator&gt;</a></span><span class="message">Was there any change to tcc?</span></div><div class="line" id="043422"><span class="nick" style="color:#80b1d3"><a href="#043422" label="[04:34:22]">&lt;fossy&gt;</a></span><span class="message">minorly - but none that are specific to kernel bootstrap</span></div><div class="line" id="043430"><span class="nick" style="color:#80b1d3"><a href="#043430" label="[04:34:30]">&lt;fossy&gt;</a></span><span class="message">just to be completely clear: when using a Linux kernel, it works fine</span></div><div class="line" id="043434"><span class="nick" style="color:#80b1d3"><a href="#043434" label="[04:34:34]">&lt;fossy&gt;</a></span><span class="message">when using kernel bootstrap, it does not work</span></div><div class="line" id="043442"><span class="nick" style="color:#80b1d3"><a href="#043442" label="[04:34:42]">&lt;fossy&gt;</a></span><span class="message">with precisely the same code</span></div><div class="line" id="043453"><span class="nick" style="color:#389600"><a href="#043453" label="[04:34:53]">&lt;Googulator&gt;</a></span><span class="message">Sounds like Fiwix build issue</span></div><div class="line" id="043501"><span class="nick" style="color:#389600"><a href="#043501" label="[04:35:01]">&lt;Googulator&gt;</a></span><span class="message">Or memory layout</span></div><div class="line" id="043548"><span class="nick" style="color:#389600"><a href="#043548" label="[04:35:48]">&lt;Googulator&gt;</a></span><span class="message">IIRC we never use libc to build Fiwix</span></div><div class="line" id="043556"><span class="nick" style="color:#389600"><a href="#043556" label="[04:35:56]">&lt;Googulator&gt;</a></span><span class="message">Just tcc</span></div><div class="line" id="043558"><span class="nick" style="color:#80b1d3"><a href="#043558" label="[04:35:58]">&lt;fossy&gt;</a></span><span class="message">Fiwix build issue, how so? the Fiwix build does not fail, again, the problem is a segmentation fault when make-3.82 runs</span></div><div class="line" id="043615"><span class="nick" style="color:#389600"><a href="#043615" label="[04:36:15]">&lt;Googulator&gt;</a></span><span class="message">I mean Fiwix does get built, but it's wrong</span></div><div class="line" id="043621"><span class="nick" style="color:#80b1d3"><a href="#043621" label="[04:36:21]">&lt;fossy&gt;</a></span><span class="message">ah - right</span></div><div class="line" id="043632"><span class="nick" style="color:#80b1d3"><a href="#043632" label="[04:36:32]">&lt;fossy&gt;</a></span><span class="message">yes, that is not an impossibility</span></div><div class="line" id="043635"><span class="nick" style="color:#389600"><a href="#043635" label="[04:36:35]">&lt;Googulator&gt;</a></span><span class="message">A broken tcc would explain that</span></div><div class="line" id="043704"><span class="nick" style="color:#389600"><a href="#043704" label="[04:37:04]">&lt;Googulator&gt;</a></span><span class="message">Not outright segfaulting or throwing a compilation error, but outputting wrong code</span></div><div class="line" id="043753"><span class="nick" style="color:#389600"><a href="#043753" label="[04:37:53]">&lt;Googulator&gt;</a></span><span class="message">Test running on baremetal now, with some of my fixes from pre-simplify ported</span></div><div class="line" id="043801"><span class="nick" style="color:#80b1d3"><a href="#043801" label="[04:38:01]">&lt;fossy&gt;</a></span><span class="message">memory layout was my first thought. i injected a busybox into fiwix and used that to fill the disk a bit, which did not induce any errors from then just trying to do basic functions, so i don't think its the ramdisk's memory mapping. it could be memory mapping of userspace processes, but i'd be surprised we aren't running into it before...\</span></div><div class="line" id="043847"><span class="nick" style="color:#389600"><a href="#043847" label="[04:38:47]">&lt;Googulator&gt;</a></span><span class="message">Is the final tcc binary from the new 3-step process identical to the old 5-step one?</span></div><div class="line" id="044021"><span class="nick" style="color:#80b1d3"><a href="#044021" label="[04:40:21]">&lt;fossy&gt;</a></span><span class="message">not sure, but 1. simplify branch as pushed is still on 5-step process, i haven't pushed rebase, and 2. now that i have rebased locally, it still fails identically</span></div><div class="line" id="044048"><span class="nick" style="color:#389600"><a href="#044048" label="[04:40:48]">&lt;Googulator&gt;</a></span><span class="message">Also, just noticed: simplify is &quot;22 commits ahead, 27 comits behind master&quot;</span></div><div class="line" id="044053"><span class="nick" style="color:#80b1d3"><a href="#044053" label="[04:40:53]">&lt;fossy&gt;</a></span><span class="message">(repeat) not sure, but 1. simplify branch as pushed is still on 5-step process, i haven't pushed rebase, and 2. now that i have rebased locally, it still fails identically</span></div><div class="line" id="044323"><span class="nick" style="color:#389600"><a href="#044323" label="[04:43:23]">&lt;Googulator&gt;</a></span><span class="message">oh, right... that's a different branch</span></div><div class="line" id="044441"><span class="nick" style="color:#389600"><a href="#044441" label="[04:44:41]">&lt;Googulator&gt;</a></span><span class="message">The make-3.82 that breaks is the one that was built with kaem, right?</span></div><div class="line" id="044456"><span class="nick" style="color:#80b1d3"><a href="#044456" label="[04:44:56]">&lt;fossy&gt;</a></span><span class="message">yep :)</span></div><div class="line" id="044521"><span class="nick" style="color:#80b1d3"><a href="#044521" label="[04:45:21]">&lt;fossy&gt;</a></span><span class="message">i've also checked binary equivalence between fiwix and non-fiwix environments, so it's not irreproducibility</span></div><div class="line" id="044605"><span class="nick" style="color:#80b1d3"><a href="#044605" label="[04:46:05]">&lt;fossy&gt;</a></span><span class="message">Mikaku: how do you tend to debug binaries *within* Fiwix? do you have a gdb build for Fiwix, or is it just good old printf?</span></div><div class="line" id="044903"><span class="nick" style="color:#389600"><a href="#044903" label="[04:49:03]">&lt;Googulator&gt;</a></span><span class="message">That early make-3.82 is checksummed, and I guess it must match if it didn't fail even earlier with a checksum mismatch</span></div><div class="line" id="044916"><span class="nick" style="color:#80b1d3"><a href="#044916" label="[04:49:16]">&lt;fossy&gt;</a></span><span class="message">yeah exactly</span></div><div class="line" id="044920"><span class="nick" style="color:#389600"><a href="#044920" label="[04:49:20]">&lt;Googulator&gt;</a></span><span class="message">That confirms make is being built correctly</span></div><div class="line" id="044948"><span class="nick" style="color:#80b1d3"><a href="#044948" label="[04:49:48]">&lt;fossy&gt;</a></span><span class="message">well, actually, make 3.82 doesn't have same checksum on simplify branch as master</span></div><div class="line" id="044953"><span class="nick" style="color:#80b1d3"><a href="#044953" label="[04:49:53]">&lt;fossy&gt;</a></span><span class="message">but that is to be expected due to path differences</span></div><div class="line" id="045002"><span class="nick" style="color:#80b1d3"><a href="#045002" label="[04:50:02]">&lt;fossy&gt;</a></span><span class="message">(i haven't updated checksums in simplify branch yet iether)</span></div><div class="line" id="045012"><span class="nick" style="color:#80b1d3"><a href="#045012" label="[04:50:12]">&lt;fossy&gt;</a></span><span class="message">either*</span></div><div class="line" id="045059"><span class="nick" style="color:#80b1d3"><a href="#045059" label="[04:50:59]">&lt;fossy&gt;</a></span><span class="message">so make isn't being built irreproducibly, but it could be consistently being built incorrectly in a way that only exposes itself within Fiwix</span></div><div class="line" id="045109"><span class="nick" style="color:#80b1d3"><a href="#045109" label="[04:51:09]">&lt;fossy&gt;</a></span><span class="message">which would be very odd...</span></div><div class="line" id="045132"><span class="nick" style="color:#389600"><a href="#045132" label="[04:51:32]">&lt;Googulator&gt;</a></span><span class="message">My bet would be on Fiwix itself</span></div><div class="line" id="045202"><span class="nick" style="color:#389600"><a href="#045202" label="[04:52:02]">&lt;Googulator&gt;</a></span><span class="message">Make just happens to be what triggers it</span></div><div class="line" id="045217"><span class="nick" style="color:#80b1d3"><a href="#045217" label="[04:52:17]">&lt;fossy&gt;</a></span><span class="message">i agree...</span></div><div class="line" id="045222"><span class="nick" style="color:#389600"><a href="#045222" label="[04:52:22]">&lt;Googulator&gt;</a></span><span class="message">First thing to use fork() maybe?</span></div><div class="line" id="045240"><span class="nick" style="color:#80b1d3"><a href="#045240" label="[04:52:40]">&lt;fossy&gt;</a></span><span class="message">nah, kaem uses fork</span></div><div class="line" id="045319"><span class="nick" style="color:#389600"><a href="#045319" label="[04:53:19]">&lt;Googulator&gt;</a></span><span class="message">Hmm...</span></div><div class="line" id="045345"><span class="nick" style="color:#389600"><a href="#045345" label="[04:53:45]">&lt;Googulator&gt;</a></span><span class="message">define: JOBS = 1 ( KERNEL_BOOTSTRAP == True )</span></div><div class="line" id="045354"><span class="nick" style="color:#389600"><a href="#045354" label="[04:53:54]">&lt;Googulator&gt;</a></span><span class="message">That's different from how it was handled before...</span></div><div class="line" id="045429"><span class="nick" style="color:#80b1d3"><a href="#045429" label="[04:54:29]">&lt;fossy&gt;</a></span><span class="message">defined differently, but functionally the same</span></div><div class="line" id="045431"><span class="nick" style="color:#389600"><a href="#045431" label="[04:54:31]">&lt;Googulator&gt;</a></span><span class="message">Would this mean we're passing -j1 to make now, whereas before, we would pass no -j at all?</span></div><div class="line" id="045455"><span class="nick" style="color:#389600"><a href="#045455" label="[04:54:55]">&lt;Googulator&gt;</a></span><span class="message">&quot;make&quot; and &quot;make -j1&quot; aren't fully synonymous</span></div><div class="line" id="045456"><span class="nick" style="color:#80b1d3"><a href="#045456" label="[04:54:56]">&lt;fossy&gt;</a></span><span class="message">no, patch's make invocation is</span></div><div class="line" id="045501"><span class="nick" style="color:#80b1d3"><a href="#045501" label="[04:55:01]">&lt;fossy&gt;</a></span><span class="message">make -f Makefile PREFIX=${PREFIX}</span></div><div class="line" id="045509"><span class="nick" style="color:#80b1d3"><a href="#045509" label="[04:55:09]">&lt;fossy&gt;</a></span><span class="message">which is identical to before (no ${MAKEJOBS})</span></div><div class="line" id="045518"><span class="nick" style="color:#80b1d3"><a href="#045518" label="[04:55:18]">&lt;fossy&gt;</a></span><span class="message">(patch is first thing to use make)</span></div><div class="line" id="045528"><span class="nick" style="color:#389600"><a href="#045528" label="[04:55:28]">&lt;Googulator&gt;</a></span><span class="message">How does JOBS get passed?</span></div><div class="line" id="045534"><span class="nick" style="color:#389600"><a href="#045534" label="[04:55:34]">&lt;Googulator&gt;</a></span><span class="message">Is it an envvar?</span></div><div class="line" id="045647"><span class="nick" style="color:#80b1d3"><a href="#045647" label="[04:56:47]">&lt;fossy&gt;</a></span><span class="message">MAKEJOBS=&quot;-j${JOBS}&quot;, and then most invocations of make use ${MAKEJOBS}, but not most kaem scripts</span></div><div class="line" id="045716"><span class="nick" style="color:#80b1d3"><a href="#045716" label="[04:57:16]">&lt;fossy&gt;</a></span><span class="message">JOBS is unused until bash, i think</span></div><div class="line" id="045740"><span class="nick" style="color:#80b1d3"><a href="#045740" label="[04:57:40]">&lt;fossy&gt;</a></span><span class="message">(which maybe shouldn't be the case, but that's a separate concern)</span></div><div class="line" id="050123"><span class="nick" style="color:#389600"><a href="#050123" label="[05:01:23]">&lt;Googulator&gt;</a></span><span class="message">OK, so make itself isn't listening for an environment variable named &quot;JOBS&quot;</span></div><div class="line" id="050143"><span class="nick" style="color:#80b1d3"><a href="#050143" label="[05:01:43]">&lt;fossy&gt;</a></span><span class="message">correct</span></div><div class="line" id="050159"><span class="nick" style="color:#389600"><a href="#050159" label="[05:01:59]">&lt;Googulator&gt;</a></span><span class="message">I was worried &quot;JOBS=1 make&quot; would have the same effect as &quot;make -j1&quot;</span></div><div class="line" id="050333"><span class="nick" style="color:#389600"><a href="#050333" label="[05:03:33]">&lt;Googulator&gt;</a></span><span class="message">Do you have a build of Fiwix captured on disk from one of your &quot;Fiwix-with-disk&quot; runs?</span></div><div class="line" id="050400"><span class="nick" style="color:#389600"><a href="#050400" label="[05:04:00]">&lt;Googulator&gt;</a></span><span class="message">I'd like to diff it against a pre-simplify build</span></div><div class="line" id="050904"><span class="nick" style="color:#80b1d3"><a href="#050904" label="[05:09:04]">&lt;fossy&gt;</a></span><span class="message">no, but i can make one reasonably easily</span></div><div class="line" id="050932"><span class="nick" style="color:#80b1d3"><a href="#050932" label="[05:09:32]">&lt;fossy&gt;</a></span><span class="message">i think you will get a huge diff against a pre-simplify build due to the /sysa -&gt; /steps, but happy to provide anyway</span></div><div class="line" id="051058"><span class="nick" style="color:#389600"><a href="#051058" label="[05:10:58]">&lt;Googulator&gt;</a></span><span class="message">Do paths get included in the binary?</span></div><div class="line" id="051124"><span class="nick" style="color:#389600"><a href="#051124" label="[05:11:24]">&lt;Googulator&gt;</a></span><span class="message">Anyway, got [error.o] Segmentation fault on bare metal too</span></div><div class="line" id="051137"><span class="nick" style="color:#389600"><a href="#051137" label="[05:11:37]">&lt;Googulator&gt;</a></span><span class="message">This is the same error as in qemu, right?</span></div><div class="line" id="051341"><span class="nick" style="color:#80b1d3"><a href="#051341" label="[05:13:41]">&lt;fossy&gt;</a></span><span class="message">yes, precisely the same</span></div><div class="line" id="051401"><span class="nick" style="color:#80b1d3"><a href="#051401" label="[05:14:01]">&lt;fossy&gt;</a></span><span class="message">yes, paths do get included in many binaries, mostly due to mes libc + static linking</span></div><div class="line" id="053047"><span class="nick" style="color:#389600"><a href="#053047" label="[05:30:47]">&lt;Googulator&gt;</a></span><span class="message">Hmm... weird binary size limitation or alignment requirement in Fiwix?</span></div><div class="line" id="053101"><span class="nick" style="color:#389600"><a href="#053101" label="[05:31:01]">&lt;Googulator&gt;</a></span><span class="message">If paths are included, they could shift around code</span></div><div class="line" id="053112"><span class="nick" style="color:#389600"><a href="#053112" label="[05:31:12]">&lt;Googulator&gt;</a></span><span class="message">*shift code around</span></div><div class="line" id="053854"><span class="nick" style="color:#389600"><a href="#053854" label="[05:38:54]">&lt;Googulator&gt;</a></span><span class="message">Hmm... this gets even weirder</span></div><div class="line" id="053924"><span class="nick" style="color:#389600"><a href="#053924" label="[05:39:24]">&lt;Googulator&gt;</a></span><span class="message">Just got fiwix built using chroot in both pre- and post-simplify</span></div><div class="line" id="053933"><span class="nick" style="color:#389600"><a href="#053933" label="[05:39:33]">&lt;Googulator&gt;</a></span><span class="message">They're *binary identical*</span></div><div class="line" id="053944"><span class="nick" style="color:#80b1d3"><a href="#053944" label="[05:39:44]">&lt;fossy&gt;</a></span><span class="message">you beat me to it :P</span></div><div class="line" id="054002"><span class="nick" style="color:#80b1d3"><a href="#054002" label="[05:40:02]">&lt;fossy&gt;</a></span><span class="message">i was doing the same thing but you found the conclusion before me</span></div><div class="line" id="054156"><span class="nick" style="color:#80b1d3"><a href="#054156" label="[05:41:56]">&lt;fossy&gt;</a></span><span class="message">oh that would make sense cause fiwix doesnt include libc so path change shouldnt affect it</span></div><div class="line" id="054216"><span class="nick" style="color:#80b1d3"><a href="#054216" label="[05:42:16]">&lt;fossy&gt;</a></span><span class="message">(well unless there was something else going on but apparently there isnt)</span></div><div class="line" id="054540"><span class="nick" style="color:#389600"><a href="#054540" label="[05:45:40]">&lt;Googulator&gt;</a></span><span class="message">Maybe fiwix only gets miscompiled if it's being built under builder-hex0?</span></div><div class="line" id="054658"><span class="nick" style="color:#80b1d3"><a href="#054658" label="[05:46:58]">&lt;fossy&gt;</a></span><span class="message">possibly, what's the sha for the fiwix built in chroot, i'll check the sha when built under hex0</span></div><div class="line" id="054709"><span class="nick" style="color:#80b1d3"><a href="#054709" label="[05:47:09]">&lt;fossy&gt;</a></span><span class="message">oh wait im dumb that's in the repo lol</span></div><div class="line" id="060940"><span class="nick" style="color:#80b1d3"><a href="#060940" label="[06:09:40]">&lt;fossy&gt;</a></span><span class="message">(un?)fortunately the checksums do match</span></div><div class="line" id="070830"><span class="nick" style="color:#80b1d3"><a href="#070830" label="[07:08:30]">&lt;fossy&gt;</a></span><span class="message">AH!</span></div><div class="line" id="070837"><span class="nick" style="color:#80b1d3"><a href="#070837" label="[07:08:37]">&lt;fossy&gt;</a></span><span class="message">it is something much less sinister than any of that</span></div><div class="line" id="070900"><span class="nick" style="color:#389600"><a href="#070900" label="[07:09:00]">&lt;Googulator&gt;</a></span><span class="message">Did you find it?</span></div><div class="line" id="070922"><span class="nick" style="color:#80b1d3"><a href="#070922" label="[07:09:22]">&lt;fossy&gt;</a></span><span class="message">it appears to be a bad PATH variable, and environment does differ between fiwix and non-fiwix, because of the kexec and so script change</span></div><div class="line" id="070938"><span class="nick" style="color:#389600"><a href="#070938" label="[07:09:38]">&lt;Googulator&gt;</a></span><span class="message">Oh...</span></div><div class="line" id="070952"><span class="nick" style="color:#80b1d3"><a href="#070952" label="[07:09:52]">&lt;fossy&gt;</a></span><span class="message">i figured this out by recompling with -g, taking the eip emitted by fiwix's segfault code, and cross referencing with an out-of-fiwix disassembly</span></div><div class="line" id="071140"><span class="nick" style="color:#80b1d3"><a href="#071140" label="[07:11:40]">&lt;fossy&gt;</a></span><span class="message">yeah, because default kaem PATH is /bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games, and PATH should be /usr/bin, and /bin doesn't exist, and make is buggy with a nonexisting PATH dir so it segfaults</span></div><div class="line" id="071156"><span class="nick" style="color:#80b1d3"><a href="#071156" label="[07:11:56]">&lt;fossy&gt;</a></span><span class="message">gah that is really annoying but at least its found</span></div><div class="line" id="112208"><span class="nick" style="color:#6d2462"><a href="#112208" label="[11:22:08]">&lt;Mikaku&gt;</a></span><span class="message">fossy: yes I use printk() (with -D__DEBUG__) mostly for debugging purposes</span></div><div class="line" id="112252"><span class="nick" style="color:#6d2462"><a href="#112252" label="[11:22:52]">&lt;Mikaku&gt;</a></span><span class="message">fossy: sorry for a late response, now I see you managed to solve it :-)</span></div><div class="line" id="115823"><span class="nick" style="color:#80b1d3"><a href="#115823" label="[11:58:23]">&lt;fossy&gt;</a></span><span class="message">Mikaku: no need to apologise, thanks regardless :)</span></div><div class="line" id="165018"><span class="nick" style="color:#234e69"><a href="#165018" label="[16:50:18]">&lt;Harzilein&gt;</a></span><span class="message">hi</span></div><div class="line" id="171001"><span class="nick" style="color:#6c3d55"><a href="#171001" label="[17:10:01]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Harzilein: hi and welcome!</span></div><div class="line" id="180725"><span class="nick" style="color:#6b8072"><a href="#180725" label="[18:07:25]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well yes, it can operate on the backend refresh cycle</span></div><div class="line" id="180741"><span class="nick" style="color:#6b8072"><a href="#180741" label="[18:07:41]">&lt;oriansj&gt;</a></span><span class="message">Harzilein: welcome</span></div><div class="line" id="181520"><span class="nick" style="color:#6b8072"><a href="#181520" label="[18:15:20]">&lt;oriansj&gt;</a></span><span class="message">fossy: great work as always ^_^</span></div><div class="line" id="181648"><span class="nick" style="color:#6b8072"><a href="#181648" label="[18:16:48]">&lt;oriansj&gt;</a></span><span class="message">Mikaku: loving your Fiwix work; we really need to find some people to help you port to more architectures.</span></div><div class="line" id="182500"><span class="nick" style="color:#6d2462"><a href="#182500" label="[18:25:00]">&lt;Mikaku&gt;</a></span><span class="message">oriansj: yes, I'm now focused on implementing UNIX domain sockets but I also have in mind to include at least one architecture (Raspberry Pi?) to help to organize better the code</span></div><div class="line" id="183040"><span class="nick" style="color:#6d2462"><a href="#183040" label="[18:30:40]">&lt;Mikaku&gt;</a></span><span class="message">having help on this process would be amazing, indeed</span></div><div class="line" id="184301"><span class="nick" style="color:#d9d9d9"><a href="#184301" label="[18:43:01]">&lt;GoogulatorMobile&gt;</a></span><span class="message">oriansj: builder-hex0 is your project, right?</span></div><div class="line" id="184359"><span class="nick" style="color:#6c3d55"><a href="#184359" label="[18:43:59]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; GoogulatorMobile: no, that is rickmasters</span></div><div class="line" id="184409"><span class="nick" style="color:#d9d9d9"><a href="#184409" label="[18:44:09]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Oh, right</span></div><div class="line" id="184508"><span class="nick" style="color:#6c3d55"><a href="#184508" label="[18:45:08]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And in retrospective I would suggest doing early stages slightly differently... Bit oh well...</span></div><div class="line" id="184533"><span class="nick" style="color:#d9d9d9"><a href="#184533" label="[18:45:33]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I was thinking, how hard would it be to make it use LBA instead of CHS for reading srcfs?</span></div><div class="line" id="184554"><span class="nick" style="color:#6c3d55"><a href="#184554" label="[18:45:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; We now have 2 staged approach where stage1 is very small and is basically hex0 + jump to builder-hex0</span></div><div class="line" id="184606"><span class="nick" style="color:#d9d9d9"><a href="#184606" label="[18:46:06]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I'm seeing some weird issues on my boards that appear to be CHS-related</span></div><div class="line" id="184622"><span class="nick" style="color:#6c3d55"><a href="#184622" label="[18:46:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But might be nicer to do multistage where second stage understands hex1 or hex2</span></div><div class="line" id="184656"><span class="nick" style="color:#6c3d55"><a href="#184656" label="[18:46:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But that's unrelated to your issue...</span></div><div class="line" id="184841"><span class="nick" style="color:#6b8072"><a href="#184841" label="[18:48:41]">&lt;oriansj&gt;</a></span><span class="message">improvements are always welcome; although the earliest stages tend to be the most annoying (due to manual offset calculations)</span></div><div class="line" id="222135"><span class="nick" style="color:#d9d9d9"><a href="#222135" label="[22:21:35]">&lt;GoogulatorMobile&gt;</a></span><span class="message">rickmasters: is there a &quot;high-level prototype&quot; version of builder-hex0 stage2 that can be compiled into hex0 from a higher level language?</span></div><div class="line" id="222435"><span class="nick" style="color:#bc80bd"><a href="#222435" label="[22:24:35]">&lt;rickmasters&gt;</a></span><span class="message">It's developed in hex2 and then you run hex2tohex0.sh to compute the offsets but hex2 is the highest language</span></div><div class="line" id="222601"><span class="nick" style="color:#bc80bd"><a href="#222601" label="[22:26:01]">&lt;rickmasters&gt;</a></span><span class="message">development notes here <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/DEVELOP.md">https://github.com/ironmeld/builder-hex0/blob/main/DEVELOP.md</a> </span></div><div class="line" id="222834"><span class="nick" style="color:#bc80bd"><a href="#222834" label="[22:28:34]">&lt;rickmasters&gt;</a></span><span class="message">By the way, I'm testing a release of Fiwix 1.5.0 patched for live-bootstrap and it will have your PAE passthrough PR.</span></div><div class="line" id="222843"><span class="nick" style="color:#bc80bd"><a href="#222843" label="[22:28:43]">&lt;rickmasters&gt;</a></span><span class="message">Should be ready soon</span></div><div class="line" id="223509"><span class="nick" style="color:#3c5b35"><a href="#223509" label="[22:35:09]">&lt;stikonas&gt;</a></span><span class="message">nice!</span></div><div class="line" id="223547"><span class="nick" style="color:#3c5b35"><a href="#223547" label="[22:35:47]">&lt;stikonas&gt;</a></span><span class="message">nad that hex2tohex0 is precisely the reason why it would be nice to have another small intermediate stage that is written in hex0 but can do hex2</span></div><div class="line" id="223605"><span class="nick" style="color:#3c5b35"><a href="#223605" label="[22:36:05]">&lt;stikonas&gt;</a></span><span class="message">(or possibly 2 stages, with hex1 in the middle)</span></div><div class="line" id="224553"><span class="nick" style="color:#bc80bd"><a href="#224553" label="[22:45:53]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yes I think having a hex2 stage would be better.</span></div><div class="line" id="224714"><span class="nick" style="color:#bc80bd"><a href="#224714" label="[22:47:14]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Initially it wasn't so clear because builder-hex0 was small enough to develop in hex0.</span></div><div class="line" id="224820"><span class="nick" style="color:#bc80bd"><a href="#224820" label="[22:48:20]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: And we already had a hex2 compiler in user land so I focused on being able to run that to compile a later kernel.</span></div><div class="line" id="224841"><span class="nick" style="color:#3c5b35"><a href="#224841" label="[22:48:41]">&lt;stikonas&gt;</a></span><span class="message">well, that's some improvement for the future</span></div><div class="line" id="224843"><span class="nick" style="color:#3c5b35"><a href="#224843" label="[22:48:43]">&lt;stikonas&gt;</a></span><span class="message">probably should first try to get everything upstreamed</span></div><div class="line" id="224857"><span class="nick" style="color:#3c5b35"><a href="#224857" label="[22:48:57]">&lt;stikonas&gt;</a></span><span class="message">(Fiwix stuff)</span></div><div class="line" id="225023"><span class="nick" style="color:#bc80bd"><a href="#225023" label="[22:50:23]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Over time builder-hex0 just grew organically and the porting to a higher language became a big job.</span></div><div class="line" id="225030"><span class="nick" style="color:#3c5b35"><a href="#225030" label="[22:50:30]">&lt;stikonas&gt;</a></span><span class="message">well, complexity of more complex programs is exactly the reason why stage0-posix has those intermediate stages</span></div><div class="line" id="225057"><span class="nick" style="color:#3c5b35"><a href="#225057" label="[22:50:57]">&lt;stikonas&gt;</a></span><span class="message">but yes, refactoring this low level stuff is a lot of effort</span></div><div class="line" id="225141"><span class="nick" style="color:#bc80bd"><a href="#225141" label="[22:51:41]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: bug porting builder-hex0.hex0 to builder-hex0.hex2 was reasonable and writing a converter to hex0 was fairly easy with a full tool chain (although arguably cheating)</span></div><div class="line" id="225157"><span class="nick" style="color:#bc80bd"><a href="#225157" label="[22:51:57]">&lt;rickmasters&gt;</a></span><span class="message">s/bug/but</span></div><div class="line" id="225221"><span class="nick" style="color:#3c5b35"><a href="#225221" label="[22:52:21]">&lt;stikonas&gt;</a></span><span class="message">well, hex2 to M0 shouldn't be too hard either</span></div><div class="line" id="225234"><span class="nick" style="color:#3c5b35"><a href="#225234" label="[22:52:34]">&lt;stikonas&gt;</a></span><span class="message">but M0 to C would be far bigger change</span></div><div class="line" id="225254"><span class="nick" style="color:#3c5b35"><a href="#225254" label="[22:52:54]">&lt;stikonas&gt;</a></span><span class="message">hex2 and M0 mostly differ by having nicer macros rather than hex numbers</span></div><div class="line" id="225550"><span class="nick" style="color:#bc80bd"><a href="#225550" label="[22:55:50]">&lt;rickmasters&gt;</a></span><span class="message">I agree its something we can do in the future. Right now, Fiwix upstreaming, fossy's simplification, Googulator's bare metal work are higher priorities.</span></div><div class="line" id="225645"><span class="nick" style="color:#3c5b35"><a href="#225645" label="[22:56:45]">&lt;stikonas&gt;</a></span><span class="message">indeed, I'm especially looking at Googulator's baremetal work</span></div><div class="line" id="225704"><span class="nick" style="color:#3c5b35"><a href="#225704" label="[22:57:04]">&lt;stikonas&gt;</a></span><span class="message">would be nice to actually start using live-bootstrap for installing new system</span></div><div class="line" id="225707"><span class="nick" style="color:#80b1d3"><a href="#225707" label="[22:57:07]">&lt;fossy&gt;</a></span><span class="message">baremetal is looking *very* tricky, to be honest</span></div><div class="line" id="225718"><span class="nick" style="color:#3c5b35"><a href="#225718" label="[22:57:18]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="225732"><span class="nick" style="color:#3c5b35"><a href="#225732" label="[22:57:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: so what are the main challanges?</span></div><div class="line" id="225747"><span class="nick" style="color:#3c5b35"><a href="#225747" label="[22:57:47]">&lt;stikonas&gt;</a></span><span class="message">there is that BIOS map thing, but that's in review now</span></div><div class="line" id="225749"><span class="nick" style="color:#bc80bd"><a href="#225749" label="[22:57:49]">&lt;rickmasters&gt;</a></span><span class="message">fossy: curious what your status is on your simplification work? If you have a fix for the PATH issue perhaps I can help with kernel bootstrap if it needs further work</span></div><div class="line" id="225841"><span class="nick" style="color:#3c5b35"><a href="#225841" label="[22:58:41]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: I guess just mkdir would workaround PATH issue</span></div><div class="line" id="225844"><span class="nick" style="color:#80b1d3"><a href="#225844" label="[22:58:44]">&lt;fossy&gt;</a></span><span class="message">rickmasters: I *think* that all issues relating to the kernel bootstrap directly are resolved. my current run is testing Fiwix-&gt;Linux transition. but i think that might be nearly OK; i'll let you know though :)</span></div><div class="line" id="225857"><span class="nick" style="color:#80b1d3"><a href="#225857" label="[22:58:57]">&lt;fossy&gt;</a></span><span class="message">stikonas: i just made sure that PATH exists in the env file</span></div><div class="line" id="225907"><span class="nick" style="color:#3c5b35"><a href="#225907" label="[22:59:07]">&lt;stikonas&gt;</a></span><span class="message">ok, that would work too</span></div><div class="line" id="225935"><span class="nick" style="color:#bc80bd"><a href="#225935" label="[22:59:35]">&lt;rickmasters&gt;</a></span><span class="message">from my notes, for bare metal we need builder-hex0 to expose the BIOS memory map,</span></div><div class="line" id="225952"><span class="nick" style="color:#bc80bd"><a href="#225952" label="[22:59:52]">&lt;rickmasters&gt;</a></span><span class="message">kexec-fiwix needs to pass the memory map to linux</span></div><div class="line" id="230024"><span class="nick" style="color:#bc80bd"><a href="#230024" label="[23:00:24]">&lt;rickmasters&gt;</a></span><span class="message">we need to remove a linux tar ball and change the linux headers accordingly,</span></div><div class="line" id="230035"><span class="nick" style="color:#bc80bd"><a href="#230035" label="[23:00:35]">&lt;rickmasters&gt;</a></span><span class="message">we need to change the linux config to include more drivers,</span></div><div class="line" id="230037"><span class="nick" style="color:#80b1d3"><a href="#230037" label="[23:00:37]">&lt;fossy&gt;</a></span><span class="message">stikonas: the main challenge that I'm not sure the best way to solve at this point is; there's a fair few drivers we could need to mount a disk (IDE/AHCI, NVME, USB). adding more drivers requires more ramdisk space, which is scarce. to get more space is difficult</span></div><div class="line" id="230052"><span class="nick" style="color:#80b1d3"><a href="#230052" label="[23:00:52]">&lt;fossy&gt;</a></span><span class="message">we can 2-stage linux for ethernet, etc drivers, that's pretty easily doable</span></div><div class="line" id="230103"><span class="nick" style="color:#80b1d3"><a href="#230103" label="[23:01:03]">&lt;fossy&gt;</a></span><span class="message">disk drivers are my primary concern</span></div><div class="line" id="230104"><span class="nick" style="color:#bc80bd"><a href="#230104" label="[23:01:04]">&lt;rickmasters&gt;</a></span><span class="message">we need to fix deblob of a network driver, googulator filed an issue.</span></div><div class="line" id="230109"><span class="nick" style="color:#3c5b35"><a href="#230109" label="[23:01:09]">&lt;stikonas&gt;</a></span><span class="message">yeah, we only need storage drivers for 1st stage</span></div><div class="line" id="230126"><span class="nick" style="color:#3c5b35"><a href="#230126" label="[23:01:26]">&lt;stikonas&gt;</a></span><span class="message">well, I guess we could skip deblob...</span></div><div class="line" id="230214"><span class="nick" style="color:#3c5b35"><a href="#230214" label="[23:02:14]">&lt;stikonas&gt;</a></span><span class="message">though the question then is. Let's say somebody has a NIC that needs blobs and still want to run bootstrap on it</span></div><div class="line" id="230233"><span class="nick" style="color:#80b1d3"><a href="#230233" label="[23:02:33]">&lt;fossy&gt;</a></span><span class="message">RE: linux headers, <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/334/commits/cc436d47cc801f5391c48cd9a85c2060d9ef17a9">https://github.com/fosslinux/live-bootstrap/pull/334/commits/cc436d47cc801f5391c48cd9a85c2060d9ef17a9</a> </span></div><div class="line" id="230236"><span class="nick" style="color:#3c5b35"><a href="#230236" label="[23:02:36]">&lt;stikonas&gt;</a></span><span class="message">how do they inject those blobs into sysc (or whatever it will become after simplification)</span></div><div class="line" id="230254"><span class="nick" style="color:#80b1d3"><a href="#230254" label="[23:02:54]">&lt;fossy&gt;</a></span><span class="message">don't the blobs get included in the driver's .o?</span></div><div class="line" id="230306"><span class="nick" style="color:#3c5b35"><a href="#230306" label="[23:03:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: no, it's in /lib if I remember correctly</span></div><div class="line" id="230322"><span class="nick" style="color:#3c5b35"><a href="#230322" label="[23:03:22]">&lt;stikonas&gt;</a></span><span class="message">unfortunately, in the future we'll need more and more HW blobs...</span></div><div class="line" id="230442"><span class="nick" style="color:#3c5b35"><a href="#230442" label="[23:04:42]">&lt;stikonas&gt;</a></span><span class="message">for Wifi, the last generation that worked on linux-libre was 802.11n. For GPUs, there used to be some old nouveau cards that worked without them and up to recently Intel GPUs too. But I think not anymore...</span></div><div class="line" id="230527"><span class="nick" style="color:#3c5b35"><a href="#230527" label="[23:05:27]">&lt;stikonas&gt;</a></span><span class="message">well, I guess for blobless stuff people will have to turn to non-x86 arches anyway</span></div><div class="line" id="230637"><span class="nick" style="color:#3c5b35"><a href="#230637" label="[23:06:37]">&lt;stikonas&gt;</a></span><span class="message">fossy: so linux-firmware repo install stuff to /lib/firmware</span></div><div class="line" id="230722"><span class="nick" style="color:#80b1d3"><a href="#230722" label="[23:07:22]">&lt;fossy&gt;</a></span><span class="message">ah, right</span></div><div class="line" id="230734"><span class="nick" style="color:#3c5b35"><a href="#230734" label="[23:07:34]">&lt;stikonas&gt;</a></span><span class="message">perhaps we need an additional parameter to inject extra stuff...</span></div><div class="line" id="230743"><span class="nick" style="color:#3c5b35"><a href="#230743" label="[23:07:43]">&lt;stikonas&gt;</a></span><span class="message">(subject to space availability)</span></div><div class="line" id="230759"><span class="nick" style="color:#3c5b35"><a href="#230759" label="[23:07:59]">&lt;stikonas&gt;</a></span><span class="message">that might actually be useful for non-kernel bootstrap testing of other arches</span></div><div class="line" id="230917"><span class="nick" style="color:#3c5b35"><a href="#230917" label="[23:09:17]">&lt;stikonas&gt;</a></span><span class="message">e.g. right now early stages of live-bootstrap run on riscv64 but if you want to test it on x86_64 machine (much faster than native riscv64 bootstrap), you need to inject qemu-riscv64 binary into bootstrap environment</span></div><div class="line" id="231004"><span class="nick" style="color:#3c5b35"><a href="#231004" label="[23:10:04]">&lt;stikonas&gt;</a></span><span class="message">(or in bwrap case it could be another --ro-try-bind argument)</span></div><div class="line" id="231246"><span class="nick" style="color:#bc80bd"><a href="#231246" label="[23:12:46]">&lt;rickmasters&gt;</a></span><span class="message">For bare metal storage the hardware needs to be supported by builder-hex0, Fiwix, and Linux.</span></div><div class="line" id="231305"><span class="nick" style="color:#bc80bd"><a href="#231305" label="[23:13:05]">&lt;rickmasters&gt;</a></span><span class="message">builder-hex0 uses BIOS with CHS interface so that's a bit different.</span></div><div class="line" id="231433"><span class="nick" style="color:#bc80bd"><a href="#231433" label="[23:14:33]">&lt;rickmasters&gt;</a></span><span class="message">Googulator is asking about using LBA instead of CHS in builder-hex0, which would have some effect on supported hardware.</span></div><div class="line" id="231624"><span class="nick" style="color:#bc80bd"><a href="#231624" label="[23:16:24]">&lt;rickmasters&gt;</a></span><span class="message">I'm thinking it may make sense to have a small list of supported hardware to be used (rarely) for verification purposes, otherwise the primary platform is qemu</span></div><div class="line" id="231745"><span class="nick" style="color:#3c5b35"><a href="#231745" label="[23:17:45]">&lt;stikonas&gt;</a></span><span class="message">so then people would be mostly expected to bootstrap new system using pre-existing Linux kernel?</span></div><div class="line" id="231934"><span class="nick" style="color:#bc80bd"><a href="#231934" label="[23:19:34]">&lt;rickmasters&gt;</a></span><span class="message">well, that's where we are now, but we're working on improving but I think it's reasonable to set limits</span></div><div class="line" id="232043"><span class="nick" style="color:#3c5b35"><a href="#232043" label="[23:20:43]">&lt;stikonas&gt;</a></span><span class="message">true...</span></div><div class="line" id="232103"><span class="nick" style="color:#3c5b35"><a href="#232103" label="[23:21:03]">&lt;stikonas&gt;</a></span><span class="message">though if we try to keep system small enough to fit in memory</span></div><div class="line" id="232116"><span class="nick" style="color:#3c5b35"><a href="#232116" label="[23:21:16]">&lt;stikonas&gt;</a></span><span class="message">then one could use builder-hex0 BIOS calls to read everything</span></div><div class="line" id="232121"><span class="nick" style="color:#3c5b35"><a href="#232121" label="[23:21:21]">&lt;stikonas&gt;</a></span><span class="message">Fiwix will just use memory</span></div><div class="line" id="232127"><span class="nick" style="color:#3c5b35"><a href="#232127" label="[23:21:27]">&lt;stikonas&gt;</a></span><span class="message">and then Linux can use storage again</span></div><div class="line" id="232142"><span class="nick" style="color:#3c5b35"><a href="#232142" label="[23:21:42]">&lt;stikonas&gt;</a></span><span class="message">assuming that your storage is supported by curently bootstrap Linux version</span></div><div class="line" id="232152"><span class="nick" style="color:#bc80bd"><a href="#232152" label="[23:21:52]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: you're right, thanks for the correction.</span></div><div class="line" id="232200"><span class="nick" style="color:#3c5b35"><a href="#232200" label="[23:22:00]">&lt;stikonas&gt;</a></span><span class="message">well, you were not wrong either</span></div><div class="line" id="232204"><span class="nick" style="color:#3c5b35"><a href="#232204" label="[23:22:04]">&lt;stikonas&gt;</a></span><span class="message">it's just different paths we could take</span></div><div class="line" id="232228"><span class="nick" style="color:#3c5b35"><a href="#232228" label="[23:22:28]">&lt;stikonas&gt;</a></span><span class="message">though it might be that in the future this path will be come less useful either</span></div><div class="line" id="232246"><span class="nick" style="color:#3c5b35"><a href="#232246" label="[23:22:46]">&lt;stikonas&gt;</a></span><span class="message">if there is completely new hardware that Linux 4.x wouldn't support</span></div><div class="line" id="232256"><span class="nick" style="color:#3c5b35"><a href="#232256" label="[23:22:56]">&lt;stikonas&gt;</a></span><span class="message">(same true for NICs, probably even worse)</span></div><div class="line" id="232322"><span class="nick" style="color:#3c5b35"><a href="#232322" label="[23:23:22]">&lt;stikonas&gt;</a></span><span class="message">perhaps that's why we need USB drivers...</span></div><div class="line" id="232335"><span class="nick" style="color:#3c5b35"><a href="#232335" label="[23:23:35]">&lt;stikonas&gt;</a></span><span class="message">then you could use some older USB NIC and storage...</span></div><div class="line" id="232423"><span class="nick" style="color:#3c5b35"><a href="#232423" label="[23:24:23]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's a hard problem to make bootstrap work across wide range of hardware</span></div><div class="line" id="232431"><span class="nick" style="color:#3c5b35"><a href="#232431" label="[23:24:31]">&lt;stikonas&gt;</a></span><span class="message">it is indeed much simpler to target a small set</span></div><div class="line" id="233625"><span class="nick" style="color:#bc80bd"><a href="#233625" label="[23:36:25]">&lt;rickmasters&gt;</a></span><span class="message">fossy: Could you elaborate more on the ramdrive size limit?</span></div><div class="line" id="233827"><span class="nick" style="color:#80b1d3"><a href="#233827" label="[23:38:27]">&lt;fossy&gt;</a></span><span class="message">we have X MB of RAM available for the ramdisk, currently I think that's around 1280MB? (expanding that number may be a possibility in the future, but will require prospective bootstrapping systems to have more RAM...) building more drivers requires more space to build those drivers, space we don't really have in RAM</span></div><div class="line" id="233949"><span class="nick" style="color:#3c5b35"><a href="#233949" label="[23:39:49]">&lt;stikonas&gt;</a></span><span class="message">yaeh, but how big are those drivers...</span></div><div class="line" id="233957"><span class="nick" style="color:#3c5b35"><a href="#233957" label="[23:39:57]">&lt;stikonas&gt;</a></span><span class="message">even full distro kernel is not that big</span></div><div class="line" id="234030"><span class="nick" style="color:#80b1d3"><a href="#234030" label="[23:40:30]">&lt;fossy&gt;</a></span><span class="message">most drivers are kernel modules usually</span></div><div class="line" id="234045"><span class="nick" style="color:#80b1d3"><a href="#234045" label="[23:40:45]">&lt;fossy&gt;</a></span><span class="message">on my system that is 155M</span></div><div class="line" id="234054"><span class="nick" style="color:#80b1d3"><a href="#234054" label="[23:40:54]">&lt;fossy&gt;</a></span><span class="message">but compiling it uses a fair bit more space than that :\</span></div><div class="line" id="234103"><span class="nick" style="color:#80b1d3"><a href="#234103" label="[23:41:03]">&lt;fossy&gt;</a></span><span class="message">due to intermediate fiels</span></div><div class="line" id="234108"><span class="nick" style="color:#80b1d3"><a href="#234108" label="[23:41:08]">&lt;fossy&gt;</a></span><span class="message">files*</span></div><div class="line" id="234113"><span class="nick" style="color:#3c5b35"><a href="#234113" label="[23:41:13]">&lt;stikonas&gt;</a></span><span class="message">well, my Gentoo kernel (that I didn't specifically optimize for size) is 7 MiB for kernel and 37 MB for modules</span></div><div class="line" id="234128"><span class="nick" style="color:#80b1d3"><a href="#234128" label="[23:41:28]">&lt;fossy&gt;</a></span><span class="message">hm, not so bad</span></div><div class="line" id="234139"><span class="nick" style="color:#3c5b35"><a href="#234139" label="[23:41:39]">&lt;stikonas&gt;</a></span><span class="message">but yes, compiling would use more</span></div><div class="line" id="234146"><span class="nick" style="color:#3c5b35"><a href="#234146" label="[23:41:46]">&lt;stikonas&gt;</a></span><span class="message">I think my modules might be compressed too</span></div><div class="line" id="234207"><span class="nick" style="color:#3c5b35"><a href="#234207" label="[23:42:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, I have them in .ko.xz format</span></div><div class="line" id="234325"><span class="nick" style="color:#bc80bd"><a href="#234325" label="[23:43:25]">&lt;rickmasters&gt;</a></span><span class="message">fossy: sorry where does the 1280MB limit come from exactly?</span></div><div class="line" id="234412"><span class="nick" style="color:#80b1d3"><a href="#234412" label="[23:44:12]">&lt;fossy&gt;</a></span><span class="message">i *think* that is the space guranteed by Fiwix's memory map, if i understand correctly. Googulator would know exactly</span></div><div class="line" id="234431"><span class="nick" style="color:#3c5b35"><a href="#234431" label="[23:44:31]">&lt;stikonas&gt;</a></span><span class="message">that might be the number on his system</span></div><div class="line" id="234436"><span class="nick" style="color:#3c5b35"><a href="#234436" label="[23:44:36]">&lt;stikonas&gt;</a></span><span class="message">might be BIOS dependent</span></div><div class="line" id="234454"><span class="nick" style="color:#3c5b35"><a href="#234454" label="[23:44:54]">&lt;stikonas&gt;</a></span><span class="message">due to those PAE maps</span></div><div class="line" id="234503"><span class="nick" style="color:#80b1d3"><a href="#234503" label="[23:45:03]">&lt;fossy&gt;</a></span><span class="message">it is bios dependent but there is a maximum size of the MMIO which is the upper limit</span></div><div class="line" id="234503"><span class="nick" style="color:#3c5b35"><a href="#234503" label="[23:45:03]">&lt;stikonas&gt;</a></span><span class="message">but yes, we should ask Googulator</span></div><div class="line" id="235026"><span class="nick" style="color:#bc80bd"><a href="#235026" label="[23:50:26]">&lt;rickmasters&gt;</a></span><span class="message">fossy: sounds like you're talking about the Fiwix ram drive used to build the linux kernel?</span></div><div class="line" id="235314"><span class="nick" style="color:#bc80bd"><a href="#235314" label="[23:53:14]">&lt;rickmasters&gt;</a></span><span class="message">If so, that is limited by available memory in builder-hex0 to hold the ext2 initrd file which is passed to Fiwix.</span></div><div class="line" id="235341"><span class="nick" style="color:#bc80bd"><a href="#235341" label="[23:53:41]">&lt;rickmasters&gt;</a></span><span class="message">The current initrd is 1152MB but perhaps removing a linux tar ball increased it.</span></div><div class="line" id="235558"><span class="nick" style="color:#3c5b35"><a href="#235558" label="[23:55:58]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: do you mean decreased it?</span></div><div class="line" id="235611"><span class="nick" style="color:#3c5b35"><a href="#235611" label="[23:56:11]">&lt;stikonas&gt;</a></span><span class="message">we should be using less pace in initrd after removing linux tarball</span></div><div class="line" id="235656"><span class="nick" style="color:#bc80bd"><a href="#235656" label="[23:56:56]">&lt;rickmasters&gt;</a></span><span class="message">we'd be using less memory in builder-hex0 so we'd have more room to create a bigger initrd that has more space available for building</span></div><div class="line" id="235721"><span class="nick" style="color:#3c5b35"><a href="#235721" label="[23:57:21]">&lt;stikonas&gt;</a></span><span class="message">I see</span></div><div class="line" id="235725"><span class="nick" style="color:#3c5b35"><a href="#235725" label="[23:57:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, makes sense</span></div><div class="line" id="235737"><span class="nick" style="color:#3c5b35"><a href="#235737" label="[23:57:37]">&lt;stikonas&gt;</a></span><span class="message">I've slightly misunderstood the logic but in the end it's the same thing</span></div><div class="line" id="235757"><span class="nick" style="color:#3c5b35"><a href="#235757" label="[23:57:57]">&lt;stikonas&gt;</a></span><span class="message">available memory is increased, not initrd is increased....</span></div><br /></div></body></html>