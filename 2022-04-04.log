<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="014750"><span class="nick" style="color:#8dd3c7"><a href="#014750" label="[01:47:50]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://programming-journal.org/2022/6/13/">https://programming-journal.org/2022/6/13/</a> </span></div><div class="line" id="014756"><span class="nick" style="color:#8dd3c7"><a href="#014756" label="[01:47:56]">&lt;pabs3&gt;</a></span><span class="message">^ on camlboot</span></div><div class="line" id="031741"><span class="nick" style="color:#2e2a4a"><a href="#031741" label="[03:17:41]">&lt;muurkha&gt;</a></span><span class="message">pabs3: thanks!</span></div><div class="line" id="072615"><span class="nick">***</span><span class="message notice">alMalsamo is now known as littlebobeep</span></div><div class="line" id="081433"><span class="nick" style="color:#6b8072"><a href="#081433" label="[08:14:33]">&lt;littlebobeep&gt;</a></span><span class="message">efine tcc-boot0 ;; Pristine tcc cannot be built by MesCC, we are keeping a delta of 11                                                                                                      ;; patches.  In a very early and rough form they were presented to the</span></div><div class="line" id="081438"><span class="nick" style="color:#6b8072"><a href="#081438" label="[08:14:38]">&lt;littlebobeep&gt;</a></span><span class="message">;; TinyCC developers, who at the time showed no interest in supporting the                                                                                                  ;; bootstrappable effort; we will try again later.  These patches have been</span></div><div class="line" id="081443"><span class="nick" style="color:#6b8072"><a href="#081443" label="[08:14:43]">&lt;littlebobeep&gt;</a></span><span class="message">;; ported to 0.9.27, alas the resulting tcc is buggy.  Once MesCC is more                                                                                                   ;; mature, this package should use the 0.9.27 sources (or later).</span></div><div class="line" id="081450"><span class="nick" style="color:#6b8072"><a href="#081450" label="[08:14:50]">&lt;littlebobeep&gt;</a></span><span class="message">Hmmm I did not know this &gt;_&lt;</span></div><div class="line" id="114102"><span class="nick" style="color:#80b1d3"><a href="#114102" label="[11:41:02]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: ah, looks like i got a bit confused regarding which C compiler didn't work on 64-bit... apologies. (The reason I thought it was TCC was that <a rel="nofollow" href="https://bellard.org/tcc">https://bellard.org/tcc</a>  doesn't mention 64-bit)</span></div><div class="line" id="114121"><span class="nick" style="color:#80b1d3"><a href="#114121" label="[11:41:21]">&lt;unmatched-paren&gt;</a></span><span class="message">btw, i can't figure out how to compile something with mes</span></div><div class="line" id="114127"><span class="nick" style="color:#80b1d3"><a href="#114127" label="[11:41:27]">&lt;unmatched-paren&gt;</a></span><span class="message">s/mes/mescc/</span></div><div class="line" id="114143"><span class="nick" style="color:#80b1d3"><a href="#114143" label="[11:41:43]">&lt;unmatched-paren&gt;</a></span><span class="message">whenever i try, it fails to find nyacc and then segfaults</span></div><div class="line" id="114432"><span class="nick" style="color:#80b1d3"><a href="#114432" label="[11:44:32]">&lt;unmatched-paren&gt;</a></span><span class="message">stderr: <a rel="nofollow" href="https://paste.debian.net/1236734/">https://paste.debian.net/1236734/</a> </span></div><div class="line" id="114515"><span class="nick" style="color:#6d2462"><a href="#114515" label="[11:45:15]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: you probably didn't setup environmental variables</span></div><div class="line" id="115250"><span class="nick" style="color:#80b1d3"><a href="#115250" label="[11:52:50]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: which environment variables do i need to change? I can't find any information in the mes manual</span></div><div class="line" id="115405"><span class="nick" style="color:#6d2462"><a href="#115405" label="[11:54:05]">&lt;stikonas&gt;</a></span><span class="message">I think you need to set MES_ARENA, MES_MAX_ARENA, MES_STACK, MES_PREFIX and GUILE_LOAD_PATH</span></div><div class="line" id="115417"><span class="nick" style="color:#6d2462"><a href="#115417" label="[11:54:17]">&lt;stikonas&gt;</a></span><span class="message">those we do set in live-bootstrap scripts</span></div><div class="line" id="115431"><span class="nick" style="color:#80b1d3"><a href="#115431" label="[11:54:31]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, i'll have a look at those then, thanks :)</span></div><div class="line" id="115500"><span class="nick" style="color:#6d2462"><a href="#115500" label="[11:55:00]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/after.kaem#L24">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/after.kaem#L24</a>  and <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L10">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L10</a> </span></div><div class="line" id="115656"><span class="nick" style="color:#80b1d3"><a href="#115656" label="[11:56:56]">&lt;unmatched-paren&gt;</a></span><span class="message">GUILE_LOAD_PATH seems to already be set, but when i look in the directory it points to, NYACC isn't there</span></div><div class="line" id="120011"><span class="nick" style="color:#6b8072"><a href="#120011" label="[12:00:11]">&lt;littlebobeep&gt;</a></span><span class="message">unmatched-paren: Are you using Mescc outside the context of live-bootstrap?</span></div><div class="line" id="120121"><span class="nick" style="color:#80b1d3"><a href="#120121" label="[12:01:21]">&lt;unmatched-paren&gt;</a></span><span class="message">yes</span></div><div class="line" id="120453"><span class="nick" style="color:#6d2462"><a href="#120453" label="[12:04:53]">&lt;stikonas&gt;</a></span><span class="message">mescc should work just fine outside live-bootstrap. Guix used it even before live-bootstrap even existed</span></div><div class="line" id="120526"><span class="nick" style="color:#6d2462"><a href="#120526" label="[12:05:26]">&lt;stikonas&gt;</a></span><span class="message">it's just a bit fiddly to set up required environment</span></div><div class="line" id="120551"><span class="nick" style="color:#80b1d3"><a href="#120551" label="[12:05:51]">&lt;unmatched-paren&gt;</a></span><span class="message">it still happens after export GUILE_LOAD_PATH=/gnu/store/pvx5s14f7cm1j412vxnd933mz79z5fk1-mes-0.23/share/mes/module/</span></div><div class="line" id="120625"><span class="nick" style="color:#80b1d3"><a href="#120625" label="[12:06:25]">&lt;unmatched-paren&gt;</a></span><span class="message">but it doesn't after export GUILE_LOAD_PATH=/gnu/store/m4k7bzbys9c5cic2chk03rdi2zfn71hs-nyacc-1.06.5/share/guile/site/3.0/</span></div><div class="line" id="120703"><span class="nick" style="color:#80b1d3"><a href="#120703" label="[12:07:03]">&lt;unmatched-paren&gt;</a></span><span class="message">except after ^ it still segfaults, but for a different reason: unhandled exception:unbound-variable:(export)</span></div><div class="line" id="120718"><span class="nick" style="color:#6d2462"><a href="#120718" label="[12:07:18]">&lt;stikonas&gt;</a></span><span class="message">you need both in GUIL_LOAD _PATH</span></div><div class="line" id="120744"><span class="nick" style="color:#80b1d3"><a href="#120744" label="[12:07:44]">&lt;unmatched-paren&gt;</a></span><span class="message">ahhh</span></div><div class="line" id="120747"><span class="nick" style="color:#6d2462"><a href="#120747" label="[12:07:47]">&lt;stikonas&gt;</a></span><span class="message">after you run the 2nd command, you removed mes modules from GUILE_LOAD_PATH</span></div><div class="line" id="120803"><span class="nick" style="color:#80b1d3"><a href="#120803" label="[12:08:03]">&lt;unmatched-paren&gt;</a></span><span class="message">export GUILE_LOAD_PATH=/gnu/store/m4k7bzbys9c5cic2chk03rdi2zfn71hs-nyacc-1.06.5/share/guile/site/3.0/:$GUILE_LOAD_PATH:/gnu/store/pvx5s14f7cm1j412vxnd933mz79z5fk1-mes-0.23/share/mes/module/</span></div><div class="line" id="120815"><span class="nick" style="color:#80b1d3"><a href="#120815" label="[12:08:15]">&lt;unmatched-paren&gt;</a></span><span class="message">^ doesn't work either, still unbound variable</span></div><div class="line" id="120822"><span class="nick" style="color:#6d2462"><a href="#120822" label="[12:08:22]">&lt;stikonas&gt;</a></span><span class="message">we have 3 paths in live-bootstrap</span></div><div class="line" id="120934"><span class="nick" style="color:#80b1d3"><a href="#120934" label="[12:09:34]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, should i add $guix_store_path/share/mes/module?</span></div><div class="line" id="120936"><span class="nick" style="color:#80b1d3"><a href="#120936" label="[12:09:36]">&lt;unmatched-paren&gt;</a></span><span class="message">wait, i already have that</span></div><div class="line" id="121026"><span class="nick" style="color:#6d2462"><a href="#121026" label="[12:10:26]">&lt;stikonas&gt;</a></span><span class="message">there is mes/module and just module</span></div><div class="line" id="121058"><span class="nick" style="color:#80b1d3"><a href="#121058" label="[12:10:58]">&lt;unmatched-paren&gt;</a></span><span class="message">not in the guix store, it seems</span></div><div class="line" id="121127"><span class="nick" style="color:#80b1d3"><a href="#121127" label="[12:11:27]">&lt;unmatched-paren&gt;</a></span><span class="message">paren@guix-aspire ~/code/chibicc [env]$ ls /gnu/store/wvr9b9543yhdz4vpn8a0aivps5rck1v4-mes-minimal-0.23/share</span></div><div class="line" id="121130"><span class="nick" style="color:#80b1d3"><a href="#121130" label="[12:11:30]">&lt;unmatched-paren&gt;</a></span><span class="message">doc/  mes/</span></div><div class="line" id="121155"><span class="nick" style="color:#80b1d3"><a href="#121155" label="[12:11:55]">&lt;unmatched-paren&gt;</a></span><span class="message">no module/</span></div><div class="line" id="122555"><span class="nick" style="color:#6d2462"><a href="#122555" label="[12:25:55]">&lt;stikonas&gt;</a></span><span class="message">might be different there</span></div><div class="line" id="122604"><span class="nick" style="color:#6d2462"><a href="#122604" label="[12:26:04]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap runs from release tarball</span></div><div class="line" id="122607"><span class="nick" style="color:#6d2462"><a href="#122607" label="[12:26:07]">&lt;stikonas&gt;</a></span><span class="message">not from installed image</span></div><div class="line" id="122642"><span class="nick" style="color:#80b1d3"><a href="#122642" label="[12:26:42]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah, i noted that; i'm not sure where to look now</span></div><div class="line" id="123113"><span class="nick" style="color:#80b1d3"><a href="#123113" label="[12:31:13]">&lt;unmatched-paren&gt;</a></span><span class="message">seems like the mes-boot0 package sets these variables, i'll try replicating what it does</span></div><div class="line" id="125619"><span class="nick" style="color:#234e69"><a href="#125619" label="[12:56:19]">&lt;fossy&gt;</a></span><span class="message">oriansj: &quot;supported fully functioning operating system&quot; -&gt; Debian/GUIX/etc</span></div><div class="line" id="125746"><span class="nick" style="color:#234e69"><a href="#125746" label="[12:57:46]">&lt;fossy&gt;</a></span><span class="message">base live-bootstrap will only have the needed tools (latest toolchain, make, git, etc)</span></div><div class="line" id="125755"><span class="nick" style="color:#234e69"><a href="#125755" label="[12:57:55]">&lt;fossy&gt;</a></span><span class="message">basic development stuff</span></div><div class="line" id="125821"><span class="nick" style="color:#234e69"><a href="#125821" label="[12:58:21]">&lt;fossy&gt;</a></span><span class="message">stikonas: i _think_ i have addressed all your comments</span></div><div class="line" id="130441"><span class="nick" style="color:#6d2462"><a href="#130441" label="[13:04:41]">&lt;stikonas&gt;</a></span><span class="message">fossy: yes, I got that email. I'll take a look later today or tomorrow, will run live-bootstrap again too</span></div><div class="line" id="130621"><span class="nick" style="color:#6c3d55"><a href="#130621" label="[13:06:21]">&lt;bauen1&gt;</a></span><span class="message">by the way, how close are we to go from live-bootstrap to debian or guix or something else ?</span></div><div class="line" id="130639"><span class="nick" style="color:#6d2462"><a href="#130639" label="[13:06:39]">&lt;stikonas&gt;</a></span><span class="message">bauen1: ideally we want to upgrade toolchain first</span></div><div class="line" id="130650"><span class="nick" style="color:#6d2462"><a href="#130650" label="[13:06:50]">&lt;stikonas&gt;</a></span><span class="message">and maybe get python working</span></div><div class="line" id="130737"><span class="nick" style="color:#6d2462"><a href="#130737" label="[13:07:37]">&lt;stikonas&gt;</a></span><span class="message">other than that, live-bootstrap is now close to starting point of Linux From Scratch</span></div><div class="line" id="130743"><span class="nick" style="color:#6c3d55"><a href="#130743" label="[13:07:43]">&lt;bauen1&gt;</a></span><span class="message">cool</span></div><div class="line" id="130753"><span class="nick" style="color:#6d2462"><a href="#130753" label="[13:07:53]">&lt;stikonas&gt;</a></span><span class="message">(with quite a bit more extra stuff in live-bootstrap)</span></div><div class="line" id="130826"><span class="nick" style="color:#6d2462"><a href="#130826" label="[13:08:26]">&lt;stikonas&gt;</a></span><span class="message">well, we have C++ compiler there, so it's not too hard to build new stuff now</span></div><div class="line" id="130854"><span class="nick" style="color:#6d2462"><a href="#130854" label="[13:08:54]">&lt;stikonas&gt;</a></span><span class="message">although, we did fail to build autogen without pregenerated files</span></div><div class="line" id="131928"><span class="nick" style="color:#234e69"><a href="#131928" label="[13:19:28]">&lt;fossy&gt;</a></span><span class="message">i will be wokring on that, after we restructure live-bootstrap to minimise rootfs.py</span></div><div class="line" id="131938"><span class="nick" style="color:#234e69"><a href="#131938" label="[13:19:38]">&lt;fossy&gt;</a></span><span class="message">and also preferably python</span></div><div class="line" id="131952"><span class="nick" style="color:#d9d9d9"><a href="#131952" label="[13:19:52]">&lt;Hagfish&gt;</a></span><span class="message">that's going to be so cool</span></div><div class="line" id="132014"><span class="nick" style="color:#234e69"><a href="#132014" label="[13:20:14]">&lt;fossy&gt;</a></span><span class="message">autogen = PITA</span></div><div class="line" id="132019"><span class="nick" style="color:#6d2462"><a href="#132019" label="[13:20:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try to do /after -&gt; /sysa rename first (for minimizing rootfs.py)</span></div><div class="line" id="132027"><span class="nick" style="color:#234e69"><a href="#132027" label="[13:20:27]">&lt;fossy&gt;</a></span><span class="message">yes, that would be a good first step</span></div><div class="line" id="132030"><span class="nick" style="color:#6d2462"><a href="#132030" label="[13:20:30]">&lt;stikonas&gt;</a></span><span class="message">but we need to first merge this big packaging PR</span></div><div class="line" id="132033"><span class="nick" style="color:#234e69"><a href="#132033" label="[13:20:33]">&lt;fossy&gt;</a></span><span class="message">yea</span></div><div class="line" id="132049"><span class="nick" style="color:#234e69"><a href="#132049" label="[13:20:49]">&lt;fossy&gt;</a></span><span class="message">it kinda creeped in size once i realised that i need to change this for this to work haha</span></div><div class="line" id="132105"><span class="nick" style="color:#6d2462"><a href="#132105" label="[13:21:05]">&lt;stikonas&gt;</a></span><span class="message">yeah, would have been easier to have a few smaller PRs but oh well</span></div><div class="line" id="132111"><span class="nick" style="color:#6d2462"><a href="#132111" label="[13:21:11]">&lt;stikonas&gt;</a></span><span class="message">we'll finish it now as it is</span></div><div class="line" id="132121"><span class="nick" style="color:#234e69"><a href="#132121" label="[13:21:21]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="133446"><span class="nick" style="color:#6c3d55"><a href="#133446" label="[13:34:46]">&lt;bauen1&gt;</a></span><span class="message">we should already have everything to compile dpkg, but apart from that i don't actually know what debian would take to bootstrap</span></div><div class="line" id="133555"><span class="nick" style="color:#6d2462"><a href="#133555" label="[13:35:55]">&lt;stikonas&gt;</a></span><span class="message">well, need  to create some &quot;bootstrap debs&quot;</span></div><div class="line" id="133711"><span class="nick" style="color:#6c3d55"><a href="#133711" label="[13:37:11]">&lt;bauen1&gt;</a></span><span class="message">and i don't think debian packages generally don't care about pre compield autogen files</span></div><div class="line" id="133821"><span class="nick" style="color:#bc80bd"><a href="#133821" label="[13:38:21]">&lt;unmatche1-paren&gt;</a></span><span class="message">so the purpose of live-bootstrap is partially to significantly reduce debootstrap's binary seed? cool :)</span></div><div class="line" id="133927"><span class="nick" style="color:#6c3d55"><a href="#133927" label="[13:39:27]">&lt;bauen1&gt;</a></span><span class="message">unmatche1-paren: debootstrap doesn't actually do anything except untar a bunch of predefined debs and then run dpkg --install on the rest</span></div><div class="line" id="133937"><span class="nick" style="color:#bc80bd"><a href="#133937" label="[13:39:37]">&lt;unmatche1-paren&gt;</a></span><span class="message">oh.</span></div><div class="line" id="134052"><span class="nick" style="color:#bc80bd"><a href="#134052" label="[13:40:52]">&lt;unmatche1-paren&gt;</a></span><span class="message">so basically it does `tar xf seeds/*.deb &amp;&amp; dpkg --install *.deb`?</span></div><div class="line" id="134102"><span class="nick" style="color:#6c3d55"><a href="#134102" label="[13:41:02]">&lt;bauen1&gt;</a></span><span class="message">unmatche1-paren: sort of i think</span></div><div class="line" id="134110"><span class="nick">***</span><span class="message notice">unmatche1-paren is now known as unmatched-paren</span></div><div class="line" id="134135"><span class="nick" style="color:#6c3d55"><a href="#134135" label="[13:41:35]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: so the real thing you need to do is build the &quot;build-essential&quot; packages and all other packages with &quot;priority: essential&quot;</span></div><div class="line" id="134201"><span class="nick" style="color:#6c3d55"><a href="#134201" label="[13:42:01]">&lt;bauen1&gt;</a></span><span class="message">i think after that all other debian packages should only depend on those (direct or indirectly)</span></div><div class="line" id="134216"><span class="nick" style="color:#80b1d3"><a href="#134216" label="[13:42:16]">&lt;unmatched-paren&gt;</a></span><span class="message">that unmatche1-paren thing keeps happening even though i'm only logged on in this session...</span></div><div class="line" id="134523"><span class="nick" style="color:#3c5b35"><a href="#134523" label="[13:45:23]">&lt;nimaje&gt;</a></span><span class="message">(maybe the reconnect is to fast for the server to see that your client has given up on the old connection and so the nick is still in use from the servers point of view)</span></div><div class="line" id="140527"><span class="nick" style="color:#6b8072"><a href="#140527" label="[14:05:27]">&lt;littlebobeep&gt;</a></span><span class="message">Exactly HOW out of date is this image (2018??): <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/File:M1_diagram.png">https://bootstrapping.miraheze.org/wiki/File:M1_diagram.png</a> </span></div><div class="line" id="140647"><span class="nick" style="color:#80b1d3"><a href="#140647" label="[14:06:47]">&lt;unmatched-paren&gt;</a></span><span class="message">what's `m2-moon`? a small implementation of lua?</span></div><div class="line" id="140724"><span class="nick" style="color:#80b1d3"><a href="#140724" label="[14:07:24]">&lt;unmatched-paren&gt;</a></span><span class="message">(in that diagram, there's a red line from M1 pointing to something called `M2-Moon`)</span></div><div class="line" id="140805"><span class="nick" style="color:#af8d2f"><a href="#140805" label="[14:08:05]">*</a></span><span class="message">unmatched-paren notes that a small implementation of lua isn't a bad idea</span></div><div class="line" id="141057"><span class="nick" style="color:#6d2462"><a href="#141057" label="[14:10:57]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: a bit out of date</span></div><div class="line" id="141140"><span class="nick" style="color:#6d2462"><a href="#141140" label="[14:11:40]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: slightly newer and incomplete <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="143331"><span class="nick" style="color:#234e69"><a href="#143331" label="[14:33:31]">&lt;fossy&gt;</a></span><span class="message">^ this includes all the stuff needed to generate files too</span></div><div class="line" id="143341"><span class="nick" style="color:#234e69"><a href="#143341" label="[14:33:41]">&lt;fossy&gt;</a></span><span class="message">in terms of the raw toolchain jumps, live-bootstrap does</span></div><div class="line" id="143751"><span class="nick" style="color:#234e69"><a href="#143751" label="[14:37:51]">&lt;fossy&gt;</a></span><span class="message">stage0 (hex0 -&gt; hex1 -&gt; hex2 -&gt; cc_* -&gt; M2-Planet) -&gt; mes + mes libc -&gt; tcc 0.9.26 + mes libc -&gt; tcc 0.9.27 + mes libc -&gt; tcc 0.9.27 + musl 1.1.24 (rebuilt a couple times) -&gt; tcc 0.9.27 + binutils 2.14 + musl 1.1.24 -&gt; gcc 4.0.4 + binutils 2.14 + musl 1.1.24 -&gt; gcc 4.0.4 + binutils 2.14 + musl 1.2.2 -&gt; gcc 4.7.4 (c++) + binutils 2.14 + musl 1.2.2</span></div><div class="line" id="145940"><span class="nick" style="color:#6d2462"><a href="#145940" label="[14:59:40]">&lt;stikonas&gt;</a></span><span class="message">there is M0 between hex2 and cc_*</span></div><div class="line" id="150024"><span class="nick" style="color:#6d2462"><a href="#150024" label="[15:00:24]">&lt;stikonas&gt;</a></span><span class="message">and strictly speaking we use M2-Planet to build new cross-platform tools (hex2 and M1) before mes</span></div><div class="line" id="150133"><span class="nick" style="color:#6d2462"><a href="#150133" label="[15:01:33]">&lt;stikonas&gt;</a></span><span class="message">hex versions of hex2 and M0 are a bit less capable than C versions: hex2 and M1</span></div><div class="line" id="200934"><span class="nick" style="color:#80b1d3"><a href="#200934" label="[20:09:34]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: in the image that littlebobeep was asking about earlier, an `M2-Moon` is mentioned. i'm curious, what was that about?</span></div><div class="line" id="200939"><span class="nick" style="color:#80b1d3"><a href="#200939" label="[20:09:39]">&lt;unmatched-paren&gt;</a></span><span class="message">sounds lua-related</span></div><div class="line" id="203250"><span class="nick" style="color:#6d2462"><a href="#203250" label="[20:32:50]">&lt;stikonas&gt;</a></span><span class="message">why would it be lua related?</span></div><div class="line" id="203257"><span class="nick" style="color:#6d2462"><a href="#203257" label="[20:32:57]">&lt;stikonas&gt;</a></span><span class="message">in any case it's probably something abandonned</span></div><div class="line" id="203303"><span class="nick" style="color:#6d2462"><a href="#203303" label="[20:33:03]">&lt;stikonas&gt;</a></span><span class="message">or not started</span></div><div class="line" id="203319"><span class="nick" style="color:#80b1d3"><a href="#203319" label="[20:33:19]">&lt;unmatched-paren&gt;</a></span><span class="message">the `moon` part made me think of lua, that's all -.o.-</span></div><div class="line" id="203334"><span class="nick" style="color:#80b1d3"><a href="#203334" label="[20:33:34]">&lt;unmatched-paren&gt;</a></span><span class="message">and yeah, it looks like it was never started</span></div><div class="line" id="203435"><span class="nick" style="color:#80b1d3"><a href="#203435" label="[20:34:35]">&lt;unmatched-paren&gt;</a></span><span class="message">also, since lua is tiny, it actually sounds like an ideal bootstrapping target</span></div><div class="line" id="203801"><span class="nick" style="color:#80b1d3"><a href="#203801" label="[20:38:01]">&lt;unmatched-paren&gt;</a></span><span class="message">either way, probably some (ultimately abandoned) early idea for stage0 like the lisp and forth interpreters, except this one was never started</span></div><div class="line" id="203924"><span class="nick" style="color:#6d2462"><a href="#203924" label="[20:39:24]">&lt;stikonas&gt;</a></span><span class="message">yes, lisp and forth did not have much success here</span></div><div class="line" id="203941"><span class="nick" style="color:#80b1d3"><a href="#203941" label="[20:39:41]">&lt;unmatched-paren&gt;</a></span><span class="message">(what 'a &quot;shame&quot;)</span></div><div class="line" id="203943"><span class="nick" style="color:#80b1d3"><a href="#203943" label="[20:39:43]">&lt;unmatched-paren&gt;</a></span><span class="message">:P</span></div><div class="line" id="203949"><span class="nick" style="color:#6d2462"><a href="#203949" label="[20:39:49]">&lt;stikonas&gt;</a></span><span class="message">mostly because people volunteering were working mostly on C</span></div><div class="line" id="204010"><span class="nick" style="color:#6d2462"><a href="#204010" label="[20:40:10]">&lt;stikonas&gt;</a></span><span class="message">and hence C compilers (cc_* and M2-Planet) got bulk of the work</span></div><div class="line" id="204023"><span class="nick" style="color:#6d2462"><a href="#204023" label="[20:40:23]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is now quite a bit more capable</span></div><div class="line" id="204110"><span class="nick" style="color:#6d2462"><a href="#204110" label="[20:41:10]">&lt;stikonas&gt;</a></span><span class="message">still a small subset of C but we do have some preprocessor and a few additional C constructs</span></div><div class="line" id="204249"><span class="nick" style="color:#2e2a4a"><a href="#204249" label="[20:42:49]">&lt;muurkha&gt;</a></span><span class="message">stikonas: because &quot;Lua&quot; means &quot;Moon&quot;</span></div><div class="line" id="204313"><span class="nick" style="color:#6d2462"><a href="#204313" label="[20:43:13]">&lt;stikonas&gt;</a></span><span class="message">oh, in some language?</span></div><div class="line" id="204326"><span class="nick" style="color:#2e2a4a"><a href="#204326" label="[20:43:26]">&lt;muurkha&gt;</a></span><span class="message">yeah, in Portuguese, which is the native language of Lua's authors</span></div><div class="line" id="204334"><span class="nick" style="color:#80b1d3"><a href="#204334" label="[20:43:34]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.lua.org/about.html">https://www.lua.org/about.html</a> </span></div><div class="line" id="204338"><span class="nick" style="color:#80b1d3"><a href="#204338" label="[20:43:38]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;Lua&quot; (pronounced LOO-ah) means &quot;Moon&quot; in Portuguese.</span></div><div class="line" id="204345"><span class="nick" style="color:#2e2a4a"><a href="#204345" label="[20:43:45]">&lt;muurkha&gt;</a></span><span class="message">that's why the language's logo is a crescent moon</span></div><div class="line" id="204559"><span class="nick" style="color:#80b1d3"><a href="#204559" label="[20:45:59]">&lt;unmatched-paren&gt;</a></span><span class="message">it's maintained by a team at the Pontifical Catholic University of Rio de Janeiro, according to the about page</span></div><div class="line" id="204620"><span class="nick" style="color:#2e2a4a"><a href="#204620" label="[20:46:20]">&lt;muurkha&gt;</a></span><span class="message">and Lua is indeed pretty small, though I think not quite as small as Lisp, which is not quite as small as the λ-calculus or the ς-calculus</span></div><div class="line" id="204726"><span class="nick" style="color:#2e2a4a"><a href="#204726" label="[20:47:26]">&lt;muurkha&gt;</a></span><span class="message">core Lua is stateful, which could be an advantage or a disadvantage depending on your point of view</span></div><div class="line" id="204728"><span class="nick" style="color:#80b1d3"><a href="#204728" label="[20:47:28]">&lt;unmatched-paren&gt;</a></span><span class="message">it's certainly smaller than C though (I think?)</span></div><div class="line" id="204735"><span class="nick" style="color:#2e2a4a"><a href="#204735" label="[20:47:35]">&lt;muurkha&gt;</a></span><span class="message">oh, much</span></div><div class="line" id="204816"><span class="nick" style="color:#2e2a4a"><a href="#204816" label="[20:48:16]">&lt;muurkha&gt;</a></span><span class="message">Lua's suitability for bootstrapping is the reason I wrote <a rel="nofollow" href="https://github.com/kragen/peg-bootstrap/blob/master/handaxeweb.lua">https://github.com/kragen/peg-bootstrap/blob/master/handaxeweb.lua</a>  in Lua</span></div><div class="line" id="204911"><span class="nick" style="color:#2e2a4a"><a href="#204911" label="[20:49:11]">&lt;muurkha&gt;</a></span><span class="message">maybe I should say I wrote <a rel="nofollow" href="https://github.com/kragen/peg-bootstrap/blob/master/handaxeweb.md">https://github.com/kragen/peg-bootstrap/blob/master/handaxeweb.md</a>  in Lua</span></div><div class="line" id="205218"><span class="nick" style="color:#6d2462"><a href="#205218" label="[20:52:18]">&lt;stikonas&gt;</a></span><span class="message">yes, but the question is can C compiler be written in Lua capable on building TCC</span></div><div class="line" id="205222"><span class="nick" style="color:#80b1d3"><a href="#205222" label="[20:52:22]">&lt;unmatched-paren&gt;</a></span><span class="message">and if you have Lua, you're probably able to get Fennel (unless fennel has some other dependency that i'm unaware of?)</span></div><div class="line" id="205256"><span class="nick" style="color:#80b1d3"><a href="#205256" label="[20:52:56]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: probably</span></div><div class="line" id="205258"><span class="nick" style="color:#6d2462"><a href="#205258" label="[20:52:58]">&lt;stikonas&gt;</a></span><span class="message">because ultimately we have to go from M2-Planet to TCC</span></div><div class="line" id="205323"><span class="nick" style="color:#6d2462"><a href="#205323" label="[20:53:23]">&lt;stikonas&gt;</a></span><span class="message">right now we have one slow way that only works on x86</span></div><div class="line" id="205324"><span class="nick" style="color:#80b1d3"><a href="#205324" label="[20:53:24]">&lt;unmatched-paren&gt;</a></span><span class="message">Lua has PEGs, which would make building a C compiler far easier</span></div><div class="line" id="205357"><span class="nick" style="color:#80b1d3"><a href="#205357" label="[20:53:57]">&lt;unmatched-paren&gt;</a></span><span class="message">and replicating the entire Lua stdlib probably isn't that hard, since it's so tiny</span></div><div class="line" id="205450"><span class="nick" style="color:#6d2462"><a href="#205450" label="[20:54:50]">&lt;stikonas&gt;</a></span><span class="message">but finding somebody willing to do that might be harder</span></div><div class="line" id="205512"><span class="nick" style="color:#80b1d3"><a href="#205512" label="[20:55:12]">&lt;unmatched-paren&gt;</a></span><span class="message">yes :)</span></div><div class="line" id="205629"><span class="nick" style="color:#af8d2f"><a href="#205629" label="[20:56:29]">*</a></span><span class="message">unmatched-paren still can't find a decent, complete, smallish assembly tutorial/guide</span></div><div class="line" id="205657"><span class="nick" style="color:#80b1d3"><a href="#205657" label="[20:56:57]">&lt;unmatched-paren&gt;</a></span><span class="message">the AMD ISA manuals are HUUUGE and very boring</span></div><div class="line" id="205710"><span class="nick" style="color:#6d2462"><a href="#205710" label="[20:57:10]">&lt;stikonas&gt;</a></span><span class="message">riscv assembly is quite a bit smaller and easier to learn</span></div><div class="line" id="205715"><span class="nick" style="color:#80b1d3"><a href="#205715" label="[20:57:15]">&lt;unmatched-paren&gt;</a></span><span class="message">even if i try to flick through to find what i want</span></div><div class="line" id="205716"><span class="nick" style="color:#6d2462"><a href="#205716" label="[20:57:16]">&lt;stikonas&gt;</a></span><span class="message">might be good place to start</span></div><div class="line" id="205723"><span class="nick" style="color:#80b1d3"><a href="#205723" label="[20:57:23]">&lt;unmatched-paren&gt;</a></span><span class="message">it's very hard to find what i want :)</span></div><div class="line" id="205738"><span class="nick" style="color:#80b1d3"><a href="#205738" label="[20:57:38]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: i presume i'd use qemu to run the asm?</span></div><div class="line" id="205744"><span class="nick" style="color:#80b1d3"><a href="#205744" label="[20:57:44]">&lt;unmatched-paren&gt;</a></span><span class="message">how would i do that?</span></div><div class="line" id="205826"><span class="nick" style="color:#80b1d3"><a href="#205826" label="[20:58:26]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm actually surprised that there's virtually no resources</span></div><div class="line" id="205833"><span class="nick" style="color:#6d2462"><a href="#205833" label="[20:58:33]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: yes, I just compiled risc-v binaries with riscv64-unknown-linux-gnu-as</span></div><div class="line" id="205844"><span class="nick" style="color:#6d2462"><a href="#205844" label="[20:58:44]">&lt;stikonas&gt;</a></span><span class="message">and ran them with qemu-riscv64</span></div><div class="line" id="205900"><span class="nick" style="color:#80b1d3"><a href="#205900" label="[20:59:00]">&lt;unmatched-paren&gt;</a></span><span class="message">osdev.org looks to have a lot of neat tricks, but they're not general</span></div><div class="line" id="205923"><span class="nick" style="color:#6d2462"><a href="#205923" label="[20:59:23]">&lt;stikonas&gt;</a></span><span class="message">I was using this a  bit <a rel="nofollow" href="https://web.eecs.utk.edu/~smarz1/courses/ece356/notes/assembly/">https://web.eecs.utk.edu/~smarz1/courses/ece356/notes/assembly/</a> </span></div><div class="line" id="210005"><span class="nick" style="color:#80b1d3"><a href="#210005" label="[21:00:05]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm not sure how to install a RISC-V toolchain on guix</span></div><div class="line" id="210006"><span class="nick" style="color:#6d2462"><a href="#210006" label="[21:00:06]">&lt;stikonas&gt;</a></span><span class="message">it has a bit of info on arithmetic operations, branching, functions</span></div><div class="line" id="210009"><span class="nick" style="color:#80b1d3"><a href="#210009" label="[21:00:09]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll go ask #guix</span></div><div class="line" id="210035"><span class="nick" style="color:#80b1d3"><a href="#210035" label="[21:00:35]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: nice!</span></div><div class="line" id="210037"><span class="nick" style="color:#6d2462"><a href="#210037" label="[21:00:37]">&lt;stikonas&gt;</a></span><span class="message">you can build risc-v assembler (M1) with stage0-posix</span></div><div class="line" id="210048"><span class="nick" style="color:#6d2462"><a href="#210048" label="[21:00:48]">&lt;stikonas&gt;</a></span><span class="message">although it uses our custom non-GNU syntax</span></div><div class="line" id="210110"><span class="nick" style="color:#2e2a4a"><a href="#210110" label="[21:01:10]">&lt;muurkha&gt;</a></span><span class="message">a PEG parsing engine is easy to build in any language, so having it in the language's standard library isn't a significant advantage</span></div><div class="line" id="210136"><span class="nick" style="color:#2e2a4a"><a href="#210136" label="[21:01:36]">&lt;muurkha&gt;</a></span><span class="message">especially if you also have to implmenet the standard library, in which case it's no advantage at all</span></div><div class="line" id="210157"><span class="nick" style="color:#80b1d3"><a href="#210157" label="[21:01:57]">&lt;unmatched-paren&gt;</a></span><span class="message">fair point</span></div><div class="line" id="210325"><span class="nick" style="color:#6d2462"><a href="#210325" label="[21:03:25]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet itself is occasionally akward to add new features to it. But that's partially because it arose as a C port of cc_x86 compiler</span></div><div class="line" id="210355"><span class="nick" style="color:#2e2a4a"><a href="#210355" label="[21:03:55]">&lt;muurkha&gt;</a></span><span class="message">the repo I linked above includes a fairly Spartan implementation of PEG parsing in JS</span></div><div class="line" id="210356"><span class="nick" style="color:#6d2462"><a href="#210356" label="[21:03:56]">&lt;stikonas&gt;</a></span><span class="message">and cc_x86 was written in assembly</span></div><div class="line" id="210400"><span class="nick" style="color:#2e2a4a"><a href="#210400" label="[21:04:00]">&lt;muurkha&gt;</a></span><span class="message">it's 66 lines of code</span></div><div class="line" id="210504"><span class="nick" style="color:#80b1d3"><a href="#210504" label="[21:05:04]">&lt;unmatched-paren&gt;</a></span><span class="message">annoyingly, the main lua implements the stdlib in the core C instead of as standalone lua, so we couldn't reuse it; if we could, then we could simply reuse it, and writing a bootstrap lua would suddenly seem like a very interesting idea...</span></div><div class="line" id="210937"><span class="nick" style="color:#2e2a4a"><a href="#210937" label="[21:09:37]">&lt;muurkha&gt;</a></span><span class="message">the most useful thing I've found for learning i386 assembly is GCC</span></div><div class="line" id="211029"><span class="nick" style="color:#2e2a4a"><a href="#211029" label="[21:10:29]">&lt;muurkha&gt;</a></span><span class="message">specifically gcc -g -Wa,-adhlns=foo.lst</span></div><div class="line" id="211049"><span class="nick" style="color:#2e2a4a"><a href="#211049" label="[21:10:49]">&lt;muurkha&gt;</a></span><span class="message">also objdump -d is useful</span></div><div class="line" id="211051"><span class="nick" style="color:#80b1d3"><a href="#211051" label="[21:10:51]">&lt;unmatched-paren&gt;</a></span><span class="message">what does the -adhlns assembler flag do?</span></div><div class="line" id="211111"><span class="nick" style="color:#2e2a4a"><a href="#211111" label="[21:11:11]">&lt;muurkha&gt;</a></span><span class="message">it directs the assembler to generate a &quot;listing&quot;</span></div><div class="line" id="211149"><span class="nick" style="color:#2e2a4a"><a href="#211149" label="[21:11:49]">&lt;muurkha&gt;</a></span><span class="message">listings are a bit of an archaeological thing.  they were really important in punchcard days</span></div><div class="line" id="211157"><span class="nick" style="color:#2e2a4a"><a href="#211157" label="[21:11:57]">&lt;muurkha&gt;</a></span><span class="message">nowadays almost nobody uses them</span></div><div class="line" id="211222"><span class="nick" style="color:#af8d2f"><a href="#211222" label="[21:12:22]">*</a></span><span class="message">unmatched-paren qutebrowser `:open what is an assembler listing`</span></div><div class="line" id="211239"><span class="nick" style="color:#2e2a4a"><a href="#211239" label="[21:12:39]">&lt;muurkha&gt;</a></span><span class="message">but the idea is that they tell you exactly what the assembler output and why, and with -g GCC includes the source code as well</span></div><div class="line" id="211304"><span class="nick" style="color:#2e2a4a"><a href="#211304" label="[21:13:04]">&lt;muurkha&gt;</a></span><span class="message">so you write a program in C, compile it, and look at the listing</span></div><div class="line" id="211311"><span class="nick" style="color:#80b1d3"><a href="#211311" label="[21:13:11]">&lt;unmatched-paren&gt;</a></span><span class="message">hmm, seems useful: <a rel="nofollow" href="https://bob.cs.sonoma.edu/IntroCompOrg-RPi/section-52.html">https://bob.cs.sonoma.edu/IntroCompOrg-RPi/section-52.html</a> </span></div><div class="line" id="211349"><span class="nick" style="color:#6d2462"><a href="#211349" label="[21:13:49]">&lt;stikonas&gt;</a></span><span class="message">well, that's yet another ISA... arm</span></div><div class="line" id="211411"><span class="nick" style="color:#2e2a4a"><a href="#211411" label="[21:14:11]">&lt;muurkha&gt;</a></span><span class="message">maybe in 01974 this was a routine thing to do in order to verify that the binary program that had been generated did what you intended, before waiting for 48-hour batch job turnarounds in order to test it</span></div><div class="line" id="211424"><span class="nick" style="color:#80b1d3"><a href="#211424" label="[21:14:24]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah it seems to be for the raspberry pi, but it does give me an idea of what a listing looks like</span></div><div class="line" id="211457"><span class="nick" style="color:#2e2a4a"><a href="#211457" label="[21:14:57]">&lt;muurkha&gt;</a></span><span class="message">yeah.  -adhlns generates a more elaborate listing than just -al</span></div><div class="line" id="211507"><span class="nick" style="color:#2e2a4a"><a href="#211507" label="[21:15:07]">&lt;muurkha&gt;</a></span><span class="message">you can find the details in the gas man page</span></div><div class="line" id="211538"><span class="nick" style="color:#80b1d3"><a href="#211538" label="[21:15:38]">&lt;unmatched-paren&gt;</a></span><span class="message">paren@guix-aspire ~ [env]$ man gas</span></div><div class="line" id="211539"><span class="nick" style="color:#80b1d3"><a href="#211539" label="[21:15:39]">&lt;unmatched-paren&gt;</a></span><span class="message">No manual entry for gas</span></div><div class="line" id="211548"><span class="nick" style="color:#80b1d3"><a href="#211548" label="[21:15:48]">&lt;unmatched-paren&gt;</a></span><span class="message">strange</span></div><div class="line" id="211557"><span class="nick" style="color:#2e2a4a"><a href="#211557" label="[21:15:57]">&lt;muurkha&gt;</a></span><span class="message">well, the info page really</span></div><div class="line" id="211624"><span class="nick" style="color:#2e2a4a"><a href="#211624" label="[21:16:24]">&lt;muurkha&gt;</a></span><span class="message">and it's probably &quot;as&quot;</span></div><div class="line" id="211633"><span class="nick" style="color:#80b1d3"><a href="#211633" label="[21:16:33]">&lt;unmatched-paren&gt;</a></span><span class="message">i tried as too</span></div><div class="line" id="211645"><span class="nick" style="color:#80b1d3"><a href="#211645" label="[21:16:45]">&lt;unmatched-paren&gt;</a></span><span class="message">and neither `info gas` nor `info as` works</span></div><div class="line" id="211646"><span class="nick" style="color:#2e2a4a"><a href="#211646" label="[21:16:46]">&lt;muurkha&gt;</a></span><span class="message">possibly you don't have the documentation installed</span></div><div class="line" id="211702"><span class="nick" style="color:#80b1d3"><a href="#211702" label="[21:17:02]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, i might have to install `binutils:doc`</span></div><div class="line" id="211737"><span class="nick" style="color:#80b1d3"><a href="#211737" label="[21:17:37]">&lt;unmatched-paren&gt;</a></span><span class="message">binutils only seems to have an `out` output...</span></div><div class="line" id="211743"><span class="nick" style="color:#2e2a4a"><a href="#211743" label="[21:17:43]">&lt;muurkha&gt;</a></span><span class="message">there's a long-running dispute between Debian and the GNU project about whether GNU manuals are free enough that results in GNU documentation often not being installed on Debian-derived systems.  not sure if the same thing happened with Guix</span></div><div class="line" id="211813"><span class="nick" style="color:#2e2a4a"><a href="#211813" label="[21:18:13]">&lt;muurkha&gt;</a></span><span class="message">because the invariant sections provided by the GFDL cause the manuals to not fulfill the Debian Free Software Guidelines</span></div><div class="line" id="211821"><span class="nick" style="color:#80b1d3"><a href="#211821" label="[21:18:21]">&lt;unmatched-paren&gt;</a></span><span class="message">i remember hearing about that, but i doubt it would happen on a GNU distro</span></div><div class="line" id="211844"><span class="nick" style="color:#80b1d3"><a href="#211844" label="[21:18:44]">&lt;unmatched-paren&gt;</a></span><span class="message">no binutils:doc output...</span></div><div class="line" id="211856"><span class="nick" style="color:#80b1d3"><a href="#211856" label="[21:18:56]">&lt;unmatched-paren&gt;</a></span><span class="message">nor any binutils-doc package or anything</span></div><div class="line" id="211917"><span class="nick" style="color:#2e2a4a"><a href="#211917" label="[21:19:17]">&lt;muurkha&gt;</a></span><span class="message">anyway the great thing about looking at assembler output is that it focuses on specifically the instructions that are useful most of the time</span></div><div class="line" id="211927"><span class="nick" style="color:#80b1d3"><a href="#211927" label="[21:19:27]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: i suppose debian provides their own original manual pages for GNU stuff?</span></div><div class="line" id="211930"><span class="nick" style="color:#2e2a4a"><a href="#211930" label="[21:19:30]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="211948"><span class="nick" style="color:#2e2a4a"><a href="#211948" label="[21:19:48]">&lt;muurkha&gt;</a></span><span class="message">they just put the GNU docs in non-free</span></div><div class="line" id="211955"><span class="nick" style="color:#80b1d3"><a href="#211955" label="[21:19:55]">&lt;unmatched-paren&gt;</a></span><span class="message">hm, okay</span></div><div class="line" id="212021"><span class="nick" style="color:#80b1d3"><a href="#212021" label="[21:20:21]">&lt;unmatched-paren&gt;</a></span><span class="message">anyway... i still can't find a way to install a RISC-V toolchain on guix</span></div><div class="line" id="212119"><span class="nick" style="color:#2e2a4a"><a href="#212119" label="[21:21:19]">&lt;muurkha&gt;</a></span><span class="message">zooming in further from looking at the listing, you can write a program in C, compile it, and then run it under GDB instruction by instruction so that you can see the effect of each instruction</span></div><div class="line" id="212222"><span class="nick" style="color:#2e2a4a"><a href="#212222" label="[21:22:22]">&lt;muurkha&gt;</a></span><span class="message">this is most effective when you have a specific question like &quot;does the inc instruction affect the i386 flags&quot; or &quot;which of these registers is the source and which is the destination&quot;</span></div><div class="line" id="212232"><span class="nick" style="color:#2e2a4a"><a href="#212232" label="[21:22:32]">&lt;muurkha&gt;</a></span><span class="message">or &quot;why is my program crashing&quot;</span></div><div class="line" id="212255"><span class="nick" style="color:#80b1d3"><a href="#212255" label="[21:22:55]">&lt;unmatched-paren&gt;</a></span><span class="message">'or &quot;why is my program crashing&quot;' &lt;- which is also useful in C :)</span></div><div class="line" id="212311"><span class="nick" style="color:#2e2a4a"><a href="#212311" label="[21:23:11]">&lt;muurkha&gt;</a></span><span class="message">yes, but sometimes the answer is only comprehensible at the assembly level</span></div><div class="line" id="212359"><span class="nick" style="color:#2e2a4a"><a href="#212359" label="[21:23:59]">&lt;muurkha&gt;</a></span><span class="message">also though stepping through instruction by instruction at least once can be very helpful in understanding what's going on.  not every instruction of, like, Firefox</span></div><div class="line" id="212429"><span class="nick" style="color:#2e2a4a"><a href="#212429" label="[21:24:29]">&lt;muurkha&gt;</a></span><span class="message">but for small programs it's a reasonable thing to do. when you get to running the same loop or subroutine a second time you can skip it</span></div><div class="line" id="212548"><span class="nick" style="color:#2e2a4a"><a href="#212548" label="[21:25:48]">&lt;muurkha&gt;</a></span><span class="message">this kind of thing is a lot more helpful for understanding questions like &quot;what is this stupid instruction good for&quot; and &quot;how do I make a subroutine&quot; which the instruction set manuals are usually totally useless for</span></div><div class="line" id="212850"><span class="nick" style="color:#80b1d3"><a href="#212850" label="[21:28:50]">&lt;unmatched-paren&gt;</a></span><span class="message">aha, civodul just told me how to get a cross binutils :)</span></div><div class="line" id="212854"><span class="nick" style="color:#2e2a4a"><a href="#212854" label="[21:28:54]">&lt;muurkha&gt;</a></span><span class="message">yay!</span></div><div class="line" id="212908"><span class="nick" style="color:#389600"><a href="#212908" label="[21:29:08]">&lt;civodul&gt;</a></span><span class="message">muurkha: re GFDL, a number of GNU packages dropped invariant sections back then</span></div><div class="line" id="212915"><span class="nick" style="color:#2e2a4a"><a href="#212915" label="[21:29:15]">&lt;muurkha&gt;</a></span><span class="message">civodul: thank god</span></div><div class="line" id="212934"><span class="nick" style="color:#389600"><a href="#212934" label="[21:29:34]">&lt;civodul&gt;</a></span><span class="message">yeah; Emacs is a notably (and sad) exception</span></div><div class="line" id="212955"><span class="nick" style="color:#2e2a4a"><a href="#212955" label="[21:29:55]">&lt;muurkha&gt;</a></span><span class="message">to see which instructions are used in practice something like this can be helpful:</span></div><div class="line" id="213002"><span class="nick" style="color:#80b1d3"><a href="#213002" label="[21:30:02]">&lt;unmatched-paren&gt;</a></span><span class="message">...so does that mean that emacs built-in docs are completely unavailable in debian?</span></div><div class="line" id="213002"><span class="nick" style="color:#2e2a4a"><a href="#213002" label="[21:30:02]">&lt;muurkha&gt;</a></span><span class="message">objdump -d /lib/x86_64-linux-gnu/libc.so.6  | grep '^ ' | cut -c 33-39 | sort | uniq -c | sort -nr | head -20</span></div><div class="line" id="213012"><span class="nick" style="color:#2e2a4a"><a href="#213012" label="[21:30:12]">&lt;muurkha&gt;</a></span><span class="message">no, you just have to install them from non-free</span></div><div class="line" id="213024"><span class="nick" style="color:#80b1d3"><a href="#213024" label="[21:30:24]">&lt;unmatched-paren&gt;</a></span><span class="message">well, yes; i mean in debian main :)</span></div><div class="line" id="213034"><span class="nick" style="color:#2e2a4a"><a href="#213034" label="[21:30:34]">&lt;muurkha&gt;</a></span><span class="message">oh, then yes</span></div><div class="line" id="213117"><span class="nick" style="color:#80b1d3"><a href="#213117" label="[21:31:17]">&lt;unmatched-paren&gt;</a></span><span class="message">according to debian, non-free is not an official part of debian, but we all know what that discussion lead to...</span></div><div class="line" id="213220"><span class="nick" style="color:#2e2a4a"><a href="#213220" label="[21:32:20]">&lt;muurkha&gt;</a></span><span class="message">the above pipeline reveals that &quot;mov&quot; instructions are more than 25% of the instructions in libc</span></div><div class="line" id="213239"><span class="nick" style="color:#2e2a4a"><a href="#213239" label="[21:32:39]">&lt;muurkha&gt;</a></span><span class="message">(on amd64, not RISC-V)</span></div><div class="line" id="213536"><span class="nick" style="color:#80b1d3"><a href="#213536" label="[21:35:36]">&lt;unmatched-paren&gt;</a></span><span class="message">apparently i need to setup something called 'binfmt_misc' to run non-native binaries easily?</span></div><div class="line" id="213547"><span class="nick" style="color:#80b1d3"><a href="#213547" label="[21:35:47]">&lt;unmatched-paren&gt;</a></span><span class="message">not sure how that would be done in guix</span></div><div class="line" id="213641"><span class="nick" style="color:#389600"><a href="#213641" label="[21:36:41]">&lt;civodul&gt;</a></span><span class="message">unmatched-paren: see <a rel="nofollow" href="https://guix.gnu.org/manual/devel/en/html_node/Virtualization-Services.html#index-qemu_002dbinfmt_002dconfiguration">https://guix.gnu.org/manual/devel/en/html_node/Virtualization-Services.html#index-qemu_002dbinfmt_002dconfiguration</a>  :-)</span></div><div class="line" id="213644"><span class="nick" style="color:#2e2a4a"><a href="#213644" label="[21:36:44]">&lt;muurkha&gt;</a></span><span class="message">yeah, binfmt_misc allows you to register handlers for weirdo executable formats, so you can run them with for example qemu-user</span></div><div class="line" id="213651"><span class="nick" style="color:#80b1d3"><a href="#213651" label="[21:36:51]">&lt;unmatched-paren&gt;</a></span><span class="message">civodul: thank you again :)</span></div><div class="line" id="213653"><span class="nick" style="color:#2e2a4a"><a href="#213653" label="[21:36:53]">&lt;muurkha&gt;</a></span><span class="message">I think originally it was for Java</span></div><div class="line" id="213741"><span class="nick" style="color:#2e2a4a"><a href="#213741" label="[21:37:41]">&lt;muurkha&gt;</a></span><span class="message">later generalized</span></div><div class="line" id="213759"><span class="nick" style="color:#80b1d3"><a href="#213759" label="[21:37:59]">&lt;unmatched-paren&gt;</a></span><span class="message">so you could pretend that java bytecode executables were native ones?</span></div><div class="line" id="213855"><span class="nick" style="color:#2e2a4a"><a href="#213855" label="[21:38:55]">&lt;muurkha&gt;</a></span><span class="message">yeah.  although it wasn't very transparent for java because it always took forever to spin up a new JVM</span></div><div class="line" id="213908"><span class="nick" style="color:#80b1d3"><a href="#213908" label="[21:39:08]">&lt;unmatched-paren&gt;</a></span><span class="message">no surprise there :P</span></div><div class="line" id="213944"><span class="nick" style="color:#2e2a4a"><a href="#213944" label="[21:39:44]">&lt;muurkha&gt;</a></span><span class="message">with qemu-user it can be transparent enough that you don't even realize you compiled a program for the wrong architecture for quite a while</span></div><div class="line" id="214012"><span class="nick" style="color:#80b1d3"><a href="#214012" label="[21:40:12]">&lt;unmatched-paren&gt;</a></span><span class="message">qemu is basically a JIT compiler for foreign instruction sets, right?</span></div><div class="line" id="214108"><span class="nick" style="color:#2e2a4a"><a href="#214108" label="[21:41:08]">&lt;muurkha&gt;</a></span><span class="message">that's right</span></div><div class="line" id="214133"><span class="nick" style="color:#2e2a4a"><a href="#214133" label="[21:41:33]">&lt;muurkha&gt;</a></span><span class="message">cribbing instruction sequences from whatever AOT compiler it was compiled with</span></div><div class="line" id="214311"><span class="nick" style="color:#80b1d3"><a href="#214311" label="[21:43:11]">&lt;unmatched-paren&gt;</a></span><span class="message">could you technically make an ahead-of-time QEMU...? then it wouldn't matter which targets ${YOUR_COOL_NEW_PROGRAMMING_LANGUAGE} supports, you could just compile with $(YOUR_SHINY_NEW_COMPILER} to a foreign binary and AOT-qemu it into a native binary</span></div><div class="line" id="214427"><span class="nick" style="color:#2e2a4a"><a href="#214427" label="[21:44:27]">&lt;muurkha&gt;</a></span><span class="message">sure, lots of people have done binary instruction set translation.  it doesn't work for things that load or generate code at runtime but otherwise it's fine</span></div><div class="line" id="214524"><span class="nick" style="color:#2e2a4a"><a href="#214524" label="[21:45:24]">&lt;muurkha&gt;</a></span><span class="message">the HP Dynamo paper actually got speedups from compiling from one instruction set into exactly the same instruction set because they were able to do better optimization on the code than the original compiler did</span></div><div class="line" id="214530"><span class="nick" style="color:#2e2a4a"><a href="#214530" label="[21:45:30]">&lt;muurkha&gt;</a></span><span class="message">that was in the 01990s, I doubt it would work today</span></div><div class="line" id="214552"><span class="nick" style="color:#2e2a4a"><a href="#214552" label="[21:45:52]">&lt;muurkha&gt;</a></span><span class="message">unless you originally compiled with -O0 or one of my toy compilers or something</span></div><div class="line" id="214630"><span class="nick" style="color:#80b1d3"><a href="#214630" label="[21:46:30]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: that just sounds like a language-independent machine code optimizer, not an instruction set translator</span></div><div class="line" id="214637"><span class="nick" style="color:#2e2a4a"><a href="#214637" label="[21:46:37]">&lt;muurkha&gt;</a></span><span class="message">yup</span></div><div class="line" id="214736"><span class="nick" style="color:#2e2a4a"><a href="#214736" label="[21:47:36]">&lt;muurkha&gt;</a></span><span class="message">the original proposal for making $(YOUR_SHINY_NEW_COMPILER) machine-independent in the way you describe was called UNCOL in 01958: <a rel="nofollow" href="https://en.wikipedia.org/wiki/UNCOL">https://en.wikipedia.org/wiki/UNCOL</a> </span></div><div class="line" id="214759"><span class="nick" style="color:#2e2a4a"><a href="#214759" label="[21:47:59]">&lt;muurkha&gt;</a></span><span class="message">nowadays generally C is the UNCOL of choice for people who choose to go that route</span></div><div class="line" id="214807"><span class="nick" style="color:#80b1d3"><a href="#214807" label="[21:48:07]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: or LLVM or QBE</span></div><div class="line" id="214815"><span class="nick" style="color:#80b1d3"><a href="#214815" label="[21:48:15]">&lt;unmatched-paren&gt;</a></span><span class="message">that kinda counts?</span></div><div class="line" id="214820"><span class="nick" style="color:#2e2a4a"><a href="#214820" label="[21:48:20]">&lt;muurkha&gt;</a></span><span class="message">or LLVM bitcode, yeah!  what's QBE?</span></div><div class="line" id="214824"><span class="nick" style="color:#2e2a4a"><a href="#214824" label="[21:48:24]">&lt;muurkha&gt;</a></span><span class="message">not query by example I suppose</span></div><div class="line" id="214830"><span class="nick" style="color:#80b1d3"><a href="#214830" label="[21:48:30]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://c9x.me/compile">https://c9x.me/compile</a> </span></div><div class="line" id="214836"><span class="nick" style="color:#80b1d3"><a href="#214836" label="[21:48:36]">&lt;unmatched-paren&gt;</a></span><span class="message">exciting new compiler backend</span></div><div class="line" id="214848"><span class="nick" style="color:#80b1d3"><a href="#214848" label="[21:48:48]">&lt;unmatched-paren&gt;</a></span><span class="message">aiming to not be a hulking behemoth like LLVM</span></div><div class="line" id="214907"><span class="nick" style="color:#2e2a4a"><a href="#214907" label="[21:49:07]">&lt;muurkha&gt;</a></span><span class="message">aha, neat</span></div><div class="line" id="214912"><span class="nick" style="color:#80b1d3"><a href="#214912" label="[21:49:12]">&lt;unmatched-paren&gt;</a></span><span class="message">currently supports RISC-V 64-bit, x64, and AArch64</span></div><div class="line" id="214923"><span class="nick" style="color:#80b1d3"><a href="#214923" label="[21:49:23]">&lt;unmatched-paren&gt;</a></span><span class="message">sourcehut's programming language targets it</span></div><div class="line" id="214958"><span class="nick" style="color:#80b1d3"><a href="#214958" label="[21:49:58]">&lt;unmatched-paren&gt;</a></span><span class="message">there's a C compiler targeting it (cproc) and my Pascal compiler project will as well</span></div><div class="line" id="215012"><span class="nick" style="color:#2e2a4a"><a href="#215012" label="[21:50:12]">&lt;muurkha&gt;</a></span><span class="message">cool!</span></div><div class="line" id="215036"><span class="nick" style="color:#2e2a4a"><a href="#215036" label="[21:50:36]">&lt;muurkha&gt;</a></span><span class="message">but for example in the late 01960s there were simple pseudo-machine instruction sets for BCPL (O-code), SNOBOL, and META-II</span></div><div class="line" id="215111"><span class="nick" style="color:#2e2a4a"><a href="#215111" label="[21:51:11]">&lt;muurkha&gt;</a></span><span class="message">in the SNOBOL case the pseudo-instructions were implemented as assembler macros for each of the machines SNOBOL was ported to</span></div><div class="line" id="215232"><span class="nick" style="color:#2e2a4a"><a href="#215232" label="[21:52:32]">&lt;muurkha&gt;</a></span><span class="message">right now I'm playing around with some ideas for a C-oriented virtual machine for small computers, aimed more at interpretation than compilation</span></div><div class="line" id="215359"><span class="nick" style="color:#2e2a4a"><a href="#215359" label="[21:53:59]">&lt;muurkha&gt;</a></span><span class="message">the objective is to get maximum usefulness out of minimum RAM, because microcontrollers now have respectable amounts of RAM but vastly disproportionate amounts of computational power</span></div><div class="line" id="215518"><span class="nick" style="color:#2e2a4a"><a href="#215518" label="[21:55:18]">&lt;muurkha&gt;</a></span><span class="message">like, I'm looking at the Ambiq Apollo3, which has 384KiB of RAM and 1MiB of Flash, so it's comparable to an Amiga 1000 or a Mac SE memorywise, but it's a 48 MHz Cortex-M4F, about 100 times the CPU power of those machines</span></div><div class="line" id="215929"><span class="nick" style="color:#80b1d3"><a href="#215929" label="[21:59:29]">&lt;unmatched-paren&gt;</a></span><span class="message">just reconfiguring to add qemu-binfmt-service-type to my machine... i'll presumably need to reboot once it's done?</span></div><div class="line" id="220001"><span class="nick" style="color:#2e2a4a"><a href="#220001" label="[22:00:01]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="220009"><span class="nick" style="color:#80b1d3"><a href="#220009" label="[22:00:09]">&lt;unmatched-paren&gt;</a></span><span class="message">excellent :)</span></div><div class="line" id="220022"><span class="nick" style="color:#2e2a4a"><a href="#220022" label="[22:00:22]">&lt;muurkha&gt;</a></span><span class="message">not unless your kernel is compiled to not support kernel modules</span></div><div class="line" id="220025"><span class="nick" style="color:#80b1d3"><a href="#220025" label="[22:00:25]">&lt;unmatched-paren&gt;</a></span><span class="message">i presumed i did because it's a kernel feature</span></div><div class="line" id="220028"><span class="nick" style="color:#80b1d3"><a href="#220028" label="[22:00:28]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, k</span></div><div class="line" id="220125"><span class="nick" style="color:#2e2a4a"><a href="#220125" label="[22:01:25]">&lt;muurkha&gt;</a></span><span class="message">(and possibly not even then if binfmt_misc is compiled into it.  but normally people load it as a module)</span></div><div class="line" id="220219"><span class="nick" style="color:#80b1d3"><a href="#220219" label="[22:02:19]">&lt;unmatched-paren&gt;</a></span><span class="message">i have binfmt_misc and a risc-v `as`, so i guess i'll try writing some assembly now :)</span></div><div class="line" id="220756"><span class="nick" style="color:#80b1d3"><a href="#220756" label="[22:07:56]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: first question: why do i need the `a0` in `addi a0, x0, 1` (to put the stdout file handle `1` in `x0`)? the equivalent x64 is `mov %rdi, $1`, which obviously needs only two arguments</span></div><div class="line" id="220852"><span class="nick" style="color:#80b1d3"><a href="#220852" label="[22:08:52]">&lt;unmatched-paren&gt;</a></span><span class="message">actually, seems like my question should be `why do i need the x0`...</span></div><div class="line" id="220925"><span class="nick" style="color:#80b1d3"><a href="#220925" label="[22:09:25]">&lt;unmatched-paren&gt;</a></span><span class="message">since it seems like RISC-V has additional friendlier names for its registers?</span></div><div class="line" id="220953"><span class="nick" style="color:#80b1d3"><a href="#220953" label="[22:09:53]">&lt;unmatched-paren&gt;</a></span><span class="message">ohh, seems like `add` and `mov` are unified?</span></div><div class="line" id="221144"><span class="nick" style="color:#80b1d3"><a href="#221144" label="[22:11:44]">&lt;unmatched-paren&gt;</a></span><span class="message">so the first argument is the destination, the second argument is a register (the contents of which will be added to the destination, and can use the zero register if you don't want this), and the third is an immediate value to add (which can be zero if you only want to sum the registers)</span></div><div class="line" id="221149"><span class="nick" style="color:#80b1d3"><a href="#221149" label="[22:11:49]">&lt;unmatched-paren&gt;</a></span><span class="message">makes sense</span></div><div class="line" id="221918"><span class="nick" style="color:#2e2a4a"><a href="#221918" label="[22:19:18]">&lt;muurkha&gt;</a></span><span class="message">yeah, the background there is that fixed-width instructions are much easier to implement in hardware than variable-length instructions, especially if performance is important</span></div><div class="line" id="221941"><span class="nick" style="color:#2e2a4a"><a href="#221941" label="[22:19:41]">&lt;muurkha&gt;</a></span><span class="message">(though later RISC-V did add moderately-variable-length instructions in the &quot;C&quot; extension)</span></div><div class="line" id="222120"><span class="nick" style="color:#2e2a4a"><a href="#222120" label="[22:21:20]">&lt;muurkha&gt;</a></span><span class="message">and 32 bits is enough for a fixed-width instruction in almost all cases, the big exception being 32-bit literals, which obviously won't fit into a 32-bit instruction word along with some kind of opcode</span></div><div class="line" id="222210"><span class="nick" style="color:#2e2a4a"><a href="#222210" label="[22:22:10]">&lt;muurkha&gt;</a></span><span class="message">so rather than making the instruction word 40 bits or 64 bits or something, they decided to make it take a two-instruction sequence to load an arbitrary 32-bit constant</span></div><div class="line" id="222231"><span class="nick" style="color:#80b1d3"><a href="#222231" label="[22:22:31]">&lt;unmatched-paren&gt;</a></span><span class="message">right</span></div><div class="line" id="222244"><span class="nick" style="color:#2e2a4a"><a href="#222244" label="[22:22:44]">&lt;muurkha&gt;</a></span><span class="message">the second instruction in the sequence is addi</span></div><div class="line" id="222301"><span class="nick" style="color:#af8d2f"><a href="#222301" label="[22:23:01]">*</a></span><span class="message">unmatched-paren afk</span></div><div class="line" id="222321"><span class="nick" style="color:#2e2a4a"><a href="#222321" label="[22:23:21]">&lt;muurkha&gt;</a></span><span class="message">the first instruction is unnecessary for constants of 12 bits or less, such as 1</span></div><div class="line" id="223618"><span class="nick" style="color:#af8d2f"><a href="#223618" label="[22:36:18]">*</a></span><span class="message">unmatched-paren has returned</span></div><div class="line" id="223916"><span class="nick" style="color:#80b1d3"><a href="#223916" label="[22:39:16]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: i'll define a `mov` macro for adding constants to registers, then...</span></div><div class="line" id="224107"><span class="nick" style="color:#2e2a4a"><a href="#224107" label="[22:41:07]">&lt;muurkha&gt;</a></span><span class="message">the standard name for that macro is `li`</span></div><div class="line" id="224117"><span class="nick" style="color:#2e2a4a"><a href="#224117" label="[22:41:17]">&lt;muurkha&gt;</a></span><span class="message">well, for the version that loads a constant rather than adding one</span></div><div class="line" id="224135"><span class="nick" style="color:#80b1d3"><a href="#224135" label="[22:41:35]">&lt;unmatched-paren&gt;</a></span><span class="message">why is it called `addi`, then?</span></div><div class="line" id="224231"><span class="nick" style="color:#2e2a4a"><a href="#224231" label="[22:42:31]">&lt;muurkha&gt;</a></span><span class="message">`addi` is the general instruction at the machine level; `li` and `la` generate it as part of their output</span></div><div class="line" id="224249"><span class="nick" style="color:#80b1d3"><a href="#224249" label="[22:42:49]">&lt;unmatched-paren&gt;</a></span><span class="message">i mean, why is it called `addi` if it doesn't add</span></div><div class="line" id="224310"><span class="nick" style="color:#6d2462"><a href="#224310" label="[22:43:10]">&lt;stikonas&gt;</a></span><span class="message">li is a bit more advanced than just addi</span></div><div class="line" id="224311"><span class="nick" style="color:#2e2a4a"><a href="#224311" label="[22:43:11]">&lt;muurkha&gt;</a></span><span class="message">it does, but when one of its source operands is the zero register, adding and loading are the same</span></div><div class="line" id="224327"><span class="nick" style="color:#6d2462"><a href="#224327" label="[22:43:27]">&lt;stikonas&gt;</a></span><span class="message">li can deal with larger than 12 bit integers</span></div><div class="line" id="224339"><span class="nick" style="color:#80b1d3"><a href="#224339" label="[22:43:39]">&lt;unmatched-paren&gt;</a></span><span class="message">okay...</span></div><div class="line" id="224341"><span class="nick" style="color:#6d2462"><a href="#224341" label="[22:43:41]">&lt;stikonas&gt;</a></span><span class="message">and translates it into a few actual instructions</span></div><div class="line" id="224349"><span class="nick" style="color:#80b1d3"><a href="#224349" label="[22:43:49]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: \o/</span></div><div class="line" id="224426"><span class="nick" style="color:#2e2a4a"><a href="#224426" label="[22:44:26]">&lt;muurkha&gt;</a></span><span class="message">addi is also used for other things, such as indexing struct fields and incrementing counters</span></div><div class="line" id="224430"><span class="nick" style="color:#6d2462"><a href="#224430" label="[22:44:30]">&lt;stikonas&gt;</a></span><span class="message">often it can be lui  (for higher bits) followed by addi (for lowre bits)</span></div><div class="line" id="224447"><span class="nick" style="color:#80b1d3"><a href="#224447" label="[22:44:47]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, so `li` is `load intermediate` and `la` is `load address`</span></div><div class="line" id="224449"><span class="nick" style="color:#2e2a4a"><a href="#224449" label="[22:44:49]">&lt;muurkha&gt;</a></span><span class="message">right, or `auipc` for higher bits in the `la` case</span></div><div class="line" id="224453"><span class="nick" style="color:#2e2a4a"><a href="#224453" label="[22:44:53]">&lt;muurkha&gt;</a></span><span class="message">*immediate</span></div><div class="line" id="224515"><span class="nick" style="color:#2e2a4a"><a href="#224515" label="[22:45:15]">&lt;muurkha&gt;</a></span><span class="message">&quot;immediate&quot; meaning &quot;a value in the instruction stream&quot; (as opposed to a value fetched from memory or in a register)</span></div><div class="line" id="224516"><span class="nick" style="color:#80b1d3"><a href="#224516" label="[22:45:16]">&lt;unmatched-paren&gt;</a></span><span class="message">what does `la` assemble down to?</span></div><div class="line" id="224522"><span class="nick" style="color:#2e2a4a"><a href="#224522" label="[22:45:22]">&lt;muurkha&gt;</a></span><span class="message">auipc + addi</span></div><div class="line" id="224528"><span class="nick" style="color:#6d2462"><a href="#224528" label="[22:45:28]">&lt;stikonas&gt;</a></span><span class="message">or addi for small addresses</span></div><div class="line" id="224531"><span class="nick" style="color:#80b1d3"><a href="#224531" label="[22:45:31]">&lt;unmatched-paren&gt;</a></span><span class="message">ah</span></div><div class="line" id="224601"><span class="nick" style="color:#6d2462"><a href="#224601" label="[22:46:01]">&lt;stikonas&gt;</a></span><span class="message">in stage0-posix early programs are often small enough that auipc is not necessary to load global variables at the end of the program</span></div><div class="line" id="224609"><span class="nick" style="color:#2e2a4a"><a href="#224609" label="[22:46:09]">&lt;muurkha&gt;</a></span><span class="message">aha</span></div><div class="line" id="224616"><span class="nick" style="color:#6d2462"><a href="#224616" label="[22:46:16]">&lt;stikonas&gt;</a></span><span class="message">but cc_riscv64 and M2-Planet compilers have to use auipc</span></div><div class="line" id="224636"><span class="nick" style="color:#2e2a4a"><a href="#224636" label="[22:46:36]">&lt;muurkha&gt;</a></span><span class="message">I was going to say, I don't think you can know if an address is &quot;small&quot; before you link, but stage0-posix doesn't have a separate linking step</span></div><div class="line" id="224705"><span class="nick" style="color:#6d2462"><a href="#224705" label="[22:47:05]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: you can see what code is emitted by M2-Planet to load numbers here : <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L737">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L737</a> </span></div><div class="line" id="224733"><span class="nick" style="color:#2e2a4a"><a href="#224733" label="[22:47:33]">&lt;muurkha&gt;</a></span><span class="message">auipc makes your addresses position-independent; it allows the linker (or the OS kernel in some scenarios) to relocate your code together with the things it's pointing addresses to, without fixing up relocations in the code</span></div><div class="line" id="224755"><span class="nick" style="color:#2e2a4a"><a href="#224755" label="[22:47:55]">&lt;muurkha&gt;</a></span><span class="message">that's why there are separate `li` and `la` &quot;pseudoinstructions&quot; (built-in assembly macros)</span></div><div class="line" id="224825"><span class="nick" style="color:#6d2462"><a href="#224825" label="[22:48:25]">&lt;stikonas&gt;</a></span><span class="message">but even lui + addi can only deal up to around 31 bit numbers</span></div><div class="line" id="224845"><span class="nick" style="color:#6d2462"><a href="#224845" label="[22:48:45]">&lt;stikonas&gt;</a></span><span class="message">if you want to load larger constants, you need more than 2 instructions on risc-v</span></div><div class="line" id="224848"><span class="nick" style="color:#2e2a4a"><a href="#224848" label="[22:48:48]">&lt;muurkha&gt;</a></span><span class="message">oh, I'd forgotten that</span></div><div class="line" id="224859"><span class="nick" style="color:#2e2a4a"><a href="#224859" label="[22:48:59]">&lt;muurkha&gt;</a></span><span class="message">I thought they could get all the way to 32!</span></div><div class="line" id="224914"><span class="nick" style="color:#6d2462"><a href="#224914" label="[22:49:14]">&lt;stikonas&gt;</a></span><span class="message">no, only to around 31 bit - some small number</span></div><div class="line" id="224929"><span class="nick" style="color:#6d2462"><a href="#224929" label="[22:49:29]">&lt;stikonas&gt;</a></span><span class="message">in any case, even 32 bits is less than 64 bit</span></div><div class="line" id="224930"><span class="nick" style="color:#2e2a4a"><a href="#224930" label="[22:49:30]">&lt;muurkha&gt;</a></span><span class="message">but I guess the negative sign extension on addi hurts you there</span></div><div class="line" id="224953"><span class="nick" style="color:#2e2a4a"><a href="#224953" label="[22:49:53]">&lt;muurkha&gt;</a></span><span class="message">yeah.  amd64 added a specific 64-bit load-immediate form of mov for that</span></div><div class="line" id="225006"><span class="nick" style="color:#2e2a4a"><a href="#225006" label="[22:50:06]">&lt;muurkha&gt;</a></span><span class="message">on RISC-V you have to use constant pools like on ARM</span></div><div class="line" id="225042"><span class="nick" style="color:#2e2a4a"><a href="#225042" label="[22:50:42]">&lt;muurkha&gt;</a></span><span class="message">I think?</span></div><div class="line" id="230851"><span class="nick" style="color:#6d2462"><a href="#230851" label="[23:08:51]">&lt;stikonas&gt;</a></span><span class="message">well, there are various ways</span></div><div class="line" id="230857"><span class="nick" style="color:#6d2462"><a href="#230857" label="[23:08:57]">&lt;stikonas&gt;</a></span><span class="message">probably some more optimal than others</span></div><div class="line" id="230909"><span class="nick" style="color:#6d2462"><a href="#230909" label="[23:09:09]">&lt;stikonas&gt;</a></span><span class="message">but it's not like we care that much about performance in stage0</span></div><div class="line" id="230939"><span class="nick" style="color:#6d2462"><a href="#230939" label="[23:09:39]">&lt;stikonas&gt;</a></span><span class="message">and we don't load that many large constants</span></div><div class="line" id="231021"><span class="nick" style="color:#2e2a4a"><a href="#231021" label="[23:10:21]">&lt;muurkha&gt;</a></span><span class="message">the paucity of large constants is the reason the LUI/ADDI split is 20/12 bits instead of the more obvious 16/16</span></div><div class="line" id="231232"><span class="nick" style="color:#6d2462"><a href="#231232" label="[23:12:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've added a few more comments to your PR</span></div><div class="line" id="231320"><span class="nick" style="color:#6d2462"><a href="#231320" label="[23:13:20]">&lt;stikonas&gt;</a></span><span class="message">fossy: all grep related</span></div><div class="line" id="231342"><span class="nick" style="color:#6d2462"><a href="#231342" label="[23:13:42]">&lt;stikonas&gt;</a></span><span class="message">two suggestions shoud fix those &quot;grep not available&quot; errors</span></div><div class="line" id="231400"><span class="nick" style="color:#6d2462"><a href="#231400" label="[23:14:00]">&lt;stikonas&gt;</a></span><span class="message">that are pritned many times</span></div><div class="line" id="231427"><span class="nick" style="color:#6d2462"><a href="#231427" label="[23:14:27]">&lt;stikonas&gt;</a></span><span class="message">besides those, there is also one-off &quot;error 13&quot; printed when we checksum grep</span></div><div class="line" id="231602"><span class="nick" style="color:#6d2462"><a href="#231602" label="[23:16:02]">&lt;stikonas&gt;</a></span><span class="message">something must be going wrong with that _grep function</span></div><div class="line" id="231635"><span class="nick" style="color:#6d2462"><a href="#231635" label="[23:16:35]">&lt;stikonas&gt;</a></span><span class="message">but for some reason it only happens when checksumming gnu grep</span></div><div class="line" id="231759"><span class="nick" style="color:#6d2462"><a href="#231759" label="[23:17:59]">&lt;stikonas&gt;</a></span><span class="message">but I think we are almost ready for merge</span></div><div class="line" id="232437"><span class="nick" style="color:#80b1d3"><a href="#232437" label="[23:24:37]">&lt;unmatched-paren&gt;</a></span><span class="message">is there some way to generate a unique label in gas (a bit like gensym in lisp)? i want to create a few macros for printing, but they'll need unique labels (for loops) so that they do not collide when you use the macro twice</span></div><div class="line" id="232537"><span class="nick" style="color:#80b1d3"><a href="#232537" label="[23:25:37]">&lt;unmatched-paren&gt;</a></span><span class="message">\@, apparently...</span></div><div class="line" id="235228"><span class="nick" style="color:#2e2a4a"><a href="#235228" label="[23:52:28]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><br /></div></body></html>