<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000005"><span class="nick" style="color:#389600"><a href="#000005" label="[00:00:05]">&lt;stikonas&gt;</a></span><span class="message">not sure if sudo works with others though...</span></div><div class="line" id="000124"><span class="nick" style="color:#8dd3c7"><a href="#000124" label="[00:01:24]">&lt;fossy&gt;</a></span><span class="message">sudo isnt the problem</span></div><div class="line" id="000134"><span class="nick" style="color:#8dd3c7"><a href="#000134" label="[00:01:34]">&lt;fossy&gt;</a></span><span class="message">we are already running as root</span></div><div class="line" id="000156"><span class="nick" style="color:#8dd3c7"><a href="#000156" label="[00:01:56]">&lt;fossy&gt;</a></span><span class="message">the problem is its running in a container itself that probably dosent allow chroot</span></div><div class="line" id="000523"><span class="nick" style="color:#389600"><a href="#000523" label="[00:05:23]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, it's that CAP_ADMIN</span></div><div class="line" id="000526"><span class="nick" style="color:#389600"><a href="#000526" label="[00:05:26]">&lt;stikonas&gt;</a></span><span class="message">that docker needs</span></div><div class="line" id="000545"><span class="nick" style="color:#389600"><a href="#000545" label="[00:05:45]">&lt;stikonas&gt;</a></span><span class="message">in the meantime I've rebased my PRs on top of perl</span></div><div class="line" id="000603"><span class="nick" style="color:#389600"><a href="#000603" label="[00:06:03]">&lt;stikonas&gt;</a></span><span class="message">(there was a small merge conflict, resolved now)</span></div><div class="line" id="000629"><span class="nick" style="color:#389600"><a href="#000629" label="[00:06:29]">&lt;stikonas&gt;</a></span><span class="message">it's actually not chroot, but mounting inside docker</span></div><div class="line" id="000651"><span class="nick" style="color:#8dd3c7"><a href="#000651" label="[00:06:51]">&lt;fossy&gt;</a></span><span class="message">yeah cause cirrus uses docker</span></div><div class="line" id="000713"><span class="nick" style="color:#8dd3c7"><a href="#000713" label="[00:07:13]">&lt;fossy&gt;</a></span><span class="message">What are we even mounting inside docker though</span></div><div class="line" id="000724"><span class="nick" style="color:#389600"><a href="#000724" label="[00:07:24]">&lt;stikonas&gt;</a></span><span class="message">tmpfs</span></div><div class="line" id="000734"><span class="nick" style="color:#389600"><a href="#000734" label="[00:07:34]">&lt;stikonas&gt;</a></span><span class="message">maybe we can avoid doing that</span></div><div class="line" id="000740"><span class="nick" style="color:#389600"><a href="#000740" label="[00:07:40]">&lt;stikonas&gt;</a></span><span class="message">add some argument to rootfs.py</span></div><div class="line" id="000753"><span class="nick" style="color:#389600"><a href="#000753" label="[00:07:53]">&lt;stikonas&gt;</a></span><span class="message">like --no-tmpfs</span></div><div class="line" id="000923"><span class="nick" style="color:#389600"><a href="#000923" label="[00:09:23]">&lt;stikonas&gt;</a></span><span class="message">with perl merged, I think I can try to build latest automake and also latest texinfo</span></div><div class="line" id="001116"><span class="nick" style="color:#8dd3c7"><a href="#001116" label="[00:11:16]">&lt;fossy&gt;</a></span><span class="message">yeah I think adding -no-tmpfs is best</span></div><div class="line" id="001304"><span class="nick" style="color:#389600"><a href="#001304" label="[00:13:04]">&lt;stikonas&gt;</a></span><span class="message">hopefully that's sufficient...</span></div><div class="line" id="001316"><span class="nick" style="color:#389600"><a href="#001316" label="[00:13:16]">&lt;stikonas&gt;</a></span><span class="message">we still to chroot there</span></div><div class="line" id="013747"><span class="nick" style="color:#389600"><a href="#013747" label="[01:37:47]">&lt;stikonas&gt;</a></span><span class="message">wow, new perl is FAST!</span></div><div class="line" id="013802"><span class="nick" style="color:#389600"><a href="#013802" label="[01:38:02]">&lt;stikonas&gt;</a></span><span class="message">fossy: have you noticed how much faster it is....</span></div><div class="line" id="013828"><span class="nick" style="color:#389600"><a href="#013828" label="[01:38:28]">&lt;stikonas&gt;</a></span><span class="message">although, maybe that's because of gcc and not perl itself</span></div><div class="line" id="014026"><span class="nick" style="color:#8dd3c7"><a href="#014026" label="[01:40:26]">&lt;fossy&gt;</a></span><span class="message">stikonas: not rly, whats fast about it? Automake and co?</span></div><div class="line" id="014034"><span class="nick" style="color:#8dd3c7"><a href="#014034" label="[01:40:34]">&lt;fossy&gt;</a></span><span class="message">Im guessig its a mix</span></div><div class="line" id="014041"><span class="nick" style="color:#8dd3c7"><a href="#014041" label="[01:40:41]">&lt;fossy&gt;</a></span><span class="message">gcc and optimizations</span></div><div class="line" id="014041"><span class="nick" style="color:#389600"><a href="#014041" label="[01:40:41]">&lt;stikonas&gt;</a></span><span class="message">yeah, automake is lightning fast now</span></div><div class="line" id="014047"><span class="nick" style="color:#8dd3c7"><a href="#014047" label="[01:40:47]">&lt;fossy&gt;</a></span><span class="message">hm</span></div><div class="line" id="014053"><span class="nick" style="color:#8dd3c7"><a href="#014053" label="[01:40:53]">&lt;fossy&gt;</a></span><span class="message">that could be concerning</span></div><div class="line" id="014058"><span class="nick" style="color:#8dd3c7"><a href="#014058" label="[01:40:58]">&lt;fossy&gt;</a></span><span class="message">although I think it works</span></div><div class="line" id="014104"><span class="nick" style="color:#389600"><a href="#014104" label="[01:41:04]">&lt;stikonas&gt;</a></span><span class="message">no, I think it is alright</span></div><div class="line" id="014108"><span class="nick" style="color:#8dd3c7"><a href="#014108" label="[01:41:08]">&lt;fossy&gt;</a></span><span class="message">ok good</span></div><div class="line" id="014113"><span class="nick" style="color:#389600"><a href="#014113" label="[01:41:13]">&lt;stikonas&gt;</a></span><span class="message">well, I tried building automake-1.16...</span></div><div class="line" id="014129"><span class="nick" style="color:#389600"><a href="#014129" label="[01:41:29]">&lt;stikonas&gt;</a></span><span class="message">it's probably also because automake is not that big piece of software, so automake on itself runs fast too</span></div><div class="line" id="032756"><span class="nick" style="color:#6b8072"><a href="#032756" label="[03:27:56]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: congrats on the almost hex0-seed. one minor problem that really matters at such a low level is writing to stdout in a shell that doesn't support &gt; redirection means it can't actually build anything.</span></div><div class="line" id="033154"><span class="nick" style="color:#6b8072"><a href="#033154" label="[03:31:54]">&lt;oriansj&gt;</a></span><span class="message">oops it looks like you had that too; a little clunky but it would work.</span></div><div class="line" id="033632"><span class="nick" style="color:#6b8072"><a href="#033632" label="[03:36:32]">&lt;oriansj&gt;</a></span><span class="message">just missing one piece (use hex0 to make your initial hex0-seed binary from your hex0 sources and check it in) and then I will merge it into bootstrap-seeds as the first part of the RISC-V port</span></div><div class="line" id="052648"><span class="nick">***</span><span class="message notice">illegal is now known as V</span></div><div class="line" id="061505"><span class="nick">***</span><span class="message notice">lfam is now known as zebracloud</span></div><div class="line" id="085505"><span class="nick">***</span><span class="message notice">orionwl is now known as laanwj</span></div><div class="line" id="130539"><span class="nick" style="color:#80b1d3"><a href="#130539" label="[13:05:39]">&lt;amirouche&gt;</a></span><span class="message">hello, re past bootstrap attempt that relied on forth. A) Why did it not succeed? B) What forth implementation did you use?</span></div><div class="line" id="131348"><span class="nick" style="color:#6d2462"><a href="#131348" label="[13:13:48]">&lt;siraben&gt;</a></span><span class="message">amirouche: ooh, oriansj would be able to answer that</span></div><div class="line" id="131355"><span class="nick" style="color:#6d2462"><a href="#131355" label="[13:13:55]">&lt;siraben&gt;</a></span><span class="message">he wrote his own implementation</span></div><div class="line" id="131926"><span class="nick">***</span><span class="message notice">NieDzejkob_ is now known as NieDzejkob</span></div><div class="line" id="132654"><span class="nick" style="color:#6b8072"><a href="#132654" label="[13:26:54]">&lt;oriansj&gt;</a></span><span class="message">amirouche: A) because it failed to be a useful and/or productive environment for bootstrapping anything more than having a FORTH environment. B) we used multiple for development and even wrote our own from scratch <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a>  but ultimately if we wanted to do anything serious; FORTH just kept being more pain than it was worth. In short we achieved more progress in a weekend with cc_x86 (a</span></div><div class="line" id="132654"><span class="nick" style="color:#6b8072"><a href="#132654" label="[13:26:54]">&lt;oriansj&gt;</a></span><span class="message">minimal C compiler written in assembly that supports structs, unions, gotos and inline assembly) than we did in 6 months of FORTH. Oh and the C compiler took less time to write too... (Heck the garbage collecting Lisp we wrote in assembly took less time to write than the FORTH)</span></div><div class="line" id="132742"><span class="nick" style="color:#80b1d3"><a href="#132742" label="[13:27:42]">&lt;amirouche&gt;</a></span><span class="message">ty!</span></div><div class="line" id="132826"><span class="nick" style="color:#6b8072"><a href="#132826" label="[13:28:26]">&lt;oriansj&gt;</a></span><span class="message">So it isn't to say that someone couldn't do something useful in FORTH for bootstrapping; I am just saying we haven't seen it yet.</span></div><div class="line" id="132919"><span class="nick" style="color:#80b1d3"><a href="#132919" label="[13:29:19]">&lt;amirouche&gt;</a></span><span class="message">hmm</span></div><div class="line" id="132924"><span class="nick" style="color:#6b8072"><a href="#132924" label="[13:29:24]">&lt;oriansj&gt;</a></span><span class="message">Because writing a C compiler (cc_* type) in assembly takes 24 hours.</span></div><div class="line" id="132936"><span class="nick" style="color:#80b1d3"><a href="#132936" label="[13:29:36]">&lt;amirouche&gt;</a></span><span class="message">without the parser?</span></div><div class="line" id="132952"><span class="nick" style="color:#80b1d3"><a href="#132952" label="[13:29:52]">&lt;amirouche&gt;</a></span><span class="message">with or without the parser?</span></div><div class="line" id="133110"><span class="nick" style="color:#80b1d3"><a href="#133110" label="[13:31:10]">&lt;amirouche&gt;</a></span><span class="message">24h is surely when you know what you are doing ^^'</span></div><div class="line" id="133122"><span class="nick" style="color:#8dd3c7"><a href="#133122" label="[13:31:22]">&lt;fossy&gt;</a></span><span class="message">yeah that would be when you know what youre doing</span></div><div class="line" id="133125"><span class="nick" style="color:#80b1d3"><a href="#133125" label="[13:31:25]">&lt;amirouche&gt;</a></span><span class="message">it took me more time to find an off-by-one error this week-end.</span></div><div class="line" id="133131"><span class="nick" style="color:#8dd3c7"><a href="#133131" label="[13:31:31]">&lt;fossy&gt;</a></span><span class="message">i certinaly couldn't do it in 24 hrs</span></div><div class="line" id="133134"><span class="nick" style="color:#8dd3c7"><a href="#133134" label="[13:31:34]">&lt;fossy&gt;</a></span><span class="message">oriansj could</span></div><div class="line" id="133207"><span class="nick" style="color:#6b8072"><a href="#133207" label="[13:32:07]">&lt;oriansj&gt;</a></span><span class="message">amirouche: with a full and proper parser</span></div><div class="line" id="133305"><span class="nick" style="color:#6b8072"><a href="#133305" label="[13:33:05]">&lt;oriansj&gt;</a></span><span class="message">actually it took 24hours knowing assembly but once I knew what I was doing I did a speed run of 4 C compilers in assembly in only 2 hours</span></div><div class="line" id="133359"><span class="nick" style="color:#80b1d3"><a href="#133359" label="[13:33:59]">&lt;amirouche&gt;</a></span><span class="message">I window shopping a project, that boils down to a bootstrappable Scheme/Kernel system, but I would like it to be somewhat portable across hardware and OS (linux/netbsd), and eventually have its own OS kernel.</span></div><div class="line" id="133419"><span class="nick" style="color:#6b8072"><a href="#133419" label="[13:34:19]">&lt;oriansj&gt;</a></span><span class="message">amirouche: then use C if you want portable code</span></div><div class="line" id="133437"><span class="nick" style="color:#80b1d3"><a href="#133437" label="[13:34:37]">&lt;amirouche&gt;</a></span><span class="message">I wonder what would be the best target a forth or gnu lightning.</span></div><div class="line" id="133458"><span class="nick" style="color:#80b1d3"><a href="#133458" label="[13:34:58]">&lt;amirouche&gt;</a></span><span class="message">My C knowledge is weak, and I do not want to improve it ^^'</span></div><div class="line" id="133538"><span class="nick" style="color:#6b8072"><a href="#133538" label="[13:35:38]">&lt;oriansj&gt;</a></span><span class="message">amirouche: that is fine. It doesn't need to be strong. Only read a byte and write a byte, loop and conditional</span></div><div class="line" id="133546"><span class="nick" style="color:#80b1d3"><a href="#133546" label="[13:35:46]">&lt;amirouche&gt;</a></span><span class="message">it would be a separate bootstrap path wrt to guix/guile/mes</span></div><div class="line" id="133605"><span class="nick" style="color:#6b8072"><a href="#133605" label="[13:36:05]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="133654"><span class="nick" style="color:#80b1d3"><a href="#133654" label="[13:36:54]">&lt;amirouche&gt;</a></span><span class="message">I can not start ex-nihilo, but having both performance constraints and portability makes the thing seems impossible.</span></div><div class="line" id="133749"><span class="nick" style="color:#6b8072"><a href="#133749" label="[13:37:49]">&lt;oriansj&gt;</a></span><span class="message">if you need portable *AND* fast, C is pretty much the only option</span></div><div class="line" id="133816"><span class="nick" style="color:#6b8072"><a href="#133816" label="[13:38:16]">&lt;oriansj&gt;</a></span><span class="message">or go or Rust depending on your preferences</span></div><div class="line" id="134149"><span class="nick" style="color:#6b8072"><a href="#134149" label="[13:41:49]">&lt;oriansj&gt;</a></span><span class="message">C as a language is elegant if used correctly</span></div><div class="line" id="134307"><span class="nick" style="color:#6b8072"><a href="#134307" label="[13:43:07]">&lt;oriansj&gt;</a></span><span class="message">It is that last part where most of C's sins were born.</span></div><div class="line" id="134520"><span class="nick" style="color:#80b1d3"><a href="#134520" label="[13:45:20]">&lt;amirouche&gt;</a></span><span class="message">it is complex to explain, but I prefer to keep the number of programming language syntax and programming concepts to a minimum. One way to see it, is that it is a whole stack Scheme/Kernel system (wanna-be). So, if I rely on forth, it will need some s-expr syntax.</span></div><div class="line" id="134545"><span class="nick" style="color:#80b1d3"><a href="#134545" label="[13:45:45]">&lt;amirouche&gt;</a></span><span class="message">I follow that principle: &quot;If a system must serve the creative spirit, it must be entirely comprehensible by a single individual.&quot;</span></div><div class="line" id="134557"><span class="nick" style="color:#6b8072"><a href="#134557" label="[13:45:57]">&lt;oriansj&gt;</a></span><span class="message">amirouche: just do everything in scheme if you want, that is fine</span></div><div class="line" id="134618"><span class="nick" style="color:#80b1d3"><a href="#134618" label="[13:46:18]">&lt;amirouche&gt;</a></span><span class="message">so mixing C semantic with Scheme, and hardware architecture specifics make the whole system brittle IMO</span></div><div class="line" id="134659"><span class="nick" style="color:#6b8072"><a href="#134659" label="[13:46:59]">&lt;oriansj&gt;</a></span><span class="message">amirouche: just only mix scheme and assembly and it will not be brittle but portable.</span></div><div class="line" id="134715"><span class="nick" style="color:#80b1d3"><a href="#134715" label="[13:47:15]">&lt;amirouche&gt;</a></span><span class="message">re my system, it is also less pragmatic.</span></div><div class="line" id="134729"><span class="nick" style="color:#80b1d3"><a href="#134729" label="[13:47:29]">&lt;amirouche&gt;</a></span><span class="message">yes, that is what I am thinking too :)</span></div><div class="line" id="134737"><span class="nick" style="color:#6b8072"><a href="#134737" label="[13:47:37]">&lt;oriansj&gt;</a></span><span class="message">It'll be slightly slower than C but it'll run reasonably fast on modern hardware.</span></div><div class="line" id="134927"><span class="nick" style="color:#80b1d3"><a href="#134927" label="[13:49:27]">&lt;amirouche&gt;</a></span><span class="message">Thank you oriansj :)</span></div><div class="line" id="134939"><span class="nick" style="color:#6b8072"><a href="#134939" label="[13:49:39]">&lt;oriansj&gt;</a></span><span class="message">amirouche: If you wanted to do a scheme compiler written in scheme; I know a piece that could use your help ^_^</span></div><div class="line" id="135125"><span class="nick" style="color:#80b1d3"><a href="#135125" label="[13:51:25]">&lt;amirouche&gt;</a></span><span class="message">Guile?</span></div><div class="line" id="135200"><span class="nick" style="color:#6b8072"><a href="#135200" label="[13:52:00]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="135208"><span class="nick" style="color:#80b1d3"><a href="#135208" label="[13:52:08]">&lt;amirouche&gt;</a></span><span class="message">what is it?</span></div><div class="line" id="135227"><span class="nick" style="color:#6b8072"><a href="#135227" label="[13:52:27]">&lt;oriansj&gt;</a></span><span class="message">Ur-Scheme</span></div><div class="line" id="135240"><span class="nick" style="color:#6b8072"><a href="#135240" label="[13:52:40]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="http://canonical.org/~kragen/sw/urscheme/">http://canonical.org/~kragen/sw/urscheme/</a> </span></div><div class="line" id="135318"><span class="nick" style="color:#6b8072"><a href="#135318" label="[13:53:18]">&lt;oriansj&gt;</a></span><span class="message">the hope is to have it extended enough to compile mescc</span></div><div class="line" id="135349"><span class="nick" style="color:#6b8072"><a href="#135349" label="[13:53:49]">&lt;oriansj&gt;</a></span><span class="message">(and be able to run on mes-m2)</span></div><div class="line" id="135419"><span class="nick" style="color:#6b8072"><a href="#135419" label="[13:54:19]">&lt;oriansj&gt;</a></span><span class="message">as compiled scheme is much faster than interpreted scheme</span></div><div class="line" id="135450"><span class="nick" style="color:#80b1d3"><a href="#135450" label="[13:54:50]">&lt;amirouche&gt;</a></span><span class="message">what about guile?</span></div><div class="line" id="135459"><span class="nick" style="color:#389600"><a href="#135459" label="[13:54:59]">&lt;stikonas&gt;</a></span><span class="message">isn't Guile written in C</span></div><div class="line" id="135511"><span class="nick" style="color:#389600"><a href="#135511" label="[13:55:11]">&lt;stikonas&gt;</a></span><span class="message">you'll have to build guile eventually though</span></div><div class="line" id="135528"><span class="nick" style="color:#389600"><a href="#135528" label="[13:55:28]">&lt;stikonas&gt;</a></span><span class="message">if you want to bootstrap the whole system</span></div><div class="line" id="135530"><span class="nick" style="color:#80b1d3"><a href="#135530" label="[13:55:30]">&lt;amirouche&gt;</a></span><span class="message">ah yes you are right, guile is not self-hosted.</span></div><div class="line" id="135543"><span class="nick" style="color:#6b8072"><a href="#135543" label="[13:55:43]">&lt;oriansj&gt;</a></span><span class="message">amirouche: guile's C isn't the simplest thing to build either</span></div><div class="line" id="135606"><span class="nick" style="color:#389600"><a href="#135606" label="[13:56:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, gcc is recommended for  that</span></div><div class="line" id="135619"><span class="nick" style="color:#389600"><a href="#135619" label="[13:56:19]">&lt;stikonas&gt;</a></span><span class="message">tcc is porbably too simple</span></div><div class="line" id="135625"><span class="nick" style="color:#6b8072"><a href="#135625" label="[13:56:25]">&lt;oriansj&gt;</a></span><span class="message">and we had mihi spend a bunch of time to solve the psyntax.pp bootstrapping issue (not sure how many more might exist)</span></div><div class="line" id="135707"><span class="nick" style="color:#6b8072"><a href="#135707" label="[13:57:07]">&lt;oriansj&gt;</a></span><span class="message">hence the desire for a lower in the bootstrap scheme compiler</span></div><div class="line" id="135751"><span class="nick" style="color:#389600"><a href="#135751" label="[13:57:51]">&lt;stikonas&gt;</a></span><span class="message">well, there is mes</span></div><div class="line" id="135757"><span class="nick" style="color:#389600"><a href="#135757" label="[13:57:57]">&lt;stikonas&gt;</a></span><span class="message">although, that's interpreter</span></div><div class="line" id="135825"><span class="nick" style="color:#6b8072"><a href="#135825" label="[13:58:25]">&lt;oriansj&gt;</a></span><span class="message">and mescc but that is a C compiler and not a scheme compiler</span></div><div class="line" id="135845"><span class="nick" style="color:#389600"><a href="#135845" label="[13:58:45]">&lt;stikonas&gt;</a></span><span class="message">but I think stuff like autogen actually needs guile</span></div><div class="line" id="135850"><span class="nick" style="color:#389600"><a href="#135850" label="[13:58:50]">&lt;stikonas&gt;</a></span><span class="message">for scriptint</span></div><div class="line" id="135858"><span class="nick" style="color:#389600"><a href="#135858" label="[13:58:58]">&lt;stikonas&gt;</a></span><span class="message">*scripting</span></div><div class="line" id="135911"><span class="nick" style="color:#389600"><a href="#135911" label="[13:59:11]">&lt;stikonas&gt;</a></span><span class="message">although, maybe some other scheme implementation would work too if it's sufficiently complete</span></div><div class="line" id="135917"><span class="nick" style="color:#6b8072"><a href="#135917" label="[13:59:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: yeah. hence why GCC got bootstrapped far easier than guile.</span></div><div class="line" id="135947"><span class="nick" style="color:#234e69"><a href="#135947" label="[13:59:47]">*</a></span><span class="message">oriansj gtg</span></div><div class="line" id="140020"><span class="nick" style="color:#389600"><a href="#140020" label="[14:00:20]">&lt;stikonas&gt;</a></span><span class="message">well, we skipped part of the GCC build system because it needed autogen</span></div><div class="line" id="140033"><span class="nick" style="color:#389600"><a href="#140033" label="[14:00:33]">&lt;stikonas&gt;</a></span><span class="message">but with a bit more work GCC was compiled and we'll use that GCC to build guile</span></div><div class="line" id="140037"><span class="nick" style="color:#389600"><a href="#140037" label="[14:00:37]">&lt;stikonas&gt;</a></span><span class="message">and then build GCC properly</span></div><div class="line" id="140045"><span class="nick" style="color:#80b1d3"><a href="#140045" label="[14:00:45]">&lt;amirouche&gt;</a></span><span class="message">so, if understand correctly, if I can write a forth interpreter in assembly, than can interpret scheme or kernel code, that is self-hosted, I will have a bootstrap path for my system</span></div><div class="line" id="140135"><span class="nick" style="color:#389600"><a href="#140135" label="[14:01:35]">&lt;stikonas&gt;</a></span><span class="message">well, basically anything can work, the problem is just doing the work</span></div><div class="line" id="140149"><span class="nick" style="color:#80b1d3"><a href="#140149" label="[14:01:49]">&lt;amirouche&gt;</a></span><span class="message">yes sure, as usual :)</span></div><div class="line" id="140214"><span class="nick" style="color:#80b1d3"><a href="#140214" label="[14:02:14]">&lt;amirouche&gt;</a></span><span class="message">I could also code a scheme interpreter in assembly but that looks more complex.</span></div><div class="line" id="140236"><span class="nick" style="color:#80b1d3"><a href="#140236" label="[14:02:36]">&lt;amirouche&gt;</a></span><span class="message">And a scheme interpreter in forth, is not given either.</span></div><div class="line" id="140317"><span class="nick" style="color:#80b1d3"><a href="#140317" label="[14:03:17]">&lt;amirouche&gt;</a></span><span class="message">re doing the work is a problem, but a bigger problem is doing the &quot;good&quot; work.</span></div><div class="line" id="140335"><span class="nick" style="color:#389600"><a href="#140335" label="[14:03:35]">&lt;stikonas&gt;</a></span><span class="message">so at the moment we have basically two variants of bootstrap: 1) guix bootstrap which uses some pre-generated files, and some external automation driver (guile).  2) live-bootstrap which does not use any pregen files, drives the whole process with just kaem-optional-seed (757 bytes) but stops at around GCC 4.0.4 for now</span></div><div class="line" id="140339"><span class="nick" style="color:#80b1d3"><a href="#140339" label="[14:03:39]">&lt;amirouche&gt;</a></span><span class="message">good work, I mean following the principle that I will be able to understand the whole system.</span></div><div class="line" id="140406"><span class="nick" style="color:#389600"><a href="#140406" label="[14:04:06]">&lt;stikonas&gt;</a></span><span class="message">so if you want some further changes, you can pick one component from there and try to bootstrap it some other wya</span></div><div class="line" id="140420"><span class="nick" style="color:#80b1d3"><a href="#140420" label="[14:04:20]">&lt;amirouche&gt;</a></span><span class="message">stikonas: ah thanks, that should be on a page at bootstrappable.org. I was looking for that.</span></div><div class="line" id="140438"><span class="nick" style="color:#389600"><a href="#140438" label="[14:04:38]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="140523"><span class="nick" style="color:#389600"><a href="#140523" label="[14:05:23]">&lt;stikonas&gt;</a></span><span class="message">this is rough dependency graph of live-bootstrap <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="140546"><span class="nick" style="color:#389600"><a href="#140546" label="[14:05:46]">&lt;stikonas&gt;</a></span><span class="message">and this is what is done in guix <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/images/gcc-core-mesboot0-graph.png">https://guix.gnu.org/manual/en/html_node/images/gcc-core-mesboot0-graph.png</a> </span></div><div class="line" id="140615"><span class="nick" style="color:#389600"><a href="#140615" label="[14:06:15]">&lt;stikonas&gt;</a></span><span class="message">(a bit more is done in a branch of guix that starts from hex0 although it will still use guile)</span></div><div class="line" id="140707"><span class="nick" style="color:#80b1d3"><a href="#140707" label="[14:07:07]">&lt;amirouche&gt;</a></span><span class="message">so there is branch of guix that starts from hex0, but is not completly finished?</span></div><div class="line" id="140740"><span class="nick" style="color:#80b1d3"><a href="#140740" label="[14:07:40]">&lt;amirouche&gt;</a></span><span class="message">you said, guix use live-bootstrap.</span></div><div class="line" id="140816"><span class="nick" style="color:#80b1d3"><a href="#140816" label="[14:08:16]">&lt;amirouche&gt;</a></span><span class="message">oh ok I think I get it, it is working from kaem as seed toward hex0</span></div><div class="line" id="140829"><span class="nick" style="color:#80b1d3"><a href="#140829" label="[14:08:29]">&lt;amirouche&gt;</a></span><span class="message">that is fantastic!</span></div><div class="line" id="140842"><span class="nick" style="color:#80b1d3"><a href="#140842" label="[14:08:42]">&lt;amirouche&gt;</a></span><span class="message">I am not sure why I am interested by this bootstrapping stuff.</span></div><div class="line" id="140856"><span class="nick" style="color:#389600"><a href="#140856" label="[14:08:56]">&lt;stikonas&gt;</a></span><span class="message">guix branch starts from hex0 seed and uses guile as automation driver</span></div><div class="line" id="140907"><span class="nick" style="color:#389600"><a href="#140907" label="[14:09:07]">&lt;stikonas&gt;</a></span><span class="message">but also uses guile to run some stuff like gash and bootar</span></div><div class="line" id="140914"><span class="nick" style="color:#389600"><a href="#140914" label="[14:09:14]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap is a separate project</span></div><div class="line" id="140933"><span class="nick" style="color:#389600"><a href="#140933" label="[14:09:33]">&lt;stikonas&gt;</a></span><span class="message">that runs directly and process is driven by kaem</span></div><div class="line" id="140940"><span class="nick" style="color:#80b1d3"><a href="#140940" label="[14:09:40]">&lt;amirouche&gt;</a></span><span class="message">stikonas: why are you interested in bootstrappable</span></div><div class="line" id="141026"><span class="nick" style="color:#389600"><a href="#141026" label="[14:10:26]">&lt;stikonas&gt;</a></span><span class="message">that's a tough question...</span></div><div class="line" id="141104"><span class="nick" style="color:#389600"><a href="#141104" label="[14:11:04]">&lt;stikonas&gt;</a></span><span class="message">well, I also had used Gentoo for some time, so compiled stuff from source</span></div><div class="line" id="141120"><span class="nick" style="color:#389600"><a href="#141120" label="[14:11:20]">&lt;stikonas&gt;</a></span><span class="message">building it form just source seems natural extention</span></div><div class="line" id="141142"><span class="nick" style="color:#80b1d3"><a href="#141142" label="[14:11:42]">&lt;amirouche&gt;</a></span><span class="message">I started GNU/Linux with Gentoo.</span></div><div class="line" id="143848"><span class="nick" style="color:#6d2462"><a href="#143848" label="[14:38:48]">&lt;siraben&gt;</a></span><span class="message">amirouche: there is also a bootstrapped Haskell compiler <a rel="nofollow" href="https://github.com/OriansJ/blynn-compiler">https://github.com/OriansJ/blynn-compiler</a>  which isn't used for anything yet</span></div><div class="line" id="143906"><span class="nick" style="color:#6d2462"><a href="#143906" label="[14:39:06]">&lt;siraben&gt;</a></span><span class="message">but I think it has a lot of potential because the subset of Haskell it supports is good enough to be compiled with GHC for double-checking</span></div><div class="line" id="143926"><span class="nick" style="color:#6d2462"><a href="#143926" label="[14:39:26]">&lt;siraben&gt;</a></span><span class="message">(see README about plans for writing Scheme in Haskell)</span></div><div class="line" id="145846"><span class="nick" style="color:#6d2462"><a href="#145846" label="[14:58:46]">&lt;siraben&gt;</a></span><span class="message">someone had questions on a nixos issue regarding making the stdenv bootstrappable, how would reproducibility get affected?</span></div><div class="line" id="145856"><span class="nick" style="color:#6d2462"><a href="#145856" label="[14:58:56]">&lt;siraben&gt;</a></span><span class="message">AFAIK live-bootstrap is supposed to be quite deterministic</span></div><div class="line" id="151456"><span class="nick" style="color:#6c3d55"><a href="#151456" label="[15:14:56]">&lt;Melg8&gt;</a></span><span class="message">siraben yes it supposed to be deterministic for all files (except logs/temp files maybe)</span></div><div class="line" id="153403"><span class="nick" style="color:#389600"><a href="#153403" label="[15:34:03]">&lt;stikonas&gt;</a></span><span class="message">at least all binary files in live-bootstrapped are checksummed</span></div><div class="line" id="153407"><span class="nick" style="color:#389600"><a href="#153407" label="[15:34:07]">&lt;stikonas&gt;</a></span><span class="message">so should be quite deterministic</span></div><div class="line" id="153428"><span class="nick" style="color:#389600"><a href="#153428" label="[15:34:28]">&lt;stikonas&gt;</a></span><span class="message">in some cases might be even more deterministic than nixos packages</span></div><div class="line" id="153453"><span class="nick" style="color:#389600"><a href="#153453" label="[15:34:53]">&lt;stikonas&gt;</a></span><span class="message">we apply a few fixes to remove non-deterministic issues due to e.g. old kernels or CPUs</span></div><div class="line" id="153507"><span class="nick" style="color:#6d2462"><a href="#153507" label="[15:35:07]">&lt;siraben&gt;</a></span><span class="message">link to bootstrap discussion: <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/issues/123095">https://github.com/NixOS/nixpkgs/issues/123095</a> </span></div><div class="line" id="153559"><span class="nick" style="color:#389600"><a href="#153559" label="[15:35:59]">&lt;stikonas&gt;</a></span><span class="message">we don't checksum non-binary files right now, but I think that will come eventually, maybe once bauen1 finishes his work</span></div><div class="line" id="153703"><span class="nick" style="color:#6d2462"><a href="#153703" label="[15:37:03]">&lt;siraben&gt;</a></span><span class="message">our bootstrap is 130 MB uncompressed o.O</span></div><div class="line" id="153749"><span class="nick" style="color:#6c3d55"><a href="#153749" label="[15:37:49]">&lt;Melg8&gt;</a></span><span class="message">siraben so you try to build everything using stdenv?</span></div><div class="line" id="153831"><span class="nick" style="color:#6d2462"><a href="#153831" label="[15:38:31]">&lt;siraben&gt;</a></span><span class="message">Melg8: everything uses stdenv in Nixpkgs, pretty much</span></div><div class="line" id="153843"><span class="nick" style="color:#6d2462"><a href="#153843" label="[15:38:43]">&lt;siraben&gt;</a></span><span class="message">change stdenv, change it all, tens of thousands of packages</span></div><div class="line" id="153916"><span class="nick" style="color:#6d2462"><a href="#153916" label="[15:39:16]">&lt;siraben&gt;</a></span><span class="message">this question occurred to me when packaging up the bootstrappable tools in Nix</span></div><div class="line" id="153925"><span class="nick" style="color:#6d2462"><a href="#153925" label="[15:39:25]">&lt;siraben&gt;</a></span><span class="message">I looked at the build closures and was surprised and why they were so big</span></div><div class="line" id="153937"><span class="nick" style="color:#6d2462"><a href="#153937" label="[15:39:37]">&lt;siraben&gt;</a></span><span class="message">runtime of course is just the binaries themselves, but we care about the entire build-time closure</span></div><div class="line" id="154155"><span class="nick" style="color:#6c3d55"><a href="#154155" label="[15:41:55]">&lt;Melg8&gt;</a></span><span class="message">you want to replace make-bootstrap-tools part of boostrap in nix? or replace usage of those tools?</span></div><div class="line" id="154226"><span class="nick" style="color:#6d2462"><a href="#154226" label="[15:42:26]">&lt;siraben&gt;</a></span><span class="message">I want to replace the standard environment for packages in Nix</span></div><div class="line" id="154234"><span class="nick" style="color:#6c3d55"><a href="#154234" label="[15:42:34]">&lt;Melg8&gt;</a></span><span class="message">because initial boostrap uses it's own thisStdenv instead of default one</span></div><div class="line" id="154242"><span class="nick" style="color:#6d2462"><a href="#154242" label="[15:42:42]">&lt;siraben&gt;</a></span><span class="message">this basically provides things like, a C compiler, bash, perl, and all of the transitive dependencies</span></div><div class="line" id="154255"><span class="nick" style="color:#6d2462"><a href="#154255" label="[15:42:55]">&lt;siraben&gt;</a></span><span class="message">ah, yeah</span></div><div class="line" id="154258"><span class="nick" style="color:#6d2462"><a href="#154258" label="[15:42:58]">&lt;siraben&gt;</a></span><span class="message">I do want to replace that</span></div><div class="line" id="154306"><span class="nick" style="color:#6d2462"><a href="#154306" label="[15:43:06]">&lt;siraben&gt;</a></span><span class="message">level 0</span></div><div class="line" id="154411"><span class="nick" style="color:#6c3d55"><a href="#154411" label="[15:44:11]">&lt;Melg8&gt;</a></span><span class="message">okay, maybe it will be interesting for you <a rel="nofollow" href="https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix">https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix</a>  - it's all messy, because i'm just experimenting, but at least i know that you don't need stdenv to build initial stuff</span></div><div class="line" id="154455"><span class="nick" style="color:#6d2462"><a href="#154455" label="[15:44:55]">&lt;siraben&gt;</a></span><span class="message">Melg8: oh, great, you already have initial work underway!</span></div><div class="line" id="154456"><span class="nick" style="color:#6d2462"><a href="#154456" label="[15:44:56]">&lt;siraben&gt;</a></span><span class="message">&lt;3</span></div><div class="line" id="154512"><span class="nick" style="color:#389600"><a href="#154512" label="[15:45:12]">&lt;stikonas&gt;</a></span><span class="message">lkdedihnirtrrgfkfnguefrjkfttvdlvlnlfugfeghvn</span></div><div class="line" id="154517"><span class="nick" style="color:#389600"><a href="#154517" label="[15:45:17]">&lt;stikonas&gt;</a></span><span class="message">sorry wrong copy paste...</span></div><div class="line" id="154530"><span class="nick" style="color:#6c3d55"><a href="#154530" label="[15:45:30]">&lt;Melg8&gt;</a></span><span class="message">im stuck with my own idea to be backward compatible with live-bootstrap approach.. which is to build everything without nix seeds at all</span></div><div class="line" id="154531"><span class="nick" style="color:#389600"><a href="#154531" label="[15:45:31]">&lt;stikonas&gt;</a></span><span class="message">(and it's not a password)</span></div><div class="line" id="154542"><span class="nick" style="color:#6d2462"><a href="#154542" label="[15:45:42]">&lt;siraben&gt;</a></span><span class="message">lol I wonder what that paste is</span></div><div class="line" id="154544"><span class="nick" style="color:#6c3d55"><a href="#154544" label="[15:45:44]">&lt;Melg8&gt;</a></span><span class="message">stikonas ;P</span></div><div class="line" id="154842"><span class="nick" style="color:#6c3d55"><a href="#154842" label="[15:48:42]">&lt;Melg8&gt;</a></span><span class="message">siraben so my initial idea was to use nix to do two things - load github repos and unpack them into store. Than use kaem as runner and just generate kaem scripts with paths from nix store. + use nix to add some extra supporf of different arches - just by replacing parts of text with needed flags/ destinations</span></div><div class="line" id="154924"><span class="nick" style="color:#6c3d55"><a href="#154924" label="[15:49:24]">&lt;Melg8&gt;</a></span><span class="message">siraben plus it gives opportunity not to repeat by hands tons of setup code- and just generate it like <a rel="nofollow" href="https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/generate_kaem_scripts.nix">https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/generate_kaem_scripts.nix</a>  here</span></div><div class="line" id="154925"><span class="nick" style="color:#6d2462"><a href="#154925" label="[15:49:25]">&lt;siraben&gt;</a></span><span class="message">Melg8: oh I notice you are on matrix as well, the r13y channel is another good place to bring this up</span></div><div class="line" id="154938"><span class="nick" style="color:#6d2462"><a href="#154938" label="[15:49:38]">&lt;siraben&gt;</a></span><span class="message">reading now</span></div><div class="line" id="155043"><span class="nick" style="color:#6c3d55"><a href="#155043" label="[15:50:43]">&lt;Melg8&gt;</a></span><span class="message">i was asking if any want to do this in matrix/irc/discord) but finally find you here)</span></div><div class="line" id="155222"><span class="nick" style="color:#6c3d55"><a href="#155222" label="[15:52:22]">&lt;Melg8&gt;</a></span><span class="message">only problem with nix that i found is - nix wants outputs out of derivation. and initial kaem doesnt know how to track env variables, so i delayed package until kaem from c is ready, and just than copy binaries to out</span></div><div class="line" id="155334"><span class="nick" style="color:#6d2462"><a href="#155334" label="[15:53:34]">&lt;siraben&gt;</a></span><span class="message">side note: why is this in &quot;cit&quot;?</span></div><div class="line" id="155458"><span class="nick" style="color:#6c3d55"><a href="#155458" label="[15:54:58]">&lt;Melg8&gt;</a></span><span class="message">i just doesn't want to bother with creating new git repo for that- because started as experiment, and i have already nix stuff there) but ofc if it grow to something - should be moved in proper place (nixpkgs xD)</span></div><div class="line" id="155459"><span class="nick" style="color:#6d2462"><a href="#155459" label="[15:54:59]">&lt;siraben&gt;</a></span><span class="message">Melg8: ok, wow, writing raw derivations</span></div><div class="line" id="155511"><span class="nick" style="color:#6d2462"><a href="#155511" label="[15:55:11]">&lt;siraben&gt;</a></span><span class="message">kaem-optional-seed won't track env vars?</span></div><div class="line" id="155517"><span class="nick" style="color:#6c3d55"><a href="#155517" label="[15:55:17]">&lt;Melg8&gt;</a></span><span class="message">nope</span></div><div class="line" id="155534"><span class="nick" style="color:#6c3d55"><a href="#155534" label="[15:55:34]">&lt;Melg8&gt;</a></span><span class="message">it just can send them to it;s childs</span></div><div class="line" id="155542"><span class="nick" style="color:#6c3d55"><a href="#155542" label="[15:55:42]">&lt;Melg8&gt;</a></span><span class="message">but it cant use them by itself</span></div><div class="line" id="155610"><span class="nick" style="color:#6d2462"><a href="#155610" label="[15:56:10]">&lt;siraben&gt;</a></span><span class="message">once this is all done we need to bootstrap Nix in the first place heh, it's written in C++ though</span></div><div class="line" id="155626"><span class="nick" style="color:#6c3d55"><a href="#155626" label="[15:56:26]">&lt;Melg8&gt;</a></span><span class="message">siraben i want to warn you that i relatively new to nix, so that all crappy code, and i need somebody to have more experience for example, to push this ideas to nixpkgs</span></div><div class="line" id="155641"><span class="nick" style="color:#389600"><a href="#155641" label="[15:56:41]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed can only exec applications with arguments, that's it (well, and parse .kaem files)</span></div><div class="line" id="155718"><span class="nick" style="color:#6d2462"><a href="#155718" label="[15:57:18]">&lt;siraben&gt;</a></span><span class="message">You seem to have quite good knowledge of Nix already (writing raw derivations is usually an advanced topic) :)</span></div><div class="line" id="155725"><span class="nick" style="color:#6d2462"><a href="#155725" label="[15:57:25]">&lt;siraben&gt;</a></span><span class="message">How far does this bootstrap in Nix go?</span></div><div class="line" id="155741"><span class="nick" style="color:#6d2462"><a href="#155741" label="[15:57:41]">&lt;siraben&gt;</a></span><span class="message">do we get m2-planet?</span></div><div class="line" id="155807"><span class="nick" style="color:#6c3d55"><a href="#155807" label="[15:58:07]">&lt;Melg8&gt;</a></span><span class="message">that all what i've got <a rel="nofollow" href="https://github.com/melg8/cit/blob/c66f8733f4a872d67cd60c50c0a23a5c8bc9de17/bootstrap_nix/bootstrap_seeds/generate_kaem_scripts.nix#L321">https://github.com/melg8/cit/blob/c66f8733f4a872d67cd60c50c0a23a5c8bc9de17/bootstrap_nix/bootstrap_seeds/generate_kaem_scripts.nix#L321</a> </span></div><div class="line" id="155855"><span class="nick" style="color:#6c3d55"><a href="#155855" label="[15:58:55]">&lt;Melg8&gt;</a></span><span class="message">but it's not hard to get all the way - to anything from live-bootstrap from there. i've stuck with idea of nix making cleared tree with no nix involved</span></div><div class="line" id="160005"><span class="nick" style="color:#6d2462"><a href="#160005" label="[16:00:05]">&lt;siraben&gt;</a></span><span class="message">I see</span></div><div class="line" id="160418"><span class="nick" style="color:#6c3d55"><a href="#160418" label="[16:04:18]">&lt;Melg8&gt;</a></span><span class="message">siraben if you want we can collaborate to do something sane for nixpkgs) although i think we need some extra input from community - to how this all can fit without breaking hydra and without affecting build time to much.</span></div><div class="line" id="160516"><span class="nick" style="color:#6d2462"><a href="#160516" label="[16:05:16]">&lt;siraben&gt;</a></span><span class="message">Melg8: yeah, it's something I would want, I don't know anyone else in the NixOS community familiar with the bootstrappable work (or even the names of the stages like kaem and m2-planet)</span></div><div class="line" id="160532"><span class="nick" style="color:#6d2462"><a href="#160532" label="[16:05:32]">&lt;siraben&gt;</a></span><span class="message">we can also ask for our own hydra jobset</span></div><div class="line" id="160641"><span class="nick" style="color:#6c3d55"><a href="#160641" label="[16:06:41]">&lt;Melg8&gt;</a></span><span class="message">I learned about it like <a rel="nofollow" href="https://summer.nixos.org/">https://summer.nixos.org/</a>  -&gt; <a rel="nofollow" href="https://nlnet.nl/thema/NGIZeroPET.html">https://nlnet.nl/thema/NGIZeroPET.html</a>  -&gt; <a rel="nofollow" href="https://nlnet.nl/project/GNUMes/">https://nlnet.nl/project/GNUMes/</a> </span></div><div class="line" id="160802"><span class="nick" style="color:#6d2462"><a href="#160802" label="[16:08:02]">&lt;siraben&gt;</a></span><span class="message">Ah, cool, are you participating in summer of Nix?</span></div><div class="line" id="160819"><span class="nick" style="color:#6c3d55"><a href="#160819" label="[16:08:19]">&lt;Melg8&gt;</a></span><span class="message">stikonas btw, did anybody tried to build toybox(<a rel="nofollow" href="https://github.com/landley/toybox">https://github.com/landley/toybox</a>)  (instead of busybox/coreutils/bash)?</span></div><div class="line" id="160843"><span class="nick" style="color:#389600"><a href="#160843" label="[16:08:43]">&lt;stikonas&gt;</a></span><span class="message">Melg8: yeah, I think  we briefly looked at it and also busybox</span></div><div class="line" id="160853"><span class="nick" style="color:#6c3d55"><a href="#160853" label="[16:08:53]">&lt;Melg8&gt;</a></span><span class="message">siraben idk, too shy to write them, but i'm intrested in topic , so i've started to prepare stuff)</span></div><div class="line" id="160912"><span class="nick" style="color:#389600"><a href="#160912" label="[16:09:12]">&lt;stikonas&gt;</a></span><span class="message">couldn't easily build with tcc/meslibc</span></div><div class="line" id="160927"><span class="nick" style="color:#389600"><a href="#160927" label="[16:09:27]">&lt;stikonas&gt;</a></span><span class="message">(note that first coreutils are built with mes libc)</span></div><div class="line" id="161001"><span class="nick" style="color:#6d2462"><a href="#161001" label="[16:10:01]">&lt;siraben&gt;</a></span><span class="message">Melg8: Ah, I see. AFAIK it would likely be packaging work, and probably not making stdenv bootstrappable</span></div><div class="line" id="161002"><span class="nick" style="color:#389600"><a href="#161002" label="[16:10:02]">&lt;stikonas&gt;</a></span><span class="message">and bash too</span></div><div class="line" id="161014"><span class="nick" style="color:#6d2462"><a href="#161014" label="[16:10:14]">&lt;siraben&gt;</a></span><span class="message">So stdenv consists of bash/coreutils/gcc and what other things?</span></div><div class="line" id="161022"><span class="nick" style="color:#6d2462"><a href="#161022" label="[16:10:22]">&lt;siraben&gt;</a></span><span class="message">I need to refresh my memory on the stages</span></div><div class="line" id="161117"><span class="nick" style="color:#6c3d55"><a href="#161117" label="[16:11:17]">&lt;Melg8&gt;</a></span><span class="message">siraben <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix</a>  this)</span></div><div class="line" id="161127"><span class="nick" style="color:#389600"><a href="#161127" label="[16:11:27]">&lt;stikonas&gt;</a></span><span class="message">Melg8: it's probably not super surprising, mes libc was written to be just good enough to build bash/binutils/gcc-2.95.3</span></div><div class="line" id="161243"><span class="nick" style="color:#6c3d55"><a href="#161243" label="[16:12:43]">&lt;Melg8&gt;</a></span><span class="message">stikonas yea, i see. One day we would be able to cut some corners) if some of mes libc get upgraded</span></div><div class="line" id="161246"><span class="nick" style="color:#6d2462"><a href="#161246" label="[16:12:46]">&lt;siraben&gt;</a></span><span class="message">Melg8: ah, thanks. Yeah, it looks like we'd want to replace make-bootstrap-tools with bootstrappable's one</span></div><div class="line" id="161332"><span class="nick" style="color:#6d2462"><a href="#161332" label="[16:13:32]">&lt;siraben&gt;</a></span><span class="message">Melg8: another thing I was thinking about maybe as a good beginning, is create a new stdenv variant, stdenvMinimal</span></div><div class="line" id="161336"><span class="nick" style="color:#389600"><a href="#161336" label="[16:13:36]">&lt;stikonas&gt;</a></span><span class="message">well, we already (mostly pder) pushed some patches into mes libc that live-bootstrap needed</span></div><div class="line" id="161343"><span class="nick" style="color:#6d2462"><a href="#161343" label="[16:13:43]">&lt;siraben&gt;</a></span><span class="message">stdenvNoCC isn't even minimal enough</span></div><div class="line" id="161346"><span class="nick" style="color:#6c3d55"><a href="#161346" label="[16:13:46]">&lt;Melg8&gt;</a></span><span class="message">yes, i think that would be better than on &quot;client&quot; side - because less people would be affected, although - make-bootstrap-tools already use full nixpkgs stuff</span></div><div class="line" id="161348"><span class="nick" style="color:#389600"><a href="#161348" label="[16:13:48]">&lt;stikonas&gt;</a></span><span class="message">most importantly ability to have more than 255 command line arguments</span></div><div class="line" id="161534"><span class="nick" style="color:#6c3d55"><a href="#161534" label="[16:15:34]">&lt;Melg8&gt;</a></span><span class="message">siraben my own - smallest possible goal were - to provide coreutils - from bootstrap - and not  build with large binary seeds of gcc and so on.</span></div><div class="line" id="161911"><span class="nick" style="color:#6d2462"><a href="#161911" label="[16:19:11]">&lt;siraben&gt;</a></span><span class="message">Yes, coreutils would be pretty well-defined, right?</span></div><div class="line" id="161918"><span class="nick" style="color:#6d2462"><a href="#161918" label="[16:19:18]">&lt;siraben&gt;</a></span><span class="message">I think SuperSandro2000 did something regarding uutils-coreutils</span></div><div class="line" id="161927"><span class="nick" style="color:#6d2462"><a href="#161927" label="[16:19:27]">&lt;siraben&gt;</a></span><span class="message">Yeah, a uutils-based stdenv <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/pull/116274">https://github.com/NixOS/nixpkgs/pull/116274</a> </span></div><div class="line" id="162109"><span class="nick" style="color:#6d2462"><a href="#162109" label="[16:21:09]">&lt;siraben&gt;</a></span><span class="message">coreutils being bootstrapped sounds like another great goal</span></div><div class="line" id="162321"><span class="nick" style="color:#6c3d55"><a href="#162321" label="[16:23:21]">&lt;Melg8&gt;</a></span><span class="message">yea, at least i know the path (thanks to live-bootstrap) and proved to myself that nix can handle initial struggle, rest is just adapting scripts/choosing directions and implementations. But idk if community want this to be as pure as i would like it to be. (using stdenv and bash from host makes things more sane/ but less trusted) although nix</span></div><div class="line" id="162321"><span class="nick" style="color:#6c3d55"><a href="#162321" label="[16:23:21]">&lt;Melg8&gt;</a></span><span class="message">itself if present - is huge.</span></div><div class="line" id="164555"><span class="nick" style="color:#6c3d55"><a href="#164555" label="[16:45:55]">&lt;Melg8&gt;</a></span><span class="message">I've added some info which already been discussed in this cat to the issue, so people on nixpkgs can checkout too. and some additional questions - <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/issues/123095#issuecomment-848795920">https://github.com/NixOS/nixpkgs/issues/123095#issuecomment-848795920</a> </span></div><div class="line" id="165533"><span class="nick" style="color:#6d2462"><a href="#165533" label="[16:55:33]">&lt;siraben&gt;</a></span><span class="message">Great, thank you.</span></div><div class="line" id="165901"><span class="nick" style="color:#6c3d55"><a href="#165901" label="[16:59:01]">&lt;Melg8&gt;</a></span><span class="message">siraben if you can - spread this issue in some chats/discussions, or with some of stakeholders on nixpkgs, so it at least get proper discussion with all interested parties involved. But from my personal experience bootstrapping story is not very popular in nix community ;(</span></div><div class="line" id="173949"><span class="nick" style="color:#d9d9d9"><a href="#173949" label="[17:39:49]">&lt;lfam&gt;</a></span><span class="message">I am wondering if this is the new &quot;official&quot; bootstrappable IRC channel? If so, we'll update the reference in the Guix manual</span></div><div class="line" id="174116"><span class="nick" style="color:#6d2462"><a href="#174116" label="[17:41:16]">&lt;siraben&gt;</a></span><span class="message">Melg8: bootstrapping (in general) was recently mentioned in the reproducibility channel on Matrix, I would really want to see Ercison2314 on it as well</span></div><div class="line" id="174127"><span class="nick" style="color:#6d2462"><a href="#174127" label="[17:41:27]">&lt;siraben&gt;</a></span><span class="message">I think he's quite familiar with the stdenv and cross stuff</span></div><div class="line" id="174405"><span class="nick" style="color:#6c3d55"><a href="#174405" label="[17:44:05]">&lt;Melg8&gt;</a></span><span class="message">siraben from what i know there were efforts to start using tcc in bootstrap, but idk why they didn't make to repo <a rel="nofollow" href="https://github.com/edolstra/nixpkgs/tree/mes-stdenv-bootstrap">https://github.com/edolstra/nixpkgs/tree/mes-stdenv-bootstrap</a> </span></div><div class="line" id="174441"><span class="nick" style="color:#bc80bd"><a href="#174441" label="[17:44:41]">&lt;xentrac&gt;</a></span><span class="message">lfam: yeah, it is.  the Leenode channel got shut down (by oriansj I think) before leenode started punishing such dissent</span></div><div class="line" id="174445"><span class="nick" style="color:#3c5b35"><a href="#174445" label="[17:44:45]">&lt;qyliss&gt;</a></span><span class="message">I think that was done at a conf and not pursued further</span></div><div class="line" id="174456"><span class="nick" style="color:#d9d9d9"><a href="#174456" label="[17:44:56]">&lt;lfam&gt;</a></span><span class="message">Alright xentrac</span></div><div class="line" id="183710"><span class="nick" style="color:#6b8072"><a href="#183710" label="[18:37:10]">&lt;oriansj&gt;</a></span><span class="message">lfam: well the final official vote for where our final stopping place is this week.</span></div><div class="line" id="183725"><span class="nick" style="color:#6b8072"><a href="#183725" label="[18:37:25]">&lt;oriansj&gt;</a></span><span class="message">Which everyone here gets an equal vote</span></div><div class="line" id="183728"><span class="nick" style="color:#d9d9d9"><a href="#183728" label="[18:37:28]">&lt;lfam&gt;</a></span><span class="message">Okay</span></div><div class="line" id="183741"><span class="nick" style="color:#d9d9d9"><a href="#183741" label="[18:37:41]">&lt;lfam&gt;</a></span><span class="message">Is the freenode channel even open? I tried to join it but I'm banned for some reason</span></div><div class="line" id="183751"><span class="nick" style="color:#d9d9d9"><a href="#183751" label="[18:37:51]">&lt;lfam&gt;</a></span><span class="message">Our manual points people to #bootstrappable on freenode</span></div><div class="line" id="184154"><span class="nick" style="color:#6b8072"><a href="#184154" label="[18:41:54]">&lt;oriansj&gt;</a></span><span class="message">The vote is between libera, oftc and matrix as no other options were provided. The vote pattern is as follows: <a rel="nofollow" href="https://paste.debian.net/1198887/">https://paste.debian.net/1198887/</a> </span></div><div class="line" id="184320"><span class="nick" style="color:#6b8072"><a href="#184320" label="[18:43:20]">&lt;oriansj&gt;</a></span><span class="message">(correction oftc.net, Libera.Chat and matrix:#bootstrappable)</span></div><div class="line" id="184431"><span class="nick" style="color:#6b8072"><a href="#184431" label="[18:44:31]">&lt;oriansj&gt;</a></span><span class="message">So everyone here has until sunday (failure to vote just means Obstain for all 3 options). Post with the text: My Vote and a link to your vote in that format.</span></div><div class="line" id="184509"><span class="nick" style="color:#6b8072"><a href="#184509" label="[18:45:09]">&lt;oriansj&gt;</a></span><span class="message">Thus far no votes have been posted. (let alone the 25vote majority needed to end the voting early)</span></div><div class="line" id="184609"><span class="nick" style="color:#d9d9d9"><a href="#184609" label="[18:46:09]">&lt;lfam&gt;</a></span><span class="message">I will leave the vote to the people who are doing the work :) We will update our manual accordingly</span></div><div class="line" id="184935"><span class="nick" style="color:#af8d2f"><a href="#184935" label="[18:49:35]">&lt;jackhill&gt;</a></span><span class="message">My Vote: <a rel="nofollow" href="https://paste.debian.net/1198890/">https://paste.debian.net/1198890/</a> </span></div><div class="line" id="185003"><span class="nick" style="color:#6d2462"><a href="#185003" label="[18:50:03]">&lt;siraben&gt;</a></span><span class="message">yikes, so said we got attacked on Leenode :()</span></div><div class="line" id="185010"><span class="nick" style="color:#6d2462"><a href="#185010" label="[18:50:10]">&lt;siraben&gt;</a></span><span class="message">:(* darn electric-parens</span></div><div class="line" id="185024"><span class="nick" style="color:#6d2462"><a href="#185024" label="[18:50:24]">&lt;siraben&gt;</a></span><span class="message">Oh misread</span></div><div class="line" id="185030"><span class="nick" style="color:#6d2462"><a href="#185030" label="[18:50:30]">&lt;siraben&gt;</a></span><span class="message">we shut down voluntarily before it happened</span></div><div class="line" id="185054"><span class="nick" style="color:#af8d2f"><a href="#185054" label="[18:50:54]">&lt;jackhill&gt;</a></span><span class="message">like lfam, I'd like to leave the decision to those doing the actual work, so I've abstained, but I voted in case that helps judge engaguement on the topic :)</span></div><div class="line" id="191238"><span class="nick" style="color:#6c3d55"><a href="#191238" label="[19:12:38]">&lt;Melg8&gt;</a></span><span class="message">My vote: <a rel="nofollow" href="https://paste.debian.net/1198896/">https://paste.debian.net/1198896/</a> </span></div><div class="line" id="193539"><span class="nick" style="color:#389600"><a href="#193539" label="[19:35:39]">&lt;roptat&gt;</a></span><span class="message">My Vote: <a rel="nofollow" href="https://paste.debian.net/1198902/">https://paste.debian.net/1198902/</a> </span></div><div class="line" id="193902"><span class="nick" style="color:#8dd3c7"><a href="#193902" label="[19:39:02]">&lt;bandali&gt;</a></span><span class="message">it might be worth noting that last i checked, verifying a nick on OFTC requires running nonfree js (google recaptcha)</span></div><div class="line" id="194131"><span class="nick" style="color:#2e2a4a"><a href="#194131" label="[19:41:31]">&lt;Noisytoot&gt;</a></span><span class="message">bandali, that is correct, but you can ask an ircop to manually verify it (like I did)</span></div><div class="line" id="194233"><span class="nick" style="color:#8dd3c7"><a href="#194233" label="[19:42:33]">&lt;bandali&gt;</a></span><span class="message">ah i see, it's nice that they offer that option. i just wish they wouldn't expose people to the captcha by default to begin with</span></div><div class="line" id="210213"><span class="nick">***</span><span class="message notice">Hagfish_ is now known as Hagfish</span></div><div class="line" id="212251"><span class="nick" style="color:#af8d2f"><a href="#212251" label="[21:22:51]">&lt;jackhill&gt;</a></span><span class="message">roptat: I haven't used any of them, but `guix search matrix-client` turns up some. My main experience is connecting via xmpp.</span></div><div class="line" id="212803"><span class="nick" style="color:#389600"><a href="#212803" label="[21:28:03]">&lt;roptat&gt;</a></span><span class="message">jackhill, thanks, most of them are not clients, but libraries, but I see nheko and quaternion indeed</span></div><div class="line" id="212849"><span class="nick" style="color:#389600"><a href="#212849" label="[21:28:49]">&lt;roptat&gt;</a></span><span class="message">I was under the impression they would depend on a qtwebengine or something, but looks like I was wrong, so consider I have no objection now :)</span></div><div class="line" id="212920"><span class="nick" style="color:#389600"><a href="#212920" label="[21:29:20]">&lt;roptat&gt;</a></span><span class="message">mh, although nheko crashes at startup...</span></div><div class="line" id="212934"><span class="nick" style="color:#af8d2f"><a href="#212934" label="[21:29:34]">&lt;jackhill&gt;</a></span><span class="message">:) well … like I said, I hadn't tried any</span></div><div class="line" id="212959"><span class="nick" style="color:#389600"><a href="#212959" label="[21:29:59]">&lt;roptat&gt;</a></span><span class="message">and quaternion too, great!</span></div><div class="line" id="213040"><span class="nick" style="color:#389600"><a href="#213040" label="[21:30:40]">&lt;roptat&gt;</a></span><span class="message">[qml] [critical] Failed to create OpenGL context for format QSurfaceFormat(version 2.0, options QFlags&lt;QSurfaceFormat::FormatOption&gt;(), depthBufferSize 24, redBufferSize -1, greenBufferSize -1, blueBufferSize -1, alphaBufferSize -1, stencilBufferSize 8, samples -1, swapBehavior QSurfaceFormat::DoubleBuffer, swapInterval 1, colorSpace QSurfaceFormat::DefaultColorSpace, profile  QSurfaceFormat::NoProfile)  (:0, )</span></div><div class="line" id="213046"><span class="nick" style="color:#389600"><a href="#213046" label="[21:30:46]">&lt;roptat&gt;</a></span><span class="message">and then core dumped</span></div><div class="line" id="213126"><span class="nick" style="color:#389600"><a href="#213126" label="[21:31:26]">&lt;roptat&gt;</a></span><span class="message">so I am a bit concerned about being able to use Matrix :)</span></div><div class="line" id="213618"><span class="nick" style="color:#389600"><a href="#213618" label="[21:36:18]">&lt;roptat&gt;</a></span><span class="message">(I can use it on my phone, and use the web interface of course, but none of these options are very practical)</span></div><div class="line" id="213908"><span class="nick" style="color:#af8d2f"><a href="#213908" label="[21:39:08]">&lt;jackhill&gt;</a></span><span class="message">well, I guess you don't need to change you vote then.</span></div><div class="line" id="233436"><span class="nick" style="color:#6b8072"><a href="#233436" label="[23:34:36]">&lt;oriansj&gt;</a></span><span class="message">jackhill: that is why we give people a week to decide and openly debate, discuss and champion their preferred choice.</span></div><div class="line" id="233936"><span class="nick" style="color:#6b8072"><a href="#233936" label="[23:39:36]">&lt;oriansj&gt;</a></span><span class="message">For example I certainly would have objections regarding to the default process being non-free javascript for OFTC</span></div><div class="line" id="234010"><span class="nick" style="color:#6b8072"><a href="#234010" label="[23:40:10]">&lt;oriansj&gt;</a></span><span class="message">Or the lack of usuable matrix clients in Emacs</span></div><br /></div></body></html>