<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="103804"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="110319"><span class="nick" style="color:#8dd3c7"><a href="#110319" label="[11:03:19]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://tracker.debian.org/news/1083356/accepted-mes-021-1-source-into-unstable/">https://tracker.debian.org/news/1083356/accepted-mes-021-1-source-into-unstable/</a> </span></div><div class="line" id="110336"><span class="nick" style="color:#8dd3c7"><a href="#110336" label="[11:03:36]">&lt;vagrantc&gt;</a></span><span class="message">janneke: i was able to drop all the patches and it fixed a few other lintian issues :)</span></div><div class="line" id="110401"><span class="nick" style="color:#2e2a4a"><a href="#110401" label="[11:04:01]">&lt;janneke&gt;</a></span><span class="message">vagrantc: yay! \o/</span></div><div class="line" id="110415"><span class="nick" style="color:#2e2a4a"><a href="#110415" label="[11:04:15]">&lt;janneke&gt;</a></span><span class="message">thank you</span></div><div class="line" id="110445"><span class="nick" style="color:#8dd3c7"><a href="#110445" label="[11:04:45]">&lt;vagrantc&gt;</a></span><span class="message">should see if the amd64/i386 buildd's successfully build it in ~30 minutes</span></div><div class="line" id="112734"><span class="nick" style="color:#2e2a4a"><a href="#112734" label="[11:27:34]">&lt;janneke&gt;</a></span><span class="message">ah yes, a successful package build would be nice</span></div><div class="line" id="113237"><span class="nick" style="color:#8dd3c7"><a href="#113237" label="[11:32:37]">&lt;vagrantc&gt;</a></span><span class="message">i've done some local build tests, so *should* be fine</span></div><div class="line" id="113252"><span class="nick" style="color:#8dd3c7"><a href="#113252" label="[11:32:52]">&lt;vagrantc&gt;</a></span><span class="message">looks lik i386 was successful</span></div><div class="line" id="113309"><span class="nick" style="color:#8dd3c7"><a href="#113309" label="[11:33:09]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://buildd.debian.org/status/package.php?p=mes">https://buildd.debian.org/status/package.php?p=mes</a> </span></div><div class="line" id="113714"><span class="nick" style="color:#8dd3c7"><a href="#113714" label="[11:37:14]">&lt;vagrantc&gt;</a></span><span class="message">amd64 failed :(</span></div><div class="line" id="113734"><span class="nick" style="color:#8dd3c7"><a href="#113734" label="[11:37:34]">&lt;vagrantc&gt;</a></span><span class="message">swear it passed on my last local build...</span></div><div class="line" id="113845"><span class="nick" style="color:#8dd3c7"><a href="#113845" label="[11:38:45]">&lt;vagrantc&gt;</a></span><span class="message">guess one of the readdir XFAIL patches was still needed?</span></div><div class="line" id="113847"><span class="nick" style="color:#6b8072"><a href="#113847" label="[11:38:47]">*</a></span><span class="message">vagrantc squints</span></div><div class="line" id="114233"><span class="nick" style="color:#8dd3c7"><a href="#114233" label="[11:42:33]">&lt;vagrantc&gt;</a></span><span class="message">so, on the machine i had where it consistently failed... it was an overlay fs consisting of a tmpfs upper dir and ext4 lower dir ... and the one that i just tested as working was overlay fs with ext4 upper and ext4 lower...</span></div><div class="line" id="114948"><span class="nick" style="color:#2e2a4a"><a href="#114948" label="[11:49:48]">&lt;janneke&gt;</a></span><span class="message">vagrantc: in a way, it could be a feature that it fails</span></div><div class="line" id="115010"><span class="nick" style="color:#2e2a4a"><a href="#115010" label="[11:50:10]">&lt;janneke&gt;</a></span><span class="message">it really bothered me that all tests passed on my qemu-vm and you needed XFAILs</span></div><div class="line" id="115027"><span class="nick" style="color:#8dd3c7"><a href="#115027" label="[11:50:27]">&lt;vagrantc&gt;</a></span><span class="message">i think we're honing in on the underlying issue ...</span></div><div class="line" id="115038"><span class="nick" style="color:#2e2a4a"><a href="#115038" label="[11:50:38]">&lt;janneke&gt;</a></span><span class="message">it's why we do all this marrakech stuff, right?</span></div><div class="line" id="115057"><span class="nick" style="color:#8dd3c7"><a href="#115057" label="[11:50:57]">&lt;vagrantc&gt;</a></span><span class="message">you don't want your test suite to be filesystem dependent :)</span></div><div class="line" id="115108"><span class="nick" style="color:#8dd3c7"><a href="#115108" label="[11:51:08]">&lt;vagrantc&gt;</a></span><span class="message">or at least, it knows how to handle itself</span></div><div class="line" id="115126"><span class="nick" style="color:#2e2a4a"><a href="#115126" label="[11:51:26]">&lt;janneke&gt;</a></span><span class="message">ah yeah, quite possibly this is just a silly goof-up by me :)</span></div><div class="line" id="120418"><span class="nick" style="color:#8dd3c7"><a href="#120418" label="[12:04:18]">&lt;vagrantc&gt;</a></span><span class="message">what confuses me is why it would be consistently fine on i386 and not amd64... but maybe 64-bit tmpfs behaves differently somehow</span></div><div class="line" id="120500"><span class="nick" style="color:#8dd3c7"><a href="#120500" label="[12:05:00]">&lt;vagrantc&gt;</a></span><span class="message">or maybe tmpfs is a red herring...</span></div><div class="line" id="120627"><span class="nick" style="color:#80b1d3"><a href="#120627" label="[12:06:27]">&lt;oriansj&gt;</a></span><span class="message">probably given mes.c's code</span></div><div class="line" id="120714"><span class="nick" style="color:#80b1d3"><a href="#120714" label="[12:07:14]">&lt;oriansj&gt;</a></span><span class="message">as it calls just read and write</span></div><div class="line" id="120843"><span class="nick" style="color:#8dd3c7"><a href="#120843" label="[12:08:43]">&lt;vagrantc&gt;</a></span><span class="message">it's not expecting any particular order, is it?</span></div><div class="line" id="120947"><span class="nick" style="color:#80b1d3"><a href="#120947" label="[12:09:47]">&lt;oriansj&gt;</a></span><span class="message">First in, first out (read/write respectively)</span></div><div class="line" id="121149"><span class="nick" style="color:#80b1d3"><a href="#121149" label="[12:11:49]">&lt;oriansj&gt;</a></span><span class="message">it literally just writes one byte at a time <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/functions/file_print.c">https://github.com/oriansj/mes-m2/blob/master/functions/file_print.c</a> </span></div><div class="line" id="121254"><span class="nick" style="color:#80b1d3"><a href="#121254" label="[12:12:54]">&lt;oriansj&gt;</a></span><span class="message">and reads one byte at a time <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_reader.c">https://github.com/oriansj/mes-m2/blob/master/mes_reader.c</a> </span></div><div class="line" id="121336"><span class="nick" style="color:#80b1d3"><a href="#121336" label="[12:13:36]">&lt;oriansj&gt;</a></span><span class="message">So unless the filesystem doesn't support reading and writing one byte at a time, it shouldn't be an issue</span></div><div class="line" id="121404"><span class="nick" style="color:#80b1d3"><a href="#121404" label="[12:14:04]">&lt;oriansj&gt;</a></span><span class="message">(and that would be an extremely broken filesystem)</span></div><div class="line" id="121632"><span class="nick" style="color:#8dd3c7"><a href="#121632" label="[12:16:32]">&lt;vagrantc&gt;</a></span><span class="message">so far it seems tmpfs and/or overlay fs consisting of tmpfs + ext4 seems to trigger the issue on amd64 but not i386</span></div><div class="line" id="121649"><span class="nick" style="color:#8dd3c7"><a href="#121649" label="[12:16:49]">&lt;vagrantc&gt;</a></span><span class="message">but not quite sure</span></div><div class="line" id="122112"><span class="nick" style="color:#8dd3c7"><a href="#122112" label="[12:21:12]">&lt;vagrantc&gt;</a></span><span class="message">simple enough to test on multiple filesystems with different properties...</span></div><div class="line" id="122118"><span class="nick" style="color:#8dd3c7"><a href="#122118" label="[12:21:18]">&lt;vagrantc&gt;</a></span><span class="message">some other day, though :)</span></div><div class="line" id="122127"><span class="nick" style="color:#6b8072"><a href="#122127" label="[12:21:27]">*</a></span><span class="message">vagrantc waves</span></div><div class="line" id="122326"><span class="nick" style="color:#80b1d3"><a href="#122326" label="[12:23:26]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: thank you for the patch for the mes-m2 slow_lisp build; I just saw it and I am merging it now</span></div><div class="line" id="154358"><span class="nick" style="color:#80b1d3"><a href="#154358" label="[15:43:58]">&lt;oriansj&gt;</a></span><span class="message">god, I hate x86 assembly in regards to division</span></div><div class="line" id="161158"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="173753"><span class="nick" style="color:#80b1d3"><a href="#173753" label="[17:37:53]">&lt;oriansj&gt;</a></span><span class="message">tell me if this seems insane: (all unspecifed registers = zero) RAX=-13, RDX=-1 and RCX=4; div rcx =&gt; works fine RAX=-13, RDX=-1 RBX=4; div rbx =&gt; SIGFPE, Arithmetic exception</span></div><div class="line" id="174626"><span class="nick" style="color:#80b1d3"><a href="#174626" label="[17:46:26]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1118537/">https://paste.debian.net/1118537/</a> </span></div><div class="line" id="181055"><span class="nick" style="color:#2e2a4a"><a href="#181055" label="[18:10:55]">&lt;janneke&gt;</a></span><span class="message">oriansj: seems you need to zero RDX? -- <a rel="nofollow" href="https://stackoverflow.com/questions/47520720/floating-point-exception-division-between-integers#47520882">https://stackoverflow.com/questions/47520720/floating-point-exception-division-between-integers#47520882</a> </span></div><div class="line" id="181141"><span class="nick" style="color:#2e2a4a"><a href="#181141" label="[18:11:41]">&lt;janneke&gt;</a></span><span class="message">i don't see how div rbx would do something different from div rcx... ugh</span></div><div class="line" id="181312"><span class="nick" style="color:#80b1d3"><a href="#181312" label="[18:13:12]">&lt;oriansj&gt;</a></span><span class="message">all just to get M2-Planet's behavior to match gcc's for building mes-m2</span></div><div class="line" id="182347"><span class="nick" style="color:#6b8072"><a href="#182347" label="[18:23:47]">*</a></span><span class="message">janneke goes afk for a bit</span></div><div class="line" id="184943"><span class="nick" style="color:#6d2462"><a href="#184943" label="[18:49:43]">&lt;`Lion&gt;</a></span><span class="message">oriansj: i get sigfpe in both cases</span></div><div class="line" id="184953"><span class="nick" style="color:#6d2462"><a href="#184953" label="[18:49:53]">&lt;`Lion&gt;</a></span><span class="message">code i tested:</span></div><div class="line" id="184956"><span class="nick" style="color:#6d2462"><a href="#184956" label="[18:49:56]">&lt;`Lion&gt;</a></span><span class="message">48c7c0f3ffffffbb0400000033d248ffca48f7f3cc</span></div><div class="line" id="184956"><span class="nick" style="color:#6d2462"><a href="#184956" label="[18:49:56]">&lt;`Lion&gt;</a></span><span class="message">vs</span></div><div class="line" id="184959"><span class="nick" style="color:#6d2462"><a href="#184959" label="[18:49:59]">&lt;`Lion&gt;</a></span><span class="message">48c7c0f3ffffffb90400000033d248ffca48f7f1cc</span></div><div class="line" id="185001"><span class="nick" style="color:#6d2462"><a href="#185001" label="[18:50:01]">&lt;`Lion&gt;</a></span><span class="message">sandy bridge</span></div><div class="line" id="185151"><span class="nick" style="color:#80b1d3"><a href="#185151" label="[18:51:51]">&lt;oriansj&gt;</a></span><span class="message">`Lion: then I might have stumbled into ERRATA again</span></div><div class="line" id="185227"><span class="nick" style="color:#80b1d3"><a href="#185227" label="[18:52:27]">&lt;oriansj&gt;</a></span><span class="message">but I think I found a work around</span></div><div class="line" id="185655"><span class="nick" style="color:#80b1d3"><a href="#185655" label="[18:56:55]">&lt;oriansj&gt;</a></span><span class="message">so new M2-Planet patch is up (it is a little ugly)</span></div><div class="line" id="190008"><span class="nick" style="color:#80b1d3"><a href="#190008" label="[19:00:08]">&lt;oriansj&gt;</a></span><span class="message">and a new commit for mes-m2; which has the slow_lisp branch now passing all (currently active) tests</span></div><div class="line" id="190108"><span class="nick" style="color:#80b1d3"><a href="#190108" label="[19:01:08]">&lt;oriansj&gt;</a></span><span class="message">now make clean bin &amp;&amp; kaem --verbose --strict &amp;&amp; make test does exactly what one hopes for (thank you fosslinux for getting kaem.run into fighting shape again)</span></div><div class="line" id="190429"><span class="nick" style="color:#80b1d3"><a href="#190429" label="[19:04:29]">&lt;oriansj&gt;</a></span><span class="message">now back to the primary task (adding records)</span></div><div class="line" id="211126"><span class="nick" style="color:#80b1d3"><a href="#211126" label="[21:11:26]">&lt;oriansj&gt;</a></span><span class="message">well atleast make-record-type, record-type-name, record-type-fields, record-type?, record? and record-type-descriptor are trivial to implement</span></div><div class="line" id="211259"><span class="nick" style="color:#80b1d3"><a href="#211259" label="[21:12:59]">&lt;oriansj&gt;</a></span><span class="message">I also added a (make-record %record-type #(%values)) which seemed obvious to do</span></div><div class="line" id="211521"><span class="nick" style="color:#80b1d3"><a href="#211521" label="[21:15:21]">&lt;oriansj&gt;</a></span><span class="message">and the patch is up for those curious</span></div><div class="line" id="211635"><span class="nick" style="color:#80b1d3"><a href="#211635" label="[21:16:35]">&lt;oriansj&gt;</a></span><span class="message">now to just figureout the optimal way to do record-constructor, record-predicate, record-accessor and record-modifier</span></div><div class="line" id="211712"><span class="nick" style="color:#80b1d3"><a href="#211712" label="[21:17:12]">&lt;oriansj&gt;</a></span><span class="message">as interally it is just a vector</span></div><div class="line" id="211830"><span class="nick" style="color:#80b1d3"><a href="#211830" label="[21:18:30]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1118560/">https://paste.debian.net/1118560/</a> </span></div><div class="line" id="214118"><span class="nick" style="color:#234e69"><a href="#214118" label="[21:41:18]">&lt;fosslinux&gt;</a></span><span class="message">&lt;oriansj&gt; fosslinux: thank you for the patch for the mes-m2 slow_lisp build; I just saw it and I am merging it now</span></div><div class="line" id="214121"><span class="nick" style="color:#234e69"><a href="#214121" label="[21:41:21]">&lt;fosslinux&gt;</a></span><span class="message">no problem!</span></div><div class="line" id="214128"><span class="nick" style="color:#234e69"><a href="#214128" label="[21:41:28]">&lt;fosslinux&gt;</a></span><span class="message">happy to help</span></div><div class="line" id="214334"><span class="nick" style="color:#6c3d55"><a href="#214334" label="[21:43:34]">&lt;Hagfish&gt;</a></span><span class="message">sounds like some pretty epic work</span></div><div class="line" id="214429"><span class="nick" style="color:#6c3d55"><a href="#214429" label="[21:44:29]">&lt;Hagfish&gt;</a></span><span class="message">hmm, would it make sense to have something like a bug/feature/work tracker for all these components?</span></div><div class="line" id="214538"><span class="nick" style="color:#6c3d55"><a href="#214538" label="[21:45:38]">&lt;Hagfish&gt;</a></span><span class="message">having a unified dashboard showing all the current work, and what's blocked, (and maybe their dependencies), would be a nice way to visualise all the progress that's happening</span></div><div class="line" id="214759"><span class="nick" style="color:#80b1d3"><a href="#214759" label="[21:47:59]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: possibly</span></div><div class="line" id="215018"><span class="nick" style="color:#80b1d3"><a href="#215018" label="[21:50:18]">&lt;oriansj&gt;</a></span><span class="message">as the list of primitives required to support MesCC, guile's bootstrap and Guix are ultimately finite</span></div><div class="line" id="220800"><span class="nick" style="color:#80b1d3"><a href="#220800" label="[22:08:00]">&lt;oriansj&gt;</a></span><span class="message">janneke: I am thinking of just doing (core:record-predicate record-type record) and the (define (record-predicate type) (lambda (record) (core:record-predicate type record)))</span></div><div class="line" id="221010"><span class="nick" style="color:#80b1d3"><a href="#221010" label="[22:10:10]">&lt;oriansj&gt;</a></span><span class="message">similiar things can be done for record-accessor and record-modifier</span></div><div class="line" id="222330"><span class="nick" style="color:#80b1d3"><a href="#222330" label="[22:23:30]">&lt;oriansj&gt;</a></span><span class="message">but that is just me not wanting to handwrite a S-expression sequence in C</span></div><div class="line" id="222829"><span class="nick" style="color:#80b1d3"><a href="#222829" label="[22:28:29]">&lt;oriansj&gt;</a></span><span class="message">(as trivial as that would be to do)</span></div><div class="line" id="223851"><span class="nick" style="color:#d9d9d9"><a href="#223851" label="[22:38:51]">&lt;xentrac&gt;</a></span><span class="message">hi there</span></div><div class="line" id="223937"><span class="nick" style="color:#d9d9d9"><a href="#223937" label="[22:39:37]">&lt;xentrac&gt;</a></span><span class="message">I've been talking to David Given about porting CP/Mish, or the parts of it that are in C, to BDS C.  he thinks it would be impractically difficult, but I think it's probably more feasible than he imagines</span></div><div class="line" id="224209"><span class="nick" style="color:#80b1d3"><a href="#224209" label="[22:42:09]">&lt;oriansj&gt;</a></span><span class="message">xentrac: speaking as one of the few people on this planet who has also written a C compiler in assembly. oh god why?</span></div><div class="line" id="224303"><span class="nick" style="color:#d9d9d9"><a href="#224303" label="[22:43:03]">&lt;xentrac&gt;</a></span><span class="message">because right now you need Linux and the Amsterdam Compiler Kit to compile CP/Mish</span></div><div class="line" id="224430"><span class="nick" style="color:#bc80bd"><a href="#224430" label="[22:44:30]">&lt;theruran&gt;</a></span><span class="message">I was just reading again the 50% binary reduction announcement on Guix's blog, and reading the TCC mailing list responses. I think having a well-defined subset as they suggest is important. Ideally, each feature supported is defensible from the bootstrapping POV. I was wondering if Cminor or Clight from the CompCert project are feasible, though they don't support `goto' which I think is needed for MesCC, right?</span></div><div class="line" id="224432"><span class="nick" style="color:#d9d9d9"><a href="#224432" label="[22:44:32]">&lt;xentrac&gt;</a></span><span class="message">and bootstrapping an 8080 seems like it might have some practical advantages over bootstrapping Knight, such as existing software that can run on it</span></div><div class="line" id="224512"><span class="nick" style="color:#d9d9d9"><a href="#224512" label="[22:45:12]">&lt;xentrac&gt;</a></span><span class="message">and existing test suites and compilers</span></div><div class="line" id="224615"><span class="nick" style="color:#d9d9d9"><a href="#224615" label="[22:46:15]">&lt;xentrac&gt;</a></span><span class="message">64K is a problematically small address space though</span></div><div class="line" id="224957"><span class="nick" style="color:#bc80bd"><a href="#224957" label="[22:49:57]">&lt;theruran&gt;</a></span><span class="message">there are other proven C subsets though: <a rel="nofollow" href="https://i.imgur.com/wWnh3BX.png">https://i.imgur.com/wWnh3BX.png</a> </span></div><div class="line" id="225322"><span class="nick" style="color:#80b1d3"><a href="#225322" label="[22:53:22]">&lt;oriansj&gt;</a></span><span class="message">well collapseOS is always an option xentrac</span></div><div class="line" id="225335"><span class="nick" style="color:#d9d9d9"><a href="#225335" label="[22:53:35]">&lt;xentrac&gt;</a></span><span class="message">collapseoS?</span></div><div class="line" id="225416"><span class="nick" style="color:#d9d9d9"><a href="#225416" label="[22:54:16]">&lt;xentrac&gt;</a></span><span class="message">that sounds familiar</span></div><div class="line" id="225422"><span class="nick" style="color:#80b1d3"><a href="#225422" label="[22:54:22]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/hsoft/collapseos">https://github.com/hsoft/collapseos</a> </span></div><div class="line" id="225451"><span class="nick" style="color:#80b1d3"><a href="#225451" label="[22:54:51]">&lt;oriansj&gt;</a></span><span class="message">z80 work written in assembly</span></div><div class="line" id="225659"><span class="nick" style="color:#bc80bd"><a href="#225659" label="[22:56:59]">&lt;theruran&gt;</a></span><span class="message">^ pretty awesome</span></div><div class="line" id="225726"><span class="nick" style="color:#d9d9d9"><a href="#225726" label="[22:57:26]">&lt;xentrac&gt;</a></span><span class="message">oh right!</span></div><div class="line" id="225738"><span class="nick" style="color:#80b1d3"><a href="#225738" label="[22:57:38]">&lt;oriansj&gt;</a></span><span class="message">theruran: yep, was thinking of porting cc_* to it later</span></div><div class="line" id="225818"><span class="nick" style="color:#bc80bd"><a href="#225818" label="[22:58:18]">&lt;theruran&gt;</a></span><span class="message">oriansj: Cminor or Clight?</span></div><div class="line" id="225914"><span class="nick" style="color:#80b1d3"><a href="#225914" label="[22:59:14]">&lt;oriansj&gt;</a></span><span class="message">theruran: M2-Planet as it is trivial to port</span></div><div class="line" id="225934"><span class="nick" style="color:#bc80bd"><a href="#225934" label="[22:59:34]">&lt;theruran&gt;</a></span><span class="message">huh?</span></div><div class="line" id="230009"><span class="nick" style="color:#80b1d3"><a href="#230009" label="[23:00:09]">&lt;oriansj&gt;</a></span><span class="message">theruran: I was thinking of porting cc_* to collapseOS</span></div><div class="line" id="230027"><span class="nick" style="color:#bc80bd"><a href="#230027" label="[23:00:27]">&lt;theruran&gt;</a></span><span class="message">oriansj: ohh gotcha :)</span></div><div class="line" id="230110"><span class="nick" style="color:#bc80bd"><a href="#230110" label="[23:01:10]">&lt;theruran&gt;</a></span><span class="message">I thought that Dawn OS on the SUBLEQ computer is really neat. Can M2-Planet transpile to a single instruction set?</span></div><div class="line" id="230123"><span class="nick" style="color:#d9d9d9"><a href="#230123" label="[23:01:23]">&lt;xentrac&gt;</a></span><span class="message">something like Wirth's RISC is maybe a better option if you're trying to minimize the intellectual complexity of the CPU and software rather than its transistor count</span></div><div class="line" id="230137"><span class="nick" style="color:#d9d9d9"><a href="#230137" label="[23:01:37]">&lt;xentrac&gt;</a></span><span class="message">although admittedly SUBLEQ has lower intellectual complexity than Wirth's RISC :D</span></div><div class="line" id="230313"><span class="nick" style="color:#bc80bd"><a href="#230313" label="[23:03:13]">&lt;theruran&gt;</a></span><span class="message">and then there is C-- which is just a platform-independent assembly-like intermediate language. I don't think anyone uses this though</span></div><div class="line" id="230316"><span class="nick" style="color:#80b1d3"><a href="#230316" label="[23:03:16]">&lt;oriansj&gt;</a></span><span class="message">theruran: probably but it'll involve some insanely ugly M1 macros</span></div><div class="line" id="230341"><span class="nick" style="color:#d9d9d9"><a href="#230341" label="[23:03:41]">&lt;xentrac&gt;</a></span><span class="message">compiling anything to SUBLEQ is insanely ugly, but the ugliness is well contained</span></div><div class="line" id="230403"><span class="nick" style="color:#d9d9d9"><a href="#230403" label="[23:04:03]">&lt;xentrac&gt;</a></span><span class="message">by contrast, compiling anything to a 16-bit address space produces difficulties that pervade the entire system</span></div><div class="line" id="230405"><span class="nick" style="color:#80b1d3"><a href="#230405" label="[23:04:05]">&lt;oriansj&gt;</a></span><span class="message">too much of a Turing-Tarpit for me</span></div><div class="line" id="230615"><span class="nick" style="color:#d9d9d9"><a href="#230615" label="[23:06:15]">&lt;xentrac&gt;</a></span><span class="message">Wirth's RISC is kind of the opposite extreme from Turing tarpits</span></div><div class="line" id="230728"><span class="nick" style="color:#80b1d3"><a href="#230728" label="[23:07:28]">&lt;oriansj&gt;</a></span><span class="message">xentrac: very true</span></div><div class="line" id="231037"><span class="nick" style="color:#d9d9d9"><a href="#231037" label="[23:10:37]">&lt;xentrac&gt;</a></span><span class="message">it has 16 instructions.  the 8080 instruction set is around 30 instructions depending on how you count, and existing implementations are only a few hundred lines of code</span></div><div class="line" id="231048"><span class="nick" style="color:#d9d9d9"><a href="#231048" label="[23:10:48]">&lt;xentrac&gt;</a></span><span class="message">up to a bit over a thousand</span></div><div class="line" id="231111"><span class="nick" style="color:#d9d9d9"><a href="#231111" label="[23:11:11]">&lt;xentrac&gt;</a></span><span class="message">amusing to have more lines of code in your CPU HDL design than you have LUTs</span></div><div class="line" id="231207"><span class="nick" style="color:#d9d9d9"><a href="#231207" label="[23:12:07]">&lt;xentrac&gt;</a></span><span class="message">Chuck Thacker's design for a CPU similar to Chifir was only about 60 lines of Verilog though, and I think Knight is maybe a bit more than that</span></div><div class="line" id="231518"><span class="nick" style="color:#80b1d3"><a href="#231518" label="[23:15:18]">&lt;oriansj&gt;</a></span><span class="message">well I certainly would not argue that knight is a complex design relative to some alternatives</span></div><div class="line" id="231735"><span class="nick" style="color:#d9d9d9"><a href="#231735" label="[23:17:35]">&lt;xentrac&gt;</a></span><span class="message">where would you put it on the scale?</span></div><div class="line" id="231910"><span class="nick" style="color:#80b1d3"><a href="#231910" label="[23:19:10]">&lt;oriansj&gt;</a></span><span class="message">depends if you mean the full instruction set per the spec or just the subset required actually to do the bootstrap?</span></div><div class="line" id="232443"><span class="nick" style="color:#d9d9d9"><a href="#232443" label="[23:24:43]">&lt;xentrac&gt;</a></span><span class="message">why is there a difference?</span></div><div class="line" id="232942"><span class="nick" style="color:#80b1d3"><a href="#232942" label="[23:29:42]">&lt;oriansj&gt;</a></span><span class="message">yes, if we stick to just the minimal bootstrap subset it is simpler than the 8086, but if we include everything it is less complex than the 286</span></div><div class="line" id="233251"><span class="nick" style="color:#d9d9d9"><a href="#233251" label="[23:32:51]">&lt;xentrac&gt;</a></span><span class="message">oh, so way more complex than subleq, chifir, thacker's thing, wirth-risc, 8080, pdp-8, or even z80, no?</span></div><div class="line" id="233322"><span class="nick" style="color:#80b1d3"><a href="#233322" label="[23:33:22]">&lt;oriansj&gt;</a></span><span class="message">I'd argue that the z80 is more complex than the 8086</span></div><div class="line" id="233324"><span class="nick" style="color:#d9d9d9"><a href="#233324" label="[23:33:24]">&lt;xentrac&gt;</a></span><span class="message">(from my point of view 8086 seems about two or three times as complicated as the z80)</span></div><div class="line" id="233335"><span class="nick" style="color:#d9d9d9"><a href="#233335" label="[23:33:35]">&lt;xentrac&gt;</a></span><span class="message">oh, that's interesting! why?</span></div><div class="line" id="233402"><span class="nick" style="color:#80b1d3"><a href="#233402" label="[23:34:02]">&lt;oriansj&gt;</a></span><span class="message">the register grouping complexity and support for 32bit operations</span></div><div class="line" id="233438"><span class="nick" style="color:#d9d9d9"><a href="#233438" label="[23:34:38]">&lt;xentrac&gt;</a></span><span class="message">you mean IMUL/IDIV?</span></div><div class="line" id="233533"><span class="nick" style="color:#80b1d3"><a href="#233533" label="[23:35:33]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="233557"><span class="nick" style="color:#d9d9d9"><a href="#233557" label="[23:35:57]">&lt;xentrac&gt;</a></span><span class="message">but those are 8086 instructions, not the z80</span></div><div class="line" id="233634"><span class="nick" style="color:#d9d9d9"><a href="#233634" label="[23:36:34]">&lt;xentrac&gt;</a></span><span class="message">so it sounds like you're counting them on the wrong side of the complexity ledger</span></div><div class="line" id="233720"><span class="nick" style="color:#80b1d3"><a href="#233720" label="[23:37:20]">&lt;oriansj&gt;</a></span><span class="message">xentrac: entirely possible</span></div><div class="line" id="233740"><span class="nick" style="color:#80b1d3"><a href="#233740" label="[23:37:40]">&lt;oriansj&gt;</a></span><span class="message">the Exchange, block transfer, and search instructions on the other hand...</span></div><div class="line" id="233818"><span class="nick" style="color:#d9d9d9"><a href="#233818" label="[23:38:18]">&lt;xentrac&gt;</a></span><span class="message">you mean rep cmps and rep movs?</span></div><div class="line" id="233838"><span class="nick" style="color:#d9d9d9"><a href="#233838" label="[23:38:38]">&lt;xentrac&gt;</a></span><span class="message">or is there a Z80 version of those that i just don't know about ?</span></div><div class="line" id="233853"><span class="nick" style="color:#d9d9d9"><a href="#233853" label="[23:38:53]">&lt;xentrac&gt;</a></span><span class="message">I don't know the Z-80 instruction set that well!</span></div><div class="line" id="234557"><span class="nick" style="color:#80b1d3"><a href="#234557" label="[23:45:57]">&lt;oriansj&gt;</a></span><span class="message">welif we simply compare directly: <a rel="nofollow" href="https://opencores.org/projects/nextz80">https://opencores.org/projects/nextz80</a>  in verilog <a rel="nofollow" href="https://opencores.org/projects/rtf8088">https://opencores.org/projects/rtf8088</a> </span></div><div class="line" id="234702"><span class="nick" style="color:#d9d9d9"><a href="#234702" label="[23:47:02]">&lt;xentrac&gt;</a></span><span class="message">ZEX ♥</span></div><div class="line" id="234839"><span class="nick" style="color:#d9d9d9"><a href="#234839" label="[23:48:39]">&lt;xentrac&gt;</a></span><span class="message">I can't download either of those without creating an opencores account</span></div><div class="line" id="234949"><span class="nick" style="color:#80b1d3"><a href="#234949" label="[23:49:49]">&lt;oriansj&gt;</a></span><span class="message">I'd argue based on verilog implementations alone, that the 8086 is simpler than the z80</span></div><div class="line" id="235042"><span class="nick" style="color:#d9d9d9"><a href="#235042" label="[23:50:42]">&lt;xentrac&gt;</a></span><span class="message">nextz80cpu is about 22 pages of poorly abstracted verilog with a lot of evident duplication</span></div><div class="line" id="235056"><span class="nick" style="color:#d9d9d9"><a href="#235056" label="[23:50:56]">&lt;xentrac&gt;</a></span><span class="message">how much is rtf8088?</span></div><div class="line" id="235100"><span class="nick" style="color:#6b8072"><a href="#235100" label="[23:51:00]">*</a></span><span class="message">stikonas is getting quite close to bootstrapping OpenJDK on Gentoo (although it will only be an overlay, not mainline portage tree)</span></div><div class="line" id="235154"><span class="nick" style="color:#d9d9d9"><a href="#235154" label="[23:51:54]">&lt;xentrac&gt;</a></span><span class="message">congratulations, stikonas!</span></div><div class="line" id="235209"><span class="nick" style="color:#d9d9d9"><a href="#235209" label="[23:52:09]">&lt;xentrac&gt;</a></span><span class="message">I haven't used Gentoo so I don't know what an overlay is</span></div><div class="line" id="235220"><span class="nick" style="color:#3c5b35"><a href="#235220" label="[23:52:20]">&lt;stikonas&gt;</a></span><span class="message">xentrac: well, that's like Guix channel</span></div><div class="line" id="235243"><span class="nick" style="color:#80b1d3"><a href="#235243" label="[23:52:43]">&lt;oriansj&gt;</a></span><span class="message">xentrac: a good few more pages (but most of them appear to be single instructions)</span></div><div class="line" id="235252"><span class="nick" style="color:#3c5b35"><a href="#235252" label="[23:52:52]">&lt;stikonas&gt;</a></span><span class="message">xentrac: I actually found guix bootstrapping bug while doing this, it's not fixed in staging</span></div><div class="line" id="235300"><span class="nick" style="color:#3c5b35"><a href="#235300" label="[23:53:00]">&lt;stikonas&gt;</a></span><span class="message">s/not/now/</span></div><div class="line" id="235315"><span class="nick" style="color:#d9d9d9"><a href="#235315" label="[23:53:15]">&lt;xentrac&gt;</a></span><span class="message">stikonas: fantastic!</span></div><div class="line" id="235429"><span class="nick" style="color:#d9d9d9"><a href="#235429" label="[23:54:29]">&lt;xentrac&gt;</a></span><span class="message">oriansj: so in what sense are you arguing that the 8086 is simpler than the z80?  i'm sure it must be true in some sense but i'd like to understand what that sense is :)</span></div><div class="line" id="235558"><span class="nick" style="color:#d9d9d9"><a href="#235558" label="[23:55:58]">&lt;xentrac&gt;</a></span><span class="message">rtf8088 seems like it might be written at a somewhat more RTL-ish and less behavioral level than nextz80, which might be one reason it's more complex</span></div><div class="line" id="235558"><span class="nick" style="color:#80b1d3"><a href="#235558" label="[23:55:58]">&lt;oriansj&gt;</a></span><span class="message">xentrac: in the sense that one appears simpler to implement in verilog</span></div><div class="line" id="235642"><span class="nick" style="color:#d9d9d9"><a href="#235642" label="[23:56:42]">&lt;xentrac&gt;</a></span><span class="message">but... in this case it looks like nextz80 was a lot easier to write than rtf8088, doesn't it?</span></div><div class="line" id="235734"><span class="nick" style="color:#d9d9d9"><a href="#235734" label="[23:57:34]">&lt;xentrac&gt;</a></span><span class="message">oh, I can clone it from <a rel="nofollow" href="https://github.com/freecores/nextz80">https://github.com/freecores/nextz80</a> </span></div><div class="line" id="235808"><span class="nick" style="color:#80b1d3"><a href="#235808" label="[23:58:08]">&lt;oriansj&gt;</a></span><span class="message">xentrac: there are certainly alot of z80 clones but very few 8086 clones</span></div><div class="line" id="235811"><span class="nick" style="color:#d9d9d9"><a href="#235811" label="[23:58:11]">&lt;xentrac&gt;</a></span><span class="message">and .../rtf8088</span></div><div class="line" id="235926"><span class="nick" style="color:#d9d9d9"><a href="#235926" label="[23:59:26]">&lt;xentrac&gt;</a></span><span class="message">cloc says rtf8088 is 4638 lines of Verilog and nextz80 is 1797</span></div><br /></div></body></html>