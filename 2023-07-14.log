<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-07-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="015431"><span class="nick" style="color:#389600"><a href="#015431" label="[01:54:31]">&lt;stikonas&gt;</a></span><span class="message">janneke: so that patch that I was talking to you about a few days ago <a rel="nofollow" href="https://git.stikonas.eu/andrius/mes/commit/3ea282949cc40cacb00fcee1f9c7975c608a1568">https://git.stikonas.eu/andrius/mes/commit/3ea282949cc40cacb00fcee1f9c7975c608a1568</a>  is unfortunately not sufficient to fix 32-bit integers</span></div><div class="line" id="015715"><span class="nick" style="color:#389600"><a href="#015715" label="[01:57:15]">&lt;stikonas&gt;</a></span><span class="message">looks like mescc emits movslq_ instead of movzlq_ (a bit later than the previous problem)</span></div><div class="line" id="020044"><span class="nick" style="color:#389600"><a href="#020044" label="[02:00:44]">&lt;stikonas&gt;</a></span><span class="message">perhaps related to the comment in compile.scm ((wrap-as (as info 'long-signed-r))  ; huh, why not long-r?)</span></div><div class="line" id="021847"><span class="nick" style="color:#389600"><a href="#021847" label="[02:18:47]">&lt;stikonas&gt;</a></span><span class="message">yep, that seems to have fixed it</span></div><div class="line" id="022732"><span class="nick" style="color:#389600"><a href="#022732" label="[02:27:32]">&lt;stikonas&gt;</a></span><span class="message">so I think that fixes those 32-bit o functions in tcc, so a bit less patching is needed</span></div><div class="line" id="022756"><span class="nick" style="color:#389600"><a href="#022756" label="[02:27:56]">&lt;stikonas&gt;</a></span><span class="message">(still we have other asserts/segfaults when building meslibc with tcc)</span></div><div class="line" id="022845"><span class="nick" style="color:#389600"><a href="#022845" label="[02:28:45]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've pushed two commits here <a rel="nofollow" href="https://git.stikonas.eu/andrius/mes/commits/branch/wip-riscv">https://git.stikonas.eu/andrius/mes/commits/branch/wip-riscv</a> </span></div><div class="line" id="022851"><span class="nick" style="color:#389600"><a href="#022851" label="[02:28:51]">&lt;stikonas&gt;</a></span><span class="message">and possibly to bug-mes mailing list</span></div><div class="line" id="022901"><span class="nick" style="color:#389600"><a href="#022901" label="[02:29:01]">&lt;stikonas&gt;</a></span><span class="message">but might be stuck in moderation</span></div><div class="line" id="023057"><span class="nick" style="color:#389600"><a href="#023057" label="[02:30:57]">&lt;stikonas&gt;</a></span><span class="message">ok, emails are also through</span></div><div class="line" id="034402"><span class="nick" style="color:#8dd3c7"><a href="#034402" label="[03:44:02]">&lt;fossy&gt;</a></span><span class="message">pder: i was actually just running a build disabling ssp to test the same thing! thanks, i'll apply the patch shortly</span></div><div class="line" id="034521"><span class="nick" style="color:#8dd3c7"><a href="#034521" label="[03:45:21]">&lt;fossy&gt;</a></span><span class="message">stikonas[m], doras: i'm quite happy with the implementation in #309 :)</span></div><div class="line" id="034618"><span class="nick" style="color:#8dd3c7"><a href="#034618" label="[03:46:18]">&lt;fossy&gt;</a></span><span class="message">01:31 &lt;doras&gt; stikonas: never mind, I figured it out. I was playing with the `SOURCE_DATE_EPOCH` example, which is already exported globally using `export`. So if you &quot;redefine&quot; an exported variable with a `local` variable inside a function, it does not remove it from the exported list and any command executed from the scope of the function (or nested functions) would inherit this &quot;local&quot;</span></div><div class="line" id="034621"><span class="nick" style="color:#8dd3c7"><a href="#034621" label="[03:46:21]">&lt;fossy&gt;</a></span><span class="message">environment variable.</span></div><div class="line" id="034636"><span class="nick" style="color:#8dd3c7"><a href="#034636" label="[03:46:36]">&lt;fossy&gt;</a></span><span class="message">^ i guess this isn't unexpected behaviour, but that doesn't mean i like it :P</span></div><div class="line" id="034654"><span class="nick" style="color:#8dd3c7"><a href="#034654" label="[03:46:54]">&lt;fossy&gt;</a></span><span class="message">declare -x sounds alright to me</span></div><div class="line" id="034735"><span class="nick" style="color:#8dd3c7"><a href="#034735" label="[03:47:35]">&lt;fossy&gt;</a></span><span class="message">doras: i tested concurrency *pretty* thoroughly and i run almost every live-bootstrap with --jobs 6, so i hope that there should be few problems</span></div><div class="line" id="034812"><span class="nick" style="color:#8dd3c7"><a href="#034812" label="[03:48:12]">&lt;fossy&gt;</a></span><span class="message">doras: regarding Py2.5, do let me know if you run into that again, it looks a lot like a transient dependency issue i've seen pop up a few times in pythons</span></div><div class="line" id="034820"><span class="nick" style="color:#8dd3c7"><a href="#034820" label="[03:48:20]">&lt;fossy&gt;</a></span><span class="message">(but never in 2.5.6)</span></div><div class="line" id="034948"><span class="nick" style="color:#8dd3c7"><a href="#034948" label="[03:49:48]">&lt;fossy&gt;</a></span><span class="message">pder: I've been looking rather extensively into pregenerated files in nyacc</span></div><div class="line" id="035117"><span class="nick" style="color:#8dd3c7"><a href="#035117" label="[03:51:17]">&lt;fossy&gt;</a></span><span class="message">the situation is really quite problematic. locally i have nyacc mach.d being rebuilt using mes straight from the tarball, but the very very large problem is that nyacc's regenerator for mach.d files uses psyntax.pp, which we remove in live-bootstrap because it is a pregenerated file</span></div><div class="line" id="035141"><span class="nick" style="color:#8dd3c7"><a href="#035141" label="[03:51:41]">&lt;fossy&gt;</a></span><span class="message">which is where i am very stuck</span></div><div class="line" id="035440"><span class="nick" style="color:#8dd3c7"><a href="#035440" label="[03:54:40]">&lt;fossy&gt;</a></span><span class="message">(it was rather easy to have mach.d rebuild.. i just followed the same pattern for mes-use-module used for the rest of nyacc)</span></div><div class="line" id="045926"><span class="nick" style="color:#2e2a4a"><a href="#045926" label="[04:59:26]">&lt;pder&gt;</a></span><span class="message">fossy: that is tricky.  Is it at all possible to avoid using psyntax?</span></div><div class="line" id="050252"><span class="nick" style="color:#2e2a4a"><a href="#050252" label="[05:02:52]">&lt;pder&gt;</a></span><span class="message">If I grep the nyacc 1.00.2 code I see no reference to the string psyntax</span></div><div class="line" id="050530"><span class="nick" style="color:#8dd3c7"><a href="#050530" label="[05:05:30]">&lt;fossy&gt;</a></span><span class="message">pder: it's not a direct use (because guile includes psyntax by default), but mes in <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/blob/master/mes/module/nyacc/lalr.mes#L25">https://gitlab.com/janneke/mes/-/blob/master/mes/module/nyacc/lalr.mes#L25</a>  includes psyntax for lalr.scm, which is required for <a rel="nofollow" href="https://git.savannah.nongnu.org/cgit/nyacc.git/tree/module/nyacc/lalr.scm#n127">https://git.savannah.nongnu.org/cgit/nyacc.git/tree/module/nyacc/lalr.scm#n127</a>  onwards</span></div><div class="line" id="050611"><span class="nick" style="color:#8dd3c7"><a href="#050611" label="[05:06:11]">&lt;fossy&gt;</a></span><span class="message">im guessing that the define-syntaxs might be able to be rewritten somehow else, but that is farrr beyond my scheme knowledge</span></div><div class="line" id="072435"><span class="nick" style="color:#6b8072"><a href="#072435" label="[07:24:35]">&lt;janneke&gt;</a></span><span class="message">stikonas: thanks, and \o/</span></div><div class="line" id="074702"><span class="nick" style="color:#80b1d3"><a href="#074702" label="[07:47:02]">&lt;doras&gt;</a></span><span class="message">fossy: thanks. I'll update if the python build failure happens again.</span></div><div class="line" id="074810"><span class="nick" style="color:#80b1d3"><a href="#074810" label="[07:48:10]">&lt;doras&gt;</a></span><span class="message">fossy: regarding [#309](<a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/309">https://github.com/fosslinux/live-bootstrap/pull/309</a>),  would you mind merging it? I have another MR that removes uses of `export` and it would be a shame to run CI twice.</span></div><div class="line" id="074933"><span class="nick" style="color:#80b1d3"><a href="#074933" label="[07:49:33]">&lt;doras&gt;</a></span><span class="message">Well, this is GitHub, so PR* :)</span></div><div class="line" id="075444"><span class="nick" style="color:#6d2462"><a href="#075444" label="[07:54:44]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="081636"><span class="nick" style="color:#80b1d3"><a href="#081636" label="[08:16:36]">&lt;doras&gt;</a></span><span class="message">pder, fossy, stikonas: I see... definitely less segmentation faults with SSP disabled. It seems that `conftest` is still crashing when building glibc, though. Interestingly, I noticed that `conftest` is also crashing in live-bootstrap's own `gcc-13.1.0` bootstrap. It also crashes in `util-linux-2.19.1`, but I think this one isn't new. I'm not sure if these crashes are problematic, but here's the output from coredumpctl:</span></div><div class="line" id="081636"><span class="nick" style="color:#80b1d3"><a href="#081636" label="[08:16:36]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5926/raw/main/conftest-segmentation-faults.txt">https://gitlab.gnome.org/-/snippets/5926/raw/main/conftest-segmentation-faults.txt</a> </span></div><div class="line" id="082535"><span class="nick" style="color:#80b1d3"><a href="#082535" label="[08:25:35]">&lt;doras&gt;</a></span><span class="message">I'm not sure which tests in gcc-13.1.0 result in the crashes, but this is the one causing it in glibc: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5927/raw/main/glibc-conftest-segmentation-fault.txt">https://gitlab.gnome.org/-/snippets/5927/raw/main/glibc-conftest-segmentation-fault.txt</a> </span></div><div class="line" id="082553"><span class="nick" style="color:#80b1d3"><a href="#082553" label="[08:25:53]">&lt;doras&gt;</a></span><span class="message">Presumably &quot;checking for assembler and linker STT_GNU_IFUNC support...&quot;.</span></div><div class="line" id="083014"><span class="nick" style="color:#80b1d3"><a href="#083014" label="[08:30:14]">&lt;doras&gt;</a></span><span class="message">This is the source for the crashing conftest: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5927/raw/main/glibc-crashing-configure-test.txt">https://gitlab.gnome.org/-/snippets/5927/raw/main/glibc-crashing-configure-test.txt</a> </span></div><div class="line" id="083059"><span class="nick" style="color:#80b1d3"><a href="#083059" label="[08:30:59]">&lt;doras&gt;</a></span><span class="message">Taken from ./configure.</span></div><div class="line" id="083427"><span class="nick" style="color:#80b1d3"><a href="#083427" label="[08:34:27]">&lt;doras&gt;</a></span><span class="message">Actually, it seems that `gawk` (which we build, not live-bootstrap) is also crashing:... (full message at &lt;<a rel="nofollow" href="https://libera.ems.host/_matrix/media/v3/download/libera.chat/512f4565a91d277ab54e963081c5166ea37cc281">https://libera.ems.host/_matrix/media/v3/download/libera.chat/512f4565a91d277ab54e963081c5166ea37cc281</a>&gt;) </span></div><div class="line" id="083454"><span class="nick" style="color:#80b1d3"><a href="#083454" label="[08:34:54]">&lt;doras&gt;</a></span><span class="message">When built with live-bootstrap's gcc-13.1.0 with SSP disabled, that is.</span></div><div class="line" id="084904"><span class="nick" style="color:#80b1d3"><a href="#084904" label="[08:49:04]">&lt;doras&gt;</a></span><span class="message">Also some executables that get executed by `help2man` when building `coreutils` crash with a segmentation fault:... (full message at &lt;<a rel="nofollow" href="https://libera.ems.host/_matrix/media/v3/download/libera.chat/c1093d1b2081fa92f5c76c7e28d283489e9e304d">https://libera.ems.host/_matrix/media/v3/download/libera.chat/c1093d1b2081fa92f5c76c7e28d283489e9e304d</a>&gt;) </span></div><div class="line" id="085229"><span class="nick" style="color:#80b1d3"><a href="#085229" label="[08:52:29]">&lt;doras&gt;</a></span><span class="message">Here's the build output for that one: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5928/raw/main/coreutils-segmentation-faults.txt">https://gitlab.gnome.org/-/snippets/5928/raw/main/coreutils-segmentation-faults.txt</a> </span></div><div class="line" id="090220"><span class="nick" style="color:#80b1d3"><a href="#090220" label="[09:02:20]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: ended up creating PR without waiting: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/310">https://github.com/fosslinux/live-bootstrap/pull/310</a> </span></div><div class="line" id="095616"><span class="nick" style="color:#234e69"><a href="#095616" label="[09:56:16]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: argh, that is annoying regarding nyacc</span></div><div class="line" id="095646"><span class="nick" style="color:#234e69"><a href="#095646" label="[09:56:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe update the bug with your findings</span></div><div class="line" id="122809"><span class="nick" style="color:#234e69"><a href="#122809" label="[12:28:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe something similar to what mihi did to bootstrap psyntax on guile could work on mes-m2...</span></div><div class="line" id="190001"><span class="nick" style="color:#6c3d55"><a href="#190001" label="[19:00:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: porting that to mes.c might be a serious test of the interpreter</span></div><div class="line" id="201309"><span class="nick" style="color:#234e69"><a href="#201309" label="[20:13:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed... And it's actually mes-m2 not mes</span></div><div class="line" id="202916"><span class="nick" style="color:#80b1d3"><a href="#202916" label="[20:29:16]">&lt;doras&gt;</a></span><span class="message">stikonas: would you say that live-bootstrap supports passing the number of cores to utilize for the bootstrap using the JOBS environment variable, or only through bootstrap.cfg?</span></div><div class="line" id="203007"><span class="nick" style="color:#80b1d3"><a href="#203007" label="[20:30:07]">&lt;doras&gt;</a></span><span class="message">At least for the bwrap/chroot bootstrap modes.</span></div><div class="line" id="203047"><span class="nick" style="color:#80b1d3"><a href="#203047" label="[20:30:47]">&lt;doras&gt;</a></span><span class="message">I'm not sure if environment variables are even passed to child processes at the early stage0-posix stages.</span></div><div class="line" id="203237"><span class="nick" style="color:#80b1d3"><a href="#203237" label="[20:32:37]">&lt;doras&gt;</a></span><span class="message">The issue I have with JOBS being configured in in bootstrap.cfg is that unlike other parameters, it does not (or rather should not, by design) affect the build products of live-bootstrap.</span></div><div class="line" id="203840"><span class="nick" style="color:#234e69"><a href="#203840" label="[20:38:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Dor Askayo: just bootstrap.cfg</span></div><div class="line" id="203900"><span class="nick" style="color:#234e69"><a href="#203900" label="[20:39:00]">&lt;stikonas[m]&gt;</a></span><span class="message">We don't support environment variables until full kaem</span></div><div class="line" id="203912"><span class="nick" style="color:#80b1d3"><a href="#203912" label="[20:39:12]">&lt;doras&gt;</a></span><span class="message">BuildStream has a concept of a &quot;cache key&quot;, which is effectively a hash that takes all build inputs into account and gives the expected build product a unique ID. Same inputs (sources, system, architecture, environment variables, etc.) -&gt; same outputs. This concept is important to be able to share build artifacts through cache servers. For example, if the official project CI (that is authorized to push build artifacts to cache server)</span></div><div class="line" id="203912"><span class="nick" style="color:#80b1d3"><a href="#203912" label="[20:39:12]">&lt;doras&gt;</a></span><span class="message">already built live-bootstrap in the exact configuration as I'm trying to build it locally, a cache servers allows me to download the live-bootstrap artifacts in a matter of a few minutes instead of having to build it myself for hours. This concept is important at scale, when building hundreds of unique components.</span></div><div class="line" id="204005"><span class="nick" style="color:#234e69"><a href="#204005" label="[20:40:05]">&lt;stikonas[m]&gt;</a></span><span class="message">So jobs in bootstrap.cfg break cache?</span></div><div class="line" id="204048"><span class="nick" style="color:#80b1d3"><a href="#204048" label="[20:40:48]">&lt;doras&gt;</a></span><span class="message">The only exception BuildStream offers is the ability to avoid inserting specific environment variables into the cache key, which was essentially made with JOBS-like environment variables in mind.</span></div><div class="line" id="204149"><span class="nick" style="color:#234e69"><a href="#204149" label="[20:41:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, unfortunately JOBS env variable has no way of propagating to child processes in stage0-posix</span></div><div class="line" id="204208"><span class="nick" style="color:#234e69"><a href="#204208" label="[20:42:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Perhaps you shouldn't use jobs other than 1?</span></div><div class="line" id="204214"><span class="nick" style="color:#234e69"><a href="#204214" label="[20:42:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Or some other fixed number</span></div><div class="line" id="204308"><span class="nick" style="color:#80b1d3"><a href="#204308" label="[20:43:08]">&lt;doras&gt;</a></span><span class="message">stikonas: I'm currently setting it to 1, but this means building live-bootstrap takes around 4x-5x times more than what the CI hardware is capable of (12 cores).</span></div><div class="line" id="204405"><span class="nick" style="color:#80b1d3"><a href="#204405" label="[20:44:05]">&lt;doras&gt;</a></span><span class="message">I would very much like to set it dynamically based on the number of cores in the current system, and to tell BuildStream to avoid this environment variable.</span></div><div class="line" id="204436"><span class="nick" style="color:#80b1d3"><a href="#204436" label="[20:44:36]">&lt;doras&gt;</a></span><span class="message">Though I understand that this is problematic.</span></div><div class="line" id="204456"><span class="nick" style="color:#234e69"><a href="#204456" label="[20:44:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, but we can't use env variables early on...</span></div><div class="line" id="204507"><span class="nick" style="color:#234e69"><a href="#204507" label="[20:45:07]">&lt;stikonas[m]&gt;</a></span><span class="message">Can you always use 12?</span></div><div class="line" id="204519"><span class="nick" style="color:#234e69"><a href="#204519" label="[20:45:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Rather than it being dynamic...</span></div><div class="line" id="204546"><span class="nick" style="color:#80b1d3"><a href="#204546" label="[20:45:46]">&lt;doras&gt;</a></span><span class="message">Using 12 means my system would choke when building locally (I only have 4 cores), and I don't  want to compromise on a magic number.</span></div><div class="line" id="204613"><span class="nick" style="color:#80b1d3"><a href="#204613" label="[20:46:13]">&lt;doras&gt;</a></span><span class="message">I'll try to see if there's anything I can do on the BuildStream side to handle this better.</span></div><div class="line" id="210409"><span class="nick" style="color:#389600"><a href="#210409" label="[21:04:09]">&lt;stikonas&gt;</a></span><span class="message">fossy, oriansj: perhaps it's simpler to rewrite that nyacc generator in C?</span></div><div class="line" id="210435"><span class="nick" style="color:#389600"><a href="#210435" label="[21:04:35]">&lt;stikonas&gt;</a></span><span class="message">or does it need a lot of features that we get from scheme?</span></div><div class="line" id="214551"><span class="nick" style="color:#d9d9d9"><a href="#214551" label="[21:45:51]">&lt;mihi&gt;</a></span><span class="message">fossy, do you know if these 1 syntax-case and 5 syntax-rules is all that is needed, or rather only the tip of the iceberg?</span></div><div class="line" id="214630"><span class="nick" style="color:#d9d9d9"><a href="#214630" label="[21:46:30]">&lt;mihi&gt;</a></span><span class="message">and btw I am not sure whether mes might even have a syntax-rules implementation without psyntax, so it would only be 1 syntax-case (or when looking closer, only two clauses of it)...</span></div><div class="line" id="214818"><span class="nick" style="color:#d9d9d9"><a href="#214818" label="[21:48:18]">&lt;mihi&gt;</a></span><span class="message">none of these should be hard to rewrite as define-macro (just tedious), and when trying to bootstrap psyntax.pp, you would definitely need to rewrite more syntax-cases from psyntax.ss to define-macro. (Assuming they are not exactly the same that Guile also uses, in which case you could copy them from my work)</span></div><div class="line" id="215121"><span class="nick" style="color:#d9d9d9"><a href="#215121" label="[21:51:21]">&lt;mihi&gt;</a></span><span class="message">of course, if you think mes will be used for more things in live-bootstrap later, &quot;investing&quot; in bootstrapping its psyntax implementation is probably another factor that may offset what the raw number of lines to port suggest.</span></div><br /></div></body></html>