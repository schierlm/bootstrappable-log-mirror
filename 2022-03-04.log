<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-03-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="032920"><span class="nick" style="color:#8dd3c7"><a href="#032920" label="[03:29:20]">&lt;leah&gt;</a></span><span class="message">&gt;miraheze.org</span></div><div class="line" id="032927"><span class="nick" style="color:#8dd3c7"><a href="#032927" label="[03:29:27]">&lt;leah&gt;</a></span><span class="message">so... yeah. hi!</span></div><div class="line" id="092726"><span class="nick">***</span><span class="message notice">dongcarl7 is now known as dongcarl</span></div><div class="line" id="123859"><span class="nick" style="color:#2e2a4a"><a href="#123859" label="[12:38:59]">&lt;oriansj&gt;</a></span><span class="message">leah: hello</span></div><div class="line" id="155953"><span class="nick">***</span><span class="message notice">nckx_ is now known as nckx</span></div><div class="line" id="155953"><span class="nick">***</span><span class="message notice">dongcarl4 is now known as dongcarl</span></div><div class="line" id="155954"><span class="nick">***</span><span class="message notice">DonRichie2 is now known as DonRichie</span></div><div class="line" id="175803"><span class="nick" style="color:#6b8072"><a href="#175803" label="[17:58:03]">&lt;unmatched-paren&gt;</a></span><span class="message">which is better to write a bootstrapping compiler with: gcc, llvm, or manually?</span></div><div class="line" id="175811"><span class="nick" style="color:#6b8072"><a href="#175811" label="[17:58:11]">&lt;unmatched-paren&gt;</a></span><span class="message">or emitting C?</span></div><div class="line" id="175900"><span class="nick" style="color:#6b8072"><a href="#175900" label="[17:59:00]">&lt;unmatched-paren&gt;</a></span><span class="message">I was considering qbe but it only supports 2 of the 6 architectures that I consider worth supporting</span></div><div class="line" id="175938"><span class="nick" style="color:#6b8072"><a href="#175938" label="[17:59:38]">&lt;unmatched-paren&gt;</a></span><span class="message">i'd like to make it work for x64, x32, ARM32, ARM64, powerpc64le, and riscv64</span></div><div class="line" id="180150"><span class="nick" style="color:#6b8072"><a href="#180150" label="[18:01:50]">&lt;unmatched-paren&gt;</a></span><span class="message">obviously C and GCC would be the most portable options, but llvm would work too, since it supports all 6 and i don't think any others are worth investing time into tbh</span></div><div class="line" id="180341"><span class="nick" style="color:#6b8072"><a href="#180341" label="[18:03:41]">&lt;unmatched-paren&gt;</a></span><span class="message">I was also considering emitting D, because it has some OOP features that need to be in the compiler for it to compile FreePascal, but that's doable with C too and because D is much higher level i might run into problems?</span></div><div class="line" id="180407"><span class="nick" style="color:#6b8072"><a href="#180407" label="[18:04:07]">&lt;unmatched-paren&gt;</a></span><span class="message">(D would be just as portable as C thanks to GDC)</span></div><div class="line" id="192323"><span class="nick" style="color:#80b1d3"><a href="#192323" label="[19:23:23]">&lt;Noisytoot&gt;</a></span><span class="message">unmatched-paren: What is ARM32? ARMv6, ARMv7, or something else?</span></div><div class="line" id="192425"><span class="nick" style="color:#6b8072"><a href="#192425" label="[19:24:25]">&lt;unmatched-paren&gt;</a></span><span class="message">as you can see, i am not particularly familliar with arm :) i'm not sure which 32-bit ARMs i'd want to bother with</span></div><div class="line" id="192631"><span class="nick" style="color:#6b8072"><a href="#192631" label="[19:26:31]">&lt;unmatched-paren&gt;</a></span><span class="message">since i know there are some raspberry pis that use 32-bit arm</span></div><div class="line" id="192800"><span class="nick" style="color:#80b1d3"><a href="#192800" label="[19:28:00]">&lt;Noisytoot&gt;</a></span><span class="message">They're ARMv7, except for the Raspberry Pi 1 and zero, which are ARMv6</span></div><div class="line" id="192933"><span class="nick" style="color:#6b8072"><a href="#192933" label="[19:29:33]">&lt;unmatched-paren&gt;</a></span><span class="message">okay, i think i'll support both of them then</span></div><div class="line" id="193030"><span class="nick" style="color:#6b8072"><a href="#193030" label="[19:30:30]">&lt;unmatched-paren&gt;</a></span><span class="message">i think(!) pi 0 and 1 are v6, pi 2 is v7, and pi 3/pi 4 are aarch64/ARM64, right?</span></div><div class="line" id="193612"><span class="nick" style="color:#80b1d3"><a href="#193612" label="[19:36:12]">&lt;Noisytoot&gt;</a></span><span class="message">Yes.</span></div><div class="line" id="200652"><span class="nick" style="color:#6b8072"><a href="#200652" label="[20:06:52]">&lt;unmatched-paren&gt;</a></span><span class="message">both the llvm-d and gccjit-d bindings appear to be unmaintained, so i guess i'll either compile to C or D</span></div><div class="line" id="201811"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="202133"><span class="nick" style="color:#2e2a4a"><a href="#202133" label="[20:21:33]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: the best bootstrapping backend for writing a bootstrapping compiler is what tool seems like the most fun to work with for *YOU*</span></div><div class="line" id="202204"><span class="nick" style="color:#2e2a4a"><a href="#202204" label="[20:22:04]">&lt;oriansj&gt;</a></span><span class="message">and remember you don't have to support all architectures either</span></div><div class="line" id="202218"><span class="nick" style="color:#2e2a4a"><a href="#202218" label="[20:22:18]">&lt;oriansj&gt;</a></span><span class="message">just the ones that you want to support</span></div><div class="line" id="202451"><span class="nick" style="color:#2e2a4a"><a href="#202451" label="[20:24:51]">&lt;oriansj&gt;</a></span><span class="message">because we have gcc bootstrapped, we can bootstrap qemu; so the what architectures you support just becomes a question of will we be running natively or just emulating that architecture. (honestly since SIMH is bootstrappable from GCC; you could target even weird architectures and it will be fine)</span></div><div class="line" id="202631"><span class="nick" style="color:#6b8072"><a href="#202631" label="[20:26:31]">&lt;unmatched-paren&gt;</a></span><span class="message">that's a fair point about qemu</span></div><div class="line" id="202659"><span class="nick" style="color:#6b8072"><a href="#202659" label="[20:26:59]">&lt;unmatched-paren&gt;</a></span><span class="message">alright, i'll look into qbe</span></div><div class="line" id="202731"><span class="nick" style="color:#6b8072"><a href="#202731" label="[20:27:31]">&lt;unmatched-paren&gt;</a></span><span class="message">(supports x86_64 and aarch64)</span></div><div class="line" id="202803"><span class="nick" style="color:#2e2a4a"><a href="#202803" label="[20:28:03]">&lt;oriansj&gt;</a></span><span class="message">and since we have bootstrapped guile (and with someone putting in a little effort) so guix isn't much of a step and then we have a boatload of options to pull from</span></div><div class="line" id="202830"><span class="nick" style="color:#2e2a4a"><a href="#202830" label="[20:28:30]">&lt;oriansj&gt;</a></span><span class="message">just make sure to have lots of fun unmatched-paren</span></div><div class="line" id="202909"><span class="nick" style="color:#6b8072"><a href="#202909" label="[20:29:09]">&lt;unmatched-paren&gt;</a></span><span class="message">actually, no, only x86_64 is supported :P</span></div><div class="line" id="202924"><span class="nick" style="color:#6b8072"><a href="#202924" label="[20:29:24]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: thanks for the encouragement :)</span></div><div class="line" id="203055"><span class="nick" style="color:#6b8072"><a href="#203055" label="[20:30:55]">&lt;unmatched-paren&gt;</a></span><span class="message">i guess i'll be writing d bindings to it then :)</span></div><div class="line" id="203108"><span class="nick" style="color:#2e2a4a"><a href="#203108" label="[20:31:08]">&lt;oriansj&gt;</a></span><span class="message">and remember to share your progress, so we can cheer you along the way</span></div><div class="line" id="203217"><span class="nick" style="color:#6b8072"><a href="#203217" label="[20:32:17]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll use this c compiler as a reference <a rel="nofollow" href="https://sr.ht/~mcf/cproc/">https://sr.ht/~mcf/cproc/</a> </span></div><div class="line" id="204931"><span class="nick" style="color:#6b8072"><a href="#204931" label="[20:49:31]">&lt;unmatched-paren&gt;</a></span><span class="message">i have finally managed to hack together a barely functioning d makefile :)</span></div><div class="line" id="205630"><span class="nick" style="color:#6b8072"><a href="#205630" label="[20:56:30]">&lt;unmatched-paren&gt;</a></span><span class="message">makefiles are terrible, is scons good?</span></div><div class="line" id="210438"><span class="nick" style="color:#6d2462"><a href="#210438" label="[21:04:38]">&lt;nimaje&gt;</a></span><span class="message">meson seems ok</span></div><div class="line" id="210556"><span class="nick" style="color:#6b8072"><a href="#210556" label="[21:05:56]">&lt;unmatched-paren&gt;</a></span><span class="message">meson has some support for D, but i'm not sure how much</span></div><div class="line" id="210619"><span class="nick" style="color:#6b8072"><a href="#210619" label="[21:06:19]">&lt;unmatched-paren&gt;</a></span><span class="message">(i'd also like the amount of control make gives you, which meson does not)</span></div><div class="line" id="210719"><span class="nick" style="color:#6b8072"><a href="#210719" label="[21:07:19]">&lt;unmatched-paren&gt;</a></span><span class="message">could i perhaps manually write ninja files and run them with either ninja or samurai?</span></div><div class="line" id="210747"><span class="nick" style="color:#6b8072"><a href="#210747" label="[21:07:47]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;In contrast to Make, Ninja lacks features such as string manipulation, as Ninja build files are not meant to be written by hand&quot; ah</span></div><div class="line" id="210800"><span class="nick" style="color:#2e2a4a"><a href="#210800" label="[21:08:00]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: honestly any build tool is fine; just use the one you like the most</span></div><div class="line" id="210908"><span class="nick" style="color:#6b8072"><a href="#210908" label="[21:09:08]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm using make, because i want the amount of control that it gives, but it's yet another instance of Bell Labs apparently being completely unable to design remotely readable syntax</span></div><div class="line" id="210916"><span class="nick" style="color:#2e2a4a"><a href="#210916" label="[21:09:16]">&lt;oriansj&gt;</a></span><span class="message">I'm partial to kaem scripts but my build needs are simple</span></div><div class="line" id="210918"><span class="nick" style="color:#6b8072"><a href="#210918" label="[21:09:18]">&lt;unmatched-paren&gt;</a></span><span class="message">(see also: the bourne shell)</span></div><div class="line" id="210938"><span class="nick" style="color:#6b8072"><a href="#210938" label="[21:09:38]">&lt;unmatched-paren&gt;</a></span><span class="message">also c, to a much lesser extent</span></div><div class="line" id="211016"><span class="nick" style="color:#6b8072"><a href="#211016" label="[21:10:16]">&lt;unmatched-paren&gt;</a></span><span class="message">kaem's the build system that stage0 uses, right? how suitable would it be for compiling a C project?</span></div><div class="line" id="211023"><span class="nick" style="color:#6b8072"><a href="#211023" label="[21:10:23]">&lt;unmatched-paren&gt;</a></span><span class="message">(D compilation is very similar to C)</span></div><div class="line" id="211050"><span class="nick" style="color:#2e2a4a"><a href="#211050" label="[21:10:50]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: it is inefficient but you can't get it wrong</span></div><div class="line" id="211330"><span class="nick" style="color:#6d2462"><a href="#211330" label="[21:13:30]">&lt;nimaje&gt;</a></span><span class="message">are kaem scripts more than a list of commands?</span></div><div class="line" id="211346"><span class="nick" style="color:#2e2a4a"><a href="#211346" label="[21:13:46]">&lt;oriansj&gt;</a></span><span class="message">nimaje: nope</span></div><div class="line" id="211950"><span class="nick" style="color:#2e2a4a"><a href="#211950" label="[21:19:50]">&lt;oriansj&gt;</a></span><span class="message">but if you plan on creating a boatload of tests; I do suggest something better for that.</span></div><div class="line" id="212432"><span class="nick" style="color:#2e2a4a"><a href="#212432" label="[21:24:32]">&lt;oriansj&gt;</a></span><span class="message">but if your build is more complex than $preprocessor $source1 $source2 ... $sourceN -o $output.c; $compiler $generated1.c $generated2.c ... $generatedN.c -o $output.S; $assembler $generated1.S $generated2.S ... $generatedN.S -o $output.o; $linker $generated1.o $generated2.o ... $generatedN.o -o final-binary; you need to rethink what you are making</span></div><div class="line" id="212500"><span class="nick" style="color:#6b8072"><a href="#212500" label="[21:25:00]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah, the D build system is (slightly) more complex than that</span></div><div class="line" id="212522"><span class="nick" style="color:#6b8072"><a href="#212522" label="[21:25:22]">&lt;unmatched-paren&gt;</a></span><span class="message">(BTW, i'm not actually doing the pascal compiler here, i'm first writing a parsing library)</span></div><div class="line" id="212630"><span class="nick" style="color:#6b8072"><a href="#212630" label="[21:26:30]">&lt;unmatched-paren&gt;</a></span><span class="message">so i have `all` (dynamic lib), `static` (static lib), `test` (runs all integration tests), `install` (installs, obviously), and `clean` (rm -rf out/), and i soon will probably have `docs` to run DDoc</span></div><div class="line" id="212642"><span class="nick" style="color:#6b8072"><a href="#212642" label="[21:26:42]">&lt;unmatched-paren&gt;</a></span><span class="message">i think i'll look into SCons</span></div><div class="line" id="212716"><span class="nick" style="color:#6b8072"><a href="#212716" label="[21:27:16]">&lt;unmatched-paren&gt;</a></span><span class="message">i wish there was a generic build system implemented as a $(SOME_LISP) library, but apparently there isn't</span></div><div class="line" id="212730"><span class="nick" style="color:#6b8072"><a href="#212730" label="[21:27:30]">&lt;unmatched-paren&gt;</a></span><span class="message">i could make one, but that requires wor</span></div><div class="line" id="212731"><span class="nick" style="color:#6b8072"><a href="#212731" label="[21:27:31]">&lt;unmatched-paren&gt;</a></span><span class="message">k</span></div><div class="line" id="212933"><span class="nick" style="color:#6b8072"><a href="#212933" label="[21:29:33]">&lt;unmatched-paren&gt;</a></span><span class="message">The de-facto build system for d is dub, but it's also a package manager and i'm not keen on having any package manager other than the system one installed on my system (especially since pretty much all lang-specific package repositories are unmoderated)</span></div><div class="line" id="213018"><span class="nick" style="color:#6b8072"><a href="#213018" label="[21:30:18]">&lt;unmatched-paren&gt;</a></span><span class="message">hm, actually, meson's d support seems pretty good</span></div><div class="line" id="213036"><span class="nick" style="color:#6b8072"><a href="#213036" label="[21:30:36]">&lt;unmatched-paren&gt;</a></span><span class="message">but i'd still like the low-level control...</span></div><div class="line" id="221513"><span class="nick" style="color:#234e69"><a href="#221513" label="[22:15:13]">&lt;fossy&gt;</a></span><span class="message">well, kaem does have variables, etc, but it is by no means a full shell</span></div><div class="line" id="221550"><span class="nick" style="color:#234e69"><a href="#221550" label="[22:15:50]">&lt;fossy&gt;</a></span><span class="message">there are no constructs that allow you to jump back</span></div><div class="line" id="221609"><span class="nick" style="color:#234e69"><a href="#221609" label="[22:16:09]">&lt;fossy&gt;</a></span><span class="message">i would not recommend it for anything more than the most simple of C packages</span></div><div class="line" id="221636"><span class="nick" style="color:#234e69"><a href="#221636" label="[22:16:36]">&lt;fossy&gt;</a></span><span class="message">i would recommend for a general C project meson/ninja</span></div><div class="line" id="221934"><span class="nick" style="color:#6b8072"><a href="#221934" label="[22:19:34]">&lt;unmatched-paren&gt;</a></span><span class="message">this is a D project, which is slightly more complex due to the unit testing framework and doc generator</span></div><div class="line" id="222754"><span class="nick" style="color:#234e69"><a href="#222754" label="[22:27:54]">&lt;fossy&gt;</a></span><span class="message">ah, yes, i would use something suited toward d</span></div><div class="line" id="223712"><span class="nick" style="color:#6b8072"><a href="#223712" label="[22:37:12]">&lt;unmatched-paren&gt;</a></span><span class="message">dub is The Standard, but i don't like it because it's basically like cargo but for d and tries to completely replace system packages like every single 'modern' build system</span></div><div class="line" id="223747"><span class="nick" style="color:#6b8072"><a href="#223747" label="[22:37:47]">&lt;unmatched-paren&gt;</a></span><span class="message">d is pretty easy to compile manually though</span></div><div class="line" id="223923"><span class="nick" style="color:#6b8072"><a href="#223923" label="[22:39:23]">&lt;unmatched-paren&gt;</a></span><span class="message">${DMD:-ldmd2} -release -c FILE -o OBJECT; ${DMD:-ldmd2} -release FILES... -o EXECUTABLE</span></div><div class="line" id="223950"><span class="nick" style="color:#6b8072"><a href="#223950" label="[22:39:50]">&lt;unmatched-paren&gt;</a></span><span class="message">the hardest part is the `unittest` blocks</span></div><div class="line" id="224015"><span class="nick" style="color:#6b8072"><a href="#224015" label="[22:40:15]">&lt;unmatched-paren&gt;</a></span><span class="message">i couldn't figure out how to use them, so i'm just doing integration tests instead</span></div><div class="line" id="224045"><span class="nick" style="color:#6b8072"><a href="#224045" label="[22:40:45]">&lt;unmatched-paren&gt;</a></span><span class="message">DDoc seems pretty easy to use though</span></div><div class="line" id="224159"><span class="nick" style="color:#6b8072"><a href="#224159" label="[22:41:59]">&lt;unmatched-paren&gt;</a></span><span class="message">there's also the .di files (d interfaces) which are basically just like C headers but autogenerated; you need to install them under ${DESTDIR}/include/d/${PACKAGE_NAME}-${MAJOR_VERSION}</span></div><div class="line" id="224833"><span class="nick" style="color:#6c3d55"><a href="#224833" label="[22:48:33]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: basically kaem has variables, conditionals and aliases</span></div><br /></div></body></html>