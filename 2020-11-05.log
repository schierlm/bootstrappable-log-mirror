<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="030849"><span class="nick" style="color:#8dd3c7"><a href="#030849" label="[03:08:49]">&lt;OriansJ&gt;</a></span><span class="message">emorrp1: well we have bootstrapped a FORTH, a Bash compatible shell, a Cross platform C compiler and a minimal scheme (without complex macros) from that 250byte seed; how many more languages do you need us to bootstrap? And how will they actually help us reach our goals? (Other languages previously mentioned to us include Ada, Oberon, Javascript and smalltalk with no one willing do work on them.)</span></div><div class="line" id="031241"><span class="nick" style="color:#8dd3c7"><a href="#031241" label="[03:12:41]">&lt;OriansJ&gt;</a></span><span class="message">Remember at the end of the day if someone is willing to do the work required; every language will be accepted here but we will reject claims that anything is magically the perfect only way to do bootstrapping.</span></div><div class="line" id="031621"><span class="nick" style="color:#2e2a4a"><a href="#031621" label="[03:16:21]">&lt;roptat&gt;</a></span><span class="message">emorrp1, for Kotlin, I think it's possible to bootstrap a very old version of it, but it has some difficult dependencies (even more difficult to package because they're old)</span></div><div class="line" id="031705"><span class="nick" style="color:#2e2a4a"><a href="#031705" label="[03:17:05]">&lt;roptat&gt;</a></span><span class="message">but I have no idea whether this version is going to be able to build anything newer than itself</span></div><div class="line" id="031844"><span class="nick" style="color:#2e2a4a"><a href="#031844" label="[03:18:44]">&lt;roptat&gt;</a></span><span class="message">I think the real difficulty I have is that there's a 3GB repository that's a dependency of that old kotlin, but they depend on an unspecified version of it... (or maybe a fork? no idea...), so right now my kotlin package fails with 3 errors</span></div><div class="line" id="031922"><span class="nick" style="color:#6b8072"><a href="#031922" label="[03:19:22]">&lt;ericonr&gt;</a></span><span class="message">OriansJ: wouldn't a JavaScript bootstrap basically consist of a C++ toolchain?</span></div><div class="line" id="031939"><span class="nick" style="color:#2e2a4a"><a href="#031939" label="[03:19:39]">&lt;roptat&gt;</a></span><span class="message">anyway, time to go to bed for me :)</span></div><div class="line" id="032154"><span class="nick" style="color:#8dd3c7"><a href="#032154" label="[03:21:54]">&lt;OriansJ&gt;</a></span><span class="message">ericonr: well someone found a way to bootstrap JavaScript from C (but only a newer version of GCC 7+ if I remember correctly)</span></div><div class="line" id="032231"><span class="nick" style="color:#8dd3c7"><a href="#032231" label="[03:22:31]">&lt;OriansJ&gt;</a></span><span class="message">So it isn't exactly a viable route for bootstrapping of GCC.</span></div><div class="line" id="034223"><span class="nick" style="color:#80b1d3"><a href="#034223" label="[03:42:23]">&lt;vagrantc&gt;</a></span><span class="message">finally tracked down the exact patch i needed to fix mescc-tools on debian: e633669dfdf16f503a7d740b9058e343536533b4 Fix ELF headers to be more well behaved</span></div><div class="line" id="034425"><span class="nick" style="color:#80b1d3"><a href="#034425" label="[03:44:25]">&lt;vagrantc&gt;</a></span><span class="message">and 37f3ce4278770f42da06d9dddab9d0f8148998e2 Inherrit CFLAGS in kaem makefile, although I already effectively had that in debian/patches</span></div><div class="line" id="034704"><span class="nick" style="color:#8dd3c7"><a href="#034704" label="[03:47:04]">&lt;OriansJ&gt;</a></span><span class="message">well yeah, the kaem regression was a major change (just so that I could get mescc-tools-seed working quickly after being off for months)</span></div><div class="line" id="035518"><span class="nick" style="color:#80b1d3"><a href="#035518" label="[03:55:18]">&lt;vagrantc&gt;</a></span><span class="message">i still don't understand what exactly changed in debian's toolchain that triggered the build failures; it was working perfectly fine with the exact same source code not too long ago</span></div><div class="line" id="035654"><span class="nick" style="color:#80b1d3"><a href="#035654" label="[03:56:54]">&lt;vagrantc&gt;</a></span><span class="message">then again... these things happen with updating toolchains :)</span></div><div class="line" id="040134"><span class="nick" style="color:#6d2462"><a href="#040134" label="[04:01:34]">&lt;xentrac&gt;</a></span><span class="message">which is one reason this project is important!</span></div><div class="line" id="040154"><span class="nick" style="color:#234e69"><a href="#040154" label="[04:01:54]">*</a></span><span class="message">vagrantc claps :)</span></div><div class="line" id="040243"><span class="nick" style="color:#80b1d3"><a href="#040243" label="[04:02:43]">&lt;vagrantc&gt;</a></span><span class="message">speaking of updating toolchains ... the changes fixing building mes with gcc-10 appear to not generate the very-well-verified hashes of mes-mescc</span></div><div class="line" id="040300"><span class="nick" style="color:#80b1d3"><a href="#040300" label="[04:03:00]">&lt;vagrantc&gt;</a></span><span class="message">but i think janneke said that would be expected</span></div><div class="line" id="040358"><span class="nick" style="color:#80b1d3"><a href="#040358" label="[04:03:58]">&lt;vagrantc&gt;</a></span><span class="message">i should probably also pull in 0d25095a2518ca463c58864d8b36d591961784f5 ensure get-machine is available for all tests</span></div><div class="line" id="040410"><span class="nick" style="color:#80b1d3"><a href="#040410" label="[04:04:10]">&lt;vagrantc&gt;</a></span><span class="message">i think machines with many processors might trigger that issue</span></div><div class="line" id="041128"><span class="nick" style="color:#6c3d55"><a href="#041128" label="[04:11:28]">&lt;fossy&gt;</a></span><span class="message">OriansJ: link for js bootstraps?</span></div><div class="line" id="042044"><span class="nick" style="color:#d9d9d9"><a href="#042044" label="[04:20:44]">&lt;siraben&gt;</a></span><span class="message">OriansJ: the test suite you have in mes-m2, if they all pass then bootstrapping to Guile would work?</span></div><div class="line" id="042114"><span class="nick" style="color:#d9d9d9"><a href="#042114" label="[04:21:14]">&lt;siraben&gt;</a></span><span class="message">I'm wondering what requirements are needed to bootstrap Guile, i.e. R5RS + extras?</span></div><div class="line" id="121147"><span class="nick" style="color:#8dd3c7"><a href="#121147" label="[12:11:47]">&lt;OriansJ&gt;</a></span><span class="message">fossy: this is the one previously discussed about javascript I believe: <a rel="nofollow" href="https://bellard.org/quickjs/">https://bellard.org/quickjs/</a> </span></div><div class="line" id="121241"><span class="nick" style="color:#8dd3c7"><a href="#121241" label="[12:12:41]">&lt;OriansJ&gt;</a></span><span class="message">siraben: if all the tests pass, then mes-m2 will be able to run MesCC and we can bootstrap GCC from our 250byte bootstrap binary</span></div><div class="line" id="121332"><span class="nick" style="color:#d9d9d9"><a href="#121332" label="[12:13:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Amazing. Which tests are failing at the moment?</span></div><div class="line" id="121929"><span class="nick" style="color:#8dd3c7"><a href="#121929" label="[12:19:29]">&lt;OriansJ&gt;</a></span><span class="message">siraben: the commented out ones</span></div><div class="line" id="122050"><span class="nick" style="color:#8dd3c7"><a href="#122050" label="[12:20:50]">&lt;OriansJ&gt;</a></span><span class="message">as the last test (the biggest number) is the running of MesCC to compile a C program.</span></div><div class="line" id="124720"><span class="nick" style="color:#8dd3c7"><a href="#124720" label="[12:47:20]">&lt;OriansJ&gt;</a></span><span class="message">and if you notice the README.md; packaged with mes-m2 is a known good working version of MesCC and once we are done we can simply replace guile in the example command with mes-m2 and be compiling</span></div><div class="line" id="160248"><span class="nick" style="color:#d9d9d9"><a href="#160248" label="[16:02:48]">&lt;siraben&gt;</a></span><span class="message">I see.</span></div><div class="line" id="183453"><span class="nick" style="color:#8dd3c7"><a href="#183453" label="[18:34:53]">&lt;OriansJ&gt;</a></span><span class="message">all pieces try to converge on common standards (if possible) and operate in a drop-in replacement fashion. Thus allowing multiple independent implementations to share as much work as possible; while reducing the cognative load for understanding what each piece does and how they all fit together.</span></div><div class="line" id="183807"><span class="nick" style="color:#8dd3c7"><a href="#183807" label="[18:38:07]">&lt;OriansJ&gt;</a></span><span class="message">M1 and hex2 are the only specialized languages in the entire bootstrap; everything else is just a subset of a common standard like C, scheme, or bourne/bash shell</span></div><div class="line" id="192559"><span class="nick">***</span><span class="message notice">LHLaurini2 is now known as LHLaurini</span></div><div class="line" id="203905"><span class="nick" style="color:#6c3d55"><a href="#203905" label="[20:39:05]">&lt;fossy&gt;</a></span><span class="message">I am thankful for Mr. Bellard</span></div><div class="line" id="203927"><span class="nick" style="color:#6c3d55"><a href="#203927" label="[20:39:27]">&lt;fossy&gt;</a></span><span class="message">He has made some useful code for us over the years, particularly for intermediate stuff</span></div><div class="line" id="222306"><span class="nick" style="color:#80b1d3"><a href="#222306" label="[22:23:06]">&lt;vagrantc&gt;</a></span><span class="message">once i get mescc-tools building on Debian GNU/kFreeBSD ... i'll start working on mes ... and then see if we can't produce a bit-by-bit identical mes-mescc :)</span></div><div class="line" id="222340"><span class="nick" style="color:#234e69"><a href="#222340" label="[22:23:40]">*</a></span><span class="message">vagrantc holds breath</span></div><div class="line" id="222707"><span class="nick" style="color:#80b1d3"><a href="#222707" label="[22:27:07]">&lt;vagrantc&gt;</a></span><span class="message">arg. apparently my fix for mescc-tools building on amd64, triggered an issue on i386: <a rel="nofollow" href="https://buildd.debian.org/status/package.php?p=mescc-tools">https://buildd.debian.org/status/package.php?p=mescc-tools</a> </span></div><div class="line" id="222813"><span class="nick" style="color:#80b1d3"><a href="#222813" label="[22:28:13]">&lt;vagrantc&gt;</a></span><span class="message">but not my local i386 builds ...</span></div><div class="line" id="222815"><span class="nick" style="color:#80b1d3"><a href="#222815" label="[22:28:15]">&lt;vagrantc&gt;</a></span><span class="message">gah.</span></div><div class="line" id="223522"><span class="nick" style="color:#bc80bd"><a href="#223522" label="[22:35:22]">&lt;nimaje&gt;</a></span><span class="message">(didn't they drop Debian GNU/kFreeBSD? maybe I remember that wrong)</span></div><div class="line" id="223724"><span class="nick" style="color:#80b1d3"><a href="#223724" label="[22:37:24]">&lt;vagrantc&gt;</a></span><span class="message">it was never officially released, it's been moved into debian-ports, where all the new or ancient ports live</span></div><div class="line" id="223745"><span class="nick" style="color:#80b1d3"><a href="#223745" label="[22:37:45]">&lt;vagrantc&gt;</a></span><span class="message">provides some interesting porting challenges</span></div><div class="line" id="223817"><span class="nick" style="color:#80b1d3"><a href="#223817" label="[22:38:17]">&lt;vagrantc&gt;</a></span><span class="message">notably, need to teach get_machine to ... do the right thing... whatever that is</span></div><div class="line" id="230620"><span class="nick" style="color:#80b1d3"><a href="#230620" label="[23:06:20]">&lt;vagrantc&gt;</a></span><span class="message">ok, hacked my way around the issue with mescc-tools on debian kfreebsd ... but of course, mes doesn't support the platform at all :)</span></div><div class="line" id="230725"><span class="nick" style="color:#80b1d3"><a href="#230725" label="[23:07:25]">&lt;vagrantc&gt;</a></span><span class="message">why did i think i could have any chance of getting this to work when i couldn't even figure how to to cross-compile i386 mes on amd64?</span></div><div class="line" id="230728"><span class="nick" style="color:#80b1d3"><a href="#230728" label="[23:07:28]">&lt;vagrantc&gt;</a></span><span class="message">:)</span></div><div class="line" id="230942"><span class="nick" style="color:#80b1d3"><a href="#230942" label="[23:09:42]">&lt;vagrantc&gt;</a></span><span class="message">my hack to get mescc-tools to build was to output kfreebsd-amd64 instead of amd64, which probably caused it to skip most/all the tests</span></div><div class="line" id="231202"><span class="nick" style="color:#bc80bd"><a href="#231202" label="[23:12:02]">&lt;nimaje&gt;</a></span><span class="message">well, if you load the linux emu the tests should run, not sure if Debian GNU/kFreeBSD has the linux emu</span></div><div class="line" id="231936"><span class="nick" style="color:#80b1d3"><a href="#231936" label="[23:19:36]">&lt;vagrantc&gt;</a></span><span class="message">i think it's possible to enable it, but no way to ensure it's enabled</span></div><div class="line" id="232019"><span class="nick" style="color:#80b1d3"><a href="#232019" label="[23:20:19]">&lt;vagrantc&gt;</a></span><span class="message">it did actually run some tests ... and apparently some failed, but it seemed to not actually fail the build :/</span></div><div class="line" id="232059"><span class="nick" style="color:#80b1d3"><a href="#232059" label="[23:20:59]">&lt;vagrantc&gt;</a></span><span class="message">the conception of architecture names is hard to get portably</span></div><div class="line" id="232143"><span class="nick" style="color:#80b1d3"><a href="#232143" label="[23:21:43]">&lt;vagrantc&gt;</a></span><span class="message">of course, my whole idea here was to propose building on an unusual environment to increase diversity for DDC (diverse double compiling)</span></div><div class="line" id="232159"><span class="nick" style="color:#80b1d3"><a href="#232159" label="[23:21:59]">&lt;vagrantc&gt;</a></span><span class="message">but... probably an excercise for another day.</span></div><br /></div></body></html>