<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000153"><span class="nick" style="color:#389600"><a href="#000153" label="[00:01:53]">&lt;OriansJ&gt;</a></span><span class="message">janneke: why is mescc-tools-static-0.5.2-0.bb062b0-i686-linux.tar.xz 275KB when if one goes into mescc-tools-seed; tar cavf foo.tar bin/blood-elf bin/get_machine bin/hex2 bin/kaem bin/M1 the result is only 127KB and when xz'd it is only 16,924 Bytes?</span></div><div class="line" id="000420"><span class="nick" style="color:#389600"><a href="#000420" label="[00:04:20]">&lt;OriansJ&gt;</a></span><span class="message">and in fun news mes-m2 when xz'd is only 25,684bytes</span></div><div class="line" id="041650"><span class="nick" style="color:#2e2a4a"><a href="#041650" label="[04:16:50]">&lt;fossy&gt;</a></span><span class="message">hm, does mes libc provide getopt?</span></div><div class="line" id="042843"><span class="nick" style="color:#2e2a4a"><a href="#042843" label="[04:28:43]">&lt;fossy&gt;</a></span><span class="message">oooh</span></div><div class="line" id="042847"><span class="nick" style="color:#2e2a4a"><a href="#042847" label="[04:28:47]">&lt;fossy&gt;</a></span><span class="message">its not built by default</span></div><div class="line" id="050453"><span class="nick" style="color:#2e2a4a"><a href="#050453" label="[05:04:53]">&lt;fossy&gt;</a></span><span class="message">ugh</span></div><div class="line" id="050501"><span class="nick" style="color:#2e2a4a"><a href="#050501" label="[05:05:01]">&lt;fossy&gt;</a></span><span class="message">can i please have some help?</span></div><div class="line" id="050520"><span class="nick" style="color:#2e2a4a"><a href="#050520" label="[05:05:20]">&lt;fossy&gt;</a></span><span class="message">I keep getting 'tcc: error: undefined symbol 'getopt'' trying to build bash 2.05b</span></div><div class="line" id="050537"><span class="nick" style="color:#2e2a4a"><a href="#050537" label="[05:05:37]">&lt;fossy&gt;</a></span><span class="message">I manually did <a rel="nofollow" href="https://gitlab.com/janneke/guix/-/blob/wip-bootstrap3/gnu/packages/commencement.scm#L754">https://gitlab.com/janneke/guix/-/blob/wip-bootstrap3/gnu/packages/commencement.scm#L754</a> </span></div><div class="line" id="050541"><span class="nick" style="color:#2e2a4a"><a href="#050541" label="[05:05:41]">&lt;fossy&gt;</a></span><span class="message">but i am still getting the error</span></div><div class="line" id="051140"><span class="nick" style="color:#2e2a4a"><a href="#051140" label="[05:11:40]">&lt;fossy&gt;</a></span><span class="message">Also is it possible to run guix bootstrap from a non guix system?</span></div><div class="line" id="065914"><span class="nick" style="color:#2e2a4a"><a href="#065914" label="[06:59:14]">&lt;fossy&gt;</a></span><span class="message">welp</span></div><div class="line" id="065922"><span class="nick" style="color:#2e2a4a"><a href="#065922" label="[06:59:22]">&lt;fossy&gt;</a></span><span class="message">just compiled getopt.c in with it</span></div><div class="line" id="065934"><span class="nick" style="color:#2e2a4a"><a href="#065934" label="[06:59:34]">&lt;fossy&gt;</a></span><span class="message">not the best but it works</span></div><div class="line" id="094542"><span class="nick" style="color:#6b8072"><a href="#094542" label="[09:45:42]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yeah, that's BIG -- weird?!</span></div><div class="line" id="094627"><span class="nick" style="color:#6b8072"><a href="#094627" label="[09:46:27]">&lt;janneke&gt;</a></span><span class="message">that's something to look into; the build recipe is here <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/make-bootstrap.scm#n606">http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/make-bootstrap.scm#n606</a> </span></div><div class="line" id="094651"><span class="nick" style="color:#6b8072"><a href="#094651" label="[09:46:51]">&lt;janneke&gt;</a></span><span class="message">fossy: yes, we need getopt for ... i should have documented that</span></div><div class="line" id="094703"><span class="nick" style="color:#6b8072"><a href="#094703" label="[09:47:03]">&lt;janneke&gt;</a></span><span class="message">fossy: why do we need getopt?</span></div><div class="line" id="094743"><span class="nick" style="color:#6b8072"><a href="#094743" label="[09:47:43]">&lt;janneke&gt;</a></span><span class="message">ah, we need it for bash</span></div><div class="line" id="095302"><span class="nick" style="color:#6b8072"><a href="#095302" label="[09:53:02]">&lt;janneke&gt;</a></span><span class="message">fossy: i'm sure you have seen that the tcc bootstrap.sh script builds libgetopt.a, from mes?</span></div><div class="line" id="095304"><span class="nick" style="color:#6b8072"><a href="#095304" label="[09:53:04]">&lt;janneke&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/janneke/tinycc/-/blob/mes-0.21/bootstrap.sh">https://gitlab.com/janneke/tinycc/-/blob/mes-0.21/bootstrap.sh</a> </span></div><div class="line" id="095338"><span class="nick" style="color:#6b8072"><a href="#095338" label="[09:53:38]">&lt;janneke&gt;</a></span><span class="message">the modification you to the bash makefile '-lgetopt' should pick that up</span></div><div class="line" id="095405"><span class="nick" style="color:#6b8072"><a href="#095405" label="[09:54:05]">&lt;janneke&gt;</a></span><span class="message">glad you made it work anyway</span></div><div class="line" id="095436"><span class="nick" style="color:#6b8072"><a href="#095436" label="[09:54:36]">&lt;janneke&gt;</a></span><span class="message">it's often easier to improve your understanding by looking at a on a working recipe</span></div><div class="line" id="095454"><span class="nick" style="color:#6b8072"><a href="#095454" label="[09:54:54]">&lt;janneke&gt;</a></span><span class="message">and then change it if you like</span></div><div class="line" id="095529"><span class="nick" style="color:#6b8072"><a href="#095529" label="[09:55:29]">&lt;janneke&gt;</a></span><span class="message">fossy: yes, of course you can build the guix bootstrap binaries from a foreign distro</span></div><div class="line" id="095606"><span class="nick" style="color:#6b8072"><a href="#095606" label="[09:56:06]">&lt;janneke&gt;</a></span><span class="message">the guix build system is a closure and builds in containers</span></div><div class="line" id="095652"><span class="nick" style="color:#6b8072"><a href="#095652" label="[09:56:52]">&lt;janneke&gt;</a></span><span class="message">that's why it is superior to (bootstrap) development: no leakage and portable</span></div><div class="line" id="095850"><span class="nick" style="color:#6b8072"><a href="#095850" label="[09:58:50]">&lt;janneke&gt;</a></span><span class="message">and fully reproducible</span></div><div class="line" id="100050"><span class="nick" style="color:#6b8072"><a href="#100050" label="[10:00:50]">&lt;janneke&gt;</a></span><span class="message">fossy try: ./pre-inst-env guix build -e '(@@ (gnu packages commencement) bash-mesboot0)'</span></div><div class="line" id="100154"><span class="nick" style="color:#2e2a4a"><a href="#100154" label="[10:01:54]">&lt;fossy&gt;</a></span><span class="message">janneke: I tried -lgetopt</span></div><div class="line" id="100226"><span class="nick" style="color:#2e2a4a"><a href="#100226" label="[10:02:26]">&lt;fossy&gt;</a></span><span class="message">i am primarily doing everything from the guix recipies</span></div><div class="line" id="100232"><span class="nick" style="color:#2e2a4a"><a href="#100232" label="[10:02:32]">&lt;fossy&gt;</a></span><span class="message">This just didnt budge</span></div><div class="line" id="100248"><span class="nick" style="color:#2e2a4a"><a href="#100248" label="[10:02:48]">&lt;fossy&gt;</a></span><span class="message">I think its because I have weird environment</span></div><div class="line" id="100351"><span class="nick" style="color:#2e2a4a"><a href="#100351" label="[10:03:51]">&lt;fossy&gt;</a></span><span class="message">Portable environment is very hard</span></div><div class="line" id="100412"><span class="nick" style="color:#2e2a4a"><a href="#100412" label="[10:04:12]">&lt;fossy&gt;</a></span><span class="message">OriansJ: how important is it to you that the bootstrap is run in any environment?</span></div><div class="line" id="100513"><span class="nick" style="color:#2e2a4a"><a href="#100513" label="[10:05:13]">&lt;fossy&gt;</a></span><span class="message">I would like to containerise this</span></div><div class="line" id="100535"><span class="nick" style="color:#2e2a4a"><a href="#100535" label="[10:05:35]">&lt;fossy&gt;</a></span><span class="message">I will investigate... I dont want more dependencies</span></div><div class="line" id="101016"><span class="nick" style="color:#2e2a4a"><a href="#101016" label="[10:10:16]">&lt;fossy&gt;</a></span><span class="message">janneke: how do you build in containers without an extra seed?</span></div><div class="line" id="101029"><span class="nick" style="color:#2e2a4a"><a href="#101029" label="[10:10:29]">&lt;fossy&gt;</a></span><span class="message">when bootstrapping</span></div><div class="line" id="101203"><span class="nick" style="color:#6b8072"><a href="#101203" label="[10:12:03]">&lt;janneke&gt;</a></span><span class="message">fossy: instead of -lgetopt, did you try: adding /path/to/tcc-built/lib/libgetopt.a</span></div><div class="line" id="101513"><span class="nick" style="color:#6b8072"><a href="#101513" label="[10:15:13]">&lt;janneke&gt;</a></span><span class="message">fossy: of course, a proper, fully clean build should run fine in a dirty environment</span></div><div class="line" id="101528"><span class="nick" style="color:#6b8072"><a href="#101528" label="[10:15:28]">&lt;janneke&gt;</a></span><span class="message">it's just that i've done that for too long and i'm done with it</span></div><div class="line" id="101547"><span class="nick" style="color:#2e2a4a"><a href="#101547" label="[10:15:47]">&lt;fossy&gt;</a></span><span class="message">janneke: I did not</span></div><div class="line" id="101555"><span class="nick" style="color:#6b8072"><a href="#101555" label="[10:15:55]">&lt;janneke&gt;</a></span><span class="message">esp. done with debugging all kind of weird packages hardcoded /usr/incude, /usr/local/foo nonsense</span></div><div class="line" id="101556"><span class="nick" style="color:#2e2a4a"><a href="#101556" label="[10:15:56]">&lt;fossy&gt;</a></span><span class="message">I shall try that</span></div><div class="line" id="101610"><span class="nick" style="color:#2e2a4a"><a href="#101610" label="[10:16:10]">&lt;fossy&gt;</a></span><span class="message">janneke: well thats the thing</span></div><div class="line" id="101617"><span class="nick" style="color:#6b8072"><a href="#101617" label="[10:16:17]">&lt;janneke&gt;</a></span><span class="message">yeah, just take it in small steps</span></div><div class="line" id="101622"><span class="nick" style="color:#2e2a4a"><a href="#101622" label="[10:16:22]">&lt;fossy&gt;</a></span><span class="message">I dont want to have to patch all of that</span></div><div class="line" id="101626"><span class="nick" style="color:#2e2a4a"><a href="#101626" label="[10:16:26]">&lt;fossy&gt;</a></span><span class="message">:/</span></div><div class="line" id="101641"><span class="nick" style="color:#6b8072"><a href="#101641" label="[10:16:41]">&lt;janneke&gt;</a></span><span class="message">-l asks tcc to find the library, see if if you provide it; it works or not -- you can bisect further from there</span></div><div class="line" id="101644"><span class="nick" style="color:#2e2a4a"><a href="#101644" label="[10:16:44]">&lt;fossy&gt;</a></span><span class="message">like im already seeing /usr/bin/install being used etc</span></div><div class="line" id="101719"><span class="nick" style="color:#2e2a4a"><a href="#101719" label="[10:17:19]">&lt;fossy&gt;</a></span><span class="message">janneke: what containerisation method does guix use?</span></div><div class="line" id="101750"><span class="nick" style="color:#6b8072"><a href="#101750" label="[10:17:50]">&lt;janneke&gt;</a></span><span class="message">the really *great* thing (NOT) about that is that ./configure (and don't get me going a bout cmake ftm) could use /usr/include and you'd get apparently correct results</span></div><div class="line" id="101825"><span class="nick" style="color:#6b8072"><a href="#101825" label="[10:18:25]">&lt;janneke&gt;</a></span><span class="message">only if you ugrade your system, or try somewhere else, you cannot reproduce your result</span></div><div class="line" id="101854"><span class="nick" style="color:#6b8072"><a href="#101854" label="[10:18:54]">&lt;janneke&gt;</a></span><span class="message">fossy: it uses chroot, clone and linux namespaces</span></div><div class="line" id="101904"><span class="nick" style="color:#2e2a4a"><a href="#101904" label="[10:19:04]">&lt;fossy&gt;</a></span><span class="message">nice</span></div><div class="line" id="101955"><span class="nick" style="color:#6b8072"><a href="#101955" label="[10:19:55]">&lt;janneke&gt;</a></span><span class="message">the build daemon is currently still forked from nix, which is great, but reepca is carrying the torch on the rewrite in guile</span></div><div class="line" id="102001"><span class="nick" style="color:#2e2a4a"><a href="#102001" label="[10:20:01]">&lt;fossy&gt;</a></span><span class="message">janneke: how much of this is implemented in scheme?</span></div><div class="line" id="102002"><span class="nick" style="color:#6b8072"><a href="#102002" label="[10:20:02]">&lt;janneke&gt;</a></span><span class="message">afaiui</span></div><div class="line" id="102111"><span class="nick" style="color:#6b8072"><a href="#102111" label="[10:21:11]">&lt;janneke&gt;</a></span><span class="message">yeah, so only the build recipe is scheme; the containerisation is in c++</span></div><div class="line" id="102122"><span class="nick" style="color:#2e2a4a"><a href="#102122" label="[10:21:22]">&lt;fossy&gt;</a></span><span class="message">ahh</span></div><div class="line" id="102139"><span class="nick" style="color:#6b8072"><a href="#102139" label="[10:21:39]">&lt;janneke&gt;</a></span><span class="message">not ideal, but pragmatic -- &quot;it work&quot;</span></div><div class="line" id="102237"><span class="nick" style="color:#6b8072"><a href="#102237" label="[10:22:37]">&lt;janneke&gt;</a></span><span class="message">that's why in the guix build recipe's (esp. hand-crafted &quot;trivial-build-system&quot;), you'll see guile modules listed for build that need to be injected in the container</span></div><div class="line" id="102245"><span class="nick" style="color:#2e2a4a"><a href="#102245" label="[10:22:45]">&lt;fossy&gt;</a></span><span class="message">Lmao</span></div><div class="line" id="102253"><span class="nick" style="color:#2e2a4a"><a href="#102253" label="[10:22:53]">&lt;fossy&gt;</a></span><span class="message">Make 3.80 is so broken</span></div><div class="line" id="102303"><span class="nick" style="color:#6b8072"><a href="#102303" label="[10:23:03]">&lt;janneke&gt;</a></span><span class="message">oh?</span></div><div class="line" id="102313"><span class="nick" style="color:#6b8072"><a href="#102313" label="[10:23:13]">&lt;janneke&gt;</a></span><span class="message">you're making progress :-)</span></div><div class="line" id="102335"><span class="nick" style="color:#2e2a4a"><a href="#102335" label="[10:23:35]">&lt;fossy&gt;</a></span><span class="message">it dosent want to run ./anything</span></div><div class="line" id="102508"><span class="nick" style="color:#6b8072"><a href="#102508" label="[10:25:08]">&lt;janneke&gt;</a></span><span class="message">you have created a &quot;nice&quot; opportunity for yourself to relive much of the fun puzzles that i found ;-)</span></div><div class="line" id="102515"><span class="nick" style="color:#2e2a4a"><a href="#102515" label="[10:25:15]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="102544"><span class="nick" style="color:#6b8072"><a href="#102544" label="[10:25:44]">&lt;janneke&gt;</a></span><span class="message">and doing us all a great favour by documenting things what i failed to note</span></div><div class="line" id="102614"><span class="nick" style="color:#80b1d3"><a href="#102614" label="[10:26:14]">*</a></span><span class="message">janneke likes scripted documentation a lot</span></div><div class="line" id="102658"><span class="nick" style="color:#6b8072"><a href="#102658" label="[10:26:58]">&lt;janneke&gt;</a></span><span class="message">someone could create a text adventure</span></div><div class="line" id="102745"><span class="nick" style="color:#6b8072"><a href="#102745" label="[10:27:45]">&lt;janneke&gt;</a></span><span class="message">&quot;there are laying scripts around, some of them executable&quot;</span></div><div class="line" id="102843"><span class="nick" style="color:#6b8072"><a href="#102843" label="[10:28:43]">&lt;janneke&gt;</a></span><span class="message">look environment</span></div><div class="line" id="102907"><span class="nick" style="color:#2e2a4a"><a href="#102907" label="[10:29:07]">&lt;fossy&gt;</a></span><span class="message">lmai</span></div><div class="line" id="102909"><span class="nick" style="color:#2e2a4a"><a href="#102909" label="[10:29:09]">&lt;fossy&gt;</a></span><span class="message">lmao</span></div><div class="line" id="102923"><span class="nick" style="color:#6b8072"><a href="#102923" label="[10:29:23]">&lt;janneke&gt;</a></span><span class="message">&quot;you are overwhelmed, there are even X11 settings and things that look like code&quot;</span></div><div class="line" id="123530"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="153427"><span class="nick">***</span><span class="message notice">bauen1_ is now known as bauen1</span></div><div class="line" id="161013"><span class="nick" style="color:#389600"><a href="#161013" label="[16:10:13]">&lt;OriansJ&gt;</a></span><span class="message">janneke: it looks like you are using gcc built version of mescc-tools for the mescc-tools-static, rather than the bootstrapped mescc-tools-seed version</span></div><div class="line" id="161244"><span class="nick" style="color:#389600"><a href="#161244" label="[16:12:44]">&lt;OriansJ&gt;</a></span><span class="message">fossy: portablity of the bootstrap comes in 2 forms, exact same code running everywhere (M2-Planet and up only) easy to port to any arbitrary operating system and hardware (below M2-Planet only). And the form for portability matters a great deal.</span></div><div class="line" id="161400"><span class="nick" style="color:#389600"><a href="#161400" label="[16:14:00]">&lt;OriansJ&gt;</a></span><span class="message">The lower levels don't need containers because they literally are blind, deaf and ignorant of the environment they are in.</span></div><div class="line" id="161441"><span class="nick" style="color:#389600"><a href="#161441" label="[16:14:41]">&lt;OriansJ&gt;</a></span><span class="message">only pieces written in M2-Planet (or above) can even know there is an environment and change their behavior in anyway.</span></div><div class="line" id="161608"><span class="nick" style="color:#389600"><a href="#161608" label="[16:16:08]">&lt;OriansJ&gt;</a></span><span class="message">as containers only matter in regards to applications that change their behavior relative to the environment they are in.</span></div><div class="line" id="161911"><span class="nick" style="color:#389600"><a href="#161911" label="[16:19:11]">&lt;OriansJ&gt;</a></span><span class="message">janneke: however we could just simply drop that binary when dddddd finishes slow-utils, which will work everywhere mes-m2 does.</span></div><div class="line" id="162144"><span class="nick" style="color:#6b8072"><a href="#162144" label="[16:21:44]">&lt;janneke&gt;</a></span><span class="message">OriansJ: ah yes, i'm using the regular guix bootstrap policy here</span></div><div class="line" id="162226"><span class="nick" style="color:#6b8072"><a href="#162226" label="[16:22:26]">&lt;janneke&gt;</a></span><span class="message">yes, and i've chosen to not refresh the bootstrap binaries</span></div><div class="line" id="162330"><span class="nick" style="color:#80b1d3"><a href="#162330" label="[16:23:30]">*</a></span><span class="message">janneke heads back to #libreplanet</span></div><div class="line" id="162349"><span class="nick" style="color:#389600"><a href="#162349" label="[16:23:49]">&lt;OriansJ&gt;</a></span><span class="message">janneke: well the only refresh that would make since is reduce the bootstrap binaries to just guile (prior to the mes-m2 switch of course)</span></div><div class="line" id="162429"><span class="nick" style="color:#6b8072"><a href="#162429" label="[16:24:29]">&lt;janneke&gt;</a></span><span class="message">right, that was my plan</span></div><div class="line" id="162500"><span class="nick" style="color:#6b8072"><a href="#162500" label="[16:25:00]">&lt;janneke&gt;</a></span><span class="message">&quot;just&quot; drop mescc-tools and mes bootstrap binaries</span></div><div class="line" id="162808"><span class="nick" style="color:#389600"><a href="#162808" label="[16:28:08]">&lt;OriansJ&gt;</a></span><span class="message">Then the final piece just becomes mes-m2 as a drop in replacement for guile.</span></div><div class="line" id="162907"><span class="nick" style="color:#389600"><a href="#162907" label="[16:29:07]">&lt;OriansJ&gt;</a></span><span class="message">as guix removes all non-scheme pieces thus no binaries needed for guix outside of guile.</span></div><div class="line" id="163057"><span class="nick" style="color:#389600"><a href="#163057" label="[16:30:57]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: helps us get a POSIX bootstrappable from M2-Planet, completing the final loop on x86/AMD64/armv7l/aarch64/etc</span></div><div class="line" id="163134"><span class="nick" style="color:#389600"><a href="#163134" label="[16:31:34]">&lt;OriansJ&gt;</a></span><span class="message">Then I go off and bootstrap the hardware itself finishing the final possible loop.</span></div><div class="line" id="163428"><span class="nick" style="color:#6d2462"><a href="#163428" label="[16:34:28]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: you're in luck, my school is closed for 5 weeks, so i have quite a bit of extra time</span></div><div class="line" id="163444"><span class="nick" style="color:#389600"><a href="#163444" label="[16:34:44]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: nice</span></div><div class="line" id="174125"><span class="nick" style="color:#6d2462"><a href="#174125" label="[17:41:25]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: how do you plan on bootstrapping the hardware ?</span></div><div class="line" id="174702"><span class="nick" style="color:#6d2462"><a href="#174702" label="[17:47:02]">&lt;bauen1&gt;</a></span><span class="message">i've been toying with the idea of building a 65816 based computer (so you have &quot;simple&quot; parts you can verify)</span></div><div class="line" id="174744"><span class="nick" style="color:#6d2462"><a href="#174744" label="[17:47:44]">&lt;bauen1&gt;</a></span><span class="message">equipping that thing with an mmu (either 74xxx based or cpuld) and an spi bus would create a &quot;simple&quot; system</span></div><div class="line" id="174756"><span class="nick" style="color:#6d2462"><a href="#174756" label="[17:47:56]">&lt;bauen1&gt;</a></span><span class="message">simple as in you only have a few chips where you need to verify correct functionality</span></div><div class="line" id="174854"><span class="nick" style="color:#6d2462"><a href="#174854" label="[17:48:54]">&lt;bauen1&gt;</a></span><span class="message">that should allow for a &quot;modern&quot; operating system that allows you to 1. write code, 2. build the code (possibly for a system that requires binary blobs to actually work)</span></div><div class="line" id="175117"><span class="nick" style="color:#6d2462"><a href="#175117" label="[17:51:17]">&lt;bauen1&gt;</a></span><span class="message">the 65816 is also easy simple enough to program that you can hand-assemble a simple monitor program and then write it into an eeprom by hand</span></div><div class="line" id="175241"><span class="nick" style="color:#6d2462"><a href="#175241" label="[17:52:41]">&lt;bauen1&gt;</a></span><span class="message">sadly it appears that the tooling around the 65816 is a bit lacking</span></div><div class="line" id="175515"><span class="nick" style="color:#389600"><a href="#175515" label="[17:55:15]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: well the original plan is to first implement knight in FPGA and then individual logic gates. (possibly individual transistors if I get cheeky)</span></div><div class="line" id="175725"><span class="nick" style="color:#389600"><a href="#175725" label="[17:57:25]">&lt;OriansJ&gt;</a></span><span class="message">afterwards, a libresilicon implementation will enable cheap verfication by arbitrary parties</span></div><div class="line" id="175802"><span class="nick" style="color:#6d2462"><a href="#175802" label="[17:58:02]">&lt;bauen1&gt;</a></span><span class="message">nice</span></div><div class="line" id="180357"><span class="nick" style="color:#234e69"><a href="#180357" label="[18:03:57]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, what's the point of range_check in M1-macro.c given that we bitwise-and the value (to discard out-of-bounds bits) just before using it?</span></div><div class="line" id="180657"><span class="nick" style="color:#389600"><a href="#180657" label="[18:06:57]">&lt;OriansJ&gt;</a></span><span class="message">This also gives us the power to change the ISA in arbitrary ways to simplify hardware implmentations and enable a long term future growth of the knight ISA. (I was think thinking of specifying a block of Opcodes for experimentation</span></div><div class="line" id="180712"><span class="nick" style="color:#389600"><a href="#180712" label="[18:07:12]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: good point, I should have moved it prior</span></div><div class="line" id="180735"><span class="nick" style="color:#389600"><a href="#180735" label="[18:07:35]">&lt;OriansJ&gt;</a></span><span class="message">)</span></div><div class="line" id="180755"><span class="nick" style="color:#234e69"><a href="#180755" label="[18:07:55]">&lt;dddddd&gt;</a></span><span class="message">Why not just remove it?</span></div><div class="line" id="180823"><span class="nick" style="color:#389600"><a href="#180823" label="[18:08:23]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: as we do want to catch values too large to express in the number of bits</span></div><div class="line" id="180901"><span class="nick" style="color:#234e69"><a href="#180901" label="[18:09:01]">&lt;dddddd&gt;</a></span><span class="message">I see, no silent truncation.</span></div><div class="line" id="180920"><span class="nick" style="color:#389600"><a href="#180920" label="[18:09:20]">&lt;OriansJ&gt;</a></span><span class="message">aka !-270 should throw an error not silently be wrong</span></div><div class="line" id="181043"><span class="nick" style="color:#389600"><a href="#181043" label="[18:10:43]">&lt;OriansJ&gt;</a></span><span class="message">aka accidential behavior should never occur in mescc-tools</span></div><div class="line" id="181109"><span class="nick" style="color:#234e69"><a href="#181109" label="[18:11:09]">&lt;dddddd&gt;</a></span><span class="message">So, the bitwise-and wouldn't be reached and that's what might be removed, isn't it?</span></div><div class="line" id="181134"><span class="nick" style="color:#6c3d55"><a href="#181134" label="[18:11:34]">&lt;xentrac&gt;</a></span><span class="message">bauen1: have you been watching Ben Eater's video tutorial series on building a 6502-based computer?  he seems to know what he's talking about — I haven't caught him in any errors yet</span></div><div class="line" id="181215"><span class="nick" style="color:#6d2462"><a href="#181215" label="[18:12:15]">&lt;bauen1&gt;</a></span><span class="message">xentrac: yeah</span></div><div class="line" id="181240"><span class="nick" style="color:#389600"><a href="#181240" label="[18:12:40]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: approximately correct; but x86 behaves badly with negative numbers in gcc</span></div><div class="line" id="181413"><span class="nick" style="color:#234e69"><a href="#181413" label="[18:14:13]">&lt;dddddd&gt;</a></span><span class="message">Well, I guess that's not a problem for M1.scm so I think I won't replicate with &quot;double check&quot;.</span></div><div class="line" id="181413"><span class="nick" style="color:#389600"><a href="#181413" label="[18:14:13]">&lt;OriansJ&gt;</a></span><span class="message">The and truncates the leading 1s and enables correct behavior</span></div><div class="line" id="181510"><span class="nick" style="color:#234e69"><a href="#181510" label="[18:15:10]">&lt;dddddd&gt;</a></span><span class="message">s/with/this/</span></div><div class="line" id="181550"><span class="nick" style="color:#389600"><a href="#181550" label="[18:15:50]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: ok</span></div><div class="line" id="182543"><span class="nick" style="color:#234e69"><a href="#182543" label="[18:25:43]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, also I don't quite understand the checked range (for example -128, 255). It seems to cover both(!?) the signed and unsigned ranges at the same time, which aren't possible at the same time...</span></div><div class="line" id="182703"><span class="nick" style="color:#389600"><a href="#182703" label="[18:27:03]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: !123 isn't signed either</span></div><div class="line" id="182719"><span class="nick" style="color:#389600"><a href="#182719" label="[18:27:19]">&lt;OriansJ&gt;</a></span><span class="message">but !255 is valid and so is !-128</span></div><div class="line" id="182845"><span class="nick" style="color:#389600"><a href="#182845" label="[18:28:45]">&lt;OriansJ&gt;</a></span><span class="message">as far as M1 is concerned both are values that fit in 8bits</span></div><div class="line" id="182924"><span class="nick" style="color:#389600"><a href="#182924" label="[18:29:24]">&lt;OriansJ&gt;</a></span><span class="message">with the meaning to be determined by the instruction reading the !value</span></div><div class="line" id="182958"><span class="nick" style="color:#234e69"><a href="#182958" label="[18:29:58]">&lt;dddddd&gt;</a></span><span class="message">OK, user responsability.</span></div><div class="line" id="183005"><span class="nick" style="color:#389600"><a href="#183005" label="[18:30:05]">&lt;OriansJ&gt;</a></span><span class="message">for example JE8 !123 is signed but LOADUI !255 is unsigned</span></div><div class="line" id="183051"><span class="nick" style="color:#389600"><a href="#183051" label="[18:30:51]">&lt;OriansJ&gt;</a></span><span class="message">so unless we want to change how M1 works; it is unfortunately something I don't have a good solution for.</span></div><div class="line" id="183137"><span class="nick" style="color:#389600"><a href="#183137" label="[18:31:37]">&lt;OriansJ&gt;</a></span><span class="message">as M1 is largely assume the programmer only writes perfect code sort of language.</span></div><div class="line" id="183216"><span class="nick" style="color:#389600"><a href="#183216" label="[18:32:16]">&lt;OriansJ&gt;</a></span><span class="message">with only a handful of basic error checks to catch common bugs (like double DEFINEs and immediates too large)</span></div><div class="line" id="183231"><span class="nick" style="color:#234e69"><a href="#183231" label="[18:32:31]">&lt;dddddd&gt;</a></span><span class="message">I guess a solution is to have different prefixes for signed/unsigned.</span></div><div class="line" id="183325"><span class="nick" style="color:#389600"><a href="#183325" label="[18:33:25]">&lt;OriansJ&gt;</a></span><span class="message">which increases the complexity of the M0 implementation in hex2</span></div><div class="line" id="184121"><span class="nick" style="color:#389600"><a href="#184121" label="[18:41:21]">&lt;OriansJ&gt;</a></span><span class="message">or we do something like !S123 and !U255 and have M0 just ignore the first char</span></div><div class="line" id="184231"><span class="nick" style="color:#389600"><a href="#184231" label="[18:42:31]">&lt;OriansJ&gt;</a></span><span class="message">but that would require matching changes in MesCC, M2-Planet and mescc-tools (and some backporting to mescc-tools-seed by me)</span></div><div class="line" id="184436"><span class="nick" style="color:#389600"><a href="#184436" label="[18:44:36]">&lt;OriansJ&gt;</a></span><span class="message">So we could do it but it'll require a combined effort of you, me and janneke to ensure it is done universally. Provided janneke is on board with that change.</span></div><div class="line" id="185118"><span class="nick" style="color:#389600"><a href="#185118" label="[18:51:18]">&lt;OriansJ&gt;</a></span><span class="message">as such a rule would require a change in hex2 to forbid labels like :S123 and :U45</span></div><div class="line" id="185145"><span class="nick" style="color:#389600"><a href="#185145" label="[18:51:45]">&lt;OriansJ&gt;</a></span><span class="message">as then @S123 and %U45 would be ambigious</span></div><div class="line" id="185319"><span class="nick" style="color:#389600"><a href="#185319" label="[18:53:19]">&lt;OriansJ&gt;</a></span><span class="message">otherwise</span></div><div class="line" id="185431"><span class="nick" style="color:#234e69"><a href="#185431" label="[18:54:31]">&lt;dddddd&gt;</a></span><span class="message">Different prefix-symbol seems to cause no ambiguity. Anyway, I don't know if any change is needed, other than clarify the issue in the documentation.</span></div><div class="line" id="185601"><span class="nick" style="color:#234e69"><a href="#185601" label="[18:56:01]">&lt;dddddd&gt;</a></span><span class="message">The size of int might generate some confusion, I guess. I think we're expecting at least 32 bits sized ints.</span></div><div class="line" id="185633"><span class="nick" style="color:#234e69"><a href="#185633" label="[18:56:33]">&lt;dddddd&gt;</a></span><span class="message">(&quot;C&quot; ints, I mean)</span></div><div class="line" id="185741"><span class="nick" style="color:#234e69"><a href="#185741" label="[18:57:41]">&lt;dddddd&gt;</a></span><span class="message">... which are signed, for more fun.</span></div><div class="line" id="190112"><span class="nick" style="color:#234e69"><a href="#190112" label="[19:01:12]">&lt;dddddd&gt;</a></span><span class="message">As in range_check does 'if(4 == number_of_bytes) return;' blindly.</span></div><div class="line" id="191257"><span class="nick" style="color:#234e69"><a href="#191257" label="[19:12:57]">&lt;dddddd&gt;</a></span><span class="message">express_number, numerate_string and friends are all using signed ints and even if they were unsigned they can't store, say, 3 bytes if int is just 16 bits (allowed by spec AFAIU).</span></div><div class="line" id="201126"><span class="nick" style="color:#234e69"><a href="#201126" label="[20:11:26]">&lt;dddddd&gt;</a></span><span class="message">16777216 is off by one in range_check</span></div><div class="line" id="204106"><span class="nick" style="color:#2e2a4a"><a href="#204106" label="[20:41:06]">&lt;fossy&gt;</a></span><span class="message">OriansJ: precisely, I am talking about past mes-m2</span></div><div class="line" id="204827"><span class="nick" style="color:#2e2a4a"><a href="#204827" label="[20:48:27]">&lt;fossy&gt;</a></span><span class="message">because I am faced with a choice here:</span></div><div class="line" id="204858"><span class="nick" style="color:#2e2a4a"><a href="#204858" label="[20:48:58]">&lt;fossy&gt;</a></span><span class="message">1. Containerise things to ensure that we don't use anything from the host</span></div><div class="line" id="204939"><span class="nick" style="color:#2e2a4a"><a href="#204939" label="[20:49:39]">&lt;fossy&gt;</a></span><span class="message">2. Go through every build system in depth to ensure that it will not reference anything from the host environment ever</span></div><div class="line" id="205702"><span class="nick" style="color:#2e2a4a"><a href="#205702" label="[20:57:02]">&lt;fossy&gt;</a></span><span class="message">imho containorizing is very doable</span></div><div class="line" id="210238"><span class="nick" style="color:#2e2a4a"><a href="#210238" label="[21:02:38]">&lt;fossy&gt;</a></span><span class="message">but then again build system work is better</span></div><div class="line" id="220156"><span class="nick" style="color:#2e2a4a"><a href="#220156" label="[22:01:56]">&lt;fossy&gt;</a></span><span class="message">the more I think about it the harder it will be to do build system stuff especially for crap like gcc</span></div><div class="line" id="220547"><span class="nick" style="color:#2e2a4a"><a href="#220547" label="[22:05:47]">&lt;fossy&gt;</a></span><span class="message">Proot would be a good option, if I can get something like that working</span></div><div class="line" id="220946"><span class="nick" style="color:#2e2a4a"><a href="#220946" label="[22:09:46]">&lt;fossy&gt;</a></span><span class="message">wonder if tcc can compile an early version</span></div><div class="line" id="221750"><span class="nick" style="color:#389600"><a href="#221750" label="[22:17:50]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well if one strips out the environment to a minimal subset required; applications that attempt to use PATH will find nothing to use but we will need something like containers if we wish to hide files from the applications.</span></div><div class="line" id="221830"><span class="nick" style="color:#389600"><a href="#221830" label="[22:18:30]">&lt;OriansJ&gt;</a></span><span class="message">although, stripping that code out would make the behavior more universally consistent.</span></div><div class="line" id="221929"><span class="nick" style="color:#389600"><a href="#221929" label="[22:19:29]">&lt;OriansJ&gt;</a></span><span class="message">personally, I am of the belief that we should stop playing stupid games to get broken shit to work.</span></div><div class="line" id="222049"><span class="nick" style="color:#389600"><a href="#222049" label="[22:20:49]">&lt;OriansJ&gt;</a></span><span class="message">containerization and other tricks are fine for badly written applications when one has a fully bootstrapped Guix foundation but we really need to give up on the belief that we should accept badly written programs as they are.</span></div><div class="line" id="222109"><span class="nick" style="color:#389600"><a href="#222109" label="[22:21:09]">&lt;OriansJ&gt;</a></span><span class="message">especially in our bootstraps.</span></div><div class="line" id="222403"><span class="nick" style="color:#389600"><a href="#222403" label="[22:24:03]">&lt;OriansJ&gt;</a></span><span class="message">It is why I believe janneke did the right thing when he forked TCC to enable MesCC to be able to bootstrap it but I feel he didn't go far enough to convert TCC into something worth keeping in the bootstrap and thus believe extending MesCC to be able to bootstrap GCC directly is ultimately a superior goal. As bootstrapping is less about playing well with others and more about just doing the right thing; even if it means you have to go it</span></div><div class="line" id="222403"><span class="nick" style="color:#389600"><a href="#222403" label="[22:24:03]">&lt;OriansJ&gt;</a></span><span class="message">alone.</span></div><div class="line" id="222544"><span class="nick" style="color:#389600"><a href="#222544" label="[22:25:44]">&lt;OriansJ&gt;</a></span><span class="message">Write code that solves your own problems and make yourself happy first, let others choose if they agree with you or not on those shared classes of problems.</span></div><div class="line" id="222638"><span class="nick" style="color:#389600"><a href="#222638" label="[22:26:38]">&lt;OriansJ&gt;</a></span><span class="message">Compromise only when it results in far more gains than loses but never sacrifice your goals; ever.</span></div><div class="line" id="230723"><span class="nick" style="color:#2e2a4a"><a href="#230723" label="[23:07:23]">&lt;fossy&gt;</a></span><span class="message">OriansJ: Fair enough, that makes a lot of sense</span></div><div class="line" id="230849"><span class="nick" style="color:#2e2a4a"><a href="#230849" label="[23:08:49]">&lt;fossy&gt;</a></span><span class="message">doing things the Right Way is better than doing it the bad way in the long run, even if it will take longer to make</span></div><div class="line" id="230946"><span class="nick" style="color:#389600"><a href="#230946" label="[23:09:46]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well I spent 2 years being told it was impossible to write a C compiler in assembly and tried literally everything else (a FORTH and a Lisp)</span></div><div class="line" id="230959"><span class="nick" style="color:#2e2a4a"><a href="#230959" label="[23:09:59]">&lt;fossy&gt;</a></span><span class="message">yet you did it :_</span></div><div class="line" id="231000"><span class="nick" style="color:#234e69"><a href="#231000" label="[23:10:00]">&lt;dddddd&gt;</a></span><span class="message">M1.scm now has decent range-check.</span></div><div class="line" id="231001"><span class="nick" style="color:#2e2a4a"><a href="#231001" label="[23:10:01]">&lt;fossy&gt;</a></span><span class="message">:)</span></div><div class="line" id="231013"><span class="nick" style="color:#389600"><a href="#231013" label="[23:10:13]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: nice</span></div><div class="line" id="231035"><span class="nick" style="color:#389600"><a href="#231035" label="[23:10:35]">&lt;OriansJ&gt;</a></span><span class="message">fossy: multiple times for different architectures</span></div><div class="line" id="231038"><span class="nick" style="color:#2e2a4a"><a href="#231038" label="[23:10:38]">&lt;fossy&gt;</a></span><span class="message">k i need to add unset support to kaem</span></div><div class="line" id="231108"><span class="nick" style="color:#2e2a4a"><a href="#231108" label="[23:11:08]">&lt;fossy&gt;</a></span><span class="message">crap, I never did those fork tests</span></div><div class="line" id="231117"><span class="nick" style="color:#2e2a4a"><a href="#231117" label="[23:11:17]">&lt;fossy&gt;</a></span><span class="message">not fork</span></div><div class="line" id="231135"><span class="nick" style="color:#2e2a4a"><a href="#231135" label="[23:11:35]">&lt;fossy&gt;</a></span><span class="message">pipe</span></div><div class="line" id="231145"><span class="nick" style="color:#234e69"><a href="#231145" label="[23:11:45]">&lt;dddddd&gt;</a></span><span class="message">But M1-macro.c is rough on the edges about that, AFAIU. We'll see how it works when we flip the checks. Now is kind of broken (accepting values that M1.scm rejects).</span></div><div class="line" id="231258"><span class="nick" style="color:#389600"><a href="#231258" label="[23:12:58]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: we will slowly fix all these details</span></div><div class="line" id="231304"><span class="nick" style="color:#234e69"><a href="#231304" label="[23:13:04]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, what do you think about the int size I pointed out earlier?</span></div><div class="line" id="231341"><span class="nick" style="color:#389600"><a href="#231341" label="[23:13:41]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: it is a compromise as it would be quite difficult to support 64bit values on 32bit processors</span></div><div class="line" id="231437"><span class="nick" style="color:#234e69"><a href="#231437" label="[23:14:37]">&lt;dddddd&gt;</a></span><span class="message">... or 32 in 16 bits C implementations, I guess.</span></div><div class="line" id="231452"><span class="nick" style="color:#389600"><a href="#231452" label="[23:14:52]">&lt;OriansJ&gt;</a></span><span class="message">the reason why M1 and hex2 limit themselves to 4GB is because it is large enough to support rather serious applications but 64KB is not</span></div><div class="line" id="231656"><span class="nick" style="color:#234e69"><a href="#231656" label="[23:16:56]">&lt;dddddd&gt;</a></span><span class="message">... or 24 for that matter.</span></div><div class="line" id="231703"><span class="nick" style="color:#389600"><a href="#231703" label="[23:17:03]">&lt;OriansJ&gt;</a></span><span class="message">one can do a serious 32bit processor in 15K transistors</span></div><div class="line" id="231756"><span class="nick" style="color:#389600"><a href="#231756" label="[23:17:56]">&lt;OriansJ&gt;</a></span><span class="message">and I think RMS was right to not bother with 16bit processors when doing real important work.</span></div><div class="line" id="231818"><span class="nick" style="color:#234e69"><a href="#231818" label="[23:18:18]">&lt;dddddd&gt;</a></span><span class="message">Note that I'm not talking about the hardware implementation, but the C int (which has some relation to hardware, but it's not all).</span></div><div class="line" id="231908"><span class="nick" style="color:#389600"><a href="#231908" label="[23:19:08]">&lt;OriansJ&gt;</a></span><span class="message">I have no illusions about the possiblity of 8/16bit processors being able to build GCC, the best they could do is run cc_x86 if we work really really hard for it</span></div><div class="line" id="232045"><span class="nick" style="color:#234e69"><a href="#232045" label="[23:20:45]">&lt;dddddd&gt;</a></span><span class="message">Sure, but I think none of those compromises you did are documented.</span></div><div class="line" id="232117"><span class="nick" style="color:#389600"><a href="#232117" label="[23:21:17]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: very true, I must admit documentation was been one of my weaknesses in the project thus far.</span></div><div class="line" id="232426"><span class="nick" style="color:#234e69"><a href="#232426" label="[23:24:26]">&lt;dddddd&gt;</a></span><span class="message">What's the point of the M2-Planet ports to Z80 / 6502? Seems to be conflicting messages.</span></div><div class="line" id="232555"><span class="nick" style="color:#389600"><a href="#232555" label="[23:25:55]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: more of a personal stretch goal; as a virtual machine (like sweet16 but 32bit) upon them could be used with some cleverness to enable something more impressive</span></div><div class="line" id="232634"><span class="nick" style="color:#389600"><a href="#232634" label="[23:26:34]">&lt;OriansJ&gt;</a></span><span class="message">as I want as many arbitrary pieces of hardware to be able to perform the M2-Planet stage of the bootstrap.</span></div><div class="line" id="232827"><span class="nick" style="color:#234e69"><a href="#232827" label="[23:28:27]">&lt;dddddd&gt;</a></span><span class="message">I'm missing something, because I think we're again on square one (of the 32 bit compromise and the int size of C/M2 code).</span></div><div class="line" id="232848"><span class="nick" style="color:#234e69"><a href="#232848" label="[23:28:48]">&lt;dddddd&gt;</a></span><span class="message">Now, it's not GCC, but M2-Planet.</span></div><div class="line" id="233100"><span class="nick" style="color:#389600"><a href="#233100" label="[23:31:00]">&lt;OriansJ&gt;</a></span><span class="message">well that is the thing, should I add prefixes for 64bit, 128bit and 256bit values to M1 and hex2? Why stop there? we could do prefixes for 512bit or 1024bit values</span></div><div class="line" id="233202"><span class="nick" style="color:#234e69"><a href="#233202" label="[23:32:02]">&lt;dddddd&gt;</a></span><span class="message">I don't think we need to think about them. The 24 bit prefix is already there. What about it on 16b (or less) archs?</span></div><div class="line" id="233251"><span class="nick" style="color:#389600"><a href="#233251" label="[23:32:51]">&lt;OriansJ&gt;</a></span><span class="message">well in assembly it is easy to add support for 32bit integers on 8bit architectures (if one has overflow instructions)</span></div><div class="line" id="233625"><span class="nick" style="color:#389600"><a href="#233625" label="[23:36:25]">&lt;OriansJ&gt;</a></span><span class="message">simply allocate 4bytes and use 17instructions per integer operation; it'll be slow but it'll work</span></div><div class="line" id="233731"><span class="nick" style="color:#234e69"><a href="#233731" label="[23:37:31]">&lt;dddddd&gt;</a></span><span class="message">Why only &quot;in assembly&quot;?</span></div><div class="line" id="233754"><span class="nick" style="color:#389600"><a href="#233754" label="[23:37:54]">&lt;OriansJ&gt;</a></span><span class="message">because C doesn't do integer overflow correctly.</span></div><div class="line" id="233832"><span class="nick" style="color:#389600"><a href="#233832" label="[23:38:32]">&lt;OriansJ&gt;</a></span><span class="message">aka i = i + 1; =&gt; why no overflow flag to use?</span></div><div class="line" id="234033"><span class="nick" style="color:#389600"><a href="#234033" label="[23:40:33]">&lt;OriansJ&gt;</a></span><span class="message">vs add.cio R0, R1 1 =&gt; adds in carry flag and sets carry flag on overflow</span></div><div class="line" id="234439"><span class="nick" style="color:#389600"><a href="#234439" label="[23:44:39]">&lt;OriansJ&gt;</a></span><span class="message">It is why C without inline assembly support is not worth the trouble.</span></div><div class="line" id="234522"><span class="nick" style="color:#389600"><a href="#234522" label="[23:45:22]">&lt;OriansJ&gt;</a></span><span class="message">C is only good when it is able to punt to assembly when real performance or real work needs to be done.</span></div><div class="line" id="234657"><span class="nick" style="color:#389600"><a href="#234657" label="[23:46:57]">&lt;OriansJ&gt;</a></span><span class="message">C's greatest strength is it allows you to achive &quot;good enough&quot; results with minimal effort and &quot;reasonable&quot; results when you absolutely must.</span></div><div class="line" id="234904"><span class="nick" style="color:#389600"><a href="#234904" label="[23:49:04]">&lt;OriansJ&gt;</a></span><span class="message">cc_x86.s is literally 24hours of work to get &quot;good enough&quot; results. but to get &quot;reasonable&quot; results; major changes could need to be done in M2-Planet to generate anything close to approximating &quot;reasonable&quot; performance in its generated binaries.</span></div><div class="line" id="235204"><span class="nick" style="color:#234e69"><a href="#235204" label="[23:52:04]">&lt;dddddd&gt;</a></span><span class="message">So, an imaginary M2-Planet for 6502 would use 32bits &quot;int&quot; (with asm from the compiler slow and so --not user inline asm).</span></div><div class="line" id="235445"><span class="nick" style="color:#389600"><a href="#235445" label="[23:54:45]">&lt;OriansJ&gt;</a></span><span class="message">well M2-Planet is currently 145KB it can't run in 64KB</span></div><div class="line" id="235617"><span class="nick" style="color:#234e69"><a href="#235617" label="[23:56:17]">&lt;dddddd&gt;</a></span><span class="message">Imaginary, so to see if I really understand the invariants we're not asserting.</span></div><br /></div></body></html>