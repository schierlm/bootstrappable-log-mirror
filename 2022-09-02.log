<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="031240"><span class="nick" style="color:#8dd3c7"><a href="#031240" label="[03:12:40]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well that depends on a couple things. For example if it is something that you will be doing in other pieces a function tends to  be easier reuse. if it is something unique to hex0 then inline would benefit from being smaller. Also if 2 inlines is 24bytes (12bytes per) I can't imagine that a function call would be larger</span></div><div class="line" id="031539"><span class="nick" style="color:#2e2a4a"><a href="#031539" label="[03:15:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it's reusable function, e.g. open_protocol which I'm already using in hex2 and catm</span></div><div class="line" id="031559"><span class="nick" style="color:#2e2a4a"><a href="#031559" label="[03:15:59]">&lt;stikonas[m]&gt;</a></span><span class="message">But it was 24 bytes each</span></div><div class="line" id="031609"><span class="nick" style="color:#2e2a4a"><a href="#031609" label="[03:16:09]">&lt;stikonas[m]&gt;</a></span><span class="message">So both are 48 bytes</span></div><div class="line" id="031632"><span class="nick" style="color:#2e2a4a"><a href="#031632" label="[03:16:32]">&lt;stikonas[m]&gt;</a></span><span class="message">I think function would be 35 bytes but 2 jumps</span></div><div class="line" id="031648"><span class="nick" style="color:#8dd3c7"><a href="#031648" label="[03:16:48]">&lt;oriansj&gt;</a></span><span class="message">why not call and return?</span></div><div class="line" id="031716"><span class="nick" style="color:#2e2a4a"><a href="#031716" label="[03:17:16]">&lt;stikonas[m]&gt;</a></span><span class="message">It is call, well 2 calls</span></div><div class="line" id="031753"><span class="nick" style="color:#2e2a4a"><a href="#031753" label="[03:17:53]">&lt;stikonas[m]&gt;</a></span><span class="message">One for each use of function</span></div><div class="line" id="031800"><span class="nick" style="color:#8dd3c7"><a href="#031800" label="[03:18:00]">&lt;oriansj&gt;</a></span><span class="message">and yes the offset calculations do suck</span></div><div class="line" id="031905"><span class="nick" style="color:#2e2a4a"><a href="#031905" label="[03:19:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Exactly...</span></div><div class="line" id="031923"><span class="nick" style="color:#2e2a4a"><a href="#031923" label="[03:19:23]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. in hex2 I have <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/commit/35dbae15a0f4ad8467b49c914398a55a52067d2c/amd64/Development/hex2.S#L32">https://git.stikonas.eu/andrius/stage0-uefi/src/commit/35dbae15a0f4ad8467b49c914398a55a52067d2c/amd64/Development/hex2.S#L32</a> </span></div><div class="line" id="031948"><span class="nick" style="color:#2e2a4a"><a href="#031948" label="[03:19:48]">&lt;stikonas[m]&gt;</a></span><span class="message">But maybe larger binary with fewer offsets is easier to inspect</span></div><div class="line" id="032042"><span class="nick" style="color:#2e2a4a"><a href="#032042" label="[03:20:42]">&lt;stikonas[m]&gt;</a></span><span class="message">I think I can verify 13 bytes quicker than 2 offsets, especially since we have 2 copies of the same stuff</span></div><div class="line" id="032144"><span class="nick" style="color:#8dd3c7"><a href="#032144" label="[03:21:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: ok</span></div><div class="line" id="032213"><span class="nick" style="color:#8dd3c7"><a href="#032213" label="[03:22:13]">&lt;oriansj&gt;</a></span><span class="message">If you prefer doing it that way, it is fine</span></div><div class="line" id="032231"><span class="nick" style="color:#2e2a4a"><a href="#032231" label="[03:22:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, it will be maybe 2 weeks until I'm done improving hex1.hex0</span></div><div class="line" id="032307"><span class="nick" style="color:#8dd3c7"><a href="#032307" label="[03:23:07]">&lt;oriansj&gt;</a></span><span class="message">and you may wish to add a comment to indicate the duplication</span></div><div class="line" id="032353"><span class="nick" style="color:#2e2a4a"><a href="#032353" label="[03:23:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, comments are usually a good idea</span></div><div class="line" id="032409"><span class="nick" style="color:#2e2a4a"><a href="#032409" label="[03:24:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Especially in hex0</span></div><div class="line" id="032411"><span class="nick" style="color:#8dd3c7"><a href="#032411" label="[03:24:11]">&lt;oriansj&gt;</a></span><span class="message">that way if someone else wants to cut the size of the binary, they know of an easy place to do so.</span></div><div class="line" id="033132"><span class="nick" style="color:#2e2a4a"><a href="#033132" label="[03:31:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Another way to cut binary sizes in uefi is not freeing any resources. But unlike posix, uefi won't clean up on exit, so at least for now I'm doing full cleanups</span></div><div class="line" id="033436"><span class="nick" style="color:#8dd3c7"><a href="#033436" label="[03:34:36]">&lt;oriansj&gt;</a></span><span class="message">well pushing size limits with UEFI is probably not a good idea yet as there seeems to be a boatload of mines</span></div><div class="line" id="033932"><span class="nick" style="color:#2e2a4a"><a href="#033932" label="[03:39:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Exactly, hence I'm trying to be compliant and just get everything running</span></div><div class="line" id="033943"><span class="nick" style="color:#2e2a4a"><a href="#033943" label="[03:39:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Rather than going super small</span></div><div class="line" id="034159"><span class="nick" style="color:#8dd3c7"><a href="#034159" label="[03:41:59]">&lt;oriansj&gt;</a></span><span class="message">wise plan</span></div><div class="line" id="132542"><span class="nick" style="color:#6b8072"><a href="#132542" label="[13:25:42]">&lt;doras&gt;</a></span><span class="message">stikonas: it seems that live-boostrap's final gcc doesn't support thread-local storage. From a quick search online, it may be because our assembler from binutils is missing support for it.</span></div><div class="line" id="132721"><span class="nick" style="color:#6b8072"><a href="#132721" label="[13:27:21]">&lt;doras&gt;</a></span><span class="message">gcc supposedly detects this at build time.</span></div><div class="line" id="133311"><span class="nick" style="color:#6b8072"><a href="#133311" label="[13:33:11]">&lt;doras&gt;</a></span><span class="message">Thread-local storage is required for freedesktop-sdk's elfutils.</span></div><div class="line" id="133708"><span class="nick" style="color:#8dd3c7"><a href="#133708" label="[13:37:08]">&lt;oriansj&gt;</a></span><span class="message">doras: if binutils don't support thread-local storage, which assemblers do?</span></div><div class="line" id="133708"><span class="nick" style="color:#80b1d3"><a href="#133708" label="[13:37:08]">&lt;aggi&gt;</a></span><span class="message">doras: there is two variants of TLS i think, C11 and the GNU __thread extension</span></div><div class="line" id="133743"><span class="nick" style="color:#6b8072"><a href="#133743" label="[13:37:43]">&lt;doras&gt;</a></span><span class="message">aggi: in this case we need __thread</span></div><div class="line" id="133752"><span class="nick" style="color:#80b1d3"><a href="#133752" label="[13:37:52]">&lt;aggi&gt;</a></span><span class="message">the elfutils version i fiddled with insisted on GNU __thread (which tcc didn't have)</span></div><div class="line" id="133835"><span class="nick" style="color:#80b1d3"><a href="#133835" label="[13:38:35]">&lt;aggi&gt;</a></span><span class="message">doras: ok then, because gcc47 (if this is the live-bootstrap version) does support __thread, and failed with C11-tls</span></div><div class="line" id="133945"><span class="nick" style="color:#6b8072"><a href="#133945" label="[13:39:45]">&lt;doras&gt;</a></span><span class="message">aggi: interesting. I can a configure failure about it.</span></div><div class="line" id="134018"><span class="nick" style="color:#80b1d3"><a href="#134018" label="[13:40:18]">&lt;aggi&gt;</a></span><span class="message">both __thread and C11-tls are a trouble-source, gladly i haven't got any dependency against this remaining here</span></div><div class="line" id="134058"><span class="nick" style="color:#6b8072"><a href="#134058" label="[13:40:58]">&lt;doras&gt;</a></span><span class="message">I suspect it may be failing because of something else.</span></div><div class="line" id="134137"><span class="nick" style="color:#80b1d3"><a href="#134137" label="[13:41:37]">&lt;aggi&gt;</a></span><span class="message">doras: anyway, i wasn't aware elfutils contained anything which binutils didn't offer, to provide whatever freedesktop-sdk may need</span></div><div class="line" id="134615"><span class="nick" style="color:#6b8072"><a href="#134615" label="[13:46:15]">&lt;doras&gt;</a></span><span class="message">aggi: elfutils is required for debugedit, which is used for debug symbol manipulation. This is currently done for every package, even early in the bootstrap.</span></div><div class="line" id="134640"><span class="nick" style="color:#6b8072"><a href="#134640" label="[13:46:40]">&lt;doras&gt;</a></span><span class="message">But I suspect I hit a red herring. The actual cause of the failure is something else.</span></div><div class="line" id="134658"><span class="nick" style="color:#80b1d3"><a href="#134658" label="[13:46:58]">&lt;aggi&gt;</a></span><span class="message">weird. doras: thanks for the hint.</span></div><div class="line" id="134729"><span class="nick" style="color:#80b1d3"><a href="#134729" label="[13:47:29]">&lt;aggi&gt;</a></span><span class="message">no intention to distract off-topic, nonetheless, why would they need to mangle debug-symbols?</span></div><div class="line" id="134746"><span class="nick" style="color:#80b1d3"><a href="#134746" label="[13:47:46]">&lt;aggi&gt;</a></span><span class="message">don't care, got no freedesktop.org/redhat stuff installed anymore</span></div><div class="line" id="135330"><span class="nick" style="color:#6b8072"><a href="#135330" label="[13:53:30]">&lt;doras&gt;</a></span><span class="message">aggi: I haven't looked into it much, to be honest.</span></div><div class="line" id="135410"><span class="nick" style="color:#6b8072"><a href="#135410" label="[13:54:10]">&lt;doras&gt;</a></span><span class="message">The issue is that elfutils insists on build-id support, and live-bootstrap's binutils is too old.</span></div><div class="line" id="135503"><span class="nick" style="color:#6b8072"><a href="#135503" label="[13:55:03]">&lt;doras&gt;</a></span><span class="message">I think it was first added to binutils 2.18, and live-bootstrap only has 2.14.</span></div><div class="line" id="135636"><span class="nick" style="color:#8dd3c7"><a href="#135636" label="[13:56:36]">&lt;oriansj&gt;</a></span><span class="message">well thread-local storage does enable performance via multi-threading so that is probably the reason for why elfutils might use it</span></div><div class="line" id="140009"><span class="nick" style="color:#80b1d3"><a href="#140009" label="[14:00:09]">&lt;aggi&gt;</a></span><span class="message">i don't think elfutils contains performance-critical sections which benefit from this significantly</span></div><div class="line" id="140032"><span class="nick" style="color:#80b1d3"><a href="#140032" label="[14:00:32]">&lt;aggi&gt;</a></span><span class="message">in any case __thread and C11 TLS create a vendor-lock and/or version-lock against particular toolchains</span></div><div class="line" id="140132"><span class="nick" style="color:#80b1d3"><a href="#140132" label="[14:01:32]">&lt;aggi&gt;</a></span><span class="message">since gcc47 hasn't got C11 TLS to my knolwedge this wiped a recent net-dns/bind, and tcc got no __thread extension hence elfutils are gone</span></div><div class="line" id="140137"><span class="nick" style="color:#80b1d3"><a href="#140137" label="[14:01:37]">&lt;aggi&gt;</a></span><span class="message">just some random picks</span></div><div class="line" id="140220"><span class="nick" style="color:#80b1d3"><a href="#140220" label="[14:02:20]">&lt;aggi&gt;</a></span><span class="message">of more or less relevant software packages</span></div><div class="line" id="141346"><span class="nick" style="color:#2e2a4a"><a href="#141346" label="[14:13:46]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: yes, we plan to build newer binutils and gcc</span></div><div class="line" id="141656"><span class="nick" style="color:#6b8072"><a href="#141656" label="[14:16:56]">&lt;doras&gt;</a></span><span class="message">stikonas: I can try to add a newer binutils for a start, but I'll need some pointers. Are you familiar with a newer version which is acceptable for live-bootstrap and should be able to build with its existing packages? If so, when in the bootstrap would you prefer to build it?</span></div><div class="line" id="142020"><span class="nick" style="color:#8dd3c7"><a href="#142020" label="[14:20:20]">&lt;oriansj&gt;</a></span><span class="message">aggi: it is rare for software developers to know exactly what changes would produce significant performance improvements and it is a skill that can only be learned by a great many failures.</span></div><div class="line" id="151200"><span class="nick" style="color:#6b8072"><a href="#151200" label="[15:12:00]">&lt;doras&gt;</a></span><span class="message">stikonas: is it possible that dlopen doesn't work in live-bootstrap's final image?</span></div><div class="line" id="151702"><span class="nick" style="color:#6b8072"><a href="#151702" label="[15:17:02]">&lt;doras&gt;</a></span><span class="message">I tried to build Python, and while it seemed to build successfully, it decided to remove some modules due to &quot;Dynamic loading not supported&quot;: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/4105/raw/main/python-v3.10.6-build.log">https://gitlab.gnome.org/-/snippets/4105/raw/main/python-v3.10.6-build.log</a> </span></div><div class="line" id="151811"><span class="nick" style="color:#6b8072"><a href="#151811" label="[15:18:11]">&lt;doras&gt;</a></span><span class="message">These are important modules, and one of them, `_posixsubprocess`, is actually used in Python's own &quot;make install&quot;, resulting in a failure at this stage.</span></div><div class="line" id="152231"><span class="nick" style="color:#6b8072"><a href="#152231" label="[15:22:31]">&lt;doras&gt;</a></span><span class="message">Well... yep: <a rel="nofollow" href="https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c#n6">https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c#n6</a> </span></div><div class="line" id="152325"><span class="nick" style="color:#8dd3c7"><a href="#152325" label="[15:23:25]">&lt;oriansj&gt;</a></span><span class="message">doras: yeah, you'd need glibc with dynamic linking enabled</span></div><div class="line" id="152404"><span class="nick" style="color:#6b8072"><a href="#152404" label="[15:24:04]">&lt;doras&gt;</a></span><span class="message">This is bad :\</span></div><div class="line" id="152434"><span class="nick" style="color:#2e2a4a"><a href="#152434" label="[15:24:34]">&lt;stikonas[m]&gt;</a></span><span class="message">musl with dynamic linking would work too?</span></div><div class="line" id="152505"><span class="nick" style="color:#2e2a4a"><a href="#152505" label="[15:25:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Though, I was not able to get it working but I didn't try too much</span></div><div class="line" id="152535"><span class="nick" style="color:#2e2a4a"><a href="#152535" label="[15:25:35]">&lt;stikonas[m]&gt;</a></span><span class="message">As for python, fossy is looking into that</span></div><div class="line" id="152619"><span class="nick" style="color:#2e2a4a"><a href="#152619" label="[15:26:19]">&lt;stikonas[m]&gt;</a></span><span class="message">(I am mostly working on stage0-uefi right now)</span></div><div class="line" id="152735"><span class="nick" style="color:#6b8072"><a href="#152735" label="[15:27:35]">&lt;doras&gt;</a></span><span class="message">stikonas: is this important? <a rel="nofollow" href="https://github.com/bminor/musl/blob/7a43f6fea9081bdd53d8a11cef9e9fab0348c53d/WHATSNEW#L425">https://github.com/bminor/musl/blob/7a43f6fea9081bdd53d8a11cef9e9fab0348c53d/WHATSNEW#L425</a> </span></div><div class="line" id="152751"><span class="nick" style="color:#6b8072"><a href="#152751" label="[15:27:51]">&lt;doras&gt;</a></span><span class="message">Then: <a rel="nofollow" href="https://github.com/bminor/musl/blob/7a43f6fea9081bdd53d8a11cef9e9fab0348c53d/WHATSNEW#L254">https://github.com/bminor/musl/blob/7a43f6fea9081bdd53d8a11cef9e9fab0348c53d/WHATSNEW#L254</a> </span></div><div class="line" id="152810"><span class="nick" style="color:#6b8072"><a href="#152810" label="[15:28:10]">&lt;doras&gt;</a></span><span class="message">Sorry for the mirror links :s</span></div><div class="line" id="152901"><span class="nick" style="color:#6b8072"><a href="#152901" label="[15:29:01]">&lt;doras&gt;</a></span><span class="message">So we need both support for dynamic linking in musl and not build statically as far as I understand.</span></div><div class="line" id="153114"><span class="nick" style="color:#6b8072"><a href="#153114" label="[15:31:14]">&lt;doras&gt;</a></span><span class="message">Sounds like a lot of work</span></div><div class="line" id="153156"><span class="nick" style="color:#6b8072"><a href="#153156" label="[15:31:56]">&lt;doras&gt;</a></span><span class="message">And this is a requirement for a newer GCC, because it needs Python.</span></div><div class="line" id="153402"><span class="nick" style="color:#2e2a4a"><a href="#153402" label="[15:34:02]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: not sure. But I'm now travelling, can't check in detail</span></div><div class="line" id="153422"><span class="nick" style="color:#6b8072"><a href="#153422" label="[15:34:22]">&lt;doras&gt;</a></span><span class="message">stikonas: never mind then :)</span></div><div class="line" id="153851"><span class="nick" style="color:#8dd3c7"><a href="#153851" label="[15:38:51]">&lt;oriansj&gt;</a></span><span class="message">doras: bootstrapping is always just a long series of &quot;lots of work&quot; but it is work that needs to be done if only once</span></div><div class="line" id="153955"><span class="nick" style="color:#80b1d3"><a href="#153955" label="[15:39:55]">&lt;aggi&gt;</a></span><span class="message">with musl-1.2.x dlopen is possible</span></div><div class="line" id="154731"><span class="nick" style="color:#80b1d3"><a href="#154731" label="[15:47:31]">&lt;aggi&gt;</a></span><span class="message">this caused some side-effects with musl dlopen while ago too: <a rel="nofollow" href="https://wiki.musl-libc.org/functional-differences-from-glibc.html#Lazy-bindings">https://wiki.musl-libc.org/functional-differences-from-glibc.html#Lazy-bindings</a> </span></div><div class="line" id="155502"><span class="nick" style="color:#6b8072"><a href="#155502" label="[15:55:02]">&lt;doras&gt;</a></span><span class="message">Apparently &quot;error.h&quot; is also missing from musl? Prevents building dwz. Mentioned here, too: <a rel="nofollow" href="https://bugs.gentoo.org/829239">https://bugs.gentoo.org/829239</a> </span></div><div class="line" id="155909"><span class="nick" style="color:#8dd3c7"><a href="#155909" label="[15:59:09]">&lt;oriansj&gt;</a></span><span class="message">well dlopen and dynamic linking feel like a vestigial idea which could be replaced by the kernel checksumming pages of memory and doing deduplication on the read-only pages</span></div><div class="line" id="160021"><span class="nick" style="color:#8dd3c7"><a href="#160021" label="[16:00:21]">&lt;oriansj&gt;</a></span><span class="message">especially as one can statically link pages to static memory addresses in a way to ensure they are the only contents of the page(s) to make it even easier for the kernel</span></div><div class="line" id="160258"><span class="nick" style="color:#8dd3c7"><a href="#160258" label="[16:02:58]">&lt;oriansj&gt;</a></span><span class="message">but that might just be my bias to the belief that we always will have the source code and will be building the binaries ourselves with full knowledge of what is available.</span></div><div class="line" id="165254"><span class="nick" style="color:#6b8072"><a href="#165254" label="[16:52:54]">&lt;doras&gt;</a></span><span class="message">oriansj: storage on disk and size during network transfers is affected as well, not only RAM utilization.</span></div><div class="line" id="165344"><span class="nick" style="color:#6b8072"><a href="#165344" label="[16:53:44]">&lt;doras&gt;</a></span><span class="message">But yeah, it would have been nice to have deduplication of read-only memory regardless.</span></div><div class="line" id="182920"><span class="nick" style="color:#8dd3c7"><a href="#182920" label="[18:29:20]">&lt;oriansj&gt;</a></span><span class="message">doras: the size of the binaries wouldn't matter for network transfers if we were only distributing source code</span></div><div class="line" id="183001"><span class="nick" style="color:#8dd3c7"><a href="#183001" label="[18:30:01]">&lt;oriansj&gt;</a></span><span class="message">but I will grant you it does increase disk usage for filesystems that don't support deduplication</span></div><div class="line" id="183216"><span class="nick" style="color:#8dd3c7"><a href="#183216" label="[18:32:16]">&lt;oriansj&gt;</a></span><span class="message">but on Copy-On-Write (cow) merkle tree filesystems; deduplication is a rather cheap lookup to do (as it is cheaper than writing to disk assuming the lookup takes less than 10 microseconds)</span></div><div class="line" id="221810"><span class="nick" style="color:#6d2462"><a href="#221810" label="[22:18:10]">&lt;sam_&gt;</a></span><span class="message">doras: working on this page: <a rel="nofollow" href="https://wiki.gentoo.org/wiki/Musl_porting_notes#error.h:_No_such_file_or_directory">https://wiki.gentoo.org/wiki/Musl_porting_notes#error.h:_No_such_file_or_directory</a> </span></div><div class="line" id="221819"><span class="nick" style="color:#6d2462"><a href="#221819" label="[22:18:19]">&lt;sam_&gt;</a></span><span class="message">but yep</span></div><div class="line" id="222030"><span class="nick" style="color:#6b8072"><a href="#222030" label="[22:20:30]">&lt;doras&gt;</a></span><span class="message">sam_: thanks.</span></div><div class="line" id="222609"><span class="nick" style="color:#8dd3c7"><a href="#222609" label="[22:26:09]">&lt;oriansj&gt;</a></span><span class="message">that reminds me, I probably should write up a gentoo install procedure for <a rel="nofollow" href="https://git.sr.ht/~oriansj/System_setup/tree">https://git.sr.ht/~oriansj/System_setup/tree</a> </span></div><div class="line" id="222705"><span class="nick" style="color:#6d2462"><a href="#222705" label="[22:27:05]">&lt;sam_&gt;</a></span><span class="message">in general if I can ever help, please let me know</span></div><div class="line" id="222717"><span class="nick" style="color:#6d2462"><a href="#222717" label="[22:27:17]">&lt;sam_&gt;</a></span><span class="message">if it's something you think we may know something about, etc</span></div><div class="line" id="223251"><span class="nick" style="color:#8dd3c7"><a href="#223251" label="[22:32:51]">&lt;oriansj&gt;</a></span><span class="message">sam_: honestly the most helpful bit would be to tell me about everything I did crappy and could do better</span></div><div class="line" id="223326"><span class="nick" style="color:#8dd3c7"><a href="#223326" label="[22:33:26]">&lt;oriansj&gt;</a></span><span class="message">as I'll probably be going into that a bit blind and make some really dumb mistakes</span></div><div class="line" id="224156"><span class="nick" style="color:#8dd3c7"><a href="#224156" label="[22:41:56]">&lt;oriansj&gt;</a></span><span class="message">right now I am at a very minimal point: <a rel="nofollow" href="https://paste.debian.net/1252594/">https://paste.debian.net/1252594/</a> </span></div><div class="line" id="224228"><span class="nick" style="color:#8dd3c7"><a href="#224228" label="[22:42:28]">&lt;oriansj&gt;</a></span><span class="message">and probably need to make some changes to make it easier to update to newer linux kernels</span></div><div class="line" id="224527"><span class="nick" style="color:#6d2462"><a href="#224527" label="[22:45:27]">&lt;sam_&gt;</a></span><span class="message">happily!</span></div><div class="line" id="224635"><span class="nick" style="color:#8dd3c7"><a href="#224635" label="[22:46:35]">&lt;oriansj&gt;</a></span><span class="message">sam_: ^_^</span></div><div class="line" id="224636"><span class="nick" style="color:#6d2462"><a href="#224636" label="[22:46:36]">&lt;sam_&gt;</a></span><span class="message">wrt line 16 / stage 3 URL: see <a rel="nofollow" href="https://wiki.gentoo.org/wiki/User:Ajak/systemd-nspawn_for_Development_and_Update_Automation">https://wiki.gentoo.org/wiki/User:Ajak/systemd-nspawn_for_Development_and_Update_Automation</a>  for a way to get the latest stage3 programmatically</span></div><div class="line" id="224639"><span class="nick" style="color:#6d2462"><a href="#224639" label="[22:46:39]">&lt;sam_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bouncer.gentoo.org/fetch/root/all/releases/amd64/autobuilds/$">https://bouncer.gentoo.org/fetch/root/all/releases/amd64/autobuilds/$</a>(curl  -sL <a rel="nofollow" href="https://bouncer.gentoo.org/fetch/root/all/releases/amd64/autobuilds/latest-stage3-amd64-systemd.txt">https://bouncer.gentoo.org/fetch/root/all/releases/amd64/autobuilds/latest-stage3-amd64-systemd.txt</a>  | tail -1 | awk '{print $1}') stable</span></div><div class="line" id="224652"><span class="nick" style="color:#6d2462"><a href="#224652" label="[22:46:52]">&lt;sam_&gt;</a></span><span class="message">for line 51: there's an easier way to do kernels but it depends on personal preference</span></div><div class="line" id="224702"><span class="nick" style="color:#6d2462"><a href="#224702" label="[22:47:02]">&lt;sam_&gt;</a></span><span class="message">nowadays you can build the kernel as a normal package, which I love</span></div><div class="line" id="224709"><span class="nick" style="color:#6d2462"><a href="#224709" label="[22:47:09]">&lt;sam_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.gentoo.org/wiki/Project:Distribution_Kernel">https://wiki.gentoo.org/wiki/Project:Distribution_Kernel</a> </span></div><div class="line" id="224834"><span class="nick" style="color:#8dd3c7"><a href="#224834" label="[22:48:34]">&lt;oriansj&gt;</a></span><span class="message">sam_: well my preference is a simple to follow procedure to get people to a consistent and minimal development environment</span></div><div class="line" id="224921"><span class="nick" style="color:#8dd3c7"><a href="#224921" label="[22:49:21]">&lt;oriansj&gt;</a></span><span class="message">that way, regardless of what distro they start with they can easily get setup to be productive on stage0 and above work</span></div><div class="line" id="225140"><span class="nick" style="color:#8dd3c7"><a href="#225140" label="[22:51:40]">&lt;oriansj&gt;</a></span><span class="message">so emerge -av sys-kernel/gentoo-kernel looks like it'll save me a good bit of work on making kernel config files</span></div><div class="line" id="225218"><span class="nick" style="color:#8dd3c7"><a href="#225218" label="[22:52:18]">&lt;oriansj&gt;</a></span><span class="message">and it'll still be build so it shouldn't be hard for a user to go back and customize further</span></div><div class="line" id="225543"><span class="nick" style="color:#6d2462"><a href="#225543" label="[22:55:43]">&lt;sam_&gt;</a></span><span class="message">exactly</span></div><div class="line" id="225921"><span class="nick" style="color:#8dd3c7"><a href="#225921" label="[22:59:21]">&lt;oriansj&gt;</a></span><span class="message">now to tweak it so that they are under 80char lines</span></div><div class="line" id="231813"><span class="nick" style="color:#8dd3c7"><a href="#231813" label="[23:18:13]">&lt;oriansj&gt;</a></span><span class="message">this should work and allow debugging: <a rel="nofollow" href="https://paste.debian.net/1252599/">https://paste.debian.net/1252599/</a> </span></div><div class="line" id="231919"><span class="nick" style="color:#8dd3c7"><a href="#231919" label="[23:19:19]">&lt;oriansj&gt;</a></span><span class="message">and probably should add a note about the different alternate architectures they could select at that point</span></div><div class="line" id="234807"><span class="nick" style="color:#6d2462"><a href="#234807" label="[23:48:07]">&lt;sam_&gt;</a></span><span class="message">looking good so far oriansj</span></div><div class="line" id="234809"><span class="nick" style="color:#6d2462"><a href="#234809" label="[23:48:09]">&lt;sam_&gt;</a></span><span class="message">let me have a think</span></div><div class="line" id="234827"><span class="nick" style="color:#6d2462"><a href="#234827" label="[23:48:27]">&lt;sam_&gt;</a></span><span class="message">we could make a note about openrc or systemd, as well as musl options but not sure if that's necessary</span></div><div class="line" id="234850"><span class="nick" style="color:#6d2462"><a href="#234850" label="[23:48:50]">&lt;sam_&gt;</a></span><span class="message">looks pretty good to em</span></div><div class="line" id="234920"><span class="nick" style="color:#8dd3c7"><a href="#234920" label="[23:49:20]">&lt;oriansj&gt;</a></span><span class="message">sam_: I am also testing the steps as I go so I'm going to be a bit slow</span></div><div class="line" id="235035"><span class="nick" style="color:#8dd3c7"><a href="#235035" label="[23:50:35]">&lt;oriansj&gt;</a></span><span class="message">a note (or probably expanded steps) about the init seems like a reasonable thing to do</span></div><div class="line" id="235116"><span class="nick" style="color:#8dd3c7"><a href="#235116" label="[23:51:16]">&lt;oriansj&gt;</a></span><span class="message">and alternate libc seems like a bigger bit of work</span></div><div class="line" id="235215"><span class="nick" style="color:#8dd3c7"><a href="#235215" label="[23:52:15]">&lt;oriansj&gt;</a></span><span class="message">although I probably should write up something about those things to help people too</span></div><div class="line" id="235241"><span class="nick" style="color:#8dd3c7"><a href="#235241" label="[23:52:41]">&lt;oriansj&gt;</a></span><span class="message">(might be separated out notes like I did for virtualbox and vmware)</span></div><br /></div></body></html>