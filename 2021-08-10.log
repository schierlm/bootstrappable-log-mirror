<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-08-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004047"><span class="nick" style="color:#8dd3c7"><a href="#004047" label="[00:40:47]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="005700"><span class="nick" style="color:#2e2a4a"><a href="#005700" label="[00:57:00]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="010057"><span class="nick" style="color:#2e2a4a"><a href="#010057" label="[01:00:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: quick question, in hex2_word.c::DoByte you call hex(c, source_file) quite a few times. Can't you just call it at the beginning of the file and store the result?</span></div><div class="line" id="010153"><span class="nick" style="color:#2e2a4a"><a href="#010153" label="[01:01:53]">&lt;stikonas&gt;</a></span><span class="message">or am I missing something</span></div><div class="line" id="010216"><span class="nick" style="color:#2e2a4a"><a href="#010216" label="[01:02:16]">&lt;stikonas&gt;</a></span><span class="message">well, hex does consume the whole comment but that should be fine</span></div><div class="line" id="020342"><span class="nick" style="color:#6b8072"><a href="#020342" label="[02:03:42]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: if it's anything like Trillian (another new project which Google is backing), it will work like Certificate Transparency</span></div><div class="line" id="020345"><span class="nick" style="color:#6b8072"><a href="#020345" label="[02:03:45]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/google/trillian">https://github.com/google/trillian</a> </span></div><div class="line" id="020437"><span class="nick" style="color:#6b8072"><a href="#020437" label="[02:04:37]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure that using a blockchain (maybe ethereum) would be a bad idea, but i don't think we have enough data on possible attacks to decide what a realistic threat model is yet</span></div><div class="line" id="023024"><span class="nick" style="color:#8dd3c7"><a href="#023024" label="[02:30:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: because <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_linker.c#L352">https://github.com/oriansj/mescc-tools/blob/master/hex2_linker.c#L352</a>  it just reads one char from the source file at a time (Or an entire line comment)</span></div><div class="line" id="023417"><span class="nick" style="color:#2e2a4a"><a href="#023417" label="[02:34:17]">&lt;stikonas&gt;</a></span><span class="message">well, that function either reads 0 or entire line, we read character earlier and just pass it to that fucntion</span></div><div class="line" id="023550"><span class="nick" style="color:#8dd3c7"><a href="#023550" label="[02:35:50]">&lt;oriansj&gt;</a></span><span class="message">stikonas: yep</span></div><div class="line" id="023634"><span class="nick" style="color:#8dd3c7"><a href="#023634" label="[02:36:34]">&lt;oriansj&gt;</a></span><span class="message">and updates the line_number so that error messages can have an accurate line number in the message</span></div><div class="line" id="023819"><span class="nick" style="color:#8dd3c7"><a href="#023819" label="[02:38:19]">&lt;oriansj&gt;</a></span><span class="message">and yes we could do caching of the input (or the generated hex) but that would add complexity to any implementation in assembly.</span></div><div class="line" id="023914"><span class="nick" style="color:#2e2a4a"><a href="#023914" label="[02:39:14]">&lt;stikonas&gt;</a></span><span class="message">oh yes, ok I was ignoring that line_number because I don't need it for hex1</span></div><div class="line" id="024012"><span class="nick" style="color:#2e2a4a"><a href="#024012" label="[02:40:12]">&lt;stikonas&gt;</a></span><span class="message">trying to keep hex1 as short as possible</span></div><div class="line" id="024028"><span class="nick" style="color:#2e2a4a"><a href="#024028" label="[02:40:28]">&lt;stikonas&gt;</a></span><span class="message">so non-essential features can go to hex2</span></div><div class="line" id="024059"><span class="nick" style="color:#2e2a4a"><a href="#024059" label="[02:40:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, more work on hex1 will have to wait for another day</span></div><div class="line" id="024120"><span class="nick" style="color:#8dd3c7"><a href="#024120" label="[02:41:20]">&lt;oriansj&gt;</a></span><span class="message">stikonas: which format do you tend to you for jumps and function calls?</span></div><div class="line" id="024201"><span class="nick" style="color:#2e2a4a"><a href="#024201" label="[02:42:01]">&lt;stikonas&gt;</a></span><span class="message">it's jal for function calls so J-type</span></div><div class="line" id="024207"><span class="nick" style="color:#2e2a4a"><a href="#024207" label="[02:42:07]">&lt;stikonas&gt;</a></span><span class="message">and B for other branch jumps</span></div><div class="line" id="024211"><span class="nick" style="color:#2e2a4a"><a href="#024211" label="[02:42:11]">&lt;stikonas&gt;</a></span><span class="message">those are most common</span></div><div class="line" id="024229"><span class="nick" style="color:#8dd3c7"><a href="#024229" label="[02:42:29]">&lt;oriansj&gt;</a></span><span class="message">because you could limit hex1 to just @ or $</span></div><div class="line" id="024242"><span class="nick" style="color:#8dd3c7"><a href="#024242" label="[02:42:42]">&lt;oriansj&gt;</a></span><span class="message">(or both if you need both a bunch)</span></div><div class="line" id="024300"><span class="nick" style="color:#8dd3c7"><a href="#024300" label="[02:43:00]">&lt;oriansj&gt;</a></span><span class="message">and single character labels</span></div><div class="line" id="024309"><span class="nick" style="color:#2e2a4a"><a href="#024309" label="[02:43:09]">&lt;stikonas&gt;</a></span><span class="message">oh yes, definitely single character labels</span></div><div class="line" id="024407"><span class="nick" style="color:#2e2a4a"><a href="#024407" label="[02:44:07]">&lt;stikonas&gt;</a></span><span class="message">we'll see regarding other encodings, they might not be too bad</span></div><div class="line" id="024414"><span class="nick" style="color:#2e2a4a"><a href="#024414" label="[02:44:14]">&lt;stikonas&gt;</a></span><span class="message">anyway, going to sleep now</span></div><div class="line" id="024430"><span class="nick" style="color:#8dd3c7"><a href="#024430" label="[02:44:30]">&lt;oriansj&gt;</a></span><span class="message">and you can collapse UpdateShiftRegister if you can find a way to just use one of the type formats</span></div><div class="line" id="024539"><span class="nick" style="color:#8dd3c7"><a href="#024539" label="[02:45:39]">&lt;oriansj&gt;</a></span><span class="message">(skip !, ~, ., %, &amp; and &gt; entirely for hex1)</span></div><div class="line" id="024648"><span class="nick" style="color:#8dd3c7"><a href="#024648" label="[02:46:48]">&lt;oriansj&gt;</a></span><span class="message">probably can skip &lt; and ^ too (I don't think we even use ^ in RISC-V yet)</span></div><div class="line" id="024720"><span class="nick" style="color:#80b1d3"><a href="#024720" label="[02:47:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, none of &lt; ^ were used up to now</span></div><div class="line" id="024745"><span class="nick" style="color:#8dd3c7"><a href="#024745" label="[02:47:45]">&lt;oriansj&gt;</a></span><span class="message">and DoByte needs only handle hex so that can be seriously simplified</span></div><div class="line" id="024834"><span class="nick" style="color:#80b1d3"><a href="#024834" label="[02:48:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I'm only doing hex part</span></div><div class="line" id="024849"><span class="nick" style="color:#80b1d3"><a href="#024849" label="[02:48:49]">&lt;stikonas[m]&gt;</a></span><span class="message">And no &quot;update&quot; in it</span></div><div class="line" id="024911"><span class="nick" style="color:#80b1d3"><a href="#024911" label="[02:49:11]">&lt;stikonas[m]&gt;</a></span><span class="message">That's only used with .</span></div><div class="line" id="024931"><span class="nick" style="color:#8dd3c7"><a href="#024931" label="[02:49:31]">&lt;oriansj&gt;</a></span><span class="message">and you can even reduce line comment support to just # or ;</span></div><div class="line" id="024955"><span class="nick" style="color:#8dd3c7"><a href="#024955" label="[02:49:55]">&lt;oriansj&gt;</a></span><span class="message">which will not be needed in hex1</span></div><div class="line" id="025025"><span class="nick" style="color:#80b1d3"><a href="#025025" label="[02:50:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, that's just one branch statement...</span></div><div class="line" id="025038"><span class="nick" style="color:#80b1d3"><a href="#025038" label="[02:50:38]">&lt;stikonas[m]&gt;</a></span><span class="message">I would lean towards leaving both...</span></div><div class="line" id="025041"><span class="nick" style="color:#8dd3c7"><a href="#025041" label="[02:50:41]">&lt;oriansj&gt;</a></span><span class="message">and Throwaway_token and consume_token can be reduced to a single fgetc</span></div><div class="line" id="025053"><span class="nick" style="color:#8dd3c7"><a href="#025053" label="[02:50:53]">&lt;oriansj&gt;</a></span><span class="message">and no need to clear scratch</span></div><div class="line" id="025105"><span class="nick" style="color:#80b1d3"><a href="#025105" label="[02:51:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, throwaway token is already done</span></div><div class="line" id="025121"><span class="nick" style="color:#80b1d3"><a href="#025121" label="[02:51:21]">&lt;stikonas[m]&gt;</a></span><span class="message">And most if do_byte</span></div><div class="line" id="025134"><span class="nick" style="color:#8dd3c7"><a href="#025134" label="[02:51:34]">&lt;oriansj&gt;</a></span><span class="message">using a 256 element array is all one needs for label address lookups and storage</span></div><div class="line" id="025229"><span class="nick" style="color:#80b1d3"><a href="#025229" label="[02:52:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, both comments were already done before</span></div><div class="line" id="025253"><span class="nick" style="color:#8dd3c7"><a href="#025253" label="[02:52:53]">&lt;oriansj&gt;</a></span><span class="message">just read the char after : and &lt;&lt; 2 + base_address of table to store to read the address relating to the :l</span></div><div class="line" id="025410"><span class="nick" style="color:#80b1d3"><a href="#025410" label="[02:54:10]">&lt;stikonas[m]&gt;</a></span><span class="message">(I started by cleaning up my hex1_x86.S and building on top of that, some parts are now changed, but comment implementation is already there)</span></div><div class="line" id="025500"><span class="nick" style="color:#8dd3c7"><a href="#025500" label="[02:55:00]">&lt;oriansj&gt;</a></span><span class="message">I trust you'll find the minimal subset so that you will not have to deal with jump and/or call offsets when dealing with hex2</span></div><div class="line" id="041558"><span class="nick" style="color:#6d2462"><a href="#041558" label="[04:15:58]">&lt;pabs3&gt;</a></span><span class="message">Hagfish: re &quot;everyone will keep using language-specific package managers&quot;, do you see a way to change that trend?</span></div><div class="line" id="045216"><span class="nick" style="color:#6b8072"><a href="#045216" label="[04:52:16]">&lt;Hagfish&gt;</a></span><span class="message">i'm wondering if they might all converge towards a standard package format + security model</span></div><div class="line" id="045245"><span class="nick" style="color:#6b8072"><a href="#045245" label="[04:52:45]">&lt;Hagfish&gt;</a></span><span class="message">The Update Framework are doing some good work in that area</span></div><div class="line" id="045335"><span class="nick" style="color:#6b8072"><a href="#045335" label="[04:53:35]">&lt;Hagfish&gt;</a></span><span class="message">i can see the argument that there should be multiple competing tools for downloading packages and maintaining repos, etc.</span></div><div class="line" id="045354"><span class="nick" style="color:#6b8072"><a href="#045354" label="[04:53:54]">&lt;Hagfish&gt;</a></span><span class="message">and there should be multiple organisations who decide what is allowed in each repo</span></div><div class="line" id="045403"><span class="nick" style="color:#6b8072"><a href="#045403" label="[04:54:03]">&lt;Hagfish&gt;</a></span><span class="message">so some amount of &quot;fragmentation&quot; is healthy</span></div><div class="line" id="045437"><span class="nick" style="color:#6b8072"><a href="#045437" label="[04:54:37]">&lt;Hagfish&gt;</a></span><span class="message">i think the biggest cultural divide is how much an ecosystem values stability and long-term support</span></div><div class="line" id="045507"><span class="nick" style="color:#6b8072"><a href="#045507" label="[04:55:07]">&lt;Hagfish&gt;</a></span><span class="message">i don't know if the technology itself can help much with that</span></div><div class="line" id="050251"><span class="nick" style="color:#6d2462"><a href="#050251" label="[05:02:51]">&lt;pabs3&gt;</a></span><span class="message">I think language-specific package managers arose because the Linux package managers weren't targetted at proprietary OSes like Windows/macOS, and any cross-language package manager would need this to have any chance of replacing them. also I think people often want the tools for the language to be written in the language so they can understand/modify them</span></div><div class="line" id="051537"><span class="nick" style="color:#234e69"><a href="#051537" label="[05:15:37]">&lt;siraben&gt;</a></span><span class="message">pabs3: I think Nix has been a great way to reduce reliance for me on language-specific package managers</span></div><div class="line" id="051604"><span class="nick" style="color:#234e69"><a href="#051604" label="[05:16:04]">&lt;siraben&gt;</a></span><span class="message">In particular, ecosystems like Python are a mess in terms of reproducibility</span></div><div class="line" id="051610"><span class="nick" style="color:#6d2462"><a href="#051610" label="[05:16:10]">&lt;pabs3&gt;</a></span><span class="message">which OSes are you using it on?</span></div><div class="line" id="051620"><span class="nick" style="color:#234e69"><a href="#051620" label="[05:16:20]">&lt;siraben&gt;</a></span><span class="message">macOS and NixOS and other distros</span></div><div class="line" id="051636"><span class="nick" style="color:#234e69"><a href="#051636" label="[05:16:36]">&lt;siraben&gt;</a></span><span class="message">My home configuration is the same across all of them</span></div><div class="line" id="051801"><span class="nick" style="color:#6d2462"><a href="#051801" label="[05:18:01]">&lt;pabs3&gt;</a></span><span class="message">during the next Debian cycle I want to try to wean Debian off using source artefacts from packaging ecosystems like PyPI and move towards upstream git repos</span></div><div class="line" id="051816"><span class="nick" style="color:#6d2462"><a href="#051816" label="[05:18:16]">&lt;pabs3&gt;</a></span><span class="message">the discussion the Debian Python team had about this was interesting: <a rel="nofollow" href="https://lists.debian.org/debian-python/2021/06/threads.html#00026">https://lists.debian.org/debian-python/2021/06/threads.html#00026</a> </span></div><div class="line" id="051819"><span class="nick" style="color:#234e69"><a href="#051819" label="[05:18:19]">&lt;siraben&gt;</a></span><span class="message">drakonis suggests Guix which is the same idea as Nix</span></div><div class="line" id="051830"><span class="nick" style="color:#234e69"><a href="#051830" label="[05:18:30]">&lt;siraben&gt;</a></span><span class="message">but it's more restrictive for me because no macOS support</span></div><div class="line" id="051841"><span class="nick" style="color:#6d2462"><a href="#051841" label="[05:18:41]">&lt;pabs3&gt;</a></span><span class="message">it highlighted that just switching to upstream git isn't enough, we should audit the diffs between the two</span></div><div class="line" id="051854"><span class="nick" style="color:#234e69"><a href="#051854" label="[05:18:54]">&lt;siraben&gt;</a></span><span class="message">Yeah, there can be differences between upstream git and pypi</span></div><div class="line" id="051859"><span class="nick" style="color:#234e69"><a href="#051859" label="[05:18:59]">&lt;siraben&gt;</a></span><span class="message">which is annoying</span></div><div class="line" id="052012"><span class="nick" style="color:#6d2462"><a href="#052012" label="[05:20:12]">&lt;pabs3&gt;</a></span><span class="message">same in the Rust ecosystem. the diffs in the browser extension ecosystem can be much much worse though</span></div><div class="line" id="052019"><span class="nick" style="color:#234e69"><a href="#052019" label="[05:20:19]">&lt;siraben&gt;</a></span><span class="message">Nix prefixes store entries with a hash of the derivation (build recipe) so if anything changes in the underlying derivation, the hash does as well and so do all the reverse dependenncies</span></div><div class="line" id="052055"><span class="nick" style="color:#6d2462"><a href="#052055" label="[05:20:55]">&lt;pabs3&gt;</a></span><span class="message">in one particular case, the Rust crate shipped some pre-generated stuff and didn't ship the source/tool needed to re-generate it, which were in the git repo though</span></div><div class="line" id="052055"><span class="nick" style="color:#234e69"><a href="#052055" label="[05:20:55]">&lt;siraben&gt;</a></span><span class="message">Also in doing so it makes it safe to get from the cache instead of rebuilding</span></div><div class="line" id="052219"><span class="nick" style="color:#234e69"><a href="#052219" label="[05:22:19]">&lt;siraben&gt;</a></span><span class="message">For Rust packages we prefer upstream git repos and have a vendor sha hash</span></div><div class="line" id="052300"><span class="nick" style="color:#234e69"><a href="#052300" label="[05:23:00]">&lt;siraben&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/siraben/nixpkgs/blob/9bda04939e74610cadee2c53b2cf448e28e4b45b/pkgs/development/tools/knightos/regenkfs/default.nix">https://github.com/siraben/nixpkgs/blob/9bda04939e74610cadee2c53b2cf448e28e4b45b/pkgs/development/tools/knightos/regenkfs/default.nix</a> </span></div><div class="line" id="052312"><span class="nick" style="color:#234e69"><a href="#052312" label="[05:23:12]">&lt;siraben&gt;</a></span><span class="message">pabs3: that sounds nasty, oof</span></div><div class="line" id="052401"><span class="nick" style="color:#6d2462"><a href="#052401" label="[05:24:01]">&lt;pabs3&gt;</a></span><span class="message">I've pretty much given up on devs doing the right thing when it comes to choosing their source and actually building from source</span></div><div class="line" id="052457"><span class="nick" style="color:#6c3d55"><a href="#052457" label="[05:24:57]">&lt;drakonis&gt;</a></span><span class="message">rust hellworld</span></div><div class="line" id="052624"><span class="nick" style="color:#6c3d55"><a href="#052624" label="[05:26:24]">&lt;drakonis&gt;</a></span><span class="message">siraben: has nix's packaging quality improved in the past several months?</span></div><div class="line" id="052638"><span class="nick" style="color:#234e69"><a href="#052638" label="[05:26:38]">&lt;siraben&gt;</a></span><span class="message">drakonis: how would I measure that</span></div><div class="line" id="052653"><span class="nick" style="color:#234e69"><a href="#052653" label="[05:26:53]">&lt;siraben&gt;</a></span><span class="message">we're still more up to date than any other distro and almost as large as AUR</span></div><div class="line" id="052929"><span class="nick" style="color:#6c3d55"><a href="#052929" label="[05:29:29]">&lt;drakonis&gt;</a></span><span class="message">that's a measurement of quantity here</span></div><div class="line" id="053017"><span class="nick" style="color:#6c3d55"><a href="#053017" label="[05:30:17]">&lt;drakonis&gt;</a></span><span class="message">perhaps the best way to measure quality is whether they follow a certain level of cleanliness?</span></div><div class="line" id="053028"><span class="nick" style="color:#234e69"><a href="#053028" label="[05:30:28]">&lt;siraben&gt;</a></span><span class="message">Sounds subjective, heh.</span></div><div class="line" id="053030"><span class="nick" style="color:#234e69"><a href="#053030" label="[05:30:30]">&lt;siraben&gt;</a></span><span class="message">There's people fixing cross-compilation issues, broken packages get fixed, reproducibility fixes, etc.</span></div><div class="line" id="053031"><span class="nick" style="color:#6c3d55"><a href="#053031" label="[05:30:31]">&lt;drakonis&gt;</a></span><span class="message">very</span></div><div class="line" id="053037"><span class="nick" style="color:#234e69"><a href="#053037" label="[05:30:37]">&lt;siraben&gt;</a></span><span class="message">So I think the quality is getting better all the time</span></div><div class="line" id="053046"><span class="nick" style="color:#234e69"><a href="#053046" label="[05:30:46]">&lt;siraben&gt;</a></span><span class="message">we're deprecating phases and other legacy things</span></div><div class="line" id="053103"><span class="nick" style="color:#234e69"><a href="#053103" label="[05:31:03]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/issues/28910">https://github.com/NixOS/nixpkgs/issues/28910</a> </span></div><div class="line" id="053104"><span class="nick" style="color:#6c3d55"><a href="#053104" label="[05:31:04]">&lt;drakonis&gt;</a></span><span class="message">phases?</span></div><div class="line" id="053109"><span class="nick" style="color:#6c3d55"><a href="#053109" label="[05:31:09]">&lt;drakonis&gt;</a></span><span class="message">wait what.</span></div><div class="line" id="053117"><span class="nick" style="color:#234e69"><a href="#053117" label="[05:31:17]">&lt;siraben&gt;</a></span><span class="message">explicit setting of phases</span></div><div class="line" id="053123"><span class="nick" style="color:#6c3d55"><a href="#053123" label="[05:31:23]">&lt;drakonis&gt;</a></span><span class="message">oh</span></div><div class="line" id="053147"><span class="nick" style="color:#234e69"><a href="#053147" label="[05:31:47]">&lt;siraben&gt;</a></span><span class="message">you don't use nix currently?</span></div><div class="line" id="053154"><span class="nick" style="color:#6c3d55"><a href="#053154" label="[05:31:54]">&lt;drakonis&gt;</a></span><span class="message">i have been out of it for some time now</span></div><div class="line" id="053211"><span class="nick" style="color:#234e69"><a href="#053211" label="[05:32:11]">&lt;siraben&gt;</a></span><span class="message">IMO quality and quantity are always improving for Nixpkgs</span></div><div class="line" id="053248"><span class="nick" style="color:#234e69"><a href="#053248" label="[05:32:48]">&lt;siraben&gt;</a></span><span class="message">What's the situation like on Guix?</span></div><div class="line" id="053314"><span class="nick" style="color:#6c3d55"><a href="#053314" label="[05:33:14]">&lt;drakonis&gt;</a></span><span class="message">ever marching forward</span></div><div class="line" id="053348"><span class="nick" style="color:#6c3d55"><a href="#053348" label="[05:33:48]">&lt;drakonis&gt;</a></span><span class="message">upstreaming work on the home manager equivalent still ongoing</span></div><div class="line" id="053409"><span class="nick" style="color:#234e69"><a href="#053409" label="[05:34:09]">&lt;siraben&gt;</a></span><span class="message">I wish I could use Guix to get some ideas from it</span></div><div class="line" id="053415"><span class="nick" style="color:#6c3d55"><a href="#053415" label="[05:34:15]">&lt;drakonis&gt;</a></span><span class="message">added a nicer way to look up inputs</span></div><div class="line" id="053418"><span class="nick" style="color:#6c3d55"><a href="#053418" label="[05:34:18]">&lt;drakonis&gt;</a></span><span class="message">package inputs</span></div><div class="line" id="053504"><span class="nick" style="color:#6c3d55"><a href="#053504" label="[05:35:04]">&lt;drakonis&gt;</a></span><span class="message">let's see</span></div><div class="line" id="053609"><span class="nick" style="color:#6c3d55"><a href="#053609" label="[05:36:09]">&lt;drakonis&gt;</a></span><span class="message">better setuid support</span></div><div class="line" id="053631"><span class="nick" style="color:#6c3d55"><a href="#053631" label="[05:36:31]">&lt;drakonis&gt;</a></span><span class="message">python still in better condition than nixpkgs</span></div><div class="line" id="053645"><span class="nick" style="color:#234e69"><a href="#053645" label="[05:36:45]">&lt;siraben&gt;</a></span><span class="message">ooh, how so?</span></div><div class="line" id="053825"><span class="nick" style="color:#6c3d55"><a href="#053825" label="[05:38:25]">&lt;drakonis&gt;</a></span><span class="message">as guix does not rely on scripts for generating language specific environment on the fly</span></div><div class="line" id="053902"><span class="nick" style="color:#6c3d55"><a href="#053902" label="[05:39:02]">&lt;drakonis&gt;</a></span><span class="message">it has packaged things in a way that if you install them or invoke a regular environment, the packages are visible to the resulting environment</span></div><div class="line" id="053952"><span class="nick" style="color:#6c3d55"><a href="#053952" label="[05:39:52]">&lt;drakonis&gt;</a></span><span class="message">oh yeah i almost forgot</span></div><div class="line" id="054000"><span class="nick" style="color:#6c3d55"><a href="#054000" label="[05:40:00]">&lt;drakonis&gt;</a></span><span class="message">it was sped up recently</span></div><div class="line" id="054004"><span class="nick" style="color:#6c3d55"><a href="#054004" label="[05:40:04]">&lt;drakonis&gt;</a></span><span class="message">grafts were sped up, that is</span></div><div class="line" id="054150"><span class="nick" style="color:#6c3d55"><a href="#054150" label="[05:41:50]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix.git/commit/?id=898238b9f5199aaebffa508f62a2a00854370048">https://git.savannah.gnu.org/cgit/guix.git/commit/?id=898238b9f5199aaebffa508f62a2a00854370048</a> </span></div><div class="line" id="054152"><span class="nick" style="color:#6c3d55"><a href="#054152" label="[05:41:52]">&lt;drakonis&gt;</a></span><span class="message">build against this</span></div><div class="line" id="054238"><span class="nick" style="color:#6c3d55"><a href="#054238" label="[05:42:38]">&lt;drakonis&gt;</a></span><span class="message">and it should be exposed to further python invocations</span></div><div class="line" id="054257"><span class="nick" style="color:#6c3d55"><a href="#054257" label="[05:42:57]">&lt;drakonis&gt;</a></span><span class="message">anyways you get the idea</span></div><div class="line" id="054652"><span class="nick" style="color:#6c3d55"><a href="#054652" label="[05:46:52]">&lt;drakonis&gt;</a></span><span class="message">siraben: anyhow, the next release will be plenty interesting</span></div><div class="line" id="055342"><span class="nick" style="color:#234e69"><a href="#055342" label="[05:53:42]">&lt;siraben&gt;</a></span><span class="message">I still have the urge to reduce Nixpkgs' bootstrap</span></div><div class="line" id="055540"><span class="nick" style="color:#6c3d55"><a href="#055540" label="[05:55:40]">&lt;drakonis&gt;</a></span><span class="message">would be impressive</span></div><div class="line" id="060140"><span class="nick" style="color:#6c3d55"><a href="#060140" label="[06:01:40]">&lt;drakonis&gt;</a></span><span class="message">since there isnt exactly a huge drive to do it</span></div><div class="line" id="060640"><span class="nick" style="color:#6c3d55"><a href="#060640" label="[06:06:40]">&lt;drakonis&gt;</a></span><span class="message">ie: not a community wide concern</span></div><div class="line" id="061310"><span class="nick" style="color:#6c3d55"><a href="#061310" label="[06:13:10]">&lt;drakonis&gt;</a></span><span class="message">maybe i should hit up the matrix channels</span></div><div class="line" id="061952"><span class="nick" style="color:#234e69"><a href="#061952" label="[06:19:52]">&lt;siraben&gt;</a></span><span class="message">drakonis: join us</span></div><div class="line" id="135938"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="150908"><span class="nick" style="color:#6b8072"><a href="#150908" label="[15:09:08]">&lt;Hagfish&gt;</a></span><span class="message">pabs3: coincidentally, given our recent chat: <a rel="nofollow" href="https://news.ycombinator.com/item?id=28122779">https://news.ycombinator.com/item?id=28122779</a> </span></div><div class="line" id="150927"><span class="nick" style="color:#6b8072"><a href="#150927" label="[15:09:27]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Maybe the solution is some kind of standard spec for how package management should work, and the manifest formats, etc, and then each language ecosystem implements that standard.&quot;</span></div><div class="line" id="150956"><span class="nick" style="color:#6b8072"><a href="#150956" label="[15:09:56]">&lt;Hagfish&gt;</a></span><span class="message">that's basically what i was thinking</span></div><div class="line" id="161333"><span class="nick">***</span><span class="message notice">jackhill_ is now known as jackhill</span></div><div class="line" id="174204"><span class="nick" style="color:#d9d9d9"><a href="#174204" label="[17:42:04]">&lt;gforce_de1977&gt;</a></span><span class="message">dear lovely hackers, time is flying here, and i dont have enough time for hacking 8-) just a friendly hello, saying that some checksums seems wrong: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/log_fosslinux__master-f9ebb33-i686_kernel3.18.140.txt">http://intercity-vpn.de/bootstrap/log_fosslinux__master-f9ebb33-i686_kernel3.18.140.txt</a>  - can somebody confirm that?</span></div><div class="line" id="174239"><span class="nick" style="color:#234e69"><a href="#174239" label="[17:42:39]">&lt;siraben&gt;</a></span><span class="message">FYI GitHub is currently down</span></div><div class="line" id="182113"><span class="nick" style="color:#2e2a4a"><a href="#182113" label="[18:21:13]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977, might be due to 32-bit kernel, not sure if fossy tested it with it</span></div><div class="line" id="182203"><span class="nick" style="color:#2e2a4a"><a href="#182203" label="[18:22:03]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: running with a 32-bit kernel is a bit on hold right now anyway</span></div><div class="line" id="182216"><span class="nick" style="color:#2e2a4a"><a href="#182216" label="[18:22:16]">&lt;stikonas&gt;</a></span><span class="message">until fossy finishes kernel building work</span></div><div class="line" id="182233"><span class="nick" style="color:#2e2a4a"><a href="#182233" label="[18:22:33]">&lt;stikonas&gt;</a></span><span class="message">since we can't fit in 4 GB of RAM</span></div><div class="line" id="184400"><span class="nick" style="color:#8dd3c7"><a href="#184400" label="[18:44:00]">&lt;oriansj&gt;</a></span><span class="message">The 3 failures seems related to perl 5.32.1</span></div><div class="line" id="184902"><span class="nick" style="color:#8dd3c7"><a href="#184902" label="[18:49:02]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: in regards to sigstore. I don't quite see how it improves things. If anything I can see ways it can be abused to make things far worse. FLOSS at its heart is a people sharing code with friends and the community; with curation occuring at the distro level.</span></div><div class="line" id="184938"><span class="nick" style="color:#8dd3c7"><a href="#184938" label="[18:49:38]">&lt;oriansj&gt;</a></span><span class="message">^things things^things worse^</span></div><div class="line" id="185053"><span class="nick" style="color:#8dd3c7"><a href="#185053" label="[18:50:53]">&lt;oriansj&gt;</a></span><span class="message">but perhaps that is because I am doing a compare against what NIX and Guix provide out of the box.</span></div><div class="line" id="191439"><span class="nick" style="color:#6b8072"><a href="#191439" label="[19:14:39]">&lt;Hagfish&gt;</a></span><span class="message">oriansj: yeah, i think the value proposition is much smaller for ecosystems like Guix/Nix</span></div><div class="line" id="191529"><span class="nick" style="color:#6b8072"><a href="#191529" label="[19:15:29]">&lt;Hagfish&gt;</a></span><span class="message">it's probably supposed to appeal to ecosystems that want to keep doing things their own way, but still get the benefit of signed releases</span></div><div class="line" id="191631"><span class="nick" style="color:#6b8072"><a href="#191631" label="[19:16:31]">&lt;Hagfish&gt;</a></span><span class="message">i do like the idea, though, that a package manager could check an append-only log, to ensure that the software you are downloading has been publicly announced (and hasn't been specially crafted to exploit you)</span></div><div class="line" id="191728"><span class="nick" style="color:#6b8072"><a href="#191728" label="[19:17:28]">&lt;Hagfish&gt;</a></span><span class="message">of course a malicious update could contain a branch like &quot;if MAC address == ...&quot;, but that should be hard to explain to an auditor</span></div><div class="line" id="212255"><span class="nick" style="color:#bc80bd"><a href="#212255" label="[21:22:55]">&lt;xentrac&gt;</a></span><span class="message">Hagfish: I recall that one of the Underhanded C Contest winners would falsify votes only on Wednesdays</span></div><div class="line" id="212335"><span class="nick" style="color:#bc80bd"><a href="#212335" label="[21:23:35]">&lt;xentrac&gt;</a></span><span class="message">because formatting a date with a Wednesday in it would overflow a buffer</span></div><div class="line" id="212404"><span class="nick" style="color:#bc80bd"><a href="#212404" label="[21:24:04]">&lt;xentrac&gt;</a></span><span class="message">the certificate transparency benefit sounds pretty significant</span></div><div class="line" id="224217"><span class="nick" style="color:#6b8072"><a href="#224217" label="[22:42:17]">&lt;Hagfish&gt;</a></span><span class="message">i wonder what the limits of static analysis are in terms of security</span></div><div class="line" id="224249"><span class="nick" style="color:#6b8072"><a href="#224249" label="[22:42:49]">&lt;Hagfish&gt;</a></span><span class="message">i like the fact that ecosystems are starting to think about making apps state up front which permissions they need</span></div><div class="line" id="224306"><span class="nick" style="color:#6b8072"><a href="#224306" label="[22:43:06]">&lt;Hagfish&gt;</a></span><span class="message">obviously apps do that, and browser extensions, but i think Deno does that for javascript packages</span></div><div class="line" id="224344"><span class="nick" style="color:#6b8072"><a href="#224344" label="[22:43:44]">&lt;Hagfish&gt;</a></span><span class="message">Endo is another (more experimental) technology that tries to give capability security to javascript modules</span></div><div class="line" id="224425"><span class="nick" style="color:#6b8072"><a href="#224425" label="[22:44:25]">&lt;Hagfish&gt;</a></span><span class="message">and obviously there are attempts like SELinux and similar which try to apply this to existing desktop apps (somewhat awkwardly)</span></div><div class="line" id="224517"><span class="nick" style="color:#6b8072"><a href="#224517" label="[22:45:17]">&lt;Hagfish&gt;</a></span><span class="message">just being able to say &quot;the code in this library will never be able to start a new process, or access the network, or the filesystem&quot; is a really useful primitive to have when pulling in a dependency</span></div><div class="line" id="224656"><span class="nick" style="color:#6b8072"><a href="#224656" label="[22:46:56]">&lt;Hagfish&gt;</a></span><span class="message">developers probably need to get used to putting &quot;guards&quot; into their test suites, to detect if code is trying to exfiltrate data</span></div><div class="line" id="224724"><span class="nick" style="color:#6b8072"><a href="#224724" label="[22:47:24]">&lt;Hagfish&gt;</a></span><span class="message">assert that no network connections are made, or unexpected files written to or read, when the feature/unit test suite is run</span></div><div class="line" id="224800"><span class="nick" style="color:#6b8072"><a href="#224800" label="[22:48:00]">&lt;Hagfish&gt;</a></span><span class="message">i've read discussions of interesting theoretical approaches of code detecting when it is run in a production environment, versus in a test</span></div><div class="line" id="224851"><span class="nick" style="color:#6b8072"><a href="#224851" label="[22:48:51]">&lt;Hagfish&gt;</a></span><span class="message">one of the things you need to lock down is access to the current time, so that a function can't become malicious after a certain date</span></div><div class="line" id="224929"><span class="nick" style="color:#6b8072"><a href="#224929" label="[22:49:29]">&lt;Hagfish&gt;</a></span><span class="message">also not allowing access to randomness, otherwise it could execute its payload only one in a billion invocations</span></div><div class="line" id="225013"><span class="nick" style="color:#6b8072"><a href="#225013" label="[22:50:13]">&lt;Hagfish&gt;</a></span><span class="message">these are all defences in depth that increase the cost to the attacker (and make it harder for someone to claim that a security issue is accidental)</span></div><div class="line" id="225118"><span class="nick" style="color:#6b8072"><a href="#225118" label="[22:51:18]">&lt;Hagfish&gt;</a></span><span class="message">security doesn't have to be perfect, it just has to raise the cost of the attack above the value to the attacker</span></div><div class="line" id="225418"><span class="nick" style="color:#bc80bd"><a href="#225418" label="[22:54:18]">&lt;xentrac&gt;</a></span><span class="message">you can guarantee that sort of limitation either statically or dynamically</span></div><div class="line" id="225451"><span class="nick" style="color:#bc80bd"><a href="#225451" label="[22:54:51]">&lt;xentrac&gt;</a></span><span class="message">SELinux has a hard time because it's working at process granularity</span></div><div class="line" id="225538"><span class="nick" style="color:#bc80bd"><a href="#225538" label="[22:55:38]">&lt;xentrac&gt;</a></span><span class="message">while technically it's true that &quot;security doesn't have to be perfect, it just has to raise the cost of the attack above the value to the attacker&quot; nearly every inference you could make from this requires knowing both the cost of the attack and the value to the attacker, at least roughly</span></div><div class="line" id="225605"><span class="nick" style="color:#bc80bd"><a href="#225605" label="[22:56:05]">&lt;xentrac&gt;</a></span><span class="message">but it's easy to make errors of literally ten orders of magnitude in those estimates</span></div><div class="line" id="225724"><span class="nick" style="color:#bc80bd"><a href="#225724" label="[22:57:24]">&lt;xentrac&gt;</a></span><span class="message">because the same code may be safeguarding resources that are worth a microdollar or a teradollar, and an exploit, once developed, may be used against one device or against ten billion devices</span></div><div class="line" id="225749"><span class="nick" style="color:#bc80bd"><a href="#225749" label="[22:57:49]">&lt;xentrac&gt;</a></span><span class="message">so in general I am very skeptical of reasoning that invokes &quot;defences in depth that increase the cost to the attacker&quot;</span></div><div class="line" id="225933"><span class="nick" style="color:#bc80bd"><a href="#225933" label="[22:59:33]">&lt;xentrac&gt;</a></span><span class="message">the traditional term for such things is &quot;snake oil security&quot; or &quot;security by obscurity&quot;.  when it's all you've got, well, might as well make it good, but having actual Kerckhoffs-compliant security is a lot better</span></div><div class="line" id="225954"><span class="nick" style="color:#bc80bd"><a href="#225954" label="[22:59:54]">&lt;xentrac&gt;</a></span><span class="message">6</span></div><br /></div></body></html>