<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="012747"><span class="nick" style="color:#389600"><a href="#012747" label="[01:27:47]">&lt;stikonas&gt;</a></span><span class="message">Googulator: I'm looking at fiwix file list PR, looks good I guess but it's really builder-hex0 specific...</span></div><div class="line" id="012811"><span class="nick" style="color:#389600"><a href="#012811" label="[01:28:11]">&lt;stikonas&gt;</a></span><span class="message">we'll need something different for UEFI then</span></div><div class="line" id="012822"><span class="nick" style="color:#8dd3c7"><a href="#012822" label="[01:28:22]">&lt;Googulator&gt;</a></span><span class="message">same for kexec-fiwix</span></div><div class="line" id="012831"><span class="nick" style="color:#8dd3c7"><a href="#012831" label="[01:28:31]">&lt;Googulator&gt;</a></span><span class="message">which uses the same technique to locate the initrd</span></div><div class="line" id="012835"><span class="nick" style="color:#389600"><a href="#012835" label="[01:28:35]">&lt;stikonas&gt;</a></span><span class="message">well, yeah...</span></div><div class="line" id="012847"><span class="nick" style="color:#389600"><a href="#012847" label="[01:28:47]">&lt;stikonas&gt;</a></span><span class="message">I guess we'll have to clone/fork the whole file...</span></div><div class="line" id="012902"><span class="nick" style="color:#389600"><a href="#012902" label="[01:29:02]">&lt;stikonas&gt;</a></span><span class="message">well, kexec-fiwix will be completely different anyway</span></div><div class="line" id="012911"><span class="nick" style="color:#389600"><a href="#012911" label="[01:29:11]">&lt;stikonas&gt;</a></span><span class="message">as we need to shut down UEFI services, etc...</span></div><div class="line" id="012945"><span class="nick" style="color:#389600"><a href="#012945" label="[01:29:45]">&lt;stikonas&gt;</a></span><span class="message">but this initrd stuff kind of does 2 things: 1. reads files and 2. creates initrd</span></div><div class="line" id="012950"><span class="nick" style="color:#389600"><a href="#012950" label="[01:29:50]">&lt;stikonas&gt;</a></span><span class="message">2 will be the same I guess...</span></div><div class="line" id="013104"><span class="nick" style="color:#389600"><a href="#013104" label="[01:31:04]">&lt;stikonas&gt;</a></span><span class="message">but perhaps it's infeasible to split 1 and 2...</span></div><div class="line" id="013628"><span class="nick" style="color:#389600"><a href="#013628" label="[01:36:28]">&lt;stikonas&gt;</a></span><span class="message">hmm, &quot;cp&quot; command doesn't work in UEFI. Both posix-runner.efi cp and cp.efi hang...</span></div><div class="line" id="013641"><span class="nick" style="color:#389600"><a href="#013641" label="[01:36:41]">&lt;stikonas&gt;</a></span><span class="message">yet catm works</span></div><div class="line" id="033946"><span class="nick" style="color:#2e2a4a"><a href="#033946" label="[03:39:46]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well the good news is &amp; 0xFF does not change the test result for GCC built unxz.c; bad news is it didn't result in a successful test after M2-Mesoplanet build. and you included a mistake fgetc returns an int not a char.</span></div><div class="line" id="034000"><span class="nick" style="color:#8dd3c7"><a href="#034000" label="[03:40:00]">&lt;Googulator&gt;</a></span><span class="message">actually, I've gotten further</span></div><div class="line" id="034003"><span class="nick" style="color:#8dd3c7"><a href="#034003" label="[03:40:03]">&lt;Googulator&gt;</a></span><span class="message">as in, a lot further</span></div><div class="line" id="034009"><span class="nick" style="color:#2e2a4a"><a href="#034009" label="[03:40:09]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="034015"><span class="nick" style="color:#8dd3c7"><a href="#034015" label="[03:40:15]">&lt;Googulator&gt;</a></span><span class="message">*it actually works*</span></div><div class="line" id="034019"><span class="nick" style="color:#2e2a4a"><a href="#034019" label="[03:40:19]">&lt;oriansj&gt;</a></span><span class="message">oooh</span></div><div class="line" id="034020"><span class="nick" style="color:#8dd3c7"><a href="#034020" label="[03:40:20]">&lt;Googulator&gt;</a></span><span class="message">I just need to clean it up</span></div><div class="line" id="034030"><span class="nick" style="color:#2e2a4a"><a href="#034030" label="[03:40:30]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="035840"><span class="nick" style="color:#2e2a4a"><a href="#035840" label="[03:58:40]">&lt;oriansj&gt;</a></span><span class="message">oh and LzmaDec_InitStateReal where the global-&gt;reps[0] =global-&gt;reps[1] =global-&gt;reps[2] =global-&gt;reps[3] =1; is undefined behavior in M2-Planet; splitting it up into global-&gt;reps[0] = 1; global-&gt;reps[1] = 1; global-&gt;reps[2] =1; global-&gt;reps[3] = 1; should be the correct equal</span></div><div class="line" id="040917"><span class="nick" style="color:#8dd3c7"><a href="#040917" label="[04:09:17]">&lt;Googulator&gt;</a></span><span class="message">Seems like it still has some issues: small xz files extract fine, but linux-4.9.10.tar.xz is truncated</span></div><div class="line" id="040951"><span class="nick" style="color:#8dd3c7"><a href="#040951" label="[04:09:51]">&lt;Googulator&gt;</a></span><span class="message">only the first 0xC001000 of output is written</span></div><div class="line" id="041023"><span class="nick" style="color:#8dd3c7"><a href="#041023" label="[04:10:23]">&lt;Googulator&gt;</a></span><span class="message">this issue also happens with the gcc-compiled version</span></div><div class="line" id="055002"><span class="nick" style="color:#2e2a4a"><a href="#055002" label="[05:50:02]">&lt;oriansj&gt;</a></span><span class="message">well lets get small file unxz.c commited and then later we can work out the exact bugs</span></div><div class="line" id="055032"><span class="nick" style="color:#8dd3c7"><a href="#055032" label="[05:50:32]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/19">https://github.com/oriansj/mescc-tools-extra/pull/19</a> </span></div><div class="line" id="055053"><span class="nick" style="color:#8dd3c7"><a href="#055053" label="[05:50:53]">&lt;Googulator&gt;</a></span><span class="message">linux-4.9.10 extracts successully after another small modification :)</span></div><div class="line" id="055131"><span class="nick" style="color:#8dd3c7"><a href="#055131" label="[05:51:31]">&lt;Googulator&gt;</a></span><span class="message">I corrected what I presumed to be a typo in the copyright header</span></div><div class="line" id="055145"><span class="nick" style="color:#8dd3c7"><a href="#055145" label="[05:51:45]">&lt;Googulator&gt;</a></span><span class="message">2021 doesn't seem realistic</span></div><div class="line" id="055331"><span class="nick" style="color:#2e2a4a"><a href="#055331" label="[05:53:31]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="055658"><span class="nick" style="color:#2e2a4a"><a href="#055658" label="[05:56:58]">&lt;oriansj&gt;</a></span><span class="message">you probably want to use: <a rel="nofollow" href="https://paste.debian.net/1306550/">https://paste.debian.net/1306550/</a>  instead of the constant 4 (which would cause the wrong behavior in gcc and make comparison testing harder)</span></div><div class="line" id="055758"><span class="nick" style="color:#8dd3c7"><a href="#055758" label="[05:57:58]">&lt;Googulator&gt;</a></span><span class="message">the &quot;p&quot; pointer was used as a workaround for that</span></div><div class="line" id="055814"><span class="nick" style="color:#8dd3c7"><a href="#055814" label="[05:58:14]">&lt;Googulator&gt;</a></span><span class="message">it's a uint8_t *, so it behaves the same in m2 and gcc</span></div><div class="line" id="055941"><span class="nick" style="color:#8dd3c7"><a href="#055941" label="[05:59:41]">&lt;Googulator&gt;</a></span><span class="message">also, &quot;wrap&quot; currently doesn't build with m2-planet</span></div><div class="line" id="055955"><span class="nick" style="color:#8dd3c7"><a href="#055955" label="[05:59:55]">&lt;Googulator&gt;</a></span><span class="message">&quot;Unknown type mode_t&quot;</span></div><div class="line" id="060156"><span class="nick" style="color:#2e2a4a"><a href="#060156" label="[06:01:56]">&lt;oriansj&gt;</a></span><span class="message">it should now</span></div><div class="line" id="060202"><span class="nick" style="color:#2e2a4a"><a href="#060202" label="[06:02:02]">&lt;oriansj&gt;</a></span><span class="message">(with the updated M2libc)</span></div><div class="line" id="061902"><span class="nick" style="color:#8dd3c7"><a href="#061902" label="[06:19:02]">&lt;Googulator&gt;</a></span><span class="message">228MiB init.img for bare metal ;)</span></div><div class="line" id="094126"><span class="nick" style="color:#6b8072"><a href="#094126" label="[09:41:26]">&lt;ekaitz&gt;</a></span><span class="message">guys, my talk is published: <a rel="nofollow" href="https://fosdem.org/2024/schedule/event/fosdem-2024-1755-risc-v-bootstrapping-in-guix-and-live-bootstrap/">https://fosdem.org/2024/schedule/event/fosdem-2024-1755-risc-v-bootstrapping-in-guix-and-live-bootstrap/</a> </span></div><div class="line" id="095132"><span class="nick" style="color:#6b8072"><a href="#095132" label="[09:51:32]">&lt;ekaitz&gt;</a></span><span class="message">also stikonas some day you gotta send me an audio pronouncing your name</span></div><div class="line" id="095134"><span class="nick" style="color:#6b8072"><a href="#095134" label="[09:51:34]">&lt;ekaitz&gt;</a></span><span class="message">hehe</span></div><div class="line" id="095956"><span class="nick" style="color:#6b8072"><a href="#095956" label="[09:59:56]">&lt;ekaitz&gt;</a></span><span class="message">i was kind of afraid to butcher the surname</span></div><div class="line" id="104526"><span class="nick" style="color:#80b1d3"><a href="#104526" label="[10:45:26]">&lt;fossy&gt;</a></span><span class="message">ekaitz: nice talk, good work!!</span></div><div class="line" id="104548"><span class="nick" style="color:#6b8072"><a href="#104548" label="[10:45:48]">&lt;ekaitz&gt;</a></span><span class="message">thank you fossy !</span></div><div class="line" id="124327"><span class="nick" style="color:#2e2a4a"><a href="#124327" label="[12:43:27]">&lt;oriansj&gt;</a></span><span class="message">Googulator: nice</span></div><div class="line" id="134622"><span class="nick" style="color:#6d2462"><a href="#134622" label="[13:46:22]">&lt;Guest25&gt;</a></span><span class="message">Hi all</span></div><div class="line" id="134644"><span class="nick" style="color:#6d2462"><a href="#134644" label="[13:46:44]">&lt;Guest25&gt;</a></span><span class="message">it seems we succesfully built 32 bit musl rootfs with live-bootstrap</span></div><div class="line" id="134702"><span class="nick" style="color:#6d2462"><a href="#134702" label="[13:47:02]">&lt;Guest25&gt;</a></span><span class="message">but it only works with python script called &quot;rootfs.py&quot;</span></div><div class="line" id="134846"><span class="nick" style="color:#6d2462"><a href="#134846" label="[13:48:46]">&lt;Guest25&gt;</a></span><span class="message">is it working for amd64?</span></div><div class="line" id="134930"><span class="nick" style="color:#6d2462"><a href="#134930" label="[13:49:30]">&lt;Guest25&gt;</a></span><span class="message">it reaches until tcc-mes /usr/lib/mes/crt1.o lib/linux/x86_64-mes-gcc/crt1.c and does nothing? Will it continue?</span></div><div class="line" id="135409"><span class="nick" style="color:#234e69"><a href="#135409" label="[13:54:09]">&lt;janneke&gt;</a></span><span class="message">Guest25: 64bit is not supported yet</span></div><div class="line" id="135530"><span class="nick" style="color:#6d2462"><a href="#135530" label="[13:55:30]">&lt;Guest25&gt;</a></span><span class="message">ok, is there any method to build with glibc or we have to build with musl?</span></div><div class="line" id="135628"><span class="nick" style="color:#6d2462"><a href="#135628" label="[13:56:28]">&lt;Guest25&gt;</a></span><span class="message">also is it possible to build without using python?</span></div><div class="line" id="135739"><span class="nick" style="color:#6c3d55"><a href="#135739" label="[13:57:39]">&lt;mid-kid&gt;</a></span><span class="message">You can build glibc from the finished live-bootstrap system but it's not covered by the scripts</span></div><div class="line" id="135827"><span class="nick" style="color:#6c3d55"><a href="#135827" label="[13:58:27]">&lt;mid-kid&gt;</a></span><span class="message">Similarly, you can bootstrap an amd64 system by building a cross-compiler in a finished live-bootstrap system and then building the compiler for amd64</span></div><div class="line" id="135937"><span class="nick" style="color:#6c3d55"><a href="#135937" label="[13:59:37]">&lt;mid-kid&gt;</a></span><span class="message">But none of this is directly supported by the project - linux from scratch's chapter 5,6 and 7 might help.</span></div><div class="line" id="140227"><span class="nick" style="color:#6d2462"><a href="#140227" label="[14:02:27]">&lt;Guest25&gt;</a></span><span class="message">ok, thank you. We have a hackaton on February 9 where we try to bootstrap a c compiler, how can we help to implement bootstrapping of  64 bit compiler? Is the problems known?</span></div><div class="line" id="141013"><span class="nick" style="color:#6c3d55"><a href="#141013" label="[14:10:13]">&lt;mid-kid&gt;</a></span><span class="message">I don't remember exactly, it's been some 4ish years since I tried</span></div><div class="line" id="141045"><span class="nick" style="color:#6c3d55"><a href="#141045" label="[14:10:45]">&lt;mid-kid&gt;</a></span><span class="message">and the live-bootstrap has changed a lot</span></div><div class="line" id="141112"><span class="nick" style="color:#6d2462"><a href="#141112" label="[14:11:12]">&lt;Guest25&gt;</a></span><span class="message">is there any other option than live-bootstrap, because it seems too messy?</span></div><div class="line" id="141113"><span class="nick" style="color:#6c3d55"><a href="#141113" label="[14:11:13]">&lt;mid-kid&gt;</a></span><span class="message">what I do know is that I started with linux from scratch's instructions and that got me going</span></div><div class="line" id="141159"><span class="nick" style="color:#6c3d55"><a href="#141159" label="[14:11:59]">&lt;mid-kid&gt;</a></span><span class="message">Guest25: live-bootstrap is currently the only project that achieves a full bootstrap from a single 512 byte binary.</span></div><div class="line" id="141207"><span class="nick" style="color:#6c3d55"><a href="#141207" label="[14:12:07]">&lt;mid-kid&gt;</a></span><span class="message">Anything else relies on more bootstrap binaries.</span></div><div class="line" id="141216"><span class="nick" style="color:#6c3d55"><a href="#141216" label="[14:12:16]">&lt;mid-kid&gt;</a></span><span class="message">It depends on what you're trying to do really.</span></div><div class="line" id="141329"><span class="nick" style="color:#6c3d55"><a href="#141329" label="[14:13:29]">&lt;mid-kid&gt;</a></span><span class="message">If you just want to build a new linux system/toolchain from source, linux from scratch is that.</span></div><div class="line" id="141402"><span class="nick" style="color:#6c3d55"><a href="#141402" label="[14:14:02]">&lt;mid-kid&gt;</a></span><span class="message">but you need a working, modern C compiler to follow its instructions</span></div><div class="line" id="141402"><span class="nick" style="color:#6d2462"><a href="#141402" label="[14:14:02]">&lt;Guest25&gt;</a></span><span class="message">i want to have really trusted environment where  I can build a linux from scratch</span></div><div class="line" id="141451"><span class="nick" style="color:#6d2462"><a href="#141451" label="[14:14:51]">&lt;Guest25&gt;</a></span><span class="message">this is why stage0 is needed for me</span></div><div class="line" id="141516"><span class="nick" style="color:#6c3d55"><a href="#141516" label="[14:15:16]">&lt;mid-kid&gt;</a></span><span class="message">then keep hacking on it I guess</span></div><div class="line" id="141541"><span class="nick" style="color:#6d2462"><a href="#141541" label="[14:15:41]">&lt;Guest25&gt;</a></span><span class="message">also can someone explain why 64 bit is not supported yet?</span></div><div class="line" id="141924"><span class="nick" style="color:#234e69"><a href="#141924" label="[14:19:24]">&lt;janneke&gt;</a></span><span class="message">Guest25: 64bit is not a priority, in fact it's completely optional; like mid-kid says in the cross-compile bootstrap phase we compile from 32bit to 64bit gcc</span></div><div class="line" id="161336"><span class="nick" style="color:#8dd3c7"><a href="#161336" label="[16:13:36]">&lt;Googulator&gt;</a></span><span class="message">unxz is looking good, but also bad</span></div><div class="line" id="161414"><span class="nick" style="color:#8dd3c7"><a href="#161414" label="[16:14:14]">&lt;Googulator&gt;</a></span><span class="message">tested on bare metal with binutils-2.30 and linux-4.9.10 included as tar.xz</span></div><div class="line" id="161430"><span class="nick" style="color:#8dd3c7"><a href="#161430" label="[16:14:30]">&lt;Googulator&gt;</a></span><span class="message">binutils worked fine, but Linux went OOM when trying to extract in Fiwix</span></div><div class="line" id="161535"><span class="nick" style="color:#8dd3c7"><a href="#161535" label="[16:15:35]">&lt;Googulator&gt;</a></span><span class="message">even though both are lzma2:26</span></div><div class="line" id="161535"><span class="nick" style="color:#d9d9d9"><a href="#161535" label="[16:15:35]">&lt;ismael&gt;</a></span><span class="message">hi</span></div><div class="line" id="162438"><span class="nick" style="color:#2e2a4a"><a href="#162438" label="[16:24:38]">&lt;oriansj&gt;</a></span><span class="message">ismael: hello</span></div><div class="line" id="162644"><span class="nick" style="color:#2e2a4a"><a href="#162644" label="[16:26:44]">&lt;oriansj&gt;</a></span><span class="message">Googulator: so it is using too much ram?</span></div><div class="line" id="162652"><span class="nick" style="color:#8dd3c7"><a href="#162652" label="[16:26:52]">&lt;Googulator&gt;</a></span><span class="message">It seems so.</span></div><div class="line" id="162707"><span class="nick" style="color:#8dd3c7"><a href="#162707" label="[16:27:07]">&lt;Googulator&gt;</a></span><span class="message">If it were lzma2:37, I would understand</span></div><div class="line" id="162717"><span class="nick" style="color:#d9d9d9"><a href="#162717" label="[16:27:17]">&lt;ismael&gt;</a></span><span class="message">so... where's the gcc 4.7 fork?</span></div><div class="line" id="162718"><span class="nick" style="color:#8dd3c7"><a href="#162718" label="[16:27:18]">&lt;Googulator&gt;</a></span><span class="message">but lzma2:26 shouldn't run OOME</span></div><div class="line" id="162725"><span class="nick" style="color:#8dd3c7"><a href="#162725" label="[16:27:25]">&lt;Googulator&gt;</a></span><span class="message">*OOM</span></div><div class="line" id="162739"><span class="nick" style="color:#8dd3c7"><a href="#162739" label="[16:27:39]">&lt;Googulator&gt;</a></span><span class="message">and it seems to allocate more and more for larger files</span></div><div class="line" id="162812"><span class="nick" style="color:#8dd3c7"><a href="#162812" label="[16:28:12]">&lt;Googulator&gt;</a></span><span class="message">peak allocation for linux-4.9.10 is 960MiB</span></div><div class="line" id="162921"><span class="nick" style="color:#8dd3c7"><a href="#162921" label="[16:29:21]">&lt;Googulator&gt;</a></span><span class="message">for binutils it's 288MiB</span></div><div class="line" id="162945"><span class="nick" style="color:#8dd3c7"><a href="#162945" label="[16:29:45]">&lt;Googulator&gt;</a></span><span class="message">both use the same compression mode (dictionary size), so the allocation should be amortized constant, not growing linearly with size</span></div><div class="line" id="163131"><span class="nick" style="color:#8dd3c7"><a href="#163131" label="[16:31:31]">&lt;Googulator&gt;</a></span><span class="message">gcc-built version uses about half the memory, but still scaling linearly with file size</span></div><div class="line" id="163304"><span class="nick" style="color:#8dd3c7"><a href="#163304" label="[16:33:04]">&lt;Googulator&gt;</a></span><span class="message">oriansj: m2libc's memmove isn't supposed to allocate memory, right?</span></div><div class="line" id="163400"><span class="nick" style="color:#2e2a4a"><a href="#163400" label="[16:34:00]">&lt;oriansj&gt;</a></span><span class="message">Googulator: it doesn't allocate anything</span></div><div class="line" id="163606"><span class="nick" style="color:#2e2a4a"><a href="#163606" label="[16:36:06]">&lt;oriansj&gt;</a></span><span class="message">perhaps a defect in unxz.c doing calloc repeatedly somehow?</span></div><div class="line" id="164125"><span class="nick" style="color:#8dd3c7"><a href="#164125" label="[16:41:25]">&lt;Googulator&gt;</a></span><span class="message">is there a good tool for graphically viewing core dump files?</span></div><div class="line" id="174729"><span class="nick" style="color:#8dd3c7"><a href="#174729" label="[17:47:29]">&lt;Googulator&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/20">https://github.com/oriansj/mescc-tools-extra/pull/20</a> </span></div><div class="line" id="174833"><span class="nick" style="color:#8dd3c7"><a href="#174833" label="[17:48:33]">&lt;Googulator&gt;</a></span><span class="message">GCC version now shows identical memory consumption between binutils and linux, M2 one shows _some_ growth in Linux, but well within what one could call &quot;amortized constant&quot; behavior</span></div><div class="line" id="174954"><span class="nick" style="color:#2e2a4a"><a href="#174954" label="[17:49:54]">&lt;oriansj&gt;</a></span><span class="message">meged</span></div><div class="line" id="175004"><span class="nick" style="color:#2e2a4a"><a href="#175004" label="[17:50:04]">&lt;oriansj&gt;</a></span><span class="message">^meged^Merged^</span></div><div class="line" id="175047"><span class="nick" style="color:#8dd3c7"><a href="#175047" label="[17:50:47]">&lt;Googulator&gt;</a></span><span class="message">thanks</span></div><div class="line" id="182857"><span class="nick" style="color:#8dd3c7"><a href="#182857" label="[18:28:57]">&lt;Googulator&gt;</a></span><span class="message">oriansj: keeping &quot;.lzma&quot; support was the right call</span></div><div class="line" id="182908"><span class="nick" style="color:#8dd3c7"><a href="#182908" label="[18:29:08]">&lt;Googulator&gt;</a></span><span class="message">coreutils-6.10 is available only as gz or lzma</span></div><div class="line" id="182918"><span class="nick" style="color:#8dd3c7"><a href="#182918" label="[18:29:18]">&lt;Googulator&gt;</a></span><span class="message">&amp; there's a huge saving in the lzma version</span></div><div class="line" id="205617"><span class="nick" style="color:#8dd3c7"><a href="#205617" label="[20:56:17]">&lt;Googulator&gt;</a></span><span class="message">Locally updated all pre-network sources to xz / lzma wherever available (plus a few missed gz -&gt; bz2 options), bare metal image dropped from 283MiB to 210MiB</span></div><div class="line" id="205730"><span class="nick" style="color:#8dd3c7"><a href="#205730" label="[20:57:30]">&lt;Googulator&gt;</a></span><span class="message">unfortunately I still got OOM when decompressing the Linux kernel sources - now trying an alternative &quot;pipeless&quot; way where unxz outputs to a file, then it quits, and finally tar reads that file</span></div><div class="line" id="205747"><span class="nick" style="color:#8dd3c7"><a href="#205747" label="[20:57:47]">&lt;Googulator&gt;</a></span><span class="message">as opposed to piping stdin/out</span></div><div class="line" id="213357"><span class="nick" style="color:#389600"><a href="#213357" label="[21:33:57]">&lt;stikonas&gt;</a></span><span class="message">well, Guest25 is already logged out but in case they read the logs, we are working on 64-bit bootstrap, at least I am trying to get it working</span></div><div class="line" id="213434"><span class="nick" style="color:#389600"><a href="#213434" label="[21:34:34]">&lt;stikonas&gt;</a></span><span class="message">and we aren't that far... tcc-mes already builds, but is a big buggy... Once that is sorted and tcc-mes runs, it should be not too bad to finish the bootstrap</span></div><div class="line" id="213501"><span class="nick" style="color:#389600"><a href="#213501" label="[21:35:01]">&lt;stikonas&gt;</a></span><span class="message">unlike riscv, x86_64 was fairly well supported by those versions of &quot;old&quot; software that we are building</span></div><div class="line" id="213530"><span class="nick" style="color:#8dd3c7"><a href="#213530" label="[21:35:30]">&lt;Googulator&gt;</a></span><span class="message">Does riscv have multiple pointer formats?</span></div><div class="line" id="213612"><span class="nick" style="color:#8dd3c7"><a href="#213612" label="[21:36:12]">&lt;Googulator&gt;</a></span><span class="message">as in, reading 32 bits from address 0x1000 accesses a different physical memory cell than reading 8 bits from 0x1000</span></div><div class="line" id="213637"><span class="nick" style="color:#8dd3c7"><a href="#213637" label="[21:36:37]">&lt;Googulator&gt;</a></span><span class="message">AKA &quot;word addressing&quot;</span></div><div class="line" id="213659"><span class="nick" style="color:#389600"><a href="#213659" label="[21:36:59]">&lt;stikonas&gt;</a></span><span class="message">no idea... it does have instructions ot read 8 bits or 32-bits...</span></div><div class="line" id="213711"><span class="nick" style="color:#389600"><a href="#213711" label="[21:37:11]">&lt;stikonas&gt;</a></span><span class="message">but why would it be a different physical memory cell?</span></div><div class="line" id="213731"><span class="nick" style="color:#8dd3c7"><a href="#213731" label="[21:37:31]">&lt;Googulator&gt;</a></span><span class="message">some RISC architectures do that</span></div><div class="line" id="213810"><span class="nick" style="color:#389600"><a href="#213810" label="[21:38:10]">&lt;stikonas&gt;</a></span><span class="message">according to wikipedia  Almost all modern computer architectures use byte addressing, and word addressing is largely only of historical interest</span></div><div class="line" id="213817"><span class="nick" style="color:#8dd3c7"><a href="#213817" label="[21:38:17]">&lt;Googulator&gt;</a></span><span class="message">0x1000 is the 4096th byte of memory when used for 8-bit addresses, but the 4096th word when used for 32 bit</span></div><div class="line" id="213833"><span class="nick" style="color:#8dd3c7"><a href="#213833" label="[21:38:33]">&lt;Googulator&gt;</a></span><span class="message">so riscv64 doesn't do that then?</span></div><div class="line" id="213835"><span class="nick" style="color:#389600"><a href="#213835" label="[21:38:35]">&lt;stikonas&gt;</a></span><span class="message">no, nothing like that</span></div><div class="line" id="213840"><span class="nick" style="color:#8dd3c7"><a href="#213840" label="[21:38:40]">&lt;Googulator&gt;</a></span><span class="message">good</span></div><div class="line" id="213848"><span class="nick" style="color:#8dd3c7"><a href="#213848" label="[21:38:48]">&lt;Googulator&gt;</a></span><span class="message">because it would complicate the unxz work</span></div><div class="line" id="213849"><span class="nick" style="color:#389600"><a href="#213849" label="[21:38:49]">&lt;stikonas&gt;</a></span><span class="message">it's byte addressed</span></div><div class="line" id="213915"><span class="nick" style="color:#389600"><a href="#213915" label="[21:39:15]">&lt;stikonas&gt;</a></span><span class="message">it's fairly sane at assembly level</span></div><div class="line" id="213925"><span class="nick" style="color:#389600"><a href="#213925" label="[21:39:25]">&lt;stikonas&gt;</a></span><span class="message">only instruction encoding is tricky...</span></div><div class="line" id="213938"><span class="nick" style="color:#8dd3c7"><a href="#213938" label="[21:39:38]">&lt;Googulator&gt;</a></span><span class="message">Is it worse than Itanium?</span></div><div class="line" id="213946"><span class="nick" style="color:#389600"><a href="#213946" label="[21:39:46]">&lt;stikonas&gt;</a></span><span class="message">I don't know itanium, but probably</span></div><div class="line" id="214002"><span class="nick" style="color:#389600"><a href="#214002" label="[21:40:02]">&lt;stikonas&gt;</a></span><span class="message">i.e. on x86 constants are just little endian</span></div><div class="line" id="214005"><span class="nick" style="color:#8dd3c7"><a href="#214005" label="[21:40:05]">&lt;Googulator&gt;</a></span><span class="message">Itanium's instruction encoding was infamously brain-dead</span></div><div class="line" id="214019"><span class="nick" style="color:#389600"><a href="#214019" label="[21:40:19]">&lt;stikonas&gt;</a></span><span class="message">on riscv constants are using one of the 4 messy encodings with bits shuffled all around the plcae</span></div><div class="line" id="214120"><span class="nick" style="color:#8dd3c7"><a href="#214120" label="[21:41:20]">&lt;Googulator&gt;</a></span><span class="message">&quot;EPIC&quot; encoding... basically VLIW on Krokodil</span></div><div class="line" id="214145"><span class="nick" style="color:#389600"><a href="#214145" label="[21:41:45]">&lt;stikonas&gt;</a></span><span class="message">Googulator: e.g. see here <a rel="nofollow" href="https://i.stack.imgur.com/MUKIE.png">https://i.stack.imgur.com/MUKIE.png</a> </span></div><div class="line" id="214155"><span class="nick" style="color:#389600"><a href="#214155" label="[21:41:55]">&lt;stikonas&gt;</a></span><span class="message">let's say branching instruction</span></div><div class="line" id="214210"><span class="nick" style="color:#389600"><a href="#214210" label="[21:42:10]">&lt;stikonas&gt;</a></span><span class="message">first you have bit 12 of the number , then bits 10 to 5</span></div><div class="line" id="214223"><span class="nick" style="color:#8dd3c7"><a href="#214223" label="[21:42:23]">&lt;Googulator&gt;</a></span><span class="message">oh, so it's just intermediates that are all weird</span></div><div class="line" id="214225"><span class="nick" style="color:#389600"><a href="#214225" label="[21:42:25]">&lt;stikonas&gt;</a></span><span class="message">then some opcodes/registers</span></div><div class="line" id="214234"><span class="nick" style="color:#389600"><a href="#214234" label="[21:42:34]">&lt;stikonas&gt;</a></span><span class="message">abd then bits 1-4, and finally bit 11</span></div><div class="line" id="214244"><span class="nick" style="color:#8dd3c7"><a href="#214244" label="[21:42:44]">&lt;Googulator&gt;</a></span><span class="message">that's pretty much normal fare for RISC archs</span></div><div class="line" id="214251"><span class="nick" style="color:#389600"><a href="#214251" label="[21:42:51]">&lt;stikonas&gt;</a></span><span class="message">yeah, but it makes hard to write hex0 code</span></div><div class="line" id="214310"><span class="nick" style="color:#8dd3c7"><a href="#214310" label="[21:43:10]">&lt;Googulator&gt;</a></span><span class="message">I thought in-memory values were also all weird</span></div><div class="line" id="214340"><span class="nick" style="color:#8dd3c7"><a href="#214340" label="[21:43:40]">&lt;Googulator&gt;</a></span><span class="message">at least instructions themselves are not weirdly intertwined with each other, like on Itanium</span></div><div class="line" id="214405"><span class="nick" style="color:#8dd3c7"><a href="#214405" label="[21:44:05]">&lt;Googulator&gt;</a></span><span class="message">AFAIK the goal there was to have the CPU execute an entire &quot;block&quot; of 3 intertwined-encoded instructions all at once</span></div><div class="line" id="214413"><span class="nick" style="color:#389600"><a href="#214413" label="[21:44:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's horrible</span></div><div class="line" id="214419"><span class="nick" style="color:#389600"><a href="#214419" label="[21:44:19]">&lt;stikonas&gt;</a></span><span class="message">wasn't it too hard for compilers to optimiza?</span></div><div class="line" id="214426"><span class="nick" style="color:#389600"><a href="#214426" label="[21:44:26]">&lt;stikonas&gt;</a></span><span class="message">optimize?</span></div><div class="line" id="214435"><span class="nick" style="color:#389600"><a href="#214435" label="[21:44:35]">&lt;stikonas&gt;</a></span><span class="message">which is why Itanium more or less died...</span></div><div class="line" id="214439"><span class="nick" style="color:#8dd3c7"><a href="#214439" label="[21:44:39]">&lt;Googulator&gt;</a></span><span class="message">that was pretty much what killed it indeed</span></div><div class="line" id="214521"><span class="nick" style="color:#8dd3c7"><a href="#214521" label="[21:45:21]">&lt;Googulator&gt;</a></span><span class="message">your normal, &quot;development&quot; compiler would just encode each instruction into its own block with 2 NOPs, so each block would really be a single instruction</span></div><div class="line" id="214614"><span class="nick" style="color:#8dd3c7"><a href="#214614" label="[21:46:14]">&lt;Googulator&gt;</a></span><span class="message">then, when you were done &amp; ready to build a fully optimized version, you would send it to a mainframe-sized Itanium that would spend a helluva lot of computation on generating optimized code</span></div><div class="line" id="214702"><span class="nick" style="color:#8dd3c7"><a href="#214702" label="[21:47:02]">&lt;Googulator&gt;</a></span><span class="message">in reality, the &quot;fully optimizing&quot; compilers never really got written</span></div><div class="line" id="214727"><span class="nick" style="color:#8dd3c7"><a href="#214727" label="[21:47:27]">&lt;Googulator&gt;</a></span><span class="message">&amp; in retrospect, that compiler would basically have to have been an AI</span></div><div class="line" id="230918"><span class="nick" style="color:#2e2a4a"><a href="#230918" label="[23:09:18]">&lt;oriansj&gt;</a></span><span class="message">Googulator: I am assuming that you are using TCC to compile as M2-Mesoplanet isn't building unxz.c yet.</span></div><div class="line" id="231001"><span class="nick" style="color:#8dd3c7"><a href="#231001" label="[23:10:01]">&lt;Googulator&gt;</a></span><span class="message">No, I added unxz.c to the mescc-tools-extra build scripts</span></div><div class="line" id="231014"><span class="nick" style="color:#8dd3c7"><a href="#231014" label="[23:10:14]">&lt;Googulator&gt;</a></span><span class="message">&amp; then building the stage0-posix way</span></div><div class="line" id="231023"><span class="nick" style="color:#8dd3c7"><a href="#231023" label="[23:10:23]">&lt;Googulator&gt;</a></span><span class="message">it does build using mesoplanet</span></div><div class="line" id="231236"><span class="nick" style="color:#2e2a4a"><a href="#231236" label="[23:12:36]">&lt;oriansj&gt;</a></span><span class="message">yes, it builds but the resulting binary when built is not passing my test files which I created when preparing it.</span></div><div class="line" id="231301"><span class="nick" style="color:#8dd3c7"><a href="#231301" label="[23:13:01]">&lt;Googulator&gt;</a></span><span class="message">hmm</span></div><div class="line" id="231317"><span class="nick" style="color:#8dd3c7"><a href="#231317" label="[23:13:17]">&lt;Googulator&gt;</a></span><span class="message">what test files are you using?</span></div><div class="line" id="231336"><span class="nick" style="color:#8dd3c7"><a href="#231336" label="[23:13:36]">&lt;Googulator&gt;</a></span><span class="message">btw, sent another pr: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/21">https://github.com/oriansj/mescc-tools-extra/pull/21</a>  (still testing this one)</span></div><div class="line" id="231417"><span class="nick" style="color:#80b1d3"><a href="#231417" label="[23:14:17]">&lt;fossy&gt;</a></span><span class="message">would have liked to know what Guest25 considers messy about live-bootstrap. have been focusing on making it less &quot;messy&quot; in the past few months, and i thought that the process was fairly comprehensible by now...</span></div><div class="line" id="231429"><span class="nick" style="color:#2e2a4a"><a href="#231429" label="[23:14:29]">&lt;oriansj&gt;</a></span><span class="message">I made a couple files via tar cavf and unxz unpacks them perfectly when I build via gcc/clang/tcc but the builds have not been successful thus far</span></div><div class="line" id="231812"><span class="nick" style="color:#8dd3c7"><a href="#231812" label="[23:18:12]">&lt;Googulator&gt;</a></span><span class="message">I have my stage0-posix directory set up like this: <a rel="nofollow" href="https://gist.github.com/Googulator/d2970b95f953376504ebfd509f6bef21">https://gist.github.com/Googulator/d2970b95f953376504ebfd509f6bef21</a> </span></div><div class="line" id="231839"><span class="nick" style="color:#8dd3c7"><a href="#231839" label="[23:18:39]">&lt;Googulator&gt;</a></span><span class="message">&amp; it seems to work</span></div><div class="line" id="232127"><span class="nick" style="color:#8dd3c7"><a href="#232127" label="[23:21:27]">&lt;Googulator&gt;</a></span><span class="message">oops, there's actually a regression in that last PR</span></div><div class="line" id="232138"><span class="nick" style="color:#8dd3c7"><a href="#232138" label="[23:21:38]">&lt;Googulator&gt;</a></span><span class="message">broke .lzma support</span></div><div class="line" id="232207"><span class="nick" style="color:#2e2a4a"><a href="#232207" label="[23:22:07]">&lt;oriansj&gt;</a></span><span class="message">well it appears we are on the same commits</span></div><div class="line" id="232446"><span class="nick" style="color:#8dd3c7"><a href="#232446" label="[23:24:46]">&lt;Googulator&gt;</a></span><span class="message">and you're testing on x86, right?</span></div><div class="line" id="232605"><span class="nick" style="color:#8dd3c7"><a href="#232605" label="[23:26:05]">&lt;Googulator&gt;</a></span><span class="message">pushed the regression fix to <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/21">https://github.com/oriansj/mescc-tools-extra/pull/21</a> </span></div><div class="line" id="232651"><span class="nick" style="color:#8dd3c7"><a href="#232651" label="[23:26:51]">&lt;Googulator&gt;</a></span><span class="message">oriansj: are you getting a sha256 of 933731db23ec9adebade815554252dcd68281f5de4f71c0617ccace1ec09a0c7 for unxz?</span></div><div class="line" id="232704"><span class="nick" style="color:#8dd3c7"><a href="#232704" label="[23:27:04]">&lt;Googulator&gt;</a></span><span class="message">that's the version I'm testing in live-bootstrap rn</span></div><div class="line" id="232835"><span class="nick" style="color:#2e2a4a"><a href="#232835" label="[23:28:35]">&lt;oriansj&gt;</a></span><span class="message">when I do a x86 build I get 29c3eface498ee9a5078dc17101dbfd7ab3f5a96d5c938c76187507fc72e68e5 which works and ecbf9115cac3451afb42756f89b57253a11887819ff5ce8d5c84e0facd8716c0 for my AMD64 build which segfaults on the same file</span></div><div class="line" id="232922"><span class="nick" style="color:#8dd3c7"><a href="#232922" label="[23:29:22]">&lt;Googulator&gt;</a></span><span class="message">I didn't test on AMD64 so it could still be broken there</span></div><div class="line" id="232948"><span class="nick" style="color:#8dd3c7"><a href="#232948" label="[23:29:48]">&lt;Googulator&gt;</a></span><span class="message">in fact, I'm pretty sure I know what's breaking there</span></div><div class="line" id="233011"><span class="nick" style="color:#8dd3c7"><a href="#233011" label="[23:30:11]">&lt;Googulator&gt;</a></span><span class="message">&gt; dicl[diclPos] = (0xFF &amp; symbol) | (0xFFFFFF00 &amp; dicl[diclPos]);</span></div><div class="line" id="233014"><span class="nick" style="color:#8dd3c7"><a href="#233014" label="[23:30:14]">&lt;Googulator&gt;</a></span><span class="message">this pattern</span></div><div class="line" id="233027"><span class="nick" style="color:#8dd3c7"><a href="#233027" label="[23:30:27]">&lt;Googulator&gt;</a></span><span class="message">on 64-bit archs, it needs to be dicl[diclPos] = (0xFF &amp; symbol) | (0xFFFFFFFFFFFFFF00 &amp; dicl[diclPos]);</span></div><div class="line" id="233042"><span class="nick" style="color:#2e2a4a"><a href="#233042" label="[23:30:42]">&lt;oriansj&gt;</a></span><span class="message">you need to do ~0xFF</span></div><div class="line" id="233058"><span class="nick" style="color:#8dd3c7"><a href="#233058" label="[23:30:58]">&lt;Googulator&gt;</a></span><span class="message">does ~0xFF work in M2-Planet?</span></div><div class="line" id="233107"><span class="nick" style="color:#2e2a4a"><a href="#233107" label="[23:31:07]">&lt;oriansj&gt;</a></span><span class="message">it should</span></div><div class="line" id="233307"><span class="nick" style="color:#2e2a4a"><a href="#233307" label="[23:33:07]">&lt;oriansj&gt;</a></span><span class="message">yeah, it loades the immediate 0xFF and then does NOT R0 R0; so yeah, it'll flip all bits to 1 execpt the bottom 8 which will be zero</span></div><div class="line" id="233332"><span class="nick" style="color:#2e2a4a"><a href="#233332" label="[23:33:32]">&lt;oriansj&gt;</a></span><span class="message">do (~0xFF) if you are concerned about ordering</span></div><div class="line" id="233515"><span class="nick" style="color:#8dd3c7"><a href="#233515" label="[23:35:15]">&lt;Googulator&gt;</a></span><span class="message">seems to not break x86 at least</span></div><div class="line" id="233522"><span class="nick" style="color:#8dd3c7"><a href="#233522" label="[23:35:22]">&lt;Googulator&gt;</a></span><span class="message">unfortunately AMD64 doesn't even build</span></div><div class="line" id="233525"><span class="nick" style="color:#8dd3c7"><a href="#233525" label="[23:35:25]">&lt;Googulator&gt;</a></span><span class="message">fails in m2libc</span></div><div class="line" id="233535"><span class="nick" style="color:#2e2a4a"><a href="#233535" label="[23:35:35]">&lt;oriansj&gt;</a></span><span class="message">odd</span></div><div class="line" id="233551"><span class="nick" style="color:#8dd3c7"><a href="#233551" label="[23:35:51]">&lt;Googulator&gt;</a></span><span class="message">actually it's failing in hex2-linker-1</span></div><div class="line" id="233558"><span class="nick" style="color:#8dd3c7"><a href="#233558" label="[23:35:58]">&lt;Googulator&gt;</a></span><span class="message">./M2libc/amd64/linux/unistd.c:186:ERROR in create_struct</span></div><div class="line" id="233558"><span class="nick" style="color:#8dd3c7"><a href="#233558" label="[23:35:58]">&lt;Googulator&gt;</a></span><span class="message"> Missing {</span></div><div class="line" id="233609"><span class="nick" style="color:#2e2a4a"><a href="#233609" label="[23:36:09]">&lt;oriansj&gt;</a></span><span class="message">(unless you did (0xFFFFFFFFFFFFFF00 which super doesn't work))</span></div><div class="line" id="233708"><span class="nick" style="color:#8dd3c7"><a href="#233708" label="[23:37:08]">&lt;Googulator&gt;</a></span><span class="message">I did (~0xFF)</span></div><div class="line" id="233717"><span class="nick" style="color:#8dd3c7"><a href="#233717" label="[23:37:17]">&lt;Googulator&gt;</a></span><span class="message">but it doesn't even reach building unxz</span></div><div class="line" id="233748"><span class="nick" style="color:#2e2a4a"><a href="#233748" label="[23:37:48]">&lt;oriansj&gt;</a></span><span class="message">are you seeing reading file: &lt;sys/utsname.h&gt;  prior to unistd.c?</span></div><div class="line" id="233844"><span class="nick" style="color:#2e2a4a"><a href="#233844" label="[23:38:44]">&lt;oriansj&gt;</a></span><span class="message">as the stage0-posix-amd64 should be updated to use the new M2libc file</span></div><div class="line" id="233916"><span class="nick" style="color:#8dd3c7"><a href="#233916" label="[23:39:16]">&lt;Googulator&gt;</a></span><span class="message">that was it</span></div><div class="line" id="233953"><span class="nick" style="color:#2e2a4a"><a href="#233953" label="[23:39:53]">&lt;oriansj&gt;</a></span><span class="message">yeah, any struct name not recognized is considered a struct definition in M2-Planet</span></div><div class="line" id="234029"><span class="nick" style="color:#2e2a4a"><a href="#234029" label="[23:40:29]">&lt;oriansj&gt;</a></span><span class="message">which is why struct foo {..} is the supported pattern not struct {...} foo;</span></div><div class="line" id="234132"><span class="nick" style="color:#8dd3c7"><a href="#234132" label="[23:41:32]">&lt;Googulator&gt;</a></span><span class="message">OK, with (~0xFF), no segfault, but wrong output</span></div><div class="line" id="234202"><span class="nick" style="color:#2e2a4a"><a href="#234202" label="[23:42:02]">&lt;oriansj&gt;</a></span><span class="message">well the checksum is expected to change with code changes</span></div><div class="line" id="234228"><span class="nick" style="color:#2e2a4a"><a href="#234228" label="[23:42:28]">&lt;oriansj&gt;</a></span><span class="message">or do you mean unxz now is not producing correct output?</span></div><div class="line" id="234421"><span class="nick" style="color:#8dd3c7"><a href="#234421" label="[23:44:21]">&lt;Googulator&gt;</a></span><span class="message">yes, the output is wrong</span></div><div class="line" id="234429"><span class="nick" style="color:#8dd3c7"><a href="#234429" label="[23:44:29]">&lt;Googulator&gt;</a></span><span class="message">in fact, it seems to be outputting an empty file</span></div><div class="line" id="234441"><span class="nick" style="color:#8dd3c7"><a href="#234441" label="[23:44:41]">&lt;Googulator&gt;</a></span><span class="message">on amd64</span></div><div class="line" id="234442"><span class="nick" style="color:#2e2a4a"><a href="#234442" label="[23:44:42]">&lt;oriansj&gt;</a></span><span class="message">well atleast we found it early</span></div><div class="line" id="234447"><span class="nick" style="color:#8dd3c7"><a href="#234447" label="[23:44:47]">&lt;Googulator&gt;</a></span><span class="message">on x86, it works</span></div><div class="line" id="234524"><span class="nick" style="color:#2e2a4a"><a href="#234524" label="[23:45:24]">&lt;oriansj&gt;</a></span><span class="message">and the assembly should be very close</span></div><br /></div></body></html>