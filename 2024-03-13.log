<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-03-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="183714"><span class="nick" style="color:#389600"><a href="#183714" label="[18:37:14]">&lt;oriansj&gt;</a></span><span class="message">and for extra fun x86S is going to break compatibility for our kernel bootstrap</span></div><div class="line" id="202019"><span class="nick" style="color:#8dd3c7"><a href="#202019" label="[20:20:19]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what is x86S?</span></div><div class="line" id="202023"><span class="nick" style="color:#8dd3c7"><a href="#202023" label="[20:20:23]">&lt;stikonas&gt;</a></span><span class="message">dropping some bios stuff?</span></div><div class="line" id="202116"><span class="nick" style="color:#389600"><a href="#202116" label="[20:21:16]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.intel.com/content/www/us/en/developer/articles/technical/envisioning-future-simplified-architecture.html">https://www.intel.com/content/www/us/en/developer/articles/technical/envisioning-future-simplified-architecture.html</a> </span></div><div class="line" id="202215"><span class="nick" style="color:#389600"><a href="#202215" label="[20:22:15]">&lt;oriansj&gt;</a></span><span class="message">basically all of the 16bit and 32bit kernel mode stuff entirely and all of the 16bit user mode stuff entirely</span></div><div class="line" id="202910"><span class="nick" style="color:#8dd3c7"><a href="#202910" label="[20:29:10]">&lt;stikonas&gt;</a></span><span class="message">oriansj: doesn't really matter for kernel bootstsrapping</span></div><div class="line" id="202918"><span class="nick" style="color:#8dd3c7"><a href="#202918" label="[20:29:18]">&lt;stikonas&gt;</a></span><span class="message">as those new CPUs will almost surely need UEFI</span></div><div class="line" id="202928"><span class="nick" style="color:#8dd3c7"><a href="#202928" label="[20:29:28]">&lt;stikonas&gt;</a></span><span class="message">there isn't even compatibility mode</span></div><div class="line" id="202950"><span class="nick" style="color:#389600"><a href="#202950" label="[20:29:50]">&lt;oriansj&gt;</a></span><span class="message">well it will break builder-hex0 entirely</span></div><div class="line" id="203000"><span class="nick" style="color:#8dd3c7"><a href="#203000" label="[20:30:00]">&lt;stikonas&gt;</a></span><span class="message">yes, but it's already not usable on new intel systems</span></div><div class="line" id="203026"><span class="nick" style="color:#8dd3c7"><a href="#203026" label="[20:30:26]">&lt;stikonas&gt;</a></span><span class="message">I started state0-uefi but of course it's still nowhere finished</span></div><div class="line" id="203147"><span class="nick" style="color:#389600"><a href="#203147" label="[20:31:47]">&lt;oriansj&gt;</a></span><span class="message">hmmm.</span></div><div class="line" id="203229"><span class="nick" style="color:#8dd3c7"><a href="#203229" label="[20:32:29]">&lt;stikonas&gt;</a></span><span class="message">well, perhaps there is still AMD CPUs that support compatibility mode right now</span></div><div class="line" id="203237"><span class="nick" style="color:#8dd3c7"><a href="#203237" label="[20:32:37]">&lt;stikonas&gt;</a></span><span class="message">but I don't think it works well with compat mode anyway</span></div><div class="line" id="203247"><span class="nick" style="color:#8dd3c7"><a href="#203247" label="[20:32:47]">&lt;stikonas&gt;</a></span><span class="message">Googulator mentioned that there are various issues there</span></div><div class="line" id="203329"><span class="nick" style="color:#8dd3c7"><a href="#203329" label="[20:33:29]">&lt;stikonas&gt;</a></span><span class="message">anyway, in stage0-uefi (plus posix-runner)  we can run stuff up to (and including mes)</span></div><div class="line" id="203408"><span class="nick" style="color:#8dd3c7"><a href="#203408" label="[20:34:08]">&lt;stikonas&gt;</a></span><span class="message">tcc doesn't work for both userspace bootstrap issues and missing features in posix-runner</span></div><div class="line" id="203443"><span class="nick" style="color:#8dd3c7"><a href="#203443" label="[20:34:43]">&lt;stikonas&gt;</a></span><span class="message">(tcc stuff creates non-continuous segments</span></div><div class="line" id="203458"><span class="nick" style="color:#8dd3c7"><a href="#203458" label="[20:34:58]">&lt;stikonas&gt;</a></span><span class="message">that at the moment posix-runner does not know how to load</span></div><div class="line" id="203515"><span class="nick" style="color:#8dd3c7"><a href="#203515" label="[20:35:15]">&lt;stikonas&gt;</a></span><span class="message">and of course tcc-mes on x86_64 crashes even on Linux</span></div><div class="line" id="203753"><span class="nick" style="color:#8dd3c7"><a href="#203753" label="[20:37:53]">&lt;stikonas&gt;</a></span><span class="message">(possibly if somebody figures how to do paging, we could achieve far more in stage0-posix)</span></div><div class="line" id="205709"><span class="nick" style="color:#2e2a4a"><a href="#205709" label="[20:57:09]">&lt;Googulator&gt;</a></span><span class="message">I doubt x86s is coming to &quot;everyday&quot; CPUs anytime soon</span></div><div class="line" id="205746"><span class="nick" style="color:#2e2a4a"><a href="#205746" label="[20:57:46]">&lt;Googulator&gt;</a></span><span class="message">Probably will be Xeon-only</span></div><div class="line" id="205804"><span class="nick" style="color:#2e2a4a"><a href="#205804" label="[20:58:04]">&lt;Googulator&gt;</a></span><span class="message">at least for a while</span></div><div class="line" id="205817"><span class="nick" style="color:#8dd3c7"><a href="#205817" label="[20:58:17]">&lt;stikonas&gt;</a></span><span class="message">still, we need to progress stage0-uefi :)</span></div><div class="line" id="205823"><span class="nick" style="color:#2e2a4a"><a href="#205823" label="[20:58:23]">&lt;Googulator&gt;</a></span><span class="message">obviously</span></div><div class="line" id="210007"><span class="nick" style="color:#2e2a4a"><a href="#210007" label="[21:00:07]">&lt;Googulator&gt;</a></span><span class="message">AMD is still supporting CSM in all of their current sockets, although integrated graphics lack a 16-bit VBIOS</span></div><div class="line" id="210019"><span class="nick" style="color:#2e2a4a"><a href="#210019" label="[21:00:19]">&lt;Googulator&gt;</a></span><span class="message">so we're good there at least until AM5 is discontinued</span></div><div class="line" id="210041"><span class="nick" style="color:#2e2a4a"><a href="#210041" label="[21:00:41]">&lt;Googulator&gt;</a></span><span class="message">(at this point, even AM4 is continuing to receive new CPUs)</span></div><div class="line" id="210216"><span class="nick" style="color:#2e2a4a"><a href="#210216" label="[21:02:16]">&lt;Googulator&gt;</a></span><span class="message">The big problem with x86S is that it's gonna break virtually all operating systems, even ones that are modern today</span></div><div class="line" id="210234"><span class="nick" style="color:#8dd3c7"><a href="#210234" label="[21:02:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, so you won't be able to just build old linux</span></div><div class="line" id="210242"><span class="nick" style="color:#2e2a4a"><a href="#210242" label="[21:02:42]">&lt;Googulator&gt;</a></span><span class="message">Not just that</span></div><div class="line" id="210349"><span class="nick" style="color:#2e2a4a"><a href="#210349" label="[21:03:49]">&lt;Googulator&gt;</a></span><span class="message">Some qemu devs tested booting several current OSes in a simulated x86S environment - nothing boots, not even Windows 11 Insider or Linux master</span></div><div class="line" id="210436"><span class="nick" style="color:#8dd3c7"><a href="#210436" label="[21:04:36]">&lt;stikonas&gt;</a></span><span class="message">well, new ones will be fixed</span></div><div class="line" id="210447"><span class="nick" style="color:#8dd3c7"><a href="#210447" label="[21:04:47]">&lt;stikonas&gt;</a></span><span class="message">but that could be Linux 7 or so...</span></div><div class="line" id="210458"><span class="nick" style="color:#8dd3c7"><a href="#210458" label="[21:04:58]">&lt;stikonas&gt;</a></span><span class="message">far beyond what is buildable with GCC 4</span></div><div class="line" id="210510"><span class="nick" style="color:#8dd3c7"><a href="#210510" label="[21:05:10]">&lt;stikonas&gt;</a></span><span class="message">which means we'll have to do another iteration of GCC before Linux</span></div><div class="line" id="210747"><span class="nick" style="color:#2e2a4a"><a href="#210747" label="[21:07:47]">&lt;Googulator&gt;</a></span><span class="message">IMO we will need to fork GCC 4.7.4, adding features needed by newer Linux &amp; co</span></div><div class="line" id="210806"><span class="nick" style="color:#2e2a4a"><a href="#210806" label="[21:08:06]">&lt;Googulator&gt;</a></span><span class="message">which is already what we (plan to?) do for riscv</span></div><div class="line" id="210812"><span class="nick" style="color:#8dd3c7"><a href="#210812" label="[21:08:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, about that</span></div><div class="line" id="210819"><span class="nick" style="color:#8dd3c7"><a href="#210819" label="[21:08:19]">&lt;stikonas&gt;</a></span><span class="message">ekaitz backported stuff to GCC 4.6</span></div><div class="line" id="210856"><span class="nick" style="color:#2e2a4a"><a href="#210856" label="[21:08:56]">&lt;Googulator&gt;</a></span><span class="message">&amp; then get Linus to commit to supporting the fork</span></div><div class="line" id="210909"><span class="nick" style="color:#2e2a4a"><a href="#210909" label="[21:09:09]">&lt;Googulator&gt;</a></span><span class="message">supporting building Linux with the forked gcc, that is</span></div><div class="line" id="210917"><span class="nick" style="color:#8dd3c7"><a href="#210917" label="[21:09:17]">&lt;stikonas&gt;</a></span><span class="message">well, that will be up to us...</span></div><div class="line" id="210931"><span class="nick" style="color:#8dd3c7"><a href="#210931" label="[21:09:31]">&lt;stikonas&gt;</a></span><span class="message">I doubt that Linus personally will care that much about our fork</span></div><div class="line" id="211009"><span class="nick" style="color:#2e2a4a"><a href="#211009" label="[21:10:09]">&lt;Googulator&gt;</a></span><span class="message">I mean, making sure the Linux kernel doesn't add more and more compiler checks for newer GCCs, like they do now (or if they do, add an exception for &quot;gccboot&quot; or whatever it will be called)</span></div><div class="line" id="211026"><span class="nick" style="color:#2e2a4a"><a href="#211026" label="[21:10:26]">&lt;Googulator&gt;</a></span><span class="message">alternatively, it might be the kernel that needs to be forked</span></div><div class="line" id="211049"><span class="nick" style="color:#389600"><a href="#211049" label="[21:10:49]">&lt;oriansj&gt;</a></span><span class="message">well they added the checks because their code has been broken by compiled via older compilers</span></div><div class="line" id="211052"><span class="nick" style="color:#2e2a4a"><a href="#211052" label="[21:10:52]">&lt;Googulator&gt;</a></span><span class="message">which could be necessary if any core kernel component is rewritten in Rust</span></div><div class="line" id="211128"><span class="nick" style="color:#389600"><a href="#211128" label="[21:11:28]">&lt;oriansj&gt;</a></span><span class="message">but yeah, it isn't a near term issue but it is definitely an issue that will take years to prepare for</span></div><div class="line" id="211201"><span class="nick" style="color:#2e2a4a"><a href="#211201" label="[21:12:01]">&lt;Googulator&gt;</a></span><span class="message">Hard dependency of Rust is a more likely near term issue that we'll need to address</span></div><div class="line" id="211233"><span class="nick" style="color:#2e2a4a"><a href="#211233" label="[21:12:33]">&lt;Googulator&gt;</a></span><span class="message">as I've found out with Gentoo, you pretty much can't bring up a GUI today without Rust</span></div><div class="line" id="211241"><span class="nick" style="color:#2e2a4a"><a href="#211241" label="[21:12:41]">&lt;Googulator&gt;</a></span><span class="message">&amp; Rust is already in the kernel, just optionally</span></div><div class="line" id="211323"><span class="nick" style="color:#2e2a4a"><a href="#211323" label="[21:13:23]">&lt;Googulator&gt;</a></span><span class="message">(hope they don't also start depending on Zig...)</span></div><div class="line" id="211345"><span class="nick" style="color:#8dd3c7"><a href="#211345" label="[21:13:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, but kernel rust is most likely limited to non-core drivers</span></div><div class="line" id="211348"><span class="nick" style="color:#8dd3c7"><a href="#211348" label="[21:13:48]">&lt;stikonas&gt;</a></span><span class="message">and optional</span></div><div class="line" id="211357"><span class="nick" style="color:#8dd3c7"><a href="#211357" label="[21:13:57]">&lt;stikonas&gt;</a></span><span class="message">and later will probably just use gcc-rust</span></div><div class="line" id="211413"><span class="nick" style="color:#2e2a4a"><a href="#211413" label="[21:14:13]">&lt;Googulator&gt;</a></span><span class="message">Right now it is, but there are plans for rewriting memory management code in Rust</span></div><div class="line" id="211445"><span class="nick" style="color:#2e2a4a"><a href="#211445" label="[21:14:45]">&lt;Googulator&gt;</a></span><span class="message">is gcc-rust gonna be C++11 like the rest of gcc?</span></div><div class="line" id="211508"><span class="nick" style="color:#2e2a4a"><a href="#211508" label="[21:15:08]">&lt;Googulator&gt;</a></span><span class="message">because if gcc-rust is written in Rust, then it solves nothing</span></div><div class="line" id="211559"><span class="nick" style="color:#8dd3c7"><a href="#211559" label="[21:15:59]">&lt;stikonas&gt;</a></span><span class="message">I guess it will be C+11</span></div><div class="line" id="211721"><span class="nick" style="color:#8dd3c7"><a href="#211721" label="[21:17:21]">&lt;stikonas&gt;</a></span><span class="message">well, eventually I think it will be harder to limit source seed to 256 MiB...</span></div><div class="line" id="211847"><span class="nick" style="color:#2e2a4a"><a href="#211847" label="[21:18:47]">&lt;Googulator&gt;</a></span><span class="message">256MiB is relevant for trusted boot drive only, but then we aren't targeting future hardware either</span></div><div class="line" id="211922"><span class="nick" style="color:#2e2a4a"><a href="#211922" label="[21:19:22]">&lt;Googulator&gt;</a></span><span class="message">doing trusted drive bootstrap on a CPU manufactured 5 years from now undermines trust anyway</span></div><div class="line" id="212058"><span class="nick" style="color:#2e2a4a"><a href="#212058" label="[21:20:58]">&lt;Googulator&gt;</a></span><span class="message">by that time, an APT had plenty of time to build subversion code into the hardware with full knowledge about how we're doing bootstrapping</span></div><div class="line" id="212217"><span class="nick" style="color:#2e2a4a"><a href="#212217" label="[21:22:17]">&lt;Googulator&gt;</a></span><span class="message">unless it's fully open hardware manufactured through verifiable means with clean provenance</span></div><div class="line" id="212228"><span class="nick" style="color:#2e2a4a"><a href="#212228" label="[21:22:28]">&lt;Googulator&gt;</a></span><span class="message">which x86S is not gonna be</span></div><div class="line" id="214754"><span class="nick" style="color:#2e2a4a"><a href="#214754" label="[21:47:54]">&lt;Googulator&gt;</a></span><span class="message">Looks like there has been some progress into bootstrapping OCaml: <a rel="nofollow" href="https://10years.guix.gnu.org/video/camlboot-debootstrapping-the-ocaml-compiler/">https://10years.guix.gnu.org/video/camlboot-debootstrapping-the-ocaml-compiler/</a> </span></div><div class="line" id="215256"><span class="nick" style="color:#8dd3c7"><a href="#215256" label="[21:52:56]">&lt;stikonas&gt;</a></span><span class="message">Googulator: yes, it was reported here by author</span></div><div class="line" id="215338"><span class="nick" style="color:#8dd3c7"><a href="#215338" label="[21:53:38]">&lt;stikonas&gt;</a></span><span class="message">camlboot is apparently quite slow but works</span></div><div class="line" id="215345"><span class="nick" style="color:#8dd3c7"><a href="#215345" label="[21:53:45]">&lt;stikonas&gt;</a></span><span class="message">maybe takes 12h or so</span></div><div class="line" id="215433"><span class="nick" style="color:#2e2a4a"><a href="#215433" label="[21:54:33]">&lt;Googulator&gt;</a></span><span class="message">&amp; looks like ocaml's GitHub repository does go back to 4.0 and even earlier</span></div><div class="line" id="215508"><span class="nick" style="color:#2e2a4a"><a href="#215508" label="[21:55:08]">&lt;Googulator&gt;</a></span><span class="message">What's ocaml's policy for building version N with version (N-k)?</span></div><div class="line" id="215534"><span class="nick" style="color:#2e2a4a"><a href="#215534" label="[21:55:34]">&lt;Googulator&gt;</a></span><span class="message">Do they at least guarantee N-1?</span></div><div class="line" id="215617"><span class="nick" style="color:#8dd3c7"><a href="#215617" label="[21:56:17]">&lt;stikonas&gt;</a></span><span class="message">probably not</span></div><div class="line" id="215856"><span class="nick" style="color:#2e2a4a"><a href="#215856" label="[21:58:56]">&lt;Googulator&gt;</a></span><span class="message">ouch</span></div><div class="line" id="215901"><span class="nick" style="color:#2e2a4a"><a href="#215901" label="[21:59:01]">&lt;Googulator&gt;</a></span><span class="message">hopefully not like autoconf</span></div><div class="line" id="215940"><span class="nick" style="color:#8dd3c7"><a href="#215940" label="[21:59:40]">&lt;stikonas&gt;</a></span><span class="message">autoconf is not too bad</span></div><div class="line" id="215948"><span class="nick" style="color:#8dd3c7"><a href="#215948" label="[21:59:48]">&lt;stikonas&gt;</a></span><span class="message">you can jump multiple versions most of the time</span></div><div class="line" id="215957"><span class="nick" style="color:#8dd3c7"><a href="#215957" label="[21:59:57]">&lt;stikonas&gt;</a></span><span class="message">anyway, I haven't tired camlboot</span></div><div class="line" id="220003"><span class="nick" style="color:#8dd3c7"><a href="#220003" label="[22:00:03]">&lt;stikonas&gt;</a></span><span class="message">and then follow-on bootstrap...</span></div><div class="line" id="220328"><span class="nick" style="color:#2e2a4a"><a href="#220328" label="[22:03:28]">&lt;Googulator&gt;</a></span><span class="message">I'm referring to the incident where a commit to autoconf (or was it automake?) introduced a new language feature, whose implementation already depended on that feature</span></div><div class="line" id="220417"><span class="nick" style="color:#8dd3c7"><a href="#220417" label="[22:04:17]">&lt;stikonas&gt;</a></span><span class="message">Googulator: probably bison</span></div><div class="line" id="220417"><span class="nick" style="color:#2e2a4a"><a href="#220417" label="[22:04:17]">&lt;Googulator&gt;</a></span><span class="message">the actual code that was originally used to bring that feature up was never committed or even revealed, only the simplified rewrite relying on the feature</span></div><div class="line" id="220452"><span class="nick" style="color:#8dd3c7"><a href="#220452" label="[22:04:52]">&lt;stikonas&gt;</a></span><span class="message">autoconf/automake might have something like that too to some extent but less problematic</span></div><div class="line" id="220515"><span class="nick" style="color:#2e2a4a"><a href="#220515" label="[22:05:15]">&lt;Googulator&gt;</a></span><span class="message">bison actually sounds more probable indeed, as it directly deals with language parsing</span></div><div class="line" id="220516"><span class="nick" style="color:#8dd3c7"><a href="#220516" label="[22:05:16]">&lt;stikonas&gt;</a></span><span class="message">because autoconf also often includes ./bootstrap script</span></div><div class="line" id="220526"><span class="nick" style="color:#8dd3c7"><a href="#220526" label="[22:05:26]">&lt;stikonas&gt;</a></span><span class="message">that uses e.g. sed to build autoconf from autoconf.in</span></div><div class="line" id="220654"><span class="nick" style="color:#8dd3c7"><a href="#220654" label="[22:06:54]">&lt;stikonas&gt;</a></span><span class="message">anyway, that was some old bison</span></div><div class="line" id="220708"><span class="nick" style="color:#8dd3c7"><a href="#220708" label="[22:07:08]">&lt;stikonas&gt;</a></span><span class="message">and we do  have a cleaner bison 3.4.1 bootstrap now</span></div><div class="line" id="223852"><span class="nick" style="color:#2e2a4a"><a href="#223852" label="[22:38:52]">&lt;Googulator&gt;</a></span><span class="message">Looks like git history for ocaml does at least contain everything needed for walking the bootstrap chain, even if an N-1 policy isn't followed</span></div><div class="line" id="223905"><span class="nick" style="color:#2e2a4a"><a href="#223905" label="[22:39:05]">&lt;Googulator&gt;</a></span><span class="message">the bad news is it's about 300 steps long, assuming nothing can be skipped</span></div><div class="line" id="224109"><span class="nick" style="color:#8dd3c7"><a href="#224109" label="[22:41:09]">&lt;stikonas&gt;</a></span><span class="message">most likely things can be skipped...</span></div><div class="line" id="224126"><span class="nick" style="color:#8dd3c7"><a href="#224126" label="[22:41:26]">&lt;stikonas&gt;</a></span><span class="message">I doubt that you need more than a few steps</span></div><div class="line" id="224138"><span class="nick" style="color:#8dd3c7"><a href="#224138" label="[22:41:38]">&lt;stikonas&gt;</a></span><span class="message">the problem though is that we don't have a documentation on which ones are needed</span></div><div class="line" id="224145"><span class="nick" style="color:#8dd3c7"><a href="#224145" label="[22:41:45]">&lt;stikonas&gt;</a></span><span class="message">maybe N-1, maybe not</span></div><div class="line" id="224559"><span class="nick" style="color:#2e2a4a"><a href="#224559" label="[22:45:59]">&lt;Googulator&gt;</a></span><span class="message">actually, I was checkign the wrong branch (5.2 development) - for 4.14, which is what's apparently used in real life, it's actually ~110 steps &quot;only&quot;</span></div><div class="line" id="224726"><span class="nick" style="color:#8dd3c7"><a href="#224726" label="[22:47:26]">&lt;stikonas&gt;</a></span><span class="message">I doubt it would be more than 10</span></div><div class="line" id="232406"><span class="nick" style="color:#389600"><a href="#232406" label="[23:24:06]">&lt;oriansj&gt;</a></span><span class="message">Googulator: 110 steps worst case isn't bad (annoying and slow but viable); It can always be optimized and reduced.  But yeah x86S and Linux having a hard Rust dependency certainly will force us to enhance Fiwix to enable more steps to run on it.</span></div><div class="line" id="232530"><span class="nick" style="color:#389600"><a href="#232530" label="[23:25:30]">&lt;oriansj&gt;</a></span><span class="message">and 256MB trusted bootstrap is going to disappear far faster than we would want but a good many tools are bloating in features. And it is unlikely Gnode style Plan 9 on L4-SEC is likely to appear.</span></div><br /></div></body></html>