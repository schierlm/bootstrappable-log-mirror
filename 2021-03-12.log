<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="014330"><span class="nick" style="color:#8dd3c7"><a href="#014330" label="[01:43:30]">&lt;stikonas&gt;</a></span><span class="message">pder: when rebuilding gawk, you might need my libtool commits too...</span></div><div class="line" id="014340"><span class="nick" style="color:#8dd3c7"><a href="#014340" label="[01:43:40]">&lt;stikonas&gt;</a></span><span class="message">I'm almost done with it now</span></div><div class="line" id="014412"><span class="nick" style="color:#8dd3c7"><a href="#014412" label="[01:44:12]">&lt;stikonas&gt;</a></span><span class="message">working on binutils now, and then I think I need to rebuild libtool</span></div><div class="line" id="072853"><span class="nick" style="color:#2e2a4a"><a href="#072853" label="[07:28:53]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: pder neat!! we got mentioned!</span></div><div class="line" id="072855"><span class="nick" style="color:#2e2a4a"><a href="#072855" label="[07:28:55]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=26422904">https://news.ycombinator.com/item?id=26422904</a> </span></div><div class="line" id="072901"><span class="nick" style="color:#2e2a4a"><a href="#072901" label="[07:29:01]">&lt;fossy&gt;</a></span><span class="message">or is pabs3 == pder</span></div><div class="line" id="072920"><span class="nick" style="color:#6b8072"><a href="#072920" label="[07:29:20]">&lt;pabs3&gt;</a></span><span class="message">pabs3 != pder</span></div><div class="line" id="072926"><span class="nick" style="color:#2e2a4a"><a href="#072926" label="[07:29:26]">&lt;fossy&gt;</a></span><span class="message">oh, hi there, pabs3</span></div><div class="line" id="072929"><span class="nick" style="color:#2e2a4a"><a href="#072929" label="[07:29:29]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="073000"><span class="nick" style="color:#2e2a4a"><a href="#073000" label="[07:30:00]">&lt;fossy&gt;</a></span><span class="message">ty for the mention :P</span></div><div class="line" id="085419"><span class="nick" style="color:#80b1d3"><a href="#085419" label="[08:54:19]">&lt;lle-bout&gt;</a></span><span class="message">hello! :-)</span></div><div class="line" id="085436"><span class="nick" style="color:#80b1d3"><a href="#085436" label="[08:54:36]">&lt;lle-bout&gt;</a></span><span class="message">how is full source bootstrap going on the various archs?</span></div><div class="line" id="090721"><span class="nick" style="color:#6b8072"><a href="#090721" label="[09:07:21]">&lt;pabs3&gt;</a></span><span class="message">fossy: np, I try to mention bootstrappable in every opportunity I can :)</span></div><div class="line" id="090855"><span class="nick" style="color:#6b8072"><a href="#090855" label="[09:08:55]">&lt;pabs3&gt;</a></span><span class="message">a comment from the subthread above leads me to ask what is the oldest x86 CPU hex0 can boot on</span></div><div class="line" id="090922"><span class="nick" style="color:#6b8072"><a href="#090922" label="[09:09:22]">&lt;pabs3&gt;</a></span><span class="message">lle-bout: I think this is the best doc I've seen of the current plan/status <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="091024"><span class="nick" style="color:#80b1d3"><a href="#091024" label="[09:10:24]">&lt;lle-bout&gt;</a></span><span class="message">pabs3: thank you :-)</span></div><div class="line" id="091036"><span class="nick" style="color:#80b1d3"><a href="#091036" label="[09:10:36]">&lt;lle-bout&gt;</a></span><span class="message">OriansJ was making ppc64le things last time, that's why I ask how it is going</span></div><div class="line" id="101243"><span class="nick" style="color:#6d2462"><a href="#101243" label="[10:12:43]">&lt;gforce_d11977&gt;</a></span><span class="message">pabs3: i believe an i386 / 386DX can run the bootstrap, because for now it needs &gt;16megabyte memory, i fact ~1GB mem</span></div><div class="line" id="101430"><span class="nick" style="color:#6d2462"><a href="#101430" label="[10:14:30]">&lt;gforce_d11977&gt;</a></span><span class="message">lle-bout: at least i have now easy qemu bootable VM's, and i will work on ppc64le soon: <a rel="nofollow" href="https://github.com/bittorf/kritis-linux">https://github.com/bittorf/kritis-linux</a> </span></div><div class="line" id="101607"><span class="nick" style="color:#6d2462"><a href="#101607" label="[10:16:07]">&lt;gforce_d11977&gt;</a></span><span class="message">for ARM i want to go the the (c)oreboot way: <a rel="nofollow" href="https://github.com/oreboot/oreboot">https://github.com/oreboot/oreboot</a> </span></div><div class="line" id="104020"><span class="nick" style="color:#234e69"><a href="#104020" label="[10:40:20]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: if you have time, review see/libtool pr</span></div><div class="line" id="104047"><span class="nick" style="color:#234e69"><a href="#104047" label="[10:40:47]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/61">https://github.com/fosslinux/live-bootstrap/pull/61</a> </span></div><div class="line" id="111816"><span class="nick" style="color:#2e2a4a"><a href="#111816" label="[11:18:16]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: shortly, gh access should be back in a sec</span></div><div class="line" id="113843"><span class="nick" style="color:#2e2a4a"><a href="#113843" label="[11:38:43]">&lt;fossy&gt;</a></span><span class="message">good</span></div><div class="line" id="113845"><span class="nick" style="color:#2e2a4a"><a href="#113845" label="[11:38:45]">&lt;fossy&gt;</a></span><span class="message">there you go!</span></div><div class="line" id="113904"><span class="nick" style="color:#6c3d55"><a href="#113904" label="[11:39:04]">&lt;stikonas_&gt;</a></span><span class="message">thanks</span></div><div class="line" id="113915"><span class="nick" style="color:#2e2a4a"><a href="#113915" label="[11:39:15]">&lt;fossy&gt;</a></span><span class="message">pabs3: i *think* i386 should work; pentium 4 is a defininitive yes</span></div><div class="line" id="113916"><span class="nick" style="color:#6c3d55"><a href="#113916" label="[11:39:16]">&lt;stikonas_&gt;</a></span><span class="message">yeah, reusing sed from submodule is a bit unsatisfactory</span></div><div class="line" id="113928"><span class="nick" style="color:#2e2a4a"><a href="#113928" label="[11:39:28]">&lt;fossy&gt;</a></span><span class="message">yeah, i don't like it very much :/</span></div><div class="line" id="113931"><span class="nick" style="color:#2e2a4a"><a href="#113931" label="[11:39:31]">&lt;fossy&gt;</a></span><span class="message">submodules are very temporary</span></div><div class="line" id="113950"><span class="nick" style="color:#6c3d55"><a href="#113950" label="[11:39:50]">&lt;stikonas_&gt;</a></span><span class="message">well, yeah, we only have a few of them</span></div><div class="line" id="113959"><span class="nick" style="color:#2e2a4a"><a href="#113959" label="[11:39:59]">&lt;fossy&gt;</a></span><span class="message">mhm</span></div><div class="line" id="114026"><span class="nick" style="color:#6c3d55"><a href="#114026" label="[11:40:26]">&lt;stikonas_&gt;</a></span><span class="message">actually, only sed is in submodule after tcc</span></div><div class="line" id="114029"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="114039"><span class="nick" style="color:#8dd3c7"><a href="#114039" label="[11:40:39]">&lt;stikonas&gt;</a></span><span class="message">even tar is from tarball</span></div><div class="line" id="114139"><span class="nick" style="color:#2e2a4a"><a href="#114139" label="[11:41:39]">&lt;fossy&gt;</a></span><span class="message">oh yeah</span></div><div class="line" id="114145"><span class="nick" style="color:#2e2a4a"><a href="#114145" label="[11:41:45]">&lt;fossy&gt;</a></span><span class="message">janneke: hm, can bootar run on mes</span></div><div class="line" id="114152"><span class="nick" style="color:#2e2a4a"><a href="#114152" label="[11:41:52]">&lt;fossy&gt;</a></span><span class="message">i guess i can try that myself</span></div><div class="line" id="114153"><span class="nick" style="color:#8dd3c7"><a href="#114153" label="[11:41:53]">&lt;stikonas&gt;</a></span><span class="message">fossy: I don't think so...</span></div><div class="line" id="114159"><span class="nick" style="color:#2e2a4a"><a href="#114159" label="[11:41:59]">&lt;fossy&gt;</a></span><span class="message">i am doubting it</span></div><div class="line" id="114205"><span class="nick" style="color:#8dd3c7"><a href="#114205" label="[11:42:05]">&lt;stikonas&gt;</a></span><span class="message">I think it needs guile</span></div><div class="line" id="114212"><span class="nick" style="color:#8dd3c7"><a href="#114212" label="[11:42:12]">&lt;stikonas&gt;</a></span><span class="message">anyway, tar we just pre-untar...</span></div><div class="line" id="114213"><span class="nick" style="color:#2e2a4a"><a href="#114213" label="[11:42:13]">&lt;fossy&gt;</a></span><span class="message">yeah i agree</span></div><div class="line" id="114218"><span class="nick" style="color:#2e2a4a"><a href="#114218" label="[11:42:18]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="114250"><span class="nick" style="color:#8dd3c7"><a href="#114250" label="[11:42:50]">&lt;stikonas&gt;</a></span><span class="message">so with sed we can switch to preunpacked tarball too</span></div><div class="line" id="114256"><span class="nick" style="color:#8dd3c7"><a href="#114256" label="[11:42:56]">&lt;stikonas&gt;</a></span><span class="message">instead of submodule</span></div><div class="line" id="114303"><span class="nick" style="color:#8dd3c7"><a href="#114303" label="[11:43:03]">&lt;stikonas&gt;</a></span><span class="message">or the other option is to get newer sed</span></div><div class="line" id="114308"><span class="nick" style="color:#8dd3c7"><a href="#114308" label="[11:43:08]">&lt;stikonas&gt;</a></span><span class="message">for this recompile</span></div><div class="line" id="114316"><span class="nick" style="color:#8dd3c7"><a href="#114316" label="[11:43:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure what is better</span></div><div class="line" id="114348"><span class="nick" style="color:#8dd3c7"><a href="#114348" label="[11:43:48]">&lt;stikonas&gt;</a></span><span class="message">any preferences?</span></div><div class="line" id="114351"><span class="nick" style="color:#8dd3c7"><a href="#114351" label="[11:43:51]">&lt;stikonas&gt;</a></span><span class="message">which option</span></div><div class="line" id="114359"><span class="nick" style="color:#8dd3c7"><a href="#114359" label="[11:43:59]">&lt;stikonas&gt;</a></span><span class="message">I think both would work</span></div><div class="line" id="114755"><span class="nick" style="color:#d9d9d9"><a href="#114755" label="[11:47:55]">&lt;janneke&gt;</a></span><span class="message">fossy: yeah, not (yet)</span></div><div class="line" id="144228"><span class="nick" style="color:#6d2462"><a href="#144228" label="[14:42:28]">&lt;gforce_d11977&gt;</a></span><span class="message">pabs3: at least the bootstrap works with qemu-system-i386, unsure how exact compares this to real hardware</span></div><div class="line" id="170546"><span class="nick" style="color:#bc80bd"><a href="#170546" label="[17:05:46]">&lt;OriansJ&gt;</a></span><span class="message">lle-bout: To answer the question of the porting work. PPC64le now generates fully debuggable ELF binaries with hand written M1. Which means it is ready for M2-Planet use (I just need to find some time to start that work) And I've started on the PPC64 (big endian mode) and PPC32 porting efforts for mescc-tools [To determine if they are worth a full port].</span></div><div class="line" id="171258"><span class="nick" style="color:#bc80bd"><a href="#171258" label="[17:12:58]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: to answer the question of the oldest x86 CPU supported, depends heavily on the pieces involved. For example the steps from hex0 to M2-Planet will run the oldest 386 chips. However later stages that use floating point would require a 486 (as some floating point operations were not in 386 floating point coprocesser chips) but things such as modern Linux kernels need a 586-pae or newer CPU. But I feel that is the wrong way to</span></div><div class="line" id="171258"><span class="nick" style="color:#bc80bd"><a href="#171258" label="[17:12:58]">&lt;OriansJ&gt;</a></span><span class="message">address the question of secure silicon for bootstrapping. As libresilicon would enable us to create chips we can actually trust.</span></div><div class="line" id="171806"><span class="nick" style="color:#bc80bd"><a href="#171806" label="[17:18:06]">&lt;OriansJ&gt;</a></span><span class="message">Buying old chips is simply not a viable long solution to bootstrap trust; The Free Software Movement needs to embrace Free Hardware designs and Processes; ideally those that can be built locally by people that we personally know and trust or in methods that allow easy audit (microscope visable transistors in glass, etc)</span></div><div class="line" id="192400"><span class="nick" style="color:#3c5b35"><a href="#192400" label="[19:24:00]">&lt;Hagfish&gt;</a></span><span class="message">is it currently possible to emulate a 586 on a 386 to complete the steps that need modern hardware?</span></div><div class="line" id="194501"><span class="nick" style="color:#af8d2f"><a href="#194501" label="[19:45:01]">&lt;pder&gt;</a></span><span class="message">stikonas, fossy: would it be helpful to have a simple untar implementation that can be compiled with M2-Planet?</span></div><div class="line" id="194547"><span class="nick" style="color:#8dd3c7"><a href="#194547" label="[19:45:47]">&lt;stikonas&gt;</a></span><span class="message">pder: probably doesn't matter...</span></div><div class="line" id="194618"><span class="nick" style="color:#8dd3c7"><a href="#194618" label="[19:46:18]">&lt;stikonas&gt;</a></span><span class="message">we either have to copy that implementation into bootstrap system, or just pre-unpack tar source...</span></div><div class="line" id="194937"><span class="nick" style="color:#af8d2f"><a href="#194937" label="[19:49:37]">&lt;pder&gt;</a></span><span class="message">ok, I was trying to see if we could not include unpacked sed source</span></div><div class="line" id="195104"><span class="nick" style="color:#8dd3c7"><a href="#195104" label="[19:51:04]">&lt;stikonas&gt;</a></span><span class="message">well, we can prepatch tar...</span></div><div class="line" id="195841"><span class="nick" style="color:#af8d2f"><a href="#195841" label="[19:58:41]">&lt;pder&gt;</a></span><span class="message">what is the reason we patch tar?  is it a reproducibility thing?</span></div><div class="line" id="195947"><span class="nick" style="color:#af8d2f"><a href="#195947" label="[19:59:47]">&lt;pder&gt;</a></span><span class="message">It seems to compile without removing that line</span></div><div class="line" id="200418"><span class="nick" style="color:#af8d2f"><a href="#200418" label="[20:04:18]">&lt;pder&gt;</a></span><span class="message">nvm, it fails to link</span></div><div class="line" id="201855"><span class="nick" style="color:#bc80bd"><a href="#201855" label="[20:18:55]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well turing completeness really helps us here, assuming the system doing the emulation has enough address bits and RAM, it should be able to emulate anything newer or more complicated.</span></div><div class="line" id="202409"><span class="nick" style="color:#bc80bd"><a href="#202409" label="[20:24:09]">&lt;OriansJ&gt;</a></span><span class="message">pder: well if one wanted to radically simplify and reduce the steps to bootstrap getting a proper scheme in blynn-compiler's haskell subset would enable the leveraging of the pieces in Guix's current bootstrap path that leverages guile but it would be considerable work.</span></div><div class="line" id="202452"><span class="nick" style="color:#bc80bd"><a href="#202452" label="[20:24:52]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: well untar should be simple enough to be a single C source file and thus would be easy to add.</span></div><div class="line" id="202608"><span class="nick" style="color:#bc80bd"><a href="#202608" label="[20:26:08]">&lt;OriansJ&gt;</a></span><span class="message">Althought looking at the SHA256SUM tool, we probably could build it with M2-Planet+M2libc with only a handful of tweaks and remove the need for the fletcher16</span></div><div class="line" id="202715"><span class="nick" style="color:#8dd3c7"><a href="#202715" label="[20:27:15]">&lt;stikonas&gt;</a></span><span class="message">yeah, those things (sha2 and untar shouldn't be too hard)</span></div><div class="line" id="203051"><span class="nick" style="color:#bc80bd"><a href="#203051" label="[20:30:51]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I was thinking of mescc-tools-extra and the need for the utilities for bootstrapping and the tooling required for various pieces.</span></div><div class="line" id="203358"><span class="nick" style="color:#8dd3c7"><a href="#203358" label="[20:33:58]">&lt;stikonas&gt;</a></span><span class="message">well, basically, after tcc we only need untar...</span></div><div class="line" id="203407"><span class="nick" style="color:#8dd3c7"><a href="#203407" label="[20:34:07]">&lt;stikonas&gt;</a></span><span class="message">everything else can be built with tcc</span></div><div class="line" id="203420"><span class="nick" style="color:#bc80bd"><a href="#203420" label="[20:34:20]">&lt;OriansJ&gt;</a></span><span class="message">We could probably leverage kaem+Environmental variables to give it a proper installation path as M2libc supports chdir; which could remove the /after step</span></div><div class="line" id="203442"><span class="nick" style="color:#8dd3c7"><a href="#203442" label="[20:34:42]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, that might be nice...</span></div><div class="line" id="203450"><span class="nick" style="color:#8dd3c7"><a href="#203450" label="[20:34:50]">&lt;stikonas&gt;</a></span><span class="message">it's a bit annoying to be in /after folder too</span></div><div class="line" id="203459"><span class="nick" style="color:#8dd3c7"><a href="#203459" label="[20:34:59]">&lt;stikonas&gt;</a></span><span class="message">need to explicitely specify all installation prefixes</span></div><div class="line" id="203523"><span class="nick" style="color:#8dd3c7"><a href="#203523" label="[20:35:23]">&lt;stikonas&gt;</a></span><span class="message">but it's just a minor inconvenience, not a bootstrapping problem</span></div><div class="line" id="203618"><span class="nick" style="color:#bc80bd"><a href="#203618" label="[20:36:18]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: also by giving mescc-tools-extra a minimal wget, untar and sha256sum, you can skip submodules and just download the tarballs (verify them and then unpack and build)</span></div><div class="line" id="203753"><span class="nick" style="color:#8dd3c7"><a href="#203753" label="[20:37:53]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: that's assuming that bootstrap kernel has networking</span></div><div class="line" id="203807"><span class="nick" style="color:#8dd3c7"><a href="#203807" label="[20:38:07]">&lt;stikonas&gt;</a></span><span class="message">not sure if we want to have that assumption</span></div><div class="line" id="203828"><span class="nick" style="color:#bc80bd"><a href="#203828" label="[20:38:28]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: completely fair</span></div><div class="line" id="203928"><span class="nick" style="color:#af8d2f"><a href="#203928" label="[20:39:28]">&lt;pder&gt;</a></span><span class="message">I was looking at possibly eliminating the need for that sed one liner in tar by using the tcc preprocessor</span></div><div class="line" id="204002"><span class="nick" style="color:#8dd3c7"><a href="#204002" label="[20:40:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, then we can move sed after gzip</span></div><div class="line" id="204142"><span class="nick" style="color:#8dd3c7"><a href="#204142" label="[20:41:42]">&lt;stikonas&gt;</a></span><span class="message">pder: speaking of that getdate.y, we should also double check other packages that we are not using it...</span></div><div class="line" id="204152"><span class="nick" style="color:#8dd3c7"><a href="#204152" label="[20:41:52]">&lt;stikonas&gt;</a></span><span class="message">I just noticed that it is also present in coreutils</span></div><div class="line" id="204251"><span class="nick" style="color:#8dd3c7"><a href="#204251" label="[20:42:51]">&lt;stikonas&gt;</a></span><span class="message">pder: oh, we actaully are building it</span></div><div class="line" id="204253"><span class="nick" style="color:#8dd3c7"><a href="#204253" label="[20:42:53]">&lt;stikonas&gt;</a></span><span class="message">that needs fixing...</span></div><div class="line" id="204303"><span class="nick" style="color:#af8d2f"><a href="#204303" label="[20:43:03]">&lt;pder&gt;</a></span><span class="message">ah ok</span></div><div class="line" id="204318"><span class="nick" style="color:#8dd3c7"><a href="#204318" label="[20:43:18]">&lt;stikonas&gt;</a></span><span class="message">in coreutils 5.0 main.mk we build lib/getdate.c</span></div><div class="line" id="204512"><span class="nick" style="color:#8dd3c7"><a href="#204512" label="[20:45:12]">&lt;stikonas&gt;</a></span><span class="message">pder: btw, for tar have you thought about defining MSDOS?</span></div><div class="line" id="204517"><span class="nick" style="color:#8dd3c7"><a href="#204517" label="[20:45:17]">&lt;stikonas&gt;</a></span><span class="message">to get rid of that sed call?</span></div><div class="line" id="204609"><span class="nick" style="color:#af8d2f"><a href="#204609" label="[20:46:09]">&lt;pder&gt;</a></span><span class="message">hmm, that might work</span></div><div class="line" id="204635"><span class="nick" style="color:#8dd3c7"><a href="#204635" label="[20:46:35]">&lt;stikonas&gt;</a></span><span class="message">as for coreutils, I think it is only used in date (which we don't build) and touch</span></div><div class="line" id="204641"><span class="nick" style="color:#8dd3c7"><a href="#204641" label="[20:46:41]">&lt;stikonas&gt;</a></span><span class="message">touch we actually used</span></div><div class="line" id="204642"><span class="nick" style="color:#bc80bd"><a href="#204642" label="[20:46:42]">&lt;OriansJ&gt;</a></span><span class="message">I have an idea if you are having issues with TCC's preprocessor</span></div><div class="line" id="204705"><span class="nick" style="color:#8dd3c7"><a href="#204705" label="[20:47:05]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: no, I think pder just wants to use existing defines in tar source to skip unwanted code</span></div><div class="line" id="204711"><span class="nick" style="color:#8dd3c7"><a href="#204711" label="[20:47:11]">&lt;stikonas&gt;</a></span><span class="message">instead of patching unwanted line out</span></div><div class="line" id="204728"><span class="nick" style="color:#8dd3c7"><a href="#204728" label="[20:47:28]">&lt;stikonas&gt;</a></span><span class="message">pder: touch we actually use in bootstrap but only for creating empty files</span></div><div class="line" id="204738"><span class="nick" style="color:#8dd3c7"><a href="#204738" label="[20:47:38]">&lt;stikonas&gt;</a></span><span class="message">which can be done (and is done earlier in bootstrap) with catm</span></div><div class="line" id="204747"><span class="nick" style="color:#bc80bd"><a href="#204747" label="[20:47:47]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet">https://github.com/oriansj/M2-Mesoplanet</a> </span></div><div class="line" id="204803"><span class="nick" style="color:#af8d2f"><a href="#204803" label="[20:48:03]">&lt;pder&gt;</a></span><span class="message">we have the following two lines in tar.c:</span></div><div class="line" id="204807"><span class="nick" style="color:#bc80bd"><a href="#204807" label="[20:48:07]">&lt;OriansJ&gt;</a></span><span class="message">A fully independent C macro expander buildable with M2-Planet</span></div><div class="line" id="204808"><span class="nick" style="color:#af8d2f"><a href="#204808" label="[20:48:08]">&lt;pder&gt;</a></span><span class="message">time_t get_date ();</span></div><div class="line" id="204809"><span class="nick" style="color:#af8d2f"><a href="#204809" label="[20:48:09]">&lt;pder&gt;</a></span><span class="message">        newer_mtime_option = get_date (optarg, (voidstar) 0);</span></div><div class="line" id="204828"><span class="nick" style="color:#8dd3c7"><a href="#204828" label="[20:48:28]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: see this line <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/tar.git/tree/src/tar.c?id=3289dce5520299aeca677b1fc18383961a112949#n709">https://git.savannah.gnu.org/cgit/tar.git/tree/src/tar.c?id=3289dce5520299aeca677b1fc18383961a112949#n709</a> </span></div><div class="line" id="204840"><span class="nick" style="color:#af8d2f"><a href="#204840" label="[20:48:40]">&lt;pder&gt;</a></span><span class="message">We are using sed to remove the second line.  I thought maybe the same could be achieved without sed using tcc preprocessor</span></div><div class="line" id="204931"><span class="nick" style="color:#8dd3c7"><a href="#204931" label="[20:49:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, sounds like we should fix a few small issues in the near future, before jumping to gcc...</span></div><div class="line" id="205006"><span class="nick" style="color:#af8d2f"><a href="#205006" label="[20:50:06]">&lt;pder&gt;</a></span><span class="message">OriansJ: wow, cool!</span></div><div class="line" id="205157"><span class="nick" style="color:#bc80bd"><a href="#205157" label="[20:51:57]">&lt;OriansJ&gt;</a></span><span class="message">By using M2-Mesoplanet and simply defining MSDOS; those blocks will be entirely stripped and the rest will remain untouched.</span></div><div class="line" id="205421"><span class="nick" style="color:#af8d2f"><a href="#205421" label="[20:54:21]">&lt;pder&gt;</a></span><span class="message">Unfortunately -DMSDOS fails to compile since it wants missing headers</span></div><div class="line" id="205616"><span class="nick" style="color:#af8d2f"><a href="#205616" label="[20:56:16]">&lt;pder&gt;</a></span><span class="message">The other sed-less approach is just to include a stub for get_date and link it in</span></div><div class="line" id="205623"><span class="nick" style="color:#bc80bd"><a href="#205623" label="[20:56:23]">&lt;OriansJ&gt;</a></span><span class="message">pder: M2-Mesoplanet wouldn't care</span></div><div class="line" id="205700"><span class="nick" style="color:#bc80bd"><a href="#205700" label="[20:57:00]">&lt;OriansJ&gt;</a></span><span class="message">like M2-Planet it doesn't care about #includes at all</span></div><div class="line" id="205740"><span class="nick" style="color:#bc80bd"><a href="#205740" label="[20:57:40]">&lt;OriansJ&gt;</a></span><span class="message">(it doesn't even support them yet)</span></div><div class="line" id="205741"><span class="nick" style="color:#8dd3c7"><a href="#205741" label="[20:57:41]">&lt;stikonas&gt;</a></span><span class="message">can't we just define -DMSDOS command line flag?</span></div><div class="line" id="205749"><span class="nick" style="color:#8dd3c7"><a href="#205749" label="[20:57:49]">&lt;stikonas&gt;</a></span><span class="message">oh I se</span></div><div class="line" id="205800"><span class="nick" style="color:#8dd3c7"><a href="#205800" label="[20:58:00]">&lt;stikonas&gt;</a></span><span class="message">pder: even on that single file?</span></div><div class="line" id="205832"><span class="nick" style="color:#af8d2f"><a href="#205832" label="[20:58:32]">&lt;pder&gt;</a></span><span class="message">Yeah, I get In file included from src/tar_patched.c:19:</span></div><div class="line" id="205834"><span class="nick" style="color:#af8d2f"><a href="#205834" label="[20:58:34]">&lt;pder&gt;</a></span><span class="message">src/system.h:433: error: include file 'io.h' not found</span></div><div class="line" id="205853"><span class="nick" style="color:#bc80bd"><a href="#205853" label="[20:58:53]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: also -E with -DMSDOS might produce the desired result</span></div><div class="line" id="210024"><span class="nick" style="color:#8dd3c7"><a href="#210024" label="[21:00:24]">&lt;stikonas&gt;</a></span><span class="message">that is strange...</span></div><div class="line" id="210029"><span class="nick" style="color:#8dd3c7"><a href="#210029" label="[21:00:29]">&lt;stikonas&gt;</a></span><span class="message">(that it wants io.h)</span></div><div class="line" id="210046"><span class="nick" style="color:#8dd3c7"><a href="#210046" label="[21:00:46]">&lt;stikonas&gt;</a></span><span class="message">oh, it's from system.h</span></div><div class="line" id="210100"><span class="nick" style="color:#8dd3c7"><a href="#210100" label="[21:01:00]">&lt;stikonas&gt;</a></span><span class="message">pder: then OriansJ idea might work better</span></div><div class="line" id="210114"><span class="nick" style="color:#8dd3c7"><a href="#210114" label="[21:01:14]">&lt;stikonas&gt;</a></span><span class="message">if M2-Mesoplanet can preprocess just that one file</span></div><div class="line" id="210143"><span class="nick" style="color:#8dd3c7"><a href="#210143" label="[21:01:43]">&lt;stikonas&gt;</a></span><span class="message">or maybe tcc can preprocess just one file...</span></div><div class="line" id="210149"><span class="nick" style="color:#8dd3c7"><a href="#210149" label="[21:01:49]">&lt;stikonas&gt;</a></span><span class="message">without any includes</span></div><div class="line" id="210240"><span class="nick" style="color:#8dd3c7"><a href="#210240" label="[21:02:40]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, that's that -E option</span></div><div class="line" id="210325"><span class="nick" style="color:#8dd3c7"><a href="#210325" label="[21:03:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, it wants to include all files during preprocess step</span></div><div class="line" id="210512"><span class="nick" style="color:#af8d2f"><a href="#210512" label="[21:05:12]">&lt;pder&gt;</a></span><span class="message">What about writing our own get_date() that just returns a time_t?</span></div><div class="line" id="210529"><span class="nick" style="color:#8dd3c7"><a href="#210529" label="[21:05:29]">&lt;stikonas&gt;</a></span><span class="message">pder: there is also an option to create dummy op.h and pathmax.h</span></div><div class="line" id="210540"><span class="nick" style="color:#8dd3c7"><a href="#210540" label="[21:05:40]">&lt;stikonas&gt;</a></span><span class="message">well, we can write our own get_date too...</span></div><div class="line" id="210559"><span class="nick" style="color:#8dd3c7"><a href="#210559" label="[21:05:59]">&lt;stikonas&gt;</a></span><span class="message">just return unix 0 time...</span></div><div class="line" id="210825"><span class="nick" style="color:#8dd3c7"><a href="#210825" label="[21:08:25]">&lt;stikonas&gt;</a></span><span class="message">well, in any case I'll build newer sed 4.0.9 when we rebuild it later in the bootstrap</span></div><div class="line" id="211031"><span class="nick" style="color:#bc80bd"><a href="#211031" label="[21:10:31]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: M2-Mesoplanet can do any preprocessing behavior you desire and if not, I can change it to suit your mood.</span></div><div class="line" id="211156"><span class="nick" style="color:#bc80bd"><a href="#211156" label="[21:11:56]">&lt;OriansJ&gt;</a></span><span class="message">as I was planning on making it a fully stand-alone C preprocessor for the M3 work</span></div><div class="line" id="211659"><span class="nick" style="color:#bc80bd"><a href="#211659" label="[21:16:59]">&lt;OriansJ&gt;</a></span><span class="message">with enabling of #include to be entirely optional to enable it to be able to run on bare metal</span></div><div class="line" id="212219"><span class="nick" style="color:#2e2a4a"><a href="#212219" label="[21:22:19]">&lt;fossy&gt;</a></span><span class="message">I am no fan of pre untaring and pre patching</span></div><div class="line" id="212242"><span class="nick" style="color:#2e2a4a"><a href="#212242" label="[21:22:42]">&lt;fossy&gt;</a></span><span class="message">I want this to all ideally to be manually typeable into a system</span></div><div class="line" id="212312"><span class="nick" style="color:#2e2a4a"><a href="#212312" label="[21:23:12]">&lt;fossy&gt;</a></span><span class="message">pder: as such, an untar in m2-planet would be pretty great</span></div><div class="line" id="212332"><span class="nick" style="color:#2e2a4a"><a href="#212332" label="[21:23:32]">&lt;fossy&gt;</a></span><span class="message">this is why I like submodules tbh, it just means git is distribution only</span></div><div class="line" id="212344"><span class="nick" style="color:#2e2a4a"><a href="#212344" label="[21:23:44]">&lt;fossy&gt;</a></span><span class="message">we dont need to do any out of system processing</span></div><div class="line" id="212410"><span class="nick" style="color:#2e2a4a"><a href="#212410" label="[21:24:10]">&lt;fossy&gt;</a></span><span class="message">&lt;Hagfish&gt; is it currently possible to emulate a 586 on a 386 to complete the steps that need modern hardware?</span></div><div class="line" id="212415"><span class="nick" style="color:#2e2a4a"><a href="#212415" label="[21:24:15]">&lt;fossy&gt;</a></span><span class="message">yes, using qemu</span></div><div class="line" id="214102"><span class="nick">***</span><span class="message notice">Noisytoot is now known as [[</span></div><div class="line" id="214122"><span class="nick">***</span><span class="message notice">[[ is now known as [[Like</span></div><div class="line" id="214126"><span class="nick">***</span><span class="message notice">[[Like is now known as [[</span></div><div class="line" id="214155"><span class="nick">***</span><span class="message notice">[[ is now known as Noisytoot</span></div><div class="line" id="214235"><span class="nick" style="color:#bc80bd"><a href="#214235" label="[21:42:35]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I was wondering of what you thought of making mescc-tools-extra a full and proper thing?</span></div><div class="line" id="214605"><span class="nick" style="color:#2e2a4a"><a href="#214605" label="[21:46:05]">&lt;fossy&gt;</a></span><span class="message">OriansJ: how do you mean, whats a &quot;full and proper thing&quot;</span></div><div class="line" id="214816"><span class="nick" style="color:#bc80bd"><a href="#214816" label="[21:48:16]">&lt;OriansJ&gt;</a></span><span class="message">fossy: make mescc-tools-extras an independent fork of mescc-tools with full freedomto add anything that might be helpful in system bootstrapping.</span></div><div class="line" id="214935"><span class="nick" style="color:#2e2a4a"><a href="#214935" label="[21:49:35]">&lt;fossy&gt;</a></span><span class="message">ah, I see - i would not be opposed to that :)</span></div><div class="line" id="215005"><span class="nick" style="color:#bc80bd"><a href="#215005" label="[21:50:05]">&lt;OriansJ&gt;</a></span><span class="message">(with get_machine, M1, blod-elf and hex2 removed of course) [But not sure if kaem would betlong with it or with the mescc-tools-extra fork]</span></div><div class="line" id="215121"><span class="nick" style="color:#2e2a4a"><a href="#215121" label="[21:51:21]">&lt;fossy&gt;</a></span><span class="message">imo kaem should stay in mescc-tools. it's a pretty vital part of the bootstrap process (i.e. you basically can't do any kind of automated bootstrap without it)</span></div><div class="line" id="215403"><span class="nick" style="color:#bc80bd"><a href="#215403" label="[21:54:03]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well my question was because mescc-tools as a dependency wouldn't have to depend a kernel but kaem would but does provide that essential root for a kernel bootstrap.</span></div><div class="line" id="215501"><span class="nick" style="color:#2e2a4a"><a href="#215501" label="[21:55:01]">&lt;fossy&gt;</a></span><span class="message">hm, i understand</span></div><div class="line" id="215515"><span class="nick" style="color:#2e2a4a"><a href="#215515" label="[21:55:15]">&lt;fossy&gt;</a></span><span class="message">i'll think about it, your point is very valid</span></div><div class="line" id="215730"><span class="nick" style="color:#80b1d3"><a href="#215730" label="[21:57:30]">&lt;lle-bout&gt;</a></span><span class="message">OriansJ: super cool :-D</span></div><div class="line" id="220338"><span class="nick" style="color:#bc80bd"><a href="#220338" label="[22:03:38]">&lt;OriansJ&gt;</a></span><span class="message">fossy: ultimately it will be your choice as mescc-tools-extra is your baby and it looks like it is going to be quite impressive collection.</span></div><div class="line" id="220435"><span class="nick" style="color:#8dd3c7"><a href="#220435" label="[22:04:35]">&lt;stikonas&gt;</a></span><span class="message">well, we just need chmod cp, hashing and untaring there?</span></div><div class="line" id="220439"><span class="nick" style="color:#8dd3c7"><a href="#220439" label="[22:04:39]">&lt;stikonas&gt;</a></span><span class="message">+ kaem</span></div><div class="line" id="220443"><span class="nick" style="color:#bc80bd"><a href="#220443" label="[22:04:43]">&lt;OriansJ&gt;</a></span><span class="message">I'm good with both options as they both have solid reasons behind them and there isn't a clear obvious best solution that I can determine.</span></div><div class="line" id="220523"><span class="nick" style="color:#bc80bd"><a href="#220523" label="[22:05:23]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: and anything else people want to to make buildable by M2-Planet</span></div><div class="line" id="221040"><span class="nick" style="color:#bc80bd"><a href="#221040" label="[22:10:40]">&lt;OriansJ&gt;</a></span><span class="message">wget, sed, grep, awk, etc depending on what people will think will be fun to create to make future bootstrapping easier.</span></div><div class="line" id="221208"><span class="nick" style="color:#8dd3c7"><a href="#221208" label="[22:12:08]">&lt;stikonas&gt;</a></span><span class="message">well, even GNU sed and grep are easy to build...</span></div><div class="line" id="221252"><span class="nick" style="color:#bc80bd"><a href="#221252" label="[22:12:52]">&lt;OriansJ&gt;</a></span><span class="message">Think novelty first bootstrapping. The way to achieve the goal best isn't to try to reach the goal but rather making all possible future paths forward easier.</span></div><div class="line" id="221325"><span class="nick" style="color:#bc80bd"><a href="#221325" label="[22:13:25]">&lt;OriansJ&gt;</a></span><span class="message">with the goal of being fun for the people doing the work.</span></div><div class="line" id="221846"><span class="nick" style="color:#bc80bd"><a href="#221846" label="[22:18:46]">&lt;OriansJ&gt;</a></span><span class="message">There is a great talk on Picbreeder and novelty first search but unfortunately I haven't found it yet</span></div><div class="line" id="222304"><span class="nick" style="color:#bc80bd"><a href="#222304" label="[22:23:04]">&lt;OriansJ&gt;</a></span><span class="message">ironic that the video for novelty first search might be difficult to find when not doing novelty first search.</span></div><div class="line" id="222332"><span class="nick" style="color:#3c5b35"><a href="#222332" label="[22:23:32]">&lt;Hagfish&gt;</a></span><span class="message">hehe</span></div><div class="line" id="222347"><span class="nick" style="color:#3c5b35"><a href="#222347" label="[22:23:47]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, that sounds like a great philosophy/heuristic</span></div><div class="line" id="222720"><span class="nick" style="color:#bc80bd"><a href="#222720" label="[22:27:20]">&lt;OriansJ&gt;</a></span><span class="message">or imagine if someone wrote a perl interpreter in scheme, how many steps in the bootstrap could be stripped out?</span></div><div class="line" id="223005"><span class="nick" style="color:#8dd3c7"><a href="#223005" label="[22:30:05]">&lt;stikonas&gt;</a></span><span class="message">well, some  perl versions, although, not sure how would that work with more complicated perl modules that also have C code...</span></div><div class="line" id="223042"><span class="nick" style="color:#8dd3c7"><a href="#223042" label="[22:30:42]">&lt;stikonas&gt;</a></span><span class="message">but that might reduce numbre of perl versions from a lot to 1</span></div><div class="line" id="223055"><span class="nick" style="color:#bc80bd"><a href="#223055" label="[22:30:55]">&lt;OriansJ&gt;</a></span><span class="message">or if one thought replacing the build scripts with scheme programs was fun; then all of the autotools pieces and dependency steps could be entirely dropped.</span></div><div class="line" id="223309"><span class="nick" style="color:#bc80bd"><a href="#223309" label="[22:33:09]">&lt;OriansJ&gt;</a></span><span class="message">or if someone really wanted a proper scheme and leveraged the Haskell subset we support with blynn-compiler to run the pieces in the guix bootstrap (like bootar, nyacc and gash-utils) and to reduce the efforts required.</span></div><div class="line" id="223342"><span class="nick" style="color:#bc80bd"><a href="#223342" label="[22:33:42]">&lt;OriansJ&gt;</a></span><span class="message">but again that would require someone who would find such efforts fun and had the time available.</span></div><div class="line" id="230250"><span class="nick" style="color:#bc80bd"><a href="#230250" label="[23:02:50]">&lt;OriansJ&gt;</a></span><span class="message">or perhaps I am missing something entirely obvious (yes I know about psyntax.pp but that is being worked on right now) but can TCC build guile? then we just use that (and switch to using the properly bootstrapped psyntax.pp when it is done)</span></div><div class="line" id="230333"><span class="nick" style="color:#bc80bd"><a href="#230333" label="[23:03:33]">&lt;OriansJ&gt;</a></span><span class="message">thus leveraging bootar, nyacc and gash-utils</span></div><div class="line" id="232001"><span class="nick" style="color:#8dd3c7"><a href="#232001" label="[23:20:01]">&lt;stikonas&gt;</a></span><span class="message">not sure about guile, nobody tried...</span></div><div class="line" id="232026"><span class="nick" style="color:#8dd3c7"><a href="#232026" label="[23:20:26]">&lt;stikonas&gt;</a></span><span class="message">although, I suspect that at least for now it will be problematic with mes libc</span></div><div class="line" id="232057"><span class="nick" style="color:#8dd3c7"><a href="#232057" label="[23:20:57]">&lt;stikonas&gt;</a></span><span class="message">maybe once bugs are fixed...</span></div><div class="line" id="232240"><span class="nick" style="color:#8dd3c7"><a href="#232240" label="[23:22:40]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: guile also needs lexer</span></div><div class="line" id="232325"><span class="nick" style="color:#8dd3c7"><a href="#232325" label="[23:23:25]">&lt;stikonas&gt;</a></span><span class="message">I would guess that building gcc is of similar complexity</span></div><div class="line" id="234206"><span class="nick" style="color:#bc80bd"><a href="#234206" label="[23:42:06]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: tcc+musl</span></div><div class="line" id="234227"><span class="nick" style="color:#8dd3c7"><a href="#234227" label="[23:42:27]">&lt;stikonas&gt;</a></span><span class="message">well, at that point maybe...</span></div><div class="line" id="234250"><span class="nick" style="color:#8dd3c7"><a href="#234250" label="[23:42:50]">&lt;stikonas&gt;</a></span><span class="message">although, somebody either has to write new build system or bootstrap autotools for guile</span></div><div class="line" id="234351"><span class="nick" style="color:#bc80bd"><a href="#234351" label="[23:43:51]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: guix runs on guile and can be used as a build system.</span></div><div class="line" id="234432"><span class="nick" style="color:#bc80bd"><a href="#234432" label="[23:44:32]">&lt;OriansJ&gt;</a></span><span class="message">and we can skip the autotools for guile entirely</span></div><div class="line" id="234433"><span class="nick" style="color:#8dd3c7"><a href="#234433" label="[23:44:33]">&lt;stikonas&gt;</a></span><span class="message">I meant build system for guile</span></div><div class="line" id="234507"><span class="nick" style="color:#bc80bd"><a href="#234507" label="[23:45:07]">&lt;OriansJ&gt;</a></span><span class="message">autotools can always be skipped with a manually made kaem script or makefile</span></div><div class="line" id="234520"><span class="nick" style="color:#8dd3c7"><a href="#234520" label="[23:45:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, after all that's what we did for many package</span></div><div class="line" id="234530"><span class="nick" style="color:#8dd3c7"><a href="#234530" label="[23:45:30]">&lt;stikonas&gt;</a></span><span class="message">packages</span></div><div class="line" id="234551"><span class="nick" style="color:#8dd3c7"><a href="#234551" label="[23:45:51]">&lt;stikonas&gt;</a></span><span class="message">well, mostly makefiles, kaem scripts are more tedious</span></div><div class="line" id="234624"><span class="nick" style="color:#bc80bd"><a href="#234624" label="[23:46:24]">&lt;OriansJ&gt;</a></span><span class="message">and once guile is built, we can leverage guix, gash, gash-utils, bootar and nyacc</span></div><div class="line" id="234655"><span class="nick" style="color:#bc80bd"><a href="#234655" label="[23:46:55]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: true but kaem scripts rarely need to be written more than once.</span></div><div class="line" id="235140"><span class="nick" style="color:#bc80bd"><a href="#235140" label="[23:51:40]">&lt;OriansJ&gt;</a></span><span class="message">also step15 is the building of make; so I'd expect everything after that using it rather than kaem.</span></div><br /></div></body></html>