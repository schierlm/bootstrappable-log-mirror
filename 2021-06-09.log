<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000334"><span class="nick">***</span><span class="message notice">dekenevs is now known as mitzman</span></div><div class="line" id="040419"><span class="nick" style="color:#8dd3c7"><a href="#040419" label="[04:04:19]">&lt;oriansj&gt;</a></span><span class="message">gio: You are absolutely right that M1 is a quite primitive Assembly language and it is quite reasonable to not like it for doing more advanced work. I just still haven't found time to make a proper binutils compatible assembler/linker M2-Planet buildable yet</span></div><div class="line" id="040516"><span class="nick" style="color:#8dd3c7"><a href="#040516" label="[04:05:16]">&lt;oriansj&gt;</a></span><span class="message">although the macro issue has been addressed thanks to yt; who added a rather standard C preprocessor to M2-Planet</span></div><div class="line" id="040713"><span class="nick" style="color:#8dd3c7"><a href="#040713" label="[04:07:13]">&lt;oriansj&gt;</a></span><span class="message">but I do remember that the M2-Planet version you wrote in G gio was a pretty close copy and would be able to bootstrap the current generation of M2-Planet+M2libc;</span></div><div class="line" id="040739"><span class="nick" style="color:#8dd3c7"><a href="#040739" label="[04:07:39]">&lt;oriansj&gt;</a></span><span class="message">So from boot to GCC would be possible by simply borrowing solutions from live-bootstrap.</span></div><div class="line" id="041305"><span class="nick" style="color:#8dd3c7"><a href="#041305" label="[04:13:05]">&lt;oriansj&gt;</a></span><span class="message">I also remember when akkartik was working on his assembler that became mu <a rel="nofollow" href="https://github.com/akkartik/mu/">https://github.com/akkartik/mu/</a> </span></div><div class="line" id="041400"><span class="nick" style="color:#8dd3c7"><a href="#041400" label="[04:14:00]">&lt;oriansj&gt;</a></span><span class="message">It is kinda interesting how 5years ago things we knew were going to be the case didn't happen and the things we thought might be impossible ended up being what we did.</span></div><div class="line" id="041701"><span class="nick" style="color:#8dd3c7"><a href="#041701" label="[04:17:01]">&lt;oriansj&gt;</a></span><span class="message">but yeah, the tiny human bootstrapping process is crazy high in compute and memory requirements.</span></div><div class="line" id="042710"><span class="nick" style="color:#2e2a4a"><a href="#042710" label="[04:27:10]">&lt;xentrac&gt;</a></span><span class="message">what were the things we knew were going to be the case</span></div><div class="line" id="050814"><span class="nick" style="color:#8dd3c7"><a href="#050814" label="[05:08:14]">&lt;oriansj&gt;</a></span><span class="message">xentrac: probably a lisp written in assembly was a big one that I remember well (heck I even wrote the version lisp in assembly)</span></div><div class="line" id="050841"><span class="nick" style="color:#8dd3c7"><a href="#050841" label="[05:08:41]">&lt;oriansj&gt;</a></span><span class="message">that doing in C in assembly would be impossible (turned out to be easier than FORTH or Lisp)</span></div><div class="line" id="053435"><span class="nick" style="color:#2e2a4a"><a href="#053435" label="[05:34:35]">&lt;xentrac&gt;</a></span><span class="message">oh, yeah</span></div><div class="line" id="053439"><span class="nick" style="color:#2e2a4a"><a href="#053439" label="[05:34:39]">&lt;xentrac&gt;</a></span><span class="message">nothing is impossible</span></div><div class="line" id="053505"><span class="nick" style="color:#2e2a4a"><a href="#053505" label="[05:35:05]">&lt;xentrac&gt;</a></span><span class="message">well, lots of things can't be written in any language</span></div><div class="line" id="053512"><span class="nick" style="color:#2e2a4a"><a href="#053512" label="[05:35:12]">&lt;xentrac&gt;</a></span><span class="message">but i mean anything you can write in one language you can write in another</span></div><div class="line" id="053526"><span class="nick" style="color:#2e2a4a"><a href="#053526" label="[05:35:26]">&lt;xentrac&gt;</a></span><span class="message">c is easier to write a lisp in than assembly tho</span></div><div class="line" id="053545"><span class="nick" style="color:#2e2a4a"><a href="#053545" label="[05:35:45]">&lt;xentrac&gt;</a></span><span class="message">i guess it's easier to point that out now that we already have experience with it ;)</span></div><div class="line" id="054950"><span class="nick" style="color:#8dd3c7"><a href="#054950" label="[05:49:50]">&lt;oriansj&gt;</a></span><span class="message">xentrac: also that writing a C compiler in assembly basically ends up being something so obvious once you know about state machines and looking at basic tokenization.</span></div><div class="line" id="055023"><span class="nick" style="color:#8dd3c7"><a href="#055023" label="[05:50:23]">&lt;oriansj&gt;</a></span><span class="message">fossy: Do you prefer I put kaem enhancements in mescc-tools or mescc-tools-extra?</span></div><div class="line" id="055137"><span class="nick" style="color:#2e2a4a"><a href="#055137" label="[05:51:37]">&lt;xentrac&gt;</a></span><span class="message">yeah, i guess i should try it but i suspect maybe it's not so obvious to people who aren't you ;)</span></div><div class="line" id="060301"><span class="nick" style="color:#8dd3c7"><a href="#060301" label="[06:03:01]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well look at the debug function in cc_x86 and the relationship from if you see string x, replace with string pattern y isn't a hard jump</span></div><div class="line" id="060328"><span class="nick" style="color:#8dd3c7"><a href="#060328" label="[06:03:28]">&lt;oriansj&gt;</a></span><span class="message">Then a little bit of type tracking added on and boom a rather rich C subset</span></div><div class="line" id="060504"><span class="nick" style="color:#8dd3c7"><a href="#060504" label="[06:05:04]">&lt;oriansj&gt;</a></span><span class="message">fossy: I ask because once you decide, I'll merge an enhancment to kaem and finish off the stage0-posix+mescc-tools-extra integration script</span></div><div class="line" id="060537"><span class="nick" style="color:#6b8072"><a href="#060537" label="[06:05:37]">&lt;vancz&gt;</a></span><span class="message">wait mes is called mes because &quot;#+SUBTITLE: Maxwell Equations of Software&quot;? that is sooo coool</span></div><div class="line" id="060725"><span class="nick" style="color:#8dd3c7"><a href="#060725" label="[06:07:25]">&lt;oriansj&gt;</a></span><span class="message">essentially: <a rel="nofollow" href="https://paste.debian.net/1200473/">https://paste.debian.net/1200473/</a>  will be the standard for all of the pieces and currently kaem converts ${BLOOD_FLAG} into &quot; &quot; and blood-elf doesn't handle that as valid input;</span></div><div class="line" id="060829"><span class="nick" style="color:#8dd3c7"><a href="#060829" label="[06:08:29]">&lt;oriansj&gt;</a></span><span class="message">The fix is trivial: <a rel="nofollow" href="https://paste.debian.net/1200474/">https://paste.debian.net/1200474/</a> </span></div><div class="line" id="060927"><span class="nick" style="color:#8dd3c7"><a href="#060927" label="[06:09:27]">&lt;oriansj&gt;</a></span><span class="message">since Kaem is your baby fossy, it is your decision: mescc-tools or mescc-tools-extra as the home for kaem.</span></div><div class="line" id="061432"><span class="nick" style="color:#8dd3c7"><a href="#061432" label="[06:14:32]">&lt;oriansj&gt;</a></span><span class="message">and intial sha256sum, ungz and untar M2-Planet+M2libc kaem build script for mescc-tools-extra is up;</span></div><div class="line" id="061545"><span class="nick" style="color:#8dd3c7"><a href="#061545" label="[06:15:45]">&lt;oriansj&gt;</a></span><span class="message">just need to add the remaining pieces and get fossy</span></div><div class="line" id="061601"><span class="nick" style="color:#8dd3c7"><a href="#061601" label="[06:16:01]">&lt;oriansj&gt;</a></span><span class="message">to make a decision on Kaem's home</span></div><div class="line" id="061626"><span class="nick" style="color:#8dd3c7"><a href="#061626" label="[06:16:26]">&lt;oriansj&gt;</a></span><span class="message">then I'll wrap it all up with the latest M2-Planet v1.8.0 release in stage0-posix</span></div><div class="line" id="061659"><span class="nick" style="color:#8dd3c7"><a href="#061659" label="[06:16:59]">&lt;oriansj&gt;</a></span><span class="message">with the after.kaem hook for live-bootstrap to leverage</span></div><div class="line" id="063113"><span class="nick">***</span><span class="message notice">bandali_ is now known as bandali</span></div><div class="line" id="064622"><span class="nick" style="color:#2e2a4a"><a href="#064622" label="[06:46:22]">&lt;xentrac&gt;</a></span><span class="message">vancz: yeah, alan kay's phrase for the lisp metacircular interpreter.  not sure i totally agree but it's certainly evocative</span></div><div class="line" id="064639"><span class="nick" style="color:#6b8072"><a href="#064639" label="[06:46:39]">&lt;vancz&gt;</a></span><span class="message">ah</span></div><div class="line" id="064818"><span class="nick" style="color:#2e2a4a"><a href="#064818" label="[06:48:18]">&lt;xentrac&gt;</a></span><span class="message">there are a variety of simple, minimal sets of node types that give you a turing-complete interpreter if you already have some kind of flexible linked data structure</span></div><div class="line" id="064905"><span class="nick" style="color:#2e2a4a"><a href="#064905" label="[06:49:05]">&lt;xentrac&gt;</a></span><span class="message">and the insight that stunned alan kay was that anywhere you could implement the lisp eval function or something similar, you had access to unlimited computational power</span></div><div class="line" id="065035"><span class="nick" style="color:#6b8072"><a href="#065035" label="[06:50:35]">&lt;vancz&gt;</a></span><span class="message">aha</span></div><div class="line" id="065216"><span class="nick" style="color:#6b8072"><a href="#065216" label="[06:52:16]">&lt;vancz&gt;</a></span><span class="message">give me a loop and a branch and  shall</span></div><div class="line" id="065223"><span class="nick" style="color:#6b8072"><a href="#065223" label="[06:52:23]">&lt;vancz&gt;</a></span><span class="message">*I shall move the instruction pointer</span></div><div class="line" id="065630"><span class="nick" style="color:#2e2a4a"><a href="#065630" label="[06:56:30]">&lt;xentrac&gt;</a></span><span class="message">heh, pretty much</span></div><div class="line" id="071158"><span class="nick" style="color:#2e2a4a"><a href="#071158" label="[07:11:58]">&lt;xentrac&gt;</a></span><span class="message">the interesting thing about the lisp primitive set is that it gives you flexible linked data structures (or rather inherits them from the host environment, which is one of the limitations of specification-by-metacircular-interpreter)</span></div><div class="line" id="071225"><span class="nick" style="color:#2e2a4a"><a href="#071225" label="[07:12:25]">&lt;xentrac&gt;</a></span><span class="message">and similarly with recursive functions</span></div><div class="line" id="071332"><span class="nick" style="color:#2e2a4a"><a href="#071332" label="[07:13:32]">&lt;xentrac&gt;</a></span><span class="message">in the lisp 1.5 form, it doesn't give you the kind of general-purpose 'object-orientation' that you get from closures in scheme, but it's straightforward to tweak the metacircular interpreter to add that</span></div><div class="line" id="083331"><span class="nick" style="color:#80b1d3"><a href="#083331" label="[08:33:31]">&lt;gio&gt;</a></span><span class="message">Melg8[m]: I don't really remember the details, but that code was even more experimental than the rest. Basically I was just playing with low level stuff. My advice is not to try to make it work, it just won't. If you want to make something at that point, you need to study how Linux loads and implement that part from scratch.</span></div><div class="line" id="083513"><span class="nick" style="color:#80b1d3"><a href="#083513" label="[08:35:13]">&lt;gio&gt;</a></span><span class="message">Also notice that in the end you won't probably want to load Linux from a classic bzImage, because you don't really want to write the code to create a bzImage at boot time. Rather, you'll want to directly link and load the code in memory.</span></div><div class="line" id="083534"><span class="nick" style="color:#80b1d3"><a href="#083534" label="[08:35:34]">&lt;gio&gt;</a></span><span class="message">But that also requires a good understanding of how Linux links and loads, which is not trivial. And that is all to be written.</span></div><div class="line" id="083608"><span class="nick" style="color:#80b1d3"><a href="#083608" label="[08:36:08]">&lt;gio&gt;</a></span><span class="message">I trust it won't much different than iPXE in its concept, but still there is some non-trivial coding to be done.</span></div><div class="line" id="084154"><span class="nick" style="color:#6d2462"><a href="#084154" label="[08:41:54]">&lt;fossy&gt;</a></span><span class="message">oriansj: i'm going to suggest mescc-tools because it is an integral part of the bootstrap process</span></div><div class="line" id="093835"><span class="nick" style="color:#234e69"><a href="#093835" label="[09:38:35]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio, thanks, i observed some strange (at least for me) behavior when i tried to debug what is happening within that memcpy instruction, at execution of which it looks like reboot. So, i tried to check what's inside of addresses after malloc (i've assumed that memcpy somehow corrupting memory, so i started dig in that direction. So far what i observed is: real_mode contains some interesting value on allocation. I don't want you to spend alot</span></div><div class="line" id="093835"><span class="nick" style="color:#234e69"><a href="#093835" label="[09:38:35]">&lt;Melg8[m]&gt;</a></span><span class="message">of time on this, but at glance, doest this values after malloc look fine to you? (<a rel="nofollow" href="http://paste.debian.net/1200482/">http://paste.debian.net/1200482/</a>  - you are looking at dump from <a rel="nofollow" href="https://gitlab.com/giomasce/asmc/-/blob/master/http/continue2.c#L176">https://gitlab.com/giomasce/asmc/-/blob/master/http/continue2.c#L176</a>  real_mode ) i mean, sure - malloc should allocate without zeroing out, but where it points, - isn't that some already used memory part? (like virtual fs or something)? And another thing, i've observed, i tried to call in loop</span></div><div class="line" id="093835"><span class="nick" style="color:#234e69"><a href="#093835" label="[09:38:35]">&lt;Melg8[m]&gt;</a></span><span class="message">mallocs, to check what they contain, and found that</span></div><div class="line" id="094151"><span class="nick" style="color:#234e69"><a href="#094151" label="[09:41:51]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio that addresses are distributed weirdly: <a rel="nofollow" href="http://paste.debian.net/1200483/.">http://paste.debian.net/1200483/.</a>  So my question is - can there be some major flaw in malloc work? or you've tested that it's fine, and i digging in wrong direction? (i've tried to enable USE_CHECKED_MALLOC) - but it doesnt seem to add/change anything)</span></div><div class="line" id="094347"><span class="nick" style="color:#234e69"><a href="#094347" label="[09:43:47]">&lt;Melg8[m]&gt;</a></span><span class="message">Btw after copy and reallocation this part looks fine (at least with 55 aa at the end) <a rel="nofollow" href="http://paste.debian.net/1200485/">http://paste.debian.net/1200485/</a> </span></div><div class="line" id="095112"><span class="nick" style="color:#80b1d3"><a href="#095112" label="[09:51:12]">&lt;gio&gt;</a></span><span class="message">Melg8[m]: It's not strange that malloc gives you a bunch of memory that was already used and then discarded with free. I have a rather naive malloc implementation, that just stores freed blocks in a few lists (differentiated by block size) and then hands them back out when they are requested.</span></div><div class="line" id="095142"><span class="nick" style="color:#80b1d3"><a href="#095142" label="[09:51:42]">&lt;gio&gt;</a></span><span class="message">So the pattern given by malloc essentially depends on the patterns by which free is called, in reverse.</span></div><div class="line" id="095226"><span class="nick" style="color:#80b1d3"><a href="#095226" label="[09:52:26]">&lt;gio&gt;</a></span><span class="message">I am quite confident that my implementation of malloc is correct, and has never given me problems; though of course bugs can always surface. But your observations do not look strange to me.</span></div><div class="line" id="095256"><span class="nick" style="color:#80b1d3"><a href="#095256" label="[09:52:56]">&lt;gio&gt;</a></span><span class="message">Also USE_CHECKED_MALLOC only applies to G's malloc, so it's normal it doesn't change anything for you.</span></div><div class="line" id="095405"><span class="nick" style="color:#80b1d3"><a href="#095405" label="[09:54:05]">&lt;gio&gt;</a></span><span class="message">Again, I think my code doesn't work just because it doesn't work, there is nothing to fix. There is correct code to be written. You won't reach anything by fiddling with continue2.c.</span></div><div class="line" id="100026"><span class="nick" style="color:#234e69"><a href="#100026" label="[10:00:26]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio now i'm just learning about your system and about how kernel loads, and continu2.c in only what i've got) at least i can tweak it)</span></div><div class="line" id="100118"><span class="nick" style="color:#2e2a4a"><a href="#100118" label="[10:01:18]">&lt;xentrac&gt;</a></span><span class="message">happy st. columba day</span></div><div class="line" id="100148"><span class="nick" style="color:#80b1d3"><a href="#100148" label="[10:01:48]">&lt;gio&gt;</a></span><span class="message">Melg8[m]: This is a useful resource: <a rel="nofollow" href="https://0xax.gitbooks.io/linux-insides/content/Booting/">https://0xax.gitbooks.io/linux-insides/content/Booting/</a> </span></div><div class="line" id="100200"><span class="nick" style="color:#80b1d3"><a href="#100200" label="[10:02:00]">&lt;gio&gt;</a></span><span class="message">And then you need to read the code.</span></div><div class="line" id="100244"><span class="nick" style="color:#80b1d3"><a href="#100244" label="[10:02:44]">&lt;gio&gt;</a></span><span class="message">Also, reading how iPXE loading works in asmc might be useful for understanding the kind of things you need to do, though Linux is a different beast anyway.</span></div><div class="line" id="100421"><span class="nick" style="color:#234e69"><a href="#100421" label="[10:04:21]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio thanks! btw how you debug this? did you used some qemu related debugging? or just dump out data with prints, or some other way? (isolated parts build?)</span></div><div class="line" id="100553"><span class="nick" style="color:#80b1d3"><a href="#100553" label="[10:05:53]">&lt;gio&gt;</a></span><span class="message">Melg8[m]: Hard question! My usual debugging technique is to try really hard to directly write correct code. Other than that, mostly a lot of printing. I used low level technique in the beginning, but at this level I believe they're already too much hassle.</span></div><div class="line" id="100624"><span class="nick" style="color:#80b1d3"><a href="#100624" label="[10:06:24]">&lt;gio&gt;</a></span><span class="message">In line of principle you can attach a gdb to qemu, but then you have to make sense of stuff, and it's easily more work than printing stuff.</span></div><div class="line" id="100748"><span class="nick" style="color:#234e69"><a href="#100748" label="[10:07:48]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio how hard it would be to port your g language to other arch? what parts it would require to change?</span></div><div class="line" id="100908"><span class="nick" style="color:#80b1d3"><a href="#100908" label="[10:09:08]">&lt;gio&gt;</a></span><span class="message">Melg8[m]: Well, the compiler is written in x86 assembly, so you basically have to write it from scratches. You can use the x86 as a base, of course, but you cannot directly save code.</span></div><div class="line" id="100928"><span class="nick" style="color:#80b1d3"><a href="#100928" label="[10:09:28]">&lt;gio&gt;</a></span><span class="message">Also, notice that G code is not portable, has</span></div><div class="line" id="100940"><span class="nick" style="color:#80b1d3"><a href="#100940" label="[10:09:40]">&lt;gio&gt;</a></span><span class="message">*as it assumes word size and endianness.</span></div><div class="line" id="100946"><span class="nick" style="color:#80b1d3"><a href="#100946" label="[10:09:46]">&lt;gio&gt;</a></span><span class="message">So you would have to update the G code as well.</span></div><div class="line" id="100959"><span class="nick" style="color:#234e69"><a href="#100959" label="[10:09:59]">&lt;Melg8[m]&gt;</a></span><span class="message">i see</span></div><div class="line" id="101019"><span class="nick" style="color:#80b1d3"><a href="#101019" label="[10:10:19]">&lt;gio&gt;</a></span><span class="message">I have sometimes thought a little bit about how to make it a little more arch-independent, but for the moment that's the status.</span></div><div class="line" id="101107"><span class="nick" style="color:#234e69"><a href="#101107" label="[10:11:07]">&lt;Melg8[m]&gt;</a></span><span class="message">elaborate) please) even if i will not do it right away, at least for the future would be nice to know your ideas</span></div><div class="line" id="101217"><span class="nick" style="color:#80b1d3"><a href="#101217" label="[10:12:17]">&lt;gio&gt;</a></span><span class="message">The big problem, if I recall correctly, is that you have to manually write offsets in the G code, because the language itself doesn't know about structs.</span></div><div class="line" id="101326"><span class="nick" style="color:#80b1d3"><a href="#101326" label="[10:13:26]">&lt;gio&gt;</a></span><span class="message">So you could add some primitive to the language to multiply a number by the word size at compile time.</span></div><div class="line" id="101352"><span class="nick" style="color:#80b1d3"><a href="#101352" label="[10:13:52]">&lt;gio&gt;</a></span><span class="message">This might solve a good amount of problems, but I'd have to think better to see if there are others.</span></div><div class="line" id="101446"><span class="nick" style="color:#80b1d3"><a href="#101446" label="[10:14:46]">&lt;gio&gt;</a></span><span class="message">Also, support for 64 bits operation might be included in the language itself, instead of added later as it is now. But you don't really want to complicate the language, that's the most important thing.</span></div><div class="line" id="101732"><span class="nick">***</span><span class="message notice">mitzman is now known as kitzman</span></div><div class="line" id="102743"><span class="nick" style="color:#234e69"><a href="#102743" label="[10:27:43]">&lt;Melg8[m]&gt;</a></span><span class="message">@gio didn't you use assembler implementation of g to compile another version of g written in g?</span></div><div class="line" id="102849"><span class="nick" style="color:#80b1d3"><a href="#102849" label="[10:28:49]">&lt;gio&gt;</a></span><span class="message">No, there isn't any G written in G.</span></div><div class="line" id="103000"><span class="nick" style="color:#234e69"><a href="#103000" label="[10:30:00]">&lt;Melg8[m]&gt;</a></span><span class="message">would it solve this? or that would be just more compilcations?</span></div><div class="line" id="103034"><span class="nick" style="color:#234e69"><a href="#103034" label="[10:30:34]">&lt;Melg8[m]&gt;</a></span><span class="message">so like g in assembler - is platform specific, but g in g is not</span></div><div class="line" id="103140"><span class="nick" style="color:#80b1d3"><a href="#103140" label="[10:31:40]">&lt;gio&gt;</a></span><span class="message">Right now G as a language is platform dependant, so it is not somthing you fix by just changing the compiler.</span></div><div class="line" id="103254"><span class="nick" style="color:#80b1d3"><a href="#103254" label="[10:32:54]">&lt;gio&gt;</a></span><span class="message">In line of principle adding another layer might help solve the problem. But I wouldn't make a layer of G again, it wouldn't make sense. Maybe create a new language G1, which is some kind of intermediate between G and C. This might make sense, though I'd have to think it better.</span></div><div class="line" id="103451"><span class="nick" style="color:#80b1d3"><a href="#103451" label="[10:34:51]">&lt;gio&gt;</a></span><span class="message">Also, this doesn't remove the problem that G-on-assembly is still platform dependant.</span></div><div class="line" id="104526"><span class="nick" style="color:#234e69"><a href="#104526" label="[10:45:26]">&lt;Melg8[m]&gt;</a></span><span class="message">siraben: here you go <a rel="nofollow" href="https://gitlab.com/giomasce/asmc/-/blob/master/G_LANGUAGE.md">https://gitlab.com/giomasce/asmc/-/blob/master/G_LANGUAGE.md</a> </span></div><div class="line" id="124101"><span class="nick" style="color:#8dd3c7"><a href="#124101" label="[12:41:01]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: there is an extremely good reason why cc_* supports structs. It makes the writing of portable C code easy.</span></div><div class="line" id="124422"><span class="nick" style="color:#8dd3c7"><a href="#124422" label="[12:44:22]">&lt;oriansj&gt;</a></span><span class="message">that transition point from assembly to a higher level language is always 100% non-portable in terms of the individual implementations (hence cc_x86, cc_armv7l, cc_aarch64, etc) but if one puts in a bit of effort that higher level language is &quot;effectively portable (tm)&quot;</span></div><div class="line" id="124515"><span class="nick" style="color:#8dd3c7"><a href="#124515" label="[12:45:15]">&lt;oriansj&gt;</a></span><span class="message">So although there are a great deal of restrictions on M2-Planet's code (cc_* compatibility and cross-platform portability without macros)</span></div><div class="line" id="124733"><span class="nick" style="color:#8dd3c7"><a href="#124733" label="[12:47:33]">&lt;oriansj&gt;</a></span><span class="message">Once one has a cc_* for their architecture and builds M2-Planet, everything else after it becomes standard. One needs only update M2libc for the target architecture and add basic support in M2-Planet+M1+hex2 (or in bonko insane architectures blood-elf)</span></div><div class="line" id="124926"><span class="nick" style="color:#8dd3c7"><a href="#124926" label="[12:49:26]">&lt;oriansj&gt;</a></span><span class="message">C for all of its many flaws and imperfections, still is a pretty great portable assembly language; when you remember to think of it in those terms.</span></div><div class="line" id="125130"><span class="nick" style="color:#8dd3c7"><a href="#125130" label="[12:51:30]">&lt;oriansj&gt;</a></span><span class="message">also when you want a clean memory block, never do malloc; only calloc ensures you will get a clean memory block. malloc is for cases where you plan on immediately overwriting the block of memory you are given with something you'll properly delimit or properly segment.</span></div><div class="line" id="125206"><span class="nick" style="color:#8dd3c7"><a href="#125206" label="[12:52:06]">&lt;oriansj&gt;</a></span><span class="message">fossy: thank you for your decision. I'll simplify mescc-tools-extra accordingly</span></div><div class="line" id="125859"><span class="nick" style="color:#8dd3c7"><a href="#125859" label="[12:58:59]">&lt;oriansj&gt;</a></span><span class="message">ok and with that we have a new mescc-tools Release 1.2.0 vagrantc you will want to update Debian with the latest release</span></div><div class="line" id="130335"><span class="nick" style="color:#8dd3c7"><a href="#130335" label="[13:03:35]">&lt;oriansj&gt;</a></span><span class="message">Let us see if I can finish this all before I have to go to work</span></div><div class="line" id="132657"><span class="nick" style="color:#6c3d55"><a href="#132657" label="[13:26:57]">&lt;siraben&gt;</a></span><span class="message">Melg8: ooh interesting, looks Forth-like</span></div><div class="line" id="133931"><span class="nick" style="color:#234e69"><a href="#133931" label="[13:39:31]">&lt;Melg8[m]&gt;</a></span><span class="message">i saw llvm ir in that) but dk what is easier - to implement small C subset compiler - or LLVM IR compiler - in assembly</span></div><div class="line" id="134520"><span class="nick" style="color:#8dd3c7"><a href="#134520" label="[13:45:20]">&lt;oriansj&gt;</a></span><span class="message">Melg8[m]: cc_x86 is only 3257 lines of assembly and comments, which can be done in less than 24 hours. what would the LLVM IR compiler take?</span></div><div class="line" id="134708"><span class="nick" style="color:#8dd3c7"><a href="#134708" label="[13:47:08]">&lt;oriansj&gt;</a></span><span class="message">and the stage0-posix x86 and AMD64 updates are up but the AArch64 will have to wait till after work and I'll make it a stage0-posix release</span></div><div class="line" id="160404"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="161036"><span class="nick">***</span><span class="message notice">dongcarl7 is now known as dongcarl</span></div><div class="line" id="172421"><span class="nick">***</span><span class="message notice">dekenevs is now known as kitzman</span></div><div class="line" id="172500"><span class="nick">***</span><span class="message notice">smartin1 is now known as smartin</span></div><div class="line" id="172559"><span class="nick">***</span><span class="message notice">ericonr- is now known as ericonr</span></div><div class="line" id="182344"><span class="nick">***</span><span class="message notice">edef_ is now known as edef</span></div><div class="line" id="185956"><span class="nick" style="color:#d9d9d9"><a href="#185956" label="[18:59:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I need <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/2">https://github.com/oriansj/mescc-tools-extra/pull/2</a>  for live-bootstrap</span></div><div class="line" id="234405"><span class="nick" style="color:#d9d9d9"><a href="#234405" label="[23:44:05]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I mostly got live-bootstrap working with stage0-posix</span></div><div class="line" id="234507"><span class="nick" style="color:#d9d9d9"><a href="#234507" label="[23:45:07]">&lt;stikonas&gt;</a></span><span class="message">for now I'm keeping same mes, to avoid changing too many things in one go</span></div><div class="line" id="234534"><span class="nick" style="color:#d9d9d9"><a href="#234534" label="[23:45:34]">&lt;stikonas&gt;</a></span><span class="message">but I'll remove all fletcher stuff...</span></div><br /></div></body></html>