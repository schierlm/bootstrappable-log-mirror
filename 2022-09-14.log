<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005018"><span class="nick" style="color:#389600"><a href="#005018" label="[00:50:18]">&lt;oriansj&gt;</a></span><span class="message">ok, I think there is only about 12 emails on the mailing list that I missed. (all before I knew that it existed and a couple deleted about the website being down and the mes 0.8 release)</span></div><div class="line" id="005845"><span class="nick" style="color:#389600"><a href="#005845" label="[00:58:45]">&lt;oriansj&gt;</a></span><span class="message">one can now get the mbox file here: <a rel="nofollow" href="https://git.sr.ht/~oriansj/bootstrappable-wiki/blob/main/bootstrappable.mbox">https://git.sr.ht/~oriansj/bootstrappable-wiki/blob/main/bootstrappable.mbox</a> </span></div><div class="line" id="010040"><span class="nick" style="color:#389600"><a href="#010040" label="[01:00:40]">&lt;oriansj&gt;</a></span><span class="message">so rekado or janneke if you have a copy of those, we can have a complete and up to date mbox file</span></div><div class="line" id="010357"><span class="nick" style="color:#389600"><a href="#010357" label="[01:03:57]">&lt;oriansj&gt;</a></span><span class="message">midnight: hopefully that helps you out (sorry it took longer than expected)</span></div><div class="line" id="024129"><span class="nick" style="color:#2e2a4a"><a href="#024129" label="[02:41:29]">&lt;stikonas&gt;</a></span><span class="message">mihi: so something is indeed bad with one of the earlier text processing tools (sed, grep...)</span></div><div class="line" id="024136"><span class="nick" style="color:#2e2a4a"><a href="#024136" label="[02:41:36]">&lt;stikonas&gt;</a></span><span class="message">that temp file is missing command list</span></div><div class="line" id="024142"><span class="nick" style="color:#2e2a4a"><a href="#024142" label="[02:41:42]">&lt;stikonas&gt;</a></span><span class="message">should be backup, comment, emit, file, guard, optimize, pthread, table, test; but it is only ;</span></div><div class="line" id="025117"><span class="nick" style="color:#2e2a4a"><a href="#025117" label="[02:51:17]">&lt;stikonas&gt;</a></span><span class="message">ok, I think it's just the case of grep being too old</span></div><div class="line" id="025321"><span class="nick" style="color:#2e2a4a"><a href="#025321" label="[02:53:21]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I think for autogen stuff we need to add at least the following: build newer grep, then either build which or add a bash wrapper around command -v</span></div><div class="line" id="025416"><span class="nick" style="color:#2e2a4a"><a href="#025416" label="[02:54:16]">&lt;stikonas&gt;</a></span><span class="message">and then of course some further fixes to gnu-autogen-bootstrap repo</span></div><div class="line" id="025917"><span class="nick" style="color:#2e2a4a"><a href="#025917" label="[02:59:17]">&lt;stikonas&gt;</a></span><span class="message">next autogen error is bootstrap failure:  cannot find GNULIBDIR but that should be easily solvable</span></div><div class="line" id="114210"><span class="nick" style="color:#2e2a4a"><a href="#114210" label="[11:42:10]">&lt;stikonas&gt;</a></span><span class="message">doras: would you mind backporting your header change to binutils-2.14 ?</span></div><div class="line" id="114757"><span class="nick" style="color:#6b8072"><a href="#114757" label="[11:47:57]">&lt;doras&gt;</a></span><span class="message">stikonas: if my small patch to get it to automatically regenerate is acceptable, sure.</span></div><div class="line" id="114948"><span class="nick" style="color:#2e2a4a"><a href="#114948" label="[11:49:48]">&lt;stikonas&gt;</a></span><span class="message">the one that removes @MAINT@ ? That's fine</span></div><div class="line" id="120255"><span class="nick" style="color:#6b8072"><a href="#120255" label="[12:02:55]">&lt;doras&gt;</a></span><span class="message">stikonas: actually, the patch may not be needed for `binutils 2.14` since we're not targeting the architectures for which the files were pregenerated. (ia64 and z8k)</span></div><div class="line" id="120328"><span class="nick" style="color:#6b8072"><a href="#120328" label="[12:03:28]">&lt;doras&gt;</a></span><span class="message">In `binutils 2.38` there was also a pregenerated file for i386.</span></div><div class="line" id="120634"><span class="nick" style="color:#6b8072"><a href="#120634" label="[12:06:34]">&lt;doras&gt;</a></span><span class="message">I'll upload a PR once the bootstrap succeeds.</span></div><div class="line" id="120749"><span class="nick" style="color:#2e2a4a"><a href="#120749" label="[12:07:49]">&lt;stikonas&gt;</a></span><span class="message">ok, that might be fine then</span></div><div class="line" id="120805"><span class="nick" style="color:#2e2a4a"><a href="#120805" label="[12:08:05]">&lt;stikonas&gt;</a></span><span class="message">so just rm those files?</span></div><div class="line" id="120829"><span class="nick" style="color:#2e2a4a"><a href="#120829" label="[12:08:29]">&lt;stikonas&gt;</a></span><span class="message">though we are not super strict about removing non-used pre-generated files in live-bootstrap</span></div><div class="line" id="120836"><span class="nick" style="color:#2e2a4a"><a href="#120836" label="[12:08:36]">&lt;stikonas&gt;</a></span><span class="message">in some places it is done but not everywhere</span></div><div class="line" id="120954"><span class="nick" style="color:#6b8072"><a href="#120954" label="[12:09:54]">&lt;doras&gt;</a></span><span class="message">Yes, I'll just rm those files. I just want to make sure it doesn't actually break the build.</span></div><div class="line" id="121020"><span class="nick" style="color:#6b8072"><a href="#121020" label="[12:10:20]">&lt;doras&gt;</a></span><span class="message">It's harder to figure out which pregenerated files are unused than to simply remove them all.</span></div><div class="line" id="121430"><span class="nick" style="color:#2e2a4a"><a href="#121430" label="[12:14:30]">&lt;stikonas&gt;</a></span><span class="message">well, once you start relying on complex build systems, then yes. Very early in bootstrap (especially when we manually write makefiles) we know exactly what is used</span></div><div class="line" id="121636"><span class="nick" style="color:#80b1d3"><a href="#121636" label="[12:16:36]">&lt;aggi&gt;</a></span><span class="message">apropos, currently stumbling, upon perl-5.8 dependency graph... sys-libs/db and gdbm</span></div><div class="line" id="121707"><span class="nick" style="color:#80b1d3"><a href="#121707" label="[12:17:07]">&lt;aggi&gt;</a></span><span class="message">seems circular... perl requires db,gdbm, db and gdbm require autotools, and autotools require perl</span></div><div class="line" id="121734"><span class="nick" style="color:#80b1d3"><a href="#121734" label="[12:17:34]">&lt;aggi&gt;</a></span><span class="message">hence, a toybox userspace linked against mes-libc is desireable</span></div><div class="line" id="121811"><span class="nick" style="color:#80b1d3"><a href="#121811" label="[12:18:11]">&lt;aggi&gt;</a></span><span class="message">and i already git-pulled a posix make implementation... just in case whatever dependency graph gnu make got</span></div><div class="line" id="121830"><span class="nick" style="color:#2e2a4a"><a href="#121830" label="[12:18:30]">&lt;stikonas&gt;</a></span><span class="message">those are probably optional dependencies</span></div><div class="line" id="121859"><span class="nick" style="color:#80b1d3"><a href="#121859" label="[12:18:59]">&lt;aggi&gt;</a></span><span class="message">yes, in the gentoo-ebuilds those are labeled optional with use-flags</span></div><div class="line" id="121921"><span class="nick" style="color:#2e2a4a"><a href="#121921" label="[12:19:21]">&lt;stikonas&gt;</a></span><span class="message">so just get rid of them...</span></div><div class="line" id="121933"><span class="nick" style="color:#2e2a4a"><a href="#121933" label="[12:19:33]">&lt;stikonas&gt;</a></span><span class="message">optional circlular dependencies are fine</span></div><div class="line" id="121941"><span class="nick" style="color:#80b1d3"><a href="#121941" label="[12:19:41]">&lt;aggi&gt;</a></span><span class="message">however, currently while archiving/freezing the gcc47 c-only toolchain profile, a cross-compile CBUILD=aarch32 with CTARGET=amd64</span></div><div class="line" id="121954"><span class="nick" style="color:#80b1d3"><a href="#121954" label="[12:19:54]">&lt;aggi&gt;</a></span><span class="message">the perl-5.8 build freaks out over missing headers of db,gdbm</span></div><div class="line" id="122008"><span class="nick" style="color:#80b1d3"><a href="#122008" label="[12:20:08]">&lt;aggi&gt;</a></span><span class="message">although i didn't activate those use-flags</span></div><div class="line" id="122019"><span class="nick" style="color:#6d2462"><a href="#122019" label="[12:20:19]">&lt;Hagfish&gt;</a></span><span class="message">&quot;It's harder to figure out which pregenerated files are unused&quot; &lt;-- is it possible/useful to record which files are read by using some kernel level tool?</span></div><div class="line" id="122233"><span class="nick" style="color:#80b1d3"><a href="#122233" label="[12:22:33]">&lt;aggi&gt;</a></span><span class="message">another good question, had not begun yet to downgrade to linux-2.4, and which implications this has with headers pulled in from kernel (for mes-libc)</span></div><div class="line" id="122304"><span class="nick" style="color:#80b1d3"><a href="#122304" label="[12:23:04]">&lt;aggi&gt;</a></span><span class="message">musl-libc insists on some kernel 2.6.X; don't know if mes-libc will pass with linux-2.4 headers</span></div><div class="line" id="122406"><span class="nick" style="color:#80b1d3"><a href="#122406" label="[12:24:06]">&lt;aggi&gt;</a></span><span class="message">criteria for linux kernel version: must compile with tcc-toolchain (without binutils/gcc)</span></div><div class="line" id="122440"><span class="nick" style="color:#80b1d3"><a href="#122440" label="[12:24:40]">&lt;aggi&gt;</a></span><span class="message">which could introduce another circular dependency graph, with perl/autotools if perl is required with kernel-build by tcc-toolchain</span></div><div class="line" id="122534"><span class="nick" style="color:#80b1d3"><a href="#122534" label="[12:25:34]">&lt;aggi&gt;</a></span><span class="message">tcc-toolchain (tccboot) implemented some custom build-system for linux-2.4, and didn't use linux Kbuild</span></div><div class="line" id="122732"><span class="nick" style="color:#2e2a4a"><a href="#122732" label="[12:27:32]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: yes, strace can do that</span></div><div class="line" id="122845"><span class="nick" style="color:#80b1d3"><a href="#122845" label="[12:28:45]">&lt;aggi&gt;</a></span><span class="message">Hagfish: reminds me of another utility, systrace from nils provos</span></div><div class="line" id="122950"><span class="nick" style="color:#80b1d3"><a href="#122950" label="[12:29:50]">&lt;aggi&gt;</a></span><span class="message">while ago create a gentoo-ebuild</span></div><div class="line" id="124013"><span class="nick" style="color:#80b1d3"><a href="#124013" label="[12:40:13]">&lt;aggi&gt;</a></span><span class="message">anyway, the bootstrapping path with tcc-toolchain/kernel-2.4/toybox-userspace/mes-libc should exclude all GNU autotools and related dependencies</span></div><div class="line" id="124444"><span class="nick" style="color:#80b1d3"><a href="#124444" label="[12:44:44]">&lt;aggi&gt;</a></span><span class="message">i'll verify this one too: <a rel="nofollow" href="https://frippery.org/make/">https://frippery.org/make/</a> </span></div><div class="line" id="124506"><span class="nick" style="color:#80b1d3"><a href="#124506" label="[12:45:06]">&lt;aggi&gt;</a></span><span class="message">&quot;public domain implementation of make which follows the POSIX standard&quot;.. hopefully this suffices to avoid GNU make too</span></div><div class="line" id="125232"><span class="nick" style="color:#2e2a4a"><a href="#125232" label="[12:52:32]">&lt;stikonas&gt;</a></span><span class="message">gnu make is very easy to build...</span></div><div class="line" id="125259"><span class="nick" style="color:#234e69"><a href="#125259" label="[12:52:59]">&lt;sam_&gt;</a></span><span class="message">[11:17:07]  &lt;aggi&gt; seems circular... perl requires db,gdbm, db and gdbm require autotools, and autotools require perl</span></div><div class="line" id="125259"><span class="nick" style="color:#234e69"><a href="#125259" label="[12:52:59]">&lt;sam_&gt;</a></span><span class="message">yes, you can avoid db, even gdbm</span></div><div class="line" id="125338"><span class="nick" style="color:#2e2a4a"><a href="#125338" label="[12:53:38]">&lt;stikonas&gt;</a></span><span class="message">thoguh that pdpmake is still interesting</span></div><div class="line" id="125406"><span class="nick" style="color:#80b1d3"><a href="#125406" label="[12:54:06]">&lt;aggi&gt;</a></span><span class="message">sam_: just found it a moment ago, i think perl-5.8 build system has general issues when cross-compiling</span></div><div class="line" id="125416"><span class="nick" style="color:#234e69"><a href="#125416" label="[12:54:16]">&lt;sam_&gt;</a></span><span class="message">aggi: maybe can find old perl-cross?</span></div><div class="line" id="125423"><span class="nick" style="color:#234e69"><a href="#125423" label="[12:54:23]">&lt;sam_&gt;</a></span><span class="message">there's autotoolsification for perl which makes it much easier to cross</span></div><div class="line" id="125545"><span class="nick" style="color:#80b1d3"><a href="#125545" label="[12:55:45]">&lt;aggi&gt;</a></span><span class="message">sam_: no need to worry about perl-5.8 cross-compile</span></div><div class="line" id="125610"><span class="nick" style="color:#80b1d3"><a href="#125610" label="[12:56:10]">&lt;aggi&gt;</a></span><span class="message">currently, this issue affects the gcc47 c-only system profile freeze/archival only, and i'll hack it</span></div><div class="line" id="125643"><span class="nick" style="color:#80b1d3"><a href="#125643" label="[12:56:43]">&lt;aggi&gt;</a></span><span class="message">with the tcc-toolchain i'll prefer a more radical approach, including full removal of autotools/gnu-make etc</span></div><div class="line" id="125743"><span class="nick" style="color:#80b1d3"><a href="#125743" label="[12:57:43]">&lt;aggi&gt;</a></span><span class="message">of cause, bootstrapping gnu-toolchain/buildsystem shall be possible, however first with the tcc-toolchain profile i want to remove the vendor-lock against GNU</span></div><div class="line" id="125800"><span class="nick" style="color:#80b1d3"><a href="#125800" label="[12:58:00]">&lt;aggi&gt;</a></span><span class="message">for _technical_ reasons, there's that many</span></div><div class="line" id="125909"><span class="nick" style="color:#80b1d3"><a href="#125909" label="[12:59:09]">&lt;aggi&gt;</a></span><span class="message">stikonas: gnu-make depends on autotools/automake which is reason enough to consider a full detanglement and alternative approach with a POSIX make implementation, if possible</span></div><div class="line" id="130101"><span class="nick" style="color:#2e2a4a"><a href="#130101" label="[13:01:01]">&lt;stikonas&gt;</a></span><span class="message">aggi: yes, but it's trivial to build gnu-make with your own makefile</span></div><div class="line" id="130107"><span class="nick" style="color:#2e2a4a"><a href="#130107" label="[13:01:07]">&lt;stikonas&gt;</a></span><span class="message">or even just list of commands</span></div><div class="line" id="130109"><span class="nick" style="color:#2e2a4a"><a href="#130109" label="[13:01:09]">&lt;stikonas&gt;</a></span><span class="message">it's just a few files</span></div><div class="line" id="130119"><span class="nick" style="color:#2e2a4a"><a href="#130119" label="[13:01:19]">&lt;stikonas&gt;</a></span><span class="message">see this kaem script <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/make-3.80/make-3.80.kaem">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/make-3.80/make-3.80.kaem</a> </span></div><div class="line" id="130142"><span class="nick" style="color:#2e2a4a"><a href="#130142" label="[13:01:42]">&lt;stikonas&gt;</a></span><span class="message">that pdpmake also depends on some make</span></div><div class="line" id="130149"><span class="nick" style="color:#2e2a4a"><a href="#130149" label="[13:01:49]">&lt;stikonas&gt;</a></span><span class="message">so if you have no make at all</span></div><div class="line" id="130201"><span class="nick" style="color:#80b1d3"><a href="#130201" label="[13:02:01]">&lt;aggi&gt;</a></span><span class="message">stikonas: thanks! noted.</span></div><div class="line" id="130205"><span class="nick" style="color:#2e2a4a"><a href="#130205" label="[13:02:05]">&lt;stikonas&gt;</a></span><span class="message">you still need to write a list of tcc commands</span></div><div class="line" id="130219"><span class="nick" style="color:#2e2a4a"><a href="#130219" label="[13:02:19]">&lt;stikonas&gt;</a></span><span class="message">though maybe pdpmake has fewer files, so the build script would be shorter</span></div><div class="line" id="130302"><span class="nick" style="color:#6b8072"><a href="#130302" label="[13:03:02]">&lt;doras&gt;</a></span><span class="message">stikonas: what do you say about changing musl's library path from `/usr/lib/musl` to `/usr/lib/i386-linux-musl`?</span></div><div class="line" id="130406"><span class="nick" style="color:#2e2a4a"><a href="#130406" label="[13:04:06]">&lt;stikonas&gt;</a></span><span class="message">doras: fine with me, just keep in mind that a lot of hashes would change, so I prefer a separate PR for that</span></div><div class="line" id="130416"><span class="nick" style="color:#2e2a4a"><a href="#130416" label="[13:04:16]">&lt;stikonas&gt;</a></span><span class="message">btw, what is the reason?</span></div><div class="line" id="130544"><span class="nick" style="color:#6b8072"><a href="#130544" label="[13:05:44]">&lt;doras&gt;</a></span><span class="message">It seems that some projects expect the system's library path to either have no special prefix (simply /usr/lib) or have a triplet-style path (/usr/lib/&lt;triplet&gt;).</span></div><div class="line" id="130629"><span class="nick" style="color:#6b8072"><a href="#130629" label="[13:06:29]">&lt;doras&gt;</a></span><span class="message">And for those I have to add `-L/usr/lib/musl` manually to CFLAGS.</span></div><div class="line" id="130720"><span class="nick" style="color:#2e2a4a"><a href="#130720" label="[13:07:20]">&lt;stikonas&gt;</a></span><span class="message">I see, that's fine then</span></div><div class="line" id="130744"><span class="nick" style="color:#2e2a4a"><a href="#130744" label="[13:07:44]">&lt;stikonas&gt;</a></span><span class="message"> /usr/lib is not good for live-bootstrap because we do jump across different libc's unlike normal system</span></div><div class="line" id="130823"><span class="nick" style="color:#2e2a4a"><a href="#130823" label="[13:08:23]">&lt;stikonas&gt;</a></span><span class="message">and it's much easier to jump if you can have them coinstalled</span></div><div class="line" id="130904"><span class="nick" style="color:#2e2a4a"><a href="#130904" label="[13:09:04]">&lt;stikonas&gt;</a></span><span class="message">or perhaps I'm mistaken here and /usr/lib could also work</span></div><div class="line" id="130915"><span class="nick" style="color:#2e2a4a"><a href="#130915" label="[13:09:15]">&lt;stikonas&gt;</a></span><span class="message">I don't think we actually build anything with mes libc once musl is built</span></div><div class="line" id="131119"><span class="nick" style="color:#6b8072"><a href="#131119" label="[13:11:19]">&lt;doras&gt;</a></span><span class="message">stikonas: also, I noticed that we don't have a `/lib`-&gt;`/usr/lib` symlink. Is this intentional?</span></div><div class="line" id="131157"><span class="nick" style="color:#2e2a4a"><a href="#131157" label="[13:11:57]">&lt;stikonas&gt;</a></span><span class="message">not sure if it was fully intentional, but we never needed it</span></div><div class="line" id="131212"><span class="nick" style="color:#2e2a4a"><a href="#131212" label="[13:12:12]">&lt;stikonas&gt;</a></span><span class="message">something needs it too?</span></div><div class="line" id="131255"><span class="nick" style="color:#2e2a4a"><a href="#131255" label="[13:12:55]">&lt;stikonas&gt;</a></span><span class="message">well, I don't have /lib -&gt; /usr/lib symlink on my normal Gentoo system either...</span></div><div class="line" id="131325"><span class="nick" style="color:#6b8072"><a href="#131325" label="[13:13:25]">&lt;doras&gt;</a></span><span class="message">I doubt something needs it, but it's usually what distros do.</span></div><div class="line" id="131349"><span class="nick" style="color:#234e69"><a href="#131349" label="[13:13:49]">&lt;sam_&gt;</a></span><span class="message">doras: this is &quot;merged usr&quot;</span></div><div class="line" id="131351"><span class="nick" style="color:#234e69"><a href="#131351" label="[13:13:51]">&lt;sam_&gt;</a></span><span class="message">it's completely fine to not have oneq</span></div><div class="line" id="131352"><span class="nick" style="color:#234e69"><a href="#131352" label="[13:13:52]">&lt;sam_&gt;</a></span><span class="message">it's not what all distros do, it's really just a choice</span></div><div class="line" id="131405"><span class="nick" style="color:#234e69"><a href="#131405" label="[13:14:05]">&lt;sam_&gt;</a></span><span class="message">in general I think one probably should do it as it's way simpler</span></div><div class="line" id="131517"><span class="nick" style="color:#6b8072"><a href="#131517" label="[13:15:17]">&lt;doras&gt;</a></span><span class="message">Actually... never mind. I think we do have it.</span></div><div class="line" id="131545"><span class="nick" style="color:#6b8072"><a href="#131545" label="[13:15:45]">&lt;doras&gt;</a></span><span class="message">Or at least it's there mid-bootstrap. Strange. I was sure it wasn't there after the bootstrap completed.</span></div><div class="line" id="131623"><span class="nick" style="color:#2e2a4a"><a href="#131623" label="[13:16:23]">&lt;stikonas&gt;</a></span><span class="message">it might be added there in sysa-&gt;sysc jump</span></div><div class="line" id="131624"><span class="nick" style="color:#6b8072"><a href="#131624" label="[13:16:24]">&lt;doras&gt;</a></span><span class="message">I'll check again when the bootstrap ends. Maybe something removes it.</span></div><div class="line" id="133052"><span class="nick" style="color:#80b1d3"><a href="#133052" label="[13:30:52]">&lt;aggi&gt;</a></span><span class="message">sam_: fyi, perl-5.8 doesn't contain a configure script supporting cross-compile</span></div><div class="line" id="133122"><span class="nick" style="color:#234e69"><a href="#133122" label="[13:31:22]">&lt;sam_&gt;</a></span><span class="message">that's why I mention perl-cross</span></div><div class="line" id="133124"><span class="nick" style="color:#80b1d3"><a href="#133124" label="[13:31:24]">&lt;aggi&gt;</a></span><span class="message">cross-compile and bootstrapping are distinct problems, had only hoped for to keep version perl-5.8 for all those</span></div><div class="line" id="133145"><span class="nick" style="color:#80b1d3"><a href="#133145" label="[13:31:45]">&lt;aggi&gt;</a></span><span class="message">ok, seems the perl-5.8 ebuild scraped from the archives didn't utilize perl-cross</span></div><div class="line" id="133154"><span class="nick" style="color:#234e69"><a href="#133154" label="[13:31:54]">&lt;sam_&gt;</a></span><span class="message">ah</span></div><div class="line" id="133454"><span class="nick" style="color:#80b1d3"><a href="#133454" label="[13:34:54]">&lt;aggi&gt;</a></span><span class="message">to keep it simple, i'll probably do this: perl-5.8 for regular and tcc-toolchain builds, and an exception/unmasking of a recent perl version for cross-compiling with the gcc47 c-only toolchain system profile</span></div><div class="line" id="133512"><span class="nick" style="color:#80b1d3"><a href="#133512" label="[13:35:12]">&lt;aggi&gt;</a></span><span class="message">having tested perl-5.8 suffices, i do know it works, and passes with tcc-toolchain if necessary</span></div><div class="line" id="133544"><span class="nick" style="color:#80b1d3"><a href="#133544" label="[13:35:44]">&lt;aggi&gt;</a></span><span class="message">and hacking cross-compile support into perl-5.8 to support GNU autotools which i want to avoid anyway, is too much effort</span></div><div class="line" id="133633"><span class="nick" style="color:#80b1d3"><a href="#133633" label="[13:36:33]">&lt;aggi&gt;</a></span><span class="message">wanted to begin testing mes-libc almost two weeks ago already, and problems simply do not stop piling up while freezing/archiving the gcc47 profile</span></div><div class="line" id="141540"><span class="nick" style="color:#80b1d3"><a href="#141540" label="[14:15:40]">&lt;aggi&gt;</a></span><span class="message">sam_: quickly tested perl-cross with perl-5.8 &quot;This perl version is probably not supported by perl-cross&quot;</span></div><div class="line" id="143955"><span class="nick" style="color:#6b8072"><a href="#143955" label="[14:39:55]">&lt;doras&gt;</a></span><span class="message">stikonas: I suspect the symlink is removed because of musl's dynamic linker.</span></div><div class="line" id="144033"><span class="nick" style="color:#6b8072"><a href="#144033" label="[14:40:33]">&lt;doras&gt;</a></span><span class="message">Mostly because it's the only thing left in `/lib` when the bootstrap completes.</span></div><div class="line" id="144238"><span class="nick" style="color:#6b8072"><a href="#144238" label="[14:42:38]">&lt;doras&gt;</a></span><span class="message">I guess this means `xbps-install` isn't smart enough to follow symlinks?</span></div><div class="line" id="144624"><span class="nick" style="color:#6b8072"><a href="#144624" label="[14:46:24]">&lt;doras&gt;</a></span><span class="message">I'm not sure if it's smart to have musl install the dynamic linker into `/usr/lib` instead.</span></div><div class="line" id="144729"><span class="nick" style="color:#6b8072"><a href="#144729" label="[14:47:29]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="144733"><span class="nick" style="color:#6b8072"><a href="#144733" label="[14:47:33]">&lt;doras&gt;</a></span><span class="message">I guess I can &quot;mv&quot; it post-install.</span></div><div class="line" id="144828"><span class="nick" style="color:#234e69"><a href="#144828" label="[14:48:28]">&lt;sam_&gt;</a></span><span class="message">we had fun with this before, btw</span></div><div class="line" id="144839"><span class="nick" style="color:#234e69"><a href="#144839" label="[14:48:39]">&lt;sam_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitweb.gentoo.org/repo/gentoo.git/tree/sys-libs/musl/musl-1.2.3-r3.ebuild#n155">https://gitweb.gentoo.org/repo/gentoo.git/tree/sys-libs/musl/musl-1.2.3-r3.ebuild#n155</a> </span></div><div class="line" id="144843"><span class="nick" style="color:#234e69"><a href="#144843" label="[14:48:43]">&lt;sam_&gt;</a></span><span class="message">it doesn't properly respect DESTDIR</span></div><div class="line" id="145832"><span class="nick" style="color:#2e2a4a"><a href="#145832" label="[14:58:32]">&lt;stikonas&gt;</a></span><span class="message">luckily live-bootstrap does not need to deal with cross-compilation</span></div><div class="line" id="145852"><span class="nick" style="color:#2e2a4a"><a href="#145852" label="[14:58:52]">&lt;stikonas&gt;</a></span><span class="message">build script is much shorter... <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/73d0dbc44acad780eae29b21212cff52b581ee00/sysc/musl-1.2.3/musl-1.2.3.sh">https://github.com/fosslinux/live-bootstrap/blob/73d0dbc44acad780eae29b21212cff52b581ee00/sysc/musl-1.2.3/musl-1.2.3.sh</a> </span></div><div class="line" id="145958"><span class="nick" style="color:#2e2a4a"><a href="#145958" label="[14:59:58]">&lt;stikonas&gt;</a></span><span class="message">doras: anyway, fossy is the person to go to for xbps questions</span></div><div class="line" id="150041"><span class="nick" style="color:#2e2a4a"><a href="#150041" label="[15:00:41]">&lt;stikonas&gt;</a></span><span class="message">xbps is taken from void linux...</span></div><div class="line" id="150156"><span class="nick" style="color:#80b1d3"><a href="#150156" label="[15:01:56]">&lt;aggi&gt;</a></span><span class="message">perl-5.8 isn't supported by perl-cross helpers, which is an annoyance because i wanted to keep this version for any bootstrap/cross-compilation path</span></div><div class="line" id="150227"><span class="nick" style="color:#80b1d3"><a href="#150227" label="[15:02:27]">&lt;aggi&gt;</a></span><span class="message">otherwise, perl-5.8 suffices for latest autoconf/automake, at least</span></div><div class="line" id="150318"><span class="nick" style="color:#80b1d3"><a href="#150318" label="[15:03:18]">&lt;aggi&gt;</a></span><span class="message">yet, perl-5.8 known to compile with tcc-toolchain, fails cross-compilation</span></div><div class="line" id="150423"><span class="nick" style="color:#80b1d3"><a href="#150423" label="[15:04:23]">&lt;aggi&gt;</a></span><span class="message">not important, just another hint, why i want to fully detangle from GNU-toolchain and GNU-buildsystem</span></div><div class="line" id="150629"><span class="nick" style="color:#80b1d3"><a href="#150629" label="[15:06:29]">&lt;aggi&gt;</a></span><span class="message">too, it's a relevant question, which priority a clean cross-compilation path had with bootstrapping</span></div><div class="line" id="150707"><span class="nick" style="color:#80b1d3"><a href="#150707" label="[15:07:07]">&lt;aggi&gt;</a></span><span class="message">any cross-compile with CBUILD=gnu-toolchain CTARGET=tcc-toolchain, currently, will fail, because of perl-5.8</span></div><div class="line" id="150824"><span class="nick" style="color:#80b1d3"><a href="#150824" label="[15:08:24]">&lt;aggi&gt;</a></span><span class="message">if the ARCH is identical with both gnu-toolchain and tcc-toolchain, that's the only small path to sneak through with perl-5.8 and tcc-toolchain</span></div><div class="line" id="150852"><span class="nick" style="color:#6c3d55"><a href="#150852" label="[15:08:52]">*</a></span><span class="message">aggi sips some vodka</span></div><div class="line" id="151409"><span class="nick" style="color:#80b1d3"><a href="#151409" label="[15:14:09]">&lt;aggi&gt;</a></span><span class="message">which is the minimum linux kernel version of boostrappable? i fear linux-2.4 (or 2.6) to compile with tcc-toolchain could hit problems elsewhere (mes-libc?, don't know yet).</span></div><div class="line" id="151637"><span class="nick" style="color:#2e2a4a"><a href="#151637" label="[15:16:37]">&lt;stikonas&gt;</a></span><span class="message">mes-libc itself shouldn't cause problems, linux does not need C library</span></div><div class="line" id="151717"><span class="nick" style="color:#2e2a4a"><a href="#151717" label="[15:17:17]">&lt;stikonas&gt;</a></span><span class="message">at most some helper tools need it (kconfig stuff?)</span></div><div class="line" id="152143"><span class="nick" style="color:#80b1d3"><a href="#152143" label="[15:21:43]">&lt;aggi&gt;</a></span><span class="message">tccboot implemented some self-made build-system for linux-2.4</span></div><div class="line" id="152230"><span class="nick" style="color:#80b1d3"><a href="#152230" label="[15:22:30]">&lt;aggi&gt;</a></span><span class="message">i do know, musl-libc does require a later kernel-2.6 (it's documented on the web-site of musl-libc)</span></div><div class="line" id="152316"><span class="nick" style="color:#80b1d3"><a href="#152316" label="[15:23:16]">&lt;aggi&gt;</a></span><span class="message">the idea is, to avoid musl-libc entirely, and see to toybox userspace links against it</span></div><div class="line" id="152357"><span class="nick" style="color:#80b1d3"><a href="#152357" label="[15:23:57]">&lt;aggi&gt;</a></span><span class="message">toybox build-time dependencies are less troublesome than GNU coreutils/util-linux/etc.., too toybox userspace is less troublesome than busybox</span></div><div class="line" id="152451"><span class="nick" style="color:#6b8072"><a href="#152451" label="[15:24:51]">&lt;doras&gt;</a></span><span class="message">I think I'll make some changes around musl's dynamic linker. I see some issues.</span></div><div class="line" id="152513"><span class="nick" style="color:#80b1d3"><a href="#152513" label="[15:25:13]">&lt;aggi&gt;</a></span><span class="message">toybox userspace links against it, mes-libc, without any musl</span></div><div class="line" id="152531"><span class="nick" style="color:#80b1d3"><a href="#152531" label="[15:25:31]">&lt;aggi&gt;</a></span><span class="message">i wouldn't bother either if static-linking &quot;only&quot; was available, that's good enough</span></div><div class="line" id="152843"><span class="nick" style="color:#80b1d3"><a href="#152843" label="[15:28:43]">&lt;aggi&gt;</a></span><span class="message">fyi, &quot;TCCBOOT was only tested with Linux 2.4.26&quot;, musl-libc requires v2.6</span></div><div class="line" id="152922"><span class="nick" style="color:#80b1d3"><a href="#152922" label="[15:29:22]">&lt;aggi&gt;</a></span><span class="message">so, either linux-kernel compilation was verified against tcc-toolchain with v2.6, or musl-libc is gone</span></div><div class="line" id="152958"><span class="nick" style="color:#d9d9d9"><a href="#152958" label="[15:29:58]">&lt;muurkha&gt;</a></span><span class="message">what's the problem with musl on 2.4?</span></div><div class="line" id="153006"><span class="nick" style="color:#d9d9d9"><a href="#153006" label="[15:30:06]">&lt;muurkha&gt;</a></span><span class="message">or is it just an unknown?</span></div><div class="line" id="153040"><span class="nick" style="color:#80b1d3"><a href="#153040" label="[15:30:40]">&lt;aggi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.musl-libc.org/supported-platforms.html">https://wiki.musl-libc.org/supported-platforms.html</a> </span></div><div class="line" id="153105"><span class="nick" style="color:#80b1d3"><a href="#153105" label="[15:31:05]">&lt;aggi&gt;</a></span><span class="message">&quot;musl is built on the Linux syscall layer. Linux kernel &gt;=2.6.39 is necessary for POSIX conformant behaviour&quot;</span></div><div class="line" id="153116"><span class="nick" style="color:#80b1d3"><a href="#153116" label="[15:31:16]">&lt;aggi&gt;</a></span><span class="message">&quot;2.4 kernels will only work for simple single-threaded applications&quot;</span></div><div class="line" id="153159"><span class="nick" style="color:#80b1d3"><a href="#153159" label="[15:31:59]">&lt;aggi&gt;</a></span><span class="message">no clue, what &quot;simple&quot; covers, such as toybox userspace, and some development utilities (Vim, git, make, tcc-toolchain)</span></div><div class="line" id="153230"><span class="nick" style="color:#d9d9d9"><a href="#153230" label="[15:32:30]">&lt;muurkha&gt;</a></span><span class="message">I wonder if glibc on 2.4 was non-POSIX-conformant in similar ways</span></div><div class="line" id="153244"><span class="nick" style="color:#d9d9d9"><a href="#153244" label="[15:32:44]">&lt;muurkha&gt;</a></span><span class="message">presumably the issue is something related to POSIX's shitty threading semantics</span></div><div class="line" id="153308"><span class="nick" style="color:#d9d9d9"><a href="#153308" label="[15:33:08]">&lt;muurkha&gt;</a></span><span class="message">but maybe there's other stuff I don't knwo about</span></div><div class="line" id="153515"><span class="nick" style="color:#80b1d3"><a href="#153515" label="[15:35:15]">&lt;aggi&gt;</a></span><span class="message">well, i would too rule-out musl-libc (and most other libc) because it does require binutils to digest GNU gas assembly</span></div><div class="line" id="153550"><span class="nick" style="color:#80b1d3"><a href="#153550" label="[15:35:50]">&lt;aggi&gt;</a></span><span class="message">there's only one way to know, re-vive tccboot with linux-2.4, mes-libc, and toybox userspace linked against it</span></div><div class="line" id="153736"><span class="nick" style="color:#80b1d3"><a href="#153736" label="[15:37:36]">&lt;aggi&gt;</a></span><span class="message">with tcc-toolchain that is, not GNU</span></div><div class="line" id="153804"><span class="nick" style="color:#d9d9d9"><a href="#153804" label="[15:38:04]">&lt;muurkha&gt;</a></span><span class="message">GNU gas assembly is pretty trivial, isn't it?</span></div><div class="line" id="153846"><span class="nick" style="color:#80b1d3"><a href="#153846" label="[15:38:46]">&lt;aggi&gt;</a></span><span class="message">not my field of expertise, and if it was, i rather depart to Z80 assembly or Gigatron TTL</span></div><div class="line" id="153938"><span class="nick" style="color:#2e2a4a"><a href="#153938" label="[15:39:38]">&lt;stikonas&gt;</a></span><span class="message">and there are just 13 or so arm assembly files in musl</span></div><div class="line" id="153947"><span class="nick" style="color:#2e2a4a"><a href="#153947" label="[15:39:47]">&lt;stikonas&gt;</a></span><span class="message">can't be too hard to fix them to subset that tcc understands...</span></div><div class="line" id="154032"><span class="nick" style="color:#2e2a4a"><a href="#154032" label="[15:40:32]">&lt;stikonas&gt;</a></span><span class="message">I doubt that it needs much expertise, just a bit of time and reading through docs</span></div><div class="line" id="154107"><span class="nick" style="color:#80b1d3"><a href="#154107" label="[15:41:07]">&lt;aggi&gt;</a></span><span class="message">lol, last time i tried to read docs at developer.arm.com w3m browser didn't render anything</span></div><div class="line" id="154113"><span class="nick" style="color:#80b1d3"><a href="#154113" label="[15:41:13]">&lt;aggi&gt;</a></span><span class="message">or lynx</span></div><div class="line" id="154126"><span class="nick" style="color:#d9d9d9"><a href="#154126" label="[15:41:26]">&lt;muurkha&gt;</a></span><span class="message">ugh, yeah, I've had that problem too</span></div><div class="line" id="154126"><span class="nick" style="color:#80b1d3"><a href="#154126" label="[15:41:26]">&lt;aggi&gt;</a></span><span class="message">the only browsers i would consider barely passing acceptence criteria</span></div><div class="line" id="154143"><span class="nick" style="color:#d9d9d9"><a href="#154143" label="[15:41:43]">&lt;muurkha&gt;</a></span><span class="message">I think for ARM, gas syntax is actually regular ARM syntax</span></div><div class="line" id="154232"><span class="nick" style="color:#2e2a4a"><a href="#154232" label="[15:42:32]">&lt;stikonas&gt;</a></span><span class="message">I'm sure there are plenty of other tutorials</span></div><div class="line" id="154313"><span class="nick" style="color:#d9d9d9"><a href="#154313" label="[15:43:13]">&lt;muurkha&gt;</a></span><span class="message">yeah, there are some nice books on ARM assembly</span></div><div class="line" id="154332"><span class="nick" style="color:#2e2a4a"><a href="#154332" label="[15:43:32]">&lt;stikonas&gt;</a></span><span class="message">or even if you read x86 assembly tutorial, 90% of the arm assembly would be clear</span></div><div class="line" id="154347"><span class="nick" style="color:#2e2a4a"><a href="#154347" label="[15:43:47]">&lt;stikonas&gt;</a></span><span class="message">or maybe risc-v would be a bit closer but still</span></div><div class="line" id="154354"><span class="nick" style="color:#80b1d3"><a href="#154354" label="[15:43:54]">&lt;aggi&gt;</a></span><span class="message">i did dig into the aarch32 assembly parts, and no, it is not trivial</span></div><div class="line" id="154419"><span class="nick" style="color:#80b1d3"><a href="#154419" label="[15:44:19]">&lt;aggi&gt;</a></span><span class="message">and it's cluttered with various extensions, for arm vfp, gnu gas specifics and whatnot</span></div><div class="line" id="154427"><span class="nick" style="color:#d9d9d9"><a href="#154427" label="[15:44:27]">&lt;muurkha&gt;</a></span><span class="message">yeah, risc-v is closer to arm than amd64 is</span></div><div class="line" id="154500"><span class="nick" style="color:#80b1d3"><a href="#154500" label="[15:45:00]">&lt;aggi&gt;</a></span><span class="message">question then, if it's so simple, why then didn't arm-tcc digest the aarch32 asm inside musl-libc?</span></div><div class="line" id="154512"><span class="nick" style="color:#80b1d3"><a href="#154512" label="[15:45:12]">&lt;aggi&gt;</a></span><span class="message">same with python/libffi aarch32 asm parts... failed with arm-tcc...</span></div><div class="line" id="154523"><span class="nick" style="color:#d9d9d9"><a href="#154523" label="[15:45:23]">&lt;muurkha&gt;</a></span><span class="message">what I meant is that translating from GNU gas assembly syntax into the syntax for whatever other assembler you're using is generally pretty trivial</span></div><div class="line" id="154543"><span class="nick" style="color:#d9d9d9"><a href="#154543" label="[15:45:43]">&lt;muurkha&gt;</a></span><span class="message">not that writing an assembler is trivial</span></div><div class="line" id="154557"><span class="nick" style="color:#d9d9d9"><a href="#154557" label="[15:45:57]">&lt;muurkha&gt;</a></span><span class="message">(sometimes it is, but indeed not for the entire ARM instruction set)</span></div><div class="line" id="154559"><span class="nick" style="color:#80b1d3"><a href="#154559" label="[15:45:59]">&lt;aggi&gt;</a></span><span class="message">if it's trivial, why does it fail then?</span></div><div class="line" id="154610"><span class="nick" style="color:#d9d9d9"><a href="#154610" label="[15:46:10]">&lt;muurkha&gt;</a></span><span class="message">maybe it doesn't try</span></div><div class="line" id="154631"><span class="nick" style="color:#d9d9d9"><a href="#154631" label="[15:46:31]">&lt;muurkha&gt;</a></span><span class="message">not trying is the easiest way to fail!</span></div><div class="line" id="154702"><span class="nick" style="color:#80b1d3"><a href="#154702" label="[15:47:02]">&lt;aggi&gt;</a></span><span class="message">you know, i had wasted yet another two weeks to cleanup the typical GNU chaos</span></div><div class="line" id="154720"><span class="nick" style="color:#80b1d3"><a href="#154720" label="[15:47:20]">&lt;aggi&gt;</a></span><span class="message">and whatever had failed, a rollback to linux-2.4 is necessary to pass with tcc-toolchain</span></div><div class="line" id="154727"><span class="nick" style="color:#80b1d3"><a href="#154727" label="[15:47:27]">&lt;aggi&gt;</a></span><span class="message">it's certainly not any of my failures</span></div><div class="line" id="154751"><span class="nick" style="color:#80b1d3"><a href="#154751" label="[15:47:51]">&lt;aggi&gt;</a></span><span class="message">muurkha: your arrogant attitude is somewhat inappropriate, given this situtation, whoever you are or whatever you do otherwise</span></div><div class="line" id="154922"><span class="nick" style="color:#80b1d3"><a href="#154922" label="[15:49:22]">&lt;aggi&gt;</a></span><span class="message">and such a kernel-version rollback, this one alone is estimated worth more than 2billion cash coins worth of development costs</span></div><div class="line" id="155002"><span class="nick" style="color:#80b1d3"><a href="#155002" label="[15:50:02]">&lt;aggi&gt;</a></span><span class="message">muurkha: and if you could recommend any appropriate aarch32 hardware i could boot such a kernel with, lecture me please</span></div><div class="line" id="155029"><span class="nick" style="color:#80b1d3"><a href="#155029" label="[15:50:29]">&lt;aggi&gt;</a></span><span class="message">i am certain, an opensource aarch32 SoC, that's accomplished, with a few minuts of work? because it's &quot;trivial&quot;?</span></div><div class="line" id="155251"><span class="nick" style="color:#234e69"><a href="#155251" label="[15:52:51]">&lt;sam_&gt;</a></span><span class="message">i think you've misunderstood what they meant</span></div><div class="line" id="155309"><span class="nick" style="color:#234e69"><a href="#155309" label="[15:53:09]">&lt;sam_&gt;</a></span><span class="message">they mean mangling handwritten gas into another format is usually only a few transformations</span></div><div class="line" id="155723"><span class="nick" style="color:#80b1d3"><a href="#155723" label="[15:57:23]">&lt;aggi&gt;</a></span><span class="message">for aarch32/64/RISC-V, uboot-loader would need a rewrite too, to avoid c++/python-swig there as BDEP</span></div><div class="line" id="155915"><span class="nick" style="color:#80b1d3"><a href="#155915" label="[15:59:15]">&lt;aggi&gt;</a></span><span class="message">otherwise, you had to take the route with GNU-toolchain and c++, which is dozens of millions of LOC, trivial or not</span></div><div class="line" id="155921"><span class="nick" style="color:#80b1d3"><a href="#155921" label="[15:59:21]">&lt;aggi&gt;</a></span><span class="message">to have a boot-loader at least</span></div><div class="line" id="160304"><span class="nick" style="color:#2e2a4a"><a href="#160304" label="[16:03:04]">&lt;stikonas&gt;</a></span><span class="message">indeed, even converting from GAS syntax to M0 is fairly trivial (and M0 is a tiny program far far simpler than tcc)</span></div><div class="line" id="160316"><span class="nick" style="color:#2e2a4a"><a href="#160316" label="[16:03:16]">&lt;stikonas&gt;</a></span><span class="message">e.g see <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.S">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.S</a>  vs <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1</a> </span></div><div class="line" id="160608"><span class="nick" style="color:#2e2a4a"><a href="#160608" label="[16:06:08]">&lt;stikonas&gt;</a></span><span class="message">writing the whole things is indeed more complicated, you need to plan how to structure everything in assembly</span></div><div class="line" id="160623"><span class="nick" style="color:#2e2a4a"><a href="#160623" label="[16:06:23]">&lt;stikonas&gt;</a></span><span class="message">but making changes or moving to different syntax is relatively easy</span></div><div class="line" id="161120"><span class="nick" style="color:#80b1d3"><a href="#161120" label="[16:11:20]">&lt;aggi&gt;</a></span><span class="message">none of this is neither simple nor trivial</span></div><div class="line" id="161139"><span class="nick" style="color:#80b1d3"><a href="#161139" label="[16:11:39]">&lt;aggi&gt;</a></span><span class="message">stikonas: did you test the hex0.S with amd64-tcc?</span></div><div class="line" id="161226"><span class="nick" style="color:#2e2a4a"><a href="#161226" label="[16:12:26]">&lt;stikonas&gt;</a></span><span class="message">no, neither tcc, nor gcc works with it, I built it with clang</span></div><div class="line" id="161250"><span class="nick" style="color:#2e2a4a"><a href="#161250" label="[16:12:50]">&lt;stikonas&gt;</a></span><span class="message">only clang supports x86_64-unknown-windows</span></div><div class="line" id="161336"><span class="nick" style="color:#2e2a4a"><a href="#161336" label="[16:13:36]">&lt;stikonas&gt;</a></span><span class="message">well, there is also fasm2 but it was not packaged on Gentoo</span></div><div class="line" id="161447"><span class="nick" style="color:#2e2a4a"><a href="#161447" label="[16:14:47]">&lt;stikonas&gt;</a></span><span class="message">but .M1 version can be built with M0 which is 2 KiB binary</span></div><div class="line" id="172615"><span class="nick" style="color:#d9d9d9"><a href="#172615" label="[17:26:15]">&lt;muurkha&gt;</a></span><span class="message">aggi: I'm not sure what you think is arrogant.  I think probably arm-tcc doesn't translate ARM assembly between formats because tcc doesn't try to translate assembly between formats</span></div><div class="line" id="172658"><span class="nick" style="color:#d9d9d9"><a href="#172658" label="[17:26:58]">&lt;muurkha&gt;</a></span><span class="message">maybe if you think I'm arrogant it's because you thought I was saying *you* weren't trying, but that wasn't what I meant</span></div><div class="line" id="172812"><span class="nick" style="color:#d9d9d9"><a href="#172812" label="[17:28:12]">&lt;muurkha&gt;</a></span><span class="message">I recognize that you are doing awesome and amazing and very difficult things, and they are things I appreciate very much</span></div><div class="line" id="173025"><span class="nick" style="color:#d9d9d9"><a href="#173025" label="[17:30:25]">&lt;muurkha&gt;</a></span><span class="message">as for arm32 SoCs, I don't think there can be an open-source one due to ARM's patents, but the Raspberry Pi is ARM32, is ubiquitous, and has a reasonably well documented boot process (unlike the even more ubiquitous used cellphones)</span></div><div class="line" id="173055"><span class="nick" style="color:#2e2a4a"><a href="#173055" label="[17:30:55]">&lt;stikonas&gt;</a></span><span class="message">doesn't raspberry pi need huge videocore blob?</span></div><div class="line" id="173100"><span class="nick" style="color:#d9d9d9"><a href="#173100" label="[17:31:00]">&lt;muurkha&gt;</a></span><span class="message">yes :(</span></div><div class="line" id="173107"><span class="nick" style="color:#d9d9d9"><a href="#173107" label="[17:31:07]">&lt;muurkha&gt;</a></span><span class="message">it won't boot without it!</span></div><div class="line" id="173110"><span class="nick" style="color:#2e2a4a"><a href="#173110" label="[17:31:10]">&lt;stikonas&gt;</a></span><span class="message">so I wouldn't call it reasonably well documented</span></div><div class="line" id="173128"><span class="nick" style="color:#2e2a4a"><a href="#173128" label="[17:31:28]">&lt;stikonas&gt;</a></span><span class="message">there are some way more open arm systems, or at least aarch64</span></div><div class="line" id="173155"><span class="nick" style="color:#d9d9d9"><a href="#173155" label="[17:31:55]">&lt;muurkha&gt;</a></span><span class="message">yeah, there are some much better aarch64 systems out there, like the various pine64 things</span></div><div class="line" id="173214"><span class="nick" style="color:#d9d9d9"><a href="#173214" label="[17:32:14]">&lt;muurkha&gt;</a></span><span class="message">but I don't know of a better option than the Pi for an arm32 with an MMU</span></div><div class="line" id="173216"><span class="nick" style="color:#2e2a4a"><a href="#173216" label="[17:32:16]">&lt;stikonas&gt;</a></span><span class="message">indeed, I have rockpro64 which does not need any blobs to boot</span></div><div class="line" id="173224"><span class="nick" style="color:#d9d9d9"><a href="#173224" label="[17:32:24]">&lt;muurkha&gt;</a></span><span class="message">woo! :)</span></div><div class="line" id="173249"><span class="nick" style="color:#2e2a4a"><a href="#173249" label="[17:32:49]">&lt;stikonas&gt;</a></span><span class="message">well, there is a blob on the ROM (32 KiB if I remember correctly)</span></div><div class="line" id="173300"><span class="nick" style="color:#2e2a4a"><a href="#173300" label="[17:33:00]">&lt;stikonas&gt;</a></span><span class="message">which starts initial bootloading</span></div><div class="line" id="173311"><span class="nick" style="color:#2e2a4a"><a href="#173311" label="[17:33:11]">&lt;stikonas&gt;</a></span><span class="message">but it's ROM, so might as well be hardware</span></div><div class="line" id="174447"><span class="nick" style="color:#80b1d3"><a href="#174447" label="[17:44:47]">&lt;aggi&gt;</a></span><span class="message">the low power consumption of those ARM SBC is amazing</span></div><div class="line" id="174505"><span class="nick" style="color:#80b1d3"><a href="#174505" label="[17:45:05]">&lt;aggi&gt;</a></span><span class="message">and those too define some natural barrier to what's acceptable with compile-time performance</span></div><div class="line" id="174517"><span class="nick" style="color:#80b1d3"><a href="#174517" label="[17:45:17]">&lt;aggi&gt;</a></span><span class="message">reason enough, to remove c++/g++ and llvm</span></div><div class="line" id="174603"><span class="nick" style="color:#80b1d3"><a href="#174603" label="[17:46:03]">&lt;aggi&gt;</a></span><span class="message">until i realized, uboot-loader got a nasty dependency graph (python/swig/c++)</span></div><div class="line" id="174630"><span class="nick" style="color:#80b1d3"><a href="#174630" label="[17:46:30]">&lt;aggi&gt;</a></span><span class="message">and, rock64/rockpro64 require an aarch64 uboot/kernel... which gcc47 doesn't support anymore</span></div><div class="line" id="174708"><span class="nick" style="color:#80b1d3"><a href="#174708" label="[17:47:08]">&lt;aggi&gt;</a></span><span class="message">another reason, i'll freeze/archive/terminate the c-only toolchain system profile</span></div><div class="line" id="174715"><span class="nick" style="color:#80b1d3"><a href="#174715" label="[17:47:15]">&lt;aggi&gt;</a></span><span class="message">there is no way forward anymore with this</span></div><div class="line" id="174928"><span class="nick" style="color:#80b1d3"><a href="#174928" label="[17:49:28]">&lt;aggi&gt;</a></span><span class="message">backtracking this, including opensource hardware, i arrived at Z80 FPGA SoC or Gigatron TTL</span></div><div class="line" id="174950"><span class="nick" style="color:#80b1d3"><a href="#174950" label="[17:49:50]">&lt;aggi&gt;</a></span><span class="message">as far as hardware bootstrapping is concerned, Gigatron TTL is the best offer to my knowledge</span></div><div class="line" id="175023"><span class="nick" style="color:#d9d9d9"><a href="#175023" label="[17:50:23]">&lt;muurkha&gt;</a></span><span class="message">what is the problem with the C-only toolchain system profile?</span></div><div class="line" id="175037"><span class="nick" style="color:#80b1d3"><a href="#175037" label="[17:50:37]">&lt;aggi&gt;</a></span><span class="message">doesn't require any fancy software tooling, TTL7400 series parts are available (some Z80 parts may be scarce already)</span></div><div class="line" id="175055"><span class="nick" style="color:#d9d9d9"><a href="#175055" label="[17:50:55]">&lt;muurkha&gt;</a></span><span class="message">Zilog still sells eZ80s</span></div><div class="line" id="175103"><span class="nick" style="color:#80b1d3"><a href="#175103" label="[17:51:03]">&lt;aggi&gt;</a></span><span class="message">muurkha: a c-only system profile required extensive treatment of the portage tree (working with gentoo)</span></div><div class="line" id="175133"><span class="nick" style="color:#80b1d3"><a href="#175133" label="[17:51:33]">&lt;aggi&gt;</a></span><span class="message">had to pull in 300 ebuilds into my overlay already, with 600 packages still available (which don't require any c++ anywhere in userspace)</span></div><div class="line" id="175225"><span class="nick" style="color:#80b1d3"><a href="#175225" label="[17:52:25]">&lt;aggi&gt;</a></span><span class="message">and yes, i rather had fun with assembly hacking than struggling with GNU autotools wreckage, for months and years</span></div><div class="line" id="175311"><span class="nick" style="color:#80b1d3"><a href="#175311" label="[17:53:11]">&lt;aggi&gt;</a></span><span class="message">btw, SDCC compiler, is implemented in c++... just saying</span></div><div class="line" id="175347"><span class="nick" style="color:#80b1d3"><a href="#175347" label="[17:53:47]">&lt;aggi&gt;</a></span><span class="message">although with Z80 or Gigatron TTL, i would probably skip the entire C-lang realm and stick to ASM</span></div><div class="line" id="175452"><span class="nick" style="color:#80b1d3"><a href="#175452" label="[17:54:52]">&lt;aggi&gt;</a></span><span class="message">yet then it wouldn't neither be ARM nor X86</span></div><div class="line" id="175513"><span class="nick" style="color:#d9d9d9"><a href="#175513" label="[17:55:13]">&lt;muurkha&gt;</a></span><span class="message">if you're building your own CPU it might be less effort to use an architecture better suited for C</span></div><div class="line" id="175542"><span class="nick" style="color:#d9d9d9"><a href="#175542" label="[17:55:42]">&lt;muurkha&gt;</a></span><span class="message">I don't know if you saw that SeRV implements all of RISC-V in 200 4-LUTs</span></div><div class="line" id="175556"><span class="nick" style="color:#d9d9d9"><a href="#175556" label="[17:55:56]">&lt;muurkha&gt;</a></span><span class="message">a small fraction of Lattice's smallest FPGA</span></div><div class="line" id="175601"><span class="nick" style="color:#80b1d3"><a href="#175601" label="[17:56:01]">&lt;aggi&gt;</a></span><span class="message">there's some interesting 68K SoC too; in the end, as soon as linux and GNU (or BSD) get involved, situation is, difficult, to remain polite</span></div><div class="line" id="175625"><span class="nick" style="color:#d9d9d9"><a href="#175625" label="[17:56:25]">&lt;muurkha&gt;</a></span><span class="message">Linux up to about 02010 is pretty doable without C++ I think?</span></div><div class="line" id="175653"><span class="nick" style="color:#80b1d3"><a href="#175653" label="[17:56:53]">&lt;aggi&gt;</a></span><span class="message">i patched Linux-5.10 already, to avoid some C11 clutter, and passed with gcc47 still</span></div><div class="line" id="175655"><span class="nick" style="color:#d9d9d9"><a href="#175655" label="[17:56:55]">&lt;muurkha&gt;</a></span><span class="message">the 68k is pretty nice to program on but it's an order of magnitude bigger than an ARM1</span></div><div class="line" id="175731"><span class="nick" style="color:#d9d9d9"><a href="#175731" label="[17:57:31]">&lt;muurkha&gt;</a></span><span class="message">and the ARM1 is an order of magnitude bigger than SeRV</span></div><div class="line" id="175733"><span class="nick" style="color:#80b1d3"><a href="#175733" label="[17:57:33]">&lt;aggi&gt;</a></span><span class="message">my current favorite is the Gigatron TTL; with such a device however, obviously, no internet</span></div><div class="line" id="175918"><span class="nick" style="color:#80b1d3"><a href="#175918" label="[17:59:18]">&lt;aggi&gt;</a></span><span class="message">the advantage with Z80 is this, it's relatively cheap, and Rodney Zak &quot;Programming Z80&quot; didn't require any update in 40years</span></div><div class="line" id="180001"><span class="nick" style="color:#d9d9d9"><a href="#180001" label="[18:00:01]">&lt;muurkha&gt;</a></span><span class="message">why obviously no internet?  Contiki can run a WWW browser on a Commodore PET</span></div><div class="line" id="180032"><span class="nick" style="color:#d9d9d9"><a href="#180032" label="[18:00:32]">&lt;muurkha&gt;</a></span><span class="message">I think the Gigatron is 39 74HCT and 62256 chips?</span></div><div class="line" id="180039"><span class="nick" style="color:#d9d9d9"><a href="#180039" label="[18:00:39]">&lt;muurkha&gt;</a></span><span class="message">incidentally 74HCT isn't TTL</span></div><div class="line" id="180041"><span class="nick" style="color:#d9d9d9"><a href="#180041" label="[18:00:41]">&lt;muurkha&gt;</a></span><span class="message">it's CMOS</span></div><div class="line" id="180110"><span class="nick" style="color:#d9d9d9"><a href="#180110" label="[18:01:10]">&lt;muurkha&gt;</a></span><span class="message">...and what is this ATTiny85 doing in it?</span></div><div class="line" id="180130"><span class="nick" style="color:#80b1d3"><a href="#180130" label="[18:01:30]">&lt;aggi&gt;</a></span><span class="message">i could dig down to the Verilog/Digital-Circuit design level, not any lower down to transistors or physical manufacturing characteristics</span></div><div class="line" id="180210"><span class="nick" style="color:#d9d9d9"><a href="#180210" label="[18:02:10]">&lt;muurkha&gt;</a></span><span class="message">I don't think SeRV by itself will run Linux, but maybe you could bolt an MMU onto the side of it</span></div><div class="line" id="180225"><span class="nick" style="color:#d9d9d9"><a href="#180225" label="[18:02:25]">&lt;muurkha&gt;</a></span><span class="message">unfortunately RISC-V support in GCC postdates C++ in GCC by quite a bit</span></div><div class="line" id="180336"><span class="nick" style="color:#d9d9d9"><a href="#180336" label="[18:03:36]">&lt;muurkha&gt;</a></span><span class="message">the PicoRV32 RV32 implementation is several times larger than SeRV but enormously faster (because it's not bit-serial)</span></div><div class="line" id="180346"><span class="nick" style="color:#80b1d3"><a href="#180346" label="[18:03:46]">&lt;aggi&gt;</a></span><span class="message">muurkha: good question, any clue what the ATTiny85 does? for the sake of it any such system should contain un-documented ICs</span></div><div class="line" id="180357"><span class="nick" style="color:#80b1d3"><a href="#180357" label="[18:03:57]">&lt;aggi&gt;</a></span><span class="message">*should NOT contain un-documented ICs</span></div><div class="line" id="180410"><span class="nick" style="color:#d9d9d9"><a href="#180410" label="[18:04:10]">&lt;muurkha&gt;</a></span><span class="message">I'm guessing it does something relatively peripheral but I don't know yet</span></div><div class="line" id="180444"><span class="nick" style="color:#d9d9d9"><a href="#180444" label="[18:04:44]">&lt;muurkha&gt;</a></span><span class="message">I wouldn't be surprised if you could convert the SeRV design to a Gigatron-like design without increasing the parts count enormously</span></div><div class="line" id="180502"><span class="nick" style="color:#80b1d3"><a href="#180502" label="[18:05:02]">&lt;aggi&gt;</a></span><span class="message">with various Z80 SoC FPGA it's a similar problem, some undocumented ICs (Adafruit) are attached to serve peripheral I/O</span></div><div class="line" id="180518"><span class="nick" style="color:#d9d9d9"><a href="#180518" label="[18:05:18]">&lt;muurkha&gt;</a></span><span class="message">a more traditional, non-bit-serial, Gigatron-like RISC-V implementation is the Pineapple One</span></div><div class="line" id="180522"><span class="nick" style="color:#80b1d3"><a href="#180522" label="[18:05:22]">&lt;aggi&gt;</a></span><span class="message">and i don't welcome the complicated software tooling with FPGA deployments either</span></div><div class="line" id="180621"><span class="nick" style="color:#d9d9d9"><a href="#180621" label="[18:06:21]">&lt;muurkha&gt;</a></span><span class="message">I suspect the ATTiny85 is used for the serial port or the PS/2 keyboard port, because it's in the &quot;Pluggy McPlugface&quot; module</span></div><div class="line" id="180809"><span class="nick" style="color:#80b1d3"><a href="#180809" label="[18:08:09]">&lt;aggi&gt;</a></span><span class="message">similar issues with Geoff's VT100, undocumented ICs to terminate VT100 with PS/2 and VGA</span></div><div class="line" id="180901"><span class="nick" style="color:#d9d9d9"><a href="#180901" label="[18:09:01]">&lt;muurkha&gt;</a></span><span class="message">I wonder if those are a result of people getting tired and giving up</span></div><div class="line" id="180944"><span class="nick" style="color:#d9d9d9"><a href="#180944" label="[18:09:44]">&lt;muurkha&gt;</a></span><span class="message">a few weeks ago I talked with a guy who did a VT52 design on an FPGA</span></div><div class="line" id="180956"><span class="nick" style="color:#d9d9d9"><a href="#180956" label="[18:09:56]">&lt;muurkha&gt;</a></span><span class="message">he reported that a big part of his footprint was the PS/2 keyboard decoding</span></div><div class="line" id="181037"><span class="nick" style="color:#d9d9d9"><a href="#181037" label="[18:10:37]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=32550798">https://news.ycombinator.com/item?id=32550798</a> </span></div><div class="line" id="181049"><span class="nick" style="color:#80b1d3"><a href="#181049" label="[18:10:49]">&lt;aggi&gt;</a></span><span class="message">ao486 SoC hasn't got USB...</span></div><div class="line" id="181114"><span class="nick" style="color:#d9d9d9"><a href="#181114" label="[18:11:14]">&lt;muurkha&gt;</a></span><span class="message">GPL3</span></div><div class="line" id="181118"><span class="nick" style="color:#d9d9d9"><a href="#181118" label="[18:11:18]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/AndresNavarro82/vt52-fpga">https://github.com/AndresNavarro82/vt52-fpga</a> </span></div><div class="line" id="181136"><span class="nick" style="color:#d9d9d9"><a href="#181136" label="[18:11:36]">&lt;muurkha&gt;</a></span><span class="message">that includes the VGA generation as well</span></div><div class="line" id="181147"><span class="nick" style="color:#80b1d3"><a href="#181147" label="[18:11:47]">&lt;aggi&gt;</a></span><span class="message">j-core.org turtleboard, got it, USB (not sure); yet then, tcc got no J2 ISA support</span></div><div class="line" id="181153"><span class="nick" style="color:#d9d9d9"><a href="#181153" label="[18:11:53]">&lt;muurkha&gt;</a></span><span class="message">builds with icestorm</span></div><div class="line" id="181203"><span class="nick" style="color:#80b1d3"><a href="#181203" label="[18:12:03]">&lt;aggi&gt;</a></span><span class="message">muurkha: noted</span></div><div class="line" id="181205"><span class="nick" style="color:#d9d9d9"><a href="#181205" label="[18:12:05]">&lt;muurkha&gt;</a></span><span class="message">J2?  is that a descendant of the J1A?</span></div><div class="line" id="181237"><span class="nick" style="color:#d9d9d9"><a href="#181237" label="[18:12:37]">&lt;muurkha&gt;</a></span><span class="message">ah, no, it's a SuperH</span></div><div class="line" id="181253"><span class="nick" style="color:#80b1d3"><a href="#181253" label="[18:12:53]">&lt;aggi&gt;</a></span><span class="message">yes, and aboriginal linux and j-core.org made considerable progress</span></div><div class="line" id="181310"><span class="nick" style="color:#d9d9d9"><a href="#181310" label="[18:13:10]">&lt;muurkha&gt;</a></span><span class="message">and GCC supports SuperH but unsurprisingly tcc doesn't</span></div><div class="line" id="181311"><span class="nick" style="color:#80b1d3"><a href="#181311" label="[18:13:11]">&lt;aggi&gt;</a></span><span class="message">however, with SH2/4 currently this locks against GNU-toolchain</span></div><div class="line" id="181346"><span class="nick" style="color:#80b1d3"><a href="#181346" label="[18:13:46]">&lt;aggi&gt;</a></span><span class="message">and with GNU, see above, i wouldn't intend to lock-out GNU-toolchain, of cause not, i am not willing to vendor-lock against GNU</span></div><div class="line" id="181401"><span class="nick" style="color:#80b1d3"><a href="#181401" label="[18:14:01]">&lt;aggi&gt;</a></span><span class="message">for _technical_ reasons, GPL is fine otherwise</span></div><div class="line" id="181410"><span class="nick" style="color:#d9d9d9"><a href="#181410" label="[18:14:10]">&lt;muurkha&gt;</a></span><span class="message">the J1A is a nice simple CPU design but I haven't tried compiling C to it.  I wouldn't be surprised if it was a bit of a pain, though, because it's a Forth machine</span></div><div class="line" id="181503"><span class="nick" style="color:#d9d9d9"><a href="#181503" label="[18:15:03]">&lt;muurkha&gt;</a></span><span class="message">yeah, I think there might be some difficulties in practice complying with the GPL for &quot;gateware&quot;, but I'm not sure I really understand them</span></div><div class="line" id="181539"><span class="nick" style="color:#d9d9d9"><a href="#181539" label="[18:15:39]">&lt;muurkha&gt;</a></span><span class="message">maybe Icestorm avoids the problems, or maybe they don't really apply to FPGA realizations since the users can always load a new bitstream into their FPGA</span></div><div class="line" id="181654"><span class="nick" style="color:#d9d9d9"><a href="#181654" label="[18:16:54]">&lt;muurkha&gt;</a></span><span class="message">with respect to &quot;getting tired and giving up&quot; I mean that maybe people are 95% done with their homebrew computer system and then they discover that, say, the PS/2 protocol is nontrivial, or their CPU is too slow to generate VGA signals in software</span></div><div class="line" id="181728"><span class="nick" style="color:#80b1d3"><a href="#181728" label="[18:17:28]">&lt;aggi&gt;</a></span><span class="message">all those FPGA deployments are limited, almost always, to a few dozen MHz clock frequency</span></div><div class="line" id="181732"><span class="nick" style="color:#d9d9d9"><a href="#181732" label="[18:17:32]">&lt;muurkha&gt;</a></span><span class="message">and so instead of going back to the drawing board they just patch the problem with an expedient solution that has an entire computer in it</span></div><div class="line" id="181803"><span class="nick" style="color:#d9d9d9"><a href="#181803" label="[18:18:03]">&lt;muurkha&gt;</a></span><span class="message">it depends a lot on the FPGA; I think Claire Wolf has gotten her PicoRV32 to run at 200MHz on a Xilinx FPGA</span></div><div class="line" id="181815"><span class="nick" style="color:#80b1d3"><a href="#181815" label="[18:18:15]">&lt;aggi&gt;</a></span><span class="message">meaning then, any deployment to such system, wouldn't remain self-hosting i fear; on any such FPGA SoC i doubt any software could be compiled</span></div><div class="line" id="181845"><span class="nick" style="color:#d9d9d9"><a href="#181845" label="[18:18:45]">&lt;muurkha&gt;</a></span><span class="message">a lot of the Lattice parts really top out under 100 MHz though, and you have to work really hard on optimization to get that high</span></div><div class="line" id="181916"><span class="nick" style="color:#d9d9d9"><a href="#181916" label="[18:19:16]">&lt;muurkha&gt;</a></span><span class="message">I've compiled a lot of software on things like a 25MHz SPARC and a 12MHz 80286</span></div><div class="line" id="181936"><span class="nick" style="color:#80b1d3"><a href="#181936" label="[18:19:36]">&lt;aggi&gt;</a></span><span class="message">OK</span></div><div class="line" id="181937"><span class="nick" style="color:#d9d9d9"><a href="#181937" label="[18:19:37]">&lt;muurkha&gt;</a></span><span class="message">some of it was even C++</span></div><div class="line" id="182003"><span class="nick" style="color:#80b1d3"><a href="#182003" label="[18:20:03]">&lt;aggi&gt;</a></span><span class="message">tcc-toolchain, is in the realm of being feasible, and some linux-2.4 kernel</span></div><div class="line" id="182009"><span class="nick" style="color:#d9d9d9"><a href="#182009" label="[18:20:09]">&lt;muurkha&gt;</a></span><span class="message">admittedly, when I was compiling C++ on a 25MHz SPARC, it usually took me a week to build the system from scratch</span></div><div class="line" id="182020"><span class="nick" style="color:#d9d9d9"><a href="#182020" label="[18:20:20]">&lt;muurkha&gt;</a></span><span class="message">which was my main job at that company</span></div><div class="line" id="182052"><span class="nick" style="color:#d9d9d9"><a href="#182052" label="[18:20:52]">&lt;muurkha&gt;</a></span><span class="message">I wish I could tell you the order of magnitude of line count of the software, but let's say 256 kloc</span></div><div class="line" id="182304"><span class="nick" style="color:#d9d9d9"><a href="#182304" label="[18:23:04]">&lt;muurkha&gt;</a></span><span class="message">Navarro's VT52 project seems like it might be a promising starting point for an FPGA SoC with PS/2 and VGA output; you'd have to add a CPU and RAM to it</span></div><div class="line" id="182427"><span class="nick" style="color:#d9d9d9"><a href="#182427" label="[18:24:27]">&lt;muurkha&gt;</a></span><span class="message">my experience compiling things on a 4MHz Z80 is a lot more limited.  usually I was using interpreted BASIC because I didn't know assembly at the time and didn't have any high-level language compilers, or even C compilers</span></div><div class="line" id="182511"><span class="nick" style="color:#d9d9d9"><a href="#182511" label="[18:25:11]">&lt;muurkha&gt;</a></span><span class="message">but a lot of people did use Turbo Pascal on such machines, and compilation times for a source file were typically under a minute</span></div><div class="line" id="182525"><span class="nick" style="color:#d9d9d9"><a href="#182525" label="[18:25:25]">&lt;muurkha&gt;</a></span><span class="message">a 4MHz Z80 is something like ½ MIPS</span></div><div class="line" id="182610"><span class="nick" style="color:#d9d9d9"><a href="#182610" label="[18:26:10]">&lt;muurkha&gt;</a></span><span class="message">I did compile a fair bit of software on a VAX-11/785 (1 MIPS, but 32-bit), again with compilation times under a minute per source file</span></div><div class="line" id="182646"><span class="nick" style="color:#d9d9d9"><a href="#182646" label="[18:26:46]">&lt;muurkha&gt;</a></span><span class="message">so I feel like somewhere around 1 MIPS is where self-hosted software development in high-level languages becomes practical</span></div><div class="line" id="182748"><span class="nick" style="color:#d9d9d9"><a href="#182748" label="[18:27:48]">&lt;muurkha&gt;</a></span><span class="message">a few dozen MHz with a RISC design (usually 1 IPC) is somewhere in the range of 16-64 times faster than that</span></div><div class="line" id="182857"><span class="nick" style="color:#d9d9d9"><a href="#182857" label="[18:28:57]">&lt;muurkha&gt;</a></span><span class="message">it's a real drawback if you're using a CPU like the Z80 or 6502 that's hard to generate good code for</span></div><div class="line" id="182959"><span class="nick" style="color:#80b1d3"><a href="#182959" label="[18:29:59]">&lt;aggi&gt;</a></span><span class="message">the argument with Z80 was Rodney Zak's book, and 40 years stability</span></div><div class="line" id="183012"><span class="nick" style="color:#d9d9d9"><a href="#183012" label="[18:30:12]">&lt;muurkha&gt;</a></span><span class="message">the 286 era (2 MIPS, say) is about when the PC mainstream switched from assembly language (and BASIC for prototypes) to C, C++, and Pascal</span></div><div class="line" id="183035"><span class="nick" style="color:#d9d9d9"><a href="#183035" label="[18:30:35]">&lt;muurkha&gt;</a></span><span class="message">hmm, how about the ARM then?  it's not quite 40 years</span></div><div class="line" id="183108"><span class="nick" style="color:#80b1d3"><a href="#183108" label="[18:31:08]">&lt;aggi&gt;</a></span><span class="message">put aside ARM for a moment: the Z80 and 68K too are interesting for another reason, which is their historical track record with scientific calculators</span></div><div class="line" id="183138"><span class="nick" style="color:#80b1d3"><a href="#183138" label="[18:31:38]">&lt;aggi&gt;</a></span><span class="message">nowadays, the 68K series (Ti89/92) is defunct, and the sources/schematics of those weren't released to my knowledge</span></div><div class="line" id="183145"><span class="nick" style="color:#d9d9d9"><a href="#183145" label="[18:31:45]">&lt;muurkha&gt;</a></span><span class="message">:(</span></div><div class="line" id="183151"><span class="nick" style="color:#80b1d3"><a href="#183151" label="[18:31:51]">&lt;aggi&gt;</a></span><span class="message">the Z80 series calculators from Ti are manufactured still...</span></div><div class="line" id="183203"><span class="nick" style="color:#d9d9d9"><a href="#183203" label="[18:32:03]">&lt;muurkha&gt;</a></span><span class="message">the PalmPilot and Macintosh were also 68Ks btw</span></div><div class="line" id="183221"><span class="nick" style="color:#80b1d3"><a href="#183221" label="[18:32:21]">&lt;aggi&gt;</a></span><span class="message">yet, for those Z80 Ti84(?), some Computer Algebra System (CAS) software wasn't available</span></div><div class="line" id="183223"><span class="nick" style="color:#d9d9d9"><a href="#183223" label="[18:32:23]">&lt;muurkha&gt;</a></span><span class="message">KnightOS runs on those Z80 calculators</span></div><div class="line" id="183227"><span class="nick" style="color:#d9d9d9"><a href="#183227" label="[18:32:27]">&lt;muurkha&gt;</a></span><span class="message">SirCmpwn's thing</span></div><div class="line" id="183234"><span class="nick" style="color:#80b1d3"><a href="#183234" label="[18:32:34]">&lt;aggi&gt;</a></span><span class="message">and the Ti84/Z80 calculators aren't opensource/free either</span></div><div class="line" id="183242"><span class="nick" style="color:#d9d9d9"><a href="#183242" label="[18:32:42]">&lt;muurkha&gt;</a></span><span class="message">KnightOS is open source though</span></div><div class="line" id="183248"><span class="nick" style="color:#d9d9d9"><a href="#183248" label="[18:32:48]">&lt;muurkha&gt;</a></span><span class="message">it just isn't feasible to self-host</span></div><div class="line" id="183256"><span class="nick" style="color:#d9d9d9"><a href="#183256" label="[18:32:56]">&lt;muurkha&gt;</a></span><span class="message">I think there's an open-source CAS for Z80 calculators out there somewhere</span></div><div class="line" id="183340"><span class="nick" style="color:#80b1d3"><a href="#183340" label="[18:33:40]">&lt;aggi&gt;</a></span><span class="message">the Gigatron TTL btw. is build upon even _older_ designs, late 1960s... Apollo Mission...</span></div><div class="line" id="183402"><span class="nick" style="color:#80b1d3"><a href="#183402" label="[18:34:02]">&lt;aggi&gt;</a></span><span class="message">reminds me, ESA chose SPARC Leon... tcc-toolchain got no SPARC support</span></div><div class="line" id="183425"><span class="nick" style="color:#d9d9d9"><a href="#183425" label="[18:34:25]">&lt;muurkha&gt;</a></span><span class="message">also I think Oberon might have implemented a 68k backend at some point?</span></div><div class="line" id="183432"><span class="nick" style="color:#80b1d3"><a href="#183432" label="[18:34:32]">&lt;aggi&gt;</a></span><span class="message">NASA jumped onto RISC-V recently</span></div><div class="line" id="183454"><span class="nick" style="color:#d9d9d9"><a href="#183454" label="[18:34:54]">&lt;muurkha&gt;</a></span><span class="message">have you looked at Wirth's RISC, btw? the one he designed for Oberon</span></div><div class="line" id="183507"><span class="nick" style="color:#80b1d3"><a href="#183507" label="[18:35:07]">&lt;aggi&gt;</a></span><span class="message">no</span></div><div class="line" id="183510"><span class="nick" style="color:#80b1d3"><a href="#183510" label="[18:35:10]">&lt;aggi&gt;</a></span><span class="message">not yet</span></div><div class="line" id="183532"><span class="nick" style="color:#d9d9d9"><a href="#183532" label="[18:35:32]">&lt;muurkha&gt;</a></span><span class="message">it's very, very simple.  even simpler than RISC-V</span></div><div class="line" id="183554"><span class="nick" style="color:#d9d9d9"><a href="#183554" label="[18:35:54]">&lt;muurkha&gt;</a></span><span class="message">yeah, apparently Oberon does have a 68K backend.  also PowerPC, and lkcl is working on getting OpenPOWER shipped</span></div><div class="line" id="183718"><span class="nick" style="color:#d9d9d9"><a href="#183718" label="[18:37:18]">&lt;muurkha&gt;</a></span><span class="message">but check out <a rel="nofollow" href="https://en.wikipedia.org/wiki/Transistor_count:">https://en.wikipedia.org/wiki/Transistor_count:</a>  25000 transistors for ARM 1, 27000 for ARM 2, vs. 68000 for the much slower 68000</span></div><div class="line" id="183751"><span class="nick" style="color:#80b1d3"><a href="#183751" label="[18:37:51]">&lt;aggi&gt;</a></span><span class="message">yep; that's another problem, to fit any SoC onto a decent priced FPGA</span></div><div class="line" id="183823"><span class="nick" style="color:#d9d9d9"><a href="#183823" label="[18:38:23]">&lt;muurkha&gt;</a></span><span class="message">well, as I said, SeRV fits into a fraction of Lattice's smallest FPGA</span></div><div class="line" id="183836"><span class="nick" style="color:#80b1d3"><a href="#183836" label="[18:38:36]">&lt;aggi&gt;</a></span><span class="message">and it is noteworthy, the Z80 Ti84 series remained, while 68k TI92 terminated</span></div><div class="line" id="183925"><span class="nick" style="color:#d9d9d9"><a href="#183925" label="[18:39:25]">&lt;muurkha&gt;</a></span><span class="message">the ARM 2 was the first one they really shipped, and that was in 01986.  so you could sort of argue that it has &quot;36 years&quot; of stability</span></div><div class="line" id="183955"><span class="nick" style="color:#d9d9d9"><a href="#183955" label="[18:39:55]">&lt;muurkha&gt;</a></span><span class="message">but I'm not actually sure that ARM 2 code will run on a modern ARM 7 (or ARM 6 like the Raspberry Pi)</span></div><div class="line" id="184003"><span class="nick" style="color:#80b1d3"><a href="#184003" label="[18:40:03]">&lt;aggi&gt;</a></span><span class="message">OK, and too i noticed opencores.org documents some early ARM designs</span></div><div class="line" id="184028"><span class="nick" style="color:#80b1d3"><a href="#184028" label="[18:40:28]">&lt;aggi&gt;</a></span><span class="message">nonetheless, the entire system integration of a full SoC including any operating system... what's the final result?</span></div><div class="line" id="184041"><span class="nick" style="color:#d9d9d9"><a href="#184041" label="[18:40:41]">&lt;muurkha&gt;</a></span><span class="message">oh, that's cool!  yeah, surely any ARM architecture from before 02002 is patent-free</span></div><div class="line" id="184127"><span class="nick" style="color:#d9d9d9"><a href="#184127" label="[18:41:27]">&lt;muurkha&gt;</a></span><span class="message">(though definitely you could use patented inventions in a microarchitecture that implements that patent-free architecture)</span></div><div class="line" id="184203"><span class="nick" style="color:#d9d9d9"><a href="#184203" label="[18:42:03]">&lt;muurkha&gt;</a></span><span class="message">what do you mean about the final result?</span></div><div class="line" id="184305"><span class="nick" style="color:#80b1d3"><a href="#184305" label="[18:43:05]">&lt;aggi&gt;</a></span><span class="message">let's define some criteria first: tcc-toolchain support? linux-2.x? USB, VGA? RAM? some shallow first notes</span></div><div class="line" id="184339"><span class="nick" style="color:#80b1d3"><a href="#184339" label="[18:43:39]">&lt;aggi&gt;</a></span><span class="message">will the system be capable to run a TCP/IP stack?</span></div><div class="line" id="184358"><span class="nick" style="color:#80b1d3"><a href="#184358" label="[18:43:58]">&lt;aggi&gt;</a></span><span class="message">will it remain self-hosting?</span></div><div class="line" id="184450"><span class="nick" style="color:#80b1d3"><a href="#184450" label="[18:44:50]">&lt;aggi&gt;</a></span><span class="message">for example, ao486... no ethernet, no usb, OK, no problem, if this would be the final result</span></div><div class="line" id="184508"><span class="nick" style="color:#80b1d3"><a href="#184508" label="[18:45:08]">&lt;aggi&gt;</a></span><span class="message">however, i want to know before investing months and years of work</span></div><div class="line" id="184600"><span class="nick" style="color:#80b1d3"><a href="#184600" label="[18:46:00]">&lt;aggi&gt;</a></span><span class="message">good hint, with Gigatron TTL, it contains some undocumented IC for PS2/VGA... i'll not buy that</span></div><div class="line" id="184952"><span class="nick" style="color:#d9d9d9"><a href="#184952" label="[18:49:52]">&lt;muurkha&gt;</a></span><span class="message">it might be possible to replace the ATtiny85</span></div><div class="line" id="185043"><span class="nick" style="color:#d9d9d9"><a href="#185043" label="[18:50:43]">&lt;muurkha&gt;</a></span><span class="message">you can run a TCP/IP stack on just about anything; Contiki has wedged it into truly astonishing places, including, as I mentioned above, a Commodore PET</span></div><div class="line" id="185128"><span class="nick" style="color:#d9d9d9"><a href="#185128" label="[18:51:28]">&lt;muurkha&gt;</a></span><span class="message">you can definitely run Linux on many ARM32s.  not sure if it's ever been ported to RV32, and the RV64 port is recentish</span></div><div class="line" id="185140"><span class="nick" style="color:#d9d9d9"><a href="#185140" label="[18:51:40]">&lt;muurkha&gt;</a></span><span class="message">not sure about the Linux-68k port</span></div><div class="line" id="185236"><span class="nick" style="color:#80b1d3"><a href="#185236" label="[18:52:36]">&lt;aggi&gt;</a></span><span class="message">a known deployment of Linux-68k onto (Altera) FPGA is documented; tcc got no 68k support</span></div><div class="line" id="185303"><span class="nick" style="color:#d9d9d9"><a href="#185303" label="[18:53:03]">&lt;muurkha&gt;</a></span><span class="message">I may switch my laptop from Ubuntu to Debian Sid in order to make it easy to install libraries for cross-compilation</span></div><div class="line" id="185312"><span class="nick" style="color:#234e69"><a href="#185312" label="[18:53:12]">&lt;sam_&gt;</a></span><span class="message">it's even easier with gentoo :P</span></div><div class="line" id="185318"><span class="nick" style="color:#234e69"><a href="#185318" label="[18:53:18]">&lt;sam_&gt;</a></span><span class="message">i mean stupidly easy</span></div><div class="line" id="185324"><span class="nick" style="color:#80b1d3"><a href="#185324" label="[18:53:24]">&lt;aggi&gt;</a></span><span class="message">well</span></div><div class="line" id="185414"><span class="nick" style="color:#d9d9d9"><a href="#185414" label="[18:54:14]">&lt;muurkha&gt;</a></span><span class="message">Ubuntu only has three architectures, Sid has 14</span></div><div class="line" id="185423"><span class="nick" style="color:#d9d9d9"><a href="#185423" label="[18:54:23]">&lt;muurkha&gt;</a></span><span class="message">maybe I should try gentoo!  or arch!</span></div><div class="line" id="185435"><span class="nick" style="color:#234e69"><a href="#185435" label="[18:54:35]">&lt;sam_&gt;</a></span><span class="message">arch does not have particularly wide arch support (or in general, support for &quot;interesting things&quot;)_</span></div><div class="line" id="185510"><span class="nick" style="color:#80b1d3"><a href="#185510" label="[18:55:10]">&lt;aggi&gt;</a></span><span class="message">as far as system-integration (with the typical GNU) is concerned, gentoo is the most capable one</span></div><div class="line" id="185517"><span class="nick" style="color:#d9d9d9"><a href="#185517" label="[18:55:17]">&lt;muurkha&gt;</a></span><span class="message">though to be fair those 14 architectures are all amd64, arm64, arm, i386, mips, mips64, powerpc, ppc64, or s390x</span></div><div class="line" id="185523"><span class="nick" style="color:#d9d9d9"><a href="#185523" label="[18:55:23]">&lt;muurkha&gt;</a></span><span class="message">so it's really only 8</span></div><div class="line" id="185534"><span class="nick" style="color:#d9d9d9"><a href="#185534" label="[18:55:34]">&lt;muurkha&gt;</a></span><span class="message">plus big-endian and Hurd and FreeBSD variants</span></div><div class="line" id="185611"><span class="nick" style="color:#d9d9d9"><a href="#185611" label="[18:56:11]">&lt;muurkha&gt;</a></span><span class="message">in particular Debian no longer exists on 68k though</span></div><div class="line" id="185620"><span class="nick" style="color:#d9d9d9"><a href="#185620" label="[18:56:20]">&lt;muurkha&gt;</a></span><span class="message">and I think maybe it's been dropped from Linux too?</span></div><div class="line" id="185651"><span class="nick" style="color:#d9d9d9"><a href="#185651" label="[18:56:51]">&lt;muurkha&gt;</a></span><span class="message">USB is a huge pain and maybe not necessary for basic usability</span></div><div class="line" id="185715"><span class="nick" style="color:#80b1d3"><a href="#185715" label="[18:57:15]">&lt;aggi&gt;</a></span><span class="message">j-core.org mentioned USB1.x max</span></div><div class="line" id="185717"><span class="nick" style="color:#d9d9d9"><a href="#185717" label="[18:57:17]">&lt;muurkha&gt;</a></span><span class="message">VGA is sort of a pain because it requires tight timing</span></div><div class="line" id="185740"><span class="nick" style="color:#d9d9d9"><a href="#185740" label="[18:57:40]">&lt;muurkha&gt;</a></span><span class="message">pcc or lcc might be an alternative to tcc for some architectures</span></div><div class="line" id="185752"><span class="nick" style="color:#80b1d3"><a href="#185752" label="[18:57:52]">&lt;aggi&gt;</a></span><span class="message">usb1.x too is documented with opencores.org, and whatever else j-core.org did</span></div><div class="line" id="185828"><span class="nick" style="color:#80b1d3"><a href="#185828" label="[18:58:28]">&lt;aggi&gt;</a></span><span class="message">muurkha: tcc is a complete toolchain, not only compiler</span></div><div class="line" id="185841"><span class="nick" style="color:#234e69"><a href="#185841" label="[18:58:41]">&lt;sam_&gt;</a></span><span class="message">no, gentoo does m68k still, and it still works on linux in general</span></div><div class="line" id="185853"><span class="nick" style="color:#234e69"><a href="#185853" label="[18:58:53]">&lt;sam_&gt;</a></span><span class="message">(we also still have hppa, and had superh until recently (but our HW died))</span></div><div class="line" id="185918"><span class="nick" style="color:#d9d9d9"><a href="#185918" label="[18:59:18]">&lt;muurkha&gt;</a></span><span class="message">sam_: thanks!</span></div><div class="line" id="185924"><span class="nick" style="color:#d9d9d9"><a href="#185924" label="[18:59:24]">&lt;muurkha&gt;</a></span><span class="message">aw :(</span></div><div class="line" id="185933"><span class="nick" style="color:#d9d9d9"><a href="#185933" label="[18:59:33]">&lt;muurkha&gt;</a></span><span class="message">Linux on ARM was originally a port to the ARM2 I think</span></div><div class="line" id="185938"><span class="nick" style="color:#234e69"><a href="#185938" label="[18:59:38]">&lt;sam_&gt;</a></span><span class="message">superh was kind of weird because like.. nobody seemed to be interesed in it at all</span></div><div class="line" id="185942"><span class="nick" style="color:#234e69"><a href="#185942" label="[18:59:42]">&lt;sam_&gt;</a></span><span class="message">we had 1 guy and he got bored of it</span></div><div class="line" id="185956"><span class="nick" style="color:#234e69"><a href="#185956" label="[18:59:56]">&lt;sam_&gt;</a></span><span class="message">the nice thing about gentoo is it's very easy to port something to it and bring it back if interested</span></div><div class="line" id="190054"><span class="nick" style="color:#80b1d3"><a href="#190054" label="[19:00:54]">&lt;aggi&gt;</a></span><span class="message">i recommend to cross-check which architectures tcc-toolchain supports</span></div><div class="line" id="190108"><span class="nick" style="color:#80b1d3"><a href="#190108" label="[19:01:08]">&lt;aggi&gt;</a></span><span class="message">and gcc47 max</span></div><div class="line" id="190203"><span class="nick" style="color:#d9d9d9"><a href="#190203" label="[19:02:03]">&lt;muurkha&gt;</a></span><span class="message">but for other low-complexity CPUs it might be easier to use NetBSD rather than Linux to get a POSIX</span></div><div class="line" id="190251"><span class="nick" style="color:#d9d9d9"><a href="#190251" label="[19:02:51]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.netbsd.org/ports/">https://wiki.netbsd.org/ports/</a>  says they still support sh3</span></div><div class="line" id="190407"><span class="nick" style="color:#d9d9d9"><a href="#190407" label="[19:04:07]">&lt;muurkha&gt;</a></span><span class="message">and hppa, itanic, and vax, though none of those is a reasonable option for &quot;low-complexity CPUs&quot;</span></div><div class="line" id="190425"><span class="nick" style="color:#80b1d3"><a href="#190425" label="[19:04:25]">&lt;aggi&gt;</a></span><span class="message">the same criteria, gcc47 and tcc remain with NetBSD</span></div><div class="line" id="190439"><span class="nick" style="color:#80b1d3"><a href="#190439" label="[19:04:39]">&lt;aggi&gt;</a></span><span class="message">didn't *BSD switch to LLVM already?</span></div><div class="line" id="190459"><span class="nick" style="color:#d9d9d9"><a href="#190459" label="[19:04:59]">&lt;muurkha&gt;</a></span><span class="message">I think so, but I think you can still build them with GCC if you want</span></div><div class="line" id="190517"><span class="nick" style="color:#d9d9d9"><a href="#190517" label="[19:05:17]">&lt;muurkha&gt;</a></span><span class="message">and I think they too are C++-free, if that's a thing you want</span></div><div class="line" id="190526"><span class="nick" style="color:#80b1d3"><a href="#190526" label="[19:05:26]">&lt;aggi&gt;</a></span><span class="message">i won't accept LLVM, and intend to fully detangle GNU-toolchain too</span></div><div class="line" id="190540"><span class="nick" style="color:#80b1d3"><a href="#190540" label="[19:05:40]">&lt;aggi&gt;</a></span><span class="message">on the linux-side, that's kernel-2.4 verified with tcc</span></div><div class="line" id="190553"><span class="nick" style="color:#d9d9d9"><a href="#190553" label="[19:05:53]">&lt;muurkha&gt;</a></span><span class="message">yeah, I don't think anyone has tccbooted a BSD yet</span></div><div class="line" id="190555"><span class="nick" style="color:#80b1d3"><a href="#190555" label="[19:05:55]">&lt;aggi&gt;</a></span><span class="message">and any architecture tcc _and_ kernel-2.4 support</span></div><div class="line" id="190628"><span class="nick" style="color:#d9d9d9"><a href="#190628" label="[19:06:28]">&lt;muurkha&gt;</a></span><span class="message">but gcc does support 68k, sh3, hppa, itanic, and I think even vax</span></div><div class="line" id="190657"><span class="nick" style="color:#80b1d3"><a href="#190657" label="[19:06:57]">&lt;aggi&gt;</a></span><span class="message">nothing wrong with gcc, it's just, I am not willing to accept this type of software anymore</span></div><div class="line" id="190704"><span class="nick" style="color:#80b1d3"><a href="#190704" label="[19:07:04]">&lt;aggi&gt;</a></span><span class="message">on my system</span></div><div class="line" id="190812"><span class="nick" style="color:#d9d9d9"><a href="#190812" label="[19:08:12]">&lt;muurkha&gt;</a></span><span class="message">what do you think about pcc and lcc?</span></div><div class="line" id="190837"><span class="nick" style="color:#d9d9d9"><a href="#190837" label="[19:08:37]">&lt;muurkha&gt;</a></span><span class="message">pcc has been revived but lost a bit of momentum since the shift of the BSDs to LLVM</span></div><div class="line" id="190841"><span class="nick" style="color:#80b1d3"><a href="#190841" label="[19:08:41]">&lt;aggi&gt;</a></span><span class="message">i do know, OpenBSD did verify pcc-x86 15 years ago</span></div><div class="line" id="190913"><span class="nick" style="color:#80b1d3"><a href="#190913" label="[19:09:13]">&lt;aggi&gt;</a></span><span class="message">not sure if they used any of the GNU binutils, i won't</span></div><div class="line" id="190934"><span class="nick" style="color:#d9d9d9"><a href="#190934" label="[19:09:34]">&lt;muurkha&gt;</a></span><span class="message">you feel they're too complex?</span></div><div class="line" id="191018"><span class="nick" style="color:#80b1d3"><a href="#191018" label="[19:10:18]">&lt;aggi&gt;</a></span><span class="message">i can't have a look at configure.ac anymore without drinking vodka</span></div><div class="line" id="191026"><span class="nick" style="color:#80b1d3"><a href="#191026" label="[19:10:26]">&lt;aggi&gt;</a></span><span class="message">i won't accept GNU autotools/automake anymore either</span></div><div class="line" id="191117"><span class="nick" style="color:#80b1d3"><a href="#191117" label="[19:11:17]">&lt;aggi&gt;</a></span><span class="message">the perl-5.8 story of today... see above</span></div><div class="line" id="191151"><span class="nick" style="color:#d9d9d9"><a href="#191151" label="[19:11:51]">&lt;muurkha&gt;</a></span><span class="message">oh, it's just the build system?  I was thinking maybe you hated BFD or thought the CVE history was unacceptably dirty</span></div><div class="line" id="191230"><span class="nick" style="color:#80b1d3"><a href="#191230" label="[19:12:30]">&lt;aggi&gt;</a></span><span class="message">buildsystem, compiler/toolchain, non-POSIX bashism, python clutter inside buildsystem, c++ dependencies in the earliest bootloader parts</span></div><div class="line" id="191232"><span class="nick" style="color:#d9d9d9"><a href="#191232" label="[19:12:32]">&lt;muurkha&gt;</a></span><span class="message">I mean, the build system is certainly nontrivial</span></div><div class="line" id="191239"><span class="nick" style="color:#80b1d3"><a href="#191239" label="[19:12:39]">&lt;aggi&gt;</a></span><span class="message">it's unacceptable</span></div><div class="line" id="191257"><span class="nick" style="color:#d9d9d9"><a href="#191257" label="[19:12:57]">&lt;muurkha&gt;</a></span><span class="message">to replace!</span></div><div class="line" id="191415"><span class="nick" style="color:#d9d9d9"><a href="#191415" label="[19:14:15]">&lt;muurkha&gt;</a></span><span class="message">but it's not the same order of magnitude to replace GNU binutils's build system as it would be to replace binutils itself (though, yes, I know tcc doesn't depend on binutils)</span></div><div class="line" id="191419"><span class="nick" style="color:#80b1d3"><a href="#191419" label="[19:14:19]">&lt;aggi&gt;</a></span><span class="message">suckless.org shows, how it's done, to ship some makefile and config.h</span></div><div class="line" id="191430"><span class="nick" style="color:#d9d9d9"><a href="#191430" label="[19:14:30]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="191455"><span class="nick" style="color:#d9d9d9"><a href="#191455" label="[19:14:55]">&lt;muurkha&gt;</a></span><span class="message">is your objection to Python the circular dependency or is it something about the Python language itself?</span></div><div class="line" id="191559"><span class="nick" style="color:#80b1d3"><a href="#191559" label="[19:15:59]">&lt;aggi&gt;</a></span><span class="message">Python bootstrapping is problematic (and currently _impossible with tcc-toolchain)</span></div><div class="line" id="191615"><span class="nick" style="color:#d9d9d9"><a href="#191615" label="[19:16:15]">&lt;muurkha&gt;</a></span><span class="message">aha, I see</span></div><div class="line" id="191618"><span class="nick" style="color:#80b1d3"><a href="#191618" label="[19:16:18]">&lt;aggi&gt;</a></span><span class="message">i am not obsessed with tcc-toolchain itself, it's just revealing some dirt as a side effect</span></div><div class="line" id="191622"><span class="nick" style="color:#d9d9d9"><a href="#191622" label="[19:16:22]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="191633"><span class="nick" style="color:#80b1d3"><a href="#191633" label="[19:16:33]">&lt;aggi&gt;</a></span><span class="message">and, tcc-toolchain, is practically, usefull</span></div><div class="line" id="191639"><span class="nick" style="color:#d9d9d9"><a href="#191639" label="[19:16:39]">&lt;muurkha&gt;</a></span><span class="message">very</span></div><div class="line" id="191722"><span class="nick" style="color:#80b1d3"><a href="#191722" label="[19:17:22]">&lt;aggi&gt;</a></span><span class="message">furthmore, Python as BDEP creepts into where it doesn't belong, certainly it doesn't belong into the earliest boot-loader parts anywhere, neither as RDEP nor BDEP</span></div><div class="line" id="191745"><span class="nick" style="color:#80b1d3"><a href="#191745" label="[19:17:45]">&lt;aggi&gt;</a></span><span class="message">same problem with C++; it does not belong into early bootstrapping paths</span></div><div class="line" id="191750"><span class="nick" style="color:#d9d9d9"><a href="#191750" label="[19:17:50]">&lt;muurkha&gt;</a></span><span class="message">with regard to Ethernet I think 10BaseT signaling is relatively simple.  the wire encoding is just manchester encoding</span></div><div class="line" id="191753"><span class="nick" style="color:#d9d9d9"><a href="#191753" label="[19:17:53]">&lt;muurkha&gt;</a></span><span class="message">BDEP?</span></div><div class="line" id="191758"><span class="nick" style="color:#d9d9d9"><a href="#191758" label="[19:17:58]">&lt;muurkha&gt;</a></span><span class="message">build dependency?</span></div><div class="line" id="191800"><span class="nick" style="color:#80b1d3"><a href="#191800" label="[19:18:00]">&lt;aggi&gt;</a></span><span class="message">build-time dependency</span></div><div class="line" id="191807"><span class="nick" style="color:#80b1d3"><a href="#191807" label="[19:18:07]">&lt;aggi&gt;</a></span><span class="message">rdep, run-time</span></div><div class="line" id="191809"><span class="nick" style="color:#d9d9d9"><a href="#191809" label="[19:18:09]">&lt;muurkha&gt;</a></span><span class="message">is that an arch term?</span></div><div class="line" id="191832"><span class="nick" style="color:#80b1d3"><a href="#191832" label="[19:18:32]">&lt;aggi&gt;</a></span><span class="message">i think all BSD and Gentoo distinguish this appropriately</span></div><div class="line" id="191856"><span class="nick" style="color:#d9d9d9"><a href="#191856" label="[19:18:56]">&lt;muurkha&gt;</a></span><span class="message">yeah, Debian does too, just doesn't use the &quot;RDEP&quot;/&quot;BDEP&quot; terminology</span></div><div class="line" id="191900"><span class="nick" style="color:#80b1d3"><a href="#191900" label="[19:19:00]">&lt;aggi&gt;</a></span><span class="message">anyway, NetBSD, probably not; and this is the important difference</span></div><div class="line" id="191909"><span class="nick" style="color:#d9d9d9"><a href="#191909" label="[19:19:09]">&lt;muurkha&gt;</a></span><span class="message">I think it's good to get away from writing your build system in low-level languages like C pretty early</span></div><div class="line" id="191911"><span class="nick" style="color:#80b1d3"><a href="#191911" label="[19:19:11]">&lt;aggi&gt;</a></span><span class="message">TCCBOOT was verified with linux-2.4</span></div><div class="line" id="191946"><span class="nick" style="color:#d9d9d9"><a href="#191946" label="[19:19:46]">&lt;muurkha&gt;</a></span><span class="message">because it reduces both the bug-proneness and the volume of the code you're writing</span></div><div class="line" id="192005"><span class="nick" style="color:#d9d9d9"><a href="#192005" label="[19:20:05]">&lt;muurkha&gt;</a></span><span class="message">which makes the bootstrap path easier to audit</span></div><div class="line" id="192058"><span class="nick" style="color:#bc80bd"><a href="#192058" label="[19:20:58]">&lt;mihi&gt;</a></span><span class="message">hello stikonas :) I see you found out egrep to be the culprit :) Re GNULIBDIR: I see you already import gnulib into many sources, so probably it is just a question of pointing GNULIBDIR to where gnulib lives :)</span></div><div class="line" id="192107"><span class="nick" style="color:#bc80bd"><a href="#192107" label="[19:21:07]">&lt;mihi&gt;</a></span><span class="message">btw did you make any progress in looking for generated files?</span></div><div class="line" id="192435"><span class="nick" style="color:#d9d9d9"><a href="#192435" label="[19:24:35]">&lt;muurkha&gt;</a></span><span class="message">I still haven't written a compiler targeting RISC-V unfortunately.  but from the RISC-V assembly I've written so far it seems like it is a pretty pleasant architecture to compile to</span></div><div class="line" id="192437"><span class="nick" style="color:#2e2a4a"><a href="#192437" label="[19:24:37]">&lt;stikonas&gt;</a></span><span class="message">mihi: not much progress loogking for generated files yet</span></div><div class="line" id="192455"><span class="nick" style="color:#2e2a4a"><a href="#192455" label="[19:24:55]">&lt;stikonas&gt;</a></span><span class="message">yesterday was mostly familiarizing with how it works and trying to run it</span></div><div class="line" id="192458"><span class="nick" style="color:#d9d9d9"><a href="#192458" label="[19:24:58]">&lt;muurkha&gt;</a></span><span class="message">a little less to write assembly for, much less to hand-write machine code for</span></div><div class="line" id="192605"><span class="nick" style="color:#2e2a4a"><a href="#192605" label="[19:26:05]">&lt;stikonas&gt;</a></span><span class="message">yes, writing hex0 code for risc-v is hard due to encoding of immediates</span></div><div class="line" id="192656"><span class="nick" style="color:#2e2a4a"><a href="#192656" label="[19:26:56]">&lt;stikonas&gt;</a></span><span class="message">once you have hex1 (which is as large as hex2 on x86), at least part of that problem goes away but there is still a problem of encoding immediate constants which doesn't go away until you build M0 for risc-v</span></div><div class="line" id="192727"><span class="nick" style="color:#d9d9d9"><a href="#192727" label="[19:27:27]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="192900"><span class="nick" style="color:#2e2a4a"><a href="#192900" label="[19:29:00]">&lt;stikonas&gt;</a></span><span class="message">mihi: I'm also thinking, maybe we should add a mode where bootstrap.sh script exists after it builds stage1 bootstrap binaries, so then the user can do normal build with a bit more control, what do you think? Shouldn't be too hard, just an if an exit</span></div><div class="line" id="192931"><span class="nick" style="color:#2e2a4a"><a href="#192931" label="[19:29:31]">&lt;stikonas&gt;</a></span><span class="message">I also need to submit another PR to update bootstrap-tarball.sh script with those --std=gnu99 flags</span></div><div class="line" id="192944"><span class="nick" style="color:#2e2a4a"><a href="#192944" label="[19:29:44]">&lt;stikonas&gt;</a></span><span class="message">which I tested yesterday in tarball bootstrap mode</span></div><div class="line" id="193016"><span class="nick" style="color:#bc80bd"><a href="#193016" label="[19:30:16]">&lt;mihi&gt;</a></span><span class="message">another option would be extracting bootstrap-stage0 into its own script and calling it from the other scripts. But &quot;if and exit&quot; is also fine.</span></div><div class="line" id="193714"><span class="nick" style="color:#d9d9d9"><a href="#193714" label="[19:37:14]">&lt;muurkha&gt;</a></span><span class="message">apparently NetBSD has C++ in an unwinder in its kernel now</span></div><div class="line" id="193731"><span class="nick" style="color:#d9d9d9"><a href="#193731" label="[19:37:31]">&lt;muurkha&gt;</a></span><span class="message">but it probably isn't necessary for normal use</span></div><div class="line" id="193802"><span class="nick" style="color:#d9d9d9"><a href="#193802" label="[19:38:02]">&lt;muurkha&gt;</a></span><span class="message">it's for things like ddb</span></div><div class="line" id="193921"><span class="nick" style="color:#80b1d3"><a href="#193921" label="[19:39:21]">&lt;aggi&gt;</a></span><span class="message">that's on optional rdep, with llvm c++ is a bdep of *BSD</span></div><div class="line" id="194035"><span class="nick" style="color:#80b1d3"><a href="#194035" label="[19:40:35]">&lt;aggi&gt;</a></span><span class="message">even this, a kernel with c++, may be acceptable, if, and only if, a kernel _without_ any c++ dependency remained somewhere</span></div><div class="line" id="194102"><span class="nick" style="color:#d9d9d9"><a href="#194102" label="[19:41:02]">&lt;muurkha&gt;</a></span><span class="message">I was thinking you might be able to compile netbsd with tcc, pcc, or lcc</span></div><div class="line" id="194217"><span class="nick" style="color:#80b1d3"><a href="#194217" label="[19:42:17]">&lt;aggi&gt;</a></span><span class="message">ok. just remember the pain it was to rebase patches against linux-kernel to support rock64/pro64</span></div><div class="line" id="194225"><span class="nick" style="color:#80b1d3"><a href="#194225" label="[19:42:25]">&lt;aggi&gt;</a></span><span class="message">side-note only</span></div><div class="line" id="194246"><span class="nick" style="color:#80b1d3"><a href="#194246" label="[19:42:46]">&lt;aggi&gt;</a></span><span class="message">there wasn't any clean mainline-integration for the hardware i am working with, and that's annoying</span></div><div class="line" id="194312"><span class="nick" style="color:#80b1d3"><a href="#194312" label="[19:43:12]">&lt;aggi&gt;</a></span><span class="message">if i had to re-base/re-implement any hardware support with NetBSD, depends on the hardware chosen</span></div><div class="line" id="194422"><span class="nick" style="color:#80b1d3"><a href="#194422" label="[19:44:22]">&lt;aggi&gt;</a></span><span class="message">the reasoning with linux-2.4 too would be this, to nail-down this one with tcc-toolchain, and ignore any hardware which isn't supported</span></div><div class="line" id="194534"><span class="nick" style="color:#d9d9d9"><a href="#194534" label="[19:45:34]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="194705"><span class="nick" style="color:#2e2a4a"><a href="#194705" label="[19:47:05]">&lt;stikonas&gt;</a></span><span class="message">mihi: hmm, yes, extracting into another script might be cleaner</span></div><div class="line" id="195348"><span class="nick" style="color:#d9d9d9"><a href="#195348" label="[19:53:48]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikibooks.org/wiki/Oberon/compilers">https://en.wikibooks.org/wiki/Oberon/compilers</a>  says Oberon's past backend compilers included ns32000, arm, something called OLGA, i386, mips, 68k, sparc, power, ppc, hppa, the OMI slim binary format, alpha, .net (CIL), and a couple of other things I don't think are actual hardware</span></div><div class="line" id="195425"><span class="nick" style="color:#d9d9d9"><a href="#195425" label="[19:54:25]">&lt;muurkha&gt;</a></span><span class="message">but currently it only supports i386, ppc, and sparc, not even arm or wirth-risc</span></div><div class="line" id="195444"><span class="nick" style="color:#234e69"><a href="#195444" label="[19:54:44]">&lt;sam_&gt;</a></span><span class="message">aw</span></div><div class="line" id="195519"><span class="nick" style="color:#d9d9d9"><a href="#195519" label="[19:55:19]">&lt;muurkha&gt;</a></span><span class="message">it would be more interesting if someone grafted a C frontend onto it</span></div><div class="line" id="200410"><span class="nick" style="color:#bc80bd"><a href="#200410" label="[20:04:10]">&lt;mihi&gt;</a></span><span class="message">C because of the syntax or because of the unsafe memory operations possible?</span></div><div class="line" id="200605"><span class="nick" style="color:#80b1d3"><a href="#200605" label="[20:06:05]">&lt;aggi&gt;</a></span><span class="message">mihi: &quot;memory-safety&quot; is a compiler-feature (let's say some runtime-instrumentation injected by the compiler); i would say it's not a language feature of C or any other close-to-hardware</span></div><div class="line" id="200807"><span class="nick" style="color:#bc80bd"><a href="#200807" label="[20:08:07]">&lt;mihi&gt;</a></span><span class="message">I was referring to what C# or Oberon calls unsafe, i.e. pointer arithmetic without bounds checking, or type casts that are not type-checked at runtime.</span></div><div class="line" id="200837"><span class="nick" style="color:#bc80bd"><a href="#200837" label="[20:08:37]">&lt;mihi&gt;</a></span><span class="message">and Oberon is definitely less close-to-hardware than C or Rust.</span></div><div class="line" id="200942"><span class="nick" style="color:#bc80bd"><a href="#200942" label="[20:09:42]">&lt;mihi&gt;</a></span><span class="message">and yes muurkha, I am not aware of anyone having ported OP2 to Wirth RISC; there is &quot;only&quot; the single-pass Oberon compiler written by Wirth available for that platform as far as I know.</span></div><div class="line" id="201041"><span class="nick" style="color:#bc80bd"><a href="#201041" label="[20:10:41]">&lt;mihi&gt;</a></span><span class="message">(and there is oberon-retro-compiler targeting Wirth RISC, which supports a subset of OP2's features)</span></div><div class="line" id="201146"><span class="nick" style="color:#bc80bd"><a href="#201146" label="[20:11:46]">&lt;mihi&gt;</a></span><span class="message">in comparison, OP2 is &quot;the gcc&quot; of Oberon world (lots of features and targets, but the most bloated one) while yet orders of magnitude smaller than gcc of course.</span></div><div class="line" id="201226"><span class="nick" style="color:#d9d9d9"><a href="#201226" label="[20:12:26]">&lt;muurkha&gt;</a></span><span class="message">mihi: C because then you could use it to compile existing software written in C, such as tcc</span></div><div class="line" id="201258"><span class="nick" style="color:#d9d9d9"><a href="#201258" label="[20:12:58]">&lt;muurkha&gt;</a></span><span class="message">Oberon does have a module for accessing arbitrary memory addresses, necessary for device drivers</span></div><div class="line" id="201325"><span class="nick" style="color:#d9d9d9"><a href="#201325" label="[20:13:25]">&lt;muurkha&gt;</a></span><span class="message">I don't know anything about oberon-retro-compiler and I wonder why Wirth's single-pass compiler isn't in this table</span></div><div class="line" id="201330"><span class="nick" style="color:#d9d9d9"><a href="#201330" label="[20:13:30]">&lt;muurkha&gt;</a></span><span class="message">maybe the table is out of date?</span></div><div class="line" id="201357"><span class="nick" style="color:#bc80bd"><a href="#201357" label="[20:13:57]">&lt;mihi&gt;</a></span><span class="message">I know of SYSTEM module, it contains all the &quot;unsafe&quot; stuff. It is just that in C code that is the default.</span></div><div class="line" id="201558"><span class="nick" style="color:#bc80bd"><a href="#201558" label="[20:15:58]">&lt;mihi&gt;</a></span><span class="message">Probably the table is out of date. Wirth's single pass compiler is mentioned in one sentence in &lt;<a rel="nofollow" href="https://en.wikipedia.org/wiki/Oberon_">https://en.wikipedia.org/wiki/Oberon_</a>(programming_language)#Oberon-07&gt; </span></div><div class="line" id="205127"><span class="nick" style="color:#2e2a4a"><a href="#205127" label="[20:51:27]">&lt;stikonas&gt;</a></span><span class="message">mihi: <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/pull/2">https://github.com/schierlm/gnu-autogen-bootstrapping/pull/2</a> </span></div><div class="line" id="205141"><span class="nick" style="color:#2e2a4a"><a href="#205141" label="[20:51:41]">&lt;stikonas&gt;</a></span><span class="message">this adds GUILE_VERSION env variable and a few other fixes</span></div><div class="line" id="222306"><span class="nick" style="color:#2e2a4a"><a href="#222306" label="[22:23:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/191">https://github.com/fosslinux/live-bootstrap/pull/191</a>  looks good to me but since you were also active in the review, I'll wait for green tick from you too</span></div><div class="line" id="222603"><span class="nick" style="color:#6b8072"><a href="#222603" label="[22:26:03]">&lt;doras&gt;</a></span><span class="message">stikonas: I'd like to add ldd given that musl would have dynamic linking support. Do you think it makes sense to add it to the existing PR adding dynamic linking support for musl, or should I create a new one that depends on it?</span></div><div class="line" id="222628"><span class="nick" style="color:#6b8072"><a href="#222628" label="[22:26:28]">&lt;doras&gt;</a></span><span class="message">ldd in the musl world is just a symlink to musl's dynamic linker.</span></div><div class="line" id="222700"><span class="nick" style="color:#2e2a4a"><a href="#222700" label="[22:27:00]">&lt;stikonas&gt;</a></span><span class="message">just append existing PR</span></div><div class="line" id="222731"><span class="nick" style="color:#6b8072"><a href="#222731" label="[22:27:31]">&lt;doras&gt;</a></span><span class="message">Will do. Thanks.</span></div><div class="line" id="222745"><span class="nick" style="color:#2e2a4a"><a href="#222745" label="[22:27:45]">&lt;stikonas&gt;</a></span><span class="message">I've seen it before that ldd is just symlinks, so that's certainly fine</span></div><div class="line" id="222904"><span class="nick" style="color:#6b8072"><a href="#222904" label="[22:29:04]">&lt;doras&gt;</a></span><span class="message">I'll run one more bootstrap before uploading a new revision for the musl dynamic linking support.</span></div><div class="line" id="223653"><span class="nick" style="color:#2e2a4a"><a href="#223653" label="[22:36:53]">&lt;stikonas&gt;</a></span><span class="message">strange things in autogen...</span></div><div class="line" id="223739"><span class="nick" style="color:#2e2a4a"><a href="#223739" label="[22:37:39]">&lt;stikonas&gt;</a></span><span class="message">there is a 256 element of array with entries 0, 1, 2, ... , 255 and all manually entered</span></div><div class="line" id="223807"><span class="nick" style="color:#2e2a4a"><a href="#223807" label="[22:38:07]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/autogen.git/tree/autoopts/streqvcmp.c#n41">https://git.savannah.gnu.org/cgit/autogen.git/tree/autoopts/streqvcmp.c#n41</a> </span></div><div class="line" id="223836"><span class="nick" style="color:#2e2a4a"><a href="#223836" label="[22:38:36]">&lt;stikonas&gt;</a></span><span class="message">why...</span></div><div class="line" id="231906"><span class="nick" style="color:#6b8072"><a href="#231906" label="[23:19:06]">&lt;doras&gt;</a></span><span class="message">stikonas: can you recall the reason to attempt to build GCC 10 or so first and not a newer version?</span></div><div class="line" id="232948"><span class="nick" style="color:#6b8072"><a href="#232948" label="[23:29:48]">&lt;doras&gt;</a></span><span class="message">I guess this might be part of the reason: &quot;A compiler with support for C++11 language features is required.&quot;</span></div><div class="line" id="233611"><span class="nick" style="color:#bc80bd"><a href="#233611" label="[23:36:11]">&lt;mihi&gt;</a></span><span class="message">stikonas, probably to make you think it actually contains all entries. It does not (it does not include uppercase letters). Or maybe for systems where the source encoding is not ASCII? But then the table would not make sense either.</span></div><div class="line" id="233823"><span class="nick" style="color:#bc80bd"><a href="#233823" label="[23:38:23]">&lt;mihi&gt;</a></span><span class="message">Or somebody believed that mmap'ing 256 bytes is faster than a loop to initialize the array (there are many questionable &quot;optimizations&quot; hidden in Autogen. Probably the compiler does it better than the Autogen author anyway).</span></div><div class="line" id="234956"><span class="nick" style="color:#2e2a4a"><a href="#234956" label="[23:49:56]">&lt;stikonas&gt;</a></span><span class="message">mihi: so far I've checked columns and getdefs (the easy ones I guess), seems good so far</span></div><div class="line" id="235041"><span class="nick" style="color:#2e2a4a"><a href="#235041" label="[23:50:41]">&lt;stikonas&gt;</a></span><span class="message">well, that table has 8 columns and 32 rows, so that's 255</span></div><div class="line" id="235108"><span class="nick" style="color:#2e2a4a"><a href="#235108" label="[23:51:08]">&lt;stikonas&gt;</a></span><span class="message">but yes, it seems that capital letters are actually in the place where lowercase letters would be...</span></div><div class="line" id="235201"><span class="nick" style="color:#2e2a4a"><a href="#235201" label="[23:52:01]">&lt;stikonas&gt;</a></span><span class="message">still, that's way less readable  than direct comparisons...</span></div><div class="line" id="235221"><span class="nick" style="color:#2e2a4a"><a href="#235221" label="[23:52:21]">&lt;stikonas&gt;</a></span><span class="message">maybe tiny bit faster to execute but it's not like autogen is on the critical path</span></div><div class="line" id="235225"><span class="nick" style="color:#2e2a4a"><a href="#235225" label="[23:52:25]">&lt;stikonas&gt;</a></span><span class="message">oh well...</span></div><div class="line" id="235241"><span class="nick" style="color:#2e2a4a"><a href="#235241" label="[23:52:41]">&lt;stikonas&gt;</a></span><span class="message">doras: I think GCC 11 needs newer C standard</span></div><div class="line" id="235255"><span class="nick" style="color:#2e2a4a"><a href="#235255" label="[23:52:55]">&lt;stikonas&gt;</a></span><span class="message">or rather C++ as you said</span></div><div class="line" id="235325"><span class="nick" style="color:#2e2a4a"><a href="#235325" label="[23:53:25]">&lt;stikonas&gt;</a></span><span class="message">still if it works, jump from 4.7.4 to GCC 10 would be fairly good</span></div><div class="line" id="235339"><span class="nick" style="color:#2e2a4a"><a href="#235339" label="[23:53:39]">&lt;stikonas&gt;</a></span><span class="message">doras: but I would really prefer (and I think fossy too) to first get autogen in</span></div><div class="line" id="235400"><span class="nick" style="color:#2e2a4a"><a href="#235400" label="[23:54:00]">&lt;stikonas&gt;</a></span><span class="message">that will simplify build script a bit (which is fairly messy)</span></div><div class="line" id="235405"><span class="nick" style="color:#bc80bd"><a href="#235405" label="[23:54:05]">&lt;mihi&gt;</a></span><span class="message">building lookup tables for every trivial state machine or trying to save a few symbols (?) by indexing constants from a long string literal are in the same league. Even if you are using autogen as CGI scripting language, your Guile scripts will be the limiting factor and not the state machines.</span></div><div class="line" id="235456"><span class="nick" style="color:#2e2a4a"><a href="#235456" label="[23:54:56]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm unlikely to finish checking autogen itself today, but made some progress</span></div><div class="line" id="235817"><span class="nick" style="color:#bc80bd"><a href="#235817" label="[23:58:17]">&lt;mihi&gt;</a></span><span class="message">great, thank you</span></div><br /></div></body></html>