<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025043"><span class="nick" style="color:#8dd3c7"><a href="#025043" label="[02:50:43]">&lt;siraben&gt;</a></span><span class="message">wrt. markdown headers I prefer to #+ style since I never really member which one of - or = correspond to which level</span></div><div class="line" id="025200"><span class="nick" style="color:#8dd3c7"><a href="#025200" label="[02:52:00]">&lt;siraben&gt;</a></span><span class="message">wrt pacing, i'd rather see a project make steady progress over a longer period of time than burn out within a month, especially since we all have work/school/family etc. to attend to</span></div><div class="line" id="025222"><span class="nick" style="color:#2e2a4a"><a href="#025222" label="[02:52:22]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: for the sake of simplicity just think Architecture that can be implemented in TTL logic and isn't covered by patents nor copyright. That I plan on implementing in bare metal as the final piece of eliminating all possible sources of a trusting trust attack.</span></div><div class="line" id="025423"><span class="nick" style="color:#2e2a4a"><a href="#025423" label="[02:54:23]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I like to think of mes-m2 as a slow ramp of disolving the outstanding issues in guix's bootstrap tree. For as we make it more powerful; more and more of the pieces that currently depend upon guile will run on it; until finally everything does and guile is finally bootstrapped.</span></div><div class="line" id="035256"><span class="nick" style="color:#2e2a4a"><a href="#035256" label="[03:52:56]">&lt;OriansJ&gt;</a></span><span class="message">lfam: I think I finally figured out the procedure and boy is it ugly.</span></div><div class="line" id="042640"><span class="nick" style="color:#6b8072"><a href="#042640" label="[04:26:40]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: you keep using the word &quot;TTL&quot;, but I don't think that word means what you think it means :)</span></div><div class="line" id="042807"><span class="nick" style="color:#6b8072"><a href="#042807" label="[04:28:07]">&lt;xentrac&gt;</a></span><span class="message">I think you might intend to say &quot;discrete logic&quot;, but that isn't what &quot;TTL&quot; means</span></div><div class="line" id="043242"><span class="nick" style="color:#6b8072"><a href="#043242" label="[04:32:42]">&lt;xentrac&gt;</a></span><span class="message">in particular, although TTL is slightly more limited in some ways than more modern families of discrete logic, none of them are really relevant to the assurability or difficulty of a CPU</span></div><div class="line" id="043408"><span class="nick" style="color:#6b8072"><a href="#043408" label="[04:34:08]">&lt;xentrac&gt;</a></span><span class="message">if you build a CPU out of discrete 74HC00 family CMOS gates or (assuming you can somehow source them) discrete 74LS00 family TTL gates, everything about your circuit design and debugging process will be almost exactly identical</span></div><div class="line" id="043558"><span class="nick" style="color:#6b8072"><a href="#043558" label="[04:35:58]">&lt;xentrac&gt;</a></span><span class="message">you can do a wired-AND with 74LS00 gates (but that wastes a lot of power), CMOS has tri-state buffers and TTL doesn't (but you can use open-collector buffers or inverters for almost the same effect), CMOS has a larger noise margin from a voltage perspective, TTL has lower input impedance on the gates and therefore a larger noise marging from a current perspective</span></div><div class="line" id="043812"><span class="nick" style="color:#6b8072"><a href="#043812" label="[04:38:12]">&lt;xentrac&gt;</a></span><span class="message">CMOS can do analog bidirectional multiplexers but that sort of isn't logic; their functions can be replaced with a bus driven open-collector if you somehow have the misfortune of having to use TTL in 2020</span></div><div class="line" id="043855"><span class="nick" style="color:#6b8072"><a href="#043855" label="[04:38:55]">&lt;xentrac&gt;</a></span><span class="message">but literally anything you can implement in TTL logic you can implement in CMOS logic and vice versa, usually with chip-for-chip replacements, occasionally with changes to some details</span></div><div class="line" id="044101"><span class="nick" style="color:#6b8072"><a href="#044101" label="[04:41:01]">&lt;xentrac&gt;</a></span><span class="message">the big difference is that (a) the CMOS chips are a lot faster, (b) you can get them, (c) they use a hundred times less power</span></div><div class="line" id="044230"><span class="nick" style="color:#6b8072"><a href="#044230" label="[04:42:30]">&lt;xentrac&gt;</a></span><span class="message">building an entire computer in TTL, which is indeed a thing people did in the 1970s, is likely to require you to run a dedicated circuit to power it in your house</span></div><div class="line" id="044349"><span class="nick" style="color:#6b8072"><a href="#044349" label="[04:43:49]">&lt;xentrac&gt;</a></span><span class="message">maybe not!  I mean the Datapoint 2200 was technically a computer, and that was only a few hundred watts.  but I don't think it could ever run a compiler</span></div><div class="line" id="044637"><span class="nick" style="color:#6b8072"><a href="#044637" label="[04:46:37]">&lt;xentrac&gt;</a></span><span class="message">the reason I keep bringing this up is that when you say &quot;can be implemented in TTL logic&quot; it sounds like you're trying to nail down a really unfortunate implementation choice that isn't useful to promote your actual goals as I understand them</span></div><div class="line" id="044808"><span class="nick" style="color:#6b8072"><a href="#044808" label="[04:48:08]">&lt;xentrac&gt;</a></span><span class="message">since those goals don't include rewiring your house or specifying components that are becoming quite rare, but are easily replaceable by more modern components that are easily available and work better</span></div><div class="line" id="044822"><span class="nick" style="color:#2e2a4a"><a href="#044822" label="[04:48:22]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: completely fair points</span></div><div class="line" id="044857"><span class="nick" style="color:#2e2a4a"><a href="#044857" label="[04:48:57]">&lt;OriansJ&gt;</a></span><span class="message">perhaps I should restrict myself to expressing it terms of implementation with individual discrete gates</span></div><div class="line" id="044932"><span class="nick" style="color:#6b8072"><a href="#044932" label="[04:49:32]">&lt;xentrac&gt;</a></span><span class="message">it's maybe sort of like saying &quot;I want my GUI to run on a 27&quot; CRT monitor&quot;.  I mean, sure, it should *work* on a 27&quot; CRT if someone has one, but do you really want to buy a 27&quot; CRT in order to build he GUI?</span></div><div class="line" id="044946"><span class="nick" style="color:#6b8072"><a href="#044946" label="[04:49:46]">&lt;xentrac&gt;</a></span><span class="message">yeah, I figured that was probably what you actually meant</span></div><div class="line" id="045012"><span class="nick" style="color:#2e2a4a"><a href="#045012" label="[04:50:12]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well I am still working on being a more effective communicator</span></div><div class="line" id="045027"><span class="nick" style="color:#6b8072"><a href="#045027" label="[04:50:27]">&lt;xentrac&gt;</a></span><span class="message">there *is* the question of whether maybe some modern CMOS discrete logic gates are implemented in a smaller process that would be hard to decap and audit with a microscope</span></div><div class="line" id="045054"><span class="nick" style="color:#2e2a4a"><a href="#045054" label="[04:50:54]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: monster 6502 comes to mind</span></div><div class="line" id="045058"><span class="nick" style="color:#6b8072"><a href="#045058" label="[04:50:58]">&lt;xentrac&gt;</a></span><span class="message">but I think that they probably aren't because moving them to a smaller process would be lots of risk for little reward</span></div><div class="line" id="045113"><span class="nick" style="color:#6b8072"><a href="#045113" label="[04:51:13]">&lt;xentrac&gt;</a></span><span class="message">the monster 6502 is awesome :)</span></div><div class="line" id="045148"><span class="nick" style="color:#2e2a4a"><a href="#045148" label="[04:51:48]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: the end goal is impossible levels of effort required to compromise the bootstrap</span></div><div class="line" id="045219"><span class="nick" style="color:#2e2a4a"><a href="#045219" label="[04:52:19]">&lt;OriansJ&gt;</a></span><span class="message">So if they can compromise *EVERY* single hardware platform including those arbitrarily made by kids.</span></div><div class="line" id="045243"><span class="nick" style="color:#2e2a4a"><a href="#045243" label="[04:52:43]">&lt;OriansJ&gt;</a></span><span class="message">And *EVERY* single port of mescc-tools-seed *IDENTICALLY*</span></div><div class="line" id="045300"><span class="nick" style="color:#2e2a4a"><a href="#045300" label="[04:53:00]">&lt;OriansJ&gt;</a></span><span class="message">including those written by random college kids</span></div><div class="line" id="045313"><span class="nick" style="color:#6b8072"><a href="#045313" label="[04:53:13]">&lt;xentrac&gt;</a></span><span class="message">D</span></div><div class="line" id="045315"><span class="nick" style="color:#6b8072"><a href="#045315" label="[04:53:15]">&lt;xentrac&gt;</a></span><span class="message">:D</span></div><div class="line" id="045322"><span class="nick" style="color:#2e2a4a"><a href="#045322" label="[04:53:22]">&lt;OriansJ&gt;</a></span><span class="message">Then well fuck, I have no hope of stopping them.</span></div><div class="line" id="045345"><span class="nick" style="color:#2e2a4a"><a href="#045345" label="[04:53:45]">&lt;OriansJ&gt;</a></span><span class="message">but aside from that level of effort. I think we will be fine</span></div><div class="line" id="045511"><span class="nick" style="color:#2e2a4a"><a href="#045511" label="[04:55:11]">&lt;OriansJ&gt;</a></span><span class="message">If someone finds a solution to stopping that level of effort; let me know. Because I can only imagine a paper clip optimizer that might be able to achieve that level of compromise. (The AI that deleted a decade)</span></div><div class="line" id="045721"><span class="nick" style="color:#8dd3c7"><a href="#045721" label="[04:57:21]">&lt;siraben&gt;</a></span><span class="message">i'm certain that when finished this will be amazing, because it's certainly possible to have an impossibly small bootstrap to modern software but it's been lost over the decades</span></div><div class="line" id="045905"><span class="nick" style="color:#6b8072"><a href="#045905" label="[04:59:05]">&lt;xentrac&gt;</a></span><span class="message">it sounds like we've maybe just hit a major important milestone</span></div><div class="line" id="045923"><span class="nick" style="color:#6b8072"><a href="#045923" label="[04:59:23]">&lt;xentrac&gt;</a></span><span class="message">357 bytes to GCC on (some variant of) amd64?</span></div><div class="line" id="050008"><span class="nick" style="color:#6b8072"><a href="#050008" label="[05:00:08]">&lt;xentrac&gt;</a></span><span class="message">the pieces are finally coming together after an enormous amount of effort by several people &lt;3</span></div><div class="line" id="050318"><span class="nick" style="color:#8dd3c7"><a href="#050318" label="[05:03:18]">&lt;siraben&gt;</a></span><span class="message">xentrac: oh what's the milestone? is it really done?</span></div><div class="line" id="050452"><span class="nick" style="color:#6b8072"><a href="#050452" label="[05:04:52]">&lt;xentrac&gt;</a></span><span class="message">I haven't tried it myself, but it sounded like yes:</span></div><div class="line" id="050635"><span class="nick" style="color:#6b8072"><a href="#050635" label="[05:06:35]">&lt;xentrac&gt;</a></span><span class="message">20:49 &lt; fossy&gt; so we actually do have a full path from 357 bytes to gcc, abliet a mildly complex one</span></div><div class="line" id="050638"><span class="nick" style="color:#6b8072"><a href="#050638" label="[05:06:38]">&lt;xentrac&gt;</a></span><span class="message">20:49 &lt; janneke&gt; but most of the credit goes to OriansJ and his marvellous m2-planet</span></div><div class="line" id="050641"><span class="nick" style="color:#6b8072"><a href="#050641" label="[05:06:41]">&lt;xentrac&gt;</a></span><span class="message">20:50 &lt; janneke&gt; yes</span></div><div class="line" id="050648"><span class="nick" style="color:#6b8072"><a href="#050648" label="[05:06:48]">&lt;xentrac&gt;</a></span><span class="message">20:57 &lt; mihi&gt; janneke, fossy: As far as I know the current guix &quot;boostrap&quot; cheats by using some shell and/or guile for orchestrating the</span></div><div class="line" id="050651"><span class="nick" style="color:#6b8072"><a href="#050651" label="[05:06:51]">&lt;xentrac&gt;</a></span><span class="message">              bootstrap. So technically, there is probably still some &quot;plumbing&quot; missing to get a full bootstrap that only uses kaem and</span></div><div class="line" id="050654"><span class="nick" style="color:#6b8072"><a href="#050654" label="[05:06:54]">&lt;xentrac&gt;</a></span><span class="message">              stage0.</span></div><div class="line" id="050657"><span class="nick" style="color:#6b8072"><a href="#050657" label="[05:06:57]">&lt;xentrac&gt;</a></span><span class="message">20:58 &lt; fossy&gt; mihi: the ideal goal for x86 would be from efi as you hashed out the other day</span></div><div class="line" id="050700"><span class="nick" style="color:#6b8072"><a href="#050700" label="[05:07:00]">&lt;xentrac&gt;</a></span><span class="message">...</span></div><div class="line" id="050702"><span class="nick" style="color:#6b8072"><a href="#050702" label="[05:07:02]">&lt;xentrac&gt;</a></span><span class="message">20:59 &lt; fossy&gt; but what I am trying to accomplish using live-bootstrap is basically that, the stage0, kaem and kernel seeds</span></div><div class="line" id="050705"><span class="nick" style="color:#6b8072"><a href="#050705" label="[05:07:05]">&lt;xentrac&gt;</a></span><span class="message">21:05 &lt; janneke&gt; mihi: that's right</span></div><div class="line" id="050708"><span class="nick" style="color:#8dd3c7"><a href="#050708" label="[05:07:08]">&lt;siraben&gt;</a></span><span class="message">ah ok that's enough context</span></div><div class="line" id="050713"><span class="nick" style="color:#8dd3c7"><a href="#050713" label="[05:07:13]">&lt;siraben&gt;</a></span><span class="message">i can grep the logs</span></div><div class="line" id="050722"><span class="nick" style="color:#6b8072"><a href="#050722" label="[05:07:22]">&lt;xentrac&gt;</a></span><span class="message">sorry</span></div><div class="line" id="050810"><span class="nick" style="color:#8dd3c7"><a href="#050810" label="[05:08:10]">&lt;siraben&gt;</a></span><span class="message">ok so the cheating part is the part to resolve</span></div><div class="line" id="051022"><span class="nick" style="color:#6b8072"><a href="#051022" label="[05:10:22]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="073451"><span class="nick" style="color:#80b1d3"><a href="#073451" label="[07:34:51]">&lt;senzilla&gt;</a></span><span class="message">OriansJ: Thanks for the explanation of Knight. I don't understand much from the PDF included in stage0, but guess you're aiming for simplicity with this architecture? Or is there another reason you couldn't go with RISC-V that's fully open source?</span></div><div class="line" id="081922"><span class="nick" style="color:#80b1d3"><a href="#081922" label="[08:19:22]">&lt;senzilla&gt;</a></span><span class="message">fossy: I'm curious about the path through EFI that you referred to earlier. Is part of the plan having a compiler that eventually run in an EFI environment as part of bootstrapping a more complete POSIX-like environment?</span></div><div class="line" id="084312"><span class="nick" style="color:#6d2462"><a href="#084312" label="[08:43:12]">&lt;fossy&gt;</a></span><span class="message">senzilla: yes a stage0 monitor in efi</span></div><div class="line" id="084320"><span class="nick" style="color:#6d2462"><a href="#084320" label="[08:43:20]">&lt;fossy&gt;</a></span><span class="message">then moving to full system</span></div><div class="line" id="092013"><span class="nick" style="color:#6b8072"><a href="#092013" label="[09:20:13]">&lt;xentrac&gt;</a></span><span class="message">senzilla: it's possible submarine patents will surface on RISC-V, as they have with H.264; that is less likely for a 40-year-old architecture.  the lawsuit would not take long to win</span></div><div class="line" id="092056"><span class="nick" style="color:#6b8072"><a href="#092056" label="[09:20:56]">&lt;xentrac&gt;</a></span><span class="message">and Knight has the advantage of having evidently been successfully implemented in discrete logic, in practice</span></div><div class="line" id="092132"><span class="nick" style="color:#6b8072"><a href="#092132" label="[09:21:32]">&lt;xentrac&gt;</a></span><span class="message">while that might turn out to be substantially more difficult with RISC-V, since that wasn't really one of its design objectives</span></div><div class="line" id="092247"><span class="nick" style="color:#6b8072"><a href="#092247" label="[09:22:47]">&lt;xentrac&gt;</a></span><span class="message">my personal opinion is that Knight is about 10x more complicated than something like the PDP-8/X or Wirth RISC, but theoretically better things that nobody's implemented a stage0 bootstrap for are not better in practice</span></div><div class="line" id="113355"><span class="nick" style="color:#2e2a4a"><a href="#113355" label="[11:33:55]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: also there is nothing stopping someone from porting a stage0 bootstrap to Wirth RISC or PDP-8/X except the desire to do so.</span></div><div class="line" id="113611"><span class="nick" style="color:#2e2a4a"><a href="#113611" label="[11:36:11]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: ultimately I want the list of supported architectures to grow to infinity but I have limited amounts of time and am forced to choose which pieces I can allocate time to.</span></div><div class="line" id="122119"><span class="nick" style="color:#2e2a4a"><a href="#122119" label="[12:21:19]">&lt;OriansJ&gt;</a></span><span class="message">heh, I managed to segfault gdb</span></div><div class="line" id="130450"><span class="nick" style="color:#80b1d3"><a href="#130450" label="[13:04:50]">&lt;senzilla&gt;</a></span><span class="message">I think the EDK2 UEFI environment has a Lua interpreter. Might be interesting to explore to write a C compiler in Lua, if one does not wanna write a C compiler in C using the EDK2 stdlibc</span></div><div class="line" id="131330"><span class="nick" style="color:#2e2a4a"><a href="#131330" label="[13:13:30]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: well writing a C compiler is actually pretty simple: <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86">https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86</a> </span></div><div class="line" id="131431"><span class="nick" style="color:#2e2a4a"><a href="#131431" label="[13:14:31]">&lt;OriansJ&gt;</a></span><span class="message">you break a stream of chars into tokens and then pattern match the tokens to generate the output assembly</span></div><div class="line" id="131510"><span class="nick" style="color:#2e2a4a"><a href="#131510" label="[13:15:10]">&lt;OriansJ&gt;</a></span><span class="message">toss in generating a list of types if you want to support structs too</span></div><div class="line" id="132223"><span class="nick" style="color:#80b1d3"><a href="#132223" label="[13:22:23]">&lt;senzilla&gt;</a></span><span class="message">Yeah, I've never really looked into writing a compiler before. But I suppose the challenge is getting it to compile something real and useful, and not just trivial example code. Like a compiler in EFI that can compile the Linux kernel and a POSIX shell or something.</span></div><div class="line" id="132506"><span class="nick" style="color:#80b1d3"><a href="#132506" label="[13:25:06]">&lt;senzilla&gt;</a></span><span class="message">It's probably easier to aim towards compiling BSD components, eg the OpenBSD kernel and their implementation of the Korn Shell, as they're a lot smaller and simpler, generally speaking</span></div><div class="line" id="133716"><span class="nick" style="color:#2e2a4a"><a href="#133716" label="[13:37:16]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: well useful in C is a pretty low bar once one supports structs and inline assembly</span></div><div class="line" id="133812"><span class="nick" style="color:#2e2a4a"><a href="#133812" label="[13:38:12]">&lt;OriansJ&gt;</a></span><span class="message">unless you think being able to bootstrap a Haskell compiler isn't a useful thing to do.</span></div><div class="line" id="133950"><span class="nick" style="color:#8dd3c7"><a href="#133950" label="[13:39:50]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I just ran a build of the original blynn-compiler again, noticed that it printed out timing information, should we have a script that also does this?</span></div><div class="line" id="133959"><span class="nick" style="color:#8dd3c7"><a href="#133959" label="[13:39:59]">&lt;siraben&gt;</a></span><span class="message">would be useful information to see if changes are improving/hurting performance</span></div><div class="line" id="134204"><span class="nick" style="color:#2e2a4a"><a href="#134204" label="[13:42:04]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well time -v would work when wrapping the steps</span></div><div class="line" id="134225"><span class="nick" style="color:#2e2a4a"><a href="#134225" label="[13:42:25]">&lt;OriansJ&gt;</a></span><span class="message">but that would require the time binary to be installed in people's paths</span></div><div class="line" id="134456"><span class="nick" style="color:#8dd3c7"><a href="#134456" label="[13:44:56]">&lt;siraben&gt;</a></span><span class="message">Right, just for testing, really</span></div><div class="line" id="141807"><span class="nick" style="color:#80b1d3"><a href="#141807" label="[14:18:07]">&lt;senzilla&gt;</a></span><span class="message">OriansJ: you make it sound so easy :D</span></div><div class="line" id="141932"><span class="nick" style="color:#8dd3c7"><a href="#141932" label="[14:19:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ: if you segfaulted gdb, time to use gdb to debug gdb!</span></div><div class="line" id="151443"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="172915"><span class="nick" style="color:#6b8072"><a href="#172915" label="[17:29:15]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: right!</span></div><div class="line" id="214837"><span class="nick">***</span><span class="message notice">wowaname is now known as opal</span></div><div class="line" id="234635"><span class="nick" style="color:#2e2a4a"><a href="#234635" label="[23:46:35]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: everything is easy that you know how to do. I've done my best to make the low level steps of the bootstrap only exercise hard and absolutely not math hard.</span></div><div class="line" id="235108"><span class="nick" style="color:#80b1d3"><a href="#235108" label="[23:51:08]">&lt;senzilla&gt;</a></span><span class="message">OriansJ: I definitely appreciate all the hard work by you and everyone else here :)</span></div><div class="line" id="235227"><span class="nick" style="color:#2e2a4a"><a href="#235227" label="[23:52:27]">&lt;OriansJ&gt;</a></span><span class="message">senzilla: it is a boatload of fun for me and we try to ensure everyone only does the work they enjoy if possible as the goals are a tad aggressive.</span></div><div class="line" id="235301"><span class="nick" style="color:#80b1d3"><a href="#235301" label="[23:53:01]">&lt;senzilla&gt;</a></span><span class="message">Being able to bootstrap a computer from something you can trust or easily inspect is such a fundamentally important thing</span></div><div class="line" id="235428"><span class="nick" style="color:#80b1d3"><a href="#235428" label="[23:54:28]">&lt;senzilla&gt;</a></span><span class="message">All other computing problems become trivial in comparison when you take a step back and think about bootstrapping :)</span></div><div class="line" id="235515"><span class="nick" style="color:#2e2a4a"><a href="#235515" label="[23:55:15]">&lt;OriansJ&gt;</a></span><span class="message">well; all major computer problems at their core are usually social rather than technical.</span></div><div class="line" id="235545"><span class="nick" style="color:#80b1d3"><a href="#235545" label="[23:55:45]">&lt;senzilla&gt;</a></span><span class="message">Yes, totally agree!</span></div><div class="line" id="235916"><span class="nick" style="color:#80b1d3"><a href="#235916" label="[23:59:16]">&lt;senzilla&gt;</a></span><span class="message">I've been toying a bit with the comments around EFI earlier... I think I might give it a try to port PCC (Portable C Compiler) to run in the EDK2 EFI shell.</span></div><br /></div></body></html>