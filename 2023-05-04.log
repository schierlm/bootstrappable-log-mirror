<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010841"><span class="nick" style="color:#389600"><a href="#010841" label="[01:08:41]">&lt;stikonas&gt;</a></span><span class="message">janneke: isn't this insufficient <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/riscv64/as.scm#L64">https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/riscv64/as.scm#L64</a> </span></div><div class="line" id="010859"><span class="nick" style="color:#389600"><a href="#010859" label="[01:08:59]">&lt;stikonas&gt;</a></span><span class="message">even if v is 0, it might not be no-op</span></div><div class="line" id="010918"><span class="nick" style="color:#389600"><a href="#010918" label="[01:09:18]">&lt;stikonas&gt;</a></span><span class="message">e.g. addi r0, r1, 0 copies r1 to r0</span></div><div class="line" id="011008"><span class="nick" style="color:#389600"><a href="#011008" label="[01:10:08]">&lt;stikonas&gt;</a></span><span class="message">this function is mostly used with r0 = r1 (but not always), so perhaps we are lucky not to hit any serious bug</span></div><div class="line" id="012626"><span class="nick" style="color:#389600"><a href="#012626" label="[01:26:26]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think if I use new defines that whole function would look a bit different anyway</span></div><div class="line" id="012639"><span class="nick" style="color:#389600"><a href="#012639" label="[01:26:39]">&lt;stikonas&gt;</a></span><span class="message">there is no need to special case 1 0 and -1...</span></div><div class="line" id="015203"><span class="nick" style="color:#389600"><a href="#015203" label="[01:52:03]">&lt;stikonas&gt;</a></span><span class="message">janneke: unless I'm very confused, current mes risc-v code would not work at all with mescc-tools</span></div><div class="line" id="015215"><span class="nick" style="color:#389600"><a href="#015215" label="[01:52:15]">&lt;stikonas&gt;</a></span><span class="message">it passes --architecture riscv to M1 and hex2</span></div><div class="line" id="015444"><span class="nick" style="color:#389600"><a href="#015444" label="[01:54:44]">&lt;stikonas&gt;</a></span><span class="message">but then uses % @ ! and &amp; $ as if they are standard immediate</span></div><div class="line" id="015546"><span class="nick" style="color:#389600"><a href="#015546" label="[01:55:46]">&lt;stikonas&gt;</a></span><span class="message">On risc-v M1 has different meanings for % @ !</span></div><div class="line" id="015554"><span class="nick" style="color:#389600"><a href="#015554" label="[01:55:54]">&lt;stikonas&gt;</a></span><span class="message">it's not 32-bit 16 bit or 8 bit immediate</span></div><div class="line" id="015622"><span class="nick" style="color:#389600"><a href="#015622" label="[01:56:22]">&lt;stikonas&gt;</a></span><span class="message">but rather specifies instruction type and appropriately mangles bits</span></div><div class="line" id="015705"><span class="nick" style="color:#389600"><a href="#015705" label="[01:57:05]">&lt;stikonas&gt;</a></span><span class="message">yep, it does seem like this is what is happening</span></div><div class="line" id="015726"><span class="nick" style="color:#389600"><a href="#015726" label="[01:57:26]">&lt;stikonas&gt;</a></span><span class="message">no way current wip-riscv branch could work</span></div><div class="line" id="020323"><span class="nick" style="color:#389600"><a href="#020323" label="[02:03:23]">&lt;stikonas&gt;</a></span><span class="message">I think it predates all that fixed word architecture work that oriansj did for hex2 and M1</span></div><div class="line" id="030551"><span class="nick" style="color:#8dd3c7"><a href="#030551" label="[03:05:51]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: %label and &amp;label are still 32bit relative and 32bit absolute values</span></div><div class="line" id="030637"><span class="nick" style="color:#2e2a4a"><a href="#030637" label="[03:06:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh yes. Still, other immediates are wrong</span></div><div class="line" id="030656"><span class="nick" style="color:#8dd3c7"><a href="#030656" label="[03:06:56]">&lt;oriansj&gt;</a></span><span class="message">@ is RISC-V B format; $ is RISC-V J format and ~ is RISC-V U format</span></div><div class="line" id="030739"><span class="nick" style="color:#2e2a4a"><a href="#030739" label="[03:07:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Though we have nothing to insert e.g. 32 bit value directly...</span></div><div class="line" id="030751"><span class="nick" style="color:#2e2a4a"><a href="#030751" label="[03:07:51]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. % in x86 term</span></div><div class="line" id="030831"><span class="nick" style="color:#8dd3c7"><a href="#030831" label="[03:08:31]">&lt;oriansj&gt;</a></span><span class="message">except with immediately followed by an integer and then it is: ! is RISC-V I format, @ is RISC-V S format and ~ is RISC-V U format</span></div><div class="line" id="030918"><span class="nick" style="color:#8dd3c7"><a href="#030918" label="[03:09:18]">&lt;oriansj&gt;</a></span><span class="message">well %0 and %-1 would certainly make sense in RISC-V</span></div><div class="line" id="031017"><span class="nick" style="color:#8dd3c7"><a href="#031017" label="[03:10:17]">&lt;oriansj&gt;</a></span><span class="message">as would &amp;label and %label1&gt;label2</span></div><div class="line" id="031114"><span class="nick" style="color:#2e2a4a"><a href="#031114" label="[03:11:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, but the way mes was loading immediates was store it inline in the code and load it</span></div><div class="line" id="031127"><span class="nick" style="color:#2e2a4a"><a href="#031127" label="[03:11:27]">&lt;stikonas[m]&gt;</a></span><span class="message">This M1 doesn't support</span></div><div class="line" id="031145"><span class="nick" style="color:#8dd3c7"><a href="#031145" label="[03:11:45]">&lt;oriansj&gt;</a></span><span class="message">well it could</span></div><div class="line" id="031221"><span class="nick" style="color:#2e2a4a"><a href="#031221" label="[03:12:21]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/riscv64/as.scm?h=wip-riscv#n71">https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/riscv64/as.scm?h=wip-riscv#n71</a> </span></div><div class="line" id="031229"><span class="nick" style="color:#8dd3c7"><a href="#031229" label="[03:12:29]">&lt;oriansj&gt;</a></span><span class="message">if we did something like jump 4; immediate; loadr R0 [PC-4]</span></div><div class="line" id="031242"><span class="nick" style="color:#2e2a4a"><a href="#031242" label="[03:12:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, but we need to add</span></div><div class="line" id="031310"><span class="nick" style="color:#2e2a4a"><a href="#031310" label="[03:13:10]">&lt;stikonas[m]&gt;</a></span><span class="message">There is no prefix right now that does not mangle bits</span></div><div class="line" id="031359"><span class="nick" style="color:#2e2a4a"><a href="#031359" label="[03:13:59]">&lt;stikonas[m]&gt;</a></span><span class="message">(immediate1 in mescc prefixes it with !)</span></div><div class="line" id="031501"><span class="nick" style="color:#2e2a4a"><a href="#031501" label="[03:15:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe unprefixes number could be used for this...</span></div><div class="line" id="031503"><span class="nick" style="color:#2e2a4a"><a href="#031503" label="[03:15:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm</span></div><div class="line" id="031518"><span class="nick" style="color:#2e2a4a"><a href="#031518" label="[03:15:18]">&lt;stikonas[m]&gt;</a></span><span class="message">*unprefixed</span></div><div class="line" id="031526"><span class="nick" style="color:#8dd3c7"><a href="#031526" label="[03:15:26]">&lt;oriansj&gt;</a></span><span class="message">well %immediate does no mangling</span></div><div class="line" id="031545"><span class="nick" style="color:#8dd3c7"><a href="#031545" label="[03:15:45]">&lt;oriansj&gt;</a></span><span class="message">it just writes 4 bytes in the appropriate endian order</span></div><div class="line" id="031616"><span class="nick" style="color:#2e2a4a"><a href="#031616" label="[03:16:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh indeed</span></div><div class="line" id="031635"><span class="nick" style="color:#2e2a4a"><a href="#031635" label="[03:16:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Missed that</span></div><div class="line" id="031641"><span class="nick" style="color:#2e2a4a"><a href="#031641" label="[03:16:41]">&lt;stikonas[m]&gt;</a></span><span class="message">That would be useful</span></div><div class="line" id="031901"><span class="nick" style="color:#8dd3c7"><a href="#031901" label="[03:19:01]">&lt;oriansj&gt;</a></span><span class="message">we could simplify that logic to only cover values that fit in I format and just use RD_A1 RS1_A0 !214 ADDI and if it is outside that range, jump over the immediate %value and do a relative load</span></div><div class="line" id="031950"><span class="nick" style="color:#8dd3c7"><a href="#031950" label="[03:19:50]">&lt;oriansj&gt;</a></span><span class="message">you can opt to later add more cases to make it more efficient</span></div><div class="line" id="070336"><span class="nick" style="color:#6b8072"><a href="#070336" label="[07:03:36]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: works for me: <a rel="nofollow" href="https://paste.debian.net/1279248/">https://paste.debian.net/1279248/</a> </span></div><div class="line" id="090131"><span class="nick" style="color:#6b8072"><a href="#090131" label="[09:01:31]">&lt;janneke&gt;</a></span><span class="message">(that's in qemu)</span></div><div class="line" id="095842"><span class="nick" style="color:#2e2a4a"><a href="#095842" label="[09:58:42]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: yes this works but mescc miscompiles</span></div><div class="line" id="100204"><span class="nick" style="color:#2e2a4a"><a href="#100204" label="[10:02:04]">&lt;stikonas[m]&gt;</a></span><span class="message">I've built crt1.s and crt1.o</span></div><div class="line" id="100204"><span class="nick" style="color:#2e2a4a"><a href="#100204" label="[10:02:04]">&lt;stikonas[m]&gt;</a></span><span class="message">And immediates look wrong</span></div><div class="line" id="100634"><span class="nick" style="color:#6b8072"><a href="#100634" label="[10:06:34]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: oh, bah!</span></div><div class="line" id="100651"><span class="nick" style="color:#6b8072"><a href="#100651" label="[10:06:51]">&lt;janneke&gt;</a></span><span class="message">thanks for looking at this!!</span></div><div class="line" id="102436"><span class="nick" style="color:#2e2a4a"><a href="#102436" label="[10:24:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Should be fixable but will need a bit of time</span></div><div class="line" id="102943"><span class="nick" style="color:#6b8072"><a href="#102943" label="[10:29:43]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: that would be great, no hurry</span></div><div class="line" id="103020"><span class="nick" style="color:#6b8072"><a href="#103020" label="[10:30:20]">&lt;janneke&gt;</a></span><span class="message">ACTION is still looking for a riscv machine running guix (or guix substitutes) anyway</span></div><div class="line" id="110747"><span class="nick" style="color:#2e2a4a"><a href="#110747" label="[11:07:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I have no riscv hardware either...</span></div><div class="line" id="131715"><span class="nick" style="color:#8dd3c7"><a href="#131715" label="[13:17:15]">&lt;oriansj&gt;</a></span><span class="message">I guess I could write up a gentoo setup procedure for RISC-V which would get you to a state capable of doing that development.</span></div><div class="line" id="134940"><span class="nick" style="color:#2e2a4a"><a href="#134940" label="[13:49:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Qemu userspace emulation gets me most of the way there already... Not sure about janneke though</span></div><div class="line" id="135340"><span class="nick" style="color:#8dd3c7"><a href="#135340" label="[13:53:40]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: Guix doesn't have qemu userspace so.... yeah</span></div><div class="line" id="142125"><span class="nick" style="color:#6b8072"><a href="#142125" label="[14:21:25]">&lt;janneke&gt;</a></span><span class="message">ah nice</span></div><div class="line" id="142204"><span class="nick" style="color:#6b8072"><a href="#142204" label="[14:22:04]">&lt;janneke&gt;</a></span><span class="message">i'm using qemu-binfmt a server, but didn't want to rebuild world when someone's got substitutes available</span></div><div class="line" id="142242"><span class="nick" style="color:#6b8072"><a href="#142242" label="[14:22:42]">&lt;janneke&gt;</a></span><span class="message">esp. because off correctness, i had quite some litts problems there with arm</span></div><div class="line" id="142257"><span class="nick" style="color:#80b1d3"><a href="#142257" label="[14:22:57]">&lt;muurkha&gt;</a></span><span class="message">using it a server?</span></div><div class="line" id="142458"><span class="nick" style="color:#2e2a4a"><a href="#142458" label="[14:24:58]">&lt;stikonas[m]&gt;</a></span><span class="message">We had one small issue with riscv on qemu that triggered but in real hw. qemu zeroed all registers on start which real hw didn't. But that's the only difference</span></div><div class="line" id="143031"><span class="nick" style="color:#6b8072"><a href="#143031" label="[14:30:31]">&lt;janneke&gt;</a></span><span class="message">nice</span></div><div class="line" id="143106"><span class="nick" style="color:#6b8072"><a href="#143106" label="[14:31:06]">&lt;janneke&gt;</a></span><span class="message">*i'm using a qemu-binfmt service</span></div><div class="line" id="143408"><span class="nick" style="color:#80b1d3"><a href="#143408" label="[14:34:08]">&lt;muurkha&gt;</a></span><span class="message">service?  Do you mean like a daemon or more like a company you pay?</span></div><div class="line" id="143536"><span class="nick" style="color:#2e2a4a"><a href="#143536" label="[14:35:36]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not a daemon, it's just one off configuration of kernel</span></div><div class="line" id="143546"><span class="nick" style="color:#2e2a4a"><a href="#143546" label="[14:35:46]">&lt;stikonas[m]&gt;</a></span><span class="message">It doesn't keep running</span></div><div class="line" id="143621"><span class="nick" style="color:#2e2a4a"><a href="#143621" label="[14:36:21]">&lt;stikonas[m]&gt;</a></span><span class="message">That's basically the same thing I have</span></div><div class="line" id="143821"><span class="nick" style="color:#6b8072"><a href="#143821" label="[14:38:21]">&lt;janneke&gt;</a></span><span class="message">muurkha: <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/Virtualization-Services.html#index-qemu_002dbinfmt_002dservice_002dtype">https://guix.gnu.org/manual/en/html_node/Virtualization-Services.html#index-qemu_002dbinfmt_002dservice_002dtype</a> </span></div><div class="line" id="144027"><span class="nick" style="color:#80b1d3"><a href="#144027" label="[14:40:27]">&lt;muurkha&gt;</a></span><span class="message">I see, thanks!</span></div><div class="line" id="145302"><span class="nick" style="color:#6d2462"><a href="#145302" label="[14:53:02]">&lt;roconnor&gt;</a></span><span class="message">janneke: where can I find binutils-boot-2.20.1a.patch ?</span></div><div class="line" id="145807"><span class="nick" style="color:#6b8072"><a href="#145807" label="[14:58:07]">&lt;janneke&gt;</a></span><span class="message">roconnor: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/patches/binutils-boot-2.20.1a.patch">https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/patches/binutils-boot-2.20.1a.patch</a> </span></div><div class="line" id="150302"><span class="nick" style="color:#2e2a4a"><a href="#150302" label="[15:03:02]">&lt;stikonas[m]&gt;</a></span><span class="message">That's way bigger patch than what live-boitstrap has for binutils 2.30...</span></div><div class="line" id="150318"><span class="nick" style="color:#2e2a4a"><a href="#150318" label="[15:03:18]">&lt;stikonas[m]&gt;</a></span><span class="message">But perhaps that's due to musl libc</span></div><div class="line" id="150404"><span class="nick" style="color:#2e2a4a"><a href="#150404" label="[15:04:04]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/tree/master/sysa/binutils-2.30/patches">https://github.com/fosslinux/live-bootstrap/tree/master/sysa/binutils-2.30/patches</a> </span></div><div class="line" id="150425"><span class="nick" style="color:#2e2a4a"><a href="#150425" label="[15:04:25]">&lt;stikonas[m]&gt;</a></span><span class="message">We only patch configure.ac and Makefile.am there</span></div><div class="line" id="150604"><span class="nick" style="color:#234e69"><a href="#150604" label="[15:06:04]">&lt;aggi&gt;</a></span><span class="message">the dependency graph, for autotools/perl is somewhat problematic, that much, i rather avoided those entirely</span></div><div class="line" id="150634"><span class="nick" style="color:#234e69"><a href="#150634" label="[15:06:34]">&lt;aggi&gt;</a></span><span class="message">which is possible, with a tcc-toolchain-only system, as an alternative option, for some specific *nix niche</span></div><div class="line" id="150759"><span class="nick" style="color:#2e2a4a"><a href="#150759" label="[15:07:59]">&lt;stikonas[m]&gt;</a></span><span class="message">Binutils does use autotools though</span></div><div class="line" id="150810"><span class="nick" style="color:#234e69"><a href="#150810" label="[15:08:10]">&lt;aggi&gt;</a></span><span class="message">that's the plan, already got some devdrop, of a 99% tcc-toolchain only compiled system, and it booted, and x86_64 (no problem to back down to x86_32 either)</span></div><div class="line" id="150821"><span class="nick" style="color:#2e2a4a"><a href="#150821" label="[15:08:21]">&lt;stikonas[m]&gt;</a></span><span class="message">So if you want them then you Ned autotools</span></div><div class="line" id="150838"><span class="nick" style="color:#234e69"><a href="#150838" label="[15:08:38]">&lt;aggi&gt;</a></span><span class="message">yes stikonas[m], that's why. oasis-linux, re-implemented the binutils buildsystem completely, with their custom lua-based scripting</span></div><div class="line" id="150915"><span class="nick" style="color:#234e69"><a href="#150915" label="[15:09:15]">&lt;aggi&gt;</a></span><span class="message">lua, last time i reviewed it, was much easier to cross/compile, than perl for example</span></div><div class="line" id="150954"><span class="nick" style="color:#234e69"><a href="#150954" label="[15:09:54]">&lt;aggi&gt;</a></span><span class="message">i am not opposed to autotools/perl/gnu itself, i think however, an alternative is necessary, to avoid those, not because of GPL licence, because of technical reasons</span></div><div class="line" id="151006"><span class="nick" style="color:#234e69"><a href="#151006" label="[15:10:06]">&lt;aggi&gt;</a></span><span class="message">*license</span></div><div class="line" id="151037"><span class="nick" style="color:#234e69"><a href="#151037" label="[15:10:37]">&lt;aggi&gt;</a></span><span class="message">because, i think, GNU, got quality issues, rather severe, and the bootstrapping ones, are some of those</span></div><div class="line" id="151059"><span class="nick" style="color:#234e69"><a href="#151059" label="[15:10:59]">&lt;aggi&gt;</a></span><span class="message">with autotools involved, the cure seems worse than the disease it was intended for to cure</span></div><div class="line" id="151128"><span class="nick" style="color:#234e69"><a href="#151128" label="[15:11:28]">&lt;aggi&gt;</a></span><span class="message">strangely, there was some blameshift onto GNU/GPL, although the bootstrapping and quality issues, originated elsewhere</span></div><div class="line" id="151132"><span class="nick" style="color:#6d2462"><a href="#151132" label="[15:11:32]">&lt;roconnor&gt;</a></span><span class="message">guix builds binutils-mesboot0 without autotools?</span></div><div class="line" id="151146"><span class="nick" style="color:#2e2a4a"><a href="#151146" label="[15:11:46]">&lt;stikonas[m]&gt;</a></span><span class="message">It can't rebuild everything in binutils</span></div><div class="line" id="151212"><span class="nick" style="color:#2e2a4a"><a href="#151212" label="[15:12:12]">&lt;stikonas[m]&gt;</a></span><span class="message">I just checked, that lua system does not rebuild bison/lex files</span></div><div class="line" id="151223"><span class="nick" style="color:#2e2a4a"><a href="#151223" label="[15:12:23]">&lt;stikonas[m]&gt;</a></span><span class="message">It's small, I agree with that</span></div><div class="line" id="151258"><span class="nick" style="color:#6d2462"><a href="#151258" label="[15:12:58]">&lt;roconnor&gt;</a></span><span class="message">I guess guix calls configure directly without deleting it.</span></div><div class="line" id="151312"><span class="nick" style="color:#2e2a4a"><a href="#151312" label="[15:13:12]">&lt;stikonas[m]&gt;</a></span><span class="message">But need more manual commands if you need to rebuild some generated c files</span></div><div class="line" id="151315"><span class="nick" style="color:#2e2a4a"><a href="#151315" label="[15:13:15]">&lt;stikonas[m]&gt;</a></span><span class="message">roconnor: indeed</span></div><div class="line" id="151341"><span class="nick" style="color:#2e2a4a"><a href="#151341" label="[15:13:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Guix has not implemented autotools bootstrap</span></div><div class="line" id="151402"><span class="nick" style="color:#2e2a4a"><a href="#151402" label="[15:14:02]">&lt;stikonas[m]&gt;</a></span><span class="message">That is quite a bit trickier...</span></div><div class="line" id="151430"><span class="nick" style="color:#234e69"><a href="#151430" label="[15:14:30]">&lt;aggi&gt;</a></span><span class="message">if tcc-toolchain, was capable, to fully replace binutils-asm, this would be a highly desireable alternative to have available</span></div><div class="line" id="151432"><span class="nick" style="color:#2e2a4a"><a href="#151432" label="[15:14:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Need to bootstrap perl first for that</span></div><div class="line" id="151508"><span class="nick" style="color:#234e69"><a href="#151508" label="[15:15:08]">&lt;aggi&gt;</a></span><span class="message">if i succeed with tcc-only for kernel/asm-parts/libc which is missing still, then this is where i will stop, and not bother with binutils bootstrapping/cross/compile</span></div><div class="line" id="151553"><span class="nick" style="color:#234e69"><a href="#151553" label="[15:15:53]">&lt;aggi&gt;</a></span><span class="message">i mean, it is important, to have a clean bootstrapping path for the _entire_ GNU, and it is too extremely important, to have have an alternative to autotools/perl/etc</span></div><div class="line" id="151622"><span class="nick" style="color:#2e2a4a"><a href="#151622" label="[15:16:22]">&lt;stikonas[m]&gt;</a></span><span class="message">aggi: well, if tcx is sufficient for you then why not</span></div><div class="line" id="151633"><span class="nick" style="color:#234e69"><a href="#151633" label="[15:16:33]">&lt;aggi&gt;</a></span><span class="message">i tracked a huge dependency graph, against autotools/binutils/gcc already, and almost all of it can be avoided</span></div><div class="line" id="151636"><span class="nick" style="color:#2e2a4a"><a href="#151636" label="[15:16:36]">&lt;stikonas[m]&gt;</a></span><span class="message">But tcc, can't build lots of stuff...</span></div><div class="line" id="151657"><span class="nick" style="color:#234e69"><a href="#151657" label="[15:16:57]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: tcc, can compile/assemble/link almost _everything_</span></div><div class="line" id="151703"><span class="nick" style="color:#2e2a4a"><a href="#151703" label="[15:17:03]">&lt;stikonas[m]&gt;</a></span><span class="message">It's only a small C compiler</span></div><div class="line" id="151721"><span class="nick" style="color:#2e2a4a"><a href="#151721" label="[15:17:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, yes we use tcc a lot</span></div><div class="line" id="151739"><span class="nick" style="color:#234e69"><a href="#151739" label="[15:17:39]">&lt;aggi&gt;</a></span><span class="message">linux-2.4-x86-tcc/tccboot, that's some missing piece at the frontline i was fighting at, and some minor musl-libc-asm parts, which bootstrappable reported were patched already for tcc</span></div><div class="line" id="151742"><span class="nick" style="color:#2e2a4a"><a href="#151742" label="[15:17:42]">&lt;stikonas[m]&gt;</a></span><span class="message">But once you need C++ or other things, e.g. rust</span></div><div class="line" id="151805"><span class="nick" style="color:#234e69"><a href="#151805" label="[15:18:05]">&lt;aggi&gt;</a></span><span class="message">i did cleanup the entire profile here already, to avoid _all_ c++ dependencies</span></div><div class="line" id="151805"><span class="nick" style="color:#2e2a4a"><a href="#151805" label="[15:18:05]">&lt;stikonas[m]&gt;</a></span><span class="message">then tcc won't be sufficient</span></div><div class="line" id="151851"><span class="nick" style="color:#234e69"><a href="#151851" label="[15:18:51]">&lt;aggi&gt;</a></span><span class="message">well, tcc was one motivation, to do it, and guess when ignoring the autotools/perl issue, i even got mplayer/libsdl and various stuff recovered, from the gentoo-archives from 10 years ago</span></div><div class="line" id="151912"><span class="nick" style="color:#234e69"><a href="#151912" label="[15:19:12]">&lt;aggi&gt;</a></span><span class="message">i mean, that's outside the scope of bootstrappable, but it is feasible, to arrive at this level of software-complexity</span></div><div class="line" id="151917"><span class="nick" style="color:#234e69"><a href="#151917" label="[15:19:17]">&lt;aggi&gt;</a></span><span class="message">with tcc-toolchain</span></div><div class="line" id="151919"><span class="nick" style="color:#234e69"><a href="#151919" label="[15:19:19]">&lt;aggi&gt;</a></span><span class="message">no-c++</span></div><div class="line" id="151952"><span class="nick" style="color:#2e2a4a"><a href="#151952" label="[15:19:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, it indeed can build most of the low level stuff</span></div><div class="line" id="152014"><span class="nick" style="color:#234e69"><a href="#152014" label="[15:20:14]">&lt;aggi&gt;</a></span><span class="message">and mutt mailer, catgirl irc client, a shell, lua-interpreter...</span></div><div class="line" id="152016"><span class="nick" style="color:#2e2a4a"><a href="#152016" label="[15:20:16]">&lt;stikonas[m]&gt;</a></span><span class="message">But then forget about GUI or browsers, etc...</span></div><div class="line" id="152032"><span class="nick" style="color:#234e69"><a href="#152032" label="[15:20:32]">&lt;aggi&gt;</a></span><span class="message">well, i do see a chance for w3m to survive, with sixel graphics support</span></div><div class="line" id="152106"><span class="nick" style="color:#234e69"><a href="#152106" label="[15:21:06]">&lt;aggi&gt;</a></span><span class="message">dvtm terminal multiplexer (see suckless.org), was easy with tcc, yaft for sixel buffer below... it is feasible</span></div><div class="line" id="152119"><span class="nick" style="color:#234e69"><a href="#152119" label="[15:21:19]">&lt;aggi&gt;</a></span><span class="message">however, tcc-emitted binaries, are notable slower, than gcc -Os optimized ones</span></div><div class="line" id="152125"><span class="nick" style="color:#234e69"><a href="#152125" label="[15:21:25]">&lt;aggi&gt;</a></span><span class="message">*notably</span></div><div class="line" id="152154"><span class="nick" style="color:#234e69"><a href="#152154" label="[15:21:54]">&lt;aggi&gt;</a></span><span class="message">interestingly, Bellard did optimize some ffmpeg/mplayer parts for MMX... so this may not be hit that severe</span></div><div class="line" id="152227"><span class="nick" style="color:#234e69"><a href="#152227" label="[15:22:27]">&lt;aggi&gt;</a></span><span class="message">that's the rationale behind what i did, in the last years</span></div><div class="line" id="152257"><span class="nick" style="color:#234e69"><a href="#152257" label="[15:22:57]">&lt;aggi&gt;</a></span><span class="message">to recover a useful free software stack, which passes minimum acceptance criteria, including clean bootstrapping</span></div><div class="line" id="152303"><span class="nick" style="color:#234e69"><a href="#152303" label="[15:23:03]">&lt;aggi&gt;</a></span><span class="message">that's why, i joined here</span></div><div class="line" id="152415"><span class="nick" style="color:#2e2a4a"><a href="#152415" label="[15:24:15]">&lt;stikonas[m]&gt;</a></span><span class="message">tcc binaries being slower than gcc -Os is expected</span></div><div class="line" id="152436"><span class="nick" style="color:#2e2a4a"><a href="#152436" label="[15:24:36]">&lt;stikonas[m]&gt;</a></span><span class="message">You can at best compare it with gcc -O0</span></div><div class="line" id="152455"><span class="nick" style="color:#2e2a4a"><a href="#152455" label="[15:24:55]">&lt;stikonas[m]&gt;</a></span><span class="message">-Os would have optimisations enabled</span></div><div class="line" id="152527"><span class="nick" style="color:#234e69"><a href="#152527" label="[15:25:27]">&lt;aggi&gt;</a></span><span class="message">i tried to say, gcc optimization, are decent, and relevant, but i am willing to sacrifice those, for a tiny software niche, i consider more important, for my realm of things</span></div><div class="line" id="152634"><span class="nick" style="color:#234e69"><a href="#152634" label="[15:26:34]">&lt;aggi&gt;</a></span><span class="message">gcc-toolchain, is powerful, but it doesn't fit into use-case and acceptance criteria, which tcc may, if it can replace gcc/binutils 100%</span></div><div class="line" id="152709"><span class="nick" style="color:#234e69"><a href="#152709" label="[15:27:09]">&lt;aggi&gt;</a></span><span class="message">among OpenBSD, they tried with pcc, which doesn't contain asm/linker etc... and this was difficult enough, year 2007</span></div><div class="line" id="152722"><span class="nick" style="color:#234e69"><a href="#152722" label="[15:27:22]">&lt;aggi&gt;</a></span><span class="message">in comparison, that's when you realize, how powerful and important tcc is</span></div><div class="line" id="152752"><span class="nick" style="color:#234e69"><a href="#152752" label="[15:27:52]">&lt;aggi&gt;</a></span><span class="message">i am a little worried, about recent versions of it</span></div><div class="line" id="152805"><span class="nick" style="color:#234e69"><a href="#152805" label="[15:28:05]">&lt;aggi&gt;</a></span><span class="message">i got a little sick recently, didn't continue any longer</span></div><div class="line" id="152830"><span class="nick" style="color:#234e69"><a href="#152830" label="[15:28:30]">&lt;aggi&gt;</a></span><span class="message">most recent tcc-versions, require libc-stuff, which earlier versions didn't... that's important, to be aware of</span></div><div class="line" id="152857"><span class="nick" style="color:#234e69"><a href="#152857" label="[15:28:57]">&lt;aggi&gt;</a></span><span class="message">tccboot, and related problems, that's too important, to review, and verify, what went wrong, and why, with linux kernel</span></div><div class="line" id="152938"><span class="nick" style="color:#234e69"><a href="#152938" label="[15:29:38]">&lt;aggi&gt;</a></span><span class="message">because, i think it is not possible, to survive with fiwix and limited hardware support, it's both an advantage, and too problematic if you haven't got usb, but needed it</span></div><div class="line" id="153035"><span class="nick" style="color:#234e69"><a href="#153035" label="[15:30:35]">&lt;aggi&gt;</a></span><span class="message">if Bellard had answered to my mail, i had wanted to ask too, what he thinks, about recent changes to his compiler, adding complexity and libc-dependencies, which his version didn't have</span></div><div class="line" id="153141"><span class="nick" style="color:#234e69"><a href="#153141" label="[15:31:41]">&lt;aggi&gt;</a></span><span class="message">and i think, for bootstrapping, the riscv-64 and aarch64 support are irelevant, for other reasons (u-boot related, which locked against c++ dependencies/python-swig)</span></div><div class="line" id="153224"><span class="nick" style="color:#234e69"><a href="#153224" label="[15:32:24]">&lt;aggi&gt;</a></span><span class="message">so, you couldn't easily bootstrap a firmware/bootloader for riscv-64 or aarch32/64 almost always, without c++/python/swig creeping into... i won't accept this, for the niche i am interested in</span></div><div class="line" id="153414"><span class="nick" style="color:#2e2a4a"><a href="#153414" label="[15:34:14]">&lt;stikonas[m]&gt;</a></span><span class="message">But that's not portable...</span></div><div class="line" id="153414"><span class="nick" style="color:#2e2a4a"><a href="#153414" label="[15:34:14]">&lt;stikonas[m]&gt;</a></span><span class="message">How did earlier version of tcc work without libc?</span></div><div class="line" id="153414"><span class="nick" style="color:#2e2a4a"><a href="#153414" label="[15:34:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Did it just call raw syscalls?</span></div><div class="line" id="153508"><span class="nick" style="color:#2e2a4a"><a href="#153508" label="[15:35:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Even M2-Planet uses simple C library</span></div><div class="line" id="153510"><span class="nick" style="color:#2e2a4a"><a href="#153510" label="[15:35:10]">&lt;stikonas[m]&gt;</a></span><span class="message">(M2libc)</span></div><div class="line" id="153511"><span class="nick" style="color:#234e69"><a href="#153511" label="[15:35:11]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: don't quote me, it seemed, tcc shipped required headers and functions itself, without the need to link against any libc.a... correct me if i'm wrong</span></div><div class="line" id="153552"><span class="nick" style="color:#234e69"><a href="#153552" label="[15:35:52]">&lt;aggi&gt;</a></span><span class="message">i did review several versions of tcc, and with tccboot, earlier versions didn't require any libc at all (tccboot is different to tcc-compiler)</span></div><div class="line" id="153818"><span class="nick" style="color:#234e69"><a href="#153818" label="[15:38:18]">&lt;aggi&gt;</a></span><span class="message">it was just a coincidence, to see later versions of tcc, did more heavily lock against libc-stuff, mainly related to 64bit/aarch64/riscv64 it seems</span></div><div class="line" id="153917"><span class="nick" style="color:#234e69"><a href="#153917" label="[15:39:17]">&lt;aggi&gt;</a></span><span class="message">and i had raised this question before, which version of tcc-toolchain i should stick to: tccboot, linux-2.4, bootstrappable, and the c-only software-profile i collected</span></div><div class="line" id="154030"><span class="nick" style="color:#234e69"><a href="#154030" label="[15:40:30]">&lt;aggi&gt;</a></span><span class="message">two years ago, i just picked some (buggy) git-HEAD of tcc, patches some stuff myself, and used that; i'll probably roll-back with tcc itself too</span></div><div class="line" id="154100"><span class="nick" style="color:#234e69"><a href="#154100" label="[15:41:00]">&lt;aggi&gt;</a></span><span class="message">0.9.25...seyko2-changes some place, if this is clean and doesn't require additional libc-linking for tccboot-loader</span></div><div class="line" id="183823"><span class="nick" style="color:#2e2a4a"><a href="#183823" label="[18:38:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, that's not too  surprising regarding libc. Like I said you can't write portable code without libc. libc is the place where platform abstractions go</span></div><div class="line" id="183854"><span class="nick" style="color:#2e2a4a"><a href="#183854" label="[18:38:54]">&lt;stikonas[m]&gt;</a></span><span class="message">So once you want to have more than 1 os or isa, you need libc</span></div><div class="line" id="184436"><span class="nick" style="color:#8dd3c7"><a href="#184436" label="[18:44:36]">&lt;oriansj&gt;</a></span><span class="message">aggi: well requiring a libc isn't a problem if one only uses 6 syscalls and a couple simple libc functions. Heck M2libc supports much more than that</span></div><div class="line" id="184847"><span class="nick" style="color:#8dd3c7"><a href="#184847" label="[18:48:47]">&lt;oriansj&gt;</a></span><span class="message">and that is entirely for supporting the tools other than M2-Planet</span></div><div class="line" id="184948"><span class="nick" style="color:#8dd3c7"><a href="#184948" label="[18:49:48]">&lt;oriansj&gt;</a></span><span class="message">give me fopen, chmod, fgetc and fputc and I'll bootstrap the world</span></div><div class="line" id="185029"><span class="nick" style="color:#8dd3c7"><a href="#185029" label="[18:50:29]">&lt;oriansj&gt;</a></span><span class="message">fseek, fclose and everything else are just nice extras</span></div><div class="line" id="185049"><span class="nick" style="color:#6c3d55"><a href="#185049" label="[18:50:49]">&lt;probie&gt;</a></span><span class="message">Don't you need some sort of exec in there?</span></div><div class="line" id="185123"><span class="nick" style="color:#8dd3c7"><a href="#185123" label="[18:51:23]">&lt;oriansj&gt;</a></span><span class="message">probie: the Compiler doesn't need to exec anything. Only a shell would</span></div><div class="line" id="185323"><span class="nick" style="color:#8dd3c7"><a href="#185323" label="[18:53:23]">&lt;oriansj&gt;</a></span><span class="message">and then we would be talking about the libc requirements of the tools you want to build and what compilers support the constructs in those libc implementations.</span></div><div class="line" id="185930"><span class="nick" style="color:#6c3d55"><a href="#185930" label="[18:59:30]">&lt;probie&gt;</a></span><span class="message">I guess I'm thinking about a scenario that's not really worth thinking about - that you want to build a system by booting into it (so the start of your bootstrap process and the only binary is at /sbin/init)</span></div><div class="line" id="195016"><span class="nick" style="color:#80b1d3"><a href="#195016" label="[19:50:16]">&lt;muurkha&gt;</a></span><span class="message">probie: I think that's quite reasonable; in a sense that's how tccboot works, and there are also some Forth systems that have booted up that way</span></div><div class="line" id="195149"><span class="nick" style="color:#80b1d3"><a href="#195149" label="[19:51:49]">&lt;muurkha&gt;</a></span><span class="message">stikonas: you can provide the same syscall interface on more than one platform; WSL1, FreeBSD, and Linux all support the same Linux syscall interface</span></div><div class="line" id="195239"><span class="nick" style="color:#389600"><a href="#195239" label="[19:52:39]">&lt;stikonas&gt;</a></span><span class="message">but even Linux does not provide the same syscall interface for x86 and x86_64</span></div><div class="line" id="195239"><span class="nick" style="color:#80b1d3"><a href="#195239" label="[19:52:39]">&lt;muurkha&gt;</a></span><span class="message">so a program like qfitzah or stoneknifeforth built for that interface without libc can be expected to run on all three</span></div><div class="line" id="195347"><span class="nick" style="color:#80b1d3"><a href="#195347" label="[19:53:47]">&lt;muurkha&gt;</a></span><span class="message">well, it sort of does; stoneknifeforth, httpdito, and I think qfitzah are written for i386, but they run fine on this amd64 Linux box</span></div><div class="line" id="195419"><span class="nick" style="color:#80b1d3"><a href="#195419" label="[19:54:19]">&lt;muurkha&gt;</a></span><span class="message">but it's true that Linux *also* supports an amd64-specific syscall interface on here, which is necessarily different; it isn't even clear what it would mean for it to be the same</span></div><div class="line" id="195456"><span class="nick" style="color:#80b1d3"><a href="#195456" label="[19:54:56]">&lt;muurkha&gt;</a></span><span class="message">you can't, for example, put the same arguments in the same registers, because those registers don't exist in some cases, and in any case are too small</span></div><div class="line" id="195528"><span class="nick" style="color:#80b1d3"><a href="#195528" label="[19:55:28]">&lt;muurkha&gt;</a></span><span class="message">(I think; I might be confused)</span></div><div class="line" id="195749"><span class="nick" style="color:#389600"><a href="#195749" label="[19:57:49]">&lt;stikonas&gt;</a></span><span class="message">ok, but still, riscv64 has completetly different syscall numbers from amd64</span></div><div class="line" id="195808"><span class="nick" style="color:#389600"><a href="#195808" label="[19:58:08]">&lt;stikonas&gt;</a></span><span class="message">and not even the same set of syscalls</span></div><br /></div></body></html>