<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004141"><span class="nick" style="color:#8dd3c7"><a href="#004141" label="[00:41:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no I did not do further testing on the qemu performance issue yet to replicate your results on other architectures but it does look promising enough to explore and implement accordingly.</span></div><div class="line" id="004313"><span class="nick" style="color:#8dd3c7"><a href="#004313" label="[00:43:13]">&lt;oriansj&gt;</a></span><span class="message">also the upstream blynn-compiler seems to be doing some impressive changes (which would require a rebase and work to restore the M2-Planet bootstrap path) which with hope might solve our Haskell bootstrap problem.</span></div><div class="line" id="004417"><span class="nick" style="color:#2e2a4a"><a href="#004417" label="[00:44:17]">&lt;stikonas&gt;</a></span><span class="message">well, I basically can reproduce that slow issue with all early binaries</span></div><div class="line" id="004427"><span class="nick" style="color:#2e2a4a"><a href="#004427" label="[00:44:27]">&lt;stikonas&gt;</a></span><span class="message">late binaries seem to work fine</span></div><div class="line" id="004438"><span class="nick" style="color:#2e2a4a"><a href="#004438" label="[00:44:38]">&lt;stikonas&gt;</a></span><span class="message">possibly due to them having section headers</span></div><div class="line" id="005634"><span class="nick" style="color:#6b8072"><a href="#005634" label="[00:56:34]">&lt;fossy&gt;</a></span><span class="message">theruran: What is vau expressions</span></div><div class="line" id="005636"><span class="nick" style="color:#6b8072"><a href="#005636" label="[00:56:36]">&lt;fossy&gt;</a></span><span class="message">anyway we dont want to he locked to any specific kernel</span></div><div class="line" id="010549"><span class="nick" style="color:#2e2a4a"><a href="#010549" label="[01:05:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: I went over your PR now</span></div><div class="line" id="010607"><span class="nick" style="color:#2e2a4a"><a href="#010607" label="[01:06:07]">&lt;stikonas&gt;</a></span><span class="message">although I did that commit by commit</span></div><div class="line" id="010629"><span class="nick" style="color:#2e2a4a"><a href="#010629" label="[01:06:29]">&lt;stikonas&gt;</a></span><span class="message">and I think some issues are already fixed</span></div><div class="line" id="010758"><span class="nick" style="color:#2e2a4a"><a href="#010758" label="[01:07:58]">&lt;stikonas&gt;</a></span><span class="message">fossy: I think by kernel theruran means <a rel="nofollow" href="http://web.cs.wpi.edu/~jshutt/kernel.html">http://web.cs.wpi.edu/~jshutt/kernel.html</a> </span></div><div class="line" id="010804"><span class="nick" style="color:#2e2a4a"><a href="#010804" label="[01:08:04]">&lt;stikonas&gt;</a></span><span class="message">so not really OS kernel</span></div><div class="line" id="010831"><span class="nick" style="color:#2e2a4a"><a href="#010831" label="[01:08:31]">&lt;stikonas&gt;</a></span><span class="message">I guess somewhat confusingly named programming language</span></div><div class="line" id="012007"><span class="nick" style="color:#6b8072"><a href="#012007" label="[01:20:07]">&lt;fossy&gt;</a></span><span class="message">stikonas: thanks for the review. Yes some of them are already fixed in newer commits :)</span></div><div class="line" id="063731"><span class="nick" style="color:#80b1d3"><a href="#063731" label="[06:37:31]">&lt;theruran&gt;</a></span><span class="message">fossy: mm.. vau expressions let you decide exactly when/where to evaluate an expression. Kernel does not have macros in the Scheme sense. vau expressions are a simpler construct that macros and would let you write lazy/eager code easily</span></div><div class="line" id="063742"><span class="nick" style="color:#80b1d3"><a href="#063742" label="[06:37:42]">&lt;theruran&gt;</a></span><span class="message">than*</span></div><div class="line" id="063902"><span class="nick" style="color:#6d2462"><a href="#063902" label="[06:39:02]">&lt;xentrac&gt;</a></span><span class="message">I think which is simpler depends on which sense of &quot;simpler&quot; you mean</span></div><div class="line" id="065425"><span class="nick" style="color:#234e69"><a href="#065425" label="[06:54:25]">&lt;janneke&gt;</a></span><span class="message">theruran: about __raise; that's weird i'd need more info to look into that.  there are some __raise related patches on wip-m2 that you could try, have you tried the wip-m2 branch (soon to be merged)?</span></div><div class="line" id="065559"><span class="nick" style="color:#234e69"><a href="#065559" label="[06:55:59]">&lt;janneke&gt;</a></span><span class="message">on master, __raise is defined in */syscall-internal.c</span></div><div class="line" id="070102"><span class="nick" style="color:#80b1d3"><a href="#070102" label="[07:01:02]">&lt;theruran&gt;</a></span><span class="message">janneke: no, but I will try that later for you and let you know the results</span></div><div class="line" id="070159"><span class="nick" style="color:#80b1d3"><a href="#070159" label="[07:01:59]">&lt;theruran&gt;</a></span><span class="message">xentrac: Shutt made some strong arguments about it. You can read his doctoral dissertation ;)</span></div><div class="line" id="072345"><span class="nick" style="color:#6d2462"><a href="#072345" label="[07:23:45]">&lt;xentrac&gt;</a></span><span class="message">sounds potentially interesting?</span></div><div class="line" id="073832"><span class="nick" style="color:#80b1d3"><a href="#073832" label="[07:38:32]">&lt;theruran&gt;</a></span><span class="message">John Shutt passed away recently :/</span></div><div class="line" id="073932"><span class="nick" style="color:#6d2462"><a href="#073932" label="[07:39:32]">&lt;xentrac&gt;</a></span><span class="message">:(</span></div><div class="line" id="073944"><span class="nick" style="color:#6d2462"><a href="#073944" label="[07:39:44]">&lt;xentrac&gt;</a></span><span class="message">oh, the fexprs dissertation!</span></div><div class="line" id="074004"><span class="nick" style="color:#80b1d3"><a href="#074004" label="[07:40:04]">&lt;theruran&gt;</a></span><span class="message">yes</span></div><div class="line" id="074014"><span class="nick" style="color:#80b1d3"><a href="#074014" label="[07:40:14]">&lt;theruran&gt;</a></span><span class="message">there is a short paper too</span></div><div class="line" id="074028"><span class="nick" style="color:#6d2462"><a href="#074028" label="[07:40:28]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://web.wpi.edu/Pubs/ETD/Available/etd-090110-124904/unrestricted/jshutt.pdf">https://web.wpi.edu/Pubs/ETD/Available/etd-090110-124904/unrestricted/jshutt.pdf</a> </span></div><div class="line" id="074051"><span class="nick" style="color:#6d2462"><a href="#074051" label="[07:40:51]">&lt;xentrac&gt;</a></span><span class="message">oh, he's one of Shriram's students!</span></div><div class="line" id="074238"><span class="nick" style="color:#6d2462"><a href="#074238" label="[07:42:38]">&lt;xentrac&gt;</a></span><span class="message">that's really sad</span></div><div class="line" id="074320"><span class="nick" style="color:#6d2462"><a href="#074320" label="[07:43:20]">&lt;xentrac&gt;</a></span><span class="message">so I think it's clear that vau is more analytically tractable than term rewriting.  but I think we can make a strong argument that term rewriting is simpler to define and simpler to implement than vau expressions — though not as much as you'd think</span></div><div class="line" id="074323"><span class="nick" style="color:#80b1d3"><a href="#074323" label="[07:43:23]">&lt;theruran&gt;</a></span><span class="message">he cites Mitchell Wand, “The Theory of Fexprs is Trivial”</span></div><div class="line" id="074405"><span class="nick" style="color:#6d2462"><a href="#074405" label="[07:44:05]">&lt;xentrac&gt;</a></span><span class="message">and hygienic macros are not at all simple to define or implement</span></div><div class="line" id="074408"><span class="nick" style="color:#6d2462"><a href="#074408" label="[07:44:08]">&lt;xentrac&gt;</a></span><span class="message">oops</span></div><div class="line" id="074429"><span class="nick" style="color:#6d2462"><a href="#074429" label="[07:44:29]">&lt;xentrac&gt;</a></span><span class="message">hmm, did that bogus color come through?</span></div><div class="line" id="074444"><span class="nick" style="color:#80b1d3"><a href="#074444" label="[07:44:44]">&lt;theruran&gt;</a></span><span class="message">as the syntax-case implementation would indicate</span></div><div class="line" id="074500"><span class="nick" style="color:#6d2462"><a href="#074500" label="[07:45:00]">&lt;xentrac&gt;</a></span><span class="message">haha, exactly</span></div><div class="line" id="074736"><span class="nick" style="color:#6d2462"><a href="#074736" label="[07:47:36]">&lt;xentrac&gt;</a></span><span class="message">an interesting thing about vau is that it seems to provide an easy way to capture a lexical environment: ($vau () e e)</span></div><div class="line" id="074906"><span class="nick" style="color:#6d2462"><a href="#074906" label="[07:49:06]">&lt;xentrac&gt;</a></span><span class="message">that is, it makes environments first-class in the same way Scheme's call/cc makes continuations first-class</span></div><div class="line" id="074908"><span class="nick" style="color:#80b1d3"><a href="#074908" label="[07:49:08]">&lt;theruran&gt;</a></span><span class="message">my impression is that writing a bootstrappable implementation of syntax-case requires some serious mental gymnastics of remembering when an expression is evaluated or not, and that vau expressions may make those gymnastics easier to manage. but I'm not experienced enough to know so</span></div><div class="line" id="074922"><span class="nick" style="color:#80b1d3"><a href="#074922" label="[07:49:22]">&lt;theruran&gt;</a></span><span class="message">yeah that is neat about Kernel</span></div><div class="line" id="074938"><span class="nick" style="color:#80b1d3"><a href="#074938" label="[07:49:38]">&lt;theruran&gt;</a></span><span class="message">environments are in a hierarchical tree</span></div><div class="line" id="074947"><span class="nick" style="color:#6d2462"><a href="#074947" label="[07:49:47]">&lt;xentrac&gt;</a></span><span class="message">which means that you can use them as dictionaries</span></div><div class="line" id="074959"><span class="nick" style="color:#6d2462"><a href="#074959" label="[07:49:59]">&lt;xentrac&gt;</a></span><span class="message">well.  at least to read and update, maybe not to insert</span></div><div class="line" id="075000"><span class="nick" style="color:#6d2462"><a href="#075000" label="[07:50:00]">&lt;xentrac&gt;</a></span><span class="message">I think Wouter van Oortmerssen wrote an experimental programming language based on nothing but that</span></div><div class="line" id="075035"><span class="nick" style="color:#6d2462"><a href="#075035" label="[07:50:35]">&lt;xentrac&gt;</a></span><span class="message">did my bogus color come through?</span></div><div class="line" id="075154"><span class="nick" style="color:#80b1d3"><a href="#075154" label="[07:51:54]">&lt;theruran&gt;</a></span><span class="message">i didn't see color in IRCCloud</span></div><div class="line" id="075513"><span class="nick" style="color:#6d2462"><a href="#075513" label="[07:55:13]">&lt;xentrac&gt;</a></span><span class="message">aha, thanks</span></div><div class="line" id="075808"><span class="nick" style="color:#6d2462"><a href="#075808" label="[07:58:08]">&lt;xentrac&gt;</a></span><span class="message">hmm, I think you can use them as dictionaries to insert as well</span></div><div class="line" id="075922"><span class="nick" style="color:#6d2462"><a href="#075922" label="[07:59:22]">&lt;xentrac&gt;</a></span><span class="message">but only if you can eval an S-expression, which is functionality I think of as sort of separable from things like vau and call/cc</span></div><div class="line" id="080559"><span class="nick" style="color:#80b1d3"><a href="#080559" label="[08:05:59]">&lt;theruran&gt;</a></span><span class="message">I think you call wrap on an operative to turn it into an applicative (like a Scheme procedure)</span></div><div class="line" id="080733"><span class="nick" style="color:#80b1d3"><a href="#080733" label="[08:07:33]">&lt;theruran&gt;</a></span><span class="message">($define! get-current-environment (wrap ($vau () e e)))</span></div><div class="line" id="081304"><span class="nick" style="color:#6d2462"><a href="#081304" label="[08:13:04]">&lt;xentrac&gt;</a></span><span class="message">do you have a link to the short paper?</span></div><div class="line" id="081440"><span class="nick" style="color:#6d2462"><a href="#081440" label="[08:14:40]">&lt;xentrac&gt;</a></span><span class="message">I'm curious what you lose if you define $if in terms of an exec-in procedure instead of eval</span></div><div class="line" id="081515"><span class="nick" style="color:#6d2462"><a href="#081515" label="[08:15:15]">&lt;xentrac&gt;</a></span><span class="message">($vau (x y z) env ($cond ((exec-in x env) (exec-in y env)) (#t (exec-in z env))))</span></div><div class="line" id="081646"><span class="nick" style="color:#6d2462"><a href="#081646" label="[08:16:46]">&lt;xentrac&gt;</a></span><span class="message">the difference being that x, y, and z are not lists, but code objects you can't necessarily construct at run time</span></div><div class="line" id="082035"><span class="nick" style="color:#80b1d3"><a href="#082035" label="[08:20:35]">&lt;theruran&gt;</a></span><span class="message">The Theory of Fexprs is Trivial: <a rel="nofollow" href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.44.9264&amp;rep=rep1&amp;type=pdf">https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.44.9264&amp;rep=rep1&amp;type=pdf</a> </span></div><div class="line" id="082056"><span class="nick" style="color:#80b1d3"><a href="#082056" label="[08:20:56]">&lt;theruran&gt;</a></span><span class="message">but I guess Shutt argued in his dissertation that it's not so trivial</span></div><div class="line" id="082223"><span class="nick" style="color:#6d2462"><a href="#082223" label="[08:22:23]">&lt;xentrac&gt;</a></span><span class="message">that's Wand, though</span></div><div class="line" id="082250"><span class="nick" style="color:#80b1d3"><a href="#082250" label="[08:22:50]">&lt;theruran&gt;</a></span><span class="message">that's the paper I was thinking of :/</span></div><div class="line" id="082303"><span class="nick" style="color:#80b1d3"><a href="#082303" label="[08:23:03]">&lt;theruran&gt;</a></span><span class="message">&quot;Not only did that paper demonstrate the trivialization of theory that, in the vocabulary of this dissertation,</span></div><div class="line" id="082303"><span class="nick" style="color:#80b1d3"><a href="#082303" label="[08:23:03]">&lt;theruran&gt;</a></span><span class="message">can result from the introduction of fexprs into an implicit-evaluation calculus, but it also presented a compellingly plausible intuitive argument that this trivialization of theory is an inherent consequence of the introduction of fexprs into λ-calculus.&quot;</span></div><div class="line" id="082336"><span class="nick" style="color:#80b1d3"><a href="#082336" label="[08:23:36]">&lt;theruran&gt;</a></span><span class="message">&quot;The “fexprs” investigated by [Wa98] are a dramatically different facility than the “fexprs” investigated by this dissertation; and, partly entangled with that difference of terminology, [Wa98] assumes an isomorphism between source expressions and computational states, while this dissertation does not. This chapter explores the depth and consequences of these discrepancies.&quot;</span></div><div class="line" id="082412"><span class="nick" style="color:#80b1d3"><a href="#082412" label="[08:24:12]">&lt;theruran&gt;</a></span><span class="message">the dissertation is... lengthy</span></div><div class="line" id="082419"><span class="nick" style="color:#6d2462"><a href="#082419" label="[08:24:19]">&lt;xentrac&gt;</a></span><span class="message">a bit, yeah</span></div><div class="line" id="082429"><span class="nick" style="color:#6d2462"><a href="#082429" label="[08:24:29]">&lt;xentrac&gt;</a></span><span class="message">and it doesn't even state its thesis</span></div><div class="line" id="082446"><span class="nick" style="color:#6d2462"><a href="#082446" label="[08:24:46]">&lt;xentrac&gt;</a></span><span class="message">Chapter 1 is entitled &quot;the thesis&quot; but I haven't found a thesis in it yet</span></div><div class="line" id="083111"><span class="nick" style="color:#6d2462"><a href="#083111" label="[08:31:11]">&lt;xentrac&gt;</a></span><span class="message">maybe this is the thesis: &quot;Such a solution does in fact exist: a combination of semantic assumptions that supports fexprs in a well-behaved and simple way.&quot;</span></div><div class="line" id="083707"><span class="nick" style="color:#6d2462"><a href="#083707" label="[08:37:07]">&lt;xentrac&gt;</a></span><span class="message">oh, maybe this is it (hi attila_lendvai!)</span></div><div class="line" id="083747"><span class="nick" style="color:#6c3d55"><a href="#083747" label="[08:37:47]">&lt;attila_lendvai&gt;</a></span><span class="message">hi xentrac, channel!</span></div><div class="line" id="083826"><span class="nick" style="color:#6d2462"><a href="#083826" label="[08:38:26]">&lt;xentrac&gt;</a></span><span class="message">&quot;...the severe difficulties attendant on fexprs in the past are not essential, and can be overcome by judicious coordination with other elements of language design.  In particular, fexprs can form the basis for a simple, well-behaved Scheme-like language, subsuming traditional abstractions without a multi-phase model of evaluation.&quot;</span></div><div class="line" id="083848"><span class="nick" style="color:#6d2462"><a href="#083848" label="[08:38:48]">&lt;xentrac&gt;</a></span><span class="message">(Shutt's dissertation, &lt;<a rel="nofollow" href="https://web.wpi.edu/Pubs/ETD/Available/etd-090110-124904/unrestricted/jshutt.pdf">https://web.wpi.edu/Pubs/ETD/Available/etd-090110-124904/unrestricted/jshutt.pdf</a>&gt;) </span></div><div class="line" id="083905"><span class="nick" style="color:#6d2462"><a href="#083905" label="[08:39:05]">&lt;xentrac&gt;</a></span><span class="message">was discussing it with theruran and thinking you might be interested in this</span></div><div class="line" id="084147"><span class="nick" style="color:#6d2462"><a href="#084147" label="[08:41:47]">&lt;xentrac&gt;</a></span><span class="message">I feel like that thesis statement could be made a lot more rigorous, because whether a given language is &quot;simple&quot;, &quot;well-behaved&quot;, or &quot;Scheme-like&quot; is pretty debatable</span></div><div class="line" id="085147"><span class="nick" style="color:#80b1d3"><a href="#085147" label="[08:51:47]">&lt;theruran&gt;</a></span><span class="message">mm, good excerpt</span></div><div class="line" id="085226"><span class="nick" style="color:#80b1d3"><a href="#085226" label="[08:52:26]">&lt;theruran&gt;</a></span><span class="message">the formal semantics of the language were never defined. the section in the Revised Report is a stub</span></div><div class="line" id="085951"><span class="nick" style="color:#80b1d3"><a href="#085951" label="[08:59:51]">&lt;theruran&gt;</a></span><span class="message">section 6.4 of the dissertation covers hygienic macros</span></div><div class="line" id="090852"><span class="nick" style="color:#6d2462"><a href="#090852" label="[09:08:52]">&lt;xentrac&gt;</a></span><span class="message">aw :(</span></div><div class="line" id="090958"><span class="nick" style="color:#d9d9d9"><a href="#090958" label="[09:09:58]">*</a></span><span class="message">theruran sleeps</span></div><div class="line" id="091004"><span class="nick" style="color:#80b1d3"><a href="#091004" label="[09:10:04]">&lt;theruran&gt;</a></span><span class="message">o/</span></div><div class="line" id="091100"><span class="nick" style="color:#6d2462"><a href="#091100" label="[09:11:00]">&lt;xentrac&gt;</a></span><span class="message">night!</span></div><div class="line" id="135507"><span class="nick">***</span><span class="message notice">wowaname is now known as opal</span></div><div class="line" id="191333"><span class="nick" style="color:#2e2a4a"><a href="#191333" label="[19:13:33]">&lt;stikonas&gt;</a></span><span class="message">shaved off lots of bytes from hex0_riscv64 bootstrap seed, it now only has 392B, almost a hundred bytes smaller than first original version (which was 485B) and is now smaller than AMD64 binary (405B). And it's also much faster under qemu</span></div><div class="line" id="191531"><span class="nick" style="color:#2e2a4a"><a href="#191531" label="[19:15:31]">&lt;stikonas&gt;</a></span><span class="message">and together with kaem-micro it's only 753B</span></div><div class="line" id="192307"><span class="nick" style="color:#2e2a4a"><a href="#192307" label="[19:23:07]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/9">https://github.com/oriansj/bootstrap-seeds/pull/9</a> </span></div><div class="line" id="193001"><span class="nick" style="color:#2e2a4a"><a href="#193001" label="[19:30:01]">&lt;stikonas&gt;</a></span><span class="message">and stage0-posix PR (draft until bootstrap seeds are not merged): <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/43">https://github.com/oriansj/stage0-posix/pull/43</a> </span></div><div class="line" id="203658"><span class="nick" style="color:#6d2462"><a href="#203658" label="[20:36:58]">&lt;xentrac&gt;</a></span><span class="message">congratulations, stikonas!  that's wonderful!</span></div><div class="line" id="211644"><span class="nick" style="color:#bc80bd"><a href="#211644" label="[21:16:44]">&lt;Hagfish&gt;</a></span><span class="message">apparently base2048 can encode 385 bytes per tweet</span></div><div class="line" id="211711"><span class="nick" style="color:#bc80bd"><a href="#211711" label="[21:17:11]">&lt;Hagfish&gt;</a></span><span class="message">i don't expect you to try shaving off another 7 bytes to fit that arbitrary limit, though</span></div><div class="line" id="211718"><span class="nick" style="color:#bc80bd"><a href="#211718" label="[21:17:18]">&lt;Hagfish&gt;</a></span><span class="message">392 bytes is incredible</span></div><div class="line" id="211953"><span class="nick" style="color:#6d2462"><a href="#211953" label="[21:19:53]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="220235"><span class="nick" style="color:#2e2a4a"><a href="#220235" label="[22:02:35]">&lt;stikonas&gt;</a></span><span class="message">I guess I'll have to start working on cc_riscv64 next...</span></div><div class="line" id="220253"><span class="nick" style="color:#2e2a4a"><a href="#220253" label="[22:02:53]">&lt;stikonas&gt;</a></span><span class="message">that will be a big task...</span></div><div class="line" id="220311"><span class="nick" style="color:#2e2a4a"><a href="#220311" label="[22:03:11]">&lt;stikonas&gt;</a></span><span class="message">but at least it can be written in M1 assembly and not hex</span></div><div class="line" id="220404"><span class="nick" style="color:#6d2462"><a href="#220404" label="[22:04:04]">&lt;xentrac&gt;</a></span><span class="message">yeah!</span></div><div class="line" id="220416"><span class="nick" style="color:#6d2462"><a href="#220416" label="[22:04:16]">&lt;xentrac&gt;</a></span><span class="message">writing RISC-V code in hex sounds like a real headache</span></div><div class="line" id="220602"><span class="nick" style="color:#2e2a4a"><a href="#220602" label="[22:06:02]">&lt;stikonas&gt;</a></span><span class="message">writing any hex code (not just risc-v) is tedious</span></div><div class="line" id="220655"><span class="nick" style="color:#2e2a4a"><a href="#220655" label="[22:06:55]">&lt;stikonas&gt;</a></span><span class="message">well, hex2 code is somewhat better but you still need to encode immediate values manually</span></div><div class="line" id="232506"><span class="nick" style="color:#6d2462"><a href="#232506" label="[23:25:06]">&lt;xentrac&gt;</a></span><span class="message">stikonas: I guess RS1_SP RS2_A0 SB doesn't need a magic sigil for the immediate because there's no immediate?</span></div><div class="line" id="232516"><span class="nick" style="color:#6d2462"><a href="#232516" label="[23:25:16]">&lt;xentrac&gt;</a></span><span class="message">i.e. the immediate is 0</span></div><div class="line" id="232641"><span class="nick" style="color:#2e2a4a"><a href="#232641" label="[23:26:41]">&lt;stikonas&gt;</a></span><span class="message">xentrac: kind of yes</span></div><div class="line" id="232654"><span class="nick" style="color:#2e2a4a"><a href="#232654" label="[23:26:54]">&lt;stikonas&gt;</a></span><span class="message">in non-risc-v M1 I think you would need 0</span></div><div class="line" id="232729"><span class="nick" style="color:#2e2a4a"><a href="#232729" label="[23:27:29]">&lt;stikonas&gt;</a></span><span class="message">but in risc-v we construct words using that . symbol to combined all these constants</span></div><div class="line" id="232737"><span class="nick" style="color:#6d2462"><a href="#232737" label="[23:27:37]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/58414772/why-are-risc-v-s-b-and-u-j-instruction-types-encoded-in-this-way">https://stackoverflow.com/questions/58414772/why-are-risc-v-s-b-and-u-j-instruction-types-encoded-in-this-way</a>  goes into a lot of detail about why the instruction format is so crazy</span></div><div class="line" id="232740"><span class="nick" style="color:#2e2a4a"><a href="#232740" label="[23:27:40]">&lt;stikonas&gt;</a></span><span class="message">it's basically  RS1_SP + RS2_A0 + SB</span></div><div class="line" id="232747"><span class="nick" style="color:#2e2a4a"><a href="#232747" label="[23:27:47]">&lt;stikonas&gt;</a></span><span class="message">when expressed in hex</span></div><div class="line" id="232748"><span class="nick" style="color:#6d2462"><a href="#232748" label="[23:27:48]">&lt;xentrac&gt;</a></span><span class="message">cool, thanks :)</span></div><div class="line" id="232755"><span class="nick" style="color:#6d2462"><a href="#232755" label="[23:27:55]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's what I thought</span></div><div class="line" id="232756"><span class="nick" style="color:#2e2a4a"><a href="#232756" label="[23:27:56]">&lt;stikonas&gt;</a></span><span class="message">and zero can be skipped</span></div><div class="line" id="232822"><span class="nick" style="color:#2e2a4a"><a href="#232822" label="[23:28:22]">&lt;stikonas&gt;</a></span><span class="message">we were kind of forced into this because in risc-v all these things are not byte alinged</span></div><div class="line" id="232831"><span class="nick" style="color:#6d2462"><a href="#232831" label="[23:28:31]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="232844"><span class="nick" style="color:#2e2a4a"><a href="#232844" label="[23:28:44]">&lt;stikonas&gt;</a></span><span class="message">so it was easier to encode things this way</span></div><div class="line" id="232929"><span class="nick" style="color:#6d2462"><a href="#232929" label="[23:29:29]">&lt;xentrac&gt;</a></span><span class="message">jessica clarke points out that if you want to build an auditable CPU in hardware, maybe it would be better to make a version of RISC-V with &quot;un-jumbled fields&quot;</span></div><div class="line" id="233035"><span class="nick" style="color:#6d2462"><a href="#233035" label="[23:30:35]">&lt;xentrac&gt;</a></span><span class="message">that is, put the extra muxes into the hardware that the RISC-V instruction format avoids, so that you can put them wherever you want.  you still have non-byte-aligned fields but at least you can read the hex more easily</span></div><div class="line" id="233106"><span class="nick" style="color:#2e2a4a"><a href="#233106" label="[23:31:06]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="233120"><span class="nick" style="color:#2e2a4a"><a href="#233120" label="[23:31:20]">&lt;stikonas&gt;</a></span><span class="message">well, once you have hex1, most of these problems are gone</span></div><div class="line" id="233134"><span class="nick" style="color:#2e2a4a"><a href="#233134" label="[23:31:34]">&lt;stikonas&gt;</a></span><span class="message">there are still immediate constants but at least jumps and branches are dealt with</span></div><div class="line" id="233151"><span class="nick" style="color:#2e2a4a"><a href="#233151" label="[23:31:51]">&lt;stikonas&gt;</a></span><span class="message">(and immediate constants are often the same in various parts of the program, so can be copy-pasted)</span></div><div class="line" id="233208"><span class="nick" style="color:#2e2a4a"><a href="#233208" label="[23:32:08]">&lt;stikonas&gt;</a></span><span class="message">i.e. you always have the same 8, 16, 24... for preparing stack</span></div><div class="line" id="234051"><span class="nick" style="color:#6d2462"><a href="#234051" label="[23:40:51]">&lt;xentrac&gt;</a></span><span class="message">well, the other thing we need to write in hex (or at least audit) is the kernel</span></div><div class="line" id="234057"><span class="nick" style="color:#6d2462"><a href="#234057" label="[23:40:57]">&lt;xentrac&gt;</a></span><span class="message">so hex0 has something to run on</span></div><div class="line" id="234515"><span class="nick" style="color:#2e2a4a"><a href="#234515" label="[23:45:15]">&lt;stikonas&gt;</a></span><span class="message">xentrac: I don't think that's the easiest way</span></div><div class="line" id="234546"><span class="nick" style="color:#2e2a4a"><a href="#234546" label="[23:45:46]">&lt;stikonas&gt;</a></span><span class="message">probably it is easier to adjust hex0 to run baremetal</span></div><div class="line" id="234556"><span class="nick" style="color:#2e2a4a"><a href="#234556" label="[23:45:56]">&lt;stikonas&gt;</a></span><span class="message">although it won't be fully portable then</span></div><div class="line" id="234604"><span class="nick" style="color:#2e2a4a"><a href="#234604" label="[23:46:04]">&lt;stikonas&gt;</a></span><span class="message">since it has to deal with input/output</span></div><div class="line" id="234649"><span class="nick" style="color:#2e2a4a"><a href="#234649" label="[23:46:49]">&lt;stikonas&gt;</a></span><span class="message">basically you need to load all the sources into some addresses in the memory</span></div><div class="line" id="234703"><span class="nick" style="color:#2e2a4a"><a href="#234703" label="[23:47:03]">&lt;stikonas&gt;</a></span><span class="message">and just read &quot;hex1.hex0&quot; from memory</span></div><div class="line" id="234712"><span class="nick" style="color:#2e2a4a"><a href="#234712" label="[23:47:12]">&lt;stikonas&gt;</a></span><span class="message">build hex1 into some other memory location</span></div><div class="line" id="234717"><span class="nick" style="color:#2e2a4a"><a href="#234717" label="[23:47:17]">&lt;stikonas&gt;</a></span><span class="message">and just jump into there</span></div><div class="line" id="234809"><span class="nick" style="color:#2e2a4a"><a href="#234809" label="[23:48:09]">&lt;stikonas&gt;</a></span><span class="message">hex0 only uses sys_read and sys_write (and sys_exit) syscalls</span></div><div class="line" id="234841"><span class="nick" style="color:#2e2a4a"><a href="#234841" label="[23:48:41]">&lt;stikonas&gt;</a></span><span class="message">then the problem becomes how to load everything into memory (or some other chip that CPU can address and you can manually bit-bang)</span></div><div class="line" id="234915"><span class="nick" style="color:#2e2a4a"><a href="#234915" label="[23:49:15]">&lt;stikonas&gt;</a></span><span class="message">then hex1 can again read from some other memory location where hex2 source is and build hex2 binary and jump into it</span></div><div class="line" id="234943"><span class="nick" style="color:#2e2a4a"><a href="#234943" label="[23:49:43]">&lt;stikonas&gt;</a></span><span class="message">it's not too convenient but definitely easier than writing kernel in hex0</span></div><div class="line" id="234956"><span class="nick" style="color:#2e2a4a"><a href="#234956" label="[23:49:56]">&lt;stikonas&gt;</a></span><span class="message">then you can at least postpone kernel until you have assembly or C</span></div><div class="line" id="235120"><span class="nick" style="color:#6d2462"><a href="#235120" label="[23:51:20]">&lt;xentrac&gt;</a></span><span class="message">a fair bit of its code is already system calls</span></div><div class="line" id="235129"><span class="nick" style="color:#2e2a4a"><a href="#235129" label="[23:51:29]">&lt;stikonas&gt;</a></span><span class="message">some more care might be needed if you jump-link programs without kernel but it's managable (e.g. might need to zero registers)</span></div><div class="line" id="235133"><span class="nick" style="color:#6d2462"><a href="#235133" label="[23:51:33]">&lt;xentrac&gt;</a></span><span class="message">hex0 uses openat and chmod as well</span></div><div class="line" id="235136"><span class="nick" style="color:#6d2462"><a href="#235136" label="[23:51:36]">&lt;xentrac&gt;</a></span><span class="message">doesn't it?</span></div><div class="line" id="235152"><span class="nick" style="color:#2e2a4a"><a href="#235152" label="[23:51:52]">&lt;stikonas&gt;</a></span><span class="message">well, yes, to read files</span></div><div class="line" id="235156"><span class="nick" style="color:#2e2a4a"><a href="#235156" label="[23:51:56]">&lt;stikonas&gt;</a></span><span class="message">but if you read from memory</span></div><div class="line" id="235201"><span class="nick" style="color:#2e2a4a"><a href="#235201" label="[23:52:01]">&lt;stikonas&gt;</a></span><span class="message">those can be skipped</span></div><div class="line" id="235205"><span class="nick" style="color:#6d2462"><a href="#235205" label="[23:52:05]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="235254"><span class="nick" style="color:#2e2a4a"><a href="#235254" label="[23:52:54]">&lt;stikonas&gt;</a></span><span class="message">well, the whole thing might need some modifications to run on baremetal and get rid of syscalls but it's not that big of a change...</span></div><div class="line" id="235321"><span class="nick" style="color:#2e2a4a"><a href="#235321" label="[23:53:21]">&lt;stikonas&gt;</a></span><span class="message">(assuming you can somehow input sources into your memory)</span></div><div class="line" id="235345"><span class="nick" style="color:#2e2a4a"><a href="#235345" label="[23:53:45]">&lt;stikonas&gt;</a></span><span class="message">(I guess that's what hex0-monitor kind of used on knight)</span></div><div class="line" id="235417"><span class="nick" style="color:#2e2a4a"><a href="#235417" label="[23:54:17]">&lt;stikonas&gt;</a></span><span class="message">to avoid loading everything in one go...</span></div><div class="line" id="235424"><span class="nick" style="color:#2e2a4a"><a href="#235424" label="[23:54:24]">&lt;stikonas&gt;</a></span><span class="message">so you load once small program and type the rest</span></div><div class="line" id="235438"><span class="nick" style="color:#6d2462"><a href="#235438" label="[23:54:38]">&lt;xentrac&gt;</a></span><span class="message">I just said on #riscv: &gt; stikonas points out that it's probably simpler to run cut-down versions of hex0, hex1, and hex2 as subroutines that read and write RAM than it is to implement a kernel in hex that is sufficient to run them</span></div><div class="line" id="235442"><span class="nick" style="color:#6d2462"><a href="#235442" label="[23:54:42]">&lt;xentrac&gt;</a></span><span class="message">&gt; and if you do that you can write the kernel in assembly instead of hex, which would be a big improvement</span></div><div class="line" id="235456"><span class="nick" style="color:#6d2462"><a href="#235456" label="[23:54:56]">&lt;xentrac&gt;</a></span><span class="message">inputting sources into memory isn't any harder than inputting binaries into memory</span></div><div class="line" id="235516"><span class="nick" style="color:#2e2a4a"><a href="#235516" label="[23:55:16]">&lt;stikonas&gt;</a></span><span class="message">are they discussing this on #riscv?</span></div><div class="line" id="235520"><span class="nick" style="color:#6d2462"><a href="#235520" label="[23:55:20]">&lt;xentrac&gt;</a></span><span class="message">well</span></div><div class="line" id="235521"><span class="nick" style="color:#6d2462"><a href="#235521" label="[23:55:21]">&lt;xentrac&gt;</a></span><span class="message">I am</span></div><div class="line" id="235529"><span class="nick" style="color:#6d2462"><a href="#235529" label="[23:55:29]">&lt;xentrac&gt;</a></span><span class="message">I think jessica may have lost interest :)</span></div><div class="line" id="235559"><span class="nick" style="color:#2e2a4a"><a href="#235559" label="[23:55:59]">&lt;stikonas&gt;</a></span><span class="message">well, it's a low level stuff...</span></div><div class="line" id="235623"><span class="nick" style="color:#2e2a4a"><a href="#235623" label="[23:56:23]">&lt;stikonas&gt;</a></span><span class="message">but stage0 is a good &quot;tutorial&quot; if you want to learn some assembly programming</span></div><div class="line" id="235732"><span class="nick" style="color:#6d2462"><a href="#235732" label="[23:57:32]">&lt;xentrac&gt;</a></span><span class="message">the usual approach for booting a computer with no ROM is to toggle a small binary bootstrap program into RAM which is sufficient to load the rest of your code</span></div><div class="line" id="235814"><span class="nick" style="color:#6d2462"><a href="#235814" label="[23:58:14]">&lt;xentrac&gt;</a></span><span class="message">the initial bootstrap program is typically just a loop that initiates an input operation and then busy-waits on the device in PIO mode</span></div><div class="line" id="235900"><span class="nick" style="color:#6d2462"><a href="#235900" label="[23:59:00]">&lt;xentrac&gt;</a></span><span class="message">so it might be 4-16 instructions</span></div><div class="line" id="235942"><span class="nick" style="color:#6d2462"><a href="#235942" label="[23:59:42]">&lt;xentrac&gt;</a></span><span class="message">depending on the I/O device your second-stage bootstrap might be 80 bytes, or 512, or unlimited</span></div><br /></div></body></html>