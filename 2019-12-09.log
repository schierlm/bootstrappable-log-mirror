<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-12-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005044"><span class="nick" style="color:#8dd3c7"><a href="#005044" label="[00:50:44]">&lt;oriansj&gt;</a></span><span class="message">theruran: thank you for spotting that</span></div><div class="line" id="005832"><span class="nick" style="color:#8dd3c7"><a href="#005832" label="[00:58:32]">&lt;oriansj&gt;</a></span><span class="message">when built with M2-Planet (+ blood-elf debug info) it is 153,348bytes but gcc -Os it weighs in at 71,128 bytes</span></div><div class="line" id="010329"><span class="nick" style="color:#2e2a4a"><a href="#010329" label="[01:03:29]">&lt;theruran&gt;</a></span><span class="message">oh, right on. I didn't try with -Os</span></div><div class="line" id="010405"><span class="nick" style="color:#2e2a4a"><a href="#010405" label="[01:04:05]">&lt;theruran&gt;</a></span><span class="message">no smaller</span></div><div class="line" id="011002"><span class="nick" style="color:#8dd3c7"><a href="#011002" label="[01:10:02]">&lt;oriansj&gt;</a></span><span class="message">theruran: fortunately not a big concern at this point, especially since we can fit M2-Planet, Mes-m2 and mescc-tools on a floppy disk with alot of room to spare (hopefully enough for a full posix written in M2-Planet)</span></div><div class="line" id="011236"><span class="nick" style="color:#2e2a4a"><a href="#011236" label="[01:12:36]">&lt;theruran&gt;</a></span><span class="message">oriansj: true. it's just one metric for comparison. CompCert and musl at least give some assurance that mes-m2 doesn't rely on any undefined behavior</span></div><div class="line" id="013152"><span class="nick" style="color:#8dd3c7"><a href="#013152" label="[01:31:52]">&lt;oriansj&gt;</a></span><span class="message">theruran: very true, but you are forgetting about 1 C compiler which is quite different from Clang, Gcc, Tcc and leverages an entirely different libc (M2-Planet)</span></div><div class="line" id="013314"><span class="nick" style="color:#2e2a4a"><a href="#013314" label="[01:33:14]">&lt;theruran&gt;</a></span><span class="message">oriansj: I didn't know M2-Planet implements its own libc</span></div><div class="line" id="013416"><span class="nick" style="color:#2e2a4a"><a href="#013416" label="[01:34:16]">&lt;theruran&gt;</a></span><span class="message">well, there's functions/ but I figured those just overrided some libc functions</span></div><div class="line" id="013425"><span class="nick" style="color:#8dd3c7"><a href="#013425" label="[01:34:25]">&lt;oriansj&gt;</a></span><span class="message">theruran: it is probably the smallest Libc on the planet: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/libc-core.M1">https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/libc-core.M1</a> </span></div><div class="line" id="013454"><span class="nick" style="color:#2e2a4a"><a href="#013454" label="[01:34:54]">&lt;theruran&gt;</a></span><span class="message">whoa!</span></div><div class="line" id="013525"><span class="nick" style="color:#8dd3c7"><a href="#013525" label="[01:35:25]">&lt;oriansj&gt;</a></span><span class="message">why do you think when it builds itself, it also needs: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/functions/exit.c">https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/functions/exit.c</a>  ?</span></div><div class="line" id="013634"><span class="nick" style="color:#8dd3c7"><a href="#013634" label="[01:36:34]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet is entirely self-contained</span></div><div class="line" id="013704"><span class="nick" style="color:#2e2a4a"><a href="#013704" label="[01:37:04]">&lt;theruran&gt;</a></span><span class="message">hadn't thought about it. I guess I just wanted to test that to see if it worked. I haven't looked at M2-Planet much yet.</span></div><div class="line" id="013722"><span class="nick" style="color:#8dd3c7"><a href="#013722" label="[01:37:22]">&lt;oriansj&gt;</a></span><span class="message">and can be built entirely by an assembly version of itself (cc_amd64/cc_x86/etc)</span></div><div class="line" id="013754"><span class="nick" style="color:#2e2a4a"><a href="#013754" label="[01:37:54]">&lt;theruran&gt;</a></span><span class="message">so I should try stress-testing it?</span></div><div class="line" id="013812"><span class="nick" style="color:#8dd3c7"><a href="#013812" label="[01:38:12]">&lt;oriansj&gt;</a></span><span class="message">if you would like</span></div><div class="line" id="013844"><span class="nick" style="color:#8dd3c7"><a href="#013844" label="[01:38:44]">&lt;oriansj&gt;</a></span><span class="message">currently it is in reasonable shape in regards to generally correct behavior: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="014008"><span class="nick" style="color:#8dd3c7"><a href="#014008" label="[01:40:08]">&lt;oriansj&gt;</a></span><span class="message">it was fun building a C compiler in assembly. Doing Mes-M2 in assembly would be a nightmare</span></div><div class="line" id="014756"><span class="nick" style="color:#2e2a4a"><a href="#014756" label="[01:47:56]">&lt;theruran&gt;</a></span><span class="message">well I'll keep poking at things.</span></div><div class="line" id="014926"><span class="nick" style="color:#8dd3c7"><a href="#014926" label="[01:49:26]">&lt;oriansj&gt;</a></span><span class="message">theruran: enjoy yourself ^_^</span></div><div class="line" id="015647"><span class="nick" style="color:#8dd3c7"><a href="#015647" label="[01:56:47]">&lt;oriansj&gt;</a></span><span class="message">xentrac: So something of the class of M0, in which case only line macros exist and that is because they make the assembler smaller than manually encoding the supported instructions (Which is what one needs to do for the more advanced macro forms)</span></div><div class="line" id="035944"><span class="nick" style="color:#6b8072"><a href="#035944" label="[03:59:44]">&lt;xentrac&gt;</a></span><span class="message">why would Mes-M2 be so much more difficult than a C compiler to do in assembly?</span></div><div class="line" id="040051"><span class="nick" style="color:#6b8072"><a href="#040051" label="[04:00:51]">&lt;xentrac&gt;</a></span><span class="message">oriansj: I'm not sure I understand what you're driving at.  you're saying you could do an assembler that supports macros but no macros, labels, or even relative addressing?</span></div><div class="line" id="040215"><span class="nick" style="color:#6b8072"><a href="#040215" label="[04:02:15]">&lt;xentrac&gt;</a></span><span class="message">or are you saying that M0 is the step after hex0, where hex0 supports no macros, and M0 does support macros, and therefore can do the other things?</span></div><div class="line" id="040352"><span class="nick" style="color:#6b8072"><a href="#040352" label="[04:03:52]">&lt;xentrac&gt;</a></span><span class="message">btw you might find it more pleasant to read notes/assembler-bootstrapping.html in a built Dercuano rather than markdown/assembler-bootstrapping in the source repo</span></div><div class="line" id="041150"><span class="nick" style="color:#6b8072"><a href="#041150" label="[04:11:50]">&lt;xentrac&gt;</a></span><span class="message">I'm writing <a rel="nofollow" href="https://gitlab.com/kragen/dercuano/blob/master/markdown/forth-assembling">https://gitlab.com/kragen/dercuano/blob/master/markdown/forth-assembling</a>  right now</span></div><div class="line" id="080003"><span class="nick" style="color:#80b1d3"><a href="#080003" label="[08:00:03]">&lt;zig&gt;</a></span><span class="message">forth bootstrapping is back?</span></div><div class="line" id="080111"><span class="nick" style="color:#80b1d3"><a href="#080111" label="[08:01:11]">&lt;zig&gt;</a></span><span class="message">This night, I made a strange dream where I was flying a spaceship running my own scheme code.</span></div><div class="line" id="104904"><span class="nick" style="color:#6b8072"><a href="#104904" label="[10:49:04]">&lt;xentrac&gt;</a></span><span class="message">I'm not convinced that Forth bootstrapping is a good idea</span></div><div class="line" id="105044"><span class="nick" style="color:#80b1d3"><a href="#105044" label="[10:50:44]">&lt;zig&gt;</a></span><span class="message">why? I read forth bootstrapping effort were abandonned, but I don't know why.</span></div><div class="line" id="105115"><span class="nick" style="color:#6b8072"><a href="#105115" label="[10:51:15]">&lt;xentrac&gt;</a></span><span class="message">I'm exploring it because it's a fun kind of thing to think about.  But it just took me an hour to get a 10-line &quot;assembler&quot; (that mostly just converts octal to binary) working in Gforth</span></div><div class="line" id="105134"><span class="nick" style="color:#6b8072"><a href="#105134" label="[10:51:34]">&lt;xentrac&gt;</a></span><span class="message">a big chunk of that time was because I had a stack-effect bug</span></div><div class="line" id="105311"><span class="nick" style="color:#6b8072"><a href="#105311" label="[10:53:11]">&lt;xentrac&gt;</a></span><span class="message">I don't have a clear idea of why I have a harder time getting things done in Forth than I do in C or assembly language.  In theory it doesn't seem like it should be that way</span></div><div class="line" id="105328"><span class="nick" style="color:#6b8072"><a href="#105328" label="[10:53:28]">&lt;xentrac&gt;</a></span><span class="message">Maybe it's lack of experience, I don't know</span></div><div class="line" id="105352"><span class="nick" style="color:#6b8072"><a href="#105352" label="[10:53:52]">&lt;xentrac&gt;</a></span><span class="message">(I just updated the note I linked above with details on that)</span></div><div class="line" id="105518"><span class="nick" style="color:#6b8072"><a href="#105518" label="[10:55:18]">&lt;xentrac&gt;</a></span><span class="message">in theory, Forth should be purely an improvement over C: less syntactic overhead for factoring into smaller functions, built-in closures, compile-time metaprogramming and whatnot</span></div><div class="line" id="105537"><span class="nick" style="color:#6b8072"><a href="#105537" label="[10:55:37]">&lt;xentrac&gt;</a></span><span class="message">well.  Sort of closuers</span></div><div class="line" id="105602"><span class="nick" style="color:#6b8072"><a href="#105602" label="[10:56:02]">&lt;xentrac&gt;</a></span><span class="message">but I haven't figured out how to make those theoretical advantages real</span></div><div class="line" id="105813"><span class="nick" style="color:#6b8072"><a href="#105813" label="[10:58:13]">&lt;xentrac&gt;</a></span><span class="message">by contrast, the lack of type-checking and the danger of stack imbaances seem to cost me a fair bit of time in practice.  But I'm still a beginner in Forth after 25 years</span></div><div class="line" id="110258"><span class="nick" style="color:#6b8072"><a href="#110258" label="[11:02:58]">&lt;xentrac&gt;</a></span><span class="message">I've probably written about two orders of magnitude more C than Forth, but I've written a few thousand lines in different Forths and in different assembly languages</span></div><div class="line" id="110317"><span class="nick" style="color:#6d2462"><a href="#110317" label="[11:03:17]">&lt;dddddd&gt;</a></span><span class="message">Hello booters</span></div><div class="line" id="110329"><span class="nick" style="color:#6b8072"><a href="#110329" label="[11:03:29]">&lt;xentrac&gt;</a></span><span class="message">hey</span></div><div class="line" id="111208"><span class="nick" style="color:#6d2462"><a href="#111208" label="[11:12:08]">&lt;dddddd&gt;</a></span><span class="message">I'd like to explore the forth route too. I'll keep an eye on your progress, xentrac.</span></div><div class="line" id="111212"><span class="nick" style="color:#6d2462"><a href="#111212" label="[11:12:12]">&lt;dddddd&gt;</a></span><span class="message">Nice dream, zig (:</span></div><div class="line" id="111313"><span class="nick" style="color:#80b1d3"><a href="#111313" label="[11:13:13]">&lt;zig&gt;</a></span><span class="message">dddddd: (:</span></div><div class="line" id="111410"><span class="nick" style="color:#6b8072"><a href="#111410" label="[11:14:10]">&lt;xentrac&gt;</a></span><span class="message">it does sound like an awesome dream!</span></div><div class="line" id="111432"><span class="nick" style="color:#80b1d3"><a href="#111432" label="[11:14:32]">&lt;zig&gt;</a></span><span class="message">lobste.rs (a news site) is full of web assembly articles, I am wondering what are the challenges or opportunities for the bootstrappable community, given the recent recommendation of wasm by w3c.</span></div><div class="line" id="111450"><span class="nick" style="color:#6d2462"><a href="#111450" label="[11:14:50]">&lt;dddddd&gt;</a></span><span class="message">relative addressing enters the picture en hex2, AFAIU</span></div><div class="line" id="111509"><span class="nick" style="color:#6d2462"><a href="#111509" label="[11:15:09]">&lt;dddddd&gt;</a></span><span class="message">*in</span></div><div class="line" id="111522"><span class="nick" style="color:#6b8072"><a href="#111522" label="[11:15:22]">&lt;xentrac&gt;</a></span><span class="message">dddddd: have you looked at <a rel="nofollow" href="https://github.com/kragen/stoneknifeforth?">https://github.com/kragen/stoneknifeforth?</a> </span></div><div class="line" id="111547"><span class="nick" style="color:#6b8072"><a href="#111547" label="[11:15:47]">&lt;xentrac&gt;</a></span><span class="message">wasm is really interesting but I haven't played with it at all</span></div><div class="line" id="111701"><span class="nick" style="color:#6d2462"><a href="#111701" label="[11:17:01]">&lt;dddddd&gt;</a></span><span class="message">maybe in hex1, if that's a thing still.</span></div><div class="line" id="111714"><span class="nick" style="color:#6d2462"><a href="#111714" label="[11:17:14]">&lt;dddddd&gt;</a></span><span class="message">No, I haven't, xentrac.</span></div><div class="line" id="112006"><span class="nick" style="color:#6b8072"><a href="#112006" label="[11:20:06]">&lt;xentrac&gt;</a></span><span class="message">it's a bootstrapping Forth I wrote a while back</span></div><div class="line" id="112158"><span class="nick" style="color:#6d2462"><a href="#112158" label="[11:21:58]">&lt;dddddd&gt;</a></span><span class="message">What's its license?</span></div><div class="line" id="112448"><span class="nick" style="color:#6d2462"><a href="#112448" label="[11:24:48]">&lt;dddddd&gt;</a></span><span class="message">bicicleta, cuaderno; do you speak spanish?</span></div><div class="line" id="114341"><span class="nick" style="color:#6b8072"><a href="#114341" label="[11:43:41]">&lt;xentrac&gt;</a></span><span class="message">public domain (cc0)</span></div><div class="line" id="114410"><span class="nick" style="color:#6b8072"><a href="#114410" label="[11:44:10]">&lt;xentrac&gt;</a></span><span class="message">yeah, although not as well as I speak English</span></div><div class="line" id="114445"><span class="nick" style="color:#6b8072"><a href="#114445" label="[11:44:45]">&lt;xentrac&gt;</a></span><span class="message">yesterday I was asking my girlfriend if people really called tablecloths &quot;carpetas&quot;</span></div><div class="line" id="115216"><span class="nick" style="color:#234e69"><a href="#115216" label="[11:52:16]">&lt;vagrantc&gt;</a></span><span class="message">xwvvvvwx, janneke: thoughts on how to go about writing up a press release regarding the cross-distro mes bit-for-bit identical builds?</span></div><div class="line" id="115240"><span class="nick" style="color:#8dd3c7"><a href="#115240" label="[11:52:40]">&lt;oriansj&gt;</a></span><span class="message">xentrac: are you really asking why would it be harder to write a 3+Kloc scheme interpreter than a 2Kloc C compiler? well let us start with the obvious it is always harder to write an interpreter in assembly than a compiler. Compilers allow for natural isolation and a single token list to be walked (allowing testing starting from function zero). Interpreters tend to be highly interdependent on all functions (thus making them hard to</span></div><div class="line" id="115240"><span class="nick" style="color:#8dd3c7"><a href="#115240" label="[11:52:40]">&lt;oriansj&gt;</a></span><span class="message">debug) and tend to be untestable until core functionality is implemented.</span></div><div class="line" id="115306"><span class="nick" style="color:#6d2462"><a href="#115306" label="[11:53:06]">&lt;dddddd&gt;</a></span><span class="message">xentrac, I don't see the license in the repo, sorry.</span></div><div class="line" id="115603"><span class="nick" style="color:#8dd3c7"><a href="#115603" label="[11:56:03]">&lt;oriansj&gt;</a></span><span class="message">xentrac: the point I was driving at was that line macros are much much simpler than regular macros and regular macros require alot for infrastructure in the assembler before they can be implemented. One can do line macros with s/foo/0123/g in sed but proper regular macros require an actual programmable state machine.</span></div><div class="line" id="115747"><span class="nick" style="color:#8dd3c7"><a href="#115747" label="[11:57:47]">&lt;oriansj&gt;</a></span><span class="message">xentrac: also M0 doesn't even need to support labels or displacements or addresses; as that functionality is in the hex2_linker; Otherwise M0 would have been much much bigger</span></div><div class="line" id="115918"><span class="nick" style="color:#8dd3c7"><a href="#115918" label="[11:59:18]">&lt;oriansj&gt;</a></span><span class="message">zig: it never left but no one seriously wants to do that work. also a scheme spaceship sounds like a blast from the past (lookup JPL lisp)</span></div><div class="line" id="120024"><span class="nick" style="color:#6b8072"><a href="#120024" label="[12:00:24]">&lt;xentrac&gt;</a></span><span class="message">oriansj: yes, I was really asking that!  what's obvious to you isn't always obvious to me :)</span></div><div class="line" id="120039"><span class="nick" style="color:#6b8072"><a href="#120039" label="[12:00:39]">&lt;xentrac&gt;</a></span><span class="message">dddddd: <a rel="nofollow" href="https://github.com/kragen/stoneknifeforth/blob/master/LICENSE.md">https://github.com/kragen/stoneknifeforth/blob/master/LICENSE.md</a> </span></div><div class="line" id="120126"><span class="nick" style="color:#80b1d3"><a href="#120126" label="[12:01:26]">&lt;zig&gt;</a></span><span class="message">oriansj: what do you mean by &quot;it never left&quot; I do not understand, sorry.</span></div><div class="line" id="120309"><span class="nick" style="color:#8dd3c7"><a href="#120309" label="[12:03:09]">&lt;oriansj&gt;</a></span><span class="message">zig: we never got rid of the FORTH work that we did in stage0, so it is always there; waiting for someone to start working on it</span></div><div class="line" id="120439"><span class="nick" style="color:#8dd3c7"><a href="#120439" label="[12:04:39]">&lt;oriansj&gt;</a></span><span class="message">xentrac: if you read <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/examples/M0-macro.c">https://github.com/oriansj/mescc-tools/blob/master/examples/M0-macro.c</a>  you'll understand the minimal basis of assemblers</span></div><div class="line" id="120640"><span class="nick" style="color:#8dd3c7"><a href="#120640" label="[12:06:40]">&lt;oriansj&gt;</a></span><span class="message">zig: we can even provide guides for usage/development for those wishing to pursue that line of development</span></div><div class="line" id="120742"><span class="nick" style="color:#6c3d55"><a href="#120742" label="[12:07:42]">&lt;janneke&gt;</a></span><span class="message">vagrantc, civodul: i think for the cross distro mes press release iwbn to have some way to edit several iterations; what about opening a bug in guix or debian or is that too public?</span></div><div class="line" id="120817"><span class="nick" style="color:#8dd3c7"><a href="#120817" label="[12:08:17]">&lt;oriansj&gt;</a></span><span class="message">janneke: always could do a git repo</span></div><div class="line" id="120843"><span class="nick" style="color:#d9d9d9"><a href="#120843" label="[12:08:43]">&lt;civodul&gt;</a></span><span class="message">janneke: yeah, a Git repo would be nice, or an issue in one of our tracker, or plain email, i guess</span></div><div class="line" id="120901"><span class="nick" style="color:#6c3d55"><a href="#120901" label="[12:09:01]">&lt;janneke&gt;</a></span><span class="message">ah, if guix is going to publish it as a blog post, and others publish it identically, we could maybe work in guix-artwork?</span></div><div class="line" id="120915"><span class="nick" style="color:#d9d9d9"><a href="#120915" label="[12:09:15]">&lt;civodul&gt;</a></span><span class="message">sure, that'd work</span></div><div class="line" id="120918"><span class="nick" style="color:#8dd3c7"><a href="#120918" label="[12:09:18]">&lt;oriansj&gt;</a></span><span class="message">(encrypted git repos are a thing after all)</span></div><div class="line" id="120947"><span class="nick" style="color:#d9d9d9"><a href="#120947" label="[12:09:47]">&lt;civodul&gt;</a></span><span class="message">i guess we first need to check whether/how NixOS and Debian (and Arch?) would publish such things</span></div><div class="line" id="121001"><span class="nick" style="color:#6c3d55"><a href="#121001" label="[12:10:01]">&lt;janneke&gt;</a></span><span class="message">yes!</span></div><div class="line" id="121007"><span class="nick" style="color:#234e69"><a href="#121007" label="[12:10:07]">&lt;vagrantc&gt;</a></span><span class="message">janneke: alternately/additionally, i was thinking it would be relevent as a NEWs item for reproducible-builds.org</span></div><div class="line" id="121019"><span class="nick" style="color:#6c3d55"><a href="#121019" label="[12:10:19]">&lt;janneke&gt;</a></span><span class="message">sure!</span></div><div class="line" id="121019"><span class="nick" style="color:#d9d9d9"><a href="#121019" label="[12:10:19]">&lt;civodul&gt;</a></span><span class="message">+1</span></div><div class="line" id="121103"><span class="nick" style="color:#234e69"><a href="#121103" label="[12:11:03]">&lt;vagrantc&gt;</a></span><span class="message">don't have much experience with such things, but ... i'll poke at it :)</span></div><div class="line" id="121104"><span class="nick" style="color:#6c3d55"><a href="#121104" label="[12:11:04]">&lt;janneke&gt;</a></span><span class="message">where does arch (&quot;jelle&quot; ?) hang out?</span></div><div class="line" id="121110"><span class="nick" style="color:#d9d9d9"><a href="#121110" label="[12:11:10]">&lt;civodul&gt;</a></span><span class="message"> <a rel="nofollow" href="https://nixos.org/">https://nixos.org/</a>  has a news section</span></div><div class="line" id="121117"><span class="nick" style="color:#d9d9d9"><a href="#121117" label="[12:11:17]">&lt;civodul&gt;</a></span><span class="message">janneke: jelle is on #reproducible-builds</span></div><div class="line" id="121130"><span class="nick" style="color:#234e69"><a href="#121130" label="[12:11:30]">&lt;vagrantc&gt;</a></span><span class="message">love mes-rb5 ... (throw 'error &quot;mes checksum failure&quot;) :)</span></div><div class="line" id="121131"><span class="nick" style="color:#d9d9d9"><a href="#121131" label="[12:11:31]">&lt;civodul&gt;</a></span><span class="message">oh and xwvvvvwx is here, hi! :-)</span></div><div class="line" id="122055"><span class="nick" style="color:#6b8072"><a href="#122055" label="[12:20:55]">&lt;xentrac&gt;</a></span><span class="message">oriansj: thanks!  hey, is that a buffer overflow in store_atom?  also, won't it loop infinitely if the file ends in the middle of the atom?</span></div><div class="line" id="122144"><span class="nick" style="color:#6b8072"><a href="#122144" label="[12:21:44]">&lt;xentrac&gt;</a></span><span class="message">and likewise in store_string</span></div><div class="line" id="122148"><span class="nick" style="color:#6c3d55"><a href="#122148" label="[12:21:48]">&lt;janneke&gt;</a></span><span class="message">vagrantc: glad you like it :)</span></div><div class="line" id="122613"><span class="nick" style="color:#6b8072"><a href="#122613" label="[12:26:13]">&lt;xentrac&gt;</a></span><span class="message">well I guess loop until it crashes because sooner or later storing -1 off the end of the buffer is going to break things</span></div><div class="line" id="123036"><span class="nick" style="color:#6d2462"><a href="#123036" label="[12:30:36]">&lt;dddddd&gt;</a></span><span class="message">Thanks for the new file, xentrac.</span></div><div class="line" id="123058"><span class="nick" style="color:#6b8072"><a href="#123058" label="[12:30:58]">&lt;xentrac&gt;</a></span><span class="message">yeah, I didn't realize I'd forgotten to add that --- thanks for the reminder</span></div><div class="line" id="123200"><span class="nick" style="color:#6d2462"><a href="#123200" label="[12:32:00]">&lt;dddddd&gt;</a></span><span class="message">my pleasure</span></div><div class="line" id="124511"><span class="nick" style="color:#6d2462"><a href="#124511" label="[12:45:11]">&lt;dddddd&gt;</a></span><span class="message">¡oh! Argentina, ya veo (:</span></div><div class="line" id="124554"><span class="nick" style="color:#6b8072"><a href="#124554" label="[12:45:54]">&lt;xentrac&gt;</a></span><span class="message">claro :)</span></div><div class="line" id="144912"><span class="nick" style="color:#bc80bd"><a href="#144912" label="[14:49:12]">&lt;bmwiedemann&gt;</a></span><span class="message">Hi, when I wrote <a rel="nofollow" href="https://etherpad.opensuse.org/p/reproduciblebuilds-goal">https://etherpad.opensuse.org/p/reproduciblebuilds-goal</a>  it became really obvious why bootstrappable builds are so related. Not just because it requires reproducibility in some places, but also because the goal is pretty much the same.</span></div><div class="line" id="145018"><span class="nick" style="color:#bc80bd"><a href="#145018" label="[14:50:18]">&lt;bmwiedemann&gt;</a></span><span class="message">(with some extra side-benefits like facilitating bootstrapping a new architecture like RISCV or aarch64)</span></div><div class="line" id="145106"><span class="nick" style="color:#bc80bd"><a href="#145106" label="[14:51:06]">&lt;bmwiedemann&gt;</a></span><span class="message">janneke: oriansj: ^</span></div><div class="line" id="145208"><span class="nick" style="color:#d9d9d9"><a href="#145208" label="[14:52:08]">&lt;civodul&gt;</a></span><span class="message">hello bmwiedemann, good to see you here! :-)</span></div><div class="line" id="145327"><span class="nick" style="color:#bc80bd"><a href="#145327" label="[14:53:27]">&lt;bmwiedemann&gt;</a></span><span class="message">had to pay you a visit :-)</span></div><div class="line" id="145502"><span class="nick" style="color:#d9d9d9"><a href="#145502" label="[14:55:02]">&lt;civodul&gt;</a></span><span class="message">the way i see it, &quot;reproducible builds&quot; apply when you actually have source code to build, and that's where bootstrapping comes in: it's about building everything from source</span></div><div class="line" id="145527"><span class="nick" style="color:#bc80bd"><a href="#145527" label="[14:55:27]">&lt;bmwiedemann&gt;</a></span><span class="message">btw, when you write your PR about Mes bootstrapping, you can also mention the prior work of <a rel="nofollow" href="https://github.com/bmwiedemann/ddcpoc">https://github.com/bmwiedemann/ddcpoc</a>  (that was only partially reproducible cross-distro because it used libc and .h files from the host)</span></div><div class="line" id="145614"><span class="nick" style="color:#6c3d55"><a href="#145614" label="[14:56:14]">&lt;janneke&gt;</a></span><span class="message">bmwiedemann: welcome!</span></div><div class="line" id="145622"><span class="nick" style="color:#3c5b35"><a href="#145622" label="[14:56:22]">*</a></span><span class="message">janneke goes to read the etherpads</span></div><div class="line" id="145634"><span class="nick" style="color:#d9d9d9"><a href="#145634" label="[14:56:34]">&lt;civodul&gt;</a></span><span class="message">bmwiedemann: nice!</span></div><div class="line" id="145647"><span class="nick" style="color:#bc80bd"><a href="#145647" label="[14:56:47]">&lt;bmwiedemann&gt;</a></span><span class="message">civodul: yes, that is one of the differences, but the goal is still the same</span></div><div class="line" id="145726"><span class="nick" style="color:#6c3d55"><a href="#145726" label="[14:57:26]">&lt;janneke&gt;</a></span><span class="message">bmwiedemann: ah thanks for that pointer!</span></div><div class="line" id="145738"><span class="nick" style="color:#6c3d55"><a href="#145738" label="[14:57:38]">&lt;janneke&gt;</a></span><span class="message">i think we should really mention that previous effort</span></div><div class="line" id="145800"><span class="nick" style="color:#6c3d55"><a href="#145800" label="[14:58:00]">&lt;janneke&gt;</a></span><span class="message">back then, we could not really *use* the nice result</span></div><div class="line" id="145826"><span class="nick" style="color:#6c3d55"><a href="#145826" label="[14:58:26]">&lt;janneke&gt;</a></span><span class="message">the difference today is that we have actually bootstrapped guix from it (or from a very similar mes, tbh)</span></div><div class="line" id="145948"><span class="nick" style="color:#bc80bd"><a href="#145948" label="[14:59:48]">&lt;bmwiedemann&gt;</a></span><span class="message">got to fetch my Kids from Kindergarten. read you tomorrow.</span></div><div class="line" id="150111"><span class="nick" style="color:#6c3d55"><a href="#150111" label="[15:01:11]">&lt;janneke&gt;</a></span><span class="message">bmwiedemann: have fun, good to see you here!</span></div><div class="line" id="151111"><span class="nick" style="color:#af8d2f"><a href="#151111" label="[15:11:11]">&lt;hannes&gt;</a></span><span class="message">hi</span></div><div class="line" id="152239"><span class="nick" style="color:#d9d9d9"><a href="#152239" label="[15:22:39]">&lt;civodul&gt;</a></span><span class="message">howdy hannes!</span></div><div class="line" id="152332"><span class="nick" style="color:#d9d9d9"><a href="#152332" label="[15:23:32]">&lt;civodul&gt;</a></span><span class="message">good to see you here :-)</span></div><div class="line" id="152414"><span class="nick" style="color:#234e69"><a href="#152414" label="[15:24:14]">&lt;vagrantc&gt;</a></span><span class="message">so far i've got this for soem starter text regarding the cross-distro mes news <a rel="nofollow" href="https://salsa.debian.org/reproducible-builds/reproducible-website/blob/master/_posts/2019-12-XX-reproducible-bootstrap-of-mes-c-compiler.md">https://salsa.debian.org/reproducible-builds/reproducible-website/blob/master/_posts/2019-12-XX-reproducible-bootstrap-of-mes-c-compiler.md</a> </span></div><div class="line" id="152556"><span class="nick" style="color:#6c3d55"><a href="#152556" label="[15:25:56]">&lt;janneke&gt;</a></span><span class="message">hi hannes, welcome!</span></div><div class="line" id="153633"><span class="nick" style="color:#d9d9d9"><a href="#153633" label="[15:36:33]">&lt;civodul&gt;</a></span><span class="message">vagrantc: neat!</span></div><div class="line" id="153657"><span class="nick" style="color:#d9d9d9"><a href="#153657" label="[15:36:57]">&lt;civodul&gt;</a></span><span class="message">BTW janneke, what's the right spelling: &quot;Mes&quot; or &quot;MES&quot;?</span></div><div class="line" id="153718"><span class="nick" style="color:#d9d9d9"><a href="#153718" label="[15:37:18]">&lt;civodul&gt;</a></span><span class="message">i think you use the former, but viewing it as an acronym, the latter also makes sense</span></div><div class="line" id="153856"><span class="nick" style="color:#234e69"><a href="#153856" label="[15:38:56]">&lt;vagrantc&gt;</a></span><span class="message">yeah</span></div><div class="line" id="153857"><span class="nick" style="color:#6c3d55"><a href="#153857" label="[15:38:57]">&lt;janneke&gt;</a></span><span class="message">hmm, i have been using &quot;Mes&quot; which i like somewhat better, but &quot;MES&quot; could me more correct?</span></div><div class="line" id="153923"><span class="nick" style="color:#3c5b35"><a href="#153923" label="[15:39:23]">*</a></span><span class="message">vagrantc isn't partial either way, but happy to have it decided :)</span></div><div class="line" id="154013"><span class="nick" style="color:#6c3d55"><a href="#154013" label="[15:40:13]">&lt;janneke&gt;</a></span><span class="message">vagrantc: i think you just missed bmwiedemann here, pointing to <a rel="nofollow" href="https://github.com/bmwiedemann/ddcpoc">https://github.com/bmwiedemann/ddcpoc</a> </span></div><div class="line" id="154102"><span class="nick" style="color:#6c3d55"><a href="#154102" label="[15:41:02]">&lt;janneke&gt;</a></span><span class="message">the previous cross-distro dcc of tinycc -- but at the time we lacked the &quot;GNU Guix is bootstrapped from this seed&quot; part of the story -- which is kind of important :-)</span></div><div class="line" id="154157"><span class="nick" style="color:#6c3d55"><a href="#154157" label="[15:41:57]">&lt;janneke&gt;</a></span><span class="message">i think it would be good to mention this previous attempt (and possibly what's different now, although you say that very nicely in your draft/suggestion)</span></div><div class="line" id="154351"><span class="nick" style="color:#234e69"><a href="#154351" label="[15:43:51]">&lt;vagrantc&gt;</a></span><span class="message">agreed</span></div><div class="line" id="155925"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="160259"><span class="nick" style="color:#3c5b35"><a href="#160259" label="[16:02:59]">*</a></span><span class="message">janneke just found why the mes-0.19 built mes-0.21-32 (yes it worked!) has the wrong magic number</span></div><div class="line" id="160621"><span class="nick" style="color:#6c3d55"><a href="#160621" label="[16:06:21]">&lt;janneke&gt;</a></span><span class="message">the .s files are identical, the .o files are different -- using the old 0.5.2 mescc tools toolchain</span></div><div class="line" id="160743"><span class="nick" style="color:#3c5b35"><a href="#160743" label="[16:07:43]">*</a></span><span class="message">janneke starts to warm up to `MES'</span></div><div class="line" id="161756"><span class="nick" style="color:#6d2462"><a href="#161756" label="[16:17:56]">&lt;dddddd&gt;</a></span><span class="message">Talking about RISC-V, I'd like to add support to M2-Planet for it, after cleaning up the AArch64 patches.</span></div><div class="line" id="161812"><span class="nick" style="color:#6c3d55"><a href="#161812" label="[16:18:12]">&lt;janneke&gt;</a></span><span class="message">dddddd: sweet!</span></div><div class="line" id="161932"><span class="nick" style="color:#6d2462"><a href="#161932" label="[16:19:32]">&lt;dddddd&gt;</a></span><span class="message">I guess I can use the same tricks, to avoid the complexity of the machine instructions.</span></div><div class="line" id="162027"><span class="nick" style="color:#234e69"><a href="#162027" label="[16:20:27]">&lt;vagrantc&gt;</a></span><span class="message">there's an aarch64 implementation? :)</span></div><div class="line" id="162215"><span class="nick" style="color:#6d2462"><a href="#162215" label="[16:22:15]">&lt;dddddd&gt;</a></span><span class="message">yes, all test passing. Not published yet but oriansj has a copy of the drafts, just in case (;</span></div><div class="line" id="164210"><span class="nick" style="color:#d9d9d9"><a href="#164210" label="[16:42:10]">&lt;civodul&gt;</a></span><span class="message">woow, neat</span></div><div class="line" id="165051"><span class="nick" style="color:#6c3d55"><a href="#165051" label="[16:50:51]">&lt;janneke&gt;</a></span><span class="message">bah, my mescc-tools 0.5.2 build patch for mes (on wip) is not nice or finished</span></div><div class="line" id="170030"><span class="nick" style="color:#234e69"><a href="#170030" label="[17:00:30]">&lt;vagrantc&gt;</a></span><span class="message">why stick with such an old mescc-tools version?</span></div><div class="line" id="170716"><span class="nick" style="color:#6c3d55"><a href="#170716" label="[17:07:16]">&lt;janneke&gt;</a></span><span class="message">vagrantc: civodul had an idea: we might get away with not updating any binary seeds while integrating the scheme-only bootstrap</span></div><div class="line" id="170733"><span class="nick" style="color:#6c3d55"><a href="#170733" label="[17:07:33]">&lt;janneke&gt;</a></span><span class="message">until now, i used/prototyped with mes-0.21 and mescc-tools 0.6.1</span></div><div class="line" id="170751"><span class="nick" style="color:#6c3d55"><a href="#170751" label="[17:07:51]">&lt;janneke&gt;</a></span><span class="message">that works, but it would require updating the binary seeds in guix</span></div><div class="line" id="170811"><span class="nick" style="color:#6c3d55"><a href="#170811" label="[17:08:11]">&lt;janneke&gt;</a></span><span class="message">that's not a pleasant process and we are looking if we can avoid that</span></div><div class="line" id="170843"><span class="nick" style="color:#6c3d55"><a href="#170843" label="[17:08:43]">&lt;janneke&gt;</a></span><span class="message">this is another thing we found, that may add to the sanity of updating the binary seeds after all</span></div><div class="line" id="171536"><span class="nick" style="color:#d9d9d9"><a href="#171536" label="[17:15:36]">&lt;civodul&gt;</a></span><span class="message">ah, we lost vagrantc</span></div><div class="line" id="171601"><span class="nick" style="color:#d9d9d9"><a href="#171601" label="[17:16:01]">&lt;civodul&gt;</a></span><span class="message">janneke: again, if sticking with the old version turns out to be painful, it's fine to switch</span></div><div class="line" id="175343"><span class="nick" style="color:#6c3d55"><a href="#175343" label="[17:53:43]">&lt;janneke&gt;</a></span><span class="message">civodul: thank you</span></div><div class="line" id="175412"><span class="nick" style="color:#3c5b35"><a href="#175412" label="[17:54:12]">*</a></span><span class="message">janneke may reevaluate their pain level calibrations</span></div><br /></div></body></html>