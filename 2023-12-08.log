<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000117"><span class="nick" style="color:#389600"><a href="#000117" label="[00:01:17]">&lt;stikonas&gt;</a></span><span class="message">hmm, so somehow EDK2 on my machine gets already confused by just executing mov rbp, rsp followed by ret</span></div><div class="line" id="000117"><span class="nick" style="color:#389600"><a href="#000117" label="[00:01:17]">&lt;stikonas&gt;</a></span><span class="message">perhaps it expects both rbp and rsp preserved...</span></div><div class="line" id="001849"><span class="nick" style="color:#8dd3c7"><a href="#001849" label="[00:18:49]">&lt;oriansj&gt;</a></span><span class="message">stikonas: is EDK2 touchy about rbp? sounds like an exploitable defect.</span></div><div class="line" id="001902"><span class="nick" style="color:#389600"><a href="#001902" label="[00:19:02]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think so</span></div><div class="line" id="001909"><span class="nick" style="color:#389600"><a href="#001909" label="[00:19:09]">&lt;stikonas&gt;</a></span><span class="message">well, EDK2 is touchy about a lot of things...</span></div><div class="line" id="001919"><span class="nick" style="color:#389600"><a href="#001919" label="[00:19:19]">&lt;stikonas&gt;</a></span><span class="message">it really doesn't do any sanity checking</span></div><div class="line" id="002001"><span class="nick" style="color:#389600"><a href="#002001" label="[00:20:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: or maybe it's better to say that some variants of edk2 are touchy about rbp...</span></div><div class="line" id="002004"><span class="nick" style="color:#8dd3c7"><a href="#002004" label="[00:20:04]">&lt;oriansj&gt;</a></span><span class="message">I guess I shouldn't be surprised; basic sanity checking would be basic good practice when programming.</span></div><div class="line" id="002018"><span class="nick" style="color:#389600"><a href="#002018" label="[00:20:18]">&lt;stikonas&gt;</a></span><span class="message">cause it did work in QEMU...</span></div><div class="line" id="002026"><span class="nick" style="color:#389600"><a href="#002026" label="[00:20:26]">&lt;stikonas&gt;</a></span><span class="message">and it works on 8 year old laptop...</span></div><div class="line" id="002040"><span class="nick" style="color:#389600"><a href="#002040" label="[00:20:40]">&lt;stikonas&gt;</a></span><span class="message">but somehow coreboot with newer EDK2 payload fails...</span></div><div class="line" id="002144"><span class="nick" style="color:#8dd3c7"><a href="#002144" label="[00:21:44]">&lt;oriansj&gt;</a></span><span class="message">so software quality goes down in direct relation to focus on new features?</span></div><div class="line" id="002223"><span class="nick" style="color:#389600"><a href="#002223" label="[00:22:23]">&lt;stikonas&gt;</a></span><span class="message">maybe...</span></div><div class="line" id="002235"><span class="nick" style="color:#389600"><a href="#002235" label="[00:22:35]">&lt;stikonas&gt;</a></span><span class="message">well, I don't think I have more features in it...</span></div><div class="line" id="002240"><span class="nick" style="color:#389600"><a href="#002240" label="[00:22:40]">&lt;stikonas&gt;</a></span><span class="message">but anyway...</span></div><div class="line" id="002306"><span class="nick" style="color:#389600"><a href="#002306" label="[00:23:06]">&lt;stikonas&gt;</a></span><span class="message">everything points that I need to preserve rbp too</span></div><div class="line" id="002324"><span class="nick" style="color:#389600"><a href="#002324" label="[00:23:24]">&lt;stikonas&gt;</a></span><span class="message">which is a bit annoying</span></div><div class="line" id="002332"><span class="nick" style="color:#389600"><a href="#002332" label="[00:23:32]">&lt;stikonas&gt;</a></span><span class="message">as I was using it to save original value of rsp</span></div><div class="line" id="002357"><span class="nick" style="color:#389600"><a href="#002357" label="[00:23:57]">&lt;stikonas&gt;</a></span><span class="message">well, given that I mostly track rsp in each function anyway</span></div><div class="line" id="002402"><span class="nick" style="color:#389600"><a href="#002402" label="[00:24:02]">&lt;stikonas&gt;</a></span><span class="message">I could probably rewrite it to work</span></div><div class="line" id="002412"><span class="nick" style="color:#389600"><a href="#002412" label="[00:24:12]">&lt;stikonas&gt;</a></span><span class="message">(without changing rbp)</span></div><div class="line" id="002441"><span class="nick" style="color:#389600"><a href="#002441" label="[00:24:41]">&lt;stikonas&gt;</a></span><span class="message">well, maybe it was my mistake</span></div><div class="line" id="002448"><span class="nick" style="color:#389600"><a href="#002448" label="[00:24:48]">&lt;stikonas&gt;</a></span><span class="message">calling convention says</span></div><div class="line" id="002449"><span class="nick" style="color:#389600"><a href="#002449" label="[00:24:49]">&lt;stikonas&gt;</a></span><span class="message">The registers RBX, RBP, RDI, RSI, R12, R13, R14, R15, and XMM6-XMM15 are considered nonvolatile and must be saved and restored by a function that uses them.</span></div><div class="line" id="002625"><span class="nick" style="color:#8dd3c7"><a href="#002625" label="[00:26:25]">&lt;oriansj&gt;</a></span><span class="message">so over half the registers are reserved? wow</span></div><div class="line" id="002734"><span class="nick" style="color:#8dd3c7"><a href="#002734" label="[00:27:34]">&lt;oriansj&gt;</a></span><span class="message">they could have just had a fixed memory address block which had the UEFI stack and a pointer to it and a word to store rsp</span></div><div class="line" id="003028"><span class="nick" style="color:#389600"><a href="#003028" label="[00:30:28]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think my hex0.efi is running for longer now</span></div><div class="line" id="003056"><span class="nick" style="color:#389600"><a href="#003056" label="[00:30:56]">&lt;stikonas&gt;</a></span><span class="message">(as I'm going over it and making sure rsp is always poped back after push)</span></div><div class="line" id="012207"><span class="nick" style="color:#389600"><a href="#012207" label="[01:22:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, something more complicated is going on, it's not just rbp or other non-volatile registers not being saved...</span></div><div class="line" id="012445"><span class="nick" style="color:#389600"><a href="#012445" label="[01:24:45]">&lt;stikonas&gt;</a></span><span class="message">in fact the problem is that my first read call does not return</span></div><div class="line" id="012852"><span class="nick" style="color:#389600"><a href="#012852" label="[01:28:52]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's even more complicated...</span></div><div class="line" id="012918"><span class="nick" style="color:#389600"><a href="#012918" label="[01:29:18]">&lt;stikonas&gt;</a></span><span class="message">there are probably 2 issues, one with rbp, the other is with read...</span></div><div class="line" id="022457"><span class="nick" style="color:#2e2a4a"><a href="#022457" label="[02:24:57]">&lt;Googulator&gt;</a></span><span class="message">I'd suggest (on amd64) building a 32-bit native compiler &amp; a 32-&gt;64-bit cross compiler in Fiwix, and then using the cross compiler to make the kernel</span></div><div class="line" id="022512"><span class="nick" style="color:#2e2a4a"><a href="#022512" label="[02:25:12]">&lt;Googulator&gt;</a></span><span class="message">(in the 2nd GCC 4.0.4 build, that is)</span></div><div class="line" id="022551"><span class="nick" style="color:#2e2a4a"><a href="#022551" label="[02:25:51]">&lt;Googulator&gt;</a></span><span class="message">&amp; then, we boot into a 64-bit Linux kernel with a mostly 32-bit userspace, and then recompile everything that's still relevant to 64-bit</span></div><div class="line" id="022604"><span class="nick" style="color:#2e2a4a"><a href="#022604" label="[02:26:04]">&lt;Googulator&gt;</a></span><span class="message">that way, no need to make a 64-bit version of Fiwix</span></div><div class="line" id="022728"><span class="nick" style="color:#2e2a4a"><a href="#022728" label="[02:27:28]">&lt;Googulator&gt;</a></span><span class="message">as for 64-bit UEFIs, I'd go with a 32-bit builder-hex0 that switches to 64-bit for UEFI calls, similar to how it switches to 16-bit for BIOS calls (I hope x86 allows this)</span></div><div class="line" id="022754"><span class="nick" style="color:#2e2a4a"><a href="#022754" label="[02:27:54]">&lt;Googulator&gt;</a></span><span class="message">of course, RISC-V (&amp; ARM, which I'd love to see happen) is a whole different can of worms</span></div><div class="line" id="022823"><span class="nick" style="color:#8dd3c7"><a href="#022823" label="[02:28:23]">&lt;oriansj&gt;</a></span><span class="message">and we are still feeling out ways of doing things. Lots of learning still to go</span></div><div class="line" id="022845"><span class="nick" style="color:#2e2a4a"><a href="#022845" label="[02:28:45]">&lt;Googulator&gt;</a></span><span class="message">the big issue there for moving beyond POSIX bootstrap is hardware/platform description</span></div><div class="line" id="023101"><span class="nick" style="color:#2e2a4a"><a href="#023101" label="[02:31:01]">&lt;Googulator&gt;</a></span><span class="message">there are 2 competing platform description languages there: DTB (which is owned by the Linux kernel, and which maintainers not only refuse to properly standardize/stabilize, but actively sabotage attempts to do so, see the situation around ARM EBBR) and ACPI (which involves running unaudited 3rd party bytecode inside the OS - not great for trusted</span></div><div class="line" id="023101"><span class="nick" style="color:#2e2a4a"><a href="#023101" label="[02:31:01]">&lt;Googulator&gt;</a></span><span class="message">bootstrapping -, and is probably really difficult to bootstrap as well)</span></div><div class="line" id="023132"><span class="nick" style="color:#2e2a4a"><a href="#023132" label="[02:31:32]">&lt;Googulator&gt;</a></span><span class="message">Hopefully bootstrap can be the driver for an effort to make a properly standardized and versioned DTB</span></div><div class="line" id="023340"><span class="nick" style="color:#2e2a4a"><a href="#023340" label="[02:33:40]">&lt;Googulator&gt;</a></span><span class="message">In other news, the bootstrap flash drive passed H2testw, and appears to be healthy - no idea why it just stalled out in the &quot;making swap&quot; step</span></div><div class="line" id="030513"><span class="nick" style="color:#6b8072"><a href="#030513" label="[03:05:13]">&lt;fossy&gt;</a></span><span class="message">that is a way of doing an amd64 bootstrap - and is also possible at the end of the x86 bootstrap chain</span></div><div class="line" id="030536"><span class="nick" style="color:#6b8072"><a href="#030536" label="[03:05:36]">&lt;fossy&gt;</a></span><span class="message">an amd64 *native* bootstrap would also be nice though, especially for the y2038 problem</span></div><div class="line" id="093931"><span class="nick" style="color:#80b1d3"><a href="#093931" label="[09:39:31]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, amd64 native bootstrap would be nice for y2038...</span></div><div class="line" id="094016"><span class="nick" style="color:#80b1d3"><a href="#094016" label="[09:40:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Perhaps we can workaround it in other ways (backport 64 bit time_t to older musl...)</span></div><div class="line" id="094056"><span class="nick" style="color:#80b1d3"><a href="#094056" label="[09:40:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But still, making bootstrap multi-arch generally helps with finding and understanding current bugs</span></div><div class="line" id="144755"><span class="nick" style="color:#80b1d3"><a href="#144755" label="[14:47:55]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Jeremiah Orians&gt; That only works if the kernel also supports 64bit time syscalls but we do have 14 years to sort that</span></div><div class="line" id="145929"><span class="nick" style="color:#6d2462"><a href="#145929" label="[14:59:29]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm working on your PR for builder-hex0. I'm going to need to work through troubles.</span></div><div class="line" id="145944"><span class="nick" style="color:#6d2462"><a href="#145944" label="[14:59:44]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Running make in your builder-hex0 branch no longer works - builder-hex0.hex0 fails building itself in qemu.</span></div><div class="line" id="150044"><span class="nick" style="color:#80b1d3"><a href="#150044" label="[15:00:44]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Jeremiah Orians: oh indeed... Fiwix probably doesn't support that yet</span></div><div class="line" id="150134"><span class="nick" style="color:#6d2462"><a href="#150134" label="[15:01:34]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: This is the &quot;monolithic&quot; variation (no stage1) that loads at 7C00.</span></div><div class="line" id="150445"><span class="nick" style="color:#6d2462"><a href="#150445" label="[15:04:45]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm trying to debug it. It looks like the kernel size increased which requires increasing starting read sector in internalshell.</span></div><div class="line" id="150510"><span class="nick" style="color:#2e2a4a"><a href="#150510" label="[15:05:10]">&lt;Googulator&gt;</a></span><span class="message">Weird, I'm pretty sure I did increase that to sector #8</span></div><div class="line" id="150524"><span class="nick" style="color:#2e2a4a"><a href="#150524" label="[15:05:24]">&lt;Googulator&gt;</a></span><span class="message">(LBA, so equivalent to CHS 0/0/9)</span></div><div class="line" id="150559"><span class="nick" style="color:#6d2462"><a href="#150559" label="[15:05:59]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Oh, maybe thats not the problem. I increased it and it didn't work - so probably something else.</span></div><div class="line" id="150622"><span class="nick" style="color:#2e2a4a"><a href="#150622" label="[15:06:22]">&lt;Googulator&gt;</a></span><span class="message">Is 55AA in the right place?</span></div><div class="line" id="150631"><span class="nick" style="color:#2e2a4a"><a href="#150631" label="[15:06:31]">&lt;Googulator&gt;</a></span><span class="message">I struggled a lot with that, and maybe I messed up.</span></div><div class="line" id="150835"><span class="nick" style="color:#6d2462"><a href="#150835" label="[15:08:35]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: yes, 55 AA appears in right place</span></div><div class="line" id="150902"><span class="nick" style="color:#2e2a4a"><a href="#150902" label="[15:09:02]">&lt;Googulator&gt;</a></span><span class="message">booting it in qemu as a HDD image?</span></div><div class="line" id="150914"><span class="nick" style="color:#6d2462"><a href="#150914" label="[15:09:14]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm surprised you got as far as you did. My documentation was poor. Wasn't expecting any help...</span></div><div class="line" id="150943"><span class="nick" style="color:#2e2a4a"><a href="#150943" label="[15:09:43]">&lt;Googulator&gt;</a></span><span class="message">It probably won't work when booted as a floppy image, unless SeaBIOS is really lenient</span></div><div class="line" id="151001"><span class="nick" style="color:#6d2462"><a href="#151001" label="[15:10:01]">&lt;rickmasters&gt;</a></span><span class="message">Googlulator: yes, hdd image - just running `make`</span></div><div class="line" id="151132"><span class="nick" style="color:#6d2462"><a href="#151132" label="[15:11:32]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: just cloned your repo, git checkout hardware-compat;make</span></div><div class="line" id="151344"><span class="nick" style="color:#6d2462"><a href="#151344" label="[15:13:44]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Oh, also changed 3584 to 4096 in the Makefile</span></div><div class="line" id="153356"><span class="nick" style="color:#6d2462"><a href="#153356" label="[15:33:56]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I can probably figure it out but just wanted to let you know the reason for delay.</span></div><div class="line" id="153416"><span class="nick" style="color:#2e2a4a"><a href="#153416" label="[15:34:16]">&lt;Googulator&gt;</a></span><span class="message">B8 06 00                # mov ax, 6        ; num_sectors = 6</span></div><div class="line" id="153425"><span class="nick" style="color:#2e2a4a"><a href="#153425" label="[15:34:25]">&lt;Googulator&gt;</a></span><span class="message">this is probably it</span></div><div class="line" id="153427"><span class="nick" style="color:#2e2a4a"><a href="#153427" label="[15:34:27]">&lt;Googulator&gt;</a></span><span class="message">needs to be 7ú</span></div><div class="line" id="153430"><span class="nick" style="color:#2e2a4a"><a href="#153430" label="[15:34:30]">&lt;Googulator&gt;</a></span><span class="message">7</span></div><div class="line" id="154342"><span class="nick" style="color:#6d2462"><a href="#154342" label="[15:43:42]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: and the starting sector 1 -&gt; 2  ?</span></div><div class="line" id="154354"><span class="nick" style="color:#2e2a4a"><a href="#154354" label="[15:43:54]">&lt;Googulator&gt;</a></span><span class="message">1 is correct</span></div><div class="line" id="154400"><span class="nick" style="color:#2e2a4a"><a href="#154400" label="[15:44:00]">&lt;Googulator&gt;</a></span><span class="message">because it's LBA</span></div><div class="line" id="154404"><span class="nick" style="color:#2e2a4a"><a href="#154404" label="[15:44:04]">&lt;Googulator&gt;</a></span><span class="message">LBA counts from 0</span></div><div class="line" id="154431"><span class="nick" style="color:#2e2a4a"><a href="#154431" label="[15:44:31]">&lt;Googulator&gt;</a></span><span class="message">MBR is LBA #0</span></div><div class="line" id="154733"><span class="nick" style="color:#6d2462"><a href="#154733" label="[15:47:33]">&lt;rickmasters&gt;</a></span><span class="message">ok. Just changing 6 -&gt; 7, not working yet</span></div><div class="line" id="160152"><span class="nick" style="color:#2e2a4a"><a href="#160152" label="[16:01:52]">&lt;Googulator&gt;</a></span><span class="message">did some debugging, and what I see really doesn't make sense</span></div><div class="line" id="160226"><span class="nick" style="color:#2e2a4a"><a href="#160226" label="[16:02:26]">&lt;Googulator&gt;</a></span><span class="message">I can see (E)IP point to &quot;call resume_32bit_mode&quot;</span></div><div class="line" id="160418"><span class="nick" style="color:#2e2a4a"><a href="#160418" label="[16:04:18]">&lt;Googulator&gt;</a></span><span class="message">&amp; then I &quot;step into&quot; - and it ends up 2 bytes past the beginning of that &quot;call&quot; instruction, at which point if you disassemble, you get nonsense</span></div><div class="line" id="160436"><span class="nick" style="color:#2e2a4a"><a href="#160436" label="[16:04:36]">&lt;Googulator&gt;</a></span><span class="message">did we somehow trigger a qemu bug?</span></div><div class="line" id="160830"><span class="nick" style="color:#2e2a4a"><a href="#160830" label="[16:08:30]">&lt;Googulator&gt;</a></span><span class="message">oh...</span></div><div class="line" id="160837"><span class="nick" style="color:#2e2a4a"><a href="#160837" label="[16:08:37]">&lt;Googulator&gt;</a></span><span class="message">near/far call mismatch</span></div><div class="line" id="161210"><span class="nick" style="color:#2e2a4a"><a href="#161210" label="[16:12:10]">&lt;Googulator&gt;</a></span><span class="message">read_sectors_16 and write_sectors_16 end in CB instead of the correct C3</span></div><div class="line" id="161231"><span class="nick" style="color:#2e2a4a"><a href="#161231" label="[16:12:31]">&lt;Googulator&gt;</a></span><span class="message">how on Earth did this work in live-bootstrap then?</span></div><div class="line" id="161411"><span class="nick" style="color:#2e2a4a"><a href="#161411" label="[16:14:11]">&lt;Googulator&gt;</a></span><span class="message">fixing that, it now fails at the very end, when trying to write the result back</span></div><div class="line" id="161421"><span class="nick" style="color:#2e2a4a"><a href="#161421" label="[16:14:21]">&lt;Googulator&gt;</a></span><span class="message">I of course never tested that feature</span></div><div class="line" id="163152"><span class="nick" style="color:#2e2a4a"><a href="#163152" label="[16:31:52]">&lt;Googulator&gt;</a></span><span class="message">hmm, error 01h</span></div><div class="line" id="163154"><span class="nick" style="color:#2e2a4a"><a href="#163154" label="[16:31:54]">&lt;Googulator&gt;</a></span><span class="message">invalid command</span></div><div class="line" id="163205"><span class="nick" style="color:#2e2a4a"><a href="#163205" label="[16:32:05]">&lt;Googulator&gt;</a></span><span class="message">does SeaBIOS not implement LBA write?</span></div><div class="line" id="163506"><span class="nick" style="color:#2e2a4a"><a href="#163506" label="[16:35:06]">&lt;Googulator&gt;</a></span><span class="message">ok, this makes sense</span></div><div class="line" id="163522"><span class="nick" style="color:#2e2a4a"><a href="#163522" label="[16:35:22]">&lt;Googulator&gt;</a></span><span class="message">addr_packet is 1000010000A00000000000000000000001</span></div><div class="line" id="163531"><span class="nick" style="color:#2e2a4a"><a href="#163531" label="[16:35:31]">&lt;Googulator&gt;</a></span><span class="message">crazy high LBA</span></div><div class="line" id="163543"><span class="nick" style="color:#2e2a4a"><a href="#163543" label="[16:35:43]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/coreboot/seabios/blob/master/src/disk.c#L171C26-L171C26">https://github.com/coreboot/seabios/blob/master/src/disk.c#L171C26-L171C26</a> </span></div><div class="line" id="163547"><span class="nick" style="color:#2e2a4a"><a href="#163547" label="[16:35:47]">&lt;Googulator&gt;</a></span><span class="message">but why?</span></div><div class="line" id="165510"><span class="nick" style="color:#6d2462"><a href="#165510" label="[16:55:10]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: actually it looks like the LBA is zero in the addr_packet you posted. There is an extra byte on the end 01 ?</span></div><div class="line" id="165809"><span class="nick" style="color:#2e2a4a"><a href="#165809" label="[16:58:09]">&lt;Googulator&gt;</a></span><span class="message">oh, right...</span></div><div class="line" id="165830"><span class="nick" style="color:#2e2a4a"><a href="#165830" label="[16:58:30]">&lt;Googulator&gt;</a></span><span class="message">that 01 is actually the error code from the next write attempt</span></div><div class="line" id="165907"><span class="nick" style="color:#2e2a4a"><a href="#165907" label="[16:59:07]">&lt;Googulator&gt;</a></span><span class="message">10 00 0100 00A0:0000 0000000000000000 is the actual address packet (broken up for readability)</span></div><div class="line" id="165925"><span class="nick" style="color:#2e2a4a"><a href="#165925" label="[16:59:25]">&lt;Googulator&gt;</a></span><span class="message">&amp; that looks correct</span></div><div class="line" id="165948"><span class="nick" style="color:#2e2a4a"><a href="#165948" label="[16:59:48]">&lt;Googulator&gt;</a></span><span class="message">it's &quot;write 1 sector from memory address 0000:A000 to sector 0&quot;</span></div><div class="line" id="172751"><span class="nick" style="color:#6d2462"><a href="#172751" label="[17:27:51]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: if I comment out the line to check the carry flag, it works</span></div><div class="line" id="172833"><span class="nick" style="color:#6d2462"><a href="#172833" label="[17:28:33]">&lt;rickmasters&gt;</a></span><span class="message">I mean, replace with two no-ops, 90 90</span></div><div class="line" id="173234"><span class="nick" style="color:#234e69"><a href="#173234" label="[17:32:34]">&lt;GoogulatorMobile&gt;</a></span><span class="message">&quot;works&quot;</span></div><div class="line" id="173249"><span class="nick" style="color:#234e69"><a href="#173249" label="[17:32:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Carry flag is how int 13h indicates success vs failure</span></div><div class="line" id="173409"><span class="nick" style="color:#6d2462"><a href="#173409" label="[17:34:09]">&lt;rickmasters&gt;</a></span><span class="message">right, but I was thinking it seems to have written ok but now that I think about it, its building itself so it probably just looks like it wrote ok</span></div><div class="line" id="173931"><span class="nick" style="color:#234e69"><a href="#173931" label="[17:39:31]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Looking at the SeaBIOS source, there's no reason why CHS would work and LBA would fail</span></div><div class="line" id="173942"><span class="nick" style="color:#234e69"><a href="#173942" label="[17:39:42]">&lt;GoogulatorMobile&gt;</a></span><span class="message">SeaBIOS internally translates everything to LBA</span></div><div class="line" id="173949"><span class="nick" style="color:#234e69"><a href="#173949" label="[17:39:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Even floppy access</span></div><div class="line" id="183900"><span class="nick" style="color:#6d2462"><a href="#183900" label="[18:39:00]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I compiled a debug version of seabios and the LBA is indeed wrong inside the BIOS. It's correct for reads.</span></div><div class="line" id="184011"><span class="nick" style="color:#6d2462"><a href="#184011" label="[18:40:11]">&lt;rickmasters&gt;</a></span><span class="message">dop.lba = 7b00bcd08ec08ed8</span></div><div class="line" id="184308"><span class="nick" style="color:#6d2462"><a href="#184308" label="[18:43:08]">&lt;rickmasters&gt;</a></span><span class="message">Offhand it looks like you're setting disk packet to di but it should be si</span></div><div class="line" id="184543"><span class="nick" style="color:#6d2462"><a href="#184543" label="[18:45:43]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: mov di, addr_packet</span></div><div class="line" id="184557"><span class="nick" style="color:#6d2462"><a href="#184557" label="[18:45:57]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: both reads and writes use si: <a rel="nofollow" href="https://github.com/coreboot/seabios/blob/a6ed6b701f0a57db0569ab98b0661c12a6ec3ff8/src/disk.c#L166">https://github.com/coreboot/seabios/blob/a6ed6b701f0a57db0569ab98b0661c12a6ec3ff8/src/disk.c#L166</a> </span></div><div class="line" id="185502"><span class="nick" style="color:#234e69"><a href="#185502" label="[18:55:02]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Wait, really?</span></div><div class="line" id="185550"><span class="nick" style="color:#234e69"><a href="#185550" label="[18:55:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Reading the docs again - indeed, both use es:di</span></div><div class="line" id="185611"><span class="nick" style="color:#234e69"><a href="#185611" label="[18:56:11]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Sorry, ds:si</span></div><div class="line" id="185711"><span class="nick" style="color:#234e69"><a href="#185711" label="[18:57:11]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Also, 02h and 03h both use es:bx... Why do I remember reading the docs for int 13h and seeing ds:si for 02h and 42h, and es:di for 03h and 43h?</span></div><div class="line" id="185733"><span class="nick" style="color:#234e69"><a href="#185733" label="[18:57:33]">&lt;GoogulatorMobile&gt;</a></span><span class="message">...well, that explains it</span></div><div class="line" id="190336"><span class="nick" style="color:#6d2462"><a href="#190336" label="[19:03:36]">&lt;rickmasters&gt;</a></span><span class="message">it seems to really work with mov si, addr_packet</span></div><div class="line" id="191155"><span class="nick" style="color:#6d2462"><a href="#191155" label="[19:11:55]">&lt;rickmasters&gt;</a></span><span class="message">There is a push di before the int 13 and a couple pop di's that i think aren't necessary?</span></div><div class="line" id="191218"><span class="nick" style="color:#6d2462"><a href="#191218" label="[19:12:18]">&lt;rickmasters&gt;</a></span><span class="message">... after changing to mov si, addr_packet</span></div><div class="line" id="191840"><span class="nick" style="color:#6d2462"><a href="#191840" label="[19:18:40]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I think we got it figured out. I'm stepping away for an hour or so...</span></div><div class="line" id="233745"><span class="nick" style="color:#389600"><a href="#233745" label="[23:37:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj, GoogulatorMobile: I have a new theory why I have some problems in UEFI...</span></div><div class="line" id="233810"><span class="nick" style="color:#389600"><a href="#233810" label="[23:38:10]">&lt;stikonas&gt;</a></span><span class="message">found this in the docs: A caller must always call with the stack 16-byte aligned. And at least with the first read call it seems to help</span></div><div class="line" id="233835"><span class="nick" style="color:#389600"><a href="#233835" label="[23:38:35]">&lt;stikonas&gt;</a></span><span class="message">that is quite an annoying restriction...</span></div><div class="line" id="234212"><span class="nick" style="color:#389600"><a href="#234212" label="[23:42:12]">&lt;stikonas&gt;</a></span><span class="message">I guess I just have to manually track stack alignment...</span></div><div class="line" id="235844"><span class="nick" style="color:#6c3d55"><a href="#235844" label="[23:58:44]">&lt;mihi&gt;</a></span><span class="message">fossy, stikonas: re y2038: I don't think we have that many time sources when bootstrapping (probably only the RTC), so the used 32-bit kernels could just be patched to subtract e.g. 40 years from current date when reading from RTC. I don't think anybody cares about timestamps of bootstrapped files :) A better reason for native 64-bit bootstrap is that maybe at some point in the future, 32-bit compatibility of</span></div><div class="line" id="235844"><span class="nick" style="color:#6c3d55"><a href="#235844" label="[23:58:44]">&lt;mihi&gt;</a></span><span class="message">current CPUs might go away...</span></div><div class="line" id="235916"><span class="nick" style="color:#389600"><a href="#235916" label="[23:59:16]">&lt;stikonas&gt;</a></span><span class="message">mihi: indeed, that is another reason</span></div><div class="line" id="235928"><span class="nick" style="color:#389600"><a href="#235928" label="[23:59:28]">&lt;stikonas&gt;</a></span><span class="message">we are already losing legacy BIOS mode...</span></div><div class="line" id="235944"><span class="nick" style="color:#6c3d55"><a href="#235944" label="[23:59:44]">&lt;mihi&gt;</a></span><span class="message">stikonas, that's a weird coincidence. Current gcc on Linux also requires 16-byte stack alignment, and some libs (e.g. SDL) segfault if you don't obey it in your custom assembly code calling into SDL :D</span></div><div class="line" id="235955"><span class="nick" style="color:#389600"><a href="#235955" label="[23:59:55]">&lt;stikonas&gt;</a></span><span class="message">it's probably for performance reason</span></div><br /></div></body></html>