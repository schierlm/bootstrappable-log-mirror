<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-11-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001919"><span class="nick" style="color:#389600"><a href="#001919" label="[00:19:19]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well part of me wanted to pass environmented variables as an argument but I have been thinking about it further and linux's /proc gave me a better idea.</span></div><div class="line" id="002037"><span class="nick" style="color:#389600"><a href="#002037" label="[00:20:37]">&lt;oriansj&gt;</a></span><span class="message">specifically /proc/${pid}/environ</span></div><div class="line" id="002332"><span class="nick" style="color:#8dd3c7"><a href="#002332" label="[00:23:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, at some point you were non-persistent suggesting UEFI variables</span></div><div class="line" id="002351"><span class="nick" style="color:#8dd3c7"><a href="#002351" label="[00:23:51]">&lt;stikonas&gt;</a></span><span class="message">so how would this /proc idea work?</span></div><div class="line" id="002433"><span class="nick" style="color:#8dd3c7"><a href="#002433" label="[00:24:33]">&lt;stikonas&gt;</a></span><span class="message">at the moment I'm in the progress of implementing spawn(program, argv, envp) but first iteration would only deal with program and argv</span></div><div class="line" id="002450"><span class="nick" style="color:#8dd3c7"><a href="#002450" label="[00:24:50]">&lt;stikonas&gt;</a></span><span class="message">the good but probably expected thing is that local kaem variables work</span></div><div class="line" id="002522"><span class="nick" style="color:#8dd3c7"><a href="#002522" label="[00:25:22]">&lt;stikonas&gt;</a></span><span class="message">there was a small isue with PATH but easy to solve</span></div><div class="line" id="002533"><span class="nick" style="color:#8dd3c7"><a href="#002533" label="[00:25:33]">&lt;stikonas&gt;</a></span><span class="message">just had to add PATH=/ to the first kaem script</span></div><div class="line" id="002554"><span class="nick" style="color:#8dd3c7"><a href="#002554" label="[00:25:54]">&lt;stikonas&gt;</a></span><span class="message">it was preset to /bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span></div><div class="line" id="002607"><span class="nick" style="color:#8dd3c7"><a href="#002607" label="[00:26:07]">&lt;stikonas&gt;</a></span><span class="message">and even relative paths didn't work</span></div><div class="line" id="002628"><span class="nick" style="color:#8dd3c7"><a href="#002628" label="[00:26:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so you whink we just create a file /proc/pid/environ?</span></div><div class="line" id="002643"><span class="nick" style="color:#8dd3c7"><a href="#002643" label="[00:26:43]">&lt;stikonas&gt;</a></span><span class="message">though it's not very clear what is $pid?</span></div><div class="line" id="002710"><span class="nick" style="color:#8dd3c7"><a href="#002710" label="[00:27:10]">&lt;stikonas&gt;</a></span><span class="message">given that we have no parallel programs, everything is single threaded and spawned</span></div><div class="line" id="002718"><span class="nick" style="color:#8dd3c7"><a href="#002718" label="[00:27:18]">&lt;stikonas&gt;</a></span><span class="message">it might even be just /proc/environ...</span></div><div class="line" id="004326"><span class="nick" style="color:#389600"><a href="#004326" label="[00:43:26]">&lt;oriansj&gt;</a></span><span class="message">or just a temp file which we pass the name to</span></div><div class="line" id="004414"><span class="nick" style="color:#389600"><a href="#004414" label="[00:44:14]">&lt;oriansj&gt;</a></span><span class="message">and the libc unpacks it into the array needed by FUNCTION_main</span></div><div class="line" id="004611"><span class="nick" style="color:#8dd3c7"><a href="#004611" label="[00:46:11]">&lt;stikonas&gt;</a></span><span class="message">that would work... Possibly a bit slower as writes/reads to hard drive are needed</span></div><div class="line" id="004637"><span class="nick" style="color:#8dd3c7"><a href="#004637" label="[00:46:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, let me think...</span></div><div class="line" id="004650"><span class="nick" style="color:#8dd3c7"><a href="#004650" label="[00:46:50]">&lt;stikonas&gt;</a></span><span class="message">or maybe better look at some specs</span></div><div class="line" id="004749"><span class="nick" style="color:#8dd3c7"><a href="#004749" label="[00:47:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think there might be a simpler option</span></div><div class="line" id="004819"><span class="nick" style="color:#389600"><a href="#004819" label="[00:48:19]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="004827"><span class="nick" style="color:#8dd3c7"><a href="#004827" label="[00:48:27]">&lt;stikonas&gt;</a></span><span class="message">we can probably just pass it via LoadOptions but without any huge hacks</span></div><div class="line" id="004839"><span class="nick" style="color:#389600"><a href="#004839" label="[00:48:39]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="004858"><span class="nick" style="color:#389600"><a href="#004858" label="[00:48:58]">&lt;oriansj&gt;</a></span><span class="message">assuming we don't run into any annoying limitations that way</span></div><div class="line" id="004902"><span class="nick" style="color:#8dd3c7"><a href="#004902" label="[00:49:02]">&lt;stikonas&gt;</a></span><span class="message">we have both LoadOptions and LoadOptionSize, so what if we say that LoadOptions terminate with zero byte</span></div><div class="line" id="004916"><span class="nick" style="color:#8dd3c7"><a href="#004916" label="[00:49:16]">&lt;stikonas&gt;</a></span><span class="message">and zero byte adds a argv/evnp separator</span></div><div class="line" id="004946"><span class="nick" style="color:#8dd3c7"><a href="#004946" label="[00:49:46]">&lt;stikonas&gt;</a></span><span class="message">and libc continues to read pass that zero byte till LoadOptionsSize ends (and 2nd part is envp)</span></div><div class="line" id="004948"><span class="nick" style="color:#8dd3c7"><a href="#004948" label="[00:49:48]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004949"><span class="nick" style="color:#389600"><a href="#004949" label="[00:49:49]">&lt;oriansj&gt;</a></span><span class="message">args :: envp</span></div><div class="line" id="005001"><span class="nick" style="color:#8dd3c7"><a href="#005001" label="[00:50:01]">&lt;stikonas&gt;</a></span><span class="message">we could evne use zero byte separator</span></div><div class="line" id="005010"><span class="nick" style="color:#8dd3c7"><a href="#005010" label="[00:50:10]">&lt;stikonas&gt;</a></span><span class="message">which would never be used inside command line argument</span></div><div class="line" id="005140"><span class="nick" style="color:#8dd3c7"><a href="#005140" label="[00:51:40]">&lt;stikonas&gt;</a></span><span class="message">hmm, though this way would still need some care not to break programs launched by kaem-optional or UEFI shell</span></div><div class="line" id="005237"><span class="nick" style="color:#8dd3c7"><a href="#005237" label="[00:52:37]">&lt;stikonas&gt;</a></span><span class="message">but i think it could work</span></div><div class="line" id="005300"><span class="nick" style="color:#8dd3c7"><a href="#005300" label="[00:53:00]">&lt;stikonas&gt;</a></span><span class="message">but on the other hand, passing it via another file might be even simpler...</span></div><div class="line" id="005307"><span class="nick" style="color:#8dd3c7"><a href="#005307" label="[00:53:07]">&lt;stikonas&gt;</a></span><span class="message">so I'm not sure yet what's better</span></div><div class="line" id="005427"><span class="nick" style="color:#8dd3c7"><a href="#005427" label="[00:54:27]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think current implementation of _process_load_options would already stop at null byte</span></div><div class="line" id="005502"><span class="nick" style="color:#8dd3c7"><a href="#005502" label="[00:55:02]">&lt;stikonas&gt;</a></span><span class="message">so we just need to process the rest of the string</span></div><div class="line" id="005525"><span class="nick" style="color:#8dd3c7"><a href="#005525" label="[00:55:25]">&lt;stikonas&gt;</a></span><span class="message">so right now we have wcstombs(load_options, image-&gt;load_options, image-&gt;load_options_size);</span></div><div class="line" id="005600"><span class="nick" style="color:#8dd3c7"><a href="#005600" label="[00:56:00]">&lt;stikonas&gt;</a></span><span class="message">which will convert the whole wstring to &quot;char string&quot; and might even contain zero byte in the middle</span></div><div class="line" id="005618"><span class="nick" style="color:#8dd3c7"><a href="#005618" label="[00:56:18]">&lt;stikonas&gt;</a></span><span class="message">actually, I might be lying, met me check wcstombs...</span></div><div class="line" id="005719"><span class="nick" style="color:#8dd3c7"><a href="#005719" label="[00:57:19]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, current implementation of wcstobs would stop at 0...</span></div><div class="line" id="005750"><span class="nick" style="color:#8dd3c7"><a href="#005750" label="[00:57:50]">&lt;stikonas&gt;</a></span><span class="message">though perhaps we can just do strlen (wcstombs) and continue parsing LoadOptions from there</span></div><div class="line" id="005946"><span class="nick" style="color:#8dd3c7"><a href="#005946" label="[00:59:46]">&lt;stikonas&gt;</a></span><span class="message">hmm, so perhaps args \0 envp would work</span></div><div class="line" id="010011"><span class="nick" style="color:#8dd3c7"><a href="#010011" label="[01:00:11]">&lt;stikonas&gt;</a></span><span class="message">just need to convert envp string to array, but that's not so different from argv work we are already doing</span></div><div class="line" id="010102"><span class="nick" style="color:#8dd3c7"><a href="#010102" label="[01:01:02]">&lt;stikonas&gt;</a></span><span class="message">I guess this whole system I'm using has a limitation that spaces are argument sparators</span></div><div class="line" id="010109"><span class="nick" style="color:#8dd3c7"><a href="#010109" label="[01:01:09]">&lt;stikonas&gt;</a></span><span class="message">so one can't easily pass them inside argument</span></div><div class="line" id="010117"><span class="nick" style="color:#8dd3c7"><a href="#010117" label="[01:01:17]">&lt;stikonas&gt;</a></span><span class="message">i.e. paths with spaces are not supported</span></div><div class="line" id="010134"><span class="nick" style="color:#8dd3c7"><a href="#010134" label="[01:01:34]">&lt;stikonas&gt;</a></span><span class="message">but that was already limitation of kaem-optional</span></div><div class="line" id="010708"><span class="nick" style="color:#389600"><a href="#010708" label="[01:07:08]">&lt;oriansj&gt;</a></span><span class="message">hence the question of how best to work around UEFI if it gets in our way of doing the basics</span></div><div class="line" id="010913"><span class="nick" style="color:#8dd3c7"><a href="#010913" label="[01:09:13]">&lt;stikonas&gt;</a></span><span class="message">well, given that we already have this limitation in kaem-optional and current M2libc</span></div><div class="line" id="010921"><span class="nick" style="color:#8dd3c7"><a href="#010921" label="[01:09:21]">&lt;stikonas&gt;</a></span><span class="message">I think we can try to live without spaces in paths</span></div><div class="line" id="010945"><span class="nick" style="color:#8dd3c7"><a href="#010945" label="[01:09:45]">&lt;stikonas&gt;</a></span><span class="message">(and only paths in command line matter, not all paths)</span></div><div class="line" id="011013"><span class="nick" style="color:#8dd3c7"><a href="#011013" label="[01:10:13]">&lt;stikonas&gt;</a></span><span class="message">given that we should be able to control most of the source until better kernel (fiwix?)</span></div><div class="line" id="011019"><span class="nick" style="color:#8dd3c7"><a href="#011019" label="[01:10:19]">&lt;stikonas&gt;</a></span><span class="message">it's probably an acceptable limitation</span></div><div class="line" id="011123"><span class="nick" style="color:#8dd3c7"><a href="#011123" label="[01:11:23]">&lt;stikonas&gt;</a></span><span class="message">and if we really need spaces in arguments</span></div><div class="line" id="011148"><span class="nick" style="color:#389600"><a href="#011148" label="[01:11:48]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="011152"><span class="nick" style="color:#8dd3c7"><a href="#011152" label="[01:11:52]">&lt;stikonas&gt;</a></span><span class="message">we could probably do something too with them in libc but maybe let's worry only if we really need it</span></div><div class="line" id="012149"><span class="nick" style="color:#8dd3c7"><a href="#012149" label="[01:21:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, quite a few small issues in kaem...</span></div><div class="line" id="012546"><span class="nick" style="color:#8dd3c7"><a href="#012546" label="[01:25:46]">&lt;stikonas&gt;</a></span><span class="message">I've tried adding PATH=&quot;/&quot; to help with finding binaries, but then somehow that / doubled and I'm ending up with //amd64/bin/kaem.efi (which for some reason fails to work)</span></div><div class="line" id="013035"><span class="nick" style="color:#8dd3c7"><a href="#013035" label="[01:30:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, that happens because PATH=&quot;/&quot; does not play nicely with find_executable function</span></div><div class="line" id="013503"><span class="nick" style="color:#8dd3c7"><a href="#013503" label="[01:35:03]">&lt;stikonas&gt;</a></span><span class="message">ok, actually I should just keep ./ rather than remove it as I was doing in kaem-optional and it seems to work</span></div><div class="line" id="014908"><span class="nick" style="color:#8dd3c7"><a href="#014908" label="[01:49:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I've now reached the place where uint16_t and uint32_t might be useful...</span></div><div class="line" id="014947"><span class="nick" style="color:#8dd3c7"><a href="#014947" label="[01:49:47]">&lt;stikonas&gt;</a></span><span class="message">to be able to spawn other programs, we need the following struct: <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/efi/device_path_protocol.h">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/efi/device_path_protocol.h</a> </span></div><div class="line" id="015042"><span class="nick" style="color:#389600"><a href="#015042" label="[01:50:42]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="015043"><span class="nick" style="color:#8dd3c7"><a href="#015043" label="[01:50:43]">&lt;stikonas&gt;</a></span><span class="message">so not sure whether we should add them to M2-Planet or use char[] workarounds</span></div><div class="line" id="015120"><span class="nick" style="color:#389600"><a href="#015120" label="[01:51:20]">&lt;oriansj&gt;</a></span><span class="message">well uint32_t is just unsigned</span></div><div class="line" id="015130"><span class="nick" style="color:#8dd3c7"><a href="#015130" label="[01:51:30]">&lt;stikonas&gt;</a></span><span class="message">isn't in M2-Planet unsigned 64-bit?</span></div><div class="line" id="015156"><span class="nick" style="color:#8dd3c7"><a href="#015156" label="[01:51:56]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L90">https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L90</a> </span></div><div class="line" id="015159"><span class="nick" style="color:#8dd3c7"><a href="#015159" label="[01:51:59]">&lt;stikonas&gt;</a></span><span class="message">it's register_size</span></div><div class="line" id="015213"><span class="nick" style="color:#389600"><a href="#015213" label="[01:52:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well it is what the C spec kind of indicated</span></div><div class="line" id="015221"><span class="nick" style="color:#389600"><a href="#015221" label="[01:52:21]">&lt;oriansj&gt;</a></span><span class="message">and the laziest way to implement it</span></div><div class="line" id="015502"><span class="nick" style="color:#389600"><a href="#015502" label="[01:55:02]">&lt;oriansj&gt;</a></span><span class="message">so on 32 bit platforms it is 32bit but on 64bit platforms it is 64bit</span></div><div class="line" id="015631"><span class="nick" style="color:#8dd3c7"><a href="#015631" label="[01:56:31]">&lt;stikonas&gt;</a></span><span class="message">hmm, so do you know what would be required to add uint32_t</span></div><div class="line" id="015644"><span class="nick" style="color:#389600"><a href="#015644" label="[01:56:44]">&lt;oriansj&gt;</a></span><span class="message">not much actually</span></div><div class="line" id="015647"><span class="nick" style="color:#8dd3c7"><a href="#015647" label="[01:56:47]">&lt;stikonas&gt;</a></span><span class="message">if we just add another type with hardcoded 32</span></div><div class="line" id="015649"><span class="nick" style="color:#8dd3c7"><a href="#015649" label="[01:56:49]">&lt;stikonas&gt;</a></span><span class="message">would it just work?</span></div><div class="line" id="015655"><span class="nick" style="color:#8dd3c7"><a href="#015655" label="[01:56:55]">&lt;stikonas&gt;</a></span><span class="message">I guess it might</span></div><div class="line" id="015718"><span class="nick" style="color:#8dd3c7"><a href="#015718" label="[01:57:18]">&lt;stikonas&gt;</a></span><span class="message">at least for our usecase we are not even worried about overflows</span></div><div class="line" id="015737"><span class="nick" style="color:#8dd3c7"><a href="#015737" label="[01:57:37]">&lt;stikonas&gt;</a></span><span class="message">it's just to keep struct offsets right</span></div><div class="line" id="015746"><span class="nick" style="color:#8dd3c7"><a href="#015746" label="[01:57:46]">&lt;stikonas&gt;</a></span><span class="message">we are not doing much arithmetic on those values</span></div><div class="line" id="015805"><span class="nick" style="color:#8dd3c7"><a href="#015805" label="[01:58:05]">&lt;stikonas&gt;</a></span><span class="message">well, perhaps we should add it</span></div><div class="line" id="015817"><span class="nick" style="color:#8dd3c7"><a href="#015817" label="[01:58:17]">&lt;stikonas&gt;</a></span><span class="message">I can then also rework some of that early GUID initialization stuff...</span></div><div class="line" id="015827"><span class="nick" style="color:#389600"><a href="#015827" label="[01:58:27]">&lt;oriansj&gt;</a></span><span class="message">if we update expression in cc_core.c and define a few types in cc_types.c that'll solve most of it (only arrarys would need a little extra work)</span></div><div class="line" id="020001"><span class="nick" style="color:#8dd3c7"><a href="#020001" label="[02:00:01]">&lt;stikonas&gt;</a></span><span class="message">that STORE_INTEGER stuff?</span></div><div class="line" id="020013"><span class="nick" style="color:#8dd3c7"><a href="#020013" label="[02:00:13]">&lt;stikonas&gt;</a></span><span class="message">or mov_[rbx],rax on amd64...</span></div><div class="line" id="020016"><span class="nick" style="color:#389600"><a href="#020016" label="[02:00:16]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="020042"><span class="nick" style="color:#389600"><a href="#020042" label="[02:00:42]">&lt;oriansj&gt;</a></span><span class="message">basically we only need to do the correct thing loading the value into the register and storing it from the register</span></div><div class="line" id="020113"><span class="nick" style="color:#389600"><a href="#020113" label="[02:01:13]">&lt;oriansj&gt;</a></span><span class="message">(although if we want uint64_t to work correctly on 32bit architectures, it'll take a good bit more work)</span></div><div class="line" id="020223"><span class="nick" style="color:#8dd3c7"><a href="#020223" label="[02:02:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess we need to add defines for WORD PTR (as in GAS)</span></div><div class="line" id="020243"><span class="nick" style="color:#8dd3c7"><a href="#020243" label="[02:02:43]">&lt;stikonas&gt;</a></span><span class="message">well, we might skip uint64_t then...</span></div><div class="line" id="020305"><span class="nick" style="color:#8dd3c7"><a href="#020305" label="[02:03:05]">&lt;stikonas&gt;</a></span><span class="message">at least on amd64 I only need 16 and 32-bit</span></div><div class="line" id="020314"><span class="nick" style="color:#8dd3c7"><a href="#020314" label="[02:03:14]">&lt;stikonas&gt;</a></span><span class="message">and for unsigned I assumed 64-bits</span></div><div class="line" id="020329"><span class="nick" style="color:#8dd3c7"><a href="#020329" label="[02:03:29]">&lt;stikonas&gt;</a></span><span class="message">maybe ideally it would be uint64_t there but oh well...</span></div><div class="line" id="020338"><span class="nick" style="color:#389600"><a href="#020338" label="[02:03:38]">&lt;oriansj&gt;</a></span><span class="message">well just adding int32_t, uint32_t, int16_t and uint16_t shouldn't be too complex</span></div><div class="line" id="020348"><span class="nick" style="color:#8dd3c7"><a href="#020348" label="[02:03:48]">&lt;stikonas&gt;</a></span><span class="message">well, need to do it for all arches...</span></div><div class="line" id="020404"><span class="nick" style="color:#8dd3c7"><a href="#020404" label="[02:04:04]">&lt;stikonas&gt;</a></span><span class="message">but ok, probably worth doing</span></div><div class="line" id="020507"><span class="nick" style="color:#389600"><a href="#020507" label="[02:05:07]">&lt;oriansj&gt;</a></span><span class="message">and did you need 16bit behavior to be preserved past multiple operations?</span></div><div class="line" id="020523"><span class="nick" style="color:#8dd3c7"><a href="#020523" label="[02:05:23]">&lt;stikonas&gt;</a></span><span class="message">I don't think so</span></div><div class="line" id="020538"><span class="nick" style="color:#8dd3c7"><a href="#020538" label="[02:05:38]">&lt;stikonas&gt;</a></span><span class="message">in M2libc (UEFI) it's really just setting struct data</span></div><div class="line" id="020545"><span class="nick" style="color:#8dd3c7"><a href="#020545" label="[02:05:45]">&lt;stikonas&gt;</a></span><span class="message">I don't think I need any operations</span></div><div class="line" id="020556"><span class="nick" style="color:#389600"><a href="#020556" label="[02:05:56]">&lt;oriansj&gt;</a></span><span class="message">so just load/store working</span></div><div class="line" id="020600"><span class="nick" style="color:#8dd3c7"><a href="#020600" label="[02:06:00]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="020611"><span class="nick" style="color:#389600"><a href="#020611" label="[02:06:11]">&lt;oriansj&gt;</a></span><span class="message">ok, that is very simple</span></div><div class="line" id="020622"><span class="nick" style="color:#8dd3c7"><a href="#020622" label="[02:06:22]">&lt;stikonas&gt;</a></span><span class="message">well, just need to get defines for all arches...</span></div><div class="line" id="020703"><span class="nick" style="color:#8dd3c7"><a href="#020703" label="[02:07:03]">&lt;stikonas&gt;</a></span><span class="message">do you want to look at it, or should I do it? (I won't do it today as it's getting late)</span></div><div class="line" id="020718"><span class="nick" style="color:#389600"><a href="#020718" label="[02:07:18]">&lt;oriansj&gt;</a></span><span class="message">I'll take a stab at it tonight</span></div><div class="line" id="020810"><span class="nick" style="color:#8dd3c7"><a href="#020810" label="[02:08:10]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="020921"><span class="nick" style="color:#8dd3c7"><a href="#020921" label="[02:09:21]">&lt;stikonas&gt;</a></span><span class="message">and then hopefully tomorrow I can get spawning to work in kaem</span></div><div class="line" id="020932"><span class="nick" style="color:#389600"><a href="#020932" label="[02:09:32]">&lt;oriansj&gt;</a></span><span class="message">sounds like a good plan</span></div><div class="line" id="020947"><span class="nick" style="color:#8dd3c7"><a href="#020947" label="[02:09:47]">&lt;stikonas&gt;</a></span><span class="message">maybe not envp yet</span></div><div class="line" id="021003"><span class="nick" style="color:#8dd3c7"><a href="#021003" label="[02:10:03]">&lt;stikonas&gt;</a></span><span class="message">though I think envp shouldn't be too hard either</span></div><div class="line" id="021044"><span class="nick" style="color:#8dd3c7"><a href="#021044" label="[02:10:44]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is getting more and more like proper C..</span></div><div class="line" id="021445"><span class="nick" style="color:#389600"><a href="#021445" label="[02:14:45]">&lt;oriansj&gt;</a></span><span class="message">well; after this if one adds switch statements to M2-Planet, it'll be a huge part of the c89 spec</span></div><div class="line" id="021726"><span class="nick" style="color:#389600"><a href="#021726" label="[02:17:26]">&lt;oriansj&gt;</a></span><span class="message">it is almost like the root core of C is just the laziest possible Language you can do with just a couple nice extras</span></div><div class="line" id="021959"><span class="nick" style="color:#8dd3c7"><a href="#021959" label="[02:19:59]">&lt;stikonas&gt;</a></span><span class="message">I guess we are also missing type conversion, i.e. (int) variable</span></div><div class="line" id="022020"><span class="nick" style="color:#8dd3c7"><a href="#022020" label="[02:20:20]">&lt;stikonas&gt;</a></span><span class="message">both of these are not critical if you write your own code...</span></div><div class="line" id="022039"><span class="nick" style="color:#8dd3c7"><a href="#022039" label="[02:20:39]">&lt;stikonas&gt;</a></span><span class="message">either use more if/else, or just define new variable with the right type and do assignment</span></div><div class="line" id="022217"><span class="nick" style="color:#389600"><a href="#022217" label="[02:22:17]">&lt;oriansj&gt;</a></span><span class="message">well as everything is implicitly converted to register; then (int) becomes quite meaningless</span></div><div class="line" id="022234"><span class="nick" style="color:#8dd3c7"><a href="#022234" label="[02:22:34]">&lt;stikonas&gt;</a></span><span class="message">well, not necesserily (int)</span></div><div class="line" id="022331"><span class="nick" style="color:#8dd3c7"><a href="#022331" label="[02:23:31]">&lt;stikonas&gt;</a></span><span class="message">might be (struct something*) ptr</span></div><div class="line" id="022350"><span class="nick" style="color:#8dd3c7"><a href="#022350" label="[02:23:50]">&lt;stikonas&gt;</a></span><span class="message">though perhaps it's more readable to just assign it</span></div><div class="line" id="022504"><span class="nick" style="color:#8dd3c7"><a href="#022504" label="[02:25:04]">&lt;stikonas&gt;</a></span><span class="message">I recently used a lot of code like: struct efi_file_protocol* f = fd;</span></div><div class="line" id="022509"><span class="nick" style="color:#8dd3c7"><a href="#022509" label="[02:25:09]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/25fe274ab00df45b890ead828b05016a589f8b35/amd64/uefi/unistd.c#L97">https://github.com/oriansj/M2libc/blob/25fe274ab00df45b890ead828b05016a589f8b35/amd64/uefi/unistd.c#L97</a> </span></div><div class="line" id="022809"><span class="nick" style="color:#8dd3c7"><a href="#022809" label="[02:28:09]">&lt;stikonas&gt;</a></span><span class="message">perhaps we should do a release of M2-Planet (and I guess stage0-posix too then) once stage0-uefi runs to completion</span></div><div class="line" id="022921"><span class="nick" style="color:#8dd3c7"><a href="#022921" label="[02:29:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, we've got #warning, lot's of segfault fixes, position independent code on amd64 and global and local structs</span></div><div class="line" id="030309"><span class="nick" style="color:#389600"><a href="#030309" label="[03:03:09]">&lt;oriansj&gt;</a></span><span class="message">I can see doing a new release seems reasonable</span></div><div class="line" id="034555"><span class="nick" style="color:#2e2a4a"><a href="#034555" label="[03:45:55]">&lt;Hagfish&gt;</a></span><span class="message">well there be a nice little release announcement about that?</span></div><div class="line" id="034704"><span class="nick" style="color:#2e2a4a"><a href="#034704" label="[03:47:04]">&lt;Hagfish&gt;</a></span><span class="message">i haven't been following exactly where things are at, but it sounds like some big things have been achieved, and there are almost enough pieces for someone to do a really impressive demo (maybe after the subsequent release?)</span></div><div class="line" id="035854"><span class="nick" style="color:#389600"><a href="#035854" label="[03:58:54]">&lt;oriansj&gt;</a></span><span class="message">well M2-Planet has been able to do a really impressive demo for a long time now</span></div><div class="line" id="044009"><span class="nick" style="color:#389600"><a href="#044009" label="[04:40:09]">&lt;oriansj&gt;</a></span><span class="message">is it just me or does modern software development sometimes feel like building a house on shifting sand</span></div><div class="line" id="044104"><span class="nick" style="color:#389600"><a href="#044104" label="[04:41:04]">&lt;oriansj&gt;</a></span><span class="message">because today GCC is just like, I'm gonna link to the wrong libc so return 42; will just be a segfault. Enjoy... &gt;.&lt;</span></div><div class="line" id="062307"><span class="nick" style="color:#389600"><a href="#062307" label="[06:23:07]">&lt;oriansj&gt;</a></span><span class="message">&gt;.&lt; well I had the least productive last few hours</span></div><div class="line" id="062414"><span class="nick" style="color:#389600"><a href="#062414" label="[06:24:14]">&lt;oriansj&gt;</a></span><span class="message">gcc and clang just don't want to work with me tonight and M2-Mesoplanet is displaying C preprocessor bug with the current M2libc when one does --architecture x86</span></div><div class="line" id="062537"><span class="nick" style="color:#389600"><a href="#062537" label="[06:25:37]">&lt;oriansj&gt;</a></span><span class="message">added to that I can't even get guix to build the most basic of shepherd services without throwing errors. (literally on turn on, run a single script in a fixed location)</span></div><div class="line" id="062634"><span class="nick" style="color:#389600"><a href="#062634" label="[06:26:34]">&lt;oriansj&gt;</a></span><span class="message">and at this point, I've failed enough tonight and I'll try picking it up again in the morning (assuming guix can finally finish building gcc by then)</span></div><div class="line" id="101237"><span class="nick" style="color:#6b8072"><a href="#101237" label="[10:12:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Hagfish: that's not imminent yet, I might need another week or so to finish stage0-uefi</span></div><div class="line" id="101306"><span class="nick" style="color:#6b8072"><a href="#101306" label="[10:13:06]">&lt;stikonas[m]&gt;</a></span><span class="message">And there is always an announcement on the mailing list</span></div><div class="line" id="130552"><span class="nick" style="color:#8dd3c7"><a href="#130552" label="[13:05:52]">&lt;stikonas&gt;</a></span><span class="message">hmm, M2-Mesoplanet currently broken muts be due to one of my UEFI changes...</span></div><div class="line" id="130555"><span class="nick" style="color:#8dd3c7"><a href="#130555" label="[13:05:55]">&lt;stikonas&gt;</a></span><span class="message">I'll take a look</span></div><div class="line" id="130727"><span class="nick" style="color:#8dd3c7"><a href="#130727" label="[13:07:27]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's probably correct in terms of C but indeed M2-Mesoplanet does not play nicely with nested #ifs</span></div><div class="line" id="131350"><span class="nick" style="color:#8dd3c7"><a href="#131350" label="[13:13:50]">&lt;stikonas&gt;</a></span><span class="message">maybe let's undo that change for now, it's not yet useful for UEFI (as M2-Mesoplanet has not yet been built)</span></div><div class="line" id="131418"><span class="nick" style="color:#8dd3c7"><a href="#131418" label="[13:14:18]">&lt;stikonas&gt;</a></span><span class="message">so a bit hard to test what would be the correct way of doing it...</span></div><div class="line" id="131709"><span class="nick" style="color:#8dd3c7"><a href="#131709" label="[13:17:09]">&lt;stikonas&gt;</a></span><span class="message">reverted that change for now: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/24">https://github.com/oriansj/M2libc/pull/24</a> </span></div><div class="line" id="131803"><span class="nick" style="color:#8dd3c7"><a href="#131803" label="[13:18:03]">&lt;stikonas&gt;</a></span><span class="message">it might be a bit annoying to make it play nicely on both POSIX and UEFI</span></div><div class="line" id="140657"><span class="nick" style="color:#389600"><a href="#140657" label="[14:06:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'm just going to fix M2-Mesoplanet (as soon as I can get gcc to work)</span></div><div class="line" id="140737"><span class="nick" style="color:#8dd3c7"><a href="#140737" label="[14:07:37]">&lt;stikonas&gt;</a></span><span class="message">ok, let's keep it PR open for now and then close it once it works</span></div><div class="line" id="140758"><span class="nick" style="color:#8dd3c7"><a href="#140758" label="[14:07:58]">&lt;stikonas&gt;</a></span><span class="message">because otherwise we might just be postponing the problem</span></div><div class="line" id="140807"><span class="nick" style="color:#389600"><a href="#140807" label="[14:08:07]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="141116"><span class="nick" style="color:#8dd3c7"><a href="#141116" label="[14:11:16]">&lt;stikonas&gt;</a></span><span class="message">but to answer your question, I didn't usually have problems with compilers (gcc, etc...)</span></div><div class="line" id="141905"><span class="nick" style="color:#389600"><a href="#141905" label="[14:19:05]">&lt;oriansj&gt;</a></span><span class="message">might just be my experience of trying  to use guix upon debian</span></div><div class="line" id="142944"><span class="nick" style="color:#8dd3c7"><a href="#142944" label="[14:29:44]">&lt;stikonas&gt;</a></span><span class="message">possibly...</span></div><div class="line" id="143026"><span class="nick" style="color:#8dd3c7"><a href="#143026" label="[14:30:26]">&lt;stikonas&gt;</a></span><span class="message">either debian or full guix might work fine but guix upon debian might be easier to misconfigure</span></div><div class="line" id="143358"><span class="nick" style="color:#389600"><a href="#143358" label="[14:33:58]">&lt;oriansj&gt;</a></span><span class="message">well guess I need to plan on a little downtime to finally dive into pure Guix on my librebooted x200</span></div><div class="line" id="144156"><span class="nick" style="color:#80b1d3"><a href="#144156" label="[14:41:56]">&lt;Christoph[m]&gt;</a></span><span class="message">I'd prefer if bootstraping would also work on debian with guix on top. I'm on the fence of switching to only guix for several years now...</span></div><div class="line" id="144421"><span class="nick" style="color:#8dd3c7"><a href="#144421" label="[14:44:21]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: I suspect the problems oriansj has are nothing to do with bootstrapping</span></div><div class="line" id="144514"><span class="nick" style="color:#8dd3c7"><a href="#144514" label="[14:45:14]">&lt;stikonas&gt;</a></span><span class="message">it's inevitable that when you run one distro on top of another, you need to be very careful with binary, libary and various other paths (e.g. certs)</span></div><div class="line" id="144550"><span class="nick" style="color:#8dd3c7"><a href="#144550" label="[14:45:50]">&lt;stikonas&gt;</a></span><span class="message">bootstrapping itself should work on any distro</span></div><div class="line" id="144602"><span class="nick" style="color:#8dd3c7"><a href="#144602" label="[14:46:02]">&lt;stikonas&gt;</a></span><span class="message">as it has basically no dependencies</span></div><div class="line" id="150641"><span class="nick" style="color:#389600"><a href="#150641" label="[15:06:41]">&lt;oriansj&gt;</a></span><span class="message">Christoph[m]: stage0 and all the steps build and run just fine;</span></div><div class="line" id="150755"><span class="nick" style="color:#389600"><a href="#150755" label="[15:07:55]">&lt;oriansj&gt;</a></span><span class="message">the problem is entirely my setup and all of the pieces will work on both Debian and on Guix (and lets be honest Guix on other distros is not well supported and breaks from time to time)</span></div><div class="line" id="165550"><span class="nick" style="color:#6d2462"><a href="#165550" label="[16:55:50]">&lt;mihi&gt;</a></span><span class="message">stikonas_, oriansj: I don't mind how environment variables are done in stage0-uefi, but I'd like to be able to set them from UEFI shell and not only kaem. So if the &quot;obvious&quot; solution of using volatile EFI variables like UEFI shell's &quot;set -v&quot; command does is too complex, storing them in a file and having a simple command to get and set them should work fine too. Messing with LoadOptions would,</span></div><div class="line" id="165550"><span class="nick" style="color:#6d2462"><a href="#165550" label="[16:55:50]">&lt;mihi&gt;</a></span><span class="message">however, require to use kaem if you want to start a M2-Planet compiled program that requires environment variables (like Mes).</span></div><div class="line" id="170108"><span class="nick" style="color:#234e69"><a href="#170108" label="[17:01:08]">&lt;stikonas_&gt;</a></span><span class="message">hmm, that is true...</span></div><div class="line" id="170117"><span class="nick" style="color:#234e69"><a href="#170117" label="[17:01:17]">&lt;stikonas_&gt;</a></span><span class="message">anyway, let's first get spawning to work</span></div><div class="line" id="170122"><span class="nick" style="color:#234e69"><a href="#170122" label="[17:01:22]">&lt;stikonas_&gt;</a></span><span class="message">and then we can see about environmental variables</span></div><div class="line" id="170944"><span class="nick" style="color:#8dd3c7"><a href="#170944" label="[17:09:44]">&lt;stikonas&gt;</a></span><span class="message">perhaps we'll have to use EFI variables, as using files have some disadvantages (slow disk access, etc...)</span></div><div class="line" id="181227"><span class="nick" style="color:#389600"><a href="#181227" label="[18:12:27]">&lt;oriansj&gt;</a></span><span class="message">worst case is we learn what doesn't work and try something a little different</span></div><div class="line" id="235953"><span class="nick" style="color:#8dd3c7"><a href="#235953" label="[23:59:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I've started adding fixed length types to M2-Planet</span></div><br /></div></body></html>