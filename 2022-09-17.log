<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004934"><span class="nick" style="color:#8dd3c7"><a href="#004934" label="[00:49:34]">&lt;fossy&gt;</a></span><span class="message">stikonas: hmmm, --external-sources makes a lot of sense for development, but for users, we want the least system dependence by default...</span></div><div class="line" id="005119"><span class="nick" style="color:#8dd3c7"><a href="#005119" label="[00:51:19]">&lt;fossy&gt;</a></span><span class="message">i wonder whether implementing the &quot;atlernative server&quot; thing, so it downloads sources from some kind of cache/archive and then making --external-sources serve the sources/ directory to the bootstrap</span></div><div class="line" id="005233"><span class="nick" style="color:#8dd3c7"><a href="#005233" label="[00:52:33]">&lt;fossy&gt;</a></span><span class="message">it would simplify quite a few things a bit if we did that because then we don't need to copy in any files</span></div><div class="line" id="005516"><span class="nick" style="color:#2e2a4a"><a href="#005516" label="[00:55:16]">&lt;stikonas&gt;</a></span><span class="message">well ok, I can just add it manually</span></div><div class="line" id="005523"><span class="nick" style="color:#2e2a4a"><a href="#005523" label="[00:55:23]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'll have a new review for you in a few minutes</span></div><div class="line" id="005542"><span class="nick" style="color:#8dd3c7"><a href="#005542" label="[00:55:42]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="005612"><span class="nick" style="color:#8dd3c7"><a href="#005612" label="[00:56:12]">&lt;fossy&gt;</a></span><span class="message">another idea, we could have a config file for rootfs.py, where all the options we commonly use in development can go</span></div><div class="line" id="010029"><span class="nick" style="color:#8dd3c7"><a href="#010029" label="[01:00:29]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/199">https://github.com/fosslinux/live-bootstrap/pull/199</a>  Does make re-run configure for subdirectories or something? very odd if it re-runs top level configure</span></div><div class="line" id="010807"><span class="nick" style="color:#2e2a4a"><a href="#010807" label="[01:08:07]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/200">https://github.com/fosslinux/live-bootstrap/pull/200</a> </span></div><div class="line" id="010842"><span class="nick" style="color:#2e2a4a"><a href="#010842" label="[01:08:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: I suspect it's subdirectories for 199</span></div><div class="line" id="010847"><span class="nick" style="color:#2e2a4a"><a href="#010847" label="[01:08:47]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="011002"><span class="nick" style="color:#2e2a4a"><a href="#011002" label="[01:10:02]">&lt;stikonas&gt;</a></span><span class="message">fossy: although there is just 1 configure there</span></div><div class="line" id="011009"><span class="nick" style="color:#2e2a4a"><a href="#011009" label="[01:10:09]">&lt;stikonas&gt;</a></span><span class="message">only top-level</span></div><div class="line" id="011147"><span class="nick" style="color:#8dd3c7"><a href="#011147" label="[01:11:47]">&lt;fossy&gt;</a></span><span class="message">of course autogen scripts use which</span></div><div class="line" id="011637"><span class="nick" style="color:#2e2a4a"><a href="#011637" label="[01:16:37]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="011648"><span class="nick" style="color:#2e2a4a"><a href="#011648" label="[01:16:48]">&lt;stikonas&gt;</a></span><span class="message">I could do command -v wrapper and overcome it</span></div><div class="line" id="011652"><span class="nick" style="color:#2e2a4a"><a href="#011652" label="[01:16:52]">&lt;stikonas&gt;</a></span><span class="message">but we can as well build which</span></div><div class="line" id="011753"><span class="nick" style="color:#8dd3c7"><a href="#011753" label="[01:17:53]">&lt;fossy&gt;</a></span><span class="message">yeah, why not</span></div><div class="line" id="011837"><span class="nick" style="color:#2e2a4a"><a href="#011837" label="[01:18:37]">&lt;stikonas&gt;</a></span><span class="message">fossy: the other thing we need is newer grep</span></div><div class="line" id="011854"><span class="nick" style="color:#8dd3c7"><a href="#011854" label="[01:18:54]">&lt;fossy&gt;</a></span><span class="message">can you also null out/regen which.1 (although I have no idea how to make a manpage from texinfo) and makeinfo which.info? they're autogened although i don't really care about them</span></div><div class="line" id="011908"><span class="nick" style="color:#2e2a4a"><a href="#011908" label="[01:19:08]">&lt;stikonas&gt;</a></span><span class="message">oh sure</span></div><div class="line" id="011922"><span class="nick" style="color:#2e2a4a"><a href="#011922" label="[01:19:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, I don't care super much about manpages but yes, let's rebuild it</span></div><div class="line" id="011938"><span class="nick" style="color:#2e2a4a"><a href="#011938" label="[01:19:38]">&lt;stikonas&gt;</a></span><span class="message">or remove...</span></div><div class="line" id="012344"><span class="nick" style="color:#2e2a4a"><a href="#012344" label="[01:23:44]">&lt;stikonas&gt;</a></span><span class="message">argh, that is not super trivial...</span></div><div class="line" id="012357"><span class="nick" style="color:#2e2a4a"><a href="#012357" label="[01:23:57]">&lt;stikonas&gt;</a></span><span class="message">either I have to remove it pre-install</span></div><div class="line" id="012401"><span class="nick" style="color:#2e2a4a"><a href="#012401" label="[01:24:01]">&lt;stikonas&gt;</a></span><span class="message">or fix make rule</span></div><div class="line" id="012408"><span class="nick" style="color:#2e2a4a"><a href="#012408" label="[01:24:08]">&lt;stikonas&gt;</a></span><span class="message">make[2]: *** No rule to make target 'which.1', needed by 'all-am'.  Stop.</span></div><div class="line" id="012438"><span class="nick" style="color:#2e2a4a"><a href="#012438" label="[01:24:38]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe I need maintainer mode..</span></div><div class="line" id="012630"><span class="nick" style="color:#2e2a4a"><a href="#012630" label="[01:26:30]">&lt;stikonas&gt;</a></span><span class="message">but that one doesn't work with tarball</span></div><div class="line" id="012646"><span class="nick" style="color:#2e2a4a"><a href="#012646" label="[01:26:46]">&lt;stikonas&gt;</a></span><span class="message">so I think I'll just rm and touch it</span></div><div class="line" id="013148"><span class="nick" style="color:#2e2a4a"><a href="#013148" label="[01:31:48]">&lt;stikonas&gt;</a></span><span class="message">fossy: updated</span></div><div class="line" id="013205"><span class="nick" style="color:#2e2a4a"><a href="#013205" label="[01:32:05]">&lt;stikonas&gt;</a></span><span class="message">I should probably re-run live-bootstrap from scratch to double check the hash</span></div><div class="line" id="013423"><span class="nick" style="color:#2e2a4a"><a href="#013423" label="[01:34:23]">&lt;stikonas&gt;</a></span><span class="message">fossy: also if you have some time, it might be useful if you can also double check autogen bootstrap for pregened files</span></div><div class="line" id="013437"><span class="nick" style="color:#2e2a4a"><a href="#013437" label="[01:34:37]">&lt;stikonas&gt;</a></span><span class="message">(I've started it myself but haven't finished it)</span></div><div class="line" id="015114"><span class="nick" style="color:#8dd3c7"><a href="#015114" label="[01:51:14]">&lt;fossy&gt;</a></span><span class="message">stikonas: do you have a link for that? i know its in irc history but i can't find it easily</span></div><div class="line" id="015137"><span class="nick" style="color:#2e2a4a"><a href="#015137" label="[01:51:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/">https://github.com/schierlm/gnu-autogen-bootstrapping/</a> </span></div><div class="line" id="015143"><span class="nick" style="color:#8dd3c7"><a href="#015143" label="[01:51:43]">&lt;fossy&gt;</a></span><span class="message">ah yes, that's it</span></div><div class="line" id="015150"><span class="nick" style="color:#2e2a4a"><a href="#015150" label="[01:51:50]">&lt;stikonas&gt;</a></span><span class="message">there are two options, bootstrpap.sh and bootstrap-tarball.sh</span></div><div class="line" id="015209"><span class="nick" style="color:#2e2a4a"><a href="#015209" label="[01:52:09]">&lt;stikonas&gt;</a></span><span class="message">though for most part they do similar things</span></div><div class="line" id="015221"><span class="nick" style="color:#8dd3c7"><a href="#015221" label="[01:52:21]">&lt;fossy&gt;</a></span><span class="message">does it start with the latest version of autogen? it seems to</span></div><div class="line" id="015225"><span class="nick" style="color:#2e2a4a"><a href="#015225" label="[01:52:25]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="015234"><span class="nick" style="color:#2e2a4a"><a href="#015234" label="[01:52:34]">&lt;stikonas&gt;</a></span><span class="message">and replaces a bit of autogened stuff with handwritten C</span></div><div class="line" id="015244"><span class="nick" style="color:#8dd3c7"><a href="#015244" label="[01:52:44]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="015244"><span class="nick" style="color:#2e2a4a"><a href="#015244" label="[01:52:44]">&lt;stikonas&gt;</a></span><span class="message">first it builds columns binary</span></div><div class="line" id="015250"><span class="nick" style="color:#2e2a4a"><a href="#015250" label="[01:52:50]">&lt;stikonas&gt;</a></span><span class="message">that one just uses autogen for it's command line options</span></div><div class="line" id="015256"><span class="nick" style="color:#2e2a4a"><a href="#015256" label="[01:52:56]">&lt;stikonas&gt;</a></span><span class="message">then getdefs</span></div><div class="line" id="015259"><span class="nick" style="color:#2e2a4a"><a href="#015259" label="[01:52:59]">&lt;stikonas&gt;</a></span><span class="message">those two I checked</span></div><div class="line" id="015319"><span class="nick" style="color:#2e2a4a"><a href="#015319" label="[01:53:19]">&lt;stikonas&gt;</a></span><span class="message">when over C files, checked what is included</span></div><div class="line" id="015323"><span class="nick" style="color:#2e2a4a"><a href="#015323" label="[01:53:23]">&lt;stikonas&gt;</a></span><span class="message">didn't find anything more pregened</span></div><div class="line" id="015354"><span class="nick" style="color:#2e2a4a"><a href="#015354" label="[01:53:54]">&lt;stikonas&gt;</a></span><span class="message">so that's where I stopped yesterday</span></div><div class="line" id="015400"><span class="nick" style="color:#2e2a4a"><a href="#015400" label="[01:54:00]">&lt;stikonas&gt;</a></span><span class="message">will probably resume tomorrow to check autogen itself</span></div><div class="line" id="015404"><span class="nick" style="color:#6b8072"><a href="#015404" label="[01:54:04]">&lt;muurkha&gt;</a></span><span class="message">that's great</span></div><div class="line" id="015430"><span class="nick" style="color:#8dd3c7"><a href="#015430" label="[01:54:30]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="015449"><span class="nick" style="color:#2e2a4a"><a href="#015449" label="[01:54:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: if you want to run it in live-bootstrap you need which, newer grep and edit pkg-config option to include --static</span></div><div class="line" id="015503"><span class="nick" style="color:#2e2a4a"><a href="#015503" label="[01:55:03]">&lt;stikonas&gt;</a></span><span class="message">I'll later add some env variable to those scripts</span></div><div class="line" id="015508"><span class="nick" style="color:#2e2a4a"><a href="#015508" label="[01:55:08]">&lt;stikonas&gt;</a></span><span class="message">to let static builds</span></div><div class="line" id="015532"><span class="nick" style="color:#2e2a4a"><a href="#015532" label="[01:55:32]">&lt;stikonas&gt;</a></span><span class="message">although we now have dynamic libguile.so too</span></div><div class="line" id="015946"><span class="nick" style="color:#2e2a4a"><a href="#015946" label="[01:59:46]">&lt;stikonas&gt;</a></span><span class="message">other than that I think it should be fairly compatible with live-bootstrap now</span></div><div class="line" id="020007"><span class="nick" style="color:#2e2a4a"><a href="#020007" label="[02:00:07]">&lt;stikonas&gt;</a></span><span class="message">I've fixed some musl issues two days ago</span></div><div class="line" id="024546"><span class="nick" style="color:#80b1d3"><a href="#024546" label="[02:45:46]">&lt;oriansj&gt;</a></span><span class="message">I may have an absolutely batshit crazy idea but I need to play more with it first</span></div><div class="line" id="024726"><span class="nick" style="color:#6b8072"><a href="#024726" label="[02:47:26]">&lt;muurkha&gt;</a></span><span class="message">yay</span></div><div class="line" id="032027"><span class="nick" style="color:#80b1d3"><a href="#032027" label="[03:20:27]">&lt;oriansj&gt;</a></span><span class="message">this might actually end up being faster</span></div><div class="line" id="032542"><span class="nick" style="color:#80b1d3"><a href="#032542" label="[03:25:42]">&lt;oriansj&gt;</a></span><span class="message">say 2-3 months of effort</span></div><div class="line" id="034722"><span class="nick" style="color:#8dd3c7"><a href="#034722" label="[03:47:22]">&lt;fossy&gt;</a></span><span class="message">what is it?</span></div><div class="line" id="035456"><span class="nick" style="color:#80b1d3"><a href="#035456" label="[03:54:56]">&lt;oriansj&gt;</a></span><span class="message">strip down TCC into something that can still self-host TCC but be buildable by M2-Planet</span></div><div class="line" id="035532"><span class="nick" style="color:#80b1d3"><a href="#035532" label="[03:55:32]">&lt;oriansj&gt;</a></span><span class="message">because, I for the life of me can't build mes.c with GCC+glibc</span></div><div class="line" id="041435"><span class="nick" style="color:#8dd3c7"><a href="#041435" label="[04:14:35]">&lt;fossy&gt;</a></span><span class="message">it is very doable</span></div><div class="line" id="041458"><span class="nick" style="color:#8dd3c7"><a href="#041458" label="[04:14:58]">&lt;fossy&gt;</a></span><span class="message">i made moderate progress on that about 12 months ago, however my approach wasn't particualrly sound</span></div><div class="line" id="041530"><span class="nick" style="color:#8dd3c7"><a href="#041530" label="[04:15:30]">&lt;fossy&gt;</a></span><span class="message">be warned that tcc code isn't written with the nicest constructs and theres overuse/abuse of macros</span></div><div class="line" id="041656"><span class="nick" style="color:#8dd3c7"><a href="#041656" label="[04:16:56]">&lt;fossy&gt;</a></span><span class="message">should be a lot easier now that m2-planet is more stable</span></div><div class="line" id="042641"><span class="nick" style="color:#80b1d3"><a href="#042641" label="[04:26:41]">&lt;oriansj&gt;</a></span><span class="message">yeah, hence why I am going to have to do some ugly things for a few weeks before it'll be in any shape to move forward on.</span></div><div class="line" id="042719"><span class="nick" style="color:#80b1d3"><a href="#042719" label="[04:27:19]">&lt;oriansj&gt;</a></span><span class="message">the idea: break out the C preprocessor into a separate program. Rip out the assembler and linker into separate programs as well</span></div><div class="line" id="042818"><span class="nick" style="color:#80b1d3"><a href="#042818" label="[04:28:18]">&lt;oriansj&gt;</a></span><span class="message">Then convert those 4 simpler programs to M2-Planet's subset</span></div><div class="line" id="043553"><span class="nick" style="color:#6b8072"><a href="#043553" label="[04:35:53]">&lt;muurkha&gt;</a></span><span class="message">running it as a separate thread/process might simplify the control flow</span></div><div class="line" id="043638"><span class="nick" style="color:#6b8072"><a href="#043638" label="[04:36:38]">&lt;muurkha&gt;</a></span><span class="message">and text pipes ease debugging somewhat</span></div><div class="line" id="043706"><span class="nick" style="color:#6b8072"><a href="#043706" label="[04:37:06]">&lt;muurkha&gt;</a></span><span class="message">the downside is that serializing and deserializing adds some complexity to passing data around</span></div><div class="line" id="044102"><span class="nick" style="color:#80b1d3"><a href="#044102" label="[04:41:02]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="044121"><span class="nick" style="color:#6b8072"><a href="#044121" label="[04:41:21]">&lt;muurkha&gt;</a></span><span class="message">probably not saying anything you haven't thought a hundred times already</span></div><div class="line" id="044141"><span class="nick" style="color:#80b1d3"><a href="#044141" label="[04:41:41]">&lt;oriansj&gt;</a></span><span class="message">and if I do specializers the changing out of assembly back ends becomes trivial</span></div><div class="line" id="044233"><span class="nick" style="color:#6b8072"><a href="#044233" label="[04:42:33]">&lt;muurkha&gt;</a></span><span class="message">that sounds optimistic</span></div><div class="line" id="044315"><span class="nick" style="color:#80b1d3"><a href="#044315" label="[04:43:15]">&lt;oriansj&gt;</a></span><span class="message">not really, just insanely inefficient</span></div><div class="line" id="052407"><span class="nick" style="color:#80b1d3"><a href="#052407" label="[05:24:07]">&lt;oriansj&gt;</a></span><span class="message">I also have the advantage of being willing to throw all cross-platform functionality in the trash</span></div><div class="line" id="052431"><span class="nick" style="color:#80b1d3"><a href="#052431" label="[05:24:31]">&lt;oriansj&gt;</a></span><span class="message">and willing to ditch optimizaations</span></div><div class="line" id="053706"><span class="nick" style="color:#6b8072"><a href="#053706" label="[05:37:06]">&lt;muurkha&gt;</a></span><span class="message">yeah, that frees you up a lot</span></div><div class="line" id="053944"><span class="nick" style="color:#80b1d3"><a href="#053944" label="[05:39:44]">&lt;oriansj&gt;</a></span><span class="message">and if I output a platform neutral ISA instructions; then I can write a specializer in M2-Planet to convert that to M1 instructions and then I can write a second specializer that outputs a more advanced assembly after we bootstrap that</span></div><div class="line" id="054021"><span class="nick" style="color:#80b1d3"><a href="#054021" label="[05:40:21]">&lt;oriansj&gt;</a></span><span class="message">then all of this ELF crap can be ripped out of the C compiler</span></div><div class="line" id="054032"><span class="nick" style="color:#80b1d3"><a href="#054032" label="[05:40:32]">&lt;oriansj&gt;</a></span><span class="message">because that definitely never belonged in there</span></div><div class="line" id="054110"><span class="nick" style="color:#80b1d3"><a href="#054110" label="[05:41:10]">&lt;oriansj&gt;</a></span><span class="message">(in one's linker, sure) (in one's assembler, maybe) (but compiler? nope)</span></div><div class="line" id="054504"><span class="nick" style="color:#80b1d3"><a href="#054504" label="[05:45:04]">&lt;oriansj&gt;</a></span><span class="message">and take out dynamic linking support while I am at it</span></div><div class="line" id="054523"><span class="nick" style="color:#80b1d3"><a href="#054523" label="[05:45:23]">&lt;oriansj&gt;</a></span><span class="message">and remove the need for floating point support to compile C code</span></div><div class="line" id="055036"><span class="nick" style="color:#80b1d3"><a href="#055036" label="[05:50:36]">&lt;oriansj&gt;</a></span><span class="message">and tear out all non-deterministic bits</span></div><div class="line" id="055621"><span class="nick" style="color:#80b1d3"><a href="#055621" label="[05:56:21]">&lt;oriansj&gt;</a></span><span class="message">and just ditch the error recovery logic as fail fast works better for bootstrapping</span></div><div class="line" id="060159"><span class="nick" style="color:#6b8072"><a href="#060159" label="[06:01:59]">&lt;muurkha&gt;</a></span><span class="message">sounds like a good direction to go in</span></div><div class="line" id="060225"><span class="nick" style="color:#6b8072"><a href="#060225" label="[06:02:25]">&lt;muurkha&gt;</a></span><span class="message">if doing it all at once turns out to bog you down, you might try making the changes more incrementally</span></div><div class="line" id="060434"><span class="nick" style="color:#6b8072"><a href="#060434" label="[06:04:34]">&lt;muurkha&gt;</a></span><span class="message">it might turn out that some aspects of the plan are good while others are not</span></div><div class="line" id="060438"><span class="nick" style="color:#80b1d3"><a href="#060438" label="[06:04:38]">&lt;oriansj&gt;</a></span><span class="message">well right now I am just cleaning up the TCC build to a minimal macro form</span></div><div class="line" id="060450"><span class="nick" style="color:#6b8072"><a href="#060450" label="[06:04:50]">&lt;muurkha&gt;</a></span><span class="message">(though they all sound good to me at this level of detail)</span></div><div class="line" id="060459"><span class="nick" style="color:#80b1d3"><a href="#060459" label="[06:04:59]">&lt;oriansj&gt;</a></span><span class="message">and honestly I expect to fail a shitload</span></div><div class="line" id="060539"><span class="nick" style="color:#80b1d3"><a href="#060539" label="[06:05:39]">&lt;oriansj&gt;</a></span><span class="message">the biggest problem is finding time to write tests</span></div><div class="line" id="060713"><span class="nick" style="color:#80b1d3"><a href="#060713" label="[06:07:13]">&lt;oriansj&gt;</a></span><span class="message">as introducing bugs is very easy to do and a full and proper test suite doesn't quite exist in TCC</span></div><div class="line" id="060949"><span class="nick" style="color:#6b8072"><a href="#060949" label="[06:09:49]">&lt;muurkha&gt;</a></span><span class="message">have you looked at Hypothesis?</span></div><div class="line" id="061010"><span class="nick" style="color:#6b8072"><a href="#061010" label="[06:10:10]">&lt;muurkha&gt;</a></span><span class="message">I found it improved my testing cost/benefit ratio a lot</span></div><div class="line" id="061044"><span class="nick" style="color:#6b8072"><a href="#061044" label="[06:10:44]">&lt;muurkha&gt;</a></span><span class="message">DRMaciver wrote a pedagogical version that's easier to clone in other languages called Minithesis if you don't like Python</span></div><div class="line" id="061125"><span class="nick" style="color:#6b8072"><a href="#061125" label="[06:11:25]">&lt;muurkha&gt;</a></span><span class="message">Minithesis is 472 lines of Python</span></div><div class="line" id="061233"><span class="nick" style="color:#80b1d3"><a href="#061233" label="[06:12:33]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I haven't seen it yet, nor heard of it as a program</span></div><div class="line" id="061337"><span class="nick" style="color:#80b1d3"><a href="#061337" label="[06:13:37]">&lt;oriansj&gt;</a></span><span class="message">but how would integrate with C programming?</span></div><div class="line" id="061408"><span class="nick" style="color:#6b8072"><a href="#061408" label="[06:14:08]">&lt;muurkha&gt;</a></span><span class="message">well, for example, in <a rel="nofollow" href="https://github.com/kragen/dumpulse">https://github.com/kragen/dumpulse</a>,  I wrote my tests in Hypothesis</span></div><div class="line" id="061447"><span class="nick" style="color:#6b8072"><a href="#061447" label="[06:14:47]">&lt;muurkha&gt;</a></span><span class="message">but the implementation was in C</span></div><div class="line" id="061618"><span class="nick" style="color:#6b8072"><a href="#061618" label="[06:16:18]">&lt;muurkha&gt;</a></span><span class="message">so I compiled the implementation to a shared library and wrote <a rel="nofollow" href="https://github.com/kragen/dumpulse/blob/master/server.py">https://github.com/kragen/dumpulse/blob/master/server.py</a>  to test the shared library using Python's cffi</span></div><div class="line" id="061734"><span class="nick" style="color:#6b8072"><a href="#061734" label="[06:17:34]">&lt;muurkha&gt;</a></span><span class="message">but a different alternative would be to use Minithesis as the model for a property-based testing library that's actually written in C</span></div><div class="line" id="061817"><span class="nick" style="color:#6b8072"><a href="#061817" label="[06:18:17]">&lt;muurkha&gt;</a></span><span class="message">and then write the tests in C</span></div><div class="line" id="061831"><span class="nick" style="color:#80b1d3"><a href="#061831" label="[06:18:31]">&lt;oriansj&gt;</a></span><span class="message">I'm fine with python, I just would need to get up to speed before I could be productive with it</span></div><div class="line" id="061904"><span class="nick" style="color:#6b8072"><a href="#061904" label="[06:19:04]">&lt;muurkha&gt;</a></span><span class="message">yeah, I meant that you might feel that the rigmarole with cffi and shared libraries was a bit much (though it sure paid off in the case of Dumpulse)</span></div><div class="line" id="061954"><span class="nick" style="color:#6b8072"><a href="#061954" label="[06:19:54]">&lt;muurkha&gt;</a></span><span class="message">the Hypothesis docs are pretty good: <a rel="nofollow" href="https://hypothesis.readthedocs.io/en/latest/quickstart.html">https://hypothesis.readthedocs.io/en/latest/quickstart.html</a> </span></div><div class="line" id="062256"><span class="nick" style="color:#80b1d3"><a href="#062256" label="[06:22:56]">&lt;oriansj&gt;</a></span><span class="message">I don't deny that. I'm just thinking of all the C language lawyer style tests</span></div><div class="line" id="062357"><span class="nick" style="color:#6b8072"><a href="#062357" label="[06:23:57]">&lt;muurkha&gt;</a></span><span class="message">yeah, there's definitely a real difficulty in knowing when a C compiler's output is correct</span></div><div class="line" id="062526"><span class="nick" style="color:#6b8072"><a href="#062526" label="[06:25:26]">&lt;muurkha&gt;</a></span><span class="message">amusingly I just ran across a slide in one of DRMaciver's talks about that: <a rel="nofollow" href="https://drmaciver.github.io/hypothesis-talks/hypothesis-ipr0gram.html#/9">https://drmaciver.github.io/hypothesis-talks/hypothesis-ipr0gram.html#/9</a> </span></div><div class="line" id="062527"><span class="nick" style="color:#6b8072"><a href="#062527" label="[06:25:27]">&lt;muurkha&gt;</a></span><span class="message">where someone found a bug in the CompCert proven-correct C compiler</span></div><div class="line" id="063120"><span class="nick" style="color:#80b1d3"><a href="#063120" label="[06:31:20]">&lt;oriansj&gt;</a></span><span class="message">well looking at the 23,619 lines of C that make up TCC. I must say; minus a few things done for linking and binary generation. everything else (minus a couple switch statements) are supported in M2-Planet</span></div><div class="line" id="063139"><span class="nick" style="color:#80b1d3"><a href="#063139" label="[06:31:39]">&lt;oriansj&gt;</a></span><span class="message">So if I can just break that bit off, then TCC would be rather quickly ported to M2-Planet</span></div><div class="line" id="063253"><span class="nick" style="color:#6b8072"><a href="#063253" label="[06:32:53]">&lt;muurkha&gt;</a></span><span class="message">nice</span></div><div class="line" id="063315"><span class="nick" style="color:#6b8072"><a href="#063315" label="[06:33:15]">&lt;muurkha&gt;</a></span><span class="message">what's the hair with linking and binary generation?</span></div><div class="line" id="063440"><span class="nick" style="color:#80b1d3"><a href="#063440" label="[06:34:40]">&lt;oriansj&gt;</a></span><span class="message">bitslices are a big chunk of it</span></div><div class="line" id="064452"><span class="nick" style="color:#80b1d3"><a href="#064452" label="[06:44:52]">&lt;oriansj&gt;</a></span><span class="message">and manually clearing out the macros is gonna eat a shitload of time</span></div><div class="line" id="064531"><span class="nick" style="color:#6b8072"><a href="#064531" label="[06:45:31]">&lt;muurkha&gt;</a></span><span class="message">oh, like struct foo { int bar: 7; int baz: 3; };</span></div><div class="line" id="064533"><span class="nick" style="color:#6b8072"><a href="#064533" label="[06:45:33]">&lt;muurkha&gt;</a></span><span class="message">?</span></div><div class="line" id="064707"><span class="nick" style="color:#80b1d3"><a href="#064707" label="[06:47:07]">&lt;oriansj&gt;</a></span><span class="message">mostly for assembly to bits</span></div><div class="line" id="120518"><span class="nick" style="color:#2e2a4a"><a href="#120518" label="[12:05:18]">&lt;stikonas&gt;</a></span><span class="message">fossy: so are you happy now with &quot;which&quot; PR?</span></div><div class="line" id="120521"><span class="nick" style="color:#2e2a4a"><a href="#120521" label="[12:05:21]">&lt;stikonas&gt;</a></span><span class="message">should I merge it?</span></div><div class="line" id="120605"><span class="nick" style="color:#2e2a4a"><a href="#120605" label="[12:06:05]">&lt;stikonas&gt;</a></span><span class="message">or maybe I should also remove an empty file which.1 post-install</span></div><div class="line" id="123818"><span class="nick" style="color:#6d2462"><a href="#123818" label="[12:38:18]">&lt;doras&gt;</a></span><span class="message">stikonas, fossy, the `i386-linux-musl` PR is up: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/201">https://github.com/fosslinux/live-bootstrap/pull/201</a> </span></div><div class="line" id="123833"><span class="nick" style="color:#2e2a4a"><a href="#123833" label="[12:38:33]">&lt;stikonas&gt;</a></span><span class="message">doras: I'm looking at your previous PR, in particular <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/197/commits/1918b12c614d1a931e31d6c802e6283a3004c1ee">https://github.com/fosslinux/live-bootstrap/pull/197/commits/1918b12c614d1a931e31d6c802e6283a3004c1ee</a> </span></div><div class="line" id="123844"><span class="nick" style="color:#2e2a4a"><a href="#123844" label="[12:38:44]">&lt;stikonas&gt;</a></span><span class="message">I did rely a bit on those variables for development (to re-run stuff)</span></div><div class="line" id="123850"><span class="nick" style="color:#2e2a4a"><a href="#123850" label="[12:38:50]">&lt;stikonas&gt;</a></span><span class="message">maybe we can save them to some file</span></div><div class="line" id="123903"><span class="nick" style="color:#2e2a4a"><a href="#123903" label="[12:39:03]">&lt;stikonas&gt;</a></span><span class="message">so then one can source them easily</span></div><div class="line" id="123958"><span class="nick" style="color:#2e2a4a"><a href="#123958" label="[12:39:58]">&lt;stikonas&gt;</a></span><span class="message">I'll mention it on PR...</span></div><div class="line" id="124047"><span class="nick" style="color:#6d2462"><a href="#124047" label="[12:40:47]">&lt;doras&gt;</a></span><span class="message">stikonas: I also wasn't sure how to handle this best. The issue is that we can be dropped to bash at any point due to a build failure.</span></div><div class="line" id="124141"><span class="nick" style="color:#2e2a4a"><a href="#124141" label="[12:41:41]">&lt;stikonas&gt;</a></span><span class="message">well, we have that trap, you can also add some handling there if you want</span></div><div class="line" id="124230"><span class="nick" style="color:#6d2462"><a href="#124230" label="[12:42:30]">&lt;doras&gt;</a></span><span class="message">stikonas: maybe we could print them as part of the trap?</span></div><div class="line" id="124319"><span class="nick" style="color:#6d2462"><a href="#124319" label="[12:43:19]">&lt;doras&gt;</a></span><span class="message">I mean, having them in the environment is a bad idea regardless, even for build re-runs.</span></div><div class="line" id="124333"><span class="nick" style="color:#2e2a4a"><a href="#124333" label="[12:43:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, printing them makes sense too</span></div><div class="line" id="124340"><span class="nick" style="color:#2e2a4a"><a href="#124340" label="[12:43:40]">&lt;stikonas&gt;</a></span><span class="message">although we can do both</span></div><div class="line" id="124400"><span class="nick" style="color:#2e2a4a"><a href="#124400" label="[12:44:00]">&lt;stikonas&gt;</a></span><span class="message">both print and save it into some fime</span></div><div class="line" id="124401"><span class="nick" style="color:#2e2a4a"><a href="#124401" label="[12:44:01]">&lt;stikonas&gt;</a></span><span class="message">file</span></div><div class="line" id="124543"><span class="nick" style="color:#2e2a4a"><a href="#124543" label="[12:45:43]">&lt;stikonas&gt;</a></span><span class="message">ok, just some minor comments for <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/197">https://github.com/fosslinux/live-bootstrap/pull/197</a>  looks good in general</span></div><div class="line" id="124625"><span class="nick" style="color:#6d2462"><a href="#124625" label="[12:46:25]">&lt;doras&gt;</a></span><span class="message">stikonas: it would have been best to have each package build script load them individually from a file in its own shell execution.</span></div><div class="line" id="124714"><span class="nick" style="color:#2e2a4a"><a href="#124714" label="[12:47:14]">&lt;stikonas&gt;</a></span><span class="message">doras: but how can we achieve this?</span></div><div class="line" id="124721"><span class="nick" style="color:#2e2a4a"><a href="#124721" label="[12:47:21]">&lt;stikonas&gt;</a></span><span class="message">some variables are used outside build script</span></div><div class="line" id="124734"><span class="nick" style="color:#2e2a4a"><a href="#124734" label="[12:47:34]">&lt;stikonas&gt;</a></span><span class="message">and build script does not run in its own shell</span></div><div class="line" id="124745"><span class="nick" style="color:#2e2a4a"><a href="#124745" label="[12:47:45]">&lt;stikonas&gt;</a></span><span class="message">because subshells are initially a bit broken</span></div><div class="line" id="124754"><span class="nick" style="color:#2e2a4a"><a href="#124754" label="[12:47:54]">&lt;stikonas&gt;</a></span><span class="message">I think subshell itself works</span></div><div class="line" id="124757"><span class="nick" style="color:#2e2a4a"><a href="#124757" label="[12:47:57]">&lt;stikonas&gt;</a></span><span class="message">but traps don't work</span></div><div class="line" id="124810"><span class="nick" style="color:#2e2a4a"><a href="#124810" label="[12:48:10]">&lt;stikonas&gt;</a></span><span class="message">possibly due to meslibc bugs</span></div><div class="line" id="124829"><span class="nick" style="color:#6d2462"><a href="#124829" label="[12:48:29]">&lt;doras&gt;</a></span><span class="message">Why are traps important for us?</span></div><div class="line" id="124842"><span class="nick" style="color:#6d2462"><a href="#124842" label="[12:48:42]">&lt;doras&gt;</a></span><span class="message">Can't we simply read status code of the bash execution?</span></div><div class="line" id="124857"><span class="nick" style="color:#2e2a4a"><a href="#124857" label="[12:48:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, I might be misremembering things a bit</span></div><div class="line" id="124901"><span class="nick" style="color:#2e2a4a"><a href="#124901" label="[12:49:01]">&lt;stikonas&gt;</a></span><span class="message">but something was not working properly</span></div><div class="line" id="124917"><span class="nick" style="color:#2e2a4a"><a href="#124917" label="[12:49:17]">&lt;stikonas&gt;</a></span><span class="message">you can try to edit things and see if first bash still works</span></div><div class="line" id="124924"><span class="nick" style="color:#2e2a4a"><a href="#124924" label="[12:49:24]">&lt;stikonas&gt;</a></span><span class="message">but that's probably another big PR anyway</span></div><div class="line" id="124940"><span class="nick" style="color:#6d2462"><a href="#124940" label="[12:49:40]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="124952"><span class="nick" style="color:#2e2a4a"><a href="#124952" label="[12:49:52]">&lt;stikonas&gt;</a></span><span class="message">when I was writing helpers.sh, my original plan was to have subshells for each package</span></div><div class="line" id="124955"><span class="nick" style="color:#2e2a4a"><a href="#124955" label="[12:49:55]">&lt;stikonas&gt;</a></span><span class="message">but something was not working</span></div><div class="line" id="125033"><span class="nick" style="color:#2e2a4a"><a href="#125033" label="[12:50:33]">&lt;stikonas&gt;</a></span><span class="message">I suspect it's due to bash using meslibc</span></div><div class="line" id="125037"><span class="nick" style="color:#2e2a4a"><a href="#125037" label="[12:50:37]">&lt;stikonas&gt;</a></span><span class="message">which might go away at some point</span></div><div class="line" id="125112"><span class="nick" style="color:#2e2a4a"><a href="#125112" label="[12:51:12]">&lt;stikonas&gt;</a></span><span class="message">(i.e. if we get gash working)</span></div><div class="line" id="152317"><span class="nick" style="color:#2e2a4a"><a href="#152317" label="[15:23:17]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you pull in <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/32">https://github.com/oriansj/bootstrap-seeds/pull/32</a>  ?</span></div><div class="line" id="160243"><span class="nick" style="color:#80b1d3"><a href="#160243" label="[16:02:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="160329"><span class="nick" style="color:#80b1d3"><a href="#160329" label="[16:03:29]">&lt;oriansj&gt;</a></span><span class="message">and now I see why Fabrice Bellard stopped working on TCC</span></div><div class="line" id="160413"><span class="nick" style="color:#80b1d3"><a href="#160413" label="[16:04:13]">&lt;oriansj&gt;</a></span><span class="message">one would have to do some serious feature regressions to break it up into something easy to maintain.</span></div><div class="line" id="160510"><span class="nick" style="color:#2e2a4a"><a href="#160510" label="[16:05:10]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's a bit unfortunate...</span></div><div class="line" id="160553"><span class="nick" style="color:#2e2a4a"><a href="#160553" label="[16:05:53]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet -&gt; tcc bootstrapping steps were a bit rough for some time now</span></div><div class="line" id="161140"><span class="nick" style="color:#80b1d3"><a href="#161140" label="[16:11:40]">&lt;oriansj&gt;</a></span><span class="message">yeah, that is my fault. I didn't estimate correctly the effort required for a spawned process.</span></div><div class="line" id="161312"><span class="nick" style="color:#234e69"><a href="#161312" label="[16:13:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Not really your fault, it's just that gap between simple C compiler and real world compiler is fairly big</span></div><div class="line" id="161410"><span class="nick" style="color:#80b1d3"><a href="#161410" label="[16:14:10]">&lt;oriansj&gt;</a></span><span class="message">it is just a 5x between TCC and M2-Planet in terms of lines of code</span></div><div class="line" id="161444"><span class="nick" style="color:#80b1d3"><a href="#161444" label="[16:14:44]">&lt;oriansj&gt;</a></span><span class="message">and if I can break the pieces out; each might only be 2x</span></div><div class="line" id="161602"><span class="nick" style="color:#234e69"><a href="#161602" label="[16:16:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, you only need C to M2 compiler</span></div><div class="line" id="161616"><span class="nick" style="color:#234e69"><a href="#161616" label="[16:16:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Can even drop assembly support</span></div><div class="line" id="161709"><span class="nick" style="color:#80b1d3"><a href="#161709" label="[16:17:09]">&lt;oriansj&gt;</a></span><span class="message">M2 is C's core so it is possible to do (like a C99 to C89 compiler)</span></div><div class="line" id="161757"><span class="nick" style="color:#234e69"><a href="#161757" label="[16:17:57]">&lt;stikonas[m]&gt;</a></span><span class="message">If that's simpler...</span></div><div class="line" id="161802"><span class="nick" style="color:#234e69"><a href="#161802" label="[16:18:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Which it might be</span></div><div class="line" id="161845"><span class="nick" style="color:#80b1d3"><a href="#161845" label="[16:18:45]">&lt;oriansj&gt;</a></span><span class="message">I clearly always go the harder route</span></div><div class="line" id="164406"><span class="nick" style="color:#80b1d3"><a href="#164406" label="[16:44:06]">&lt;oriansj&gt;</a></span><span class="message">so this will be a bif fiasco but atleast it'll be fun and educational</span></div><div class="line" id="164419"><span class="nick" style="color:#80b1d3"><a href="#164419" label="[16:44:19]">&lt;oriansj&gt;</a></span><span class="message">^bif^big^</span></div><div class="line" id="164736"><span class="nick" style="color:#80b1d3"><a href="#164736" label="[16:47:36]">&lt;oriansj&gt;</a></span><span class="message">especially given that TCC seems to break real hard when you comment out dlopen</span></div><div class="line" id="171113"><span class="nick" style="color:#2e2a4a"><a href="#171113" label="[17:11:13]">&lt;stikonas&gt;</a></span><span class="message">strange, why would tcc depend on dlopen...</span></div><div class="line" id="171121"><span class="nick" style="color:#2e2a4a"><a href="#171121" label="[17:11:21]">&lt;stikonas&gt;</a></span><span class="message">I thought it can work completely statically</span></div><div class="line" id="182130"><span class="nick">***</span><span class="message notice">Andrew is now known as WaxCPU</span></div><div class="line" id="184127"><span class="nick" style="color:#80b1d3"><a href="#184127" label="[18:41:27]">&lt;oriansj&gt;</a></span><span class="message">maybe a build flag for TCC I needed to set</span></div><div class="line" id="184218"><span class="nick" style="color:#80b1d3"><a href="#184218" label="[18:42:18]">&lt;oriansj&gt;</a></span><span class="message">but it looks like everytime you hit a #include, it dlopen's it and uses dlsym to extract names</span></div><div class="line" id="184412"><span class="nick" style="color:#80b1d3"><a href="#184412" label="[18:44:12]">&lt;oriansj&gt;</a></span><span class="message">it in inside of a #ifdef TCC_IS_NATIVE block in libtcc.c</span></div><div class="line" id="184551"><span class="nick" style="color:#80b1d3"><a href="#184551" label="[18:45:51]">&lt;oriansj&gt;</a></span><span class="message">and the dlsym is in tccelf.c inside of a #if defined TCC_IS_NATIVE &amp;&amp; !defined TCC_TARGET_PE</span></div><div class="line" id="184805"><span class="nick" style="color:#80b1d3"><a href="#184805" label="[18:48:05]">&lt;oriansj&gt;</a></span><span class="message">which is why TCC needs compiled libraries and doesn't use pure source libraries</span></div><div class="line" id="184854"><span class="nick" style="color:#6b8072"><a href="#184854" label="[18:48:54]">&lt;muurkha&gt;</a></span><span class="message">it dlopens what, the .h file?</span></div><div class="line" id="184908"><span class="nick" style="color:#6b8072"><a href="#184908" label="[18:49:08]">&lt;muurkha&gt;</a></span><span class="message">I don't see how that could work</span></div><div class="line" id="184938"><span class="nick" style="color:#6b8072"><a href="#184938" label="[18:49:38]">&lt;muurkha&gt;</a></span><span class="message">dlsym is a pretty good way to extract names from a library, too bad libdl can't read stabs</span></div><div class="line" id="185208"><span class="nick" style="color:#80b1d3"><a href="#185208" label="[18:52:08]">&lt;oriansj&gt;</a></span><span class="message">muurkha: feel free to explain: <a rel="nofollow" href="https://paste.debian.net/1254199/">https://paste.debian.net/1254199/</a> </span></div><div class="line" id="185333"><span class="nick" style="color:#2e2a4a"><a href="#185333" label="[18:53:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: does it still fail if you don't use libraries?</span></div><div class="line" id="185339"><span class="nick" style="color:#2e2a4a"><a href="#185339" label="[18:53:39]">&lt;stikonas&gt;</a></span><span class="message">we only need to build tcc itself</span></div><div class="line" id="185350"><span class="nick" style="color:#2e2a4a"><a href="#185350" label="[18:53:50]">&lt;stikonas&gt;</a></span><span class="message">or is it also the problem with libc</span></div><div class="line" id="185412"><span class="nick" style="color:#6b8072"><a href="#185412" label="[18:54:12]">&lt;muurkha&gt;</a></span><span class="message">stddef.h seems to be tcc-$version/include/stddef.h</span></div><div class="line" id="185456"><span class="nick" style="color:#6b8072"><a href="#185456" label="[18:54:56]">&lt;muurkha&gt;</a></span><span class="message">which mostly defines types like size_t and int64_t, although it does also declare alloca()</span></div><div class="line" id="185946"><span class="nick" style="color:#80b1d3"><a href="#185946" label="[18:59:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well -E will be successful but doing tcc blah.c -o blah will error out with: tcc: error: file 'crt1.o' not found</span></div><div class="line" id="190017"><span class="nick" style="color:#2e2a4a"><a href="#190017" label="[19:00:17]">&lt;stikonas&gt;</a></span><span class="message">that is a strange design choice...</span></div><div class="line" id="190143"><span class="nick" style="color:#80b1d3"><a href="#190143" label="[19:01:43]">&lt;oriansj&gt;</a></span><span class="message">but now we know even more about TCC</span></div><div class="line" id="190216"><span class="nick" style="color:#80b1d3"><a href="#190216" label="[19:02:16]">&lt;oriansj&gt;</a></span><span class="message">and the logic for compiling seems to be mixed in with the parsing.</span></div><div class="line" id="190505"><span class="nick" style="color:#6b8072"><a href="#190505" label="[19:05:05]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's one of the main design features of TCC</span></div><div class="line" id="190520"><span class="nick" style="color:#6b8072"><a href="#190520" label="[19:05:20]">&lt;muurkha&gt;</a></span><span class="message">and also, say, Wirth's one-pass compiler for Oberon</span></div><div class="line" id="190551"><span class="nick" style="color:#6b8072"><a href="#190551" label="[19:05:51]">&lt;muurkha&gt;</a></span><span class="message">or Crenshaw's series</span></div><div class="line" id="191011"><span class="nick" style="color:#80b1d3"><a href="#191011" label="[19:10:11]">&lt;oriansj&gt;</a></span><span class="message">hmmm.</span></div><div class="line" id="191200"><span class="nick" style="color:#6b8072"><a href="#191200" label="[19:12:00]">&lt;muurkha&gt;</a></span><span class="message">I think it really hurts readability but it does require less code, especially in an environment without GC</span></div><div class="line" id="191249"><span class="nick" style="color:#6b8072"><a href="#191249" label="[19:12:49]">&lt;muurkha&gt;</a></span><span class="message">though if you're running a compiler on a machine with 4 gibibytes of RAM I don't know why you need to free things.  they'll get freed anyway when the compile finishes</span></div><div class="line" id="191432"><span class="nick" style="color:#80b1d3"><a href="#191432" label="[19:14:32]">&lt;oriansj&gt;</a></span><span class="message">gcc is broken up into a preprocessor, c compiler, assembler and separate linker right?</span></div><div class="line" id="191520"><span class="nick" style="color:#6b8072"><a href="#191520" label="[19:15:20]">&lt;muurkha&gt;</a></span><span class="message">I don't think the preprocessor is actually separate from the compiler since GCC 2</span></div><div class="line" id="191529"><span class="nick" style="color:#6b8072"><a href="#191529" label="[19:15:29]">&lt;muurkha&gt;</a></span><span class="message">previously it was called cccp</span></div><div class="line" id="191544"><span class="nick" style="color:#2e2a4a"><a href="#191544" label="[19:15:44]">&lt;stikonas&gt;</a></span><span class="message">but assembler and linker are in binutils...</span></div><div class="line" id="191559"><span class="nick" style="color:#80b1d3"><a href="#191559" label="[19:15:59]">&lt;oriansj&gt;</a></span><span class="message">can GCC 2 build GCC 4?</span></div><div class="line" id="191610"><span class="nick" style="color:#6b8072"><a href="#191610" label="[19:16:10]">&lt;muurkha&gt;</a></span><span class="message">though you can get the preprocessor output with gcc -E, I think it's actually the same executable doing the work (cc1? I forget)</span></div><div class="line" id="191640"><span class="nick" style="color:#2e2a4a"><a href="#191640" label="[19:16:40]">&lt;stikonas&gt;</a></span><span class="message">well, combining preprocessor and compiler lets you avoid doing tokenization twice...</span></div><div class="line" id="191659"><span class="nick" style="color:#6b8072"><a href="#191659" label="[19:16:59]">&lt;muurkha&gt;</a></span><span class="message">I haven't tried but I wouldn't be surprised.  but I think maybe you meant &quot;can GCC 1 build GCC 4?&quot; and I think the answer is probably not</span></div><div class="line" id="191711"><span class="nick" style="color:#2e2a4a"><a href="#191711" label="[19:17:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: guix starts with gcc 2.95, so you can check what is the next step there</span></div><div class="line" id="191806"><span class="nick" style="color:#2e2a4a"><a href="#191806" label="[19:18:06]">&lt;stikonas&gt;</a></span><span class="message">how hard would it be to upgrade M2-Mesoplanet to have full C99 preprocessor?</span></div><div class="line" id="191813"><span class="nick" style="color:#80b1d3"><a href="#191813" label="[19:18:13]">&lt;oriansj&gt;</a></span><span class="message">muurkha: no, I am thinking of IF GCC is 4 independent programs (or could with reasonable effort be made so); there may be a route to building GCC directly from M2-Planet</span></div><div class="line" id="191813"><span class="nick" style="color:#2e2a4a"><a href="#191813" label="[19:18:13]">&lt;stikonas&gt;</a></span><span class="message">I think we already support quite a bit</span></div><div class="line" id="191826"><span class="nick" style="color:#6c3d55"><a href="#191826" label="[19:18:26]">&lt;aggi&gt;</a></span><span class="message">minor note, TCC is missing one feature to compile recent linux kernel: an equivalent to gcc -S (to emit pre-generated assembly)</span></div><div class="line" id="191903"><span class="nick" style="color:#80b1d3"><a href="#191903" label="[19:19:03]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well a handful of tweaks in the parser and then we would need to add a combine stage to fix the breakup between - and = into -=</span></div><div class="line" id="191918"><span class="nick" style="color:#2e2a4a"><a href="#191918" label="[19:19:18]">&lt;stikonas&gt;</a></span><span class="message">gcc 4.0.4 already combines evertything into cc1</span></div><div class="line" id="191931"><span class="nick" style="color:#2e2a4a"><a href="#191931" label="[19:19:31]">&lt;stikonas&gt;</a></span><span class="message">but I think C99 preprocessor is an easier task anyway</span></div><div class="line" id="191958"><span class="nick" style="color:#80b1d3"><a href="#191958" label="[19:19:58]">&lt;oriansj&gt;</a></span><span class="message">and then we can tweak the output to be more trivial to compile</span></div><div class="line" id="192018"><span class="nick" style="color:#2e2a4a"><a href="#192018" label="[19:20:18]">&lt;stikonas&gt;</a></span><span class="message">at the very least it should be trivial to retokenize</span></div><div class="line" id="192100"><span class="nick" style="color:#6b8072"><a href="#192100" label="[19:21:00]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I think from the point of view of being 4 independent programs or not, GCC 2 is the same as GCC 4 or GCC 10</span></div><div class="line" id="192337"><span class="nick" style="color:#80b1d3"><a href="#192337" label="[19:23:37]">&lt;oriansj&gt;</a></span><span class="message">but does GCC combine tokenization and the compiling</span></div><div class="line" id="192448"><span class="nick" style="color:#2e2a4a"><a href="#192448" label="[19:24:48]">&lt;stikonas&gt;</a></span><span class="message">I think tokenization is done  by preprocessor</span></div><div class="line" id="192450"><span class="nick" style="color:#2e2a4a"><a href="#192450" label="[19:24:50]">&lt;stikonas&gt;</a></span><span class="message">7a35239a2ad2f39220daa888650dbc44ba4a5664856997d2afb6165d305a8f82</span></div><div class="line" id="192454"><span class="nick" style="color:#2e2a4a"><a href="#192454" label="[19:24:54]">&lt;stikonas&gt;</a></span><span class="message">argh, wrong paste</span></div><div class="line" id="192501"><span class="nick" style="color:#2e2a4a"><a href="#192501" label="[19:25:01]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gcc.gnu.org/onlinedocs/cpp/Tokenization.html#Tokenization">https://gcc.gnu.org/onlinedocs/cpp/Tokenization.html#Tokenization</a> </span></div><div class="line" id="192655"><span class="nick" style="color:#6c3d55"><a href="#192655" label="[19:26:55]">&lt;aggi&gt;</a></span><span class="message">and they're talking about a separation into compiler-backends (for different architectures), and frontends (for different languages to parse/tokenize)</span></div><div class="line" id="192718"><span class="nick" style="color:#6c3d55"><a href="#192718" label="[19:27:18]">&lt;aggi&gt;</a></span><span class="message">TCC doesn't need different language frontends, it does C-lang only</span></div><div class="line" id="192754"><span class="nick" style="color:#2e2a4a"><a href="#192754" label="[19:27:54]">&lt;stikonas&gt;</a></span><span class="message">well, it's more efficient to have different backends and frontends</span></div><div class="line" id="192812"><span class="nick" style="color:#6c3d55"><a href="#192812" label="[19:28:12]">&lt;aggi&gt;</a></span><span class="message">in between those language-frontends and backends, an intermediate representation exists, not sure how it was called</span></div><div class="line" id="192813"><span class="nick" style="color:#d9d9d9"><a href="#192813" label="[19:28:13]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: maybe this helps: <a rel="nofollow" href="https://ekaitz.elenq.tech/bootstrapGcc1.html">https://ekaitz.elenq.tech/bootstrapGcc1.html</a> </span></div><div class="line" id="192815"><span class="nick" style="color:#2e2a4a"><a href="#192815" label="[19:28:15]">&lt;stikonas&gt;</a></span><span class="message">that way you only have to write the really hard bit (optimizer) once</span></div><div class="line" id="192826"><span class="nick" style="color:#d9d9d9"><a href="#192826" label="[19:28:26]">&lt;ekaitz&gt;</a></span><span class="message">there are several ir-s in GCC</span></div><div class="line" id="192834"><span class="nick" style="color:#d9d9d9"><a href="#192834" label="[19:28:34]">&lt;ekaitz&gt;</a></span><span class="message">one is called GIMPLE and other is called RTL</span></div><div class="line" id="192844"><span class="nick" style="color:#d9d9d9"><a href="#192844" label="[19:28:44]">&lt;ekaitz&gt;</a></span><span class="message">RTL is target specific and GIMPLE is not</span></div><div class="line" id="192920"><span class="nick" style="color:#d9d9d9"><a href="#192920" label="[19:29:20]">&lt;ekaitz&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.cse.iitb.ac.in/grc/index.php?page=videos">https://www.cse.iitb.ac.in/grc/index.php?page=videos</a>  &lt;-- you can learn about those here</span></div><div class="line" id="193013"><span class="nick" style="color:#80b1d3"><a href="#193013" label="[19:30:13]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: oh, I am skipping absolutely ALL optimizations</span></div><div class="line" id="193034"><span class="nick" style="color:#6b8072"><a href="#193034" label="[19:30:34]">&lt;muurkha&gt;</a></span><span class="message">stikonas: some optimizations are target-dependente</span></div><div class="line" id="193051"><span class="nick" style="color:#6c3d55"><a href="#193051" label="[19:30:51]">&lt;aggi&gt;</a></span><span class="message">ekaitz: interesting, however, my plan is to avoid GNU-toolchain (gcc,binutils) entirely, and use TCC only</span></div><div class="line" id="193109"><span class="nick" style="color:#80b1d3"><a href="#193109" label="[19:31:09]">&lt;oriansj&gt;</a></span><span class="message">so we only need the bit that reads the C code and outputs the IR</span></div><div class="line" id="193120"><span class="nick" style="color:#d9d9d9"><a href="#193120" label="[19:31:20]">&lt;ekaitz&gt;</a></span><span class="message">it's a little bit hard to understand that there are GIMPLE and RTL IRs in GCC because normally we think about the IR as an AST only, but GCC uses a different compiler architecture than we are used to</span></div><div class="line" id="193120"><span class="nick" style="color:#2e2a4a"><a href="#193120" label="[19:31:20]">&lt;stikonas&gt;</a></span><span class="message">still, it's only some of them. Otherwise if you have n languages and m arches, you would have to write n * m compilers if compiler could only target once arch</span></div><div class="line" id="193141"><span class="nick" style="color:#d9d9d9"><a href="#193141" label="[19:31:41]">&lt;ekaitz&gt;</a></span><span class="message">in GCC the IR you are talking about is RTL, and that's not useful for you because it's target specific</span></div><div class="line" id="193200"><span class="nick" style="color:#2e2a4a"><a href="#193200" label="[19:32:00]">&lt;stikonas&gt;</a></span><span class="message">anyway, we don't do optimizations in bootstrap at all</span></div><div class="line" id="193213"><span class="nick" style="color:#6b8072"><a href="#193213" label="[19:32:13]">&lt;muurkha&gt;</a></span><span class="message">ekaitz: I think there are a lot of IRs that aren't ASTs</span></div><div class="line" id="193242"><span class="nick" style="color:#6b8072"><a href="#193242" label="[19:32:42]">&lt;muurkha&gt;</a></span><span class="message">also didn't GCC add a third IR a few years ago?</span></div><div class="line" id="193306"><span class="nick" style="color:#d9d9d9"><a href="#193306" label="[19:33:06]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: yes, of course, but it's what many people have in mind when they think about compilers</span></div><div class="line" id="193334"><span class="nick" style="color:#d9d9d9"><a href="#193334" label="[19:33:34]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: I'm not sure about that, what I know is they started to focus more on the GIMPLE and added GIMPLE optimizations (tree-level optimizations)</span></div><div class="line" id="193348"><span class="nick" style="color:#d9d9d9"><a href="#193348" label="[19:33:48]">&lt;ekaitz&gt;</a></span><span class="message">GCC is weird because they optimize the tree and later optimize the RTL</span></div><div class="line" id="193414"><span class="nick" style="color:#d9d9d9"><a href="#193414" label="[19:34:14]">&lt;ekaitz&gt;</a></span><span class="message">the conversion between the GIMPLE and the RTL happens in a very simple level, but then the RTL is matched against some templates that then generate the assembly</span></div><div class="line" id="193451"><span class="nick" style="color:#d9d9d9"><a href="#193451" label="[19:34:51]">&lt;ekaitz&gt;</a></span><span class="message">(it's superhard to explain btw, please don't kill me)</span></div><div class="line" id="193513"><span class="nick" style="color:#bc80bd"><a href="#193513" label="[19:35:13]">*</a></span><span class="message">muurkha hugs ekaitz </span></div><div class="line" id="193513"><span class="nick" style="color:#d9d9d9"><a href="#193513" label="[19:35:13]">&lt;ekaitz&gt;</a></span><span class="message">(the link I posted is the best I can do)</span></div><div class="line" id="193531"><span class="nick" style="color:#d9d9d9"><a href="#193531" label="[19:35:31]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: thanks for the understanding :))</span></div><div class="line" id="193653"><span class="nick" style="color:#bc80bd"><a href="#193653" label="[19:36:53]">*</a></span><span class="message">oriansj hugs ekaitz</span></div><div class="line" id="193659"><span class="nick" style="color:#d9d9d9"><a href="#193659" label="[19:36:59]">&lt;ekaitz&gt;</a></span><span class="message">so, about the language frontends: they generate a GIMPLE or a similar representation that is later converted to GIMPLE by the next step</span></div><div class="line" id="193704"><span class="nick" style="color:#d9d9d9"><a href="#193704" label="[19:37:04]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: :D</span></div><div class="line" id="193800"><span class="nick" style="color:#d9d9d9"><a href="#193800" label="[19:38:00]">&lt;ekaitz&gt;</a></span><span class="message">if you want to watch how does gimple works, the gcc internals video series I shared spend a lot of time in that</span></div><div class="line" id="193819"><span class="nick" style="color:#d9d9d9"><a href="#193819" label="[19:38:19]">&lt;ekaitz&gt;</a></span><span class="message">i'm not the best to explain that step, because I only worked in a backed, so I was focused on the RTL only</span></div><div class="line" id="193820"><span class="nick" style="color:#80b1d3"><a href="#193820" label="[19:38:20]">&lt;oriansj&gt;</a></span><span class="message">ok anyone know a way to extract the bit in C that just does the C code to gimple output</span></div><div class="line" id="193927"><span class="nick" style="color:#d9d9d9"><a href="#193927" label="[19:39:27]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: that should be the language frontend, which is pretty much independent</span></div><div class="line" id="194005"><span class="nick" style="color:#d9d9d9"><a href="#194005" label="[19:40:05]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: see gcc/c-parser.c</span></div><div class="line" id="194031"><span class="nick" style="color:#d9d9d9"><a href="#194031" label="[19:40:31]">&lt;ekaitz&gt;</a></span><span class="message">or better gcc/c-*</span></div><div class="line" id="194120"><span class="nick" style="color:#d9d9d9"><a href="#194120" label="[19:41:20]">&lt;ekaitz&gt;</a></span><span class="message">if you want to see how is that process made maybe the fortran frontend is easier to read: it's in the gcc/fortran/ folder</span></div><div class="line" id="194122"><span class="nick" style="color:#6b8072"><a href="#194122" label="[19:41:22]">&lt;muurkha&gt;</a></span><span class="message">is there a command line option to GCC to dump out the GIMPLE representation?</span></div><div class="line" id="194154"><span class="nick" style="color:#d9d9d9"><a href="#194154" label="[19:41:54]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: yes</span></div><div class="line" id="194207"><span class="nick" style="color:#d9d9d9"><a href="#194207" label="[19:42:07]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: there are many but I can't remember</span></div><div class="line" id="194224"><span class="nick" style="color:#d9d9d9"><a href="#194224" label="[19:42:24]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: you can dump all the GIMPLE optimization steps</span></div><div class="line" id="194338"><span class="nick" style="color:#d9d9d9"><a href="#194338" label="[19:43:38]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: -fdump-tree*</span></div><div class="line" id="194353"><span class="nick" style="color:#d9d9d9"><a href="#194353" label="[19:43:53]">&lt;ekaitz&gt;</a></span><span class="message">or maybe I'm wrong :S</span></div><div class="line" id="194504"><span class="nick" style="color:#2e2a4a"><a href="#194504" label="[19:45:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I wonder if this supports C99... <a rel="nofollow" href="https://github.com/logological/gpp/">https://github.com/logological/gpp/</a> </span></div><div class="line" id="194537"><span class="nick" style="color:#d9d9d9"><a href="#194537" label="[19:45:37]">&lt;ekaitz&gt;</a></span><span class="message">it was correct, the format is the following `-fdump-&lt;ir&gt;-&lt;passname&gt;` with that you can choose</span></div><div class="line" id="194721"><span class="nick" style="color:#d9d9d9"><a href="#194721" label="[19:47:21]">&lt;ekaitz&gt;</a></span><span class="message">if you do `-fdump-tree-all` you'll see the GIMPLE is kinda complex and has many optimization passes</span></div><div class="line" id="195552"><span class="nick" style="color:#d9d9d9"><a href="#195552" label="[19:55:52]">&lt;ekaitz&gt;</a></span><span class="message">also oriansj scrolling back... yes, the preprocessor I think it's an independent program: cpp</span></div><div class="line" id="195724"><span class="nick" style="color:#d9d9d9"><a href="#195724" label="[19:57:24]">&lt;ekaitz&gt;</a></span><span class="message">but all this is kind of dangerous to extract directly from the codebase because some files are generated by the build process so be careful with that</span></div><div class="line" id="195744"><span class="nick" style="color:#6b8072"><a href="#195744" label="[19:57:44]">&lt;muurkha&gt;</a></span><span class="message">hmm, I do have a separate cpp executable!</span></div><div class="line" id="195756"><span class="nick" style="color:#6b8072"><a href="#195756" label="[19:57:56]">&lt;muurkha&gt;</a></span><span class="message">so maybe I was just totally wrong about that?</span></div><div class="line" id="195812"><span class="nick" style="color:#6b8072"><a href="#195812" label="[19:58:12]">&lt;muurkha&gt;</a></span><span class="message">is it used in normal compilation, the way cc1 and ld are?</span></div><div class="line" id="195827"><span class="nick" style="color:#d9d9d9"><a href="#195827" label="[19:58:27]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: yes, it's a separate program, you can even run it separately and see it's output</span></div><div class="line" id="195902"><span class="nick" style="color:#d9d9d9"><a href="#195902" label="[19:59:02]">&lt;ekaitz&gt;</a></span><span class="message">also I don't think cpp does really a tokenization... it only works around the preprocessor directives I think</span></div><div class="line" id="195922"><span class="nick" style="color:#d9d9d9"><a href="#195922" label="[19:59:22]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: yes, that's what is used during the normal compilation</span></div><div class="line" id="195951"><span class="nick" style="color:#d9d9d9"><a href="#195951" label="[19:59:51]">&lt;ekaitz&gt;</a></span><span class="message">I think you can `gcc -v ` and see all the internal calls to other programs</span></div><div class="line" id="200110"><span class="nick" style="color:#6b8072"><a href="#200110" label="[20:01:10]">&lt;muurkha&gt;</a></span><span class="message">strace says it's running gcc, cc1, as, collect2, and ld, but not cpp</span></div><div class="line" id="200126"><span class="nick" style="color:#6b8072"><a href="#200126" label="[20:01:26]">&lt;muurkha&gt;</a></span><span class="message">strace -ff -o hellocompile gcc hello.c</span></div><div class="line" id="200133"><span class="nick" style="color:#6b8072"><a href="#200133" label="[20:01:33]">&lt;muurkha&gt;</a></span><span class="message">grep exec hellocompile.*</span></div><div class="line" id="200147"><span class="nick" style="color:#d9d9d9"><a href="#200147" label="[20:01:47]">&lt;ekaitz&gt;</a></span><span class="message">try with `gcc -v hello.c`</span></div><div class="line" id="200155"><span class="nick" style="color:#6b8072"><a href="#200155" label="[20:01:55]">&lt;muurkha&gt;</a></span><span class="message">I did but it didn't tell me anything it was running</span></div><div class="line" id="200202"><span class="nick" style="color:#d9d9d9"><a href="#200202" label="[20:02:02]">&lt;ekaitz&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="200204"><span class="nick" style="color:#d9d9d9"><a href="#200204" label="[20:02:04]">&lt;ekaitz&gt;</a></span><span class="message">let me try</span></div><div class="line" id="200207"><span class="nick" style="color:#6b8072"><a href="#200207" label="[20:02:07]">&lt;muurkha&gt;</a></span><span class="message">oh it did mention as</span></div><div class="line" id="200225"><span class="nick" style="color:#6b8072"><a href="#200225" label="[20:02:25]">&lt;muurkha&gt;</a></span><span class="message">and cc1</span></div><div class="line" id="200230"><span class="nick" style="color:#6b8072"><a href="#200230" label="[20:02:30]">&lt;muurkha&gt;</a></span><span class="message">I just missed it amid all the noise</span></div><div class="line" id="200258"><span class="nick" style="color:#6b8072"><a href="#200258" label="[20:02:58]">&lt;muurkha&gt;</a></span><span class="message">oh, and it mentioned collect2 as well</span></div><div class="line" id="200304"><span class="nick" style="color:#3c5b35"><a href="#200304" label="[20:03:04]">&lt;unmatched-paren&gt;</a></span><span class="message">there's <a rel="nofollow" href="https://github.com/h8liu/mcpp">https://github.com/h8liu/mcpp</a> </span></div><div class="line" id="200350"><span class="nick" style="color:#6b8072"><a href="#200350" label="[20:03:50]">&lt;muurkha&gt;</a></span><span class="message">gcc -v doesn't seem to mention ld (or the gcc driver executable itself)</span></div><div class="line" id="200437"><span class="nick" style="color:#6b8072"><a href="#200437" label="[20:04:37]">&lt;muurkha&gt;</a></span><span class="message">this is on GCC 4.7 FWIW</span></div><div class="line" id="200444"><span class="nick" style="color:#d9d9d9"><a href="#200444" label="[20:04:44]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: try with -no-integrated-cpp</span></div><div class="line" id="200452"><span class="nick" style="color:#d9d9d9"><a href="#200452" label="[20:04:52]">&lt;ekaitz&gt;</a></span><span class="message">that way it will call a separate cpp</span></div><div class="line" id="200526"><span class="nick" style="color:#d9d9d9"><a href="#200526" label="[20:05:26]">&lt;ekaitz&gt;</a></span><span class="message">if you read that option in the man page it says by default gcc does the preprocessor in the same tokenization step, but you can make it call it independently</span></div><div class="line" id="200539"><span class="nick" style="color:#d9d9d9"><a href="#200539" label="[20:05:39]">&lt;ekaitz&gt;</a></span><span class="message">I didn't know this but, hey! here we are to learn together</span></div><div class="line" id="200559"><span class="nick" style="color:#6b8072"><a href="#200559" label="[20:05:59]">&lt;muurkha&gt;</a></span><span class="message">that's awesome!</span></div><div class="line" id="200559"><span class="nick" style="color:#d9d9d9"><a href="#200559" label="[20:05:59]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: ld is called by collect2</span></div><div class="line" id="200619"><span class="nick" style="color:#d9d9d9"><a href="#200619" label="[20:06:19]">&lt;ekaitz&gt;</a></span><span class="message">that's why you can see it in the strace but not from the -v</span></div><div class="line" id="200647"><span class="nick" style="color:#6b8072"><a href="#200647" label="[20:06:47]">&lt;muurkha&gt;</a></span><span class="message">oddly enough in that case instead of invoking the cpp executable it invokes cc1 -E to do the preprocessing</span></div><div class="line" id="200657"><span class="nick" style="color:#6b8072"><a href="#200657" label="[20:06:57]">&lt;muurkha&gt;</a></span><span class="message">yeah, I thought the ld thing might be something like that</span></div><div class="line" id="200727"><span class="nick" style="color:#d9d9d9"><a href="#200727" label="[20:07:27]">&lt;ekaitz&gt;</a></span><span class="message">the collect2 i think also calls the LTO and stuff like that, that's why we need a different program not just the ld call</span></div><div class="line" id="200746"><span class="nick" style="color:#d9d9d9"><a href="#200746" label="[20:07:46]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: cc1 -E... interesting</span></div><div class="line" id="200904"><span class="nick" style="color:#d9d9d9"><a href="#200904" label="[20:09:04]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: i think cpp also calls cc1</span></div><div class="line" id="200921"><span class="nick" style="color:#d9d9d9"><a href="#200921" label="[20:09:21]">&lt;ekaitz&gt;</a></span><span class="message">give it a try with strace</span></div><div class="line" id="201300"><span class="nick" style="color:#6b8072"><a href="#201300" label="[20:13:00]">&lt;muurkha&gt;</a></span><span class="message">oh hey, you're right, cpp is a wrapper around cc1</span></div><div class="line" id="201342"><span class="nick" style="color:#6b8072"><a href="#201342" label="[20:13:42]">&lt;muurkha&gt;</a></span><span class="message">why does it have to be 600K then!?</span></div><div class="line" id="201352"><span class="nick" style="color:#80b1d3"><a href="#201352" label="[20:13:52]">&lt;oriansj&gt;</a></span><span class="message">oh my <a rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gccint/GIMPLE-instruction-set.html#GIMPLE-instruction-set">https://gcc.gnu.org/onlinedocs/gccint/GIMPLE-instruction-set.html#GIMPLE-instruction-set</a>  GIMPLE isn't that far off from what M2-Planet has internally</span></div><div class="line" id="201447"><span class="nick" style="color:#6b8072"><a href="#201447" label="[20:14:47]">&lt;muurkha&gt;</a></span><span class="message">GIMPLE_PHI is presumably the operation for unifying two different assignments on different control paths so you can have SSA?</span></div><div class="line" id="201634"><span class="nick" style="color:#6b8072"><a href="#201634" label="[20:16:34]">&lt;muurkha&gt;</a></span><span class="message">there's an overview in <a rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html">https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html</a> </span></div><div class="line" id="201705"><span class="nick" style="color:#d9d9d9"><a href="#201705" label="[20:17:05]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: I shared a link before from the university of Bombay, they explain it really well too</span></div><div class="line" id="202107"><span class="nick" style="color:#6b8072"><a href="#202107" label="[20:21:07]">&lt;muurkha&gt;</a></span><span class="message">yeah but it was videos, right?  that's what the URL said</span></div><div class="line" id="202115"><span class="nick" style="color:#6b8072"><a href="#202115" label="[20:21:15]">&lt;muurkha&gt;</a></span><span class="message">so I didn't follow it</span></div><div class="line" id="202206"><span class="nick" style="color:#6b8072"><a href="#202206" label="[20:22:06]">&lt;muurkha&gt;</a></span><span class="message">by contrast that doc overview page is 500 words, you can read it in a minute and a half</span></div><div class="line" id="202222"><span class="nick" style="color:#80b1d3"><a href="#202222" label="[20:22:22]">&lt;oriansj&gt;</a></span><span class="message">(OP R_out R_in1 R_in2)</span></div><div class="line" id="202401"><span class="nick" style="color:#80b1d3"><a href="#202401" label="[20:24:01]">&lt;oriansj&gt;</a></span><span class="message">I can imagine looking at GIMPLE and GENERIC is C to  S-expressions</span></div><div class="line" id="202411"><span class="nick" style="color:#d9d9d9"><a href="#202411" label="[20:24:11]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: the difference is the docs are... not really clarifying :)</span></div><div class="line" id="202450"><span class="nick" style="color:#d9d9d9"><a href="#202450" label="[20:24:50]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: kinda, but not really... it's more like a some kind of assembly with tree-way instructions</span></div><div class="line" id="202747"><span class="nick" style="color:#80b1d3"><a href="#202747" label="[20:27:47]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: (jne :lable R0 R1)</span></div><div class="line" id="202818"><span class="nick" style="color:#d9d9d9"><a href="#202818" label="[20:28:18]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: haha i see what you mean</span></div><div class="line" id="202947"><span class="nick" style="color:#d9d9d9"><a href="#202947" label="[20:29:47]">&lt;ekaitz&gt;</a></span><span class="message">if you output the gimple to a file it's still looking like a C subset or something</span></div><div class="line" id="202956"><span class="nick" style="color:#d9d9d9"><a href="#202956" label="[20:29:56]">&lt;ekaitz&gt;</a></span><span class="message">but yeah, it's a three-way thingie</span></div><div class="line" id="202957"><span class="nick" style="color:#80b1d3"><a href="#202957" label="[20:29:57]">&lt;oriansj&gt;</a></span><span class="message">see lisp originally mapped straight to assembly; (add a b) =&gt; (RETURN (load R0 :a) (load R1 :b)(add R0 R1))</span></div><div class="line" id="203004"><span class="nick" style="color:#6b8072"><a href="#203004" label="[20:30:04]">&lt;muurkha&gt;</a></span><span class="message">that's sort of a decompilation of the gimple though</span></div><div class="line" id="204052"><span class="nick" style="color:#80b1d3"><a href="#204052" label="[20:40:52]">&lt;oriansj&gt;</a></span><span class="message">this is all is giving me ideas</span></div><div class="line" id="204104"><span class="nick" style="color:#6b8072"><a href="#204104" label="[20:41:04]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="204232"><span class="nick" style="color:#d9d9d9"><a href="#204232" label="[20:42:32]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: if I can give you more ideas... just squeeze me</span></div><div class="line" id="204302"><span class="nick" style="color:#80b1d3"><a href="#204302" label="[20:43:02]">&lt;oriansj&gt;</a></span><span class="message">I am starting to think we have been doing C compilers the way that makes things harder than needed.</span></div><div class="line" id="204439"><span class="nick" style="color:#d9d9d9"><a href="#204439" label="[20:44:39]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: specifically GCC is REALLY complex</span></div><div class="line" id="204445"><span class="nick" style="color:#d9d9d9"><a href="#204445" label="[20:44:45]">&lt;ekaitz&gt;</a></span><span class="message">need for speedTM you know</span></div><div class="line" id="204519"><span class="nick" style="color:#d9d9d9"><a href="#204519" label="[20:45:19]">&lt;ekaitz&gt;</a></span><span class="message">C itself is not that complex to need this amount of code... GCC has millions of lines split in thousands of files</span></div><div class="line" id="204603"><span class="nick" style="color:#80b1d3"><a href="#204603" label="[20:46:03]">&lt;oriansj&gt;</a></span><span class="message">well GCC is overly engineered to enable chasing every possible optimization.</span></div><div class="line" id="204619"><span class="nick" style="color:#80b1d3"><a href="#204619" label="[20:46:19]">&lt;oriansj&gt;</a></span><span class="message">some of that engineering is a really good idea.</span></div><div class="line" id="204646"><span class="nick" style="color:#d9d9d9"><a href="#204646" label="[20:46:46]">&lt;ekaitz&gt;</a></span><span class="message">yeah but the basics are overcomplicated</span></div><div class="line" id="204707"><span class="nick" style="color:#d9d9d9"><a href="#204707" label="[20:47:07]">&lt;ekaitz&gt;</a></span><span class="message">i think a C nanopass compiler is possible</span></div><div class="line" id="204711"><span class="nick" style="color:#80b1d3"><a href="#204711" label="[20:47:11]">&lt;oriansj&gt;</a></span><span class="message">slightly but not in a way that can't be cribbed off in a productive fashion.</span></div><div class="line" id="204723"><span class="nick" style="color:#d9d9d9"><a href="#204723" label="[20:47:23]">&lt;ekaitz&gt;</a></span><span class="message">and it could be enough</span></div><div class="line" id="204729"><span class="nick" style="color:#80b1d3"><a href="#204729" label="[20:47:29]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: my thoughts exactly</span></div><div class="line" id="204740"><span class="nick" style="color:#d9d9d9"><a href="#204740" label="[20:47:40]">&lt;ekaitz&gt;</a></span><span class="message">:)</span></div><div class="line" id="205609"><span class="nick" style="color:#80b1d3"><a href="#205609" label="[20:56:09]">&lt;oriansj&gt;</a></span><span class="message">so C-orchastrator spawns c-preprocessor (reads all sources and dumps a single source file in a form easiest to parse), c-compiler (reads dump and produces an IR dump), c-optimizer (skipped but easy to add), c-specializer (converts IR to target assembly), machine-optimizer (skipped but easy to add), assembler (converts assembly to object code), link-time-optimizer (skipped but easy to add), linker (converts object code to final binary)</span></div><div class="line" id="205705"><span class="nick" style="color:#80b1d3"><a href="#205705" label="[20:57:05]">&lt;oriansj&gt;</a></span><span class="message">everything after the c-compiler becomes sharable by different programming languages</span></div><div class="line" id="210206"><span class="nick" style="color:#80b1d3"><a href="#210206" label="[21:02:06]">&lt;oriansj&gt;</a></span><span class="message">hmmmm</span></div><div class="line" id="210254"><span class="nick" style="color:#80b1d3"><a href="#210254" label="[21:02:54]">&lt;oriansj&gt;</a></span><span class="message">and we know all the C keywords and tokens that TCC supported, so once we support those correctly we should be able to Compile GCC too</span></div><div class="line" id="210623"><span class="nick" style="color:#d9d9d9"><a href="#210623" label="[21:06:23]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: the c-specializer is done in two steps that are pretty separate actually</span></div><div class="line" id="210708"><span class="nick" style="color:#d9d9d9"><a href="#210708" label="[21:07:08]">&lt;ekaitz&gt;</a></span><span class="message">the gimple opcodes are matched in a hardcoded table to a generic RTL template</span></div><div class="line" id="210723"><span class="nick" style="color:#d9d9d9"><a href="#210723" label="[21:07:23]">&lt;ekaitz&gt;</a></span><span class="message">then the RTL is matched to the machine specific RTLs</span></div><div class="line" id="210739"><span class="nick" style="color:#d9d9d9"><a href="#210739" label="[21:07:39]">&lt;ekaitz&gt;</a></span><span class="message">so the RTL is not just a target related thing, it serves too purposes</span></div><div class="line" id="210828"><span class="nick" style="color:#d9d9d9"><a href="#210828" label="[21:08:28]">&lt;ekaitz&gt;</a></span><span class="message">when you write a new backend you don't need to write how is the GIMPLE matched to the RTL, but you write how the RTL is converted to assembly</span></div><div class="line" id="210841"><span class="nick" style="color:#d9d9d9"><a href="#210841" label="[21:08:41]">&lt;ekaitz&gt;</a></span><span class="message">and also you give some info about the machine so the RTL is generated with that in mind</span></div><div class="line" id="210844"><span class="nick" style="color:#d9d9d9"><a href="#210844" label="[21:08:44]">&lt;ekaitz&gt;</a></span><span class="message">it's hard to explain</span></div><div class="line" id="210922"><span class="nick" style="color:#d9d9d9"><a href="#210922" label="[21:09:22]">&lt;ekaitz&gt;</a></span><span class="message">but here the real IR is the RTL, but the GIMPLE started to gain some importance in the process some years ago</span></div><div class="line" id="211016"><span class="nick" style="color:#d9d9d9"><a href="#211016" label="[21:10:16]">&lt;ekaitz&gt;</a></span><span class="message">in the videos of the university of bombai they explain it correctly</span></div><div class="line" id="211027"><span class="nick" style="color:#d9d9d9"><a href="#211027" label="[21:10:27]">&lt;ekaitz&gt;</a></span><span class="message">GCC follows an architecture that is not very common</span></div><div class="line" id="211100"><span class="nick" style="color:#d9d9d9"><a href="#211100" label="[21:11:00]">&lt;ekaitz&gt;</a></span><span class="message">there are two ways to make compilers: one that separates the backend from the frontend in a target independent IR and optimizes on top of that one</span></div><div class="line" id="211111"><span class="nick" style="color:#d9d9d9"><a href="#211111" label="[21:11:11]">&lt;ekaitz&gt;</a></span><span class="message">and the other that has a target dependent IR and optimizes on that</span></div><div class="line" id="211207"><span class="nick" style="color:#d9d9d9"><a href="#211207" label="[21:12:07]">&lt;ekaitz&gt;</a></span><span class="message">the first is the one that is usually taught in books like the dragon book and stuff like that</span></div><div class="line" id="211212"><span class="nick" style="color:#d9d9d9"><a href="#211212" label="[21:12:12]">&lt;ekaitz&gt;</a></span><span class="message">but GCC follows the second</span></div><div class="line" id="211232"><span class="nick" style="color:#d9d9d9"><a href="#211232" label="[21:12:32]">&lt;ekaitz&gt;</a></span><span class="message">so GIMPLE is not really the main IR in GCC (but it has become more important last years)</span></div><div class="line" id="211418"><span class="nick" style="color:#80b1d3"><a href="#211418" label="[21:14:18]">&lt;oriansj&gt;</a></span><span class="message">if you can find a link to those videos you mentioned, please share so I can take a look when I get a few free minutes</span></div><div class="line" id="211438"><span class="nick" style="color:#d9d9d9"><a href="#211438" label="[21:14:38]">&lt;ekaitz&gt;</a></span><span class="message">the technical word i was looking for: GCC follows the Davidson Fraser Model</span></div><div class="line" id="211448"><span class="nick" style="color:#d9d9d9"><a href="#211448" label="[21:14:48]">&lt;ekaitz&gt;</a></span><span class="message">in contrast to the Aho Ullman model</span></div><div class="line" id="211458"><span class="nick" style="color:#80b1d3"><a href="#211458" label="[21:14:58]">&lt;oriansj&gt;</a></span><span class="message">as I am planning on using as many good idea as I can</span></div><div class="line" id="211518"><span class="nick" style="color:#d9d9d9"><a href="#211518" label="[21:15:18]">&lt;ekaitz&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.cse.iitb.ac.in/grc/index.php?page=videos">https://www.cse.iitb.ac.in/grc/index.php?page=videos</a> </span></div><div class="line" id="211523"><span class="nick" style="color:#d9d9d9"><a href="#211523" label="[21:15:23]">&lt;ekaitz&gt;</a></span><span class="message">those are the videos</span></div><div class="line" id="211657"><span class="nick" style="color:#80b1d3"><a href="#211657" label="[21:16:57]">&lt;oriansj&gt;</a></span><span class="message">thank you</span></div><div class="line" id="211754"><span class="nick" style="color:#d9d9d9"><a href="#211754" label="[21:17:54]">&lt;ekaitz&gt;</a></span><span class="message">so the thing is GCC uses an expander that takes the GIMPLE and expands the code to register transfers, then optimizes that and uses a pattern recognizer to generate the assembly</span></div><div class="line" id="211832"><span class="nick" style="color:#d9d9d9"><a href="#211832" label="[21:18:32]">&lt;ekaitz&gt;</a></span><span class="message">while the aho ullman style compilers generate an AST, optimize it and finally generate the target code</span></div><div class="line" id="211859"><span class="nick" style="color:#d9d9d9"><a href="#211859" label="[21:18:59]">&lt;ekaitz&gt;</a></span><span class="message">of course, the aho ullman compilers can have some peephole optimizations in the target code too, but they don't normally have many</span></div><div class="line" id="211912"><span class="nick" style="color:#d9d9d9"><a href="#211912" label="[21:19:12]">&lt;ekaitz&gt;</a></span><span class="message">in the case of gcc, they started adding tree-level optimizations later</span></div><div class="line" id="211920"><span class="nick" style="color:#d9d9d9"><a href="#211920" label="[21:19:20]">&lt;ekaitz&gt;</a></span><span class="message">so now it's kind of a mixed approach</span></div><div class="line" id="212000"><span class="nick" style="color:#d9d9d9"><a href="#212000" label="[21:20:00]">&lt;ekaitz&gt;</a></span><span class="message">(sorry for the supermegalong explanations, I got excited, I normally don't have the chance to talk about these things...)</span></div><div class="line" id="212007"><span class="nick" style="color:#bc80bd"><a href="#212007" label="[21:20:07]">*</a></span><span class="message">ekaitz feels alone sometimes</span></div><div class="line" id="212531"><span class="nick" style="color:#80b1d3"><a href="#212531" label="[21:25:31]">&lt;oriansj&gt;</a></span><span class="message">me hugs ekaitz</span></div><div class="line" id="212539"><span class="nick" style="color:#bc80bd"><a href="#212539" label="[21:25:39]">*</a></span><span class="message">oriansj hugs ekaitz</span></div><div class="line" id="212550"><span class="nick" style="color:#80b1d3"><a href="#212550" label="[21:25:50]">&lt;oriansj&gt;</a></span><span class="message">you are with friends here</span></div><div class="line" id="212609"><span class="nick" style="color:#80b1d3"><a href="#212609" label="[21:26:09]">&lt;oriansj&gt;</a></span><span class="message">and if you ever need to talk to someone feel free to give me a call on Signal</span></div><div class="line" id="212640"><span class="nick" style="color:#d9d9d9"><a href="#212640" label="[21:26:40]">&lt;ekaitz&gt;</a></span><span class="message">:)) thank you</span></div><div class="line" id="212839"><span class="nick" style="color:#80b1d3"><a href="#212839" label="[21:28:39]">&lt;oriansj&gt;</a></span><span class="message">and you should have that number as you are a friend after all</span></div><div class="line" id="212914"><span class="nick" style="color:#d9d9d9"><a href="#212914" label="[21:29:14]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: don't worry mate I don't use signal either, i'm fine with this IRC chat :)</span></div><div class="line" id="212950"><span class="nick" style="color:#80b1d3"><a href="#212950" label="[21:29:50]">&lt;oriansj&gt;</a></span><span class="message">I'm also on matrix for people who prefer different communication methods</span></div><div class="line" id="213029"><span class="nick" style="color:#6b8072"><a href="#213029" label="[21:30:29]">&lt;muurkha&gt;</a></span><span class="message">oriansj: part of GCC being overcomplicated is a result of GCC being 35 years old</span></div><div class="line" id="213125"><span class="nick" style="color:#d9d9d9"><a href="#213125" label="[21:31:25]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: I don't think that justifies everything</span></div><div class="line" id="213155"><span class="nick" style="color:#6b8072"><a href="#213155" label="[21:31:55]">&lt;muurkha&gt;</a></span><span class="message">I'm pretty sure it contains decisions that we've known were a bad idea for 25 years but have been too much work to change</span></div><div class="line" id="213201"><span class="nick" style="color:#d9d9d9"><a href="#213201" label="[21:32:01]">&lt;ekaitz&gt;</a></span><span class="message">I'm almost 35 and I'm not that complex after all LOL</span></div><div class="line" id="213239"><span class="nick" style="color:#d9d9d9"><a href="#213239" label="[21:32:39]">&lt;ekaitz&gt;</a></span><span class="message">the Davidson Fraser Model was one of those weird decisions they are regretting now</span></div><div class="line" id="213250"><span class="nick" style="color:#d9d9d9"><a href="#213250" label="[21:32:50]">&lt;ekaitz&gt;</a></span><span class="message">there were some efforts to remove RTL too</span></div><div class="line" id="213256"><span class="nick" style="color:#d9d9d9"><a href="#213256" label="[21:32:56]">&lt;ekaitz&gt;</a></span><span class="message">and use other kind of representation...</span></div><div class="line" id="213319"><span class="nick" style="color:#6b8072"><a href="#213319" label="[21:33:19]">&lt;muurkha&gt;</a></span><span class="message">oriansj: you might want to read one of the early papers on Steve Johnson's pcc compiler, which was split into a front end and back end that communicated through a byte stream</span></div><div class="line" id="213333"><span class="nick" style="color:#6b8072"><a href="#213333" label="[21:33:33]">&lt;muurkha&gt;</a></span><span class="message">more recent versions of pcc don't work that way</span></div><div class="line" id="213341"><span class="nick" style="color:#d9d9d9"><a href="#213341" label="[21:33:41]">&lt;ekaitz&gt;</a></span><span class="message">but that's not the only reason... GCC is also a Compiler Generation Framework, and that makes the thing really complex</span></div><div class="line" id="213441"><span class="nick" style="color:#6b8072"><a href="#213441" label="[21:34:41]">&lt;muurkha&gt;</a></span><span class="message">I think it's pretty common for compilers to have both a target-independent IR and a target-independent one.  some even have a much larger number of IRs</span></div><div class="line" id="213600"><span class="nick" style="color:#6b8072"><a href="#213600" label="[21:36:00]">&lt;muurkha&gt;</a></span><span class="message">ekaitz: I'm not saying it justifies things; there are probably also mistakes in GCC's design that someone who wasn't writing their first compiler would have avoided</span></div><div class="line" id="213631"><span class="nick" style="color:#6b8072"><a href="#213631" label="[21:36:31]">&lt;muurkha&gt;</a></span><span class="message">although I'm not sure what they are</span></div><div class="line" id="213717"><span class="nick" style="color:#d9d9d9"><a href="#213717" label="[21:37:17]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: GCC was built by people doing research so I don't think it has novice mistakes</span></div><div class="line" id="213829"><span class="nick" style="color:#d9d9d9"><a href="#213829" label="[21:38:29]">&lt;ekaitz&gt;</a></span><span class="message">It's a really good piece of software</span></div><div class="line" id="213836"><span class="nick" style="color:#d9d9d9"><a href="#213836" label="[21:38:36]">&lt;ekaitz&gt;</a></span><span class="message">it supports hundreds of architecture</span></div><div class="line" id="213843"><span class="nick" style="color:#d9d9d9"><a href="#213843" label="[21:38:43]">&lt;ekaitz&gt;</a></span><span class="message">s*</span></div><div class="line" id="213845"><span class="nick" style="color:#d9d9d9"><a href="#213845" label="[21:38:45]">&lt;ekaitz&gt;</a></span><span class="message">it's easy to port</span></div><div class="line" id="213851"><span class="nick" style="color:#d9d9d9"><a href="#213851" label="[21:38:51]">&lt;ekaitz&gt;</a></span><span class="message">it's powerful...</span></div><div class="line" id="213904"><span class="nick" style="color:#d9d9d9"><a href="#213904" label="[21:39:04]">&lt;ekaitz&gt;</a></span><span class="message">but in the end it's impossible to read by an individual</span></div><div class="line" id="213910"><span class="nick" style="color:#80b1d3"><a href="#213910" label="[21:39:10]">&lt;oriansj&gt;</a></span><span class="message">the only weakness is that it isn't easy to bootstrap</span></div><div class="line" id="214036"><span class="nick" style="color:#2e2a4a"><a href="#214036" label="[21:40:36]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet is even easier to port, supports a few (7 or so) architectures, fairly easy to read by an individual but not that powerful...</span></div><div class="line" id="214216"><span class="nick" style="color:#80b1d3"><a href="#214216" label="[21:42:16]">&lt;oriansj&gt;</a></span><span class="message">stikonas: actually it could have been even easier to port if I was smarter about it and did IR output and architecture specializers but it would have been harder to do cc_* support</span></div><div class="line" id="214305"><span class="nick" style="color:#80b1d3"><a href="#214305" label="[21:43:05]">&lt;oriansj&gt;</a></span><span class="message">so I guess I have a top down plan for M3 instead of just the bottom up one I was previously planning</span></div><div class="line" id="214455"><span class="nick" style="color:#6b8072"><a href="#214455" label="[21:44:55]">&lt;muurkha&gt;</a></span><span class="message">ekaitz: no, Stallman wasn't doing research and he was a novice at compilers, though he had a quarter of century of experience programming</span></div><div class="line" id="214624"><span class="nick" style="color:#6b8072"><a href="#214624" label="[21:46:24]">&lt;muurkha&gt;</a></span><span class="message">Cygnus wasn't a research venture either</span></div><div class="line" id="214652"><span class="nick" style="color:#6b8072"><a href="#214652" label="[21:46:52]">&lt;muurkha&gt;</a></span><span class="message">though it did have people with compiler experience</span></div><div class="line" id="214948"><span class="nick" style="color:#6c3d55"><a href="#214948" label="[21:49:48]">&lt;aggi&gt;</a></span><span class="message">binutils and assembly, are a headache, to detangle from GNU too</span></div><div class="line" id="215301"><span class="nick" style="color:#80b1d3"><a href="#215301" label="[21:53:01]">&lt;oriansj&gt;</a></span><span class="message">aggi: I think I can solve that</span></div><div class="line" id="215317"><span class="nick" style="color:#80b1d3"><a href="#215317" label="[21:53:17]">&lt;oriansj&gt;</a></span><span class="message">and give you a better than TCC compiler</span></div><div class="line" id="215357"><span class="nick" style="color:#6c3d55"><a href="#215357" label="[21:53:57]">&lt;aggi&gt;</a></span><span class="message">oriansj: my focus is the _entire_ system integration, and for this i use tcc-toolchain simply because it is possible to it with</span></div><div class="line" id="215436"><span class="nick" style="color:#6c3d55"><a href="#215436" label="[21:54:36]">&lt;aggi&gt;</a></span><span class="message">and this reveals problems, which will be hit by any other approach, when detangling GNU-toolchain and GNU-buildsystem</span></div><div class="line" id="215521"><span class="nick" style="color:#6c3d55"><a href="#215521" label="[21:55:21]">&lt;aggi&gt;</a></span><span class="message">hence, even when you prefer another compiler (cproc), assembler whatever, it will be much easier, if any distro removed _all_ c++ dependencies already</span></div><div class="line" id="215531"><span class="nick" style="color:#6c3d55"><a href="#215531" label="[21:55:31]">&lt;aggi&gt;</a></span><span class="message">and if such a distro did pass with tcc-toolchain already too</span></div><div class="line" id="215621"><span class="nick" style="color:#6b8072"><a href="#215621" label="[21:56:21]">&lt;muurkha&gt;</a></span><span class="message">cproc?</span></div><div class="line" id="215644"><span class="nick" style="color:#6c3d55"><a href="#215644" label="[21:56:44]">&lt;aggi&gt;</a></span><span class="message">that's another alternative compiler, didn't test this one yet</span></div><div class="line" id="215726"><span class="nick" style="color:#6c3d55"><a href="#215726" label="[21:57:26]">&lt;aggi&gt;</a></span><span class="message">anyhow, the rationale with the system integration approach of mine, covers different aspects than bootstrappable ones too</span></div><div class="line" id="215741"><span class="nick" style="color:#6b8072"><a href="#215741" label="[21:57:41]">&lt;muurkha&gt;</a></span><span class="message">ah, hadn't heard of it</span></div><div class="line" id="215826"><span class="nick" style="color:#6c3d55"><a href="#215826" label="[21:58:26]">&lt;aggi&gt;</a></span><span class="message">including full removal of GNU-toolchain/buildsystem, removal of bashism, no-c++, etc.</span></div><div class="line" id="215838"><span class="nick" style="color:#d9d9d9"><a href="#215838" label="[21:58:38]">&lt;ekaitz&gt;</a></span><span class="message">muurkha: cproc is really interesting, it uses qbe backend</span></div><div class="line" id="215847"><span class="nick" style="color:#6c3d55"><a href="#215847" label="[21:58:47]">&lt;aggi&gt;</a></span><span class="message">suckless or toybox userspace integration, removal of GNU make replaced with POSIX make</span></div><div class="line" id="215900"><span class="nick" style="color:#6c3d55"><a href="#215900" label="[21:59:00]">&lt;aggi&gt;</a></span><span class="message">POSIX-shell only, no bashism</span></div><div class="line" id="215921"><span class="nick" style="color:#d9d9d9"><a href="#215921" label="[21:59:21]">&lt;ekaitz&gt;</a></span><span class="message">aggi: but posix is not a really well defined standard either</span></div><div class="line" id="215934"><span class="nick" style="color:#d9d9d9"><a href="#215934" label="[21:59:34]">&lt;ekaitz&gt;</a></span><span class="message">what to do with the kernel api?</span></div><div class="line" id="215934"><span class="nick" style="color:#6b8072"><a href="#215934" label="[21:59:34]">&lt;muurkha&gt;</a></span><span class="message">BSD make?</span></div><div class="line" id="215942"><span class="nick" style="color:#d9d9d9"><a href="#215942" label="[21:59:42]">&lt;ekaitz&gt;</a></span><span class="message">posix is old-ish</span></div><div class="line" id="215944"><span class="nick" style="color:#6b8072"><a href="#215944" label="[21:59:44]">&lt;muurkha&gt;</a></span><span class="message">or heirloom-tools make?</span></div><div class="line" id="220007"><span class="nick" style="color:#6c3d55"><a href="#220007" label="[22:00:07]">&lt;aggi&gt;</a></span><span class="message">if possible, not GNU make, i'll try this one <a rel="nofollow" href="https://frippery.org/make/">https://frippery.org/make/</a> </span></div><div class="line" id="220020"><span class="nick" style="color:#6c3d55"><a href="#220020" label="[22:00:20]">&lt;aggi&gt;</a></span><span class="message">with kernel, the plan is ROLL-BACK to linux-2.4, for various reasons</span></div><div class="line" id="220125"><span class="nick" style="color:#6c3d55"><a href="#220125" label="[22:01:25]">&lt;aggi&gt;</a></span><span class="message">this won't be POSIX-complete, however, with GNU, it is their extensions beyond POSIX which are a trouble-source</span></div><div class="line" id="220217"><span class="nick" style="color:#6b8072"><a href="#220217" label="[22:02:17]">&lt;muurkha&gt;</a></span><span class="message">dunno, when I spent all day hacking makefiles I considered the lack of extensions beyond POSIX to be a trouble-source!</span></div><div class="line" id="220234"><span class="nick" style="color:#6b8072"><a href="#220234" label="[22:02:34]">&lt;muurkha&gt;</a></span><span class="message">ekaitz: qbe is interesting but I haven't tried using it</span></div><div class="line" id="220322"><span class="nick" style="color:#6c3d55"><a href="#220322" label="[22:03:22]">&lt;aggi&gt;</a></span><span class="message">muurkha: suckless.org Makefiles tend to be simpler than the typical GNU makefiles (and even worse than what autoconf/automake excrete)</span></div><div class="line" id="220455"><span class="nick" style="color:#6c3d55"><a href="#220455" label="[22:04:55]">&lt;aggi&gt;</a></span><span class="message">toybox passed with tcc-toolchain already (except wget widget), not sure yet what trouble awaits when switching to POSIX make</span></div><div class="line" id="220510"><span class="nick" style="color:#6c3d55"><a href="#220510" label="[22:05:10]">&lt;aggi&gt;</a></span><span class="message">that's why, i want to do it</span></div><div class="line" id="220550"><span class="nick" style="color:#6c3d55"><a href="#220550" label="[22:05:50]">&lt;aggi&gt;</a></span><span class="message">and i won't shed that many tears, if various software is sacrificed due to this type of problems</span></div><br /></div></body></html>