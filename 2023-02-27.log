<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-02-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013741"><span class="nick" style="color:#389600"><a href="#013741" label="[01:37:41]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://upload.wikimedia.org/wikipedia/commons/c/c8/FloppyRom_Magazine.jpg">https://upload.wikimedia.org/wikipedia/commons/c/c8/FloppyRom_Magazine.jpg</a> </span></div><div class="line" id="013848"><span class="nick" style="color:#389600"><a href="#013848" label="[01:38:48]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://archive.org/details/Interface_Age_vol02I06_1977_May">https://archive.org/details/Interface_Age_vol02I06_1977_May</a>  page 32 include a modulator/demodulator design</span></div><div class="line" id="013931"><span class="nick" style="color:#389600"><a href="#013931" label="[01:39:31]">&lt;oriansj&gt;</a></span><span class="message">essentially any audio device becomes a viable storage medium when bootstrapping.</span></div><div class="line" id="014714"><span class="nick" style="color:#8dd3c7"><a href="#014714" label="[01:47:14]">&lt;muurkha&gt;</a></span><span class="message">it's a question of bit rate and error rate</span></div><div class="line" id="014902"><span class="nick" style="color:#8dd3c7"><a href="#014902" label="[01:49:02]">&lt;muurkha&gt;</a></span><span class="message">by &quot;page 32&quot; you mean the page numbered 30, which is the 32nd of 152 pages?</span></div><div class="line" id="014938"><span class="nick" style="color:#389600"><a href="#014938" label="[01:49:38]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yes, thank you for the correction</span></div><div class="line" id="015112"><span class="nick" style="color:#8dd3c7"><a href="#015112" label="[01:51:12]">&lt;muurkha&gt;</a></span><span class="message">I think the &quot;floppy-ROM&quot; must have been a record cut (or pressed) into a thin, flexible sheet of plastic; I forget what these were called</span></div><div class="line" id="015247"><span class="nick" style="color:#389600"><a href="#015247" label="[01:52:47]">&lt;oriansj&gt;</a></span><span class="message">also it appears the decoding into memory is done entirely in software; so in theory one could add error recovery and compression</span></div><div class="line" id="015355"><span class="nick" style="color:#8dd3c7"><a href="#015355" label="[01:53:55]">&lt;muurkha&gt;</a></span><span class="message">aha, &quot;The flexi disc (also known as a phonosheet, Sonosheet or Soundsheet, a trademark) is a phonograph record made of a thin, flexible vinyl sheet with a molded-in spiral stylus groove, and is designed to be playable on a normal phonograph turntable&quot;</span></div><div class="line" id="015359"><span class="nick" style="color:#8dd3c7"><a href="#015359" label="[01:53:59]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Flexi_disc">https://en.wikipedia.org/wiki/Flexi_disc</a> </span></div><div class="line" id="015410"><span class="nick" style="color:#8dd3c7"><a href="#015410" label="[01:54:10]">&lt;muurkha&gt;</a></span><span class="message">yes, it had to be</span></div><div class="line" id="020119"><span class="nick" style="color:#8dd3c7"><a href="#020119" label="[02:01:19]">&lt;muurkha&gt;</a></span><span class="message">though as the schematic on that page shows, the signal was sort of demodulated before the software saw it</span></div><div class="line" id="020250"><span class="nick" style="color:#8dd3c7"><a href="#020250" label="[02:02:50]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Kansas_City_standard">https://en.wikipedia.org/wiki/Kansas_City_standard</a>  goes into some detail about the modulation they were using</span></div><div class="line" id="020501"><span class="nick" style="color:#8dd3c7"><a href="#020501" label="[02:05:01]">&lt;muurkha&gt;</a></span><span class="message">it's kind of a shame; a stereo vinyl record has easily 400 kilobits per second of channel capacity, and with the right kind of modulation you could use *all* of that</span></div><div class="line" id="020646"><span class="nick" style="color:#8dd3c7"><a href="#020646" label="[02:06:46]">&lt;muurkha&gt;</a></span><span class="message">46 minutes at 400 kilobits per second is 140 megabytes</span></div><div class="line" id="020706"><span class="nick" style="color:#389600"><a href="#020706" label="[02:07:06]">&lt;oriansj&gt;</a></span><span class="message">which is most of the first stages of live-bootstrap</span></div><div class="line" id="020747"><span class="nick" style="color:#389600"><a href="#020747" label="[02:07:47]">&lt;oriansj&gt;</a></span><span class="message">although the demodulation circuit would certainly be a good deal more complex</span></div><div class="line" id="020809"><span class="nick" style="color:#8dd3c7"><a href="#020809" label="[02:08:09]">&lt;muurkha&gt;</a></span><span class="message">not necessarily, no</span></div><div class="line" id="020817"><span class="nick" style="color:#389600"><a href="#020817" label="[02:08:17]">&lt;oriansj&gt;</a></span><span class="message">or it would be a good bit much more complex in software</span></div><div class="line" id="020837"><span class="nick" style="color:#8dd3c7"><a href="#020837" label="[02:08:37]">&lt;muurkha&gt;</a></span><span class="message">maybe somewhat more complex in software, yes</span></div><div class="line" id="020844"><span class="nick" style="color:#8dd3c7"><a href="#020844" label="[02:08:44]">&lt;muurkha&gt;</a></span><span class="message">think about how AM radio works</span></div><div class="line" id="020904"><span class="nick" style="color:#389600"><a href="#020904" label="[02:09:04]">&lt;oriansj&gt;</a></span><span class="message">otherwise turbo loaders would have achieved that</span></div><div class="line" id="020932"><span class="nick" style="color:#8dd3c7"><a href="#020932" label="[02:09:32]">&lt;muurkha&gt;</a></span><span class="message">oh, well, you couldn't increase the decoding baud rate very much on machines of the time</span></div><div class="line" id="020949"><span class="nick" style="color:#8dd3c7"><a href="#020949" label="[02:09:49]">&lt;muurkha&gt;</a></span><span class="message">but you could record many channels in the same signal, and demodulate only one of them at a time, under software control</span></div><div class="line" id="021025"><span class="nick" style="color:#8dd3c7"><a href="#021025" label="[02:10:25]">&lt;muurkha&gt;</a></span><span class="message">in an AM crystal radio, the signal in from the antenna contains all the radio stations at once, but a detector consisting of a capacitor, a variable inductor, and a diode is sufficient to select a single one of those stations and decode it into an audio signal</span></div><div class="line" id="021223"><span class="nick" style="color:#8dd3c7"><a href="#021223" label="[02:12:23]">&lt;muurkha&gt;</a></span><span class="message">for software control it is probably convenient to substitute a PLL for the capacitor and inductor, but that's potentially comparable in complexity to the circuit shown</span></div><div class="line" id="021323"><span class="nick" style="color:#389600"><a href="#021323" label="[02:13:23]">&lt;oriansj&gt;</a></span><span class="message">well I am thinking more in terms of simple to make for a bootstrapping computer with as little software as possible (and thus willing to waste a good bit of potential storage)</span></div><div class="line" id="021431"><span class="nick" style="color:#389600"><a href="#021431" label="[02:14:31]">&lt;oriansj&gt;</a></span><span class="message">as I am thinking even floppy disk drives would need ROM programming before they can be properly bootstrapped.</span></div><div class="line" id="024137"><span class="nick" style="color:#389600"><a href="#024137" label="[02:41:37]">&lt;oriansj&gt;</a></span><span class="message">for example the commadore floppy disk drives used a 6502, 8KB of ROM and KB of RAM</span></div><div class="line" id="024256"><span class="nick" style="color:#8dd3c7"><a href="#024256" label="[02:42:56]">&lt;muurkha&gt;</a></span><span class="message">that was atypical</span></div><div class="line" id="024606"><span class="nick" style="color:#389600"><a href="#024606" label="[02:46:06]">&lt;oriansj&gt;</a></span><span class="message">well kinda but not exactly; as the Apple 2 used the computer's CPU and RAM to tell the floppy disk drive where to position the head, how to spin the disk and handling all of the encoding/decoding of the tracks and sectors</span></div><div class="line" id="025214"><span class="nick" style="color:#8dd3c7"><a href="#025214" label="[02:52:14]">&lt;muurkha&gt;</a></span><span class="message">most floppy disk drives of the 01970s were simpler than that, and the Apple ]['s drive was famously simple</span></div><div class="line" id="025245"><span class="nick" style="color:#8dd3c7"><a href="#025245" label="[02:52:45]">&lt;muurkha&gt;</a></span><span class="message">it did a lot of the encoding/decoding in an EPROM-driven finite-state machine on the drive; that was the great simplification</span></div><div class="line" id="025340"><span class="nick" style="color:#8dd3c7"><a href="#025340" label="[02:53:40]">&lt;muurkha&gt;</a></span><span class="message">but yeah, having the CPU telling the floppy drive where to position the head was how floppy disk drives work even today, and how hard disks worked throughout the MFM/RLL era and well into IDE</span></div><div class="line" id="025400"><span class="nick" style="color:#8dd3c7"><a href="#025400" label="[02:54:00]">&lt;muurkha&gt;</a></span><span class="message">it didn't do the PRML stuff modern hard disks do obviously</span></div><div class="line" id="025452"><span class="nick" style="color:#389600"><a href="#025452" label="[02:54:52]">&lt;oriansj&gt;</a></span><span class="message">or rather clever things like Logical block addressing;</span></div><div class="line" id="025515"><span class="nick" style="color:#8dd3c7"><a href="#025515" label="[02:55:15]">&lt;muurkha&gt;</a></span><span class="message">right, LBA was when the CPU stopped telling drives where to position their heads</span></div><div class="line" id="025545"><span class="nick" style="color:#8dd3c7"><a href="#025545" label="[02:55:45]">&lt;muurkha&gt;</a></span><span class="message">(though servo tracks and servo heads in hard disks predate LBA, and drove an internal feedback loop in the drive the CPU isn't involved in)</span></div><div class="line" id="025740"><span class="nick" style="color:#389600"><a href="#025740" label="[02:57:40]">&lt;oriansj&gt;</a></span><span class="message">plus by having a separate CPU, you can transparently do things like block retry, block remapping and block error correction.</span></div><div class="line" id="030615"><span class="nick" style="color:#389600"><a href="#030615" label="[03:06:15]">&lt;oriansj&gt;</a></span><span class="message">and your interface becomes load(block, memory_address) and store(block, memory_address) and all of the complexity of storage is hidden in the devices themselves.</span></div><div class="line" id="031527"><span class="nick" style="color:#8dd3c7"><a href="#031527" label="[03:15:27]">&lt;muurkha&gt;</a></span><span class="message">you can do that with subroutines on the same CPU too though</span></div><div class="line" id="031541"><span class="nick" style="color:#8dd3c7"><a href="#031541" label="[03:15:41]">&lt;muurkha&gt;</a></span><span class="message">except that there are some niggling issues left over with timing and latency</span></div><div class="line" id="134514"><span class="nick" style="color:#389600"><a href="#134514" label="[13:45:14]">&lt;oriansj&gt;</a></span><span class="message">muurkha: entirely correct.</span></div><div class="line" id="134547"><span class="nick" style="color:#389600"><a href="#134547" label="[13:45:47]">&lt;oriansj&gt;</a></span><span class="message">with a good bit more complexity required for the software.</span></div><div class="line" id="164433"><span class="nick" style="color:#8dd3c7"><a href="#164433" label="[16:44:33]">&lt;muurkha&gt;</a></span><span class="message">I don't know that moving the software all onto one CPU makes it more complex</span></div><div class="line" id="164450"><span class="nick" style="color:#8dd3c7"><a href="#164450" label="[16:44:50]">&lt;muurkha&gt;</a></span><span class="message">occasionally that happens because of timing constraints, but usually the effect is the opposite</span></div><div class="line" id="192643"><span class="nick" style="color:#2e2a4a"><a href="#192643" label="[19:26:43]">&lt;pder&gt;</a></span><span class="message">stikonas: with latest code in live-bootstrap I am getting a checksum error with binutils-2.38_0.tar.bz2.  My checksum is actually the checksum before you changed it starting with aa910ea75.  Is there anything I can provide to help debug?</span></div><div class="line" id="192746"><span class="nick" style="color:#2e2a4a"><a href="#192746" label="[19:27:46]">&lt;pder&gt;</a></span><span class="message">Same error twice in a row running in qemu mode</span></div><div class="line" id="193034"><span class="nick" style="color:#6b8072"><a href="#193034" label="[19:30:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, maybe I messed something up</span></div><div class="line" id="193145"><span class="nick" style="color:#6b8072"><a href="#193145" label="[19:31:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Tomorrow i might update first binutils to 2.30, so maybe we csn compare then?</span></div><div class="line" id="193409"><span class="nick" style="color:#2e2a4a"><a href="#193409" label="[19:34:09]">&lt;pder&gt;</a></span><span class="message">ok, in the meantime, I'll try a few more runs to see if the checksum ever changes</span></div><div class="line" id="201008"><span class="nick" style="color:#2e2a4a"><a href="#201008" label="[20:10:08]">&lt;pder&gt;</a></span><span class="message">ls</span></div><div class="line" id="220452"><span class="nick" style="color:#80b1d3"><a href="#220452" label="[22:04:52]">&lt;lain_&gt;</a></span><span class="message">Hello Guix</span></div><div class="line" id="220809"><span class="nick" style="color:#80b1d3"><a href="#220809" label="[22:08:09]">&lt;lain_&gt;</a></span><span class="message">Had an idea, was wondering if anyone here knew if it's viable: could guix itself be thought of as a compiler of sorts insofar as diverse double compiling is concerned?  The inputs would be everything needed to bootstrap guix, as well as all source code for programs required, and the outputs would be guix itself.  This could be compared against almost any system capable of creating the same environment guix creates I think.</span></div><div class="line" id="220835"><span class="nick" style="color:#80b1d3"><a href="#220835" label="[22:08:35]">&lt;lain_&gt;</a></span><span class="message">same build environment</span></div><div class="line" id="225621"><span class="nick" style="color:#80b1d3"><a href="#225621" label="[22:56:21]">&lt;lain_&gt;</a></span><span class="message">I guess more broadly, my question is whether diverse double compiling can be used to test the environment too instead of just the compiler</span></div><div class="line" id="230750"><span class="nick" style="color:#389600"><a href="#230750" label="[23:07:50]">&lt;oriansj&gt;</a></span><span class="message">lain_: well DDC by definition only applies to compilers but reproducible builds is certainly something which is more in line of what you are describing.</span></div><div class="line" id="230952"><span class="nick" style="color:#80b1d3"><a href="#230952" label="[23:09:52]">&lt;lain_&gt;</a></span><span class="message">oriansj one of the assumptions of DDC is the integrity of the build environment, so if you use the same trusted compiler in 2 different build environments and the results differ, you should be able to conclude that at least one build environment is untrustworthy, no?</span></div><div class="line" id="231202"><span class="nick" style="color:#80b1d3"><a href="#231202" label="[23:12:02]">&lt;lain_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://dwheeler.com/trusting-trust/dissertation/html/wheeler-trusting-trust-ddc.html#4.3.Informal%20assumptions">https://dwheeler.com/trusting-trust/dissertation/html/wheeler-trusting-trust-ddc.html#4.3.Informal%20assumptions</a> </span></div><div class="line" id="234927"><span class="nick" style="color:#389600"><a href="#234927" label="[23:49:27]">&lt;oriansj&gt;</a></span><span class="message">lain_: well yes that is one of the assumptions in the formal proof but it doesn't go backwards. Just because 2 different build environments produce the exact same compiler, doesn't mean both are trustworthy.</span></div><div class="line" id="235036"><span class="nick" style="color:#80b1d3"><a href="#235036" label="[23:50:36]">&lt;lain_&gt;</a></span><span class="message">the compiler exists within the build environment</span></div><div class="line" id="235100"><span class="nick" style="color:#80b1d3"><a href="#235100" label="[23:51:00]">&lt;lain_&gt;</a></span><span class="message">or uses the build environment</span></div><div class="line" id="235201"><span class="nick" style="color:#80b1d3"><a href="#235201" label="[23:52:01]">&lt;lain_&gt;</a></span><span class="message">if the compiler is trusted and one environment is trusted, I believe a different result from a different environment and same compiler would indicate the environment was untrustworthy</span></div><br /></div></body></html>