<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000223"><span class="nick" style="color:#389600"><a href="#000223" label="[00:02:23]">&lt;oriansj&gt;</a></span><span class="message">(,(string-append &quot;mov____%&quot; r1 is what you would be searching for</span></div><div class="line" id="000318"><span class="nick" style="color:#389600"><a href="#000318" label="[00:03:18]">&lt;oriansj&gt;</a></span><span class="message">it is a generated string by mescc</span></div><div class="line" id="000636"><span class="nick" style="color:#389600"><a href="#000636" label="[00:06:36]">&lt;oriansj&gt;</a></span><span class="message">correction (,(string-append &quot;mov____(%&quot; r0  &quot;),%&quot; r2 sort of thing (r0 and r2 might be the wrong names)</span></div><div class="line" id="000729"><span class="nick" style="color:#389600"><a href="#000729" label="[00:07:29]">&lt;oriansj&gt;</a></span><span class="message">in the as.scm file</span></div><div class="line" id="000843"><span class="nick" style="color:#389600"><a href="#000843" label="[00:08:43]">&lt;oriansj&gt;</a></span><span class="message">in short, at runtime the values are resolved to si or rsi</span></div><div class="line" id="000939"><span class="nick" style="color:#389600"><a href="#000939" label="[00:09:39]">&lt;oriansj&gt;</a></span><span class="message">and M1 knows nothing that isn't EXPLICITLY DEFINEd</span></div><div class="line" id="001535"><span class="nick" style="color:#389600"><a href="#001535" label="[00:15:35]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: you are right about memcmp; it is currently returning the number of matched bytes rather than zero</span></div><div class="line" id="020525"><span class="nick" style="color:#389600"><a href="#020525" label="[02:05:25]">&lt;oriansj&gt;</a></span><span class="message">now, just to do some slim tweaks and I think my gentoo install procedure will be complete and functionally identical to all the other distros</span></div><div class="line" id="020629"><span class="nick" style="color:#389600"><a href="#020629" label="[02:06:29]">&lt;oriansj&gt;</a></span><span class="message">(or I can integrate stikonas's work into the procedure and cover bits like mpv)</span></div><div class="line" id="033400"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="034936"><span class="nick" style="color:#389600"><a href="#034936" label="[03:49:36]">&lt;oriansj&gt;</a></span><span class="message">hmmm either there is an off-by-one error in glibc's memcmp or I have an off-by-one error in my modified memcmp</span></div><div class="line" id="035134"><span class="nick" style="color:#389600"><a href="#035134" label="[03:51:34]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1254522/">https://paste.debian.net/1254522/</a> </span></div><div class="line" id="035226"><span class="nick" style="color:#389600"><a href="#035226" label="[03:52:26]">&lt;oriansj&gt;</a></span><span class="message">and I created a little test: <a rel="nofollow" href="https://paste.debian.net/1254523/">https://paste.debian.net/1254523/</a> </span></div><div class="line" id="035357"><span class="nick" style="color:#389600"><a href="#035357" label="[03:53:57]">&lt;oriansj&gt;</a></span><span class="message">so that one can do memcmp with motherhood and motherfucker, which if we are only comparing 6 or less chars should match.</span></div><div class="line" id="035458"><span class="nick" style="color:#389600"><a href="#035458" label="[03:54:58]">&lt;oriansj&gt;</a></span><span class="message">but according to glibc's memcmp it is 7 or less chars should match</span></div><div class="line" id="035507"><span class="nick" style="color:#389600"><a href="#035507" label="[03:55:07]">&lt;oriansj&gt;</a></span><span class="message">and I don't see how</span></div><div class="line" id="055705"><span class="nick" style="color:#2e2a4a"><a href="#055705" label="[05:57:05]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: my testing shows both your implementation and glibc match at 6 and return a value &gt; 0 for length 7</span></div><div class="line" id="060238"><span class="nick" style="color:#2e2a4a"><a href="#060238" label="[06:02:38]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: the difference is, for length 7, yours returns 2 and glibc returns 1, but it appears that any value &gt; 0 is correct for that test case</span></div><div class="line" id="091459"><span class="nick" style="color:#6b8072"><a href="#091459" label="[09:14:59]">&lt;ekaitz&gt;</a></span><span class="message">hi! is there any reference file for the M1 macro syntax?</span></div><div class="line" id="092648"><span class="nick" style="color:#6b8072"><a href="#092648" label="[09:26:48]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: okay so it's just that there are a couple of instructions missing in the .M1 definition</span></div><div class="line" id="093342"><span class="nick" style="color:#6b8072"><a href="#093342" label="[09:33:42]">&lt;ekaitz&gt;</a></span><span class="message">i think I got it</span></div><div class="line" id="104908"><span class="nick" style="color:#80b1d3"><a href="#104908" label="[10:49:08]">&lt;stikonas[m]&gt;</a></span><span class="message">ekaitz: it's just DEFINE word replacement</span></div><div class="line" id="105134"><span class="nick" style="color:#6b8072"><a href="#105134" label="[10:51:34]">&lt;ekaitz&gt;</a></span><span class="message">stikonas[m]: i wanted to know the syntax of the words, but I think I just have it right</span></div><div class="line" id="105231"><span class="nick" style="color:#80b1d3"><a href="#105231" label="[10:52:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Well that's local convention in a file</span></div><div class="line" id="105302"><span class="nick" style="color:#80b1d3"><a href="#105302" label="[10:53:02]">&lt;stikonas[m]&gt;</a></span><span class="message">It differs between stage0-posix, mes and stage0-uefi</span></div><div class="line" id="123659"><span class="nick" style="color:#6d2462"><a href="#123659" label="[12:36:59]">&lt;aggi&gt;</a></span><span class="message">minor notice: with both perl and python bootstrapping and/or cross-compilation those are a major trouble-source</span></div><div class="line" id="123735"><span class="nick" style="color:#6d2462"><a href="#123735" label="[12:37:35]">&lt;aggi&gt;</a></span><span class="message">python doesn't bootstrap/compile with tcc-toolchain, perl required roll-back to v5.8 to pass with tcc-toolchain, this old perl-version didn't support easy cross-compilation etc.</span></div><div class="line" id="123809"><span class="nick" style="color:#6d2462"><a href="#123809" label="[12:38:09]">&lt;aggi&gt;</a></span><span class="message">for another reason, decided to have a look at vis-editor, which optionally supports some neat Lua integration</span></div><div class="line" id="123843"><span class="nick" style="color:#6d2462"><a href="#123843" label="[12:38:43]">&lt;aggi&gt;</a></span><span class="message">and guess what, Lua scripting language: it compiles, cross-compiles, passes with tcc-toolchain, static linking, no problem</span></div><div class="line" id="123935"><span class="nick" style="color:#6d2462"><a href="#123935" label="[12:39:35]">&lt;aggi&gt;</a></span><span class="message">Lua doesn't require GNU-buildsystem (autotools/automake), hence no dependency against Perl with this</span></div><div class="line" id="124046"><span class="nick" style="color:#6d2462"><a href="#124046" label="[12:40:46]">&lt;aggi&gt;</a></span><span class="message">Oasis Linux, utilizes Lua for their package-management, instead of python which gentoo needs</span></div><div class="line" id="124104"><span class="nick" style="color:#234e69"><a href="#124104" label="[12:41:04]">&lt;Hagfish&gt;</a></span><span class="message">Lua seems like quite a clean language/ecosystem, from what little i've seen of it</span></div><div class="line" id="124122"><span class="nick" style="color:#234e69"><a href="#124122" label="[12:41:22]">&lt;Hagfish&gt;</a></span><span class="message">does it really have minimal build dependencies?</span></div><div class="line" id="124214"><span class="nick" style="color:#234e69"><a href="#124214" label="[12:42:14]">&lt;Hagfish&gt;</a></span><span class="message">i wonder what architectural values the people behind it had, and how to encourage other communities to adopt them</span></div><div class="line" id="124214"><span class="nick" style="color:#6d2462"><a href="#124214" label="[12:42:14]">&lt;aggi&gt;</a></span><span class="message">seems so, i tracked this with gentoo-portage however, and plan for moving to and forking Oasis</span></div><div class="line" id="124230"><span class="nick" style="color:#234e69"><a href="#124230" label="[12:42:30]">&lt;Hagfish&gt;</a></span><span class="message">yeah, Oasis is an intriguing choice.  i'd not heard of it before</span></div><div class="line" id="124311"><span class="nick" style="color:#6d2462"><a href="#124311" label="[12:43:11]">&lt;aggi&gt;</a></span><span class="message">another noteworthy detail: different licensing with many of those, MIT instead of GPL</span></div><div class="line" id="124339"><span class="nick" style="color:#6d2462"><a href="#124339" label="[12:43:39]">&lt;aggi&gt;</a></span><span class="message">vis-editor seems neat too, i'll remove vim, and switch to vis</span></div><div class="line" id="124619"><span class="nick" style="color:#6d2462"><a href="#124619" label="[12:46:19]">&lt;aggi&gt;</a></span><span class="message">and i'll refine the tcc-toolchain profile, to avoid all python/perl/bashism/autotools/automake/gcc/binutils entirely</span></div><div class="line" id="124859"><span class="nick" style="color:#234e69"><a href="#124859" label="[12:48:59]">&lt;Hagfish&gt;</a></span><span class="message">that does sound much simpler to reason about</span></div><div class="line" id="132729"><span class="nick" style="color:#389600"><a href="#132729" label="[13:27:29]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: The syntax of the words is whatever the developer prefers to use/generate. As long as you have a matching DEFINE statement, you can use any syntax rules you like. But as you are working with mescc; I strongly suggest matching the existing generation rules in as.scm (until janneke writes out proper syntax guilelines for mescc)</span></div><div class="line" id="132817"><span class="nick" style="color:#6b8072"><a href="#132817" label="[13:28:17]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: ok great! I'm just adding some instructions that already existed so it's just following them</span></div><div class="line" id="132829"><span class="nick" style="color:#6b8072"><a href="#132829" label="[13:28:29]">&lt;ekaitz&gt;</a></span><span class="message">I think I solved that already :)</span></div><div class="line" id="133054"><span class="nick" style="color:#389600"><a href="#133054" label="[13:30:54]">&lt;oriansj&gt;</a></span><span class="message">aggi: sounds like Oasis developers might find the live-bootstrap and stage0-posix work quite interesting as it will allow them to drop their bootstrap dependencies further.</span></div><div class="line" id="133203"><span class="nick" style="color:#6c3d55"><a href="#133203" label="[13:32:03]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap should soon have modern toolchain</span></div><div class="line" id="133215"><span class="nick" style="color:#6c3d55"><a href="#133215" label="[13:32:15]">&lt;stikonas&gt;</a></span><span class="message">once autogen is added, we'll probably update to the latest GCC</span></div><div class="line" id="133355"><span class="nick" style="color:#389600"><a href="#133355" label="[13:33:55]">&lt;oriansj&gt;</a></span><span class="message">stikonas: indeed but that doesn't mean they can't use the TCC bootstrapping bits</span></div><div class="line" id="133610"><span class="nick" style="color:#6c3d55"><a href="#133610" label="[13:36:10]">&lt;stikonas&gt;</a></span><span class="message">sure, they can, I'm just pointing out that basically any distros can use it as bootstrapping base soobn</span></div><div class="line" id="133619"><span class="nick" style="color:#6c3d55"><a href="#133619" label="[13:36:19]">&lt;stikonas&gt;</a></span><span class="message">well, maybe we need to add more languages, e.g. python...</span></div><div class="line" id="133625"><span class="nick" style="color:#6c3d55"><a href="#133625" label="[13:36:25]">&lt;stikonas&gt;</a></span><span class="message">but that shouldn't be hard</span></div><div class="line" id="133656"><span class="nick" style="color:#6c3d55"><a href="#133656" label="[13:36:56]">&lt;stikonas&gt;</a></span><span class="message">of course we still have non-bootstrappable stuff like GHC</span></div><div class="line" id="134007"><span class="nick" style="color:#389600"><a href="#134007" label="[13:40:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: indeed live-bootstrap makes the perfect bootstrapping base for many distros.</span></div><div class="line" id="134116"><span class="nick" style="color:#389600"><a href="#134116" label="[13:41:16]">&lt;oriansj&gt;</a></span><span class="message">and yeah a few more languages and build tools and then bootstrapping distros becomes just a question of which minor steps to add.</span></div><div class="line" id="134432"><span class="nick" style="color:#6d2462"><a href="#134432" label="[13:44:32]">&lt;aggi&gt;</a></span><span class="message">to avoid a misunderstanding, i do not intend to lock-out bootstrapping/cross/compilation of GNU-buildsystem/toolchain</span></div><div class="line" id="134501"><span class="nick" style="color:#6d2462"><a href="#134501" label="[13:45:01]">&lt;aggi&gt;</a></span><span class="message">hence the trouble, for example, with perl-5.8 and tcc; tested various variants of bootstrapping/cross-compilation with tcc/gcc</span></div><div class="line" id="134541"><span class="nick" style="color:#6d2462"><a href="#134541" label="[13:45:41]">&lt;aggi&gt;</a></span><span class="message">i am not concerned about GPL either, it's is only technical reasons, i think the outlined approach has advantages</span></div><div class="line" id="134738"><span class="nick" style="color:#6d2462"><a href="#134738" label="[13:47:38]">&lt;aggi&gt;</a></span><span class="message">i'll keep the gcc47/c-only toolchain profile frozen/archived, as i explained</span></div><div class="line" id="134801"><span class="nick" style="color:#6d2462"><a href="#134801" label="[13:48:01]">&lt;aggi&gt;</a></span><span class="message">and with tcc-toolchain, gradually refine the profile with stricter criteria applied</span></div><div class="line" id="134826"><span class="nick" style="color:#389600"><a href="#134826" label="[13:48:26]">&lt;oriansj&gt;</a></span><span class="message">aggi: you have a technical preference, that is pretty standard around here. I've been understanding your messages as your discovery of the current limits of tcc only environments and possible improvements.</span></div><div class="line" id="134904"><span class="nick" style="color:#6d2462"><a href="#134904" label="[13:49:04]">&lt;aggi&gt;</a></span><span class="message">to see, what remains, if python/perl/bashism/autotools/automake/gcc/binutils are removed entirely</span></div><div class="line" id="134952"><span class="nick" style="color:#6d2462"><a href="#134952" label="[13:49:52]">&lt;aggi&gt;</a></span><span class="message">tcc isn't the main limitation though, the major trouble sources orignate elsewhere, which i think are GNU-buildsystem/toolchain and their dependencies themselves</span></div><div class="line" id="135058"><span class="nick" style="color:#6d2462"><a href="#135058" label="[13:50:58]">&lt;aggi&gt;</a></span><span class="message">initially i nailed down this: no-c++, then tcc-toolchain only, and finally no autotools/automake etc.; for technical reasons</span></div><div class="line" id="135107"><span class="nick" style="color:#389600"><a href="#135107" label="[13:51:07]">&lt;oriansj&gt;</a></span><span class="message">well, there are only 3 major points for limiting of a build: The compiler, the library and the build tool.</span></div><div class="line" id="135140"><span class="nick" style="color:#389600"><a href="#135140" label="[13:51:40]">&lt;oriansj&gt;</a></span><span class="message">and autotools and the like could be replaced for many pieces (as we know the state of the system at all times)</span></div><div class="line" id="135230"><span class="nick" style="color:#6d2462"><a href="#135230" label="[13:52:30]">&lt;aggi&gt;</a></span><span class="message">components, such as vis-editor, dvtm terminal multiplexer, bearssl, may suckless.org goodies do not rely on autotools or any replacement</span></div><div class="line" id="135257"><span class="nick" style="color:#389600"><a href="#135257" label="[13:52:57]">&lt;oriansj&gt;</a></span><span class="message">aggi: even a shell command would be a replacement</span></div><div class="line" id="135815"><span class="nick" style="color:#6c3d55"><a href="#135815" label="[13:58:15]">&lt;stikonas&gt;</a></span><span class="message">well, autotools is replaced with handwritten makefiles early in live-bootstrap but it's not particularly pleasant thing to to either (especially for bigger software like perl)</span></div><div class="line" id="135856"><span class="nick" style="color:#6c3d55"><a href="#135856" label="[13:58:56]">&lt;stikonas&gt;</a></span><span class="message">because you have to manually specify all compiler defines that autotools does that for you</span></div><div class="line" id="135910"><span class="nick" style="color:#6d2462"><a href="#135910" label="[13:59:10]">&lt;aggi&gt;</a></span><span class="message">lua, ships an optional configure.in, seems the developers, intentionally, did this</span></div><div class="line" id="135946"><span class="nick" style="color:#6d2462"><a href="#135946" label="[13:59:46]">&lt;aggi&gt;</a></span><span class="message">of cause, the test-cases of mine are limited, nonetheless those do cover various cross/compilation paths with tcc and gcc</span></div><div class="line" id="140025"><span class="nick" style="color:#6d2462"><a href="#140025" label="[14:00:25]">&lt;aggi&gt;</a></span><span class="message">and without autotconf, lua cross/compiled with with tcc and/or gcc</span></div><div class="line" id="140055"><span class="nick" style="color:#6d2462"><a href="#140055" label="[14:00:55]">&lt;aggi&gt;</a></span><span class="message">had to rewrite the gentoo ebuild, as usual, with the many of 300 ebuilds in my overlay, to address such types of problems</span></div><div class="line" id="140122"><span class="nick" style="color:#6d2462"><a href="#140122" label="[14:01:22]">&lt;aggi&gt;</a></span><span class="message">which i am tired of and not willing anymore to bother with, hence removal of autotools and see what remains</span></div><div class="line" id="140258"><span class="nick" style="color:#389600"><a href="#140258" label="[14:02:58]">&lt;oriansj&gt;</a></span><span class="message">aggi: well you might find achaninja's work interesting: <a rel="nofollow" href="https://github.com/andrewchambers/trusting-trust">https://github.com/andrewchambers/trusting-trust</a> </span></div><div class="line" id="140520"><span class="nick" style="color:#d9d9d9"><a href="#140520" label="[14:05:20]">&lt;achaninja&gt;</a></span><span class="message">yeah, the instructions in the readme should work - though my memory is hazy - I was trying to get from stage0 -&gt; tcc -&gt; qbe + cproc -&gt; musl toolchain</span></div><div class="line" id="140546"><span class="nick" style="color:#d9d9d9"><a href="#140546" label="[14:05:46]">&lt;achaninja&gt;</a></span><span class="message">I got a mostly working qbe that was linked with meslibc</span></div><div class="line" id="140641"><span class="nick" style="color:#6d2462"><a href="#140641" label="[14:06:41]">&lt;aggi&gt;</a></span><span class="message">i didn't yet arrive at the stage0 -&gt; tcc phase for review</span></div><div class="line" id="140708"><span class="nick" style="color:#6d2462"><a href="#140708" label="[14:07:08]">&lt;aggi&gt;</a></span><span class="message">i am concerned with tcc -&gt; see what remains without GNU-buildsystem/toolchain</span></div><div class="line" id="140755"><span class="nick" style="color:#6d2462"><a href="#140755" label="[14:07:55]">&lt;aggi&gt;</a></span><span class="message">and yes, currently there is a circular dependency remaining, against GNU-binutils for musl-libc assembly</span></div><div class="line" id="140816"><span class="nick" style="color:#d9d9d9"><a href="#140816" label="[14:08:16]">&lt;achaninja&gt;</a></span><span class="message">well I wrote an assembler that can assemble all of qbe + cprocs output</span></div><div class="line" id="140824"><span class="nick" style="color:#d9d9d9"><a href="#140824" label="[14:08:24]">&lt;achaninja&gt;</a></span><span class="message">semi for this purpose too</span></div><div class="line" id="140901"><span class="nick" style="color:#d9d9d9"><a href="#140901" label="[14:09:01]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/andrewchambers/minias">https://github.com/andrewchambers/minias</a>  - but I didn't attempt a linker</span></div><div class="line" id="140925"><span class="nick" style="color:#d9d9d9"><a href="#140925" label="[14:09:25]">&lt;achaninja&gt;</a></span><span class="message">Anyway - I was trying to experiment with ways to avoid tcc</span></div><div class="line" id="140944"><span class="nick" style="color:#6d2462"><a href="#140944" label="[14:09:44]">&lt;aggi&gt;</a></span><span class="message">another concern with this, is an exclusive vendor-lock against x86/64</span></div><div class="line" id="140950"><span class="nick" style="color:#6d2462"><a href="#140950" label="[14:09:50]">&lt;aggi&gt;</a></span><span class="message">hence i am testing with arm-tcc</span></div><div class="line" id="141029"><span class="nick" style="color:#234e69"><a href="#141029" label="[14:10:29]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's really valuable work</span></div><div class="line" id="141216"><span class="nick" style="color:#6d2462"><a href="#141216" label="[14:12:16]">&lt;aggi&gt;</a></span><span class="message">decided to include lua/vis-editor with the gcc47/c-only profile, which is frozen/archived</span></div><div class="line" id="141238"><span class="nick" style="color:#6d2462"><a href="#141238" label="[14:12:38]">&lt;aggi&gt;</a></span><span class="message">the tcc-toolchain verification of cross/compilation, too will be useful to any other alternative compiler, such as cproc</span></div><div class="line" id="141256"><span class="nick" style="color:#6d2462"><a href="#141256" label="[14:12:56]">&lt;aggi&gt;</a></span><span class="message">however, i decided to refine the tcc-toolchain profile from scratch, without any GNU-buildsystem/toolchain dependency</span></div><div class="line" id="141332"><span class="nick" style="color:#6d2462"><a href="#141332" label="[14:13:32]">&lt;aggi&gt;</a></span><span class="message">need to finish testing, vis-editor/lua; then tcc-toolchain from scratch, as outlined</span></div><div class="line" id="144056"><span class="nick" style="color:#6d2462"><a href="#144056" label="[14:40:56]">&lt;aggi&gt;</a></span><span class="message">anyway, sorry for the noise; achaninja i noted your git-repo for review, re-integration of musl-libc and/or mes-libc without any GNU-binutils dependency is on TODO still</span></div><div class="line" id="144216"><span class="nick" style="color:#6d2462"><a href="#144216" label="[14:42:16]">&lt;aggi&gt;</a></span><span class="message">the musl-libc patches available, are exclusive to musl-libc, i try to avoid such an exclusive vendor-lock</span></div><div class="line" id="144246"><span class="nick" style="color:#6d2462"><a href="#144246" label="[14:42:46]">&lt;aggi&gt;</a></span><span class="message">lua interpreter, is another test-case, to see if mes-libc sufficed with it, and if this passes with arm-tcc toolchain</span></div><div class="line" id="144323"><span class="nick" style="color:#6d2462"><a href="#144323" label="[14:43:23]">&lt;aggi&gt;</a></span><span class="message">*exclusive to x86/64</span></div><div class="line" id="144342"><span class="nick" style="color:#6d2462"><a href="#144342" label="[14:43:42]">&lt;aggi&gt;</a></span><span class="message">ttyl</span></div><div class="line" id="145021"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><br /></div></body></html>