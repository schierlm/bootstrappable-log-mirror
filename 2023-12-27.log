<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000109"><span class="nick" style="color:#389600"><a href="#000109" label="[00:01:09]">&lt;fossy&gt;</a></span><span class="message">:)</span></div><div class="line" id="001852"><span class="nick" style="color:#8dd3c7"><a href="#001852" label="[00:18:52]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I believe kmain is the more common standard for kernal main functions</span></div><div class="line" id="001923"><span class="nick" style="color:#2e2a4a"><a href="#001923" label="[00:19:23]">&lt;stikonas&gt;</a></span><span class="message">oriansj: that might be true, but M2libc's standard entry point is main</span></div><div class="line" id="001925"><span class="nick" style="color:#2e2a4a"><a href="#001925" label="[00:19:25]">&lt;stikonas&gt;</a></span><span class="message">even on UEFI...</span></div><div class="line" id="001939"><span class="nick" style="color:#2e2a4a"><a href="#001939" label="[00:19:39]">&lt;stikonas&gt;</a></span><span class="message">I could have main call kmain...</span></div><div class="line" id="002000"><span class="nick" style="color:#2e2a4a"><a href="#002000" label="[00:20:00]">&lt;stikonas&gt;</a></span><span class="message">anyway, things can definitely be improved...</span></div><div class="line" id="002013"><span class="nick" style="color:#2e2a4a"><a href="#002013" label="[00:20:13]">&lt;stikonas&gt;</a></span><span class="message">it's just the smallest possible prototype...</span></div><div class="line" id="002016"><span class="nick" style="color:#8dd3c7"><a href="#002016" label="[00:20:16]">&lt;oriansj&gt;</a></span><span class="message">true but I was just thinking how we can ensure your M2-Planet work is also buildable by gcc to enable easier sanity checking.</span></div><div class="line" id="002020"><span class="nick" style="color:#2e2a4a"><a href="#002020" label="[00:20:20]">&lt;stikonas&gt;</a></span><span class="message">to prove that things can work</span></div><div class="line" id="002036"><span class="nick" style="color:#2e2a4a"><a href="#002036" label="[00:20:36]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="002052"><span class="nick" style="color:#2e2a4a"><a href="#002052" label="[00:20:52]">&lt;stikonas&gt;</a></span><span class="message">then I won't be able to use M1 assembly</span></div><div class="line" id="002102"><span class="nick" style="color:#2e2a4a"><a href="#002102" label="[00:21:02]">&lt;stikonas&gt;</a></span><span class="message">also it won't run in POSIX anyway...</span></div><div class="line" id="002115"><span class="nick" style="color:#2e2a4a"><a href="#002115" label="[00:21:15]">&lt;stikonas&gt;</a></span><span class="message">but yes, building it might be useful..</span></div><div class="line" id="002128"><span class="nick" style="color:#2e2a4a"><a href="#002128" label="[00:21:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: if you have some time, PRs are welcome :)</span></div><div class="line" id="002144"><span class="nick" style="color:#2e2a4a"><a href="#002144" label="[00:21:44]">&lt;stikonas&gt;</a></span><span class="message">I also need to think how to create syscall table..</span></div><div class="line" id="002152"><span class="nick" style="color:#2e2a4a"><a href="#002152" label="[00:21:52]">&lt;stikonas&gt;</a></span><span class="message">I don't think M2-Planet supports {} initializer</span></div><div class="line" id="002202"><span class="nick" style="color:#8dd3c7"><a href="#002202" label="[00:22:02]">&lt;oriansj&gt;</a></span><span class="message">not yet</span></div><div class="line" id="002206"><span class="nick" style="color:#2e2a4a"><a href="#002206" label="[00:22:06]">&lt;stikonas&gt;</a></span><span class="message">so probably just manually need to initialize it with pointers to functions</span></div><div class="line" id="002240"><span class="nick" style="color:#2e2a4a"><a href="#002240" label="[00:22:40]">&lt;stikonas&gt;</a></span><span class="message">argh...</span></div><div class="line" id="002248"><span class="nick" style="color:#2e2a4a"><a href="#002248" label="[00:22:48]">&lt;stikonas&gt;</a></span><span class="message">now got M1 errror... string exceeds max size</span></div><div class="line" id="002257"><span class="nick" style="color:#2e2a4a"><a href="#002257" label="[00:22:57]">&lt;stikonas&gt;</a></span><span class="message">(for zeroes in void *syscall_table[256]; )</span></div><div class="line" id="002325"><span class="nick" style="color:#2e2a4a"><a href="#002325" label="[00:23:25]">&lt;stikonas&gt;</a></span><span class="message">well, maybe I should dynamically allocate it</span></div><div class="line" id="002426"><span class="nick" style="color:#8dd3c7"><a href="#002426" label="[00:24:26]">&lt;oriansj&gt;</a></span><span class="message">as a struct potentially</span></div><div class="line" id="002434"><span class="nick" style="color:#8dd3c7"><a href="#002434" label="[00:24:34]">&lt;oriansj&gt;</a></span><span class="message">or as a table</span></div><div class="line" id="002439"><span class="nick" style="color:#2e2a4a"><a href="#002439" label="[00:24:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: the whole thing might look somewhat strange in the end... We already have a fairly good POSIX compatibility layer in M2libc, so basically the only thing kernel has to do is to pass through the same thing to m2libc...</span></div><div class="line" id="002452"><span class="nick" style="color:#2e2a4a"><a href="#002452" label="[00:24:52]">&lt;stikonas&gt;</a></span><span class="message">which I guess makes life easier for us</span></div><div class="line" id="003208"><span class="nick" style="color:#8dd3c7"><a href="#003208" label="[00:32:08]">&lt;oriansj&gt;</a></span><span class="message">well an init function with a malloc in kmain and a kmain call in a main function in the M2-Planet #ifdef block would set things up in a standard way. (gcc's init function could be smarter)</span></div><div class="line" id="003707"><span class="nick" style="color:#8dd3c7"><a href="#003707" label="[00:37:07]">&lt;oriansj&gt;</a></span><span class="message">ooh, idea. we *CAN* justify kernel functions in M2libc</span></div><div class="line" id="003847"><span class="nick" style="color:#2e2a4a"><a href="#003847" label="[00:38:47]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, so far I'm trying the following, not sure if this will work: <a rel="nofollow" href="https://paste.debian.net/1302247/">https://paste.debian.net/1302247/</a> </span></div><div class="line" id="003914"><span class="nick" style="color:#8dd3c7"><a href="#003914" label="[00:39:14]">&lt;oriansj&gt;</a></span><span class="message">yes</span></div><div class="line" id="003918"><span class="nick" style="color:#8dd3c7"><a href="#003918" label="[00:39:18]">&lt;oriansj&gt;</a></span><span class="message">it will work</span></div><div class="line" id="003920"><span class="nick" style="color:#2e2a4a"><a href="#003920" label="[00:39:20]">&lt;stikonas&gt;</a></span><span class="message">i.e. basically just call exit function which is already definined in M2libc/UEFI</span></div><div class="line" id="003933"><span class="nick" style="color:#2e2a4a"><a href="#003933" label="[00:39:33]">&lt;stikonas&gt;</a></span><span class="message">I'll have to think whether variable number of arguments works with this</span></div><div class="line" id="003942"><span class="nick" style="color:#2e2a4a"><a href="#003942" label="[00:39:42]">&lt;stikonas&gt;</a></span><span class="message">i.e. exit has 1 argument, but other syscalls can have more than one</span></div><div class="line" id="004009"><span class="nick" style="color:#2e2a4a"><a href="#004009" label="[00:40:09]">&lt;stikonas&gt;</a></span><span class="message">hnnm that might cause a problem...</span></div><div class="line" id="004015"><span class="nick" style="color:#2e2a4a"><a href="#004015" label="[00:40:15]">&lt;stikonas&gt;</a></span><span class="message">maybe we'll need a thin wrapper...</span></div><div class="line" id="004838"><span class="nick" style="color:#8dd3c7"><a href="#004838" label="[00:48:38]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1302248/">https://paste.debian.net/1302248/</a> </span></div><div class="line" id="005216"><span class="nick" style="color:#2e2a4a"><a href="#005216" label="[00:52:16]">&lt;stikonas&gt;</a></span><span class="message">this should go to where?</span></div><div class="line" id="005251"><span class="nick" style="color:#2e2a4a"><a href="#005251" label="[00:52:51]">&lt;stikonas&gt;</a></span><span class="message">kernel?</span></div><div class="line" id="005321"><span class="nick" style="color:#2e2a4a"><a href="#005321" label="[00:53:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, for some reason directly calling exit from that table didn't work...</span></div><div class="line" id="005325"><span class="nick" style="color:#2e2a4a"><a href="#005325" label="[00:53:25]">&lt;stikonas&gt;</a></span><span class="message">not sure why...</span></div><div class="line" id="005343"><span class="nick" style="color:#2e2a4a"><a href="#005343" label="[00:53:43]">&lt;stikonas&gt;</a></span><span class="message">but I was getting function &quot;exit&quot; address as an exit value rather than actual exit value</span></div><div class="line" id="005349"><span class="nick" style="color:#2e2a4a"><a href="#005349" label="[00:53:49]">&lt;stikonas&gt;</a></span><span class="message">thin wrapper seems to have fixed that</span></div><div class="line" id="005759"><span class="nick" style="color:#2e2a4a"><a href="#005759" label="[00:57:59]">&lt;stikonas&gt;</a></span><span class="message">well, pushed my change...</span></div><div class="line" id="005931"><span class="nick" style="color:#2e2a4a"><a href="#005931" label="[00:59:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so it looks like this for now <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/syscalls.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/syscalls.c</a> </span></div><div class="line" id="010250"><span class="nick" style="color:#2e2a4a"><a href="#010250" label="[01:02:50]">&lt;stikonas&gt;</a></span><span class="message">hex0 would quite a bit more though</span></div><div class="line" id="010401"><span class="nick" style="color:#2e2a4a"><a href="#010401" label="[01:04:01]">&lt;stikonas&gt;</a></span><span class="message">need 3 more syscalls including jumping back to elf file, set up stack for command line arguments... (no idea about this one yet)</span></div><div class="line" id="010606"><span class="nick" style="color:#8dd3c7"><a href="#010606" label="[01:06:06]">&lt;oriansj&gt;</a></span><span class="message">oh, you can steal that logic from kaem</span></div><div class="line" id="010726"><span class="nick" style="color:#2e2a4a"><a href="#010726" label="[01:07:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, but being &quot;kernel&quot; we might need to do some cleanups that POSIX apps assume</span></div><div class="line" id="010738"><span class="nick" style="color:#2e2a4a"><a href="#010738" label="[01:07:38]">&lt;stikonas&gt;</a></span><span class="message">i.e. restore stack after application exits</span></div><div class="line" id="010747"><span class="nick" style="color:#2e2a4a"><a href="#010747" label="[01:07:47]">&lt;stikonas&gt;</a></span><span class="message">(close file handles, etc...)</span></div><div class="line" id="010800"><span class="nick" style="color:#2e2a4a"><a href="#010800" label="[01:08:00]">&lt;stikonas&gt;</a></span><span class="message">but hopefully wouldn' be super hard given that this is written in M2/C</span></div><div class="line" id="010801"><span class="nick" style="color:#8dd3c7"><a href="#010801" label="[01:08:01]">&lt;oriansj&gt;</a></span><span class="message">as the kernel shouldn't do much beyond creating isolated virtual memory spaces and copying data between them and the disk</span></div><div class="line" id="010817"><span class="nick" style="color:#2e2a4a"><a href="#010817" label="[01:08:17]">&lt;stikonas&gt;</a></span><span class="message">right now I'm not even isolating anything</span></div><div class="line" id="010831"><span class="nick" style="color:#2e2a4a"><a href="#010831" label="[01:08:31]">&lt;stikonas&gt;</a></span><span class="message">there is an assumption that application behaves...</span></div><div class="line" id="010846"><span class="nick" style="color:#2e2a4a"><a href="#010846" label="[01:08:46]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think it's all doable...]</span></div><div class="line" id="010932"><span class="nick" style="color:#8dd3c7"><a href="#010932" label="[01:09:32]">&lt;oriansj&gt;</a></span><span class="message">well builder-hex0 shows doing a bootstrap kernel is extremely doable.</span></div><div class="line" id="011027"><span class="nick" style="color:#8dd3c7"><a href="#011027" label="[01:10:27]">&lt;oriansj&gt;</a></span><span class="message">it is just a question of allocating time and not getting too clever</span></div><div class="line" id="011154"><span class="nick" style="color:#6b8072"><a href="#011154" label="[01:11:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, and this should be easier given the much higher level language...</span></div><div class="line" id="011226"><span class="nick" style="color:#8dd3c7"><a href="#011226" label="[01:12:26]">&lt;oriansj&gt;</a></span><span class="message">odds are no, as you will likely do much more in a C kernel than builder-hex0 does</span></div><div class="line" id="011247"><span class="nick" style="color:#6b8072"><a href="#011247" label="[01:12:47]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Though eventually I should hit mes -&gt; tcc problem on amd64</span></div><div class="line" id="011317"><span class="nick" style="color:#6b8072"><a href="#011317" label="[01:13:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; oriansj: well, to start with, it will probably be simple, later we can extend...</span></div><div class="line" id="011402"><span class="nick" style="color:#8dd3c7"><a href="#011402" label="[01:14:02]">&lt;oriansj&gt;</a></span><span class="message">but we only need just enough to enable tcc to get fiwix off the ground and after that everything else should harmonize</span></div><div class="line" id="011424"><span class="nick" style="color:#6b8072"><a href="#011424" label="[01:14:24]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, after that we can continue on x86 path</span></div><div class="line" id="011443"><span class="nick" style="color:#6b8072"><a href="#011443" label="[01:14:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Before fiwix x86 is tricky...</span></div><div class="line" id="011516"><span class="nick" style="color:#6b8072"><a href="#011516" label="[01:15:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; E.g. binaries are non relocatable...</span></div><div class="line" id="011543"><span class="nick" style="color:#6b8072"><a href="#011543" label="[01:15:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I'm not even sure if all amd64 binaries are relocatable...</span></div><div class="line" id="011554"><span class="nick" style="color:#6b8072"><a href="#011554" label="[01:15:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Chances are we might need to fix mescc</span></div><div class="line" id="011639"><span class="nick" style="color:#8dd3c7"><a href="#011639" label="[01:16:39]">&lt;oriansj&gt;</a></span><span class="message">well we definitely are going to be working on mescc for a long time with all of the porting and enhancments that janneke has planned</span></div><div class="line" id="011738"><span class="nick" style="color:#8dd3c7"><a href="#011738" label="[01:17:38]">&lt;oriansj&gt;</a></span><span class="message">but if we go posix kernel step in UEFI, odds are you'll do a good enough job that we will not need to do anything special in mescc to support UEFI</span></div><div class="line" id="011906"><span class="nick" style="color:#8dd3c7"><a href="#011906" label="[01:19:06]">&lt;oriansj&gt;</a></span><span class="message">and then it'll probably a very good common base for all architectures that support UEFI</span></div><div class="line" id="012032"><span class="nick" style="color:#8dd3c7"><a href="#012032" label="[01:20:32]">&lt;oriansj&gt;</a></span><span class="message">and if rickmasters is onboard, we could probably slim down builder-hex0 as a good few things were added to support mescc</span></div><div class="line" id="012056"><span class="nick" style="color:#2e2a4a"><a href="#012056" label="[01:20:56]">&lt;stikonas&gt;</a></span><span class="message">well, those might still be needed for BIOS bootstrap...</span></div><div class="line" id="012058"><span class="nick" style="color:#2e2a4a"><a href="#012058" label="[01:20:58]">&lt;stikonas&gt;</a></span><span class="message">but we'll see</span></div><div class="line" id="012130"><span class="nick" style="color:#8dd3c7"><a href="#012130" label="[01:21:30]">&lt;oriansj&gt;</a></span><span class="message">#ifdefs easy could be used to enable BIOS/UEFI functionalty in kernel functions</span></div><div class="line" id="012215"><span class="nick" style="color:#8dd3c7"><a href="#012215" label="[01:22:15]">&lt;oriansj&gt;</a></span><span class="message">and the complexity would be absorbing platform differences to speed up porting to new architectures.</span></div><div class="line" id="030443"><span class="nick" style="color:#80b1d3"><a href="#030443" label="[03:04:43]">&lt;Googulator&gt;</a></span><span class="message">fossy: &quot;autoconf-2.69 -f&quot; seems to solve the issue (doing a few more runs to ascertain) - but suprisingly it changes the hash of the final automake binary tarball</span></div><div class="line" id="030457"><span class="nick" style="color:#80b1d3"><a href="#030457" label="[03:04:57]">&lt;Googulator&gt;</a></span><span class="message">which makes me wonder about all other packages using autoconf...</span></div><div class="line" id="030600"><span class="nick" style="color:#80b1d3"><a href="#030600" label="[03:06:00]">&lt;Googulator&gt;</a></span><span class="message">pregenerated build system elements that &quot;autoconf will surely overwrite&quot; actually leaking through and being used for final builds because autoconf decides, based on timestamps, to just leave them in place</span></div><div class="line" id="093712"><span class="nick" style="color:#389600"><a href="#093712" label="[09:37:12]">&lt;fossy&gt;</a></span><span class="message">Googulator: mosttt pacakges using autoconf already use -f</span></div><div class="line" id="093718"><span class="nick" style="color:#389600"><a href="#093718" label="[09:37:18]">&lt;fossy&gt;</a></span><span class="message">it's just that we use ./bootstrap for this one</span></div><div class="line" id="185726"><span class="nick" style="color:#80b1d3"><a href="#185726" label="[18:57:26]">&lt;Googulator&gt;</a></span><span class="message">testing a way to make CI tarballs smaller: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/actions/runs/7340660372/job/19987028779?pr=374">https://github.com/fosslinux/live-bootstrap/actions/runs/7340660372/job/19987028779?pr=374</a> </span></div><div class="line" id="185809"><span class="nick" style="color:#80b1d3"><a href="#185809" label="[18:58:09]">&lt;Googulator&gt;</a></span><span class="message">it's a draft only, because as soon as I committed, I realized there's possibly an even better way - basically resurrecting the original approach of only using a full tarball for the 1st stage, but taken up to 11</span></div><div class="line" id="190013"><span class="nick" style="color:#80b1d3"><a href="#190013" label="[19:00:13]">&lt;Googulator&gt;</a></span><span class="message">what I plan to do there is add a &quot;jump: break&quot; after the first bash is built (as this is the earliest point where we can cleanly bail out), create a seed tarball, and then subsequently only archive &amp; restore repo tarballs on top of that</span></div><div class="line" id="193107"><span class="nick" style="color:#80b1d3"><a href="#193107" label="[19:31:07]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/actions/runs/7340885935/job/19987641526?pr=375">https://github.com/fosslinux/live-bootstrap/actions/runs/7340885935/job/19987641526?pr=375</a>  is that 2nd idea</span></div><div class="line" id="212126"><span class="nick" style="color:#80b1d3"><a href="#212126" label="[21:21:26]">&lt;Googulator&gt;</a></span><span class="message">somehow option 2 is breaking the checksum for libtool-2.4.7, investigating now</span></div><div class="line" id="220142"><span class="nick" style="color:#80b1d3"><a href="#220142" label="[22:01:42]">&lt;Googulator&gt;</a></span><span class="message">got the libtool hash failure reproduced, and it's really weird</span></div><div class="line" id="220233"><span class="nick" style="color:#80b1d3"><a href="#220233" label="[22:02:33]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gist.github.com/Googulator/c35dd6bf130eff0f03da22b8f874b0b1">https://gist.github.com/Googulator/c35dd6bf130eff0f03da22b8f874b0b1</a> </span></div><div class="line" id="220310"><span class="nick" style="color:#80b1d3"><a href="#220310" label="[22:03:10]">&lt;Googulator&gt;</a></span><span class="message">original had &quot;autoconf (GNU Autoconf) 2.53&quot; listed as the autoconf tool used for the build, new one has nothing - but why?!</span></div><div class="line" id="220321"><span class="nick" style="color:#80b1d3"><a href="#220321" label="[22:03:21]">&lt;Googulator&gt;</a></span><span class="message">shouldn't both be 2.71 at this point?</span></div><div class="line" id="220405"><span class="nick" style="color:#80b1d3"><a href="#220405" label="[22:04:05]">&lt;Googulator&gt;</a></span><span class="message">or rather 2.69, as 2.71 is built later</span></div><div class="line" id="220622"><span class="nick" style="color:#2e2a4a"><a href="#220622" label="[22:06:22]">&lt;stikonas&gt;</a></span><span class="message">Googulator: which libtool?</span></div><div class="line" id="220629"><span class="nick" style="color:#80b1d3"><a href="#220629" label="[22:06:29]">&lt;Googulator&gt;</a></span><span class="message">2.47</span></div><div class="line" id="220630"><span class="nick" style="color:#80b1d3"><a href="#220630" label="[22:06:30]">&lt;Googulator&gt;</a></span><span class="message">the new one</span></div><div class="line" id="220632"><span class="nick" style="color:#2e2a4a"><a href="#220632" label="[22:06:32]">&lt;stikonas&gt;</a></span><span class="message">and do we have a ticket for this?</span></div><div class="line" id="220642"><span class="nick" style="color:#2e2a4a"><a href="#220642" label="[22:06:42]">&lt;stikonas&gt;</a></span><span class="message">or is this something new?</span></div><div class="line" id="220652"><span class="nick" style="color:#80b1d3"><a href="#220652" label="[22:06:52]">&lt;Googulator&gt;</a></span><span class="message">it's new with my &quot;option 2&quot; PR</span></div><div class="line" id="220712"><span class="nick" style="color:#80b1d3"><a href="#220712" label="[22:07:12]">&lt;Googulator&gt;</a></span><span class="message">it doesn't appear to be a regression, but rather something exposed by my changes</span></div><div class="line" id="220722"><span class="nick" style="color:#80b1d3"><a href="#220722" label="[22:07:22]">&lt;Googulator&gt;</a></span><span class="message">probably another package that needs &quot;autoconf -f&quot;</span></div><div class="line" id="220755"><span class="nick" style="color:#2e2a4a"><a href="#220755" label="[22:07:55]">&lt;stikonas&gt;</a></span><span class="message">posssibly...</span></div><div class="line" id="220805"><span class="nick" style="color:#2e2a4a"><a href="#220805" label="[22:08:05]">&lt;stikonas&gt;</a></span><span class="message">well, autoreconf -fi usually does the correct thing...</span></div><div class="line" id="220814"><span class="nick" style="color:#2e2a4a"><a href="#220814" label="[22:08:14]">&lt;stikonas&gt;</a></span><span class="message">(with some env variables...)</span></div><div class="line" id="221329"><span class="nick" style="color:#2e2a4a"><a href="#221329" label="[22:13:29]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you review <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/49">https://github.com/oriansj/M2libc/pull/49</a>  ?</span></div><div class="line" id="221401"><span class="nick" style="color:#80b1d3"><a href="#221401" label="[22:14:01]">&lt;Googulator&gt;</a></span><span class="message">&quot;autoconf -f&quot; made no difference</span></div><div class="line" id="221752"><span class="nick" style="color:#2e2a4a"><a href="#221752" label="[22:17:52]">&lt;stikonas&gt;</a></span><span class="message">oriansj: actually nevermind, that PR causes some problem on UEFI... Need to understand that first...</span></div><div class="line" id="223633"><span class="nick" style="color:#80b1d3"><a href="#223633" label="[22:36:33]">&lt;Googulator&gt;</a></span><span class="message">OK, figured it out: &quot;make&quot; also needs &quot;AUTOCONF=autoconf-2.69&quot;</span></div><div class="line" id="223729"><span class="nick" style="color:#80b1d3"><a href="#223729" label="[22:37:29]">&lt;Googulator&gt;</a></span><span class="message">otherwise it will call &quot;autoconf --version&quot; to generate the help page, which autoconf-2.53 apparently installs into /usr/bin regardless of $PREFIX</span></div><div class="line" id="224009"><span class="nick" style="color:#2e2a4a"><a href="#224009" label="[22:40:09]">&lt;stikonas&gt;</a></span><span class="message">nice find...</span></div><div class="line" id="224023"><span class="nick" style="color:#2e2a4a"><a href="#224023" label="[22:40:23]">&lt;stikonas&gt;</a></span><span class="message">this does happen from time to time...</span></div><div class="line" id="224032"><span class="nick" style="color:#2e2a4a"><a href="#224032" label="[22:40:32]">&lt;stikonas&gt;</a></span><span class="message">you can see it in some build scripts</span></div><div class="line" id="225946"><span class="nick" style="color:#389600"><a href="#225946" label="[22:59:46]">&lt;fossy&gt;</a></span><span class="message">Googulator: hm, what is the underlying purpose of 374 and 375? making transfers between runs faster?</span></div><div class="line" id="225952"><span class="nick" style="color:#389600"><a href="#225952" label="[22:59:52]">&lt;fossy&gt;</a></span><span class="message">between stages of CI*</span></div><div class="line" id="230013"><span class="nick" style="color:#80b1d3"><a href="#230013" label="[23:00:13]">&lt;Googulator&gt;</a></span><span class="message">yes, and reducing space usage on GH's servers (which I assume is subject to some limit)</span></div><div class="line" id="230039"><span class="nick" style="color:#80b1d3"><a href="#230039" label="[23:00:39]">&lt;Googulator&gt;</a></span><span class="message">but 375 will have other benefits in the future</span></div><div class="line" id="230053"><span class="nick" style="color:#80b1d3"><a href="#230053" label="[23:00:53]">&lt;Googulator&gt;</a></span><span class="message">if we ever implement multiple or extra manifests</span></div><div class="line" id="230107"><span class="nick" style="color:#8dd3c7"><a href="#230107" label="[23:01:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you always need to fflush prior to fclose in M2libc otherwise writes might fail to occur</span></div><div class="line" id="230119"><span class="nick" style="color:#2e2a4a"><a href="#230119" label="[23:01:19]">&lt;stikonas&gt;</a></span><span class="message">oh I see...</span></div><div class="line" id="230127"><span class="nick" style="color:#2e2a4a"><a href="#230127" label="[23:01:27]">&lt;stikonas&gt;</a></span><span class="message">but doesn't fclose have fflush inside?</span></div><div class="line" id="230138"><span class="nick" style="color:#8dd3c7"><a href="#230138" label="[23:01:38]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="230158"><span class="nick" style="color:#80b1d3"><a href="#230158" label="[23:01:58]">&lt;Googulator&gt;</a></span><span class="message">oriansj: wouldn't that be a bug?</span></div><div class="line" id="230225"><span class="nick" style="color:#2e2a4a"><a href="#230225" label="[23:02:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: fclose seems to have if(O_WRONLY == stream-&gt;bufmode) fflush</span></div><div class="line" id="230242"><span class="nick" style="color:#2e2a4a"><a href="#230242" label="[23:02:42]">&lt;stikonas&gt;</a></span><span class="message">so I'm a bit confused...</span></div><div class="line" id="230308"><span class="nick" style="color:#8dd3c7"><a href="#230308" label="[23:03:08]">&lt;oriansj&gt;</a></span><span class="message">correct; as in a file opened for read and write wouldn't flush on close</span></div><div class="line" id="230311"><span class="nick" style="color:#389600"><a href="#230311" label="[23:03:11]">&lt;fossy&gt;</a></span><span class="message">Googulator: could you elaborate on 375's relation to multiple/extra manifests, not 100% sure how they relate</span></div><div class="line" id="230435"><span class="nick" style="color:#8dd3c7"><a href="#230435" label="[23:04:35]">&lt;oriansj&gt;</a></span><span class="message">hence why __kill_io needs to flush but not close as the kernel would be deleting the file handles on exit</span></div><div class="line" id="230447"><span class="nick" style="color:#2e2a4a"><a href="#230447" label="[23:04:47]">&lt;stikonas&gt;</a></span><span class="message">anyway, UEFI bootstrap hangs at some point (once we reach Mesoplanet) if I autoclose...</span></div><div class="line" id="230449"><span class="nick" style="color:#389600"><a href="#230449" label="[23:04:49]">&lt;fossy&gt;</a></span><span class="message">oriansj, stikonas: surely that should be O_WRONLY || O_RDWR?</span></div><div class="line" id="230508"><span class="nick" style="color:#2e2a4a"><a href="#230508" label="[23:05:08]">&lt;stikonas&gt;</a></span><span class="message">fossy: hmm, yeah...</span></div><div class="line" id="230618"><span class="nick" style="color:#80b1d3"><a href="#230618" label="[23:06:18]">&lt;Googulator&gt;</a></span><span class="message">basically, if we add &quot;side branches&quot; to the bootstrap that can be called after the main path finishes (e.g. &quot;./rootfs.py --bwrap --extra=rust&quot;), it can be helpful to model that for CI as a separate tarball containing the packages for that side branch only</span></div><div class="line" id="230618"><span class="nick" style="color:#8dd3c7"><a href="#230618" label="[23:06:18]">&lt;oriansj&gt;</a></span><span class="message">fossy: in theory  yes but in practice M2libc programs tend to only use files for reading or writing and never both at the same time (as it doesn't work do to the buffering)</span></div><div class="line" id="230632"><span class="nick" style="color:#8dd3c7"><a href="#230632" label="[23:06:32]">&lt;oriansj&gt;</a></span><span class="message">^do^due^</span></div><div class="line" id="230652"><span class="nick" style="color:#389600"><a href="#230652" label="[23:06:52]">&lt;fossy&gt;</a></span><span class="message">Googulator: ah, understood</span></div><div class="line" id="230707"><span class="nick" style="color:#80b1d3"><a href="#230707" label="[23:07:07]">&lt;Googulator&gt;</a></span><span class="message">also, as I've just found out, 375 helps find errors where a package wrongly installs files bypassing $PREFIX</span></div><div class="line" id="230726"><span class="nick" style="color:#80b1d3"><a href="#230726" label="[23:07:26]">&lt;Googulator&gt;</a></span><span class="message">(although a more robust check would be great for that)</span></div><div class="line" id="230743"><span class="nick" style="color:#80b1d3"><a href="#230743" label="[23:07:43]">&lt;Googulator&gt;</a></span><span class="message">autoconf and automake are guilty of that</span></div><div class="line" id="231007"><span class="nick" style="color:#80b1d3"><a href="#231007" label="[23:10:07]">&lt;Googulator&gt;</a></span><span class="message">before 2.71, autoconf drops its unversioned symlinks in /usr/bin instead of fakeroot</span></div><div class="line" id="231106"><span class="nick" style="color:#80b1d3"><a href="#231106" label="[23:11:06]">&lt;Googulator&gt;</a></span><span class="message">so anything built before autoconf-2.71 will see different results when calling &quot;autoconf&quot; depending on whether the earlier autoconfs were preseeded or built in the same process</span></div><div class="line" id="231343"><span class="nick" style="color:#80b1d3"><a href="#231343" label="[23:13:43]">&lt;Googulator&gt;</a></span><span class="message">perl might be guilty as well</span></div><div class="line" id="231415"><span class="nick" style="color:#80b1d3"><a href="#231415" label="[23:14:15]">&lt;Googulator&gt;</a></span><span class="message">see <a rel="nofollow" href="https://gist.github.com/Googulator/806ab9b304c15aa9f92aab7a8a6fc5c7">https://gist.github.com/Googulator/806ab9b304c15aa9f92aab7a8a6fc5c7</a> </span></div><div class="line" id="231444"><span class="nick" style="color:#80b1d3"><a href="#231444" label="[23:14:44]">&lt;Googulator&gt;</a></span><span class="message">or rather, whatever creates bfd.h</span></div><div class="line" id="231639"><span class="nick" style="color:#80b1d3"><a href="#231639" label="[23:16:39]">&lt;Googulator&gt;</a></span><span class="message">binutils?</span></div><div class="line" id="232047"><span class="nick" style="color:#80b1d3"><a href="#232047" label="[23:20:47]">&lt;Googulator&gt;</a></span><span class="message">hmm, both binutils repo tarballs include bfd.h</span></div><div class="line" id="232223"><span class="nick" style="color:#2e2a4a"><a href="#232223" label="[23:22:23]">&lt;stikonas&gt;</a></span><span class="message">well, it's big_f*_deal.h ...</span></div><div class="line" id="232425"><span class="nick" style="color:#80b1d3"><a href="#232425" label="[23:24:25]">&lt;Googulator&gt;</a></span><span class="message">hmm, I'm guessing it's this:</span></div><div class="line" id="232426"><span class="nick" style="color:#80b1d3"><a href="#232426" label="[23:24:26]">&lt;Googulator&gt;</a></span><span class="message">#if !defined PACKAGE &amp;&amp; !defined PACKAGE_VERSION</span></div><div class="line" id="232427"><span class="nick" style="color:#80b1d3"><a href="#232427" label="[23:24:27]">&lt;Googulator&gt;</a></span><span class="message">#error config.h must be included before this header</span></div><div class="line" id="232427"><span class="nick" style="color:#80b1d3"><a href="#232427" label="[23:24:27]">&lt;Googulator&gt;</a></span><span class="message">#endif</span></div><div class="line" id="232440"><span class="nick" style="color:#80b1d3"><a href="#232440" label="[23:24:40]">&lt;Googulator&gt;</a></span><span class="message">which would be binutils/bfd's config.h</span></div><div class="line" id="232656"><span class="nick" style="color:#80b1d3"><a href="#232656" label="[23:26:56]">&lt;Googulator&gt;</a></span><span class="message">and looking at that diff again, bfd.h _becomes_ usable when doing a multiphase bootstrap</span></div><div class="line" id="232702"><span class="nick" style="color:#80b1d3"><a href="#232702" label="[23:27:02]">&lt;Googulator&gt;</a></span><span class="message">it's unusable in single phase</span></div><div class="line" id="233200"><span class="nick" style="color:#2e2a4a"><a href="#233200" label="[23:32:00]">&lt;stikonas&gt;</a></span><span class="message">hmm, posix/hex0 for some reason doesn't inline write_byte...</span></div><div class="line" id="233205"><span class="nick" style="color:#2e2a4a"><a href="#233205" label="[23:32:05]">&lt;stikonas&gt;</a></span><span class="message">that could save some extra bytes and a jump...</span></div><div class="line" id="234633"><span class="nick" style="color:#8dd3c7"><a href="#234633" label="[23:46:33]">&lt;oriansj&gt;</a></span><span class="message">well hex0 was written first; so it normally isn't the most tuned nor optimal</span></div><div class="line" id="234719"><span class="nick" style="color:#8dd3c7"><a href="#234719" label="[23:47:19]">&lt;oriansj&gt;</a></span><span class="message">as one is expected to gain the skills needed as they climb from hex0 to cc_*</span></div><div class="line" id="234836"><span class="nick" style="color:#2e2a4a"><a href="#234836" label="[23:48:36]">&lt;stikonas&gt;</a></span><span class="message">well, we already optimized hex0 quite a bit</span></div><div class="line" id="234840"><span class="nick" style="color:#2e2a4a"><a href="#234840" label="[23:48:40]">&lt;stikonas&gt;</a></span><span class="message">but that was missed...</span></div><div class="line" id="234847"><span class="nick" style="color:#2e2a4a"><a href="#234847" label="[23:48:47]">&lt;stikonas&gt;</a></span><span class="message">hex0 used to be much bigger...</span></div><div class="line" id="234910"><span class="nick" style="color:#2e2a4a"><a href="#234910" label="[23:49:10]">&lt;stikonas&gt;</a></span><span class="message">although you were investigating much smaller octal0 too...</span></div><div class="line" id="235007"><span class="nick" style="color:#2e2a4a"><a href="#235007" label="[23:50:07]">&lt;stikonas&gt;</a></span><span class="message">on the other hex0 news, now posix-runner.efi can run hex0, but for some reason it never ever calls write... just does lots of reads and exists</span></div><div class="line" id="235015"><span class="nick" style="color:#2e2a4a"><a href="#235015" label="[23:50:15]">&lt;stikonas&gt;</a></span><span class="message">I must be clobbering some register...</span></div><br /></div></body></html>