<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-06-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002533"><span class="nick" style="color:#8dd3c7"><a href="#002533" label="[00:25:33]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: glad to see mes ppsyntax is that simple</span></div><div class="line" id="081357"><span class="nick" style="color:#2e2a4a"><a href="#081357" label="[08:13:57]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: yeah, coreutils will be more involved</span></div><div class="line" id="081653"><span class="nick" style="color:#2e2a4a"><a href="#081653" label="[08:16:53]">&lt;stikonas[m]&gt;</a></span><span class="message">mes ppsyntax is completely unused, so it is possible to just rm those files</span></div><div class="line" id="132451"><span class="nick" style="color:#6b8072"><a href="#132451" label="[13:24:51]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: do I need to do a minimal sed for mescc-tools-extra as well?</span></div><div class="line" id="185624"><span class="nick" style="color:#80b1d3"><a href="#185624" label="[18:56:24]">&lt;markjenkinssksp&gt;</a></span><span class="message">In the last few weeks, I've taken an interest in fixing the bootstrapple yacc licensing problem in a way that converges with my interest in bootstrapping Lox</span></div><div class="line" id="185758"><span class="nick" style="color:#80b1d3"><a href="#185758" label="[18:57:58]">&lt;markjenkinssksp&gt;</a></span><span class="message">Happy to share my early work-in-progress efforts in a &quot;secret&quot; gist and not a real project repo <a rel="nofollow" href="https://gist.github.com/markjenkins/4229efe7fe36365ea8d5fd392bea33b8">https://gist.github.com/markjenkins/4229efe7fe36365ea8d5fd392bea33b8</a> </span></div><div class="line" id="190002"><span class="nick" style="color:#80b1d3"><a href="#190002" label="[19:00:02]">&lt;markjenkinssksp&gt;</a></span><span class="message">yeah, I know the channel is publicly logged (I catch up that way sometimes), hence &quot;secret&quot; in quotes. I don't want to put something half baked and experimental in a public project repo yet</span></div><div class="line" id="190106"><span class="nick" style="color:#80b1d3"><a href="#190106" label="[19:01:06]">&lt;markjenkinssksp&gt;</a></span><span class="message">sister repositories and gists. Not easilly bootstrappable, sublox1 reference implementation <a rel="nofollow" href="https://github.com/markjenkins/sublox-reference-implementation">https://github.com/markjenkins/sublox-reference-implementation</a> </span></div><div class="line" id="190157"><span class="nick" style="color:#80b1d3"><a href="#190157" label="[19:01:57]">&lt;markjenkinssksp&gt;</a></span><span class="message">Not easilly bootstrappable input pre-processor <a rel="nofollow" href="https://gist.github.com/markjenkins/1a39e62537de9f08648aaf0c82e7d689">https://gist.github.com/markjenkins/1a39e62537de9f08648aaf0c82e7d689</a> </span></div><div class="line" id="190309"><span class="nick" style="color:#80b1d3"><a href="#190309" label="[19:03:09]">&lt;markjenkinssksp&gt;</a></span><span class="message">my Lox / sublox implementation that I am targeting for early rebootstrappability <a rel="nofollow" href="https://github.com/markjenkins/lox_compiler_scheme">https://github.com/markjenkins/lox_compiler_scheme</a> </span></div><div class="line" id="190344"><span class="nick" style="color:#6d2462"><a href="#190344" label="[19:03:44]">&lt;muurkha&gt;</a></span><span class="message">cool!</span></div><div class="line" id="190444"><span class="nick" style="color:#80b1d3"><a href="#190444" label="[19:04:44]">&lt;markjenkinssksp&gt;</a></span><span class="message">And no new code to be found here, but my expression of interest in taking the oriansj/mes-m2 slow_lisp/rewrite, with intent to strip out stuff I don't need like module systems and macros <a rel="nofollow" href="https://github.com/markjenkins/mes-m2-rewrite/">https://github.com/markjenkins/mes-m2-rewrite/</a> </span></div><div class="line" id="190718"><span class="nick" style="color:#80b1d3"><a href="#190718" label="[19:07:18]">&lt;markjenkinssksp&gt;</a></span><span class="message">The parser generator side of things only computes nullable and FIRST sets so far, but I've been also getting a grasp on the theory behind generating LALA(1) automatons, so I've got a sense of what I need to do next with concepts like partitions and itemsets</span></div><div class="line" id="191751"><span class="nick" style="color:#6d2462"><a href="#191751" label="[19:17:51]">&lt;muurkha&gt;</a></span><span class="message">LALR(1)?</span></div><div class="line" id="191813"><span class="nick" style="color:#6d2462"><a href="#191813" label="[19:18:13]">&lt;muurkha&gt;</a></span><span class="message">or is LALA(1) a new sort of parsing automaton I haven't heard about yet?</span></div><div class="line" id="192008"><span class="nick" style="color:#6d2462"><a href="#192008" label="[19:20:08]">&lt;muurkha&gt;</a></span><span class="message">(I hope I'm not being a dick about a typo, I'm just thinking there's a lot of new parsing stuff I don't know about yet)</span></div><div class="line" id="192009"><span class="nick" style="color:#80b1d3"><a href="#192009" label="[19:20:09]">&lt;markjenkinssksp&gt;</a></span><span class="message">LALR(1) indeed, just a typo</span></div><div class="line" id="192020"><span class="nick" style="color:#6d2462"><a href="#192020" label="[19:20:20]">&lt;muurkha&gt;</a></span><span class="message">aha, cool</span></div><div class="line" id="192033"><span class="nick" style="color:#80b1d3"><a href="#192033" label="[19:20:33]">&lt;markjenkinssksp&gt;</a></span><span class="message">worth clarifying</span></div><div class="line" id="192114"><span class="nick" style="color:#6d2462"><a href="#192114" label="[19:21:14]">&lt;muurkha&gt;</a></span><span class="message">the thing that most helped me understand LR parsing was writing a super stupid bottom-up parser</span></div><div class="line" id="192123"><span class="nick" style="color:#80b1d3"><a href="#192123" label="[19:21:23]">&lt;markjenkinssksp&gt;</a></span><span class="message">only re-inventing the implementation for the billionth time, but not the concepts, which are hard enough to grasp as is, see my REFERENCES file</span></div><div class="line" id="192214"><span class="nick" style="color:#6d2462"><a href="#192214" label="[19:22:14]">&lt;muurkha&gt;</a></span><span class="message">which, instead of having a state table to figure out whether to shift or reduce, had a list of reduction rules, and it would loop over the list of reduction rules trying to apply each one to the top of the stack</span></div><div class="line" id="192231"><span class="nick" style="color:#6d2462"><a href="#192231" label="[19:22:31]">&lt;muurkha&gt;</a></span><span class="message">if one succeeded, it would restart; if none succeeded, it would shift another token onto the stack</span></div><div class="line" id="192315"><span class="nick" style="color:#80b1d3"><a href="#192315" label="[19:23:15]">&lt;markjenkinssksp&gt;</a></span><span class="message">One reason for me to generate LALR(1) would be to get away with just re-using the yacc C skeletons that are already out there</span></div><div class="line" id="192337"><span class="nick" style="color:#6d2462"><a href="#192337" label="[19:23:37]">&lt;muurkha&gt;</a></span><span class="message">yeah, I'm just saying if you want to understand LALR(1) intuitively, not as an alternative in practice</span></div><div class="line" id="192409"><span class="nick" style="color:#6d2462"><a href="#192409" label="[19:24:09]">&lt;muurkha&gt;</a></span><span class="message">there are things LALR can do that this stupid approach can't, like if you have a sequence of tokens that should parse to, say, an initialization in one syntactic context and an assignment in another</span></div><div class="line" id="192439"><span class="nick" style="color:#80b1d3"><a href="#192439" label="[19:24:39]">&lt;markjenkinssksp&gt;</a></span><span class="message">interesting</span></div><div class="line" id="192447"><span class="nick" style="color:#6d2462"><a href="#192447" label="[19:24:47]">&lt;muurkha&gt;</a></span><span class="message">but I found it really helpful in making the leap to understanding LR parsing at all</span></div><div class="line" id="192606"><span class="nick" style="color:#6d2462"><a href="#192606" label="[19:26:06]">&lt;muurkha&gt;</a></span><span class="message">(I may not be a great guide to how to understand LR given that I didn't actually go on to write an LR parser generator, so take it with a grain of salt; maybe I don't understand it as well as I think I do)</span></div><div class="line" id="192750"><span class="nick" style="color:#6d2462"><a href="#192750" label="[19:27:50]">&lt;muurkha&gt;</a></span><span class="message">the rules were basically just CFG productions running backwards: for X ::= Y Z W it would pop Y Z W off the stack (failing if they weren't there), package them up into an X, and push the X on the stack</span></div><div class="line" id="192808"><span class="nick" style="color:#80b1d3"><a href="#192808" label="[19:28:08]">&lt;markjenkinssksp&gt;</a></span><span class="message">At this point, I think I grasp how a state can represent that several possible rules/productions may be a match in progress</span></div><div class="line" id="192847"><span class="nick" style="color:#6d2462"><a href="#192847" label="[19:28:47]">&lt;muurkha&gt;</a></span><span class="message">do you already know about the NFA/DFA equivalency?  that was a big stepping stone for me on that question in particular</span></div><div class="line" id="193229"><span class="nick" style="color:#80b1d3"><a href="#193229" label="[19:32:29]">&lt;markjenkinssksp&gt;</a></span><span class="message">That's interesting, doing a web search found me <a rel="nofollow" href="https://neuraldump.net/2017/11/nfa-and-dfa-equivalence-theorem-proof-and-example/">https://neuraldump.net/2017/11/nfa-and-dfa-equivalence-theorem-proof-and-example/</a>  and the summary at the start makes some sense to me</span></div><div class="line" id="193347"><span class="nick" style="color:#80b1d3"><a href="#193347" label="[19:33:47]">&lt;markjenkinssksp&gt;</a></span><span class="message">I took a third year automata course in my CS degree around 2004 or so, mandatory course for my honours degree, may have been exposed to that then, hard to say. May have got a C+ grade</span></div><div class="line" id="193619"><span class="nick" style="color:#6d2462"><a href="#193619" label="[19:36:19]">&lt;muurkha&gt;</a></span><span class="message">oh, why don't you read <a rel="nofollow" href="https://swtch.com/~rsc/regexp/regexp1.html">https://swtch.com/~rsc/regexp/regexp1.html</a>  then</span></div><div class="line" id="193938"><span class="nick" style="color:#6d2462"><a href="#193938" label="[19:39:38]">&lt;muurkha&gt;</a></span><span class="message">tastes may vary but that's the best explanation of the thing I've found</span></div><div class="line" id="194015"><span class="nick" style="color:#234e69"><a href="#194015" label="[19:40:15]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, talking about LALR, i see. that's something i was wanting to understand, actually.</span></div><div class="line" id="194124"><span class="nick" style="color:#6d2462"><a href="#194124" label="[19:41:24]">&lt;muurkha&gt;</a></span><span class="message">upon skimming the neuraldump page looks pretty much correct but it sort of lacks the context of this is important</span></div><div class="line" id="194159"><span class="nick" style="color:#80b1d3"><a href="#194159" label="[19:41:59]">&lt;markjenkinssksp&gt;</a></span><span class="message">Just added to my REFERENCES file, <a rel="nofollow" href="http://jsmachines.sourceforge.net/machines/lalr1.html">http://jsmachines.sourceforge.net/machines/lalr1.html</a>  has also been a big help, a nice interactive toy</span></div><div class="line" id="194207"><span class="nick" style="color:#6d2462"><a href="#194207" label="[19:42:07]">&lt;muurkha&gt;</a></span><span class="message">I think LALR is kind of a distraction most of the time unless you're implementing yacc or debugging a yacc grammar</span></div><div class="line" id="194232"><span class="nick" style="color:#6d2462"><a href="#194232" label="[19:42:32]">&lt;muurkha&gt;</a></span><span class="message">I mean intellectually LALR is a towering achievement of computer science</span></div><div class="line" id="194253"><span class="nick" style="color:#6d2462"><a href="#194253" label="[19:42:53]">&lt;muurkha&gt;</a></span><span class="message">but practically using it is more trouble than it's worth most of the time</span></div><div class="line" id="194344"><span class="nick" style="color:#80b1d3"><a href="#194344" label="[19:43:44]">&lt;markjenkinssksp&gt;</a></span><span class="message">agreed, in this case I am trying to re-implement yacc earlier in the bootstrap path for the sake of bash parse.y, if it were not for the licensing problem I never would have gone down this rabit hole</span></div><div class="line" id="194352"><span class="nick" style="color:#6d2462"><a href="#194352" label="[19:43:52]">&lt;muurkha&gt;</a></span><span class="message">I was going to say &quot;unless you have yacc handy and no other parser generators&quot; but actually I think implementing a Packrat or unmemoized PEG parser generator from scratch is a better choice in most contexts</span></div><div class="line" id="194437"><span class="nick" style="color:#6d2462"><a href="#194437" label="[19:44:37]">&lt;muurkha&gt;</a></span><span class="message">I've worked on a Packrat parser in C but I haven't tried writing one from scratch, so that might be an exception</span></div><div class="line" id="194624"><span class="nick" style="color:#6d2462"><a href="#194624" label="[19:46:24]">&lt;muurkha&gt;</a></span><span class="message">hey, this jsmachines thing is super great</span></div><div class="line" id="195055"><span class="nick" style="color:#80b1d3"><a href="#195055" label="[19:50:55]">&lt;markjenkinssksp&gt;</a></span><span class="message">yep, made sure to archive it</span></div><div class="line" id="200502"><span class="nick" style="color:#80b1d3"><a href="#200502" label="[20:05:02]">&lt;markjenkinssksp&gt;</a></span><span class="message">anyway, that's all for today, next progress report will probably be in a few weeks</span></div><div class="line" id="204556"><span class="nick" style="color:#6b8072"><a href="#204556" label="[20:45:56]">&lt;oriansj&gt;</a></span><span class="message">keep up the great work markjenkinssksp</span></div><div class="line" id="221811"><span class="nick" style="color:#2e2a4a"><a href="#221811" label="[22:18:11]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: probably no need for sed, we build Gnu sed quite early</span></div><div class="line" id="221900"><span class="nick" style="color:#2e2a4a"><a href="#221900" label="[22:19:00]">&lt;stikonas[m]&gt;</a></span><span class="message">There is a bit of need for mescc</span></div><div class="line" id="221943"><span class="nick" style="color:#2e2a4a"><a href="#221943" label="[22:19:43]">&lt;stikonas[m]&gt;</a></span><span class="message">But in live bootstrap we just ship the whole mescc script with templated valued replaced manually</span></div><div class="line" id="222153"><span class="nick" style="color:#2e2a4a"><a href="#222153" label="[22:21:53]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/files/mescc.scm">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/files/mescc.scm</a> </span></div><div class="line" id="222339"><span class="nick" style="color:#2e2a4a"><a href="#222339" label="[22:23:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Original file is <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/mes.git/tree/scripts/mescc.scm.in">http://git.savannah.gnu.org/cgit/mes.git/tree/scripts/mescc.scm.in</a> </span></div><div class="line" id="222404"><span class="nick" style="color:#2e2a4a"><a href="#222404" label="[22:24:04]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: so I leave it up to you to decide</span></div><div class="line" id="222438"><span class="nick" style="color:#2e2a4a"><a href="#222438" label="[22:24:38]">&lt;stikonas[m]&gt;</a></span><span class="message">It's a hack but not too big</span></div><div class="line" id="222643"><span class="nick" style="color:#6b8072"><a href="#222643" label="[22:26:43]">&lt;oriansj&gt;</a></span><span class="message">doesn't look like it even needs sed but perhaps something rather simpler</span></div><div class="line" id="222729"><span class="nick" style="color:#6b8072"><a href="#222729" label="[22:27:29]">&lt;oriansj&gt;</a></span><span class="message">replace -f input -o output -m pattern -r replacement would probably be good enough</span></div><div class="line" id="224116"><span class="nick" style="color:#6c3d55"><a href="#224116" label="[22:41:16]">&lt;Hagfish&gt;</a></span><span class="message">that does seem quite elegant, and follows the &quot;principle of least power&quot;</span></div><div class="line" id="224933"><span class="nick" style="color:#6b8072"><a href="#224933" label="[22:49:33]">&lt;oriansj&gt;</a></span><span class="message">probably should allow output and input files to be one and the same so that it doesn't provide weird truncate behavior</span></div><div class="line" id="230241"><span class="nick" style="color:#6b8072"><a href="#230241" label="[23:02:41]">&lt;oriansj&gt;</a></span><span class="message">guess it is finally time to add int fileno(FILE* f) to M2libc</span></div><div class="line" id="230411"><span class="nick" style="color:#6b8072"><a href="#230411" label="[23:04:11]">&lt;oriansj&gt;</a></span><span class="message">or I guess I could just use fread</span></div><div class="line" id="231140"><span class="nick" style="color:#2e2a4a"><a href="#231140" label="[23:11:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Input and output doesn't have to be the same now that we have both cp and rm</span></div><div class="line" id="231429"><span class="nick" style="color:#6b8072"><a href="#231429" label="[23:14:29]">&lt;oriansj&gt;</a></span><span class="message">well it just requires building an input buffer and that is just a couple lines</span></div><div class="line" id="231646"><span class="nick" style="color:#6b8072"><a href="#231646" label="[23:16:46]">&lt;oriansj&gt;</a></span><span class="message">and I am just going to forbid null bytes in the input/output because we should only be working on human written text</span></div><div class="line" id="234310"><span class="nick" style="color:#6d2462"><a href="#234310" label="[23:43:10]">&lt;muurkha&gt;</a></span><span class="message">you can also forbid super long lines by the same token</span></div><div class="line" id="234551"><span class="nick" style="color:#6b8072"><a href="#234551" label="[23:45:51]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well a strlen and malloc are cheap</span></div><div class="line" id="235003"><span class="nick" style="color:#6b8072"><a href="#235003" label="[23:50:03]">&lt;oriansj&gt;</a></span><span class="message">and done</span></div><div class="line" id="235033"><span class="nick" style="color:#6b8072"><a href="#235033" label="[23:50:33]">&lt;oriansj&gt;</a></span><span class="message">feel free to sanity test and yell at me if I didn't clear out all of the bugs yet</span></div><div class="line" id="235055"><span class="nick" style="color:#6b8072"><a href="#235055" label="[23:50:55]">&lt;oriansj&gt;</a></span><span class="message">might need to add support for --help as well in a minute</span></div><div class="line" id="235136"><span class="nick" style="color:#6d2462"><a href="#235136" label="[23:51:36]">&lt;muurkha&gt;</a></span><span class="message">oriansj: pretty cheap yeah</span></div><div class="line" id="235143"><span class="nick" style="color:#6b8072"><a href="#235143" label="[23:51:43]">&lt;oriansj&gt;</a></span><span class="message">158 lines just to support a 5 line replace function</span></div><div class="line" id="235146"><span class="nick" style="color:#6d2462"><a href="#235146" label="[23:51:46]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="235309"><span class="nick" style="color:#6b8072"><a href="#235309" label="[23:53:09]">&lt;oriansj&gt;</a></span><span class="message">but that replace function is freakin cheap and easy to reason about: <a rel="nofollow" href="https://paste.debian.net/1243050/">https://paste.debian.net/1243050/</a> </span></div><div class="line" id="235422"><span class="nick" style="color:#6b8072"><a href="#235422" label="[23:54:22]">&lt;oriansj&gt;</a></span><span class="message">38 of them are just parsing the argv values</span></div><div class="line" id="235548"><span class="nick" style="color:#6b8072"><a href="#235548" label="[23:55:48]">&lt;oriansj&gt;</a></span><span class="message">18 lines to do work; the rest as whitespace, comments and input validation</span></div><div class="line" id="235834"><span class="nick" style="color:#6b8072"><a href="#235834" label="[23:58:34]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: play with it and let me know if you think it is good enough for your needs</span></div><br /></div></body></html>