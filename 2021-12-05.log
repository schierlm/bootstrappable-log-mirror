<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="121022"><span class="nick" style="color:#8dd3c7"><a href="#121022" label="[12:10:22]">&lt;stikonas&gt;</a></span><span class="message">managed to shave off 4 bytes from hex0-seed <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/16">https://github.com/oriansj/bootstrap-seeds/pull/16</a> </span></div><div class="line" id="121029"><span class="nick" style="color:#8dd3c7"><a href="#121029" label="[12:10:29]">&lt;stikonas&gt;</a></span><span class="message">(for risc-v)</span></div><div class="line" id="134309"><span class="nick" style="color:#2e2a4a"><a href="#134309" label="[13:43:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the binary you checked in for POSIX/riscv32/hex0-seed does not match the sources in POSIX/riscv32/hex0_riscv32.hex0</span></div><div class="line" id="134342"><span class="nick" style="color:#2e2a4a"><a href="#134342" label="[13:43:42]">&lt;oriansj&gt;</a></span><span class="message">there is a 2byte difference in the ELF-header</span></div><div class="line" id="134828"><span class="nick" style="color:#8dd3c7"><a href="#134828" label="[13:48:28]">&lt;stikonas&gt;</a></span><span class="message">oh, that's strange, let me double check which one is correct</span></div><div class="line" id="134958"><span class="nick" style="color:#8dd3c7"><a href="#134958" label="[13:49:58]">&lt;stikonas&gt;</a></span><span class="message">stange, I've rebuilt hex0 from hex0_riscv32.hex0 and sha256sum matches</span></div><div class="line" id="135029"><span class="nick" style="color:#8dd3c7"><a href="#135029" label="[13:50:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, what's going on...</span></div><div class="line" id="135101"><span class="nick" style="color:#8dd3c7"><a href="#135101" label="[13:51:01]">&lt;stikonas&gt;</a></span><span class="message">oh sorry, I'm in the wrong checkout</span></div><div class="line" id="135152"><span class="nick" style="color:#2e2a4a"><a href="#135152" label="[13:51:52]">&lt;oriansj&gt;</a></span><span class="message">it happens</span></div><div class="line" id="135222"><span class="nick" style="color:#2e2a4a"><a href="#135222" label="[13:52:22]">&lt;oriansj&gt;</a></span><span class="message">much better to catch these things before a merge then to explain a difference later when someone else checks</span></div><div class="line" id="135305"><span class="nick" style="color:#8dd3c7"><a href="#135305" label="[13:53:05]">&lt;stikonas&gt;</a></span><span class="message">ok, I think the binary is older</span></div><div class="line" id="135310"><span class="nick" style="color:#8dd3c7"><a href="#135310" label="[13:53:10]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="135319"><span class="nick" style="color:#8dd3c7"><a href="#135319" label="[13:53:19]">&lt;stikonas&gt;</a></span><span class="message">I think I've updated binary size in elf header later</span></div><div class="line" id="135432"><span class="nick" style="color:#8dd3c7"><a href="#135432" label="[13:54:32]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed</span></div><div class="line" id="135441"><span class="nick" style="color:#8dd3c7"><a href="#135441" label="[13:54:41]">&lt;stikonas&gt;</a></span><span class="message">and double checked riscv64, that one seem ok</span></div><div class="line" id="140350"><span class="nick" style="color:#2e2a4a"><a href="#140350" label="[14:03:50]">&lt;oriansj&gt;</a></span><span class="message">now this looks os</span></div><div class="line" id="140354"><span class="nick" style="color:#2e2a4a"><a href="#140354" label="[14:03:54]">&lt;oriansj&gt;</a></span><span class="message">OK</span></div><div class="line" id="140417"><span class="nick" style="color:#2e2a4a"><a href="#140417" label="[14:04:17]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="140555"><span class="nick" style="color:#8dd3c7"><a href="#140555" label="[14:05:55]">&lt;stikonas&gt;</a></span><span class="message">ok, I'm running test-riscv* and then will merge into stage0-posix</span></div><div class="line" id="140813"><span class="nick" style="color:#8dd3c7"><a href="#140813" label="[14:08:13]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed</span></div><div class="line" id="140858"><span class="nick" style="color:#8dd3c7"><a href="#140858" label="[14:08:58]">&lt;stikonas&gt;</a></span><span class="message">so now hex0_riscv32 is the smallest hex0 seed...</span></div><div class="line" id="140908"><span class="nick" style="color:#8dd3c7"><a href="#140908" label="[14:09:08]">&lt;stikonas&gt;</a></span><span class="message">although, maybe x86 one can be optimized further</span></div><div class="line" id="202613"><span class="nick" style="color:#6b8072"><a href="#202613" label="[20:26:13]">&lt;ekaitz&gt;</a></span><span class="message">hey did you guys see this? <a rel="nofollow" href="https://github.com/nineties/planckforth">https://github.com/nineties/planckforth</a> </span></div><div class="line" id="203134"><span class="nick" style="color:#80b1d3"><a href="#203134" label="[20:31:34]">&lt;stikonas[m]&gt;</a></span><span class="message">I think I saw it once</span></div><div class="line" id="203249"><span class="nick" style="color:#80b1d3"><a href="#203249" label="[20:32:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Although, isn't stage0 stuff more readable?</span></div><div class="line" id="203630"><span class="nick" style="color:#6b8072"><a href="#203630" label="[20:36:30]">&lt;ekaitz&gt;</a></span><span class="message">it's supposed to</span></div><div class="line" id="203645"><span class="nick" style="color:#6b8072"><a href="#203645" label="[20:36:45]">&lt;ekaitz&gt;</a></span><span class="message">but, honestly, I think stage0 is too complex</span></div><div class="line" id="203652"><span class="nick" style="color:#6b8072"><a href="#203652" label="[20:36:52]">&lt;ekaitz&gt;</a></span><span class="message">probably there's a reason for it</span></div><div class="line" id="203721"><span class="nick" style="color:#6b8072"><a href="#203721" label="[20:37:21]">&lt;ekaitz&gt;</a></span><span class="message">but from an uninformed perspective, there are too many steps and there's no explanation of why all those steps are needed</span></div><div class="line" id="203731"><span class="nick" style="color:#6b8072"><a href="#203731" label="[20:37:31]">&lt;ekaitz&gt;</a></span><span class="message">it's just a decision that was taken</span></div><div class="line" id="203819"><span class="nick" style="color:#6b8072"><a href="#203819" label="[20:38:19]">&lt;ekaitz&gt;</a></span><span class="message">maybe it's just my feeling</span></div><div class="line" id="205158"><span class="nick" style="color:#80b1d3"><a href="#205158" label="[20:51:58]">&lt;stikonas[m]&gt;</a></span><span class="message">ekaitz: documentation could be better, that's true</span></div><div class="line" id="205227"><span class="nick" style="color:#80b1d3"><a href="#205227" label="[20:52:27]">&lt;stikonas[m]&gt;</a></span><span class="message">And number of steps is also larger because stage0-posix builds more</span></div><div class="line" id="205336"><span class="nick" style="color:#80b1d3"><a href="#205336" label="[20:53:36]">&lt;stikonas[m]&gt;</a></span><span class="message">including untar and ungz</span></div><div class="line" id="205612"><span class="nick" style="color:#8dd3c7"><a href="#205612" label="[20:56:12]">&lt;stikonas&gt;</a></span><span class="message">another reason for more steps is that we some steps are self-reproducing</span></div><div class="line" id="205630"><span class="nick" style="color:#8dd3c7"><a href="#205630" label="[20:56:30]">&lt;stikonas&gt;</a></span><span class="message">e.g. we rebuild hex0 with hex0-seed which should be identical</span></div><div class="line" id="205653"><span class="nick" style="color:#8dd3c7"><a href="#205653" label="[20:56:53]">&lt;stikonas&gt;</a></span><span class="message">and we also build &quot;shells&quot; (kaem-minimal and kaem)</span></div><div class="line" id="205710"><span class="nick" style="color:#8dd3c7"><a href="#205710" label="[20:57:10]">&lt;stikonas&gt;</a></span><span class="message">without all these extras, there aren't actually that many steps</span></div><div class="line" id="205727"><span class="nick" style="color:#8dd3c7"><a href="#205727" label="[20:57:27]">&lt;stikonas&gt;</a></span><span class="message">it's hex0-&gt;hex1-&gt;hex2-&gt;M0-&gt;cc_*-&gt;M2</span></div><div class="line" id="205858"><span class="nick" style="color:#8dd3c7"><a href="#205858" label="[20:58:58]">&lt;stikonas&gt;</a></span><span class="message">after that most of the steps kind of rebuilds all the same stuff but a bit better (from C sources and easier to debug binaries)</span></div><div class="line" id="211146"><span class="nick" style="color:#2e2a4a"><a href="#211146" label="[21:11:46]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: perhaps I should be asking you what sorts of an explnation would you be wanting about the various steps?</span></div><div class="line" id="211551"><span class="nick" style="color:#2e2a4a"><a href="#211551" label="[21:15:51]">&lt;oriansj&gt;</a></span><span class="message">as we have tried the do a FORTH bootstrap route ourselves: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a> </span></div><div class="line" id="211842"><span class="nick" style="color:#2e2a4a"><a href="#211842" label="[21:18:42]">&lt;oriansj&gt;</a></span><span class="message">We found C compilers are more portable, compatible, easier to audit and simpler to build then FORTH or LISP interpreters. (The long battle to bootstrap mes.c is plenty of proof of that point)</span></div><div class="line" id="211936"><span class="nick" style="color:#6b8072"><a href="#211936" label="[21:19:36]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: I am not advocating for forth or lisp or any other, it's just that it's hard to find reasons to your decisions (I don't mean they are not reasoned!)</span></div><div class="line" id="211950"><span class="nick" style="color:#8dd3c7"><a href="#211950" label="[21:19:50]">&lt;stikonas&gt;</a></span><span class="message">I guess plankforth would be somewhat equivalent to M0 written in hex0</span></div><div class="line" id="212019"><span class="nick" style="color:#8dd3c7"><a href="#212019" label="[21:20:19]">&lt;stikonas&gt;</a></span><span class="message">and yes, mes.c is not easy...</span></div><div class="line" id="212056"><span class="nick" style="color:#6b8072"><a href="#212056" label="[21:20:56]">&lt;ekaitz&gt;</a></span><span class="message">i mean, the decisions are surely correct, but there's no mention to the thought process and that's a little bit of a shame</span></div><div class="line" id="212108"><span class="nick" style="color:#2e2a4a"><a href="#212108" label="[21:21:08]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: you mean, I haven't documented the decisions and why. That makes perfect sense</span></div><div class="line" id="212119"><span class="nick" style="color:#6b8072"><a href="#212119" label="[21:21:19]">&lt;ekaitz&gt;</a></span><span class="message">i'd love to have the chance to follow that thought process</span></div><div class="line" id="212125"><span class="nick" style="color:#6b8072"><a href="#212125" label="[21:21:25]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: yes! exactly</span></div><div class="line" id="212156"><span class="nick" style="color:#2e2a4a"><a href="#212156" label="[21:21:56]">&lt;oriansj&gt;</a></span><span class="message">ok and where would you like that information to be placed, so that people looking for that information would be able to quickly find it</span></div><div class="line" id="212301"><span class="nick" style="color:#6b8072"><a href="#212301" label="[21:23:01]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: I'm not sure about that. I paper is ok for me. But I'm not good at communication.</span></div><div class="line" id="212411"><span class="nick" style="color:#2e2a4a"><a href="#212411" label="[21:24:11]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: How does the talk-notes directory sound to you?</span></div><div class="line" id="212547"><span class="nick" style="color:#2e2a4a"><a href="#212547" label="[21:25:47]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/talk-notes">https://github.com/oriansj/talk-notes</a>  for anyone curious</span></div><div class="line" id="212620"><span class="nick" style="color:#2e2a4a"><a href="#212620" label="[21:26:20]">&lt;oriansj&gt;</a></span><span class="message">which reminds me, I probably need to add my own lightning talk to the list of previous bootstrapping talks</span></div><div class="line" id="212650"><span class="nick" style="color:#6b8072"><a href="#212650" label="[21:26:50]">&lt;ekaitz&gt;</a></span><span class="message">i'm not sure if they show the information i'd like to see</span></div><div class="line" id="212656"><span class="nick" style="color:#6b8072"><a href="#212656" label="[21:26:56]">&lt;ekaitz&gt;</a></span><span class="message">but it's something</span></div><div class="line" id="213006"><span class="nick" style="color:#8dd3c7"><a href="#213006" label="[21:30:06]">&lt;stikonas&gt;</a></span><span class="message">might be that something like parts.rst from live-bootstrap would make sense</span></div><div class="line" id="213040"><span class="nick" style="color:#8dd3c7"><a href="#213040" label="[21:30:40]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="213112"><span class="nick" style="color:#8dd3c7"><a href="#213112" label="[21:31:12]">&lt;stikonas&gt;</a></span><span class="message">so it could talk e.g. about what simple linkers hex1 adds, then extra features that hex2 has</span></div><div class="line" id="213128"><span class="nick" style="color:#8dd3c7"><a href="#213128" label="[21:31:28]">&lt;stikonas&gt;</a></span><span class="message">there is a little bit in the comments in kaem files but it's very short</span></div><div class="line" id="213153"><span class="nick" style="color:#8dd3c7"><a href="#213153" label="[21:31:53]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually we already have that in README.md</span></div><div class="line" id="213250"><span class="nick" style="color:#6b8072"><a href="#213250" label="[21:32:50]">&lt;ekaitz&gt;</a></span><span class="message">yeah there's a high level description of the goals of each of the steps</span></div><div class="line" id="213307"><span class="nick" style="color:#6b8072"><a href="#213307" label="[21:33:07]">&lt;ekaitz&gt;</a></span><span class="message">but there's no reasoning about why was the project split on those steps and no others</span></div><div class="line" id="213319"><span class="nick" style="color:#8dd3c7"><a href="#213319" label="[21:33:19]">&lt;stikonas&gt;</a></span><span class="message">basically hex0 code is quite tedious to write and edit</span></div><div class="line" id="213323"><span class="nick" style="color:#6b8072"><a href="#213323" label="[21:33:23]">&lt;ekaitz&gt;</a></span><span class="message">anyway, that's just a feeling I have it seems</span></div><div class="line" id="213341"><span class="nick" style="color:#8dd3c7"><a href="#213341" label="[21:33:41]">&lt;stikonas&gt;</a></span><span class="message">due to the fact that it has no linking and all those jumps have to be calculated manually</span></div><div class="line" id="213349"><span class="nick" style="color:#8dd3c7"><a href="#213349" label="[21:33:49]">&lt;stikonas&gt;</a></span><span class="message">so if you e.g. insert a line somewhere in the middle</span></div><div class="line" id="213356"><span class="nick" style="color:#8dd3c7"><a href="#213356" label="[21:33:56]">&lt;stikonas&gt;</a></span><span class="message">you might have to recalculate a lot of them</span></div><div class="line" id="213417"><span class="nick" style="color:#8dd3c7"><a href="#213417" label="[21:34:17]">&lt;stikonas&gt;</a></span><span class="message">so the first goal is to fix that with as little hex0 code as possible</span></div><div class="line" id="213442"><span class="nick" style="color:#8dd3c7"><a href="#213442" label="[21:34:42]">&lt;stikonas&gt;</a></span><span class="message">hence it was decided to have a very simple hex1 linker rather than full-featured hex2</span></div><div class="line" id="213522"><span class="nick" style="color:#8dd3c7"><a href="#213522" label="[21:35:22]">&lt;stikonas&gt;</a></span><span class="message">there is nothing preventing you from writing M0 in hex0</span></div><div class="line" id="213540"><span class="nick" style="color:#8dd3c7"><a href="#213540" label="[21:35:40]">&lt;stikonas&gt;</a></span><span class="message">you might be able to do that in a week or so</span></div><div class="line" id="213550"><span class="nick" style="color:#8dd3c7"><a href="#213550" label="[21:35:50]">&lt;stikonas&gt;</a></span><span class="message">but the resulting file would be hard to maintain</span></div><div class="line" id="214009"><span class="nick" style="color:#8dd3c7"><a href="#214009" label="[21:40:09]">&lt;stikonas&gt;</a></span><span class="message">once you have hex1, that .hex1 code is much easier to edit but due to hex1 limitations, you can't write very big programs in it</span></div><div class="line" id="214022"><span class="nick" style="color:#8dd3c7"><a href="#214022" label="[21:40:22]">&lt;stikonas&gt;</a></span><span class="message">(primarily because hex1 only supports 1 character labels</span></div><div class="line" id="214121"><span class="nick" style="color:#8dd3c7"><a href="#214121" label="[21:41:21]">&lt;stikonas&gt;</a></span><span class="message">hence the next step is full linker hex2</span></div><div class="line" id="214151"><span class="nick" style="color:#8dd3c7"><a href="#214151" label="[21:41:51]">&lt;stikonas&gt;</a></span><span class="message">and  then assembler (M0), cc_* compiler in assembly and C compiler in C are quite natural steps</span></div><div class="line" id="214326"><span class="nick" style="color:#8dd3c7"><a href="#214326" label="[21:43:26]">&lt;stikonas&gt;</a></span><span class="message">and after that it's just a bit of dogfooding. We rebuild basically the same tools that we have built before but from C source</span></div><div class="line" id="214352"><span class="nick" style="color:#8dd3c7"><a href="#214352" label="[21:43:52]">&lt;stikonas&gt;</a></span><span class="message">C tools also have slightly more features that we don't bother implementing in assmebly</span></div><div class="line" id="214415"><span class="nick" style="color:#8dd3c7"><a href="#214415" label="[21:44:15]">&lt;stikonas&gt;</a></span><span class="message">e.g. useful error messages, ability to read multiple files, etc...</span></div><div class="line" id="214435"><span class="nick" style="color:#8dd3c7"><a href="#214435" label="[21:44:35]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: hopefully that sheds some light</span></div><div class="line" id="214638"><span class="nick" style="color:#6b8072"><a href="#214638" label="[21:46:38]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: it's more or less what I deduced from the project, with effort</span></div><div class="line" id="214703"><span class="nick" style="color:#6b8072"><a href="#214703" label="[21:47:03]">&lt;ekaitz&gt;</a></span><span class="message">but I was more interested on how this project was developed and how were the decisions taken</span></div><div class="line" id="214716"><span class="nick" style="color:#6b8072"><a href="#214716" label="[21:47:16]">&lt;ekaitz&gt;</a></span><span class="message">also, if possible, comparing with other research</span></div><div class="line" id="214727"><span class="nick" style="color:#6b8072"><a href="#214727" label="[21:47:27]">&lt;ekaitz&gt;</a></span><span class="message">kind of a more scientific approach</span></div><div class="line" id="214807"><span class="nick" style="color:#6b8072"><a href="#214807" label="[21:48:07]">&lt;ekaitz&gt;</a></span><span class="message">because this project is great, but its background knowledge is also really interesting and important</span></div><div class="line" id="215323"><span class="nick" style="color:#6b8072"><a href="#215323" label="[21:53:23]">&lt;ekaitz&gt;</a></span><span class="message">the design decisions are interesting, not only the current architecture or implementation</span></div><div class="line" id="215445"><span class="nick" style="color:#2e2a4a"><a href="#215445" label="[21:54:45]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: Well the design decisions are actually based on the most important metric: What work is someone willing to do *NOW*</span></div><div class="line" id="215515"><span class="nick" style="color:#6b8072"><a href="#215515" label="[21:55:15]">&lt;ekaitz&gt;</a></span><span class="message">100% practical then</span></div><div class="line" id="215517"><span class="nick" style="color:#6b8072"><a href="#215517" label="[21:55:17]">&lt;ekaitz&gt;</a></span><span class="message">cool</span></div><div class="line" id="215643"><span class="nick" style="color:#2e2a4a"><a href="#215643" label="[21:56:43]">&lt;oriansj&gt;</a></span><span class="message">for example the reason why so much effort was put into making mes.c into something M2-Planet could build instead of building a more powerful C compiler in C capable of building TCC or GCC. Was simply because janneke and I were willing to invest the time to get MesCC working and no one else at the time was willing to put in the effort required to create an alternate.</span></div><div class="line" id="215746"><span class="nick" style="color:#2e2a4a"><a href="#215746" label="[21:57:46]">&lt;oriansj&gt;</a></span><span class="message">long term if someone is willing to put in the effort into an alternate path that produces more benefits or lower support work, then we will switch to that.</span></div><div class="line" id="215823"><span class="nick" style="color:#2e2a4a"><a href="#215823" label="[21:58:23]">&lt;oriansj&gt;</a></span><span class="message">but language fanboyism working code does not create.</span></div><div class="line" id="215922"><span class="nick" style="color:#6b8072"><a href="#215922" label="[21:59:22]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: i hope that last sentence is not because of me :)</span></div><div class="line" id="220007"><span class="nick" style="color:#2e2a4a"><a href="#220007" label="[22:00:07]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: nope, I praise every effort that might help us regardless of the reason for it.</span></div><div class="line" id="220043"><span class="nick" style="color:#2e2a4a"><a href="#220043" label="[22:00:43]">&lt;oriansj&gt;</a></span><span class="message">So if FORTh developers magically show up and save us a great deal of work, thanks we will take it. If scheme developers rain from the heavens and solve our porting problems, praise the lord. But right now C seems to be winning.</span></div><div class="line" id="220126"><span class="nick" style="color:#2e2a4a"><a href="#220126" label="[22:01:26]">&lt;oriansj&gt;</a></span><span class="message">and I encourage everyone to work on what interests them</span></div><div class="line" id="220130"><span class="nick" style="color:#6b8072"><a href="#220130" label="[22:01:30]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: Just to clarify, all this discussion is not because of the forth thing I shared. I never coded in forth tbh</span></div><div class="line" id="220135"><span class="nick" style="color:#6b8072"><a href="#220135" label="[22:01:35]">&lt;ekaitz&gt;</a></span><span class="message">I'm more of a C guy</span></div><div class="line" id="220148"><span class="nick" style="color:#6b8072"><a href="#220148" label="[22:01:48]">&lt;ekaitz&gt;</a></span><span class="message">so that's not my point with this whole thing</span></div><div class="line" id="220204"><span class="nick" style="color:#2e2a4a"><a href="#220204" label="[22:02:04]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: actually it is more of a call to people in those communities to do something awesome.</span></div><div class="line" id="220206"><span class="nick" style="color:#80b1d3"><a href="#220206" label="[22:02:06]">&lt;stikonas[m]&gt;</a></span><span class="message">That's probably the reason why C is winning</span></div><div class="line" id="220234"><span class="nick" style="color:#6b8072"><a href="#220234" label="[22:02:34]">&lt;ekaitz&gt;</a></span><span class="message">some of those communities are pretty close</span></div><div class="line" id="220249"><span class="nick" style="color:#6b8072"><a href="#220249" label="[22:02:49]">&lt;ekaitz&gt;</a></span><span class="message">i hope i can do some work on the scheme part of mes</span></div><div class="line" id="220256"><span class="nick" style="color:#6b8072"><a href="#220256" label="[22:02:56]">&lt;ekaitz&gt;</a></span><span class="message">:)</span></div><div class="line" id="220305"><span class="nick" style="color:#2e2a4a"><a href="#220305" label="[22:03:05]">&lt;oriansj&gt;</a></span><span class="message">for example, I'd love to see someone from the scheme community pick up slow-utils (mescc-tools in scheme) and allow Guix to get a scheme only bootstrap</span></div><div class="line" id="220307"><span class="nick" style="color:#80b1d3"><a href="#220307" label="[22:03:07]">&lt;stikonas[m]&gt;</a></span><span class="message">I've never coded in forth either</span></div><div class="line" id="220325"><span class="nick" style="color:#80b1d3"><a href="#220325" label="[22:03:25]">&lt;stikonas[m]&gt;</a></span><span class="message">There are just more people familiar with C</span></div><div class="line" id="220344"><span class="nick" style="color:#6b8072"><a href="#220344" label="[22:03:44]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: that's a good one!</span></div><div class="line" id="220357"><span class="nick" style="color:#2e2a4a"><a href="#220357" label="[22:03:57]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/slow-utils">https://github.com/oriansj/slow-utils</a> </span></div><div class="line" id="220421"><span class="nick" style="color:#80b1d3"><a href="#220421" label="[22:04:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, it would be nice if somebody got gash running on mes too</span></div><div class="line" id="220435"><span class="nick" style="color:#2e2a4a"><a href="#220435" label="[22:04:35]">&lt;oriansj&gt;</a></span><span class="message">with a little work, guix can be reduced down to only the guile binary as its bootstrapping root</span></div><div class="line" id="220516"><span class="nick" style="color:#2e2a4a"><a href="#220516" label="[22:05:16]">&lt;oriansj&gt;</a></span><span class="message">and with work mes.c might be extended to be able to run guix or guix might be simplified enough to run on mes.c</span></div><div class="line" id="220538"><span class="nick" style="color:#2e2a4a"><a href="#220538" label="[22:05:38]">&lt;oriansj&gt;</a></span><span class="message">So countless possiblities for awesome bootstrapping results that I would love to see.</span></div><div class="line" id="220559"><span class="nick" style="color:#2e2a4a"><a href="#220559" label="[22:05:59]">&lt;oriansj&gt;</a></span><span class="message">In every language, on every platform and in countless amazing ways.</span></div><div class="line" id="220650"><span class="nick" style="color:#6b8072"><a href="#220650" label="[22:06:50]">&lt;ekaitz&gt;</a></span><span class="message">i see</span></div><div class="line" id="220955"><span class="nick" style="color:#80b1d3"><a href="#220955" label="[22:09:55]">&lt;stikonas[m]&gt;</a></span><span class="message">And others have tried different approaches, e.g. asmc <a rel="nofollow" href="https://gitlab.com/giomasce/asmc">https://gitlab.com/giomasce/asmc</a> </span></div><div class="line" id="221042"><span class="nick" style="color:#6b8072"><a href="#221042" label="[22:10:42]">&lt;ekaitz&gt;</a></span><span class="message">that one is really cool</span></div><div class="line" id="221112"><span class="nick" style="color:#6b8072"><a href="#221112" label="[22:11:12]">&lt;ekaitz&gt;</a></span><span class="message">it explains some design considerations that was more or less what I was missing on stage0</span></div><div class="line" id="221131"><span class="nick" style="color:#80b1d3"><a href="#221131" label="[22:11:31]">&lt;stikonas[m]&gt;</a></span><span class="message">It doesn't go down all the way to hex but doesn't need kernel</span></div><div class="line" id="221335"><span class="nick" style="color:#6b8072"><a href="#221335" label="[22:13:35]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: I might try to take a look into slow-utils</span></div><div class="line" id="221954"><span class="nick" style="color:#2e2a4a"><a href="#221954" label="[22:19:54]">&lt;oriansj&gt;</a></span><span class="message">and it builds M2-Planet as well</span></div><div class="line" id="222011"><span class="nick" style="color:#2e2a4a"><a href="#222011" label="[22:20:11]">&lt;oriansj&gt;</a></span><span class="message">as gio is here as well</span></div><br /></div></body></html>