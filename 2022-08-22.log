<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001132"><span class="nick" style="color:#389600"><a href="#001132" label="[00:11:32]">&lt;stikonas&gt;</a></span><span class="message">I'll probably fix some technical debt in current  stage0-uefi programs before working on M0.efi</span></div><div class="line" id="005606"><span class="nick" style="color:#389600"><a href="#005606" label="[00:56:06]">&lt;stikonas&gt;</a></span><span class="message">and possibly trial more redable defines that rickmaster suggested</span></div><div class="line" id="014435"><span class="nick" style="color:#389600"><a href="#014435" label="[01:44:35]">&lt;stikonas&gt;</a></span><span class="message">oriansj, rickmasters: how about <a rel="nofollow" href="https://paste.debian.net/1251261/">https://paste.debian.net/1251261/</a> </span></div><div class="line" id="015041"><span class="nick" style="color:#389600"><a href="#015041" label="[01:50:41]">&lt;stikonas&gt;</a></span><span class="message">for more complicated programs we might need to disambiguate between some commands, e.g. jmp8 and jmp32 but should be fairly obvious</span></div><div class="line" id="023016"><span class="nick" style="color:#2e2a4a"><a href="#023016" label="[02:30:16]">&lt;oriansj&gt;</a></span><span class="message">well it does look pretty close to NASM assembly so it should be easy to read for anyone familiar with NASM</span></div><div class="line" id="023125"><span class="nick" style="color:#389600"><a href="#023125" label="[02:31:25]">&lt;stikonas&gt;</a></span><span class="message">yes, that was my goal</span></div><div class="line" id="023132"><span class="nick" style="color:#389600"><a href="#023132" label="[02:31:32]">&lt;stikonas&gt;</a></span><span class="message">I've just pushed catm conversion to stage0-uefi</span></div><div class="line" id="023144"><span class="nick" style="color:#389600"><a href="#023144" label="[02:31:44]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/3528be5b2b5c9ba40f47481411d80f4094fc16aa">https://git.stikonas.eu/andrius/stage0-uefi/commit/3528be5b2b5c9ba40f47481411d80f4094fc16aa</a> </span></div><div class="line" id="023244"><span class="nick" style="color:#389600"><a href="#023244" label="[02:32:44]">&lt;stikonas&gt;</a></span><span class="message">and even somebody not yet familiar with NASM is likely to first look at C prototype, then look at .S prototype and then M1, hex2, hex0</span></div><div class="line" id="023509"><span class="nick" style="color:#2e2a4a"><a href="#023509" label="[02:35:09]">&lt;oriansj&gt;</a></span><span class="message">and I do like your position independent work on AMD64</span></div><div class="line" id="023632"><span class="nick" style="color:#2e2a4a"><a href="#023632" label="[02:36:32]">&lt;oriansj&gt;</a></span><span class="message">I wish I thought to do that when I first went that route; it is just a much better idea</span></div><div class="line" id="024734"><span class="nick" style="color:#6b8072"><a href="#024734" label="[02:47:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, at least in hex2.hex1 it makes a lot if sense</span></div><div class="line" id="024829"><span class="nick" style="color:#6b8072"><a href="#024829" label="[02:48:29]">&lt;stikonas[m]&gt;</a></span><span class="message">No need to calculate absolute addresses that hex1 doesn't support</span></div><div class="line" id="032132"><span class="nick" style="color:#2e2a4a"><a href="#032132" label="[03:21:32]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="194034"><span class="nick" style="color:#80b1d3"><a href="#194034" label="[19:40:34]">&lt;theruran&gt;</a></span><span class="message">I was wondering how PIC is done in assembly. I thought it may be related to a problem I am experiencing with Jitawa LISP. But both my machines should be using KSLR, and both binaries are built with musl-libc. On my Intel machine, executing any procedure in Jitawa causes it to crash on an address boundary violation.</span></div><div class="line" id="194104"><span class="nick" style="color:#80b1d3"><a href="#194104" label="[19:41:04]">&lt;theruran&gt;</a></span><span class="message">again, it's not necessarily something I have the time to track down. but it is frustrating to run into this stuff and also not know the cause</span></div><div class="line" id="200204"><span class="nick" style="color:#6b8072"><a href="#200204" label="[20:02:04]">&lt;stikonas[m]&gt;</a></span><span class="message">PIC in assembly is done by using relative displacements</span></div><div class="line" id="200248"><span class="nick" style="color:#6b8072"><a href="#200248" label="[20:02:48]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. load label 64 bytes ahead rather than load address 0x612345</span></div><div class="line" id="200939"><span class="nick" style="color:#6d2462"><a href="#200939" label="[20:09:39]">&lt;muurkha&gt;</a></span><span class="message">usually assemblers do this for you though</span></div><div class="line" id="201025"><span class="nick" style="color:#6d2462"><a href="#201025" label="[20:10:25]">&lt;muurkha&gt;</a></span><span class="message">like, you don't have to put &quot;64&quot; in your assembly code, or even &quot;0x612345&quot;; you just put a label in there, and the assembler (or linker!) does the math</span></div><div class="line" id="201107"><span class="nick" style="color:#6d2462"><a href="#201107" label="[20:11:07]">&lt;muurkha&gt;</a></span><span class="message">not sure how Jitawa handles its code generation, but it's common for JITs to have a relocation layer that does the analogous thing</span></div><div class="line" id="201735"><span class="nick" style="color:#389600"><a href="#201735" label="[20:17:35]">&lt;stikonas&gt;</a></span><span class="message">well, at least on x86_64 you do need some work, e.g. you need to specify mov rax, [rip+label] (note rip+) part</span></div><div class="line" id="202910"><span class="nick" style="color:#6d2462"><a href="#202910" label="[20:29:10]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's true.  but I think amd64 is atypical here.  people with broader experience like oriansj can correct me</span></div><br /></div></body></html>