<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="024450"><span class="nick" style="color:#8dd3c7"><a href="#024450" label="[02:44:50]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Got a reply. He would be happy to license it under GPLv3.</span></div><div class="line" id="031450"><span class="nick" style="color:#2e2a4a"><a href="#031450" label="[03:14:50]">&lt;fossy&gt;</a></span><span class="message">siraben: :)</span></div><div class="line" id="031848"><span class="nick" style="color:#8dd3c7"><a href="#031848" label="[03:18:48]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/blynn/compiler/commit/42ff37bc98c8b6e9d4fb34510e804d6cfea25d33">https://github.com/blynn/compiler/commit/42ff37bc98c8b6e9d4fb34510e804d6cfea25d33</a> </span></div><div class="line" id="032338"><span class="nick" style="color:#6b8072"><a href="#032338" label="[03:23:38]">&lt;OriansJ&gt;</a></span><span class="message">siraben: excellent</span></div><div class="line" id="033420"><span class="nick" style="color:#6b8072"><a href="#033420" label="[03:34:20]">&lt;OriansJ&gt;</a></span><span class="message">the first steps are likely put vm.c into something M2-Planet can compile.</span></div><div class="line" id="033449"><span class="nick" style="color:#2e2a4a"><a href="#033449" label="[03:34:49]">&lt;fossy&gt;</a></span><span class="message">i do not believe that will be hard</span></div><div class="line" id="033511"><span class="nick" style="color:#6b8072"><a href="#033511" label="[03:35:11]">&lt;OriansJ&gt;</a></span><span class="message">well the enums we can replace with constants</span></div><div class="line" id="033514"><span class="nick" style="color:#8dd3c7"><a href="#033514" label="[03:35:14]">&lt;siraben&gt;</a></span><span class="message">Does M2-Planet have goto?</span></div><div class="line" id="033519"><span class="nick" style="color:#2e2a4a"><a href="#033519" label="[03:35:19]">&lt;fossy&gt;</a></span><span class="message">yes iirc</span></div><div class="line" id="033540"><span class="nick" style="color:#6b8072"><a href="#033540" label="[03:35:40]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes but not typedef; so those will need to be expanded</span></div><div class="line" id="033554"><span class="nick" style="color:#2e2a4a"><a href="#033554" label="[03:35:54]">&lt;fossy&gt;</a></span><span class="message">the main things it dosen't have is switch, static, inline that vm.c uses</span></div><div class="line" id="033556"><span class="nick" style="color:#6b8072"><a href="#033556" label="[03:35:56]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet will tell you when it hits something it doesn't understand</span></div><div class="line" id="033557"><span class="nick" style="color:#8dd3c7"><a href="#033557" label="[03:35:57]">&lt;siraben&gt;</a></span><span class="message">What about `void loadRaw(u (*get)())`</span></div><div class="line" id="033604"><span class="nick" style="color:#8dd3c7"><a href="#033604" label="[03:36:04]">&lt;siraben&gt;</a></span><span class="message">Taking a function pointer as an arg</span></div><div class="line" id="033638"><span class="nick" style="color:#6b8072"><a href="#033638" label="[03:36:38]">&lt;OriansJ&gt;</a></span><span class="message">siraben: use FUNCTION</span></div><div class="line" id="033645"><span class="nick" style="color:#2e2a4a"><a href="#033645" label="[03:36:45]">&lt;fossy&gt;</a></span><span class="message">that's a thing?</span></div><div class="line" id="033647"><span class="nick" style="color:#2e2a4a"><a href="#033647" label="[03:36:47]">&lt;fossy&gt;</a></span><span class="message">TIL</span></div><div class="line" id="033702"><span class="nick" style="color:#8dd3c7"><a href="#033702" label="[03:37:02]">&lt;siraben&gt;</a></span><span class="message">Ok, so the `run` function would look a bit different because of lack of switch</span></div><div class="line" id="033703"><span class="nick" style="color:#6b8072"><a href="#033703" label="[03:37:03]">&lt;OriansJ&gt;</a></span><span class="message">it would be written as void loadRaw(FUNCTION get)</span></div><div class="line" id="033724"><span class="nick" style="color:#2e2a4a"><a href="#033724" label="[03:37:24]">&lt;fossy&gt;</a></span><span class="message">OriansJ: does it support ternary operator?</span></div><div class="line" id="033727"><span class="nick" style="color:#2e2a4a"><a href="#033727" label="[03:37:27]">&lt;fossy&gt;</a></span><span class="message">i don't remember that one either</span></div><div class="line" id="033738"><span class="nick" style="color:#8dd3c7"><a href="#033738" label="[03:37:38]">&lt;siraben&gt;</a></span><span class="message">We may have some &quot;trusting trust&quot; style issues with <a rel="nofollow" href="https://github.com/blynn/compiler/blob/42ff37bc98c8b6e9d4fb34510e804d6cfea25d33/vm.c#L281">https://github.com/blynn/compiler/blob/42ff37bc98c8b6e9d4fb34510e804d6cfea25d33/vm.c#L281</a> </span></div><div class="line" id="033750"><span class="nick" style="color:#6b8072"><a href="#033750" label="[03:37:50]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not officially in C but if you look in M2-Planet's gcc_req.h how it can be made compatible</span></div><div class="line" id="033756"><span class="nick" style="color:#8dd3c7"><a href="#033756" label="[03:37:56]">&lt;siraben&gt;</a></span><span class="message">However the readable source is in the comments, so someone motivated enough could hand-compile</span></div><div class="line" id="033756"><span class="nick" style="color:#2e2a4a"><a href="#033756" label="[03:37:56]">&lt;fossy&gt;</a></span><span class="message">OriansJ: righto</span></div><div class="line" id="033815"><span class="nick" style="color:#2e2a4a"><a href="#033815" label="[03:38:15]">&lt;fossy&gt;</a></span><span class="message">siraben: isn't hand-compiling the option given by blynn in his docs, iirc?</span></div><div class="line" id="033825"><span class="nick" style="color:#6b8072"><a href="#033825" label="[03:38:25]">&lt;OriansJ&gt;</a></span><span class="message">fossy: if you mean bool ? a : b; no just convert to if statement</span></div><div class="line" id="033832"><span class="nick" style="color:#8dd3c7"><a href="#033832" label="[03:38:32]">&lt;siraben&gt;</a></span><span class="message">fossy: Yes.</span></div><div class="line" id="033843"><span class="nick" style="color:#2e2a4a"><a href="#033843" label="[03:38:43]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah that's what i meant, that's scattered through vm.c as well</span></div><div class="line" id="033905"><span class="nick" style="color:#2e2a4a"><a href="#033905" label="[03:39:05]">&lt;fossy&gt;</a></span><span class="message">siraben: i believe that is fine as long as mescc-tools-seed/gcc-seed/whatever else appropriatly informs the user that they should do this</span></div><div class="line" id="033916"><span class="nick" style="color:#2e2a4a"><a href="#033916" label="[03:39:16]">&lt;fossy&gt;</a></span><span class="message">and validate the results match up</span></div><div class="line" id="033958"><span class="nick" style="color:#2e2a4a"><a href="#033958" label="[03:39:58]">&lt;fossy&gt;</a></span><span class="message">alternatively, we can write a compiler for that in M2-Planet, but I don't think it's very beneficial at the moment, especially given the (relative) ease of hand-compilation</span></div><div class="line" id="034007"><span class="nick" style="color:#6b8072"><a href="#034007" label="[03:40:07]">&lt;OriansJ&gt;</a></span><span class="message">well it looks like vm.c is a sort of haskell version of Lisp's SECD</span></div><div class="line" id="034010"><span class="nick" style="color:#8dd3c7"><a href="#034010" label="[03:40:10]">&lt;siraben&gt;</a></span><span class="message">Ok. Also only certain combinators perform side effects, so a term such as `BCT` is completely pure.</span></div><div class="line" id="034105"><span class="nick" style="color:#2e2a4a"><a href="#034105" label="[03:41:05]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="034109"><span class="nick" style="color:#8dd3c7"><a href="#034109" label="[03:41:09]">&lt;siraben&gt;</a></span><span class="message">Looks like vm.c has multiline strings too</span></div><div class="line" id="034111"><span class="nick" style="color:#80b1d3"><a href="#034111" label="[03:41:11]">*</a></span><span class="message">fossy google lip secd</span></div><div class="line" id="034119"><span class="nick" style="color:#8dd3c7"><a href="#034119" label="[03:41:19]">&lt;siraben&gt;</a></span><span class="message">TIL that &quot;a&quot; &quot;b&quot; is valid</span></div><div class="line" id="034120"><span class="nick" style="color:#6b8072"><a href="#034120" label="[03:41:20]">&lt;OriansJ&gt;</a></span><span class="message">fossy: hand compile with a shitload of comments as it looks like it is object code</span></div><div class="line" id="034145"><span class="nick" style="color:#2e2a4a"><a href="#034145" label="[03:41:45]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yes, someone should essentially write up the steps of hand compiling it</span></div><div class="line" id="034206"><span class="nick" style="color:#6b8072"><a href="#034206" label="[03:42:06]">&lt;OriansJ&gt;</a></span><span class="message">assuming the VM supports comments in its input files</span></div><div class="line" id="034217"><span class="nick" style="color:#6b8072"><a href="#034217" label="[03:42:17]">&lt;OriansJ&gt;</a></span><span class="message">otherwise we might need to hack it in</span></div><div class="line" id="034247"><span class="nick" style="color:#8dd3c7"><a href="#034247" label="[03:42:47]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/lambda/sk.html">https://crypto.stanford.edu/~blynn/lambda/sk.html</a> </span></div><div class="line" id="034253"><span class="nick" style="color:#2e2a4a"><a href="#034253" label="[03:42:53]">&lt;fossy&gt;</a></span><span class="message">OriansJ: well, the sk for everything to a haskell compiler is in vm.c</span></div><div class="line" id="034306"><span class="nick" style="color:#2e2a4a"><a href="#034306" label="[03:43:06]">&lt;fossy&gt;</a></span><span class="message">then after that it's all haskell</span></div><div class="line" id="034322"><span class="nick" style="color:#2e2a4a"><a href="#034322" label="[03:43:22]">&lt;fossy&gt;</a></span><span class="message">(which is then run by vm)</span></div><div class="line" id="034343"><span class="nick" style="color:#2e2a4a"><a href="#034343" label="[03:43:43]">&lt;fossy&gt;</a></span><span class="message">&quot;We have upgraded our previous parser to support comments, whitespace, and variables consisting of lowercase letters.&quot;</span></div><div class="line" id="034422"><span class="nick" style="color:#6b8072"><a href="#034422" label="[03:44:22]">&lt;OriansJ&gt;</a></span><span class="message">and the default make is  broken in terms of dependency chain but easy to fix.</span></div><div class="line" id="034432"><span class="nick" style="color:#2e2a4a"><a href="#034432" label="[03:44:32]">&lt;fossy&gt;</a></span><span class="message">well make precisely works</span></div><div class="line" id="034441"><span class="nick" style="color:#2e2a4a"><a href="#034441" label="[03:44:41]">&lt;fossy&gt;</a></span><span class="message">so just all: precisely should be fine</span></div><div class="line" id="034451"><span class="nick" style="color:#6b8072"><a href="#034451" label="[03:44:51]">&lt;OriansJ&gt;</a></span><span class="message">(as git clone, followed by make doesn't result in anything but an error)</span></div><div class="line" id="034525"><span class="nick" style="color:#6b8072"><a href="#034525" label="[03:45:25]">&lt;OriansJ&gt;</a></span><span class="message">no make all target either.</span></div><div class="line" id="034544"><span class="nick" style="color:#2e2a4a"><a href="#034544" label="[03:45:44]">&lt;fossy&gt;</a></span><span class="message">idk why it hardcodes clang -O3 in there either</span></div><div class="line" id="034553"><span class="nick" style="color:#6b8072"><a href="#034553" label="[03:45:53]">&lt;OriansJ&gt;</a></span><span class="message">easy to fix</span></div><div class="line" id="034557"><span class="nick" style="color:#2e2a4a"><a href="#034557" label="[03:45:57]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="034611"><span class="nick" style="color:#6b8072"><a href="#034611" label="[03:46:11]">&lt;OriansJ&gt;</a></span><span class="message">also seems to not pay attention to where it builds things either</span></div><div class="line" id="034619"><span class="nick" style="color:#8dd3c7"><a href="#034619" label="[03:46:19]">&lt;siraben&gt;</a></span><span class="message">without optimization enabled it runs much slower</span></div><div class="line" id="034629"><span class="nick" style="color:#2e2a4a"><a href="#034629" label="[03:46:29]">&lt;fossy&gt;</a></span><span class="message">i was doing it with O2</span></div><div class="line" id="034652"><span class="nick" style="color:#8dd3c7"><a href="#034652" label="[03:46:52]">&lt;siraben&gt;</a></span><span class="message">Looks like it uses malloc for the heap, but we could use a static buffer right? `mem = malloc(TOP * sizeof(u)); altmem = malloc(TOP * sizeof(u));`</span></div><div class="line" id="034700"><span class="nick" style="color:#6b8072"><a href="#034700" label="[03:47:00]">&lt;OriansJ&gt;</a></span><span class="message">needs to be updated to put binaries in bin, so that it'll be easier to do make install later on</span></div><div class="line" id="034704"><span class="nick" style="color:#2e2a4a"><a href="#034704" label="[03:47:04]">&lt;fossy&gt;</a></span><span class="message">M2-Planet supports malloc</span></div><div class="line" id="034729"><span class="nick" style="color:#6b8072"><a href="#034729" label="[03:47:29]">&lt;OriansJ&gt;</a></span><span class="message">siraben: malloc and calloc work perfectly (free however is a nop)</span></div><div class="line" id="034751"><span class="nick" style="color:#2e2a4a"><a href="#034751" label="[03:47:51]">&lt;fossy&gt;</a></span><span class="message">also make clean is buggy</span></div><div class="line" id="034833"><span class="nick" style="color:#6b8072"><a href="#034833" label="[03:48:33]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet also treats # as a line comment and drops //; so that it becomes trivial to mix #defines and //CONSTANT statements</span></div><div class="line" id="035028"><span class="nick" style="color:#6b8072"><a href="#035028" label="[03:50:28]">&lt;OriansJ&gt;</a></span><span class="message">also all of the files need proper GPLv3 license headers with correct copyright dates with authorship given to  Avatar</span></div><div class="line" id="035037"><span class="nick" style="color:#2e2a4a"><a href="#035037" label="[03:50:37]">&lt;fossy&gt;</a></span><span class="message">Avatar?</span></div><div class="line" id="035039"><span class="nick" style="color:#6b8072"><a href="#035039" label="[03:50:39]">&lt;OriansJ&gt;</a></span><span class="message">damn copy and paste</span></div><div class="line" id="035041"><span class="nick" style="color:#6b8072"><a href="#035041" label="[03:50:41]">&lt;OriansJ&gt;</a></span><span class="message">I ment  Avatar</span></div><div class="line" id="035042"><span class="nick" style="color:#2e2a4a"><a href="#035042" label="[03:50:42]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="035043"><span class="nick" style="color:#6b8072"><a href="#035043" label="[03:50:43]">&lt;OriansJ&gt;</a></span><span class="message">Ben Lynn</span></div><div class="line" id="035055"><span class="nick" style="color:#8dd3c7"><a href="#035055" label="[03:50:55]">&lt;siraben&gt;</a></span><span class="message">At the typically stage, <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/type.html">https://crypto.stanford.edu/~blynn/compiler/type.html</a>  , the assembler is moved from C to Haskell</span></div><div class="line" id="035108"><span class="nick" style="color:#2e2a4a"><a href="#035108" label="[03:51:08]">&lt;fossy&gt;</a></span><span class="message">oh shit yeah</span></div><div class="line" id="035127"><span class="nick" style="color:#2e2a4a"><a href="#035127" label="[03:51:27]">&lt;fossy&gt;</a></span><span class="message">the stages before that have to be chnaged to generate m2-planet compatible c</span></div><div class="line" id="035142"><span class="nick" style="color:#8dd3c7"><a href="#035142" label="[03:51:42]">&lt;siraben&gt;</a></span><span class="message">Ah no problem because it generates ION assembly</span></div><div class="line" id="035146"><span class="nick" style="color:#8dd3c7"><a href="#035146" label="[03:51:46]">&lt;siraben&gt;</a></span><span class="message">which is parsed by vm.c</span></div><div class="line" id="035253"><span class="nick" style="color:#6b8072"><a href="#035253" label="[03:52:53]">&lt;OriansJ&gt;</a></span><span class="message">but before we get too far down the road; get proper license headers into all of the files</span></div><div class="line" id="035323"><span class="nick" style="color:#6b8072"><a href="#035323" label="[03:53:23]">&lt;OriansJ&gt;</a></span><span class="message">use the commit year of the files and credit Ben Lynn as the author</span></div><div class="line" id="035349"><span class="nick" style="color:#6b8072"><a href="#035349" label="[03:53:49]">&lt;OriansJ&gt;</a></span><span class="message">make it a pull request so that he doesn't have to do the work</span></div><div class="line" id="035500"><span class="nick" style="color:#8dd3c7"><a href="#035500" label="[03:55:00]">&lt;siraben&gt;</a></span><span class="message">Alright</span></div><div class="line" id="035501"><span class="nick" style="color:#6b8072"><a href="#035501" label="[03:55:01]">&lt;OriansJ&gt;</a></span><span class="message">Fix up the make file, so that new people can just do make {clean,test,all} and get the desired working results</span></div><div class="line" id="035547"><span class="nick" style="color:#6b8072"><a href="#035547" label="[03:55:47]">&lt;OriansJ&gt;</a></span><span class="message">then after he merges all that; we can start going after vm.c</span></div><div class="line" id="035630"><span class="nick" style="color:#8dd3c7"><a href="#035630" label="[03:56:30]">&lt;siraben&gt;</a></span><span class="message">Sounds good, glad to see you guys are on board with using his work :)</span></div><div class="line" id="035658"><span class="nick" style="color:#6b8072"><a href="#035658" label="[03:56:58]">&lt;OriansJ&gt;</a></span><span class="message">I'll probably have to add some time primitives to M2-Planet's library set but that is something we can stub around until I do it right and have deesix help me get it working on AArch64 as well</span></div><div class="line" id="035708"><span class="nick" style="color:#8dd3c7"><a href="#035708" label="[03:57:08]">&lt;siraben&gt;</a></span><span class="message">OriansJ: did you see the proposed bootstrapping phases I wrote?</span></div><div class="line" id="035752"><span class="nick" style="color:#8dd3c7"><a href="#035752" label="[03:57:52]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/siraben/compiler/tree/lispy/descriptions">https://github.com/siraben/compiler/tree/lispy/descriptions</a> </span></div><div class="line" id="035808"><span class="nick" style="color:#6b8072"><a href="#035808" label="[03:58:08]">&lt;OriansJ&gt;</a></span><span class="message">siraben: not yet; as I was waiting until after the proper license incase we needed to do a clean room implementation.</span></div><div class="line" id="035825"><span class="nick" style="color:#8dd3c7"><a href="#035825" label="[03:58:25]">&lt;siraben&gt;</a></span><span class="message">Ah, I see. Is it ok now?</span></div><div class="line" id="035845"><span class="nick" style="color:#6b8072"><a href="#035845" label="[03:58:45]">&lt;OriansJ&gt;</a></span><span class="message">yes</span></div><div class="line" id="040008"><span class="nick" style="color:#6b8072"><a href="#040008" label="[04:00:08]">&lt;OriansJ&gt;</a></span><span class="message">the individual license headers is just GNU standard practice to reduce future license confusion issues.</span></div><div class="line" id="040021"><span class="nick" style="color:#8dd3c7"><a href="#040021" label="[04:00:21]">&lt;siraben&gt;</a></span><span class="message">Right.</span></div><div class="line" id="040443"><span class="nick" style="color:#6b8072"><a href="#040443" label="[04:04:43]">&lt;OriansJ&gt;</a></span><span class="message">plus the rewriting of vm.c into M2-Planet will give us a great chance to make it as clean and easy to understand as possible.</span></div><div class="line" id="040541"><span class="nick" style="color:#6b8072"><a href="#040541" label="[04:05:41]">&lt;OriansJ&gt;</a></span><span class="message">and perhaps even speed up the primitives a bit</span></div><div class="line" id="040749"><span class="nick" style="color:#8dd3c7"><a href="#040749" label="[04:07:49]">&lt;siraben&gt;</a></span><span class="message">Yes.</span></div><div class="line" id="041233"><span class="nick" style="color:#2e2a4a"><a href="#041233" label="[04:12:33]">&lt;fossy&gt;</a></span><span class="message">We can try but by the looks of it ben Lynn optimized the hell out of it by the docs on his website</span></div><div class="line" id="041324"><span class="nick" style="color:#6b8072"><a href="#041324" label="[04:13:24]">&lt;OriansJ&gt;</a></span><span class="message">fossy: nothing teaches you more about slow C than a bad C compiler</span></div><div class="line" id="041332"><span class="nick" style="color:#2e2a4a"><a href="#041332" label="[04:13:32]">&lt;fossy&gt;</a></span><span class="message">^.^</span></div><div class="line" id="041354"><span class="nick" style="color:#6b8072"><a href="#041354" label="[04:13:54]">&lt;OriansJ&gt;</a></span><span class="message">and M2-Planet is slow</span></div><div class="line" id="041456"><span class="nick" style="color:#6b8072"><a href="#041456" label="[04:14:56]">&lt;OriansJ&gt;</a></span><span class="message">worst case, we just make it cleaner.</span></div><div class="line" id="041545"><span class="nick" style="color:#6b8072"><a href="#041545" label="[04:15:45]">&lt;OriansJ&gt;</a></span><span class="message">and much more structured and documented</span></div><div class="line" id="041743"><span class="nick" style="color:#8dd3c7"><a href="#041743" label="[04:17:43]">&lt;siraben&gt;</a></span><span class="message">It wouldn't be too difficult to translate this into assembly as well</span></div><div class="line" id="041805"><span class="nick" style="color:#6b8072"><a href="#041805" label="[04:18:05]">&lt;OriansJ&gt;</a></span><span class="message">I'll take a crack at vm.c tomorrow; hopefully it doesn't take too much to get it working in M2-Planet. I leave the header and make work to anyone who wants to get it done tonight.</span></div><div class="line" id="041838"><span class="nick" style="color:#8dd3c7"><a href="#041838" label="[04:18:38]">&lt;siraben&gt;</a></span><span class="message">Sounds good. I can do the header work.</span></div><div class="line" id="041855"><span class="nick" style="color:#6b8072"><a href="#041855" label="[04:18:55]">&lt;OriansJ&gt;</a></span><span class="message">sounds good to me</span></div><div class="line" id="041900"><span class="nick" style="color:#6b8072"><a href="#041900" label="[04:19:00]">&lt;OriansJ&gt;</a></span><span class="message">does  blynn /</span></div><div class="line" id="041942"><span class="nick" style="color:#6b8072"><a href="#041942" label="[04:19:42]">&lt;OriansJ&gt;</a></span><span class="message">blynn-compiler sound like a proper program name for the license header?</span></div><div class="line" id="042052"><span class="nick" style="color:#6b8072"><a href="#042052" label="[04:20:52]">&lt;OriansJ&gt;</a></span><span class="message">(here is a file with an example license header: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/makefile">https://github.com/oriansj/mescc-tools-seed/blob/master/makefile</a>  )</span></div><div class="line" id="042153"><span class="nick" style="color:#6b8072"><a href="#042153" label="[04:21:53]">&lt;OriansJ&gt;</a></span><span class="message">just replace the Mes with what name you think appropriate and remove the or later bit of the license as we haven't gotten his approval for that</span></div><div class="line" id="042317"><span class="nick" style="color:#6b8072"><a href="#042317" label="[04:23:17]">&lt;OriansJ&gt;</a></span><span class="message">good night everyone. look forward to the changes</span></div><div class="line" id="043808"><span class="nick" style="color:#2e2a4a"><a href="#043808" label="[04:38:08]">&lt;fossy&gt;</a></span><span class="message">OriansJ: well it looks significantly easier than (say) mes or tcc, lol</span></div><div class="line" id="043827"><span class="nick" style="color:#2e2a4a"><a href="#043827" label="[04:38:27]">&lt;fossy&gt;</a></span><span class="message">siraben: wont we need to adjust lonely and some others to produce m2-compilable c</span></div><div class="line" id="044216"><span class="nick" style="color:#8dd3c7"><a href="#044216" label="[04:42:16]">&lt;siraben&gt;</a></span><span class="message">fossy: This is if we wanted to port his Haskell bootstrap completely. I'm targeting the earlier stages that generate ION assembly.</span></div><div class="line" id="044755"><span class="nick" style="color:#8dd3c7"><a href="#044755" label="[04:47:55]">&lt;siraben&gt;</a></span><span class="message">I'll draft up another possible bootstrapping plan to MES that might be easier, actually.</span></div><div class="line" id="045359"><span class="nick" style="color:#2e2a4a"><a href="#045359" label="[04:53:59]">&lt;fossy&gt;</a></span><span class="message">siraben: ahha</span></div><div class="line" id="045505"><span class="nick" style="color:#2e2a4a"><a href="#045505" label="[04:55:05]">&lt;fossy&gt;</a></span><span class="message">do you mind making a .dot or some visual that would show how we would get from m2-planet to tcc or mes or gcc or whatever we currently have?</span></div><div class="line" id="045722"><span class="nick" style="color:#8dd3c7"><a href="#045722" label="[04:57:22]">&lt;siraben&gt;</a></span><span class="message">Ah, I have it written down, let me send</span></div><div class="line" id="100301"><span class="nick" style="color:#80b1d3"><a href="#100301" label="[10:03:01]">*</a></span><span class="message">siraben uploaded an image: mes-haskell.png (86KiB) &lt; <a rel="nofollow" href="https://matrix.org/_matrix/media/r0/download/matrix.org/nwdEVyRliTQrRflfFbrhEZdn/mes-haskell.png">https://matrix.org/_matrix/media/r0/download/matrix.org/nwdEVyRliTQrRflfFbrhEZdn/mes-haskell.png</a>  &gt;</span></div><div class="line" id="100307"><span class="nick" style="color:#8dd3c7"><a href="#100307" label="[10:03:07]">&lt;siraben&gt;</a></span><span class="message">fossy:  ^</span></div><div class="line" id="130911"><span class="nick" style="color:#8dd3c7"><a href="#130911" label="[13:09:11]">&lt;siraben&gt;</a></span><span class="message">Also, what's the right notation for this sort of thing? <a rel="nofollow" href="https://en.wikipedia.org/wiki/Tombstone_diagram">https://en.wikipedia.org/wiki/Tombstone_diagram</a>  ?</span></div><div class="line" id="143812"><span class="nick" style="color:#6b8072"><a href="#143812" label="[14:38:12]">&lt;OriansJ&gt;</a></span><span class="message">siraben: we have been using this: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a>  (or if you prefer .dot form: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.dot">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.dot</a>) </span></div><div class="line" id="143836"><span class="nick" style="color:#6b8072"><a href="#143836" label="[14:38:36]">&lt;OriansJ&gt;</a></span><span class="message">nice drawing by the way siraben</span></div><div class="line" id="144037"><span class="nick" style="color:#8dd3c7"><a href="#144037" label="[14:40:37]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Thanks!</span></div><div class="line" id="144130"><span class="nick" style="color:#8dd3c7"><a href="#144130" label="[14:41:30]">&lt;siraben&gt;</a></span><span class="message">So where would this fit? Between mescc and mescc?</span></div><div class="line" id="144136"><span class="nick" style="color:#8dd3c7"><a href="#144136" label="[14:41:36]">&lt;siraben&gt;</a></span><span class="message">oops, mescc and mes-m2</span></div><div class="line" id="144249"><span class="nick" style="color:#6b8072"><a href="#144249" label="[14:42:49]">&lt;OriansJ&gt;</a></span><span class="message">depends on if you plan on using mes-m2 or just M2-Planet</span></div><div class="line" id="144421"><span class="nick" style="color:#6b8072"><a href="#144421" label="[14:44:21]">&lt;OriansJ&gt;</a></span><span class="message">as writing a scheme that MesCC can run upon was the goal of mes-m2</span></div><div class="line" id="144451"><span class="nick" style="color:#6b8072"><a href="#144451" label="[14:44:51]">&lt;OriansJ&gt;</a></span><span class="message">and vm.c would depend entirely on M2-Planet</span></div><div class="line" id="160647"><span class="nick" style="color:#6b8072"><a href="#160647" label="[16:06:47]">&lt;OriansJ&gt;</a></span><span class="message">it also looks like we could seperate the tests from the vm.c as well</span></div><div class="line" id="163004"><span class="nick" style="color:#6b8072"><a href="#163004" label="[16:30:04]">&lt;OriansJ&gt;</a></span><span class="message">interesting the typedef unsigned u; hid a warning when compiling with gcc.</span></div><div class="line" id="163932"><span class="nick" style="color:#6b8072"><a href="#163932" label="[16:39:32]">&lt;OriansJ&gt;</a></span><span class="message">weird duplication of functions with the same contents but different names</span></div><div class="line" id="170620"><span class="nick" style="color:#6b8072"><a href="#170620" label="[17:06:20]">&lt;OriansJ&gt;</a></span><span class="message">looks like it would be trivial to pull out the need for a clock function: <a rel="nofollow" href="http://paste.debian.net/1172546/">http://paste.debian.net/1172546/</a> </span></div><div class="line" id="170712"><span class="nick" style="color:#6b8072"><a href="#170712" label="[17:07:12]">&lt;OriansJ&gt;</a></span><span class="message">I did some minor refactoring: <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler">https://github.com/oriansj/blynn-compiler</a> </span></div><div class="line" id="171748"><span class="nick" style="color:#8dd3c7"><a href="#171748" label="[17:17:48]">&lt;siraben&gt;</a></span><span class="message">OriansJ: So it bridges M2-planet and mescc?</span></div><div class="line" id="171835"><span class="nick" style="color:#8dd3c7"><a href="#171835" label="[17:18:35]">&lt;siraben&gt;</a></span><span class="message">I see you found my commit where I added license headers, haha</span></div><div class="line" id="172318"><span class="nick" style="color:#6b8072"><a href="#172318" label="[17:23:18]">&lt;OriansJ&gt;</a></span><span class="message">correct</span></div><div class="line" id="172338"><span class="nick" style="color:#6b8072"><a href="#172338" label="[17:23:38]">&lt;OriansJ&gt;</a></span><span class="message">as M2-Planet can be bootstrapped from nothing and MesCC can bootstrap GCC</span></div><div class="line" id="172427"><span class="nick" style="color:#6b8072"><a href="#172427" label="[17:24:27]">&lt;OriansJ&gt;</a></span><span class="message">the big problem there is mes.c includes C features that M2-Planet doesn't support and it was hard to debug.</span></div><div class="line" id="172542"><span class="nick" style="color:#6b8072"><a href="#172542" label="[17:25:42]">&lt;OriansJ&gt;</a></span><span class="message">I spent 6months trying to get mes.c into a shape that could be built via M2-Planet before I gave up and started trying to expand a lisp that M2-Planet could build into one that could run MesCC</span></div><div class="line" id="172614"><span class="nick" style="color:#6b8072"><a href="#172614" label="[17:26:14]">&lt;OriansJ&gt;</a></span><span class="message">Then I had a kid and development effort kinda took a bit of a hit</span></div><div class="line" id="172751"><span class="nick" style="color:#6b8072"><a href="#172751" label="[17:27:51]">&lt;OriansJ&gt;</a></span><span class="message">no one really worked on either the more M2-Planet friendly mes.c nor mes-m2 while I was out</span></div><div class="line" id="173117"><span class="nick" style="color:#6b8072"><a href="#173117" label="[17:31:17]">&lt;OriansJ&gt;</a></span><span class="message">as MesCC was having trouble porting to new architectures, I started on <a rel="nofollow" href="https://github.com/oriansj/M3-meteoroid">https://github.com/oriansj/M3-meteoroid</a>  to enable janneke to go to using binutils instead of mescc-tools; as The M3 series would be drop in compatibles for binutils' loader and assembler</span></div><div class="line" id="173152"><span class="nick" style="color:#6b8072"><a href="#173152" label="[17:31:52]">&lt;OriansJ&gt;</a></span><span class="message">I just haven't had time to finish it yet</span></div><div class="line" id="174142"><span class="nick" style="color:#6b8072"><a href="#174142" label="[17:41:42]">&lt;OriansJ&gt;</a></span><span class="message">Perhaps I made things too complicated and no one could figure out my mess and I should have spent more time making mes-m2 and mes.c easier to understand.</span></div><div class="line" id="183106"><span class="nick" style="color:#6b8072"><a href="#183106" label="[18:31:06]">&lt;OriansJ&gt;</a></span><span class="message">ok and with the latest commit, it is now having a single standard FUNCTION pointer type</span></div><div class="line" id="183637"><span class="nick" style="color:#8dd3c7"><a href="#183637" label="[18:36:37]">&lt;siraben&gt;</a></span><span class="message">Nice. Does it still build?</span></div><div class="line" id="184426"><span class="nick" style="color:#80b1d3"><a href="#184426" label="[18:44:26]">*</a></span><span class="message">siraben uploaded an image: mes-haskell-graphviz.png (225KiB) &lt; <a rel="nofollow" href="https://matrix.org/_matrix/media/r0/download/matrix.org/MZSAPLNCAeXsEVqsHAIfPHpX/mes-haskell-graphviz.png">https://matrix.org/_matrix/media/r0/download/matrix.org/MZSAPLNCAeXsEVqsHAIfPHpX/mes-haskell-graphviz.png</a>  &gt;</span></div><div class="line" id="184432"><span class="nick" style="color:#8dd3c7"><a href="#184432" label="[18:44:32]">&lt;siraben&gt;</a></span><span class="message">updated to see how blynn-compiler fits in</span></div><div class="line" id="184532"><span class="nick" style="color:#6b8072"><a href="#184532" label="[18:45:32]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes; simply cc vm.c -o vm &amp;&amp; ./vm &gt;| raw &amp;&amp; sha256sum raw</span></div><div class="line" id="184556"><span class="nick" style="color:#6b8072"><a href="#184556" label="[18:45:56]">&lt;OriansJ&gt;</a></span><span class="message">prior to any of my changes the output was 9732a8852bf92b4097f275da4ceba3b718138a5e16190cbef43bbd4be42a27dd and it still is that output</span></div><div class="line" id="184612"><span class="nick" style="color:#8dd3c7"><a href="#184612" label="[18:46:12]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Where `cc` is GCC?</span></div><div class="line" id="184637"><span class="nick" style="color:#6b8072"><a href="#184637" label="[18:46:37]">&lt;OriansJ&gt;</a></span><span class="message">or clang but yes</span></div><div class="line" id="184644"><span class="nick" style="color:#8dd3c7"><a href="#184644" label="[18:46:44]">&lt;siraben&gt;</a></span><span class="message">Ok</span></div><div class="line" id="184749"><span class="nick" style="color:#6b8072"><a href="#184749" label="[18:47:49]">&lt;OriansJ&gt;</a></span><span class="message">I'd figure blynn-compiler depends upon both M2-Planet and mes-m2 and would be used to build a scheme; which gash and MesCC would run upon.</span></div><div class="line" id="184819"><span class="nick" style="color:#8dd3c7"><a href="#184819" label="[18:48:19]">&lt;siraben&gt;</a></span><span class="message">How does M2-Planet differ from mes-m2?</span></div><div class="line" id="184821"><span class="nick" style="color:#6b8072"><a href="#184821" label="[18:48:21]">&lt;OriansJ&gt;</a></span><span class="message">unless our goal is to compile MesCC into a binary that runs natively</span></div><div class="line" id="184843"><span class="nick" style="color:#6b8072"><a href="#184843" label="[18:48:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: M2-Planet is a C compiler; mes-m2 is a scheme written in the C subset that M2-Planet supports</span></div><div class="line" id="184903"><span class="nick" style="color:#6b8072"><a href="#184903" label="[18:49:03]">&lt;OriansJ&gt;</a></span><span class="message">(scheme interpreter to be precise)</span></div><div class="line" id="184910"><span class="nick" style="color:#8dd3c7"><a href="#184910" label="[18:49:10]">&lt;siraben&gt;</a></span><span class="message">Ah so I should add an array from blynn-compiler to M2-Planet</span></div><div class="line" id="184945"><span class="nick" style="color:#6b8072"><a href="#184945" label="[18:49:45]">&lt;OriansJ&gt;</a></span><span class="message">as vm.c would need to be built by M2-Planet in order to exist in the bootstrap</span></div><div class="line" id="185034"><span class="nick" style="color:#80b1d3"><a href="#185034" label="[18:50:34]">*</a></span><span class="message">siraben uploaded an image: mes-haskell-graphviz.png (66KiB) &lt; <a rel="nofollow" href="https://matrix.org/_matrix/media/r0/download/matrix.org/RCYVKsGafwFNIfSlBvyIwFTz/mes-haskell-graphviz.png">https://matrix.org/_matrix/media/r0/download/matrix.org/RCYVKsGafwFNIfSlBvyIwFTz/mes-haskell-graphviz.png</a>  &gt;</span></div><div class="line" id="185035"><span class="nick" style="color:#8dd3c7"><a href="#185035" label="[18:50:35]">&lt;siraben&gt;</a></span><span class="message">This is correct now?</span></div><div class="line" id="185207"><span class="nick" style="color:#6b8072"><a href="#185207" label="[18:52:07]">&lt;OriansJ&gt;</a></span><span class="message">that is probably approximately correct (depending on the scheme that comes out of blynn-compiler)</span></div><div class="line" id="185255"><span class="nick" style="color:#8dd3c7"><a href="#185255" label="[18:52:55]">&lt;siraben&gt;</a></span><span class="message">It might be more nuanced with an intermediate Scheme. It's looking like it'd be easiest to write a Scheme interpreter to be compiled with blynn-compiler</span></div><div class="line" id="185324"><span class="nick" style="color:#8dd3c7"><a href="#185324" label="[18:53:24]">&lt;siraben&gt;</a></span><span class="message">Simply because I can compile the code with GHC, test and lint it.</span></div><div class="line" id="185436"><span class="nick" style="color:#6b8072"><a href="#185436" label="[18:54:36]">&lt;OriansJ&gt;</a></span><span class="message">well everything put through M2-Planet can also be put through GCC for testing and linting</span></div><div class="line" id="185534"><span class="nick" style="color:#6b8072"><a href="#185534" label="[18:55:34]">&lt;OriansJ&gt;</a></span><span class="message">but you are right, it'll probably be easier to write a scheme in Haskell than C</span></div><div class="line" id="185618"><span class="nick" style="color:#8dd3c7"><a href="#185618" label="[18:56:18]">&lt;siraben&gt;</a></span><span class="message">Right. The second plan I was thinking about was having intermediate Lisp dialects on the way to Scheme but that'd be harder to test with external tools.</span></div><div class="line" id="185623"><span class="nick" style="color:#6b8072"><a href="#185623" label="[18:56:23]">&lt;OriansJ&gt;</a></span><span class="message">Ideally we could find a proper scheme in Haskell and just convert it to the subset supported by blynn-compiler</span></div><div class="line" id="185646"><span class="nick" style="color:#8dd3c7"><a href="#185646" label="[18:56:46]">&lt;siraben&gt;</a></span><span class="message">I have one written already, <a rel="nofollow" href="https://github.com/siraben/r5rs-denot">https://github.com/siraben/r5rs-denot</a> </span></div><div class="line" id="185725"><span class="nick" style="color:#8dd3c7"><a href="#185725" label="[18:57:25]">&lt;siraben&gt;</a></span><span class="message">Well it doesn't have IO but it should be relatively easy to add IO, especially since blynn-compiller has do-notation</span></div><div class="line" id="185733"><span class="nick" style="color:#8dd3c7"><a href="#185733" label="[18:57:33]">&lt;siraben&gt;</a></span><span class="message">and the IO monad</span></div><div class="line" id="185802"><span class="nick" style="color:#6b8072"><a href="#185802" label="[18:58:02]">&lt;OriansJ&gt;</a></span><span class="message">the Hygienic macro expansion will be the hard part</span></div><div class="line" id="185818"><span class="nick" style="color:#8dd3c7"><a href="#185818" label="[18:58:18]">&lt;siraben&gt;</a></span><span class="message">Yes, I've mentioned that a few times and it's a little scary to be honest.</span></div><div class="line" id="185829"><span class="nick" style="color:#8dd3c7"><a href="#185829" label="[18:58:29]">&lt;siraben&gt;</a></span><span class="message">However, <a rel="nofollow" href="https://legacy.cs.indiana.edu/~dyb/pubs/LaSC-5-4-pp295-326.pdf">https://legacy.cs.indiana.edu/~dyb/pubs/LaSC-5-4-pp295-326.pdf</a>  should help</span></div><div class="line" id="185924"><span class="nick" style="color:#8dd3c7"><a href="#185924" label="[18:59:24]">&lt;siraben&gt;</a></span><span class="message">Doesn't need to be the linear time hygienic expansion either, the Kohlbecker algorithm (quadratic running time worst case) suffices.</span></div><div class="line" id="185933"><span class="nick" style="color:#6b8072"><a href="#185933" label="[18:59:33]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well syntax-case is the biggest bootstrapping problem in scheme right now</span></div><div class="line" id="190011"><span class="nick" style="color:#6b8072"><a href="#190011" label="[19:00:11]">&lt;OriansJ&gt;</a></span><span class="message">guile cheats using psyntax.pp and all the rest just leverage another lisp to provide syntax-case to implement syntax-case</span></div><div class="line" id="190040"><span class="nick" style="color:#6b8072"><a href="#190040" label="[19:00:40]">&lt;OriansJ&gt;</a></span><span class="message">even if we have to go to Haskell to get it done correctly; it'll be a huge win</span></div><div class="line" id="190107"><span class="nick" style="color:#8dd3c7"><a href="#190107" label="[19:01:07]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  thoughts on using <a rel="nofollow" href="http://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/">http://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/</a>  ?</span></div><div class="line" id="190109"><span class="nick" style="color:#6b8072"><a href="#190109" label="[19:01:09]">&lt;OriansJ&gt;</a></span><span class="message">about as big as bootstrapping GCC</span></div><div class="line" id="190120"><span class="nick" style="color:#8dd3c7"><a href="#190120" label="[19:01:20]">&lt;siraben&gt;</a></span><span class="message">My R5RS scheme interpreter manages to interpret that interpreter</span></div><div class="line" id="190151"><span class="nick" style="color:#8dd3c7"><a href="#190151" label="[19:01:51]">&lt;siraben&gt;</a></span><span class="message">It has a hygienic `macro` primitive</span></div><div class="line" id="190513"><span class="nick" style="color:#6b8072"><a href="#190513" label="[19:05:13]">&lt;OriansJ&gt;</a></span><span class="message">well; we can prove how close it is using ghc to build and see if MesCC runs on it (the method of testing is in mes-m2's README)</span></div><div class="line" id="190720"><span class="nick" style="color:#6b8072"><a href="#190720" label="[19:07:20]">&lt;OriansJ&gt;</a></span><span class="message">and iterate on both sides of blynn-compiler; me working up via vm.c and you working down to get your scheme working from it</span></div><div class="line" id="191635"><span class="nick" style="color:#6b8072"><a href="#191635" label="[19:16:35]">&lt;OriansJ&gt;</a></span><span class="message">now I am just slowly chipping away at incompatibilities between M2-Planet and vm.c (and testing frequently to ensure I didn't break it)</span></div><div class="line" id="193044"><span class="nick" style="color:#6b8072"><a href="#193044" label="[19:30:44]">&lt;OriansJ&gt;</a></span><span class="message">and once I finish building its additional dependencies; I'll clean up the makefile so that it behaves better.</span></div><div class="line" id="193501"><span class="nick" style="color:#8dd3c7"><a href="#193501" label="[19:35:01]">&lt;siraben&gt;</a></span><span class="message">Amazing. So you think it's a pretty viable path?</span></div><div class="line" id="194108"><span class="nick" style="color:#6b8072"><a href="#194108" label="[19:41:08]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well vm.c doesn't look too bad; so it should be a relatively easy conversion.</span></div><div class="line" id="194144"><span class="nick" style="color:#6b8072"><a href="#194144" label="[19:41:44]">&lt;OriansJ&gt;</a></span><span class="message">after that however; needs work to be something people can easily review and trust.</span></div><div class="line" id="194216"><span class="nick" style="color:#6b8072"><a href="#194216" label="[19:42:16]">&lt;OriansJ&gt;</a></span><span class="message">but working and just needs cleanup is easier than not working</span></div><div class="line" id="194337"><span class="nick" style="color:#6b8072"><a href="#194337" label="[19:43:37]">&lt;OriansJ&gt;</a></span><span class="message">and I just pulled out all of the switch statements</span></div><div class="line" id="195731"><span class="nick" style="color:#6b8072"><a href="#195731" label="[19:57:31]">&lt;OriansJ&gt;</a></span><span class="message">now to go after the ++ and -- expressions</span></div><div class="line" id="201404"><span class="nick" style="color:#6b8072"><a href="#201404" label="[20:14:04]">&lt;OriansJ&gt;</a></span><span class="message">hmm perhaps I parsed this one wrong: <a rel="nofollow" href="https://paste.debian.net/1172577/">https://paste.debian.net/1172577/</a> </span></div><div class="line" id="202504"><span class="nick" style="color:#6b8072"><a href="#202504" label="[20:25:04]">&lt;OriansJ&gt;</a></span><span class="message">but single ste[pping the code suggests otherwise</span></div><div class="line" id="210001"><span class="nick" style="color:#6b8072"><a href="#210001" label="[21:00:01]">&lt;OriansJ&gt;</a></span><span class="message">ok -128 would be different</span></div><div class="line" id="210323"><span class="nick" style="color:#6b8072"><a href="#210323" label="[21:03:23]">&lt;OriansJ&gt;</a></span><span class="message">but throwing a &amp; 0xFF; should get them back into matching behavior</span></div><div class="line" id="210521"><span class="nick" style="color:#6b8072"><a href="#210521" label="[21:05:21]">&lt;OriansJ&gt;</a></span><span class="message">yep that did the trick</span></div><div class="line" id="210821"><span class="nick" style="color:#6b8072"><a href="#210821" label="[21:08:21]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1172585/">https://paste.debian.net/1172585/</a>  works</span></div><div class="line" id="230840"><span class="nick" style="color:#6b8072"><a href="#230840" label="[23:08:40]">&lt;OriansJ&gt;</a></span><span class="message">Now to figure out the pointer arithmetic to ensure it doesn't cause problems for M2-Planet</span></div><div class="line" id="231409"><span class="nick" style="color:#6d2462"><a href="#231409" label="[23:14:09]">&lt;samueldr&gt;</a></span><span class="message">hi, I've been trying to get tinycc from jann//eke's fork to build using mescc; are there known-good pairs of mescc+that fork for x86_64?</span></div><div class="line" id="231501"><span class="nick" style="color:#6d2462"><a href="#231501" label="[23:15:01]">&lt;samueldr&gt;</a></span><span class="message">I need to undo some of the exploration work I've done and re-build using mes 0.21, to give you the error, it's with i386-asm.c though</span></div><div class="line" id="231539"><span class="nick" style="color:#234e69"><a href="#231539" label="[23:15:39]">&lt;janneke&gt;</a></span><span class="message">samueldr: x86_64 isn't supported yet, please use the x86 variant on systems 64bits too</span></div><div class="line" id="231627"><span class="nick" style="color:#6d2462"><a href="#231627" label="[23:16:27]">&lt;samueldr&gt;</a></span><span class="message">aw, it wasn't exactly obvious with the docs what the status is :)</span></div><div class="line" id="231658"><span class="nick" style="color:#6d2462"><a href="#231658" label="[23:16:58]">&lt;samueldr&gt;</a></span><span class="message">I was hopeful that with the existing changes for x86_64 things would work</span></div><div class="line" id="231729"><span class="nick" style="color:#6d2462"><a href="#231729" label="[23:17:29]">&lt;samueldr&gt;</a></span><span class="message">at least mes (with 0.21) all tests pass for x86_64</span></div><div class="line" id="231738"><span class="nick" style="color:#234e69"><a href="#231738" label="[23:17:38]">&lt;janneke&gt;</a></span><span class="message">well yeah, that's my hope too, i haven't seen it working yet, though</span></div><div class="line" id="231816"><span class="nick" style="color:#234e69"><a href="#231816" label="[23:18:16]">&lt;janneke&gt;</a></span><span class="message">samueldr: beware, some tests are set to XFAIL on x86_64</span></div><div class="line" id="231822"><span class="nick" style="color:#6d2462"><a href="#231822" label="[23:18:22]">&lt;samueldr&gt;</a></span><span class="message">yeah</span></div><div class="line" id="231849"><span class="nick" style="color:#6d2462"><a href="#231849" label="[23:18:49]">&lt;samueldr&gt;</a></span><span class="message">I also was hopeful that these were known to fail, but not needed for tinycc :)</span></div><div class="line" id="231915"><span class="nick" style="color:#6d2462"><a href="#231915" label="[23:19:15]">&lt;samueldr&gt;</a></span><span class="message">is there a document somewhere with the status on different platforms?</span></div><div class="line" id="231916"><span class="nick" style="color:#234e69"><a href="#231916" label="[23:19:16]">&lt;janneke&gt;</a></span><span class="message">:)</span></div><div class="line" id="231934"><span class="nick" style="color:#234e69"><a href="#231934" label="[23:19:34]">&lt;janneke&gt;</a></span><span class="message">no, i should add that</span></div><div class="line" id="231942"><span class="nick" style="color:#234e69"><a href="#231942" label="[23:19:42]">&lt;janneke&gt;</a></span><span class="message">current states: only x86 is supported</span></div><div class="line" id="231952"><span class="nick" style="color:#234e69"><a href="#231952" label="[23:19:52]">&lt;janneke&gt;</a></span><span class="message">ARM is getting very close, though</span></div><div class="line" id="231959"><span class="nick" style="color:#6d2462"><a href="#231959" label="[23:19:59]">&lt;samueldr&gt;</a></span><span class="message">would be nice too to add the last known tested commits for the important dependencies (I guess mescc-tools, mes and tinycc fork)</span></div><div class="line" id="232109"><span class="nick" style="color:#6d2462"><a href="#232109" label="[23:21:09]">&lt;samueldr&gt;</a></span><span class="message">well, nyacc too matters I guess</span></div><div class="line" id="232129"><span class="nick" style="color:#234e69"><a href="#232129" label="[23:21:29]">&lt;janneke&gt;</a></span><span class="message">yes; i haven't tested beyond that which is in the guix bootstrap now</span></div><div class="line" id="232151"><span class="nick" style="color:#234e69"><a href="#232151" label="[23:21:51]">&lt;janneke&gt;</a></span><span class="message">not for a full bootstrap anyway</span></div><div class="line" id="232413"><span class="nick" style="color:#234e69"><a href="#232413" label="[23:24:13]">&lt;janneke&gt;</a></span><span class="message">so, that's &quot;documented&quot; here - <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/commencement.scm">https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/commencement.scm</a> </span></div><div class="line" id="232442"><span class="nick" style="color:#6d2462"><a href="#232442" label="[23:24:42]">&lt;samueldr&gt;</a></span><span class="message">yeah, I should have said that I found the upstream commencement.scm (and bootstrap.scm)</span></div><div class="line" id="232452"><span class="nick" style="color:#6d2462"><a href="#232452" label="[23:24:52]">&lt;samueldr&gt;</a></span><span class="message">though I wondered too if there was a WIP version elsewhere</span></div><div class="line" id="232516"><span class="nick" style="color:#234e69"><a href="#232516" label="[23:25:16]">&lt;janneke&gt;</a></span><span class="message">no, this is the latest version (at least that i know of :)</span></div><div class="line" id="232601"><span class="nick" style="color:#6d2462"><a href="#232601" label="[23:26:01]">&lt;samueldr&gt;</a></span><span class="message">good to know, though it feels odd how the other parts are being developed in total detachment to a more &quot;complete&quot; integration like that</span></div><div class="line" id="232612"><span class="nick" style="color:#6d2462"><a href="#232612" label="[23:26:12]">&lt;samueldr&gt;</a></span><span class="message">but eh, who am I to judge how others develop stuff?</span></div><div class="line" id="232648"><span class="nick" style="color:#6d2462"><a href="#232648" label="[23:26:48]">&lt;samueldr&gt;</a></span><span class="message">it still is amazing non-trivial work</span></div><div class="line" id="233449"><span class="nick" style="color:#6b8072"><a href="#233449" label="[23:34:49]">&lt;OriansJ&gt;</a></span><span class="message">samueldr: there is a snapshot of MesCC and nyacc here: <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  along with an example command if you wish to play with it a bit</span></div><div class="line" id="233702"><span class="nick" style="color:#6b8072"><a href="#233702" label="[23:37:02]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools is generally compatible with MesCC by default (The only catch is certain versions of blood-elf require slightly different elf.hex2 headers)</span></div><div class="line" id="234548"><span class="nick" style="color:#6d2462"><a href="#234548" label="[23:45:48]">&lt;samueldr&gt;</a></span><span class="message">OriansJ: I would guess that it doesn't have any better x86_64 support (understandbly so)</span></div><div class="line" id="234559"><span class="nick" style="color:#6d2462"><a href="#234559" label="[23:45:59]">&lt;samueldr&gt;</a></span><span class="message">that's likely to be the main problem with my testing :)</span></div><div class="line" id="234710"><span class="nick" style="color:#6d2462"><a href="#234710" label="[23:47:10]">&lt;samueldr&gt;</a></span><span class="message">finally got back to the failure (while doing other things)</span></div><div class="line" id="234711"><span class="nick" style="color:#6d2462"><a href="#234711" label="[23:47:11]">&lt;samueldr&gt;</a></span><span class="message">i386-asm.s:4419 :Received invalid other; mov____(%rax),%si</span></div><div class="line" id="234711"><span class="nick" style="color:#6d2462"><a href="#234711" label="[23:47:11]">&lt;samueldr&gt;</a></span><span class="message">mescc: failed: M1 --LittleEndian --architecture amd64 -f /nix/store/dbfryyh57ajzb2603xx1f9qgrq416my1-mes-boot-0.21/lib/x86_64-mes/x86_64.M1 -f i386-asm.s -o i386-asm.o</span></div><div class="line" id="234721"><span class="nick" style="color:#6b8072"><a href="#234721" label="[23:47:21]">&lt;OriansJ&gt;</a></span><span class="message">samueldr: well x86 can be used to build AMD64 on AMD64 targets; as TCC supports AMD64 if I remember correctly</span></div><div class="line" id="234826"><span class="nick" style="color:#6d2462"><a href="#234826" label="[23:48:26]">&lt;samueldr&gt;</a></span><span class="message">yeah, I'll now be restarting my work with x86 instead of amd64, now that I know it's not expected to work right now</span></div><div class="line" id="234828"><span class="nick" style="color:#234e69"><a href="#234828" label="[23:48:28]">&lt;janneke&gt;</a></span><span class="message">samueldr: eh, you're mixing architectures</span></div><div class="line" id="234847"><span class="nick" style="color:#6d2462"><a href="#234847" label="[23:48:47]">&lt;samueldr&gt;</a></span><span class="message">well, the bootstrap scripts are, I would guess</span></div><div class="line" id="234855"><span class="nick" style="color:#234e69"><a href="#234855" label="[23:48:55]">&lt;janneke&gt;</a></span><span class="message">(the failed command)</span></div><div class="line" id="234926"><span class="nick" style="color:#6d2462"><a href="#234926" label="[23:49:26]">&lt;samueldr&gt;</a></span><span class="message">that was something I was wondering, if i386-asm was expected to be built for x86_64</span></div><div class="line" id="234951"><span class="nick" style="color:#6b8072"><a href="#234951" label="[23:49:51]">&lt;OriansJ&gt;</a></span><span class="message">samueldr: the invalid other means that the file i386-asm.s contains an assembly primitive that isn't defined in x86_64.M1</span></div><div class="line" id="235005"><span class="nick" style="color:#6d2462"><a href="#235005" label="[23:50:05]">&lt;samueldr&gt;</a></span><span class="message">right</span></div><div class="line" id="235110"><span class="nick" style="color:#6d2462"><a href="#235110" label="[23:51:10]">&lt;samueldr&gt;</a></span><span class="message">thanks for the pointer, edited bootstrap.sh</span></div><div class="line" id="235116"><span class="nick" style="color:#6b8072"><a href="#235116" label="[23:51:16]">&lt;OriansJ&gt;</a></span><span class="message">samueldr: well --architecture is just how the pointers are handled;</span></div><div class="line" id="235215"><span class="nick" style="color:#6d2462"><a href="#235215" label="[23:52:15]">&lt;samueldr&gt;</a></span><span class="message">yeah, that's all targeting x86_64 still</span></div><div class="line" id="235252"><span class="nick" style="color:#6b8072"><a href="#235252" label="[23:52:52]">&lt;OriansJ&gt;</a></span><span class="message">and the contents of the elf.hex2 determines how the ELF file is treated by linux (as a native x86 or native AMD64 binary)</span></div><br /></div></body></html>