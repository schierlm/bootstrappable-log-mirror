<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002200"><span class="nick" style="color:#8dd3c7"><a href="#002200" label="[00:22:00]">&lt;stikonas&gt;</a></span><span class="message">fossy: I now have perl5.004_05 too</span></div><div class="line" id="002213"><span class="nick" style="color:#8dd3c7"><a href="#002213" label="[00:22:13]">&lt;stikonas&gt;</a></span><span class="message">(oldest listed on <a rel="nofollow" href="https://www.cpan.org/src/README.html">https://www.cpan.org/src/README.html</a>) </span></div><div class="line" id="002241"><span class="nick" style="color:#8dd3c7"><a href="#002241" label="[00:22:41]">&lt;stikonas&gt;</a></span><span class="message">unfortunately we seem to have to jump through all versions, 5.003-&gt;5.005 did not work</span></div><div class="line" id="002251"><span class="nick" style="color:#8dd3c7"><a href="#002251" label="[00:22:51]">&lt;stikonas&gt;</a></span><span class="message">embed.pl failed</span></div><div class="line" id="005404"><span class="nick" style="color:#2e2a4a"><a href="#005404" label="[00:54:04]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Be aware that only 5.004 and later versions of perl are maintained.&quot;</span></div><div class="line" id="005413"><span class="nick" style="color:#2e2a4a"><a href="#005413" label="[00:54:13]">&lt;Hagfish&gt;</a></span><span class="message">that's good to know</span></div><div class="line" id="005423"><span class="nick" style="color:#2e2a4a"><a href="#005423" label="[00:54:23]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, great work stik</span></div><div class="line" id="010348"><span class="nick" style="color:#6b8072"><a href="#010348" label="[01:03:48]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well to a degree bootstrapping is a game of reducing the amount of cheating until it is fully honest. Guix cheats with Guile, you can cheat with generated kaem scripts and it'll be a huge improvement. The goal isn't to do it perfect but make iterative steps towards a sustainable bootstrap chain. Because it all has to be supported *FOREVER* So we have to take into account porting to new hardware architectures and Operating Systems</span></div><div class="line" id="010348"><span class="nick" style="color:#6b8072"><a href="#010348" label="[01:03:48]">&lt;OriansJ&gt;</a></span><span class="message">in the future and the development costs involved.</span></div><div class="line" id="010923"><span class="nick" style="color:#8dd3c7"><a href="#010923" label="[01:09:23]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: early versions are pre-release anyway</span></div><div class="line" id="010941"><span class="nick" style="color:#8dd3c7"><a href="#010941" label="[01:09:41]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: but later versions kind-of have dependency on perl unless you cheat a bit</span></div><div class="line" id="011203"><span class="nick" style="color:#8dd3c7"><a href="#011203" label="[01:12:03]">&lt;stikonas&gt;</a></span><span class="message">there are 3 scripts in perl that are written in perl and spit out 3 C header files</span></div><div class="line" id="011353"><span class="nick" style="color:#8dd3c7"><a href="#011353" label="[01:13:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, so far live-bootstrap is trying to avoid any cheating</span></div><div class="line" id="011411"><span class="nick" style="color:#8dd3c7"><a href="#011411" label="[01:14:11]">&lt;stikonas&gt;</a></span><span class="message">it might not be the simplest bootsrap chain</span></div><div class="line" id="011432"><span class="nick" style="color:#8dd3c7"><a href="#011432" label="[01:14:32]">&lt;stikonas&gt;</a></span><span class="message">but up to kernel it should be as honest as it can get</span></div><div class="line" id="011917"><span class="nick" style="color:#8dd3c7"><a href="#011917" label="[01:19:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, most of the work in maintaining new hardware architectures is for compiler/libc and binutils</span></div><div class="line" id="012745"><span class="nick" style="color:#8dd3c7"><a href="#012745" label="[01:27:45]">&lt;stikonas&gt;</a></span><span class="message">so it might be easier to get new arches added if we manage to bootstrap newer versions of these tools</span></div><div class="line" id="012814"><span class="nick" style="color:#8dd3c7"><a href="#012814" label="[01:28:14]">&lt;stikonas&gt;</a></span><span class="message">without going e.g. via gcc 2.95.2</span></div><div class="line" id="014833"><span class="nick" style="color:#6b8072"><a href="#014833" label="[01:48:33]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: I understand the goal is to avoid all cheating. However I am just saying cheating on the build script side is something far easier to fix later than cheating on the source code side.</span></div><div class="line" id="014852"><span class="nick" style="color:#6b8072"><a href="#014852" label="[01:48:52]">&lt;OriansJ&gt;</a></span><span class="message">eg pregenerated source files vs generated kaem scripts.</span></div><div class="line" id="014914"><span class="nick" style="color:#8dd3c7"><a href="#014914" label="[01:49:14]">&lt;stikonas&gt;</a></span><span class="message">that's definitely true</span></div><div class="line" id="014926"><span class="nick" style="color:#6b8072"><a href="#014926" label="[01:49:26]">&lt;OriansJ&gt;</a></span><span class="message">and the pregenerated source files are the far bigger threat.</span></div><div class="line" id="014944"><span class="nick" style="color:#8dd3c7"><a href="#014944" label="[01:49:44]">&lt;stikonas&gt;</a></span><span class="message">well, it also depends on how bad they are...</span></div><div class="line" id="014949"><span class="nick" style="color:#6b8072"><a href="#014949" label="[01:49:49]">&lt;OriansJ&gt;</a></span><span class="message">as it is considerably harder to backdoor a kaem script than it is to backdoor C code.</span></div><div class="line" id="014951"><span class="nick" style="color:#8dd3c7"><a href="#014951" label="[01:49:51]">&lt;stikonas&gt;</a></span><span class="message">bison is one thing</span></div><div class="line" id="015024"><span class="nick" style="color:#8dd3c7"><a href="#015024" label="[01:50:24]">&lt;stikonas&gt;</a></span><span class="message">and some generated list of enums or defines is less scary</span></div><div class="line" id="015120"><span class="nick" style="color:#8dd3c7"><a href="#015120" label="[01:51:20]">&lt;stikonas&gt;</a></span><span class="message">well, I don't think we disagree on that anyway</span></div><div class="line" id="015130"><span class="nick" style="color:#8dd3c7"><a href="#015130" label="[01:51:30]">&lt;stikonas&gt;</a></span><span class="message">kaem script is definitely safer</span></div><div class="line" id="015359"><span class="nick" style="color:#6b8072"><a href="#015359" label="[01:53:59]">&lt;OriansJ&gt;</a></span><span class="message">I guess the disagreement could be reduced down to me expressing that I feel that the goal of &quot;finishing now&quot; seems too attractive and it looks like rushing to get done with me having concerns about future support tasks that might be required.</span></div><div class="line" id="015457"><span class="nick" style="color:#6b8072"><a href="#015457" label="[01:54:57]">&lt;OriansJ&gt;</a></span><span class="message">but ultimately it is fossy's choice as who does decides.</span></div><div class="line" id="022031"><span class="nick" style="color:#6b8072"><a href="#022031" label="[02:20:31]">&lt;OriansJ&gt;</a></span><span class="message">Don't get me wrong I appreciate all the hard work being put in right now; but I can't help but be concerned about pushing too hard and hitting burnout. Which makes me want to suggest shortcuts and alternate solutions to delay dealing with some of the harder problems until later when you can hit it from a fresh perspective.</span></div><div class="line" id="034034"><span class="nick" style="color:#6b8072"><a href="#034034" label="[03:40:34]">&lt;OriansJ&gt;</a></span><span class="message">I really need to finish the final bit of the M2libc transistion so that I can merge deesix's work.</span></div><div class="line" id="035259"><span class="nick" style="color:#6b8072"><a href="#035259" label="[03:52:59]">&lt;OriansJ&gt;</a></span><span class="message">but I should be able to finish it in the next hour</span></div><div class="line" id="040435"><span class="nick" style="color:#6b8072"><a href="#040435" label="[04:04:35]">&lt;OriansJ&gt;</a></span><span class="message">there finally done</span></div><div class="line" id="041137"><span class="nick" style="color:#2e2a4a"><a href="#041137" label="[04:11:37]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="041523"><span class="nick" style="color:#2e2a4a"><a href="#041523" label="[04:15:23]">&lt;Hagfish&gt;</a></span><span class="message">i'm hoping that once a modern version of perl is reached, more people will start to &quot;get it&quot;, and that steps like m2 will be appreciate as important practical software, rather than curiosities</span></div><div class="line" id="041842"><span class="nick" style="color:#6b8072"><a href="#041842" label="[04:18:42]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: the news of GCC being &quot;bootstrapped&quot; in Guix went over as well as a wet fart. So I don't see perl as some magical milestone where everything comes together.</span></div><div class="line" id="041901"><span class="nick" style="color:#2e2a4a"><a href="#041901" label="[04:19:01]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i was just thinking about that</span></div><div class="line" id="041911"><span class="nick" style="color:#2e2a4a"><a href="#041911" label="[04:19:11]">&lt;Hagfish&gt;</a></span><span class="message">maybe because people aren't so familiar with Guix?</span></div><div class="line" id="041952"><span class="nick" style="color:#6b8072"><a href="#041952" label="[04:19:52]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Guix is atleast an order of magnitude bigger than Bootstrappable</span></div><div class="line" id="042126"><span class="nick" style="color:#2e2a4a"><a href="#042126" label="[04:21:26]">&lt;Hagfish&gt;</a></span><span class="message">true</span></div><div class="line" id="042131"><span class="nick" style="color:#6b8072"><a href="#042131" label="[04:21:31]">&lt;OriansJ&gt;</a></span><span class="message">Now if we could getting a bootstrap path in Debian, then we will know the best possible reaction to bootstrap work.</span></div><div class="line" id="042147"><span class="nick" style="color:#2e2a4a"><a href="#042147" label="[04:21:47]">&lt;Hagfish&gt;</a></span><span class="message">i was thinking about that</span></div><div class="line" id="042150"><span class="nick" style="color:#2e2a4a"><a href="#042150" label="[04:21:50]">&lt;Hagfish&gt;</a></span><span class="message">maybe there could be some &quot;adversarial interoperability&quot;</span></div><div class="line" id="042219"><span class="nick" style="color:#2e2a4a"><a href="#042219" label="[04:22:19]">&lt;Hagfish&gt;</a></span><span class="message">does debian publish the precise versions (and hashes) of each package it uses on its build machines?</span></div><div class="line" id="042233"><span class="nick" style="color:#6b8072"><a href="#042233" label="[04:22:33]">&lt;OriansJ&gt;</a></span><span class="message">I imagine getting Guix being able to generate dpkgs would make the transistion much easier.</span></div><div class="line" id="042258"><span class="nick" style="color:#2e2a4a"><a href="#042258" label="[04:22:58]">&lt;Hagfish&gt;</a></span><span class="message">we could make a CI job that builds those debian packages and checks the hashes against the ones Debian publishes</span></div><div class="line" id="042306"><span class="nick" style="color:#2e2a4a"><a href="#042306" label="[04:23:06]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that would be great</span></div><div class="line" id="042340"><span class="nick" style="color:#80b1d3"><a href="#042340" label="[04:23:40]">&lt;ericonr&gt;</a></span><span class="message">Hagfish: isn't that what they already do in reproduible?</span></div><div class="line" id="042345"><span class="nick" style="color:#6b8072"><a href="#042345" label="[04:23:45]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I can't speak to the Debian side but vagrantc would be able to better to the answer to that.</span></div><div class="line" id="042409"><span class="nick" style="color:#6b8072"><a href="#042409" label="[04:24:09]">&lt;OriansJ&gt;</a></span><span class="message">ericonr: I believe they have their own custome build setup</span></div><div class="line" id="042455"><span class="nick" style="color:#80b1d3"><a href="#042455" label="[04:24:55]">&lt;ericonr&gt;</a></span><span class="message">afaik they do some fuzzing around to verify stuff, so some machines have usrmerge while others don't, and they do builds with different locales configured and stuff</span></div><div class="line" id="042519"><span class="nick" style="color:#80b1d3"><a href="#042519" label="[04:25:19]">&lt;ericonr&gt;</a></span><span class="message">unless Hagfish wants to build those packages from outside debian completely?</span></div><div class="line" id="042611"><span class="nick" style="color:#2e2a4a"><a href="#042611" label="[04:26:11]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://salsa.debian.org/qa/jenkins.debian.net/blob/master/job-cfg/reproducible.yaml">https://salsa.debian.org/qa/jenkins.debian.net/blob/master/job-cfg/reproducible.yaml</a> </span></div><div class="line" id="042631"><span class="nick" style="color:#2e2a4a"><a href="#042631" label="[04:26:31]">&lt;Hagfish&gt;</a></span><span class="message">i guess the jenkins jobs are all available for inspection</span></div><div class="line" id="042802"><span class="nick" style="color:#2e2a4a"><a href="#042802" label="[04:28:02]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/perl.html">https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/perl.html</a> </span></div><div class="line" id="042821"><span class="nick" style="color:#2e2a4a"><a href="#042821" label="[04:28:21]">&lt;Hagfish&gt;</a></span><span class="message">some of the build variability is due to things like the build path</span></div><div class="line" id="042839"><span class="nick" style="color:#2e2a4a"><a href="#042839" label="[04:28:39]">&lt;Hagfish&gt;</a></span><span class="message">it would be possible to set the correct values for that</span></div><div class="line" id="042934"><span class="nick" style="color:#2e2a4a"><a href="#042934" label="[04:29:34]">&lt;Hagfish&gt;</a></span><span class="message">i guess if the outputs of debian's builds match the outputs from the same process run under a (more) trusted build environment, then that's fine</span></div><div class="line" id="043009"><span class="nick" style="color:#2e2a4a"><a href="#043009" label="[04:30:09]">&lt;Hagfish&gt;</a></span><span class="message">it would be nice not to have to rebuild all of debian ourselves, though</span></div><div class="line" id="043031"><span class="nick" style="color:#2e2a4a"><a href="#043031" label="[04:30:31]">&lt;Hagfish&gt;</a></span><span class="message">just the machine images that run the build process</span></div><div class="line" id="043342"><span class="nick" style="color:#6b8072"><a href="#043342" label="[04:33:42]">&lt;OriansJ&gt;</a></span><span class="message">in short Debian varies things intensionally to shake out code that makes builds non-reproducible; while Guix freezes things solid so that builds are reproducible by default</span></div><div class="line" id="043713"><span class="nick" style="color:#80b1d3"><a href="#043713" label="[04:37:13]">&lt;ericonr&gt;</a></span><span class="message">I find that approach interesting</span></div><div class="line" id="043728"><span class="nick" style="color:#80b1d3"><a href="#043728" label="[04:37:28]">&lt;ericonr&gt;</a></span><span class="message">testing &quot;noarch&quot; packages between different archs is also pretty cool</span></div><div class="line" id="044649"><span class="nick" style="color:#6b8072"><a href="#044649" label="[04:46:49]">&lt;OriansJ&gt;</a></span><span class="message">I find the pseudo-antagonistic personality conflicts in regards to style and method of solving the bootstrapping problem actually surprisingly helpful to reducing the problem long term. Despite the short term wasted duplication of efforts.</span></div><div class="line" id="050606"><span class="nick" style="color:#6b8072"><a href="#050606" label="[05:06:06]">&lt;OriansJ&gt;</a></span><span class="message">finally managed to merge deesix's amazing unification work in M2-Planet</span></div><div class="line" id="050645"><span class="nick" style="color:#6b8072"><a href="#050645" label="[05:06:45]">&lt;OriansJ&gt;</a></span><span class="message">This will really simplify the ppc64le work</span></div><div class="line" id="085734"><span class="nick" style="color:#6d2462"><a href="#085734" label="[08:57:34]">&lt;bauen1_&gt;</a></span><span class="message">with &quot;just&quot; 3 perl scripts required to build perl, maybe it is possible to convince upstream to replace these ?</span></div><div class="line" id="085922"><span class="nick">***</span><span class="message notice">bauen1_ is now known as bauen1</span></div><div class="line" id="085951"><span class="nick" style="color:#234e69"><a href="#085951" label="[08:59:51]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: OriansJ: there is some existing effort to making debain bootstrappable (<a rel="nofollow" href="https://wiki.debian.org/DebianBootstrap">https://wiki.debian.org/DebianBootstrap</a>)  mostly for bootstrapping new architectures, but that might be a good point to start</span></div><div class="line" id="090056"><span class="nick" style="color:#234e69"><a href="#090056" label="[09:00:56]">&lt;bauen1&gt;</a></span><span class="message">but i'm not sure what tools exactly it requires, but i would image: perl, gcc, binutils, coreutils, autotools, make, bash would go a decent way</span></div><div class="line" id="100453"><span class="nick" style="color:#6c3d55"><a href="#100453" label="[10:04:53]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: whenever you have time, please review the checksumming PR</span></div><div class="line" id="104539"><span class="nick" style="color:#d9d9d9"><a href="#104539" label="[10:45:39]">&lt;pabs3&gt;</a></span><span class="message">bauen1: this is a better reference for Debian bootstrap these days <a rel="nofollow" href="https://wiki.debian.org/HelmutGrohne/rebootstrap">https://wiki.debian.org/HelmutGrohne/rebootstrap</a> </span></div><div class="line" id="104623"><span class="nick" style="color:#d9d9d9"><a href="#104623" label="[10:46:23]">&lt;pabs3&gt;</a></span><span class="message">(rebootstrap is focussed on the case of automatically bootstrapping Debian arches from other Debian arches)</span></div><div class="line" id="104702"><span class="nick" style="color:#234e69"><a href="#104702" label="[10:47:02]">&lt;bauen1&gt;</a></span><span class="message">ah right i mixed something up again</span></div><div class="line" id="104730"><span class="nick" style="color:#d9d9d9"><a href="#104730" label="[10:47:30]">&lt;pabs3&gt;</a></span><span class="message">the DebianBootstrap wiki is more general</span></div><div class="line" id="104829"><span class="nick" style="color:#d9d9d9"><a href="#104829" label="[10:48:29]">&lt;pabs3&gt;</a></span><span class="message">there is also <a rel="nofollow" href="http://crossqa.debian.net/">http://crossqa.debian.net/</a>  for the cross-build case</span></div><div class="line" id="104908"><span class="nick" style="color:#d9d9d9"><a href="#104908" label="[10:49:08]">&lt;pabs3&gt;</a></span><span class="message">#debian-bootstrap (OFTC) is the place where helmut/josch/etc discuss it</span></div><div class="line" id="110438"><span class="nick" style="color:#8dd3c7"><a href="#110438" label="[11:04:38]">&lt;stikonas&gt;</a></span><span class="message">well, rebootstrap is not that low level as what people do here...</span></div><div class="line" id="110505"><span class="nick" style="color:#8dd3c7"><a href="#110505" label="[11:05:05]">&lt;stikonas&gt;</a></span><span class="message">I guess it just does some cross-compilation</span></div><div class="line" id="110706"><span class="nick" style="color:#d9d9d9"><a href="#110706" label="[11:07:06]">&lt;pabs3&gt;</a></span><span class="message">right</span></div><div class="line" id="112642"><span class="nick" style="color:#bc80bd"><a href="#112642" label="[11:26:42]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: have you ever read Rob's rant about perl? <a rel="nofollow" href="https://lore.kernel.org/lkml/200901171944.05014.rob@landley.net/">https://lore.kernel.org/lkml/200901171944.05014.rob@landley.net/</a> </span></div><div class="line" id="112913"><span class="nick" style="color:#234e69"><a href="#112913" label="[11:29:13]">&lt;bauen1&gt;</a></span><span class="message">oof that mail thread is huge</span></div><div class="line" id="113004"><span class="nick" style="color:#bc80bd"><a href="#113004" label="[11:30:04]">&lt;gforce_de1977&gt;</a></span><span class="message">also this: <a rel="nofollow" href="https://github.com/landley/toybox/commit/32b3587af261">https://github.com/landley/toybox/commit/32b3587af261</a> </span></div><div class="line" id="113020"><span class="nick" style="color:#bc80bd"><a href="#113020" label="[11:30:20]">&lt;gforce_de1977&gt;</a></span><span class="message">i just means: remove this sucker = perl 8-)</span></div><div class="line" id="113154"><span class="nick" style="color:#234e69"><a href="#113154" label="[11:31:54]">&lt;bauen1&gt;</a></span><span class="message">then there's half of debian core development tools written in perl lol</span></div><div class="line" id="113247"><span class="nick" style="color:#8dd3c7"><a href="#113247" label="[11:32:47]">&lt;stikonas&gt;</a></span><span class="message">and half of the autotools...</span></div><div class="line" id="113510"><span class="nick" style="color:#bc80bd"><a href="#113510" label="[11:35:10]">&lt;gforce_de1977&gt;</a></span><span class="message">8-)))</span></div><div class="line" id="113535"><span class="nick" style="color:#bc80bd"><a href="#113535" label="[11:35:35]">&lt;gforce_de1977&gt;</a></span><span class="message">but for bootstrapping it is a real pain...</span></div><div class="line" id="113841"><span class="nick" style="color:#8dd3c7"><a href="#113841" label="[11:38:41]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, although, I found perl easier to build than expected</span></div><div class="line" id="113857"><span class="nick" style="color:#8dd3c7"><a href="#113857" label="[11:38:57]">&lt;stikonas&gt;</a></span><span class="message">(and different perl versions are quite similar in terms of building)</span></div><div class="line" id="113922"><span class="nick" style="color:#8dd3c7"><a href="#113922" label="[11:39:22]">&lt;stikonas&gt;</a></span><span class="message">so not too hard to jump via a few intermediate versions of perl</span></div><div class="line" id="120327"><span class="nick" style="color:#bc80bd"><a href="#120327" label="[12:03:27]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: for later the question is how far away is recent perl 5.32.1</span></div><div class="line" id="120426"><span class="nick" style="color:#8dd3c7"><a href="#120426" label="[12:04:26]">&lt;stikonas&gt;</a></span><span class="message">well, I don't know at this stage</span></div><div class="line" id="120503"><span class="nick" style="color:#8dd3c7"><a href="#120503" label="[12:05:03]">&lt;stikonas&gt;</a></span><span class="message">the more important questions I think is how soon we can bootstrap perl's ./Configure script</span></div><div class="line" id="120528"><span class="nick" style="color:#8dd3c7"><a href="#120528" label="[12:05:28]">&lt;stikonas&gt;</a></span><span class="message">I am not going to write custom Makefiles for all perl versions up to 5.32.1...</span></div><div class="line" id="130339"><span class="nick" style="color:#bc80bd"><a href="#130339" label="[13:03:39]">&lt;gforce_de1977&gt;</a></span><span class="message">8-) as long as './Configure' runs, the road to 5.32.1 is straigt</span></div><div class="line" id="131553"><span class="nick" style="color:#8dd3c7"><a href="#131553" label="[13:15:53]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: not that simple, you need to create ./Configure, not just run it</span></div><div class="line" id="131609"><span class="nick" style="color:#8dd3c7"><a href="#131609" label="[13:16:09]">&lt;stikonas&gt;</a></span><span class="message">./Configure is not handwritten</span></div><div class="line" id="131657"><span class="nick" style="color:#8dd3c7"><a href="#131657" label="[13:16:57]">&lt;stikonas&gt;</a></span><span class="message">and I don't know if new perl's build with tcc.</span></div><div class="line" id="131708"><span class="nick" style="color:#8dd3c7"><a href="#131708" label="[13:17:08]">&lt;stikonas&gt;</a></span><span class="message">they might...</span></div><div class="line" id="133136"><span class="nick" style="color:#bc80bd"><a href="#133136" label="[13:31:36]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: yeah....there was it again, the chicken-and-egg</span></div><div class="line" id="134026"><span class="nick" style="color:#bc80bd"><a href="#134026" label="[13:40:26]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: folks at perl #p5p say, that perl does not use autotools but 'metaconfig' which generates './Configure', so i will check <a rel="nofollow" href="https://github.com/Perl/metaconfig">https://github.com/Perl/metaconfig</a> </span></div><div class="line" id="134146"><span class="nick" style="color:#8dd3c7"><a href="#134146" label="[13:41:46]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: yes, we know that</span></div><div class="line" id="134220"><span class="nick" style="color:#8dd3c7"><a href="#134220" label="[13:42:20]">&lt;stikonas&gt;</a></span><span class="message">(and metaconfig is written in perl)</span></div><div class="line" id="134232"><span class="nick" style="color:#8dd3c7"><a href="#134232" label="[13:42:32]">&lt;stikonas&gt;</a></span><span class="message">so we need to bootstrap  perl a bit before we can use it</span></div><div class="line" id="134622"><span class="nick" style="color:#8dd3c7"><a href="#134622" label="[13:46:22]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: but it might not be necessary to do it now</span></div><div class="line" id="134630"><span class="nick" style="color:#bc80bd"><a href="#134630" label="[13:46:30]">&lt;gforce_de1977&gt;</a></span><span class="message">aaaaah...i see...arrrrg</span></div><div class="line" id="134651"><span class="nick" style="color:#8dd3c7"><a href="#134651" label="[13:46:51]">&lt;stikonas&gt;</a></span><span class="message">at least some versions of automake already run on what we have</span></div><div class="line" id="134706"><span class="nick" style="color:#8dd3c7"><a href="#134706" label="[13:47:06]">&lt;stikonas&gt;</a></span><span class="message">adn probably if we get to 5.6 or 5.8 most will run</span></div><div class="line" id="135056"><span class="nick" style="color:#bc80bd"><a href="#135056" label="[13:50:56]">&lt;gforce_de1977&gt;</a></span><span class="message">the perl folks says, that maybe 'microperl' is worth a look: <a rel="nofollow" href="https://www.foo.be/docs/tpj/issues/vol5_3/tpj0503-0003.html">https://www.foo.be/docs/tpj/issues/vol5_3/tpj0503-0003.html</a> </span></div><div class="line" id="135208"><span class="nick" style="color:#8dd3c7"><a href="#135208" label="[13:52:08]">&lt;stikonas&gt;</a></span><span class="message">well, we can build miniperl right now</span></div><div class="line" id="135213"><span class="nick" style="color:#8dd3c7"><a href="#135213" label="[13:52:13]">&lt;stikonas&gt;</a></span><span class="message">(that's what I'm building</span></div><div class="line" id="135235"><span class="nick" style="color:#8dd3c7"><a href="#135235" label="[13:52:35]">&lt;stikonas&gt;</a></span><span class="message">although, I can take a look at that</span></div><div class="line" id="135349"><span class="nick" style="color:#8dd3c7"><a href="#135349" label="[13:53:49]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: I suspect we still need miniperl that I built to regenerate those opcode.h, keywords.h and embed.h</span></div><div class="line" id="135403"><span class="nick" style="color:#8dd3c7"><a href="#135403" label="[13:54:03]">&lt;stikonas&gt;</a></span><span class="message">i.e. microperl probably deals with ./Configure only</span></div><div class="line" id="135430"><span class="nick" style="color:#bc80bd"><a href="#135430" label="[13:54:30]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: i have to read deeper...</span></div><div class="line" id="135455"><span class="nick" style="color:#8dd3c7"><a href="#135455" label="[13:54:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll read in the evening</span></div><div class="line" id="135640"><span class="nick" style="color:#6b8072"><a href="#135640" label="[13:56:40]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: well he certainly isn't wrong in those 2 cases</span></div><div class="line" id="141329"><span class="nick" style="color:#3c5b35"><a href="#141329" label="[14:13:29]">&lt;nore&gt;</a></span><span class="message">hello, I wanted to announce that OCaml (version 4.07) is now bootstrapped! The code is available at <a rel="nofollow" href="https://github.com/Ekdohibs/camlboot/tree/30ba83b6f4a64d5daf9013c7ee58b3a4238ffbf6">https://github.com/Ekdohibs/camlboot/tree/30ba83b6f4a64d5daf9013c7ee58b3a4238ffbf6</a>  , and can be built by executing &quot;make _boot/ocamlc&quot; after cloning the repository and its submodules</span></div><div class="line" id="141443"><span class="nick" style="color:#3c5b35"><a href="#141443" label="[14:14:43]">&lt;nore&gt;</a></span><span class="message">(beware, compilation is single-threaded for now, and takes 14h on my machine)</span></div><div class="line" id="142059"><span class="nick" style="color:#bc80bd"><a href="#142059" label="[14:20:59]">&lt;gforce_de1977&gt;</a></span><span class="message">nore: very good. time is *not* the problem, computers have plenty of</span></div><div class="line" id="144629"><span class="nick" style="color:#8dd3c7"><a href="#144629" label="[14:46:29]">&lt;stikonas&gt;</a></span><span class="message">nore: oh, ocaml also depends on itself :(</span></div><div class="line" id="144641"><span class="nick" style="color:#8dd3c7"><a href="#144641" label="[14:46:41]">&lt;stikonas&gt;</a></span><span class="message">well, good to hear that it's solved though</span></div><div class="line" id="145204"><span class="nick" style="color:#3c5b35"><a href="#145204" label="[14:52:04]">&lt;nore&gt;</a></span><span class="message">yeah, the ocaml compiler is written in ocaml</span></div><div class="line" id="145230"><span class="nick" style="color:#3c5b35"><a href="#145230" label="[14:52:30]">&lt;nore&gt;</a></span><span class="message">and the lexer generator used for the compiler also depends on itself (and ocaml)</span></div><div class="line" id="145249"><span class="nick" style="color:#3c5b35"><a href="#145249" label="[14:52:49]">&lt;nore&gt;</a></span><span class="message">both solved now, though</span></div><div class="line" id="145313"><span class="nick" style="color:#8dd3c7"><a href="#145313" label="[14:53:13]">&lt;stikonas&gt;</a></span><span class="message">so what does guix does to ocaml.... ?</span></div><div class="line" id="145357"><span class="nick" style="color:#3c5b35"><a href="#145357" label="[14:53:57]">&lt;nore&gt;</a></span><span class="message">well, ocaml commits a bytecode version of the compiler and the lexer generator to its repositories</span></div><div class="line" id="145407"><span class="nick" style="color:#3c5b35"><a href="#145407" label="[14:54:07]">&lt;nore&gt;</a></span><span class="message">so it just uses those I guess?</span></div><div class="line" id="145424"><span class="nick" style="color:#8dd3c7"><a href="#145424" label="[14:54:24]">&lt;stikonas&gt;</a></span><span class="message">possibly</span></div><div class="line" id="145513"><span class="nick" style="color:#8dd3c7"><a href="#145513" label="[14:55:13]">&lt;stikonas&gt;</a></span><span class="message">would be nice to have a list of all these bootstrap projects</span></div><div class="line" id="145523"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="145525"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="152858"><span class="nick" style="color:#8dd3c7"><a href="#152858" label="[15:28:58]">&lt;stikonas&gt;</a></span><span class="message">nore: by the way, maybe write to mailing list instead of just on IRC?</span></div><div class="line" id="152910"><span class="nick" style="color:#8dd3c7"><a href="#152910" label="[15:29:10]">&lt;stikonas&gt;</a></span><span class="message">it's probably better for announcement</span></div><div class="line" id="162308"><span class="nick" style="color:#af8d2f"><a href="#162308" label="[16:23:08]">&lt;roptat&gt;</a></span><span class="message">yes, we simply use the bytecode compilers that are provided with the sources</span></div><div class="line" id="162525"><span class="nick" style="color:#af8d2f"><a href="#162525" label="[16:25:25]">&lt;roptat&gt;</a></span><span class="message">I'm planning to write a recipe for camlboot and fully bootstrap ocaml 4.07 (which is not the latest, but nore has plans for more recent versions too :))</span></div><div class="line" id="164041"><span class="nick" style="color:#8dd3c7"><a href="#164041" label="[16:40:41]">&lt;stikonas&gt;</a></span><span class="message">but can't newer ocaml be bootstrapped with ocaml 4.07?</span></div><div class="line" id="164051"><span class="nick" style="color:#8dd3c7"><a href="#164051" label="[16:40:51]">&lt;stikonas&gt;</a></span><span class="message">(at least until camboot supports new ocaml)</span></div><div class="line" id="173711"><span class="nick" style="color:#af8d2f"><a href="#173711" label="[17:37:11]">&lt;roptat&gt;</a></span><span class="message">nore knows better than me, but I know there's at least a problem with the parser generator (they switched from ocamlyacc, written in C, to merlin, written in OCaml)</span></div><div class="line" id="173736"><span class="nick" style="color:#af8d2f"><a href="#173736" label="[17:37:36]">&lt;roptat&gt;</a></span><span class="message">sorry, menhir, not merlin</span></div><div class="line" id="173844"><span class="nick" style="color:#af8d2f"><a href="#173844" label="[17:38:44]">&lt;roptat&gt;</a></span><span class="message">hopefully, we can build menhir from ocaml4.07 and generate the grammar from it (its own grammar is compatible with ocamlyacc iirc)</span></div><div class="line" id="174033"><span class="nick" style="color:#af8d2f"><a href="#174033" label="[17:40:33]">&lt;roptat&gt;</a></span><span class="message">also, I think recent versions of ocaml are not compatible with ocaml4.07. the bootstrap compiler is regenerated from time to time because of that, and not necessarily on release commits</span></div><div class="line" id="175652"><span class="nick" style="color:#8dd3c7"><a href="#175652" label="[17:56:52]">&lt;stikonas&gt;</a></span><span class="message">roptat: ouch, that's even worse than rust then, rust can at least be bootstrapped using previous release. Although, there are not quite a few jumps from 1.29 to latest</span></div><div class="line" id="175736"><span class="nick" style="color:#af8d2f"><a href="#175736" label="[17:57:36]">&lt;roptat&gt;</a></span><span class="message">right, 20 versions for rust, and only 5 for ocaml (but I don't know how many bootstrap commits)</span></div><div class="line" id="190050"><span class="nick" style="color:#389600"><a href="#190050" label="[19:00:50]">&lt;g_bor[m]&gt;</a></span><span class="message">hello</span></div><div class="line" id="191538"><span class="nick" style="color:#8dd3c7"><a href="#191538" label="[19:15:38]">&lt;stikonas&gt;</a></span><span class="message">g_bor[m]: hi</span></div><div class="line" id="192159"><span class="nick" style="color:#389600"><a href="#192159" label="[19:21:59]">&lt;g_bor[m]&gt;</a></span><span class="message">I am looking at getting some custom firware work on qemu.</span></div><div class="line" id="192244"><span class="nick" style="color:#389600"><a href="#192244" label="[19:22:44]">&lt;g_bor[m]&gt;</a></span><span class="message">Is the port 0x80 implemented in qemu? How can I get a log of what is sent there?</span></div><div class="line" id="193031"><span class="nick" style="color:#8dd3c7"><a href="#193031" label="[19:30:31]">&lt;stikonas&gt;</a></span><span class="message">g_bor[m]: isn't that question for qemu channel? I don't think people here would necesserily know</span></div><div class="line" id="194216"><span class="nick" style="color:#389600"><a href="#194216" label="[19:42:16]">&lt;g_bor[m]&gt;</a></span><span class="message">:) you might be right there :)</span></div><div class="line" id="194306"><span class="nick" style="color:#389600"><a href="#194306" label="[19:43:06]">&lt;g_bor[m]&gt;</a></span><span class="message">I was just wondering if anyone was playing with firmware here...</span></div><div class="line" id="200233"><span class="nick" style="color:#389600"><a href="#200233" label="[20:02:33]">&lt;g_bor[m]&gt;</a></span><span class="message">yuppee</span></div><div class="line" id="200242"><span class="nick" style="color:#389600"><a href="#200242" label="[20:02:42]">&lt;g_bor[m]&gt;</a></span><span class="message">I found something even better :)</span></div><div class="line" id="200335"><span class="nick" style="color:#389600"><a href="#200335" label="[20:03:35]">&lt;g_bor[m]&gt;</a></span><span class="message">you can add -d in_asm to your qemu command line, and it outputs every single guest instruction executed</span></div><div class="line" id="204100"><span class="nick" style="color:#6c3d55"><a href="#204100" label="[20:41:00]">&lt;fossy&gt;</a></span><span class="message">nore</span></div><div class="line" id="204103"><span class="nick" style="color:#6c3d55"><a href="#204103" label="[20:41:03]">&lt;fossy&gt;</a></span><span class="message">oops</span></div><div class="line" id="204130"><span class="nick" style="color:#6c3d55"><a href="#204130" label="[20:41:30]">&lt;fossy&gt;</a></span><span class="message">nore: very well done, I had been interested in ocaml bootstrap for a while, glad to see someone did it</span></div><div class="line" id="204316"><span class="nick" style="color:#6c3d55"><a href="#204316" label="[20:43:16]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Main_Page">https://bootstrapping.miraheze.org/wiki/Main_Page</a> </span></div><div class="line" id="204321"><span class="nick" style="color:#6c3d55"><a href="#204321" label="[20:43:21]">&lt;fossy&gt;</a></span><span class="message">Could add here</span></div><div class="line" id="213819"><span class="nick" style="color:#8dd3c7"><a href="#213819" label="[21:38:19]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977, fossy: so I briefly checked that microperl, it indeed deals only with ./Configure, so we need earlier miniperl's to get to 5.7. But then in principle microperl might be useful (to avoid writing our own makefiles)</span></div><div class="line" id="214325"><span class="nick" style="color:#bc80bd"><a href="#214325" label="[21:43:25]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: at least interesting. this really needs more time</span></div><div class="line" id="214434"><span class="nick" style="color:#8dd3c7"><a href="#214434" label="[21:44:34]">&lt;stikonas&gt;</a></span><span class="message">I think they just abandoned idea of rewriting configure in perl...</span></div><div class="line" id="214456"><span class="nick" style="color:#8dd3c7"><a href="#214456" label="[21:44:56]">&lt;stikonas&gt;</a></span><span class="message">at decided to keep metaconfig</span></div><div class="line" id="214524"><span class="nick" style="color:#bc80bd"><a href="#214524" label="[21:45:24]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: what is the problem with &quot;just&quot; download a recent version, build 'miniperl' aka 'metaconfig', generate ./Configure and let in compile?</span></div><div class="line" id="214557"><span class="nick" style="color:#bc80bd"><a href="#214557" label="[21:45:57]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: (i should better first try and then ask...)</span></div><div class="line" id="214634"><span class="nick" style="color:#8dd3c7"><a href="#214634" label="[21:46:34]">&lt;stikonas&gt;</a></span><span class="message">miniperl depends on some pre-generated header files</span></div><div class="line" id="214650"><span class="nick" style="color:#8dd3c7"><a href="#214650" label="[21:46:50]">&lt;stikonas&gt;</a></span><span class="message">if you are fine with those, then you might be able to build it</span></div><div class="line" id="214711"><span class="nick" style="color:#8dd3c7"><a href="#214711" label="[21:47:11]">&lt;stikonas&gt;</a></span><span class="message">(although, not sure how good tcc will be with modern perl)</span></div><div class="line" id="214720"><span class="nick" style="color:#bc80bd"><a href="#214720" label="[21:47:20]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: something for tomorrow, have to leave now, cu</span></div><div class="line" id="214727"><span class="nick" style="color:#8dd3c7"><a href="#214727" label="[21:47:27]">&lt;stikonas&gt;</a></span><span class="message">but we are trying to cleanly build those header files too</span></div><div class="line" id="214731"><span class="nick" style="color:#8dd3c7"><a href="#214731" label="[21:47:31]">&lt;stikonas&gt;</a></span><span class="message">sure, bye</span></div><div class="line" id="215510"><span class="nick" style="color:#af8d2f"><a href="#215510" label="[21:55:10]">&lt;roptat&gt;</a></span><span class="message">mh... reading the wiki after a while</span></div><div class="line" id="215548"><span class="nick" style="color:#af8d2f"><a href="#215548" label="[21:55:48]">&lt;roptat&gt;</a></span><span class="message">&quot;Julien started writing a bootstrap compiler for Scala in Java, which is already able to produce an AST for Scala files and produce JVM bytecode&quot; well, I never produced JVM bytecode, and the AST was incorrect, I never managed to write a correct parser for any complex scala file from scala sources</span></div><div class="line" id="215803"><span class="nick" style="color:#af8d2f"><a href="#215803" label="[21:58:03]">&lt;roptat&gt;</a></span><span class="message">I recently looked at this work again, and I decided to not use a parser generator, because they add to much constraint, compared to what scala does</span></div><div class="line" id="215834"><span class="nick" style="color:#af8d2f"><a href="#215834" label="[21:58:34]">&lt;roptat&gt;</a></span><span class="message">even the lexer will not give you the same symbols depending on the state of the parser, so I just gave up on this idea ^^'</span></div><div class="line" id="215836"><span class="nick" style="color:#389600"><a href="#215836" label="[21:58:36]">&lt;g_bor[m]&gt;</a></span><span class="message">roptat: iirc that compiler actually did something, don't know eaxctly what, but some parts of it were working...</span></div><div class="line" id="215850"><span class="nick" style="color:#af8d2f"><a href="#215850" label="[21:58:50]">&lt;roptat&gt;</a></span><span class="message">yes, it was able to show an AST</span></div><div class="line" id="215854"><span class="nick" style="color:#af8d2f"><a href="#215854" label="[21:58:54]">&lt;roptat&gt;</a></span><span class="message">but it was not correct</span></div><div class="line" id="215950"><span class="nick" style="color:#af8d2f"><a href="#215950" label="[21:59:50]">&lt;roptat&gt;</a></span><span class="message">last week-end I spent some time on that again, and managed to find and reimplement scala's lexer (well, a smaller version of it because I don't really need nice error messages or scaladoc support)</span></div><div class="line" id="220016"><span class="nick" style="color:#af8d2f"><a href="#220016" label="[22:00:16]">&lt;roptat&gt;</a></span><span class="message">I think my lexer is correct, but I still need to tackle the parser. Hopefully this time the AST it produces is correct</span></div><div class="line" id="220032"><span class="nick" style="color:#389600"><a href="#220032" label="[22:00:32]">&lt;g_bor[m]&gt;</a></span><span class="message">wow...</span></div><div class="line" id="220044"><span class="nick" style="color:#389600"><a href="#220044" label="[22:00:44]">&lt;g_bor[m]&gt;</a></span><span class="message">that is amazing</span></div><div class="line" id="220127"><span class="nick" style="color:#389600"><a href="#220127" label="[22:01:27]">&lt;g_bor[m]&gt;</a></span><span class="message">I guess scala is one of the most complex languages I have ever encountered</span></div><div class="line" id="220230"><span class="nick" style="color:#af8d2f"><a href="#220230" label="[22:02:30]">&lt;roptat&gt;</a></span><span class="message">a nice thing I found: when it encounters a &lt;, it will look at its surrounding and determine whether it's part of an operand (like -&gt; for instance) or if it's the beginning of an XML literal</span></div><div class="line" id="220304"><span class="nick" style="color:#af8d2f"><a href="#220304" label="[22:03:04]">&lt;roptat&gt;</a></span><span class="message">then if the parser encounters the XMLSTART symbol, it's supposed to switch lexer temporarily and use it to parse the XML literal, then switch back to scala's parser</span></div><div class="line" id="220415"><span class="nick" style="color:#af8d2f"><a href="#220415" label="[22:04:15]">&lt;roptat&gt;</a></span><span class="message">some tokens depend on whether we're inside braces or parenthesis, ...</span></div><div class="line" id="220542"><span class="nick" style="color:#af8d2f"><a href="#220542" label="[22:05:42]">&lt;roptat&gt;</a></span><span class="message">scala has &quot;interpolated strings&quot;, that you can write like symbol&quot;something ${escape}&quot;. Normally &quot;symbol&quot; would be an identifier, but in this case they need to produce a different token</span></div><div class="line" id="220614"><span class="nick" style="color:#af8d2f"><a href="#220614" label="[22:06:14]">&lt;roptat&gt;</a></span><span class="message">and obviously inside ${} you can put arbitrary scala code, so the lexer needs to rember it was inside an interpolated string</span></div><div class="line" id="220628"><span class="nick" style="color:#af8d2f"><a href="#220628" label="[22:06:28]">&lt;roptat&gt;</a></span><span class="message">no wonder I couldn't do it with a normal parser generator</span></div><div class="line" id="220830"><span class="nick" style="color:#af8d2f"><a href="#220830" label="[22:08:30]">&lt;roptat&gt;</a></span><span class="message">anyway, I'm too busy to continue that before march I think, but it's already been at least two years since I started looking into that, so that's not so long to wait for more news :p</span></div><div class="line" id="221012"><span class="nick" style="color:#af8d2f"><a href="#221012" label="[22:10:12]">&lt;roptat&gt;</a></span><span class="message">oh, and during the guix day I tried to contact the author of JaCo, a compiler for a superset of Java 1.4, that was used to build the first versions of Scala, but never received an answer, unfortunately</span></div><div class="line" id="223827"><span class="nick" style="color:#8dd3c7"><a href="#223827" label="[22:38:27]">&lt;Noisytoot&gt;</a></span><span class="message">roptat: I thought the email didn't exist</span></div><div class="line" id="231020"><span class="nick" style="color:#af8d2f"><a href="#231020" label="[23:10:20]">&lt;roptat&gt;</a></span><span class="message">the one on the webpage, but I tracked the author down and sent them an email to another address :)</span></div><div class="line" id="235756"><span class="nick" style="color:#6b8072"><a href="#235756" label="[23:57:56]">&lt;OriansJ&gt;</a></span><span class="message">roptat: well perhaps Guix needs to consider the forbidding of the use of generated &quot;Source&quot; files for builds to help highlight the bootstrapping problem.</span></div><div class="line" id="235945"><span class="nick" style="color:#8dd3c7"><a href="#235945" label="[23:59:45]">&lt;stikonas&gt;</a></span><span class="message">that is not really even source file</span></div><div class="line" id="235952"><span class="nick" style="color:#8dd3c7"><a href="#235952" label="[23:59:52]">&lt;stikonas&gt;</a></span><span class="message">there is no way I would call bytecode source</span></div><br /></div></body></html>