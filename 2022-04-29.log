<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025359"><span class="nick" style="color:#8dd3c7"><a href="#025359" label="[02:53:59]">&lt;theruran&gt;</a></span><span class="message">has anyone bootstrapped from hex0 to a Forth already?</span></div><div class="line" id="100746"><span class="nick" style="color:#2e2a4a"><a href="#100746" label="[10:07:46]">&lt;j-k[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Bootstrapping_Specific_Languages#FORTH">https://bootstrapping.miraheze.org/wiki/Bootstrapping_Specific_Languages#FORTH</a> </span></div><div class="line" id="103516"><span class="nick" style="color:#6b8072"><a href="#103516" label="[10:35:16]">&lt;stikonas[m]&gt;</a></span><span class="message">theruran: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a> </span></div><div class="line" id="103536"><span class="nick" style="color:#6b8072"><a href="#103536" label="[10:35:36]">&lt;stikonas[m]&gt;</a></span><span class="message">But nobody managed or wanted to make any use of it</span></div><div class="line" id="103619"><span class="nick" style="color:#6b8072"><a href="#103619" label="[10:36:19]">&lt;stikonas[m]&gt;</a></span><span class="message">So instead we have cc_* C compilers written in assembly</span></div><div class="line" id="134447"><span class="nick" style="color:#80b1d3"><a href="#134447" label="[13:44:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, how does xbps handle conflicts between packages (e.g. if we already have some file installed). Does it simply overwrite files or errors out?</span></div><div class="line" id="161047"><span class="nick" style="color:#8dd3c7"><a href="#161047" label="[16:10:47]">&lt;theruran&gt;</a></span><span class="message">stikonas[m]: what was the suggested path using Forth? I found a barebones Scheme written in Gforth that is licensed GPLv2. seemed easy to audit: <a rel="nofollow" href="https://git.hackers.town/theruran/Scheme-in-Forth">https://git.hackers.town/theruran/Scheme-in-Forth</a> </span></div><div class="line" id="161121"><span class="nick" style="color:#80b1d3"><a href="#161121" label="[16:11:21]">&lt;stikonas&gt;</a></span><span class="message">theruran: there is no suggested path</span></div><div class="line" id="161152"><span class="nick" style="color:#80b1d3"><a href="#161152" label="[16:11:52]">&lt;stikonas&gt;</a></span><span class="message">right now we don't even have forth in stage0-posix, only in stage0</span></div><div class="line" id="161156"><span class="nick" style="color:#8dd3c7"><a href="#161156" label="[16:11:56]">&lt;theruran&gt;</a></span><span class="message">hm alright. lemme sync stage0 repo and give it a try</span></div><div class="line" id="161203"><span class="nick" style="color:#8dd3c7"><a href="#161203" label="[16:12:03]">&lt;theruran&gt;</a></span><span class="message">I see</span></div><div class="line" id="161347"><span class="nick" style="color:#80b1d3"><a href="#161347" label="[16:13:47]">&lt;stikonas&gt;</a></span><span class="message">and that barebones scheme has the same problem as forth, they are both very simple, so can't bootstrap anything in out current bootstrap path. Both will need extending</span></div><div class="line" id="161400"><span class="nick" style="color:#80b1d3"><a href="#161400" label="[16:14:00]">&lt;stikonas&gt;</a></span><span class="message">that lisp implementation won't be able to run mescc</span></div><div class="line" id="161419"><span class="nick" style="color:#8dd3c7"><a href="#161419" label="[16:14:19]">&lt;theruran&gt;</a></span><span class="message">so this forth.s cannot take file input</span></div><div class="line" id="161441"><span class="nick" style="color:#80b1d3"><a href="#161441" label="[16:14:41]">&lt;stikonas&gt;</a></span><span class="message">well, it takes one tape in and one tape out</span></div><div class="line" id="161448"><span class="nick" style="color:#80b1d3"><a href="#161448" label="[16:14:48]">&lt;stikonas&gt;</a></span><span class="message">there are no files on baremetal</span></div><div class="line" id="161454"><span class="nick" style="color:#8dd3c7"><a href="#161454" label="[16:14:54]">&lt;theruran&gt;</a></span><span class="message">got it</span></div><div class="line" id="161459"><span class="nick" style="color:#80b1d3"><a href="#161459" label="[16:14:59]">&lt;stikonas&gt;</a></span><span class="message">for concept of file, you need kernel and that's stage0-posix</span></div><div class="line" id="161516"><span class="nick" style="color:#80b1d3"><a href="#161516" label="[16:15:16]">&lt;stikonas&gt;</a></span><span class="message">but then you also need to implement common syscalls in forth if you want to port it to posix</span></div><div class="line" id="161532"><span class="nick" style="color:#80b1d3"><a href="#161532" label="[16:15:32]">&lt;stikonas&gt;</a></span><span class="message">i.e. printing stuff, file input/output, executing other calls</span></div><div class="line" id="161548"><span class="nick" style="color:#8dd3c7"><a href="#161548" label="[16:15:48]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a>  :D</span></div><div class="line" id="161605"><span class="nick" style="color:#80b1d3"><a href="#161605" label="[16:16:05]">&lt;stikonas&gt;</a></span><span class="message">this would make forth quite a bit bigger</span></div><div class="line" id="161642"><span class="nick" style="color:#80b1d3"><a href="#161642" label="[16:16:42]">&lt;stikonas&gt;</a></span><span class="message">and we do have cc_x86 anyway</span></div><div class="line" id="161803"><span class="nick" style="color:#8dd3c7"><a href="#161803" label="[16:18:03]">&lt;theruran&gt;</a></span><span class="message">that's the one written in M2-Planet?</span></div><div class="line" id="161830"><span class="nick" style="color:#80b1d3"><a href="#161830" label="[16:18:30]">&lt;stikonas&gt;</a></span><span class="message">no, that's the one written in M0 assembly</span></div><div class="line" id="161841"><span class="nick" style="color:#80b1d3"><a href="#161841" label="[16:18:41]">&lt;stikonas&gt;</a></span><span class="message">it's quite similar to M2-Planet in terms of algorithm</span></div><div class="line" id="161845"><span class="nick" style="color:#80b1d3"><a href="#161845" label="[16:18:45]">&lt;stikonas&gt;</a></span><span class="message">though a bit simpler</span></div><div class="line" id="161850"><span class="nick" style="color:#80b1d3"><a href="#161850" label="[16:18:50]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is then written in C</span></div><div class="line" id="161908"><span class="nick" style="color:#80b1d3"><a href="#161908" label="[16:19:08]">&lt;stikonas&gt;</a></span><span class="message">the good thing is that they can reuse the same C library (M2libc)</span></div><div class="line" id="161926"><span class="nick" style="color:#80b1d3"><a href="#161926" label="[16:19:26]">&lt;stikonas&gt;</a></span><span class="message">as I've said, for forth, you would need to write your &quot;forth library&quot;</span></div><div class="line" id="161946"><span class="nick" style="color:#80b1d3"><a href="#161946" label="[16:19:46]">&lt;stikonas&gt;</a></span><span class="message">that implements stuff like file i/o, process calls, etc in assembly</span></div><div class="line" id="161956"><span class="nick" style="color:#8dd3c7"><a href="#161956" label="[16:19:56]">&lt;theruran&gt;</a></span><span class="message">right. sounds like a lot of work :) I've never written Forth before. I was curious, and maybe I'll get into it</span></div><div class="line" id="162017"><span class="nick" style="color:#8dd3c7"><a href="#162017" label="[16:20:17]">&lt;theruran&gt;</a></span><span class="message">fun path to go down</span></div><div class="line" id="162034"><span class="nick" style="color:#80b1d3"><a href="#162034" label="[16:20:34]">&lt;stikonas&gt;</a></span><span class="message">well, if you want to learn Forth then maybe</span></div><div class="line" id="162047"><span class="nick" style="color:#80b1d3"><a href="#162047" label="[16:20:47]">&lt;stikonas&gt;</a></span><span class="message">but in terms of benefit, it would be slower than C</span></div><div class="line" id="162103"><span class="nick" style="color:#80b1d3"><a href="#162103" label="[16:21:03]">&lt;stikonas&gt;</a></span><span class="message">and might even end up harder to maintain due to lack of forth programmers</span></div><div class="line" id="162353"><span class="nick" style="color:#8dd3c7"><a href="#162353" label="[16:23:53]">&lt;theruran&gt;</a></span><span class="message">how can I test stage0 forth? I don't see a test tape</span></div><div class="line" id="164435"><span class="nick" style="color:#80b1d3"><a href="#164435" label="[16:44:35]">&lt;stikonas&gt;</a></span><span class="message">you can run it in vm</span></div><div class="line" id="164453"><span class="nick" style="color:#80b1d3"><a href="#164453" label="[16:44:53]">&lt;stikonas&gt;</a></span><span class="message">build stage0-vm and then it's something like ./vm ROM tape1 tape2</span></div><div class="line" id="164516"><span class="nick" style="color:#80b1d3"><a href="#164516" label="[16:45:16]">&lt;stikonas&gt;</a></span><span class="message">but I don't think we have any test inputs written in forth for tape1</span></div><div class="line" id="220119"><span class="nick" style="color:#6d2462"><a href="#220119" label="[22:01:19]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: the conflicts between packages would interest me too, an example would be the automake packages (at least the two i encounter early on have a conflicting automake binary)</span></div><div class="line" id="235025"><span class="nick" style="color:#6b8072"><a href="#235025" label="[23:50:25]">&lt;stikonas[m]&gt;</a></span><span class="message">bauen1: that's kind of the reason I asked</span></div><div class="line" id="235105"><span class="nick" style="color:#6b8072"><a href="#235105" label="[23:51:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Although early packages are not xbps based</span></div><br /></div></body></html>