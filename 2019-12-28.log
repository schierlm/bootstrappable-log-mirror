<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-12-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004217"><span class="nick" style="color:#389600"><a href="#004217" label="[00:42:17]">&lt;oriansj&gt;</a></span><span class="message">no potential solutions? nor ideas how to address this issue?</span></div><div class="line" id="024943"><span class="nick" style="color:#2e2a4a"><a href="#024943" label="[02:49:43]">&lt;xentrac&gt;</a></span><span class="message">I haven't done enough with golang</span></div><div class="line" id="025108"><span class="nick" style="color:#2e2a4a"><a href="#025108" label="[02:51:08]">&lt;xentrac&gt;</a></span><span class="message">do you mean the issue of gccgo lacking 1.4, or the issue of autogenerated code?</span></div><div class="line" id="025152"><span class="nick" style="color:#2e2a4a"><a href="#025152" label="[02:51:52]">&lt;xentrac&gt;</a></span><span class="message">if it's just a matter of a 1.3 to 1.4 gap, it seems like it's probably not hard to hack the golang version of 6g or whatever to compile in 1.3</span></div><div class="line" id="025208"><span class="nick" style="color:#2e2a4a"><a href="#025208" label="[02:52:08]">&lt;xentrac&gt;</a></span><span class="message">but it might be more globally optimal to upgrade gccgo to 1.4</span></div><div class="line" id="030651"><span class="nick" style="color:#389600"><a href="#030651" label="[03:06:51]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I was thinking more of my current problem of figuring out good tests for scheme module support in mes-m2</span></div><div class="line" id="044153"><span class="nick" style="color:#2e2a4a"><a href="#044153" label="[04:41:53]">&lt;xentrac&gt;</a></span><span class="message">ah.  scheme has modules now?</span></div><div class="line" id="045427"><span class="nick" style="color:#389600"><a href="#045427" label="[04:54:27]">&lt;oriansj&gt;</a></span><span class="message">xentrac: yep and it appears to need to be supported for alot of important scheme programs</span></div><div class="line" id="045634"><span class="nick" style="color:#2e2a4a"><a href="#045634" label="[04:56:34]">&lt;xentrac&gt;</a></span><span class="message">that's real progress.  I really ought to have been keeping up with this R7RS stuff</span></div><div class="line" id="050505"><span class="nick" style="color:#389600"><a href="#050505" label="[05:05:05]">&lt;oriansj&gt;</a></span><span class="message">xentrac: but the real problem is one needs guile to bootstrap guile from human written source. Hence the need to get mes-m2 fully compatible with guile to enable solving that bootstrap problem as well.</span></div><div class="line" id="050923"><span class="nick" style="color:#2e2a4a"><a href="#050923" label="[05:09:23]">&lt;xentrac&gt;</a></span><span class="message">because of syntax-case?</span></div><div class="line" id="052932"><span class="nick" style="color:#389600"><a href="#052932" label="[05:29:32]">&lt;oriansj&gt;</a></span><span class="message">because of psyntax</span></div><div class="line" id="072447"><span class="nick" style="color:#2e2a4a"><a href="#072447" label="[07:24:47]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="143740"><span class="nick" style="color:#389600"><a href="#143740" label="[14:37:40]">&lt;oriansj&gt;</a></span><span class="message">xentrac: so the problem I am supposed to solve with mes-m2 is have a scheme interpreter bootstrappable from M2-Planet, that is also able to run MesCC, Guix and compatible enough to bootstrap guile. As this is a heavy problem with lots of fiddly bits, good tests are fundamental to getting there.</span></div><div class="line" id="143949"><span class="nick" style="color:#389600"><a href="#143949" label="[14:39:49]">&lt;oriansj&gt;</a></span><span class="message">Adding guile primitives is just a simple incremental problem but major pieces like macro support and module support need to be perfect to make this all work.</span></div><div class="line" id="144045"><span class="nick" style="color:#389600"><a href="#144045" label="[14:40:45]">&lt;oriansj&gt;</a></span><span class="message">Hence why I am having so much trouble with writing a good test for modules</span></div><div class="line" id="144616"><span class="nick" style="color:#6b8072"><a href="#144616" label="[14:46:16]">&lt;deesix&gt;</a></span><span class="message">Hello!</span></div><div class="line" id="144730"><span class="nick" style="color:#6b8072"><a href="#144730" label="[14:47:30]">&lt;deesix&gt;</a></span><span class="message">What's so hard about writing some code that uses modules?</span></div><div class="line" id="150330"><span class="nick" style="color:#6b8072"><a href="#150330" label="[15:03:30]">&lt;deesix&gt;</a></span><span class="message">Also, no implementation has tests already? (excuse the silly questions, but I'm sure I'm missing something and I'm trying to close the gap)</span></div><div class="line" id="150529"><span class="nick" style="color:#389600"><a href="#150529" label="[15:05:29]">&lt;oriansj&gt;</a></span><span class="message">deesix: the hard part is I need to figure out the edges of guile's behavior to ensure compatibility to write a test that hits all of them</span></div><div class="line" id="150746"><span class="nick" style="color:#389600"><a href="#150746" label="[15:07:46]">&lt;oriansj&gt;</a></span><span class="message">it also could be me stuck in perfection mode again and not able to commit to a test because I want it to be perfect first</span></div><div class="line" id="150849"><span class="nick" style="color:#6b8072"><a href="#150849" label="[15:08:49]">&lt;deesix&gt;</a></span><span class="message">I guess it's easier to go for several tests, not just one. And create more as edges are found in real world code.</span></div><div class="line" id="150916"><span class="nick" style="color:#389600"><a href="#150916" label="[15:09:16]">&lt;oriansj&gt;</a></span><span class="message">very true</span></div><div class="line" id="151037"><span class="nick" style="color:#6b8072"><a href="#151037" label="[15:10:37]">&lt;deesix&gt;</a></span><span class="message">That &quot;real world code&quot; being the code we care about, for the bootstrap; no more.</span></div><div class="line" id="151118"><span class="nick" style="color:#389600"><a href="#151118" label="[15:11:18]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="151342"><span class="nick" style="color:#6b8072"><a href="#151342" label="[15:13:42]">&lt;deesix&gt;</a></span><span class="message">Talking about testing... IIRC, M2-Planet gained support for signed types but no tests were added, right?</span></div><div class="line" id="151512"><span class="nick" style="color:#389600"><a href="#151512" label="[15:15:12]">&lt;oriansj&gt;</a></span><span class="message">deesix: correct, I've been so stuck on mes-m2 that I never wrote a good test for signed and unsigned behavior (which would make M2-Planet match gcc in behavior)</span></div><div class="line" id="151849"><span class="nick" style="color:#6b8072"><a href="#151849" label="[15:18:49]">&lt;deesix&gt;</a></span><span class="message">Fair enough. It'd be great to have some for helping me implement/validate the AArch64 target.</span></div><div class="line" id="152024"><span class="nick" style="color:#389600"><a href="#152024" label="[15:20:24]">&lt;oriansj&gt;</a></span><span class="message">deesix: I am guessing because AArch64 is like armv7l in lacking divide instructions?</span></div><div class="line" id="152504"><span class="nick" style="color:#6b8072"><a href="#152504" label="[15:25:04]">&lt;deesix&gt;</a></span><span class="message">I haven't researched anything yet, just thinking in the usual workflow I used (making the tests pass).</span></div><div class="line" id="152854"><span class="nick" style="color:#389600"><a href="#152854" label="[15:28:54]">&lt;oriansj&gt;</a></span><span class="message">deesix: well dddddd is currently working on the AArch64 port of M2-Planet</span></div><div class="line" id="152912"><span class="nick" style="color:#6b8072"><a href="#152912" label="[15:29:12]">&lt;deesix&gt;</a></span><span class="message">Oh, sorry... I'm dddddd.</span></div><div class="line" id="152953"><span class="nick" style="color:#389600"><a href="#152953" label="[15:29:53]">&lt;oriansj&gt;</a></span><span class="message">got it</span></div><div class="line" id="153050"><span class="nick" style="color:#389600"><a href="#153050" label="[15:30:50]">&lt;oriansj&gt;</a></span><span class="message">well the good news is one can simply just copy the unsigned instructions to pass the current tests</span></div><div class="line" id="153205"><span class="nick" style="color:#389600"><a href="#153205" label="[15:32:05]">&lt;oriansj&gt;</a></span><span class="message">but it would be wise to add another test, which tests for the behavior of signed operations one at a time.</span></div><div class="line" id="153628"><span class="nick" style="color:#389600"><a href="#153628" label="[15:36:28]">&lt;oriansj&gt;</a></span><span class="message">now if you look at promote_type in cc_core.c you'll see the behavior is first match and if you look at initialize_types in cc_types.c; that the types are defined in the order void-&gt;unsigned long-&gt;long-&gt;unsigned-&gt;int-&gt;char*-&gt;char-&gt;FILE-&gt;FUNCTION</span></div><div class="line" id="153724"><span class="nick" style="color:#389600"><a href="#153724" label="[15:37:24]">&lt;oriansj&gt;</a></span><span class="message">to get the signed path simply use int or long and to get the unsigned path just use SCM or unsigned</span></div><div class="line" id="161819"><span class="nick" style="color:#6b8072"><a href="#161819" label="[16:18:19]">&lt;deesix&gt;</a></span><span class="message">Correct, using the same code for both parameters of the new arithmetic_recursion() does not break the tests, kind of unexpected.</span></div><div class="line" id="163142"><span class="nick" style="color:#6b8072"><a href="#163142" label="[16:31:42]">&lt;deesix&gt;</a></span><span class="message">From commit dea4f902b729:</span></div><div class="line" id="163150"><span class="nick" style="color:#6b8072"><a href="#163150" label="[16:31:50]">&lt;deesix&gt;</a></span><span class="message">-DEFINE MULTIPLY_eax_by_ebx_into_eax F7E3</span></div><div class="line" id="163150"><span class="nick" style="color:#6b8072"><a href="#163150" label="[16:31:50]">&lt;deesix&gt;</a></span><span class="message">+DEFINE MULTIPLY_eax_by_ebx_into_eax F7EB</span></div><div class="line" id="163151"><span class="nick" style="color:#6b8072"><a href="#163151" label="[16:31:51]">&lt;deesix&gt;</a></span><span class="message">+DEFINE MULTIPLYS_eax_by_ebx_into_eax F7E3</span></div><div class="line" id="163403"><span class="nick" style="color:#6b8072"><a href="#163403" label="[16:34:03]">&lt;deesix&gt;</a></span><span class="message">For other operations you just added the signed part, but for multiply the assumption seem to be different (that before the commit, the operation was unsigned being multiply the exception).</span></div><div class="line" id="164235"><span class="nick" style="color:#80b1d3"><a href="#164235" label="[16:42:35]">*</a></span><span class="message">deesix looks at the /interesting/ knight diff</span></div><div class="line" id="164353"><span class="nick" style="color:#6b8072"><a href="#164353" label="[16:43:53]">&lt;deesix&gt;</a></span><span class="message">... there, div &amp; mod were unsigned before the commit</span></div><div class="line" id="164432"><span class="nick" style="color:#6b8072"><a href="#164432" label="[16:44:32]">&lt;deesix&gt;</a></span><span class="message">*only div &amp; mod</span></div><div class="line" id="165133"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="165319"><span class="nick" style="color:#6b8072"><a href="#165319" label="[16:53:19]">&lt;deesix&gt;</a></span><span class="message">So, it seems to me that we're really lacking tests for unsigned instead of tests for signed.</span></div><div class="line" id="165507"><span class="nick" style="color:#6b8072"><a href="#165507" label="[16:55:07]">&lt;deesix&gt;</a></span><span class="message">Maybe a bit on both sides, but I was thinking that you added signed but now I'm starting to understand that is a bit more complex than that.</span></div><div class="line" id="165820"><span class="nick" style="color:#80b1d3"><a href="#165820" label="[16:58:20]">*</a></span><span class="message">deesix refocus and approach it againg thinking &quot;unsigned is the new feature&quot;</span></div><div class="line" id="170034"><span class="nick" style="color:#6b8072"><a href="#170034" label="[17:00:34]">&lt;deesix&gt;</a></span><span class="message">*again</span></div><div class="line" id="171520"><span class="nick" style="color:#389600"><a href="#171520" label="[17:15:20]">&lt;oriansj&gt;</a></span><span class="message">deesix: well the behavior differences in gcc for signed and unsigned for addition and subtraction never occurred (eg unsigned i = -1;)</span></div><div class="line" id="171619"><span class="nick" style="color:#389600"><a href="#171619" label="[17:16:19]">&lt;oriansj&gt;</a></span><span class="message">the reason that division was unsigned be default is because of the implementation of hex2 required the unsigned division to produce the correct results for x86 labels</span></div><div class="line" id="171728"><span class="nick" style="color:#389600"><a href="#171728" label="[17:17:28]">&lt;oriansj&gt;</a></span><span class="message">on x86 unsigned and signed multiplication produced the same output on the range of numbers being used. So you are correct in that unsigned is the new feature with that change</span></div><div class="line" id="172250"><span class="nick" style="color:#389600"><a href="#172250" label="[17:22:50]">&lt;oriansj&gt;</a></span><span class="message">as mes-m2 required both signed and unsigned divsion behavior to comply with guile's expected behavior given the same inputs; to save the complexity, I just simply made M2-Planet do the correct thing for all operations instead. (even though it doesn't depend upon divisioin of anykind internally but rather bit shifts and masking to make it easier to bootstrap on Relay/TTL implementations)</span></div><div class="line" id="172633"><span class="nick" style="color:#6b8072"><a href="#172633" label="[17:26:33]">&lt;deesix&gt;</a></span><span class="message">I see, so what the changelog tells is just a simplification.</span></div><div class="line" id="172707"><span class="nick" style="color:#6b8072"><a href="#172707" label="[17:27:07]">&lt;deesix&gt;</a></span><span class="message">+Added support for signed multiplication, division and modulus</span></div><div class="line" id="172720"><span class="nick" style="color:#389600"><a href="#172720" label="[17:27:20]">&lt;oriansj&gt;</a></span><span class="message">correct</span></div><div class="line" id="173500"><span class="nick" style="color:#389600"><a href="#173500" label="[17:35:00]">&lt;oriansj&gt;</a></span><span class="message">we are just lucky that no architectures are little bit-endian because that would be real trouble</span></div><div class="line" id="173530"><span class="nick" style="color:#389600"><a href="#173530" label="[17:35:30]">&lt;oriansj&gt;</a></span><span class="message">(or more precisely no suriviving architectures are little bit endian)</span></div><div class="line" id="175453"><span class="nick">***</span><span class="message notice">freedom is now known as gnufr33d0m</span></div><div class="line" id="175607"><span class="nick" style="color:#389600"><a href="#175607" label="[17:56:07]">&lt;oriansj&gt;</a></span><span class="message">as per the previous question, should M2-Planet v1.x support switch statements</span></div><div class="line" id="180707"><span class="nick" style="color:#6b8072"><a href="#180707" label="[18:07:07]">&lt;deesix&gt;</a></span><span class="message">I'd say no unless required by some piece of the bootstrap puzzle. Do you have any use in mind?</span></div><div class="line" id="192528"><span class="nick" style="color:#389600"><a href="#192528" label="[19:25:28]">&lt;oriansj&gt;</a></span><span class="message">deesix: no; but I know people want it and it is frequently used in schemes for performance enhancing tricks</span></div><div class="line" id="193644"><span class="nick" style="color:#6b8072"><a href="#193644" label="[19:36:44]">&lt;deesix&gt;</a></span><span class="message">In AArch64 MUL is an alias of MADD. MADD is unsigned (notice the use if UInt in documentation/reference pseudocodes). This is not the first time I look into the multiplication family of instructions but I can't find one for signed operands. Any hints? For division it's clear (UDIV &amp; SDIV). What am I missing? Some 2-complement arith property?</span></div><div class="line" id="193810"><span class="nick" style="color:#6b8072"><a href="#193810" label="[19:38:10]">&lt;deesix&gt;</a></span><span class="message">I'd like something like SMUL Xd, Xm, Xn</span></div><div class="line" id="194038"><span class="nick" style="color:#6b8072"><a href="#194038" label="[19:40:38]">&lt;deesix&gt;</a></span><span class="message">SMULL Xd, Wn, Wm is the closest one, but uses only 32bits of the registers (the &quot;W&quot; part).</span></div><div class="line" id="194117"><span class="nick" style="color:#389600"><a href="#194117" label="[19:41:17]">&lt;oriansj&gt;</a></span><span class="message">deesix: well there isn't a difference if one doesn't care about the top half of the multiplication</span></div><div class="line" id="194152"><span class="nick" style="color:#389600"><a href="#194152" label="[19:41:52]">&lt;oriansj&gt;</a></span><span class="message">aka one only has different signed and unsigned multiplication if one expects to extend to more bits in the register later</span></div><div class="line" id="194310"><span class="nick" style="color:#389600"><a href="#194310" label="[19:43:10]">&lt;oriansj&gt;</a></span><span class="message">so there is a possiblity that AArch64 might require developers to just do the wrong thing.</span></div><div class="line" id="194324"><span class="nick" style="color:#389600"><a href="#194324" label="[19:43:24]">&lt;oriansj&gt;</a></span><span class="message">and always use unsigned multiply</span></div><div class="line" id="194357"><span class="nick" style="color:#389600"><a href="#194357" label="[19:43:57]">&lt;oriansj&gt;</a></span><span class="message">(32bitx32bit=&gt;64bit)</span></div><div class="line" id="195440"><span class="nick" style="color:#6b8072"><a href="#195440" label="[19:54:40]">&lt;deesix&gt;</a></span><span class="message">Yeah, for the overflow 64x64=&gt;128bits there's SMULH, UMULH... which increases my confusion about the signedness of MUL. There's an example in ARM doc 100898_0100_en.</span></div><div class="line" id="200342"><span class="nick" style="color:#6b8072"><a href="#200342" label="[20:03:42]">&lt;deesix&gt;</a></span><span class="message">wikipedia: &quot;&quot;&quot;two's complement has the advantage that the fundamental arithmetic operations of addition, subtraction, and multiplication are identical to those for unsigned binary numbers (as long as the inputs are represented in the same number of bits - as the output, and any overflow beyond those bits is discarded from the result)&quot;&quot;&quot;</span></div><div class="line" id="200355"><span class="nick" style="color:#6b8072"><a href="#200355" label="[20:03:55]">&lt;deesix&gt;</a></span><span class="message">That rings some bells indeed.</span></div><div class="line" id="205136"><span class="nick" style="color:#389600"><a href="#205136" label="[20:51:36]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="210244"><span class="nick" style="color:#2e2a4a"><a href="#210244" label="[21:02:44]">&lt;xentrac&gt;</a></span><span class="message">most CPUs with multiplication do have an instruction that provides a full-width result even if it doesn't fit in registers</span></div><div class="line" id="210314"><span class="nick" style="color:#2e2a4a"><a href="#210314" label="[21:03:14]">&lt;xentrac&gt;</a></span><span class="message">they just put it in two registers</span></div><div class="line" id="211315"><span class="nick" style="color:#6b8072"><a href="#211315" label="[21:13:15]">&lt;deesix&gt;</a></span><span class="message">I think that's the case here, xentrac, with a combo of MUL then (for the overflowing part) SMULH/UMULH. What confuses me is that there's only MUL (which I guess is valid for both signed and unsigned combos) (?)</span></div><div class="line" id="211514"><span class="nick" style="color:#389600"><a href="#211514" label="[21:15:14]">&lt;oriansj&gt;</a></span><span class="message">deesix: it is only valid if they don't extend the register size at all (ever)</span></div><div class="line" id="211607"><span class="nick" style="color:#389600"><a href="#211607" label="[21:16:07]">&lt;oriansj&gt;</a></span><span class="message">otherwise they will run into the same issue that SPARC did when they moved to 64bits</span></div><div class="line" id="213708"><span class="nick" style="color:#6b8072"><a href="#213708" label="[21:37:08]">&lt;deesix&gt;</a></span><span class="message">I don't think it changes any size, I only see the possibility of a ZeroExtend in the &quot;X[] - assignment form&quot; in the final line (X[d] = result&lt;destsize-1:0&gt;;) of the underlying MADD.</span></div><div class="line" id="213816"><span class="nick" style="color:#6b8072"><a href="#213816" label="[21:38:16]">&lt;deesix&gt;</a></span><span class="message">Page 742 of DDI 0596 ID091318</span></div><div class="line" id="214330"><span class="nick" style="color:#6b8072"><a href="#214330" label="[21:43:30]">&lt;deesix&gt;</a></span><span class="message">In any case, I don't understand the &quot;assert n &gt;= 0 &amp;&amp; n &lt;= 31;&quot; in page 1651 (where X[] is documented)</span></div><div class="line" id="215955"><span class="nick" style="color:#389600"><a href="#215955" label="[21:59:55]">&lt;oriansj&gt;</a></span><span class="message">deesix: overflow for signed is generally undefined in C</span></div><div class="line" id="225809"><span class="nick" style="color:#6b8072"><a href="#225809" label="[22:58:09]">&lt;deesix&gt;</a></span><span class="message">OK. So, to wrap up: my actual plan is to take care of division and modulo and leave the rest untouched. I even like to don't repeat code (avoid using arithmetic_recursion() if both arguments are equal). Is that fine?</span></div><div class="line" id="230506"><span class="nick" style="color:#6b8072"><a href="#230506" label="[23:05:06]">&lt;deesix&gt;</a></span><span class="message">I think it makes obvious that there's no different handling for signed/unsigned, instead of read carefully both args only to discover they are the same.</span></div><div class="line" id="232020"><span class="nick" style="color:#389600"><a href="#232020" label="[23:20:20]">&lt;oriansj&gt;</a></span><span class="message">deesix: a reasonable approximation of correct is fine. We can always change it later if we need to</span></div><br /></div></body></html>