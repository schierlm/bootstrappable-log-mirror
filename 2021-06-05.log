<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001049"><span class="nick" style="color:#8dd3c7"><a href="#001049" label="[00:10:49]">&lt;oriansj&gt;</a></span><span class="message">Melg8: it is what janneke usually uses as a base test for mescc if I remember correctly</span></div><div class="line" id="001113"><span class="nick" style="color:#2e2a4a"><a href="#001113" label="[00:11:13]">&lt;Melg8&gt;</a></span><span class="message">okay)</span></div><div class="line" id="001114"><span class="nick" style="color:#2e2a4a"><a href="#001114" label="[00:11:14]">&lt;Melg8&gt;</a></span><span class="message">thanks)</span></div><div class="line" id="001350"><span class="nick" style="color:#8dd3c7"><a href="#001350" label="[00:13:50]">&lt;oriansj&gt;</a></span><span class="message">The exact details of MesCC's behavior isn't something I am deeply familiar with but the output of MesCC is just standard M1 files like M2-Planet produces which M1 converts to hex2 files and hex2 glues everything together into the final binary.</span></div><div class="line" id="001510"><span class="nick" style="color:#8dd3c7"><a href="#001510" label="[00:15:10]">&lt;oriansj&gt;</a></span><span class="message">Which is why I probably should harmonize MesCC and M2-Planet's M1 defines to make a common M2libc an easier sell.</span></div><div class="line" id="014013"><span class="nick" style="color:#6b8072"><a href="#014013" label="[01:40:13]">&lt;Melg8[m]&gt;</a></span><span class="message">Does order matter when &quot;catm ${libdir}/x86-mes/libc.a eputs.o oputs.o globals.o exit.o _exit.o _write.o puts.o&quot; - doing this?</span></div><div class="line" id="014241"><span class="nick" style="color:#6b8072"><a href="#014241" label="[01:42:41]">&lt;Melg8[m]&gt;</a></span><span class="message">and btw (libc-mini.a/.s) - no check of sha256sum for them?</span></div><div class="line" id="014527"><span class="nick" style="color:#80b1d3"><a href="#014527" label="[01:45:27]">&lt;vagrantc&gt;</a></span><span class="message">[/4</span></div><div class="line" id="021809"><span class="nick" style="color:#8dd3c7"><a href="#021809" label="[02:18:09]">&lt;oriansj&gt;</a></span><span class="message">Melg8: well hex2 supports both backwards and forward references and M1 doesn't care. So the order of the M1 files doesn't actually matter in regards to functionality but it does in regards to the final SHA256SUM</span></div><div class="line" id="021844"><span class="nick" style="color:#2e2a4a"><a href="#021844" label="[02:18:44]">&lt;Melg8&gt;</a></span><span class="message">oriansj okay, than i will keep it)</span></div><div class="line" id="021914"><span class="nick" style="color:#8dd3c7"><a href="#021914" label="[02:19:14]">&lt;oriansj&gt;</a></span><span class="message">but generally always put the DEFINEs before using the DEFINED values as M0 will not support such cases.</span></div><div class="line" id="022037"><span class="nick" style="color:#8dd3c7"><a href="#022037" label="[02:20:37]">&lt;oriansj&gt;</a></span><span class="message">(M0 requires you to do DEFINE foo 123 before you can use foo)</span></div><div class="line" id="022228"><span class="nick" style="color:#8dd3c7"><a href="#022228" label="[02:22:28]">&lt;oriansj&gt;</a></span><span class="message">M1 does a great big hash table to speedup up the application of the defines to an O(1) operation (or O(n) for all of the applications being performed with n being the number of unique DEFINEs, numbers and raw strings)</span></div><div class="line" id="022557"><span class="nick" style="color:#8dd3c7"><a href="#022557" label="[02:25:57]">&lt;oriansj&gt;</a></span><span class="message">combined with the M2libc FILE* enhancements, it provides a 20x speed improvement for mescc-tools builds</span></div><div class="line" id="022722"><span class="nick" style="color:#2e2a4a"><a href="#022722" label="[02:27:22]">&lt;Melg8&gt;</a></span><span class="message">this is very nice!</span></div><div class="line" id="022759"><span class="nick" style="color:#2e2a4a"><a href="#022759" label="[02:27:59]">&lt;Melg8&gt;</a></span><span class="message">i found that mes builds are ... not so fast</span></div><div class="line" id="034516"><span class="nick" style="color:#8dd3c7"><a href="#034516" label="[03:45:16]">&lt;oriansj&gt;</a></span><span class="message">Melg8: well it is an optimizing C compiler being interpreted on a very primitive scheme interpreter (M2-Planet's fault there)</span></div><div class="line" id="034558"><span class="nick" style="color:#8dd3c7"><a href="#034558" label="[03:45:58]">&lt;oriansj&gt;</a></span><span class="message">It goes a bit faster on guile</span></div><div class="line" id="035123"><span class="nick" style="color:#6b8072"><a href="#035123" label="[03:51:23]">&lt;Melg8[m]&gt;</a></span><span class="message">stikonas: is lib/x86-mes/libc.a sha256sum checked anywhere?  (im talking not about lib/libc.a) from here (<a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/8210cc9e24b5495957a074f59a353ca68a1de0a0/sysa/mes/mes.kaem#L189">https://github.com/fosslinux/live-bootstrap/blob/8210cc9e24b5495957a074f59a353ca68a1de0a0/sysa/mes/mes.kaem#L189</a>) </span></div><div class="line" id="035712"><span class="nick" style="color:#6b8072"><a href="#035712" label="[03:57:12]">&lt;Melg8[m]&gt;</a></span><span class="message">oriansj: btw, question about catm - if i have files x y z  and i do &quot;catm result x y z&quot; would result be same as if i do &quot;catm result_1 x y; catm result result_1 z&quot;?</span></div><div class="line" id="040029"><span class="nick" style="color:#6d2462"><a href="#040029" label="[04:00:29]">&lt;amirouche&gt;</a></span><span class="message">(forth is brillant!)</span></div><div class="line" id="040147"><span class="nick" style="color:#8dd3c7"><a href="#040147" label="[04:01:47]">&lt;oriansj&gt;</a></span><span class="message">Melg8: catm reads from left to right in the order of writing to the file which is the first argument. so catm temp1 x y; catm result temp1 z; would mean the exact same thing as catm result x y z with the addition of the creation of the temp1 file containing the contents of x y</span></div><div class="line" id="040212"><span class="nick" style="color:#8dd3c7"><a href="#040212" label="[04:02:12]">&lt;oriansj&gt;</a></span><span class="message">amirouche: we have multiple bootstrapped FORTHs available if you wish to hack on them</span></div><div class="line" id="040225"><span class="nick" style="color:#6b8072"><a href="#040225" label="[04:02:25]">&lt;Melg8[m]&gt;</a></span><span class="message">oriansj: big thanks!)</span></div><div class="line" id="041658"><span class="nick" style="color:#234e69"><a href="#041658" label="[04:16:58]">&lt;xentrac&gt;</a></span><span class="message">yay bootstrapped forths :)</span></div><div class="line" id="042347"><span class="nick" style="color:#6b8072"><a href="#042347" label="[04:23:47]">&lt;Melg8[m]&gt;</a></span><span class="message">xentrac: what forth can give us?)</span></div><div class="line" id="042636"><span class="nick" style="color:#234e69"><a href="#042636" label="[04:26:36]">&lt;xentrac&gt;</a></span><span class="message">Melg8[m]: I'm not sure I understand the question?</span></div><div class="line" id="042949"><span class="nick" style="color:#8dd3c7"><a href="#042949" label="[04:29:49]">&lt;oriansj&gt;</a></span><span class="message">Melg8: every programming language is just an option for someone to pick up and make something useful.</span></div><div class="line" id="043112"><span class="nick" style="color:#8dd3c7"><a href="#043112" label="[04:31:12]">&lt;oriansj&gt;</a></span><span class="message">So if someone really likes FORTH there is nothing stopping them from creating some useful thing in it; except for their ability or desire to do so.</span></div><div class="line" id="043211"><span class="nick" style="color:#8dd3c7"><a href="#043211" label="[04:32:11]">&lt;oriansj&gt;</a></span><span class="message">So having multiple FORTHs are just options for people who wish to use a FORTH, not that it actually provides any real value to actual bootstrapping work.</span></div><div class="line" id="043249"><span class="nick" style="color:#8dd3c7"><a href="#043249" label="[04:32:49]">&lt;oriansj&gt;</a></span><span class="message">As thus far C and assembly seem to be the most productive bootstrapping languages.</span></div><div class="line" id="043831"><span class="nick" style="color:#234e69"><a href="#043831" label="[04:38:31]">&lt;xentrac&gt;</a></span><span class="message">it might provide real value, but so far that's an unproven hypothesis</span></div><div class="line" id="102406"><span class="nick" style="color:#6c3d55"><a href="#102406" label="[10:24:06]">&lt;siraben&gt;</a></span><span class="message">blynn has pushed more commits to upstream blynn-compiler, but I don't currently have time to rebase my changes on top</span></div><div class="line" id="102433"><span class="nick" style="color:#6c3d55"><a href="#102433" label="[10:24:33]">&lt;siraben&gt;</a></span><span class="message">in particular it looks like the module system is taking shape</span></div><div class="line" id="121722"><span class="nick" style="color:#d9d9d9"><a href="#121722" label="[12:17:22]">&lt;crabbedhaloablut&gt;</a></span><span class="message">The front page of <a rel="nofollow" href="https://bootstrappable.org/">https://bootstrappable.org/</a>  still points at freenode for the IRC channel</span></div><div class="line" id="124750"><span class="nick" style="color:#8dd3c7"><a href="#124750" label="[12:47:50]">&lt;oriansj&gt;</a></span><span class="message">rekado: please take a minute to update that please</span></div><div class="line" id="124854"><span class="nick" style="color:#8dd3c7"><a href="#124854" label="[12:48:54]">&lt;oriansj&gt;</a></span><span class="message">siraben: looks like it isn't quite done but once it is, then is when we probably should incorporate those improvements.</span></div><div class="line" id="135517"><span class="nick" style="color:#bc80bd"><a href="#135517" label="[13:55:17]">&lt;stikonas&gt;</a></span><span class="message">Melg8[m]: probably not, looks like we only calculate fletcher16 checksum</span></div><div class="line" id="135529"><span class="nick" style="color:#3c5b35"><a href="#135529" label="[13:55:29]">&lt;pabs3&gt;</a></span><span class="message">rekado_: ^^</span></div><div class="line" id="180918"><span class="nick" style="color:#af8d2f"><a href="#180918" label="[18:09:18]">&lt;NieDzejkob&gt;</a></span><span class="message">IMHO a FORTH is the best solution if you're starting from baremetal with a bootsector-sized seed</span></div><div class="line" id="181149"><span class="nick" style="color:#af8d2f"><a href="#181149" label="[18:11:49]">&lt;NieDzejkob&gt;</a></span><span class="message">I'm actually pursuing this strategy right now: <a rel="nofollow" href="https://github.com/NieDzejkob/miniforth">https://github.com/NieDzejkob/miniforth</a> </span></div><div class="line" id="182559"><span class="nick" style="color:#389600"><a href="#182559" label="[18:25:59]">&lt;Hagfish&gt;</a></span><span class="message">&quot;At this moment, not counting the 55 AA signature at the end, 493 bytes are used, leaving 17 bytes for any potential improvements.&quot;</span></div><div class="line" id="182601"><span class="nick" style="color:#389600"><a href="#182601" label="[18:26:01]">&lt;Hagfish&gt;</a></span><span class="message">fantastic</span></div><div class="line" id="182900"><span class="nick" style="color:#af8d2f"><a href="#182900" label="[18:29:00]">&lt;NieDzejkob&gt;</a></span><span class="message">I'm hoping I can fit in at least some parts of a block editor, so that the initial bootstrap on top of that won't need to be typed in twice :D</span></div><div class="line" id="183022"><span class="nick" style="color:#389600"><a href="#183022" label="[18:30:22]">&lt;Hagfish&gt;</a></span><span class="message">i like the fact it can load extra 1K blocks</span></div><div class="line" id="183135"><span class="nick" style="color:#389600"><a href="#183135" label="[18:31:35]">&lt;Hagfish&gt;</a></span><span class="message">i guess it could rewrite its own bootloader at some stage, and reboot into the new system?</span></div><div class="line" id="183256"><span class="nick" style="color:#af8d2f"><a href="#183256" label="[18:32:56]">&lt;NieDzejkob&gt;</a></span><span class="message">I don't think I'm going to do that, loading the source code seems less error-prone</span></div><div class="line" id="183327"><span class="nick" style="color:#af8d2f"><a href="#183327" label="[18:33:27]">&lt;NieDzejkob&gt;</a></span><span class="message">but actually writing the source code into these blocks is what I'm concerned with right now</span></div><div class="line" id="183358"><span class="nick" style="color:#af8d2f"><a href="#183358" label="[18:33:58]">&lt;NieDzejkob&gt;</a></span><span class="message">eh, first draft: 532 bytes used...</span></div><div class="line" id="184922"><span class="nick" style="color:#8dd3c7"><a href="#184922" label="[18:49:22]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: I look forward to seeing that being proven true (best way to learn ^_^) but worst case we still have: <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a>  to fall back on.</span></div><div class="line" id="191511"><span class="nick" style="color:#234e69"><a href="#191511" label="[19:15:11]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: awesome!  that's great work!</span></div><div class="line" id="191607"><span class="nick" style="color:#234e69"><a href="#191607" label="[19:16:07]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: how do you get by without any conditionals though?</span></div><div class="line" id="191640"><span class="nick" style="color:#234e69"><a href="#191640" label="[19:16:40]">&lt;xentrac&gt;</a></span><span class="message">oh, with self-modifying code?</span></div><div class="line" id="195815"><span class="nick" style="color:#234e69"><a href="#195815" label="[19:58:15]">&lt;xentrac&gt;</a></span><span class="message">if I understand correctly you could probably get rid of primitive + and define it as something like : + 0 swap - - ;</span></div><div class="line" id="195951"><span class="nick" style="color:#8dd3c7"><a href="#195951" label="[19:59:51]">&lt;mihi&gt;</a></span><span class="message">NieDzejkob, unless you find a first-generation 8088 CPU (which had a hardware bug), POP SS with enabled interrupts won't create a race condition as it will delay interrupts by one instruction. And the next instruction will fix the stack pointer.</span></div><div class="line" id="200038"><span class="nick" style="color:#8dd3c7"><a href="#200038" label="[20:00:38]">&lt;mihi&gt;</a></span><span class="message">(there is another caveat: there was one processor which did not delay interrupts if POP SS is directly after STI instruction, but that is not true in your code either)</span></div><div class="line" id="200108"><span class="nick" style="color:#8dd3c7"><a href="#200108" label="[20:01:08]">&lt;mihi&gt;</a></span><span class="message">probably you will earlier run into buggy BIOSes who believe they should &quot;fix&quot; the BIOS Parameter block in memory after having loaded the boot sector...</span></div><div class="line" id="200219"><span class="nick" style="color:#8dd3c7"><a href="#200219" label="[20:02:19]">&lt;mihi&gt;</a></span><span class="message">rekado_, thank you for fixing the logs :)</span></div><div class="line" id="204424"><span class="nick" style="color:#234e69"><a href="#204424" label="[20:44:24]">&lt;xentrac&gt;</a></span><span class="message">mihi: ooh, I didn't know that about POP SS</span></div><div class="line" id="210445"><span class="nick" style="color:#af8d2f"><a href="#210445" label="[21:04:45]">&lt;NieDzejkob&gt;</a></span><span class="message">mihi: TIL! The x86 manual corroborates your story :D</span></div><div class="line" id="210544"><span class="nick" style="color:#af8d2f"><a href="#210544" label="[21:05:44]">&lt;NieDzejkob&gt;</a></span><span class="message">xentrac: in general I'm not hoping to eliminate adding primitives afterwards entirely, just minimize it and make it easy</span></div><div class="line" id="210802"><span class="nick" style="color:#af8d2f"><a href="#210802" label="[21:08:02]">&lt;NieDzejkob&gt;</a></span><span class="message">in 2klinux I managed to implement branches in pure forth — : BRANCH R&gt; @ &gt;R ; : 0BRANCH 0= DUP R@ @ AND SWAP INVERT R&gt; CELL+ AND OR &gt;R ;</span></div><div class="line" id="210836"><span class="nick" style="color:#af8d2f"><a href="#210836" label="[21:08:36]">&lt;NieDzejkob&gt;</a></span><span class="message">iirc it affected performance a lot, though</span></div><div class="line" id="211906"><span class="nick" style="color:#234e69"><a href="#211906" label="[21:19:06]">&lt;xentrac&gt;</a></span><span class="message">oh, interesting!  I hadn't thought of that at all!</span></div><div class="line" id="211930"><span class="nick" style="color:#234e69"><a href="#211930" label="[21:19:30]">&lt;xentrac&gt;</a></span><span class="message">the performance loss is probably fine if the objective is, like, to be able to write your next compiler in a high-level language instead of machine code or assembly language</span></div><div class="line" id="212003"><span class="nick" style="color:#234e69"><a href="#212003" label="[21:20:03]">&lt;xentrac&gt;</a></span><span class="message">in SKF instead of implementing the stack manipulations as primitives I implemented them with VARIABLE, @, and !</span></div><div class="line" id="212010"><span class="nick" style="color:#234e69"><a href="#212010" label="[21:20:10]">&lt;xentrac&gt;</a></span><span class="message">(stoneknifeforth)</span></div><div class="line" id="212023"><span class="nick" style="color:#af8d2f"><a href="#212023" label="[21:20:23]">&lt;NieDzejkob&gt;</a></span><span class="message">oh, you're the author of stoneknifeforth?</span></div><div class="line" id="212026"><span class="nick" style="color:#234e69"><a href="#212026" label="[21:20:26]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="212040"><span class="nick" style="color:#234e69"><a href="#212040" label="[21:20:40]">&lt;xentrac&gt;</a></span><span class="message">didn't know you knew of it!</span></div><div class="line" id="212155"><span class="nick" style="color:#234e69"><a href="#212155" label="[21:21:55]">&lt;xentrac&gt;</a></span><span class="message">is R@ &quot;get the return stack pointer&quot; rather than &quot;get the top item of the return stack&quot;?</span></div><div class="line" id="212209"><span class="nick" style="color:#af8d2f"><a href="#212209" label="[21:22:09]">&lt;NieDzejkob&gt;</a></span><span class="message">R@ is R&gt; DUP &gt;R</span></div><div class="line" id="212218"><span class="nick" style="color:#234e69"><a href="#212218" label="[21:22:18]">&lt;xentrac&gt;</a></span><span class="message">huh, why R@ @ then?</span></div><div class="line" id="212232"><span class="nick" style="color:#234e69"><a href="#212232" label="[21:22:32]">&lt;xentrac&gt;</a></span><span class="message">oh!</span></div><div class="line" id="212238"><span class="nick" style="color:#af8d2f"><a href="#212238" label="[21:22:38]">&lt;NieDzejkob&gt;</a></span><span class="message">for the same reason BRANCH does R&gt; @ &gt;R</span></div><div class="line" id="212239"><span class="nick" style="color:#234e69"><a href="#212239" label="[21:22:39]">&lt;xentrac&gt;</a></span><span class="message">that's loading the branch address, sorry</span></div><div class="line" id="212250"><span class="nick" style="color:#2e2a4a"><a href="#212250" label="[21:22:50]">*</a></span><span class="message">xentrac ← dum</span></div><div class="line" id="212333"><span class="nick" style="color:#af8d2f"><a href="#212333" label="[21:23:33]">&lt;NieDzejkob&gt;</a></span><span class="message">re: SKF, funny thing. I recently went back to an old reddit post that kinda inspired me to work on bootstrapping. Turns out the most comprehensive response there was yours :D</span></div><div class="line" id="212342"><span class="nick" style="color:#234e69"><a href="#212342" label="[21:23:42]">&lt;xentrac&gt;</a></span><span class="message">♥</span></div><div class="line" id="212350"><span class="nick" style="color:#234e69"><a href="#212350" label="[21:23:50]">&lt;xentrac&gt;</a></span><span class="message">did you know that Turing's original design for conditional branches used multiplication?</span></div><div class="line" id="212351"><span class="nick" style="color:#af8d2f"><a href="#212351" label="[21:23:51]">&lt;NieDzejkob&gt;</a></span><span class="message">(went back to reference it in a blog post I'm writing)</span></div><div class="line" id="212407"><span class="nick" style="color:#af8d2f"><a href="#212407" label="[21:24:07]">&lt;NieDzejkob&gt;</a></span><span class="message">no, tell me more!</span></div><div class="line" id="212420"><span class="nick" style="color:#234e69"><a href="#212420" label="[21:24:20]">&lt;xentrac&gt;</a></span><span class="message">you would branch to c*x + (1 - c)*y where x and y were the possible branch destinations and c was the condition</span></div><div class="line" id="212438"><span class="nick" style="color:#234e69"><a href="#212438" label="[21:24:38]">&lt;xentrac&gt;</a></span><span class="message">I think he changed that before the first actual machine though :)</span></div><div class="line" id="212457"><span class="nick" style="color:#234e69"><a href="#212457" label="[21:24:57]">&lt;xentrac&gt;</a></span><span class="message">very similar to your 0BRANCH but in a different algebra</span></div><div class="line" id="212541"><span class="nick" style="color:#234e69"><a href="#212541" label="[21:25:41]">&lt;xentrac&gt;</a></span><span class="message">I'm glad that old reddit post keeps on giving ♥</span></div><div class="line" id="212648"><span class="nick" style="color:#234e69"><a href="#212648" label="[21:26:48]">&lt;xentrac&gt;</a></span><span class="message">so I think the problem that normally afflicts bootstrapping through Forth is, sort of ironically, the agricultural-programmer problem</span></div><div class="line" id="212749"><span class="nick" style="color:#234e69"><a href="#212749" label="[21:27:49]">&lt;xentrac&gt;</a></span><span class="message">Chuck Moore complained that a lot of programmers find a problem and decide to set up shop on that problem, creating a progressively more elaborate solution, while he (the nomadic programmer) sees problems as things to be solved in order to move on to the next problem</span></div><div class="line" id="212915"><span class="nick" style="color:#234e69"><a href="#212915" label="[21:29:15]">&lt;xentrac&gt;</a></span><span class="message">and I think sort of the problem with Forth, and maybe minimality in general, is that it's always obvious that the program we have can be improved (though typically by making it simpler rather than more elaborate)</span></div><div class="line" id="212953"><span class="nick" style="color:#234e69"><a href="#212953" label="[21:29:53]">&lt;xentrac&gt;</a></span><span class="message">or sometimes by writing lipogrammic programs that, for example, totally abstain from using variables</span></div><div class="line" id="213053"><span class="nick" style="color:#234e69"><a href="#213053" label="[21:30:53]">&lt;xentrac&gt;</a></span><span class="message">so it's very easy to get started writing a bootstrapping Forth to implement a small Lisp in so you can implement Scheme or Maru or whatever</span></div><div class="line" id="213155"><span class="nick" style="color:#234e69"><a href="#213155" label="[21:31:55]">&lt;xentrac&gt;</a></span><span class="message">and then, for example, never actually get to writing the Lisp, because you keep seeing ways your Forth can be reduced from 448 bytes to 443, etc.</span></div><div class="line" id="213208"><span class="nick" style="color:#234e69"><a href="#213208" label="[21:32:08]">&lt;xentrac&gt;</a></span><span class="message">in a sense you could say that's where I've been stuck since writing SKF :)</span></div><div class="line" id="214119"><span class="nick" style="color:#af8d2f"><a href="#214119" label="[21:41:19]">&lt;NieDzejkob&gt;</a></span><span class="message">too bad I don't have any paperback reference that could be self-sufficient. That way I could just put my FORTH on a thumbdrive and force myself to only use use bootstrapped software for a while :)</span></div><div class="line" id="214250"><span class="nick" style="color:#af8d2f"><a href="#214250" label="[21:42:50]">&lt;NieDzejkob&gt;</a></span><span class="message">let's hope that the immersion I can otherwise get will be sufficient, I guess?</span></div><div class="line" id="214903"><span class="nick" style="color:#234e69"><a href="#214903" label="[21:49:03]">&lt;xentrac&gt;</a></span><span class="message">reference to what, the CPU instruction set?</span></div><div class="line" id="214918"><span class="nick" style="color:#234e69"><a href="#214918" label="[21:49:18]">&lt;xentrac&gt;</a></span><span class="message">UHCI? :)</span></div><div class="line" id="215036"><span class="nick" style="color:#af8d2f"><a href="#215036" label="[21:50:36]">&lt;NieDzejkob&gt;</a></span><span class="message">that's the thing, designing something sufficient in advance is a separate project</span></div><div class="line" id="215244"><span class="nick" style="color:#234e69"><a href="#215244" label="[21:52:44]">&lt;xentrac&gt;</a></span><span class="message">hmm</span></div><div class="line" id="215532"><span class="nick" style="color:#af8d2f"><a href="#215532" label="[21:55:32]">&lt;NieDzejkob&gt;</a></span><span class="message">I've got 13 bytes to fill with either EMIT, -, or some other small primitive. What would you choose?</span></div><div class="line" id="215807"><span class="nick" style="color:#af8d2f"><a href="#215807" label="[21:58:07]">&lt;NieDzejkob&gt;</a></span><span class="message">oh who am I kidding, EMIT is surely going to be useful very soon</span></div><div class="line" id="220250"><span class="nick" style="color:#af8d2f"><a href="#220250" label="[22:02:50]">&lt;NieDzejkob&gt;</a></span><span class="message">I found a machine in the attic that I can use for my experiments, BTW</span></div><div class="line" id="220348"><span class="nick" style="color:#234e69"><a href="#220348" label="[22:03:48]">&lt;xentrac&gt;</a></span><span class="message">oh cool!</span></div><div class="line" id="220405"><span class="nick" style="color:#234e69"><a href="#220405" label="[22:04:05]">&lt;xentrac&gt;</a></span><span class="message">I think the most interesting bootstrapping platform is the universe</span></div><div class="line" id="220508"><span class="nick" style="color:#234e69"><a href="#220508" label="[22:05:08]">&lt;xentrac&gt;</a></span><span class="message">we already have matter compilers and they have been very successful, but they are very difficult to program; genetic engineering is slow, error-prone, and still limited to cargo-culting working code.  programming by copy and paste</span></div><div class="line" id="220540"><span class="nick" style="color:#234e69"><a href="#220540" label="[22:05:40]">&lt;xentrac&gt;</a></span><span class="message">we need matter compilers that we can program in practice</span></div><div class="line" id="220644"><span class="nick" style="color:#af8d2f"><a href="#220644" label="[22:06:44]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah, but that's way out of my depth :D</span></div><div class="line" id="220852"><span class="nick" style="color:#234e69"><a href="#220852" label="[22:08:52]">&lt;xentrac&gt;</a></span><span class="message">oh, I think it's easier than we think.  although I could be wrong; I won't know until someone succeeds</span></div><div class="line" id="221659"><span class="nick" style="color:#80b1d3"><a href="#221659" label="[22:16:59]">&lt;vagrantc&gt;</a></span><span class="message">i don't know how we're going to checksum matter for reproducibility</span></div><div class="line" id="222258"><span class="nick" style="color:#234e69"><a href="#222258" label="[22:22:58]">&lt;xentrac&gt;</a></span><span class="message">vagrantc: that's a very real and urgent problem</span></div><div class="line" id="230439"><span class="nick" style="color:#2e2a4a"><a href="#230439" label="[23:04:39]">&lt;Melg8&gt;</a></span><span class="message">Oh guys (and girls) i returned here, and start reading last posts... and than confused what is &quot;matter&quot; is it new language? ... than re-read whole thing, and yea - chekcsum for matter would be nice) but is universe reproducible anyway?)</span></div><div class="line" id="231229"><span class="nick" style="color:#234e69"><a href="#231229" label="[23:12:29]">&lt;xentrac&gt;</a></span><span class="message">haha, sorry</span></div><div class="line" id="231333"><span class="nick" style="color:#234e69"><a href="#231333" label="[23:13:33]">&lt;xentrac&gt;</a></span><span class="message">being able to compile new universes would be cool but we don't have any reason to believe it's possible.  compiling new hardware from its design files, aka source code or genome, is something we do all the time</span></div><div class="line" id="231856"><span class="nick" style="color:#2e2a4a"><a href="#231856" label="[23:18:56]">&lt;Melg8&gt;</a></span><span class="message">btw is there theory on self assembly so - for example what best &quot;strategy&quot; looks like? because you can assemble some utils that needed, or you can assemble assembler for more sofisticated (high level?) language</span></div><div class="line" id="232106"><span class="nick" style="color:#2e2a4a"><a href="#232106" label="[23:21:06]">&lt;Melg8&gt;</a></span><span class="message">ie, how to spend less of tape (or less of jumps) in turing machine, and get more capable program assembled for execution</span></div><div class="line" id="232122"><span class="nick" style="color:#234e69"><a href="#232122" label="[23:21:22]">&lt;xentrac&gt;</a></span><span class="message">self-assembly in what sense?  like, writing an assembler in assembly language?</span></div><div class="line" id="232239"><span class="nick" style="color:#2e2a4a"><a href="#232239" label="[23:22:39]">&lt;Melg8&gt;</a></span><span class="message">i mean like in live bootstrap  you have some initial small program in &quot;native&quot; bytes - and it gets as input some &quot;code&quot; and spills out some new programms (or additions to itself)</span></div><div class="line" id="232339"><span class="nick" style="color:#2e2a4a"><a href="#232339" label="[23:23:39]">&lt;Melg8&gt;</a></span><span class="message">from &quot;human readable&quot; TM to executable assembly</span></div><div class="line" id="232434"><span class="nick" style="color:#234e69"><a href="#232434" label="[23:24:34]">&lt;xentrac&gt;</a></span><span class="message">oh, I see</span></div><div class="line" id="232445"><span class="nick" style="color:#2e2a4a"><a href="#232445" label="[23:24:45]">&lt;Melg8&gt;</a></span><span class="message">imagine 20 (10) year from now - we would face problem how to bootstrap general AI )</span></div><div class="line" id="232448"><span class="nick" style="color:#234e69"><a href="#232448" label="[23:24:48]">&lt;xentrac&gt;</a></span><span class="message">I don't think we have a well developed theory</span></div><div class="line" id="232521"><span class="nick" style="color:#234e69"><a href="#232521" label="[23:25:21]">&lt;xentrac&gt;</a></span><span class="message">a lot of the evaluation of &quot;best strategy&quot; seems to depend on human psychology, which is very poorly understood</span></div><div class="line" id="232548"><span class="nick" style="color:#234e69"><a href="#232548" label="[23:25:48]">&lt;xentrac&gt;</a></span><span class="message">so far it's been a matter of &quot;try it and see&quot;</span></div><br /></div></body></html>