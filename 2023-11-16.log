<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-11-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="041025"><span class="nick" style="color:#389600"><a href="#041025" label="[04:10:25]">&lt;pabs3&gt;</a></span><span class="message">oriansj: might be good to get repro/bootstrap builds included in <a rel="nofollow" href="https://www.bestpractices.dev/">https://www.bestpractices.dev/</a>  too</span></div><div class="line" id="041604"><span class="nick" style="color:#389600"><a href="#041604" label="[04:16:04]">&lt;pabs3&gt;</a></span><span class="message">ACTION guesses this got discussed already?</span></div><div class="line" id="045318"><span class="nick" style="color:#8dd3c7"><a href="#045318" label="[04:53:18]">&lt;Googulator&gt;</a></span><span class="message">What's the significance of rebuilding meslibc with the &quot;full&quot; mes after it has already been built once with mes-m2?</span></div><div class="line" id="045345"><span class="nick" style="color:#8dd3c7"><a href="#045345" label="[04:53:45]">&lt;Googulator&gt;</a></span><span class="message">mes-m2 and mes are functionally requirement, if I'm not mistaken</span></div><div class="line" id="045408"><span class="nick" style="color:#8dd3c7"><a href="#045408" label="[04:54:08]">&lt;Googulator&gt;</a></span><span class="message">so they should generate the exact same code</span></div><div class="line" id="045452"><span class="nick" style="color:#8dd3c7"><a href="#045452" label="[04:54:52]">&lt;Googulator&gt;</a></span><span class="message">And that's especially true given that mes / mes-m2 is just the Scheme interpreter</span></div><div class="line" id="045537"><span class="nick" style="color:#8dd3c7"><a href="#045537" label="[04:55:37]">&lt;Googulator&gt;</a></span><span class="message">the actual C compiler is the same, mescc.scm, and it should certainly generate the same code regardless of the interpreter it's running in</span></div><div class="line" id="050811"><span class="nick" style="color:#8dd3c7"><a href="#050811" label="[05:08:11]">&lt;Googulator&gt;</a></span><span class="message">oh, I'm stupid... that's not what's actually done</span></div><div class="line" id="084936"><span class="nick" style="color:#2e2a4a"><a href="#084936" label="[08:49:36]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: rickmasters patched the Fiwix kernel in the current live-bootstrap version to be able to have large initrd files, because in that time there was no possible to have such large initrd images</span></div><div class="line" id="084947"><span class="nick" style="color:#2e2a4a"><a href="#084947" label="[08:49:47]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: Fiwix doesn't support ext4</span></div><div class="line" id="085253"><span class="nick" style="color:#2e2a4a"><a href="#085253" label="[08:52:53]">&lt;Mikaku&gt;</a></span><span class="message">if you need larger initrd images, the latest Fiwix version (1.5.0 since yesterday), supports the virtual memory split 2GB/2GB, so theoretically this should permit you to have an initrd image of near 2GB</span></div><div class="line" id="102740"><span class="nick" style="color:#6b8072"><a href="#102740" label="[10:27:40]">&lt;lanodan&gt;</a></span><span class="message">I think for boostrappability-gamification status based tiers would make more sense than a number of dependencies. For example an maintained and officially documented bootstrapping path for A tier (A+ for multiple paths?), F tier could be source-less (rather than just recipe-less) blobs like with Mono shipping Microsoft DLLs.</span></div><div class="line" id="103112"><span class="nick" style="color:#6b8072"><a href="#103112" label="[10:31:12]">&lt;lanodan&gt;</a></span><span class="message">And I guess the rank would be capped to the worst ranked dependency.</span></div><div class="line" id="105138"><span class="nick" style="color:#6b8072"><a href="#105138" label="[10:51:38]">&lt;lanodan&gt;</a></span><span class="message">Rank cap because dependencies create &quot;one bad apple spoils the bunch&quot; kind of situations, for example because it often creates events like &quot;Welp, now I can't use the software at all, there's not even binaries for my system&quot;.</span></div><div class="line" id="125531"><span class="nick" style="color:#8dd3c7"><a href="#125531" label="[12:55:31]">&lt;Googulator&gt;</a></span><span class="message">...And the boot is strapped. <a rel="nofollow" href="https://user-images.githubusercontent.com/16308406/283439960-560df4d5-988d-46cb-9b09-8b4ce61e3755.jpg">https://user-images.githubusercontent.com/16308406/283439960-560df4d5-988d-46cb-9b09-8b4ce61e3755.jpg</a> </span></div><div class="line" id="125539"><span class="nick" style="color:#8dd3c7"><a href="#125539" label="[12:55:39]">&lt;Googulator&gt;</a></span><span class="message">It reboots properly, too.</span></div><div class="line" id="125559"><span class="nick" style="color:#8dd3c7"><a href="#125559" label="[12:55:59]">&lt;Googulator&gt;</a></span><span class="message">Need to clean up the code for this, but it's coming probably later this week.</span></div><div class="line" id="130511"><span class="nick" style="color:#8dd3c7"><a href="#130511" label="[13:05:11]">&lt;Googulator&gt;</a></span><span class="message">One small bug remains: nvidiafb loads just fine, but the console remains VGA 80x25.</span></div><div class="line" id="130539"><span class="nick" style="color:#8dd3c7"><a href="#130539" label="[13:05:39]">&lt;Googulator&gt;</a></span><span class="message">The cause? # CONFIG_FRAMEBUFFER_CONSOLE is not set</span></div><div class="line" id="133605"><span class="nick" style="color:#8dd3c7"><a href="#133605" label="[13:36:05]">&lt;Googulator&gt;</a></span><span class="message">enabling CONFIG_FRAMEBUFFER_CONSOLE worked :)</span></div><div class="line" id="143046"><span class="nick" style="color:#80b1d3"><a href="#143046" label="[14:30:46]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: The 1152MB initrd for fiwix stems from the memory constraints of the builder-hex0 kernel</span></div><div class="line" id="143055"><span class="nick" style="color:#80b1d3"><a href="#143055" label="[14:30:55]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: more on that here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/253#issuecomment-1455525639">https://github.com/fosslinux/live-bootstrap/pull/253#issuecomment-1455525639</a> </span></div><div class="line" id="143351"><span class="nick" style="color:#80b1d3"><a href="#143351" label="[14:33:51]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: using larger partitions is possible but may take substantial work.</span></div><div class="line" id="143604"><span class="nick" style="color:#80b1d3"><a href="#143604" label="[14:36:04]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku and I spent an enormous amount of effort making live-bootstrap run from hard drive with Fiwix</span></div><div class="line" id="143608"><span class="nick" style="color:#80b1d3"><a href="#143608" label="[14:36:08]">&lt;rickmasters&gt;</a></span><span class="message">See here: <a rel="nofollow" href="https://github.com/mikaku/Fiwix/issues/27">https://github.com/mikaku/Fiwix/issues/27</a> </span></div><div class="line" id="143803"><span class="nick" style="color:#80b1d3"><a href="#143803" label="[14:38:03]">&lt;rickmasters&gt;</a></span><span class="message">So if we need to go down that path it is possible. The flush (f) command for builder-hex0 was implemented for that purpose.</span></div><div class="line" id="144410"><span class="nick" style="color:#80b1d3"><a href="#144410" label="[14:44:10]">&lt;rickmasters&gt;</a></span><span class="message">The code for the running Fiwix off hard drive was saved in this branch (although fairly out of date): <a rel="nofollow" href="https://github.com/rick-masters/live-bootstrap/tree/kernel-bootstrap-fiwix-hd">https://github.com/rick-masters/live-bootstrap/tree/kernel-bootstrap-fiwix-hd</a> </span></div><div class="line" id="144526"><span class="nick" style="color:#80b1d3"><a href="#144526" label="[14:45:26]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm grateful you put the work into running off bare metal! Great job!</span></div><div class="line" id="144715"><span class="nick" style="color:#80b1d3"><a href="#144715" label="[14:47:15]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I meant to get around to that some day but I put it off.</span></div><div class="line" id="144909"><span class="nick" style="color:#80b1d3"><a href="#144909" label="[14:49:09]">&lt;rickmasters&gt;</a></span><span class="message">Lately I've been working with Mikaku to upstream patches into Fiwix to support live-bootstrap so I can retire my branch.</span></div><div class="line" id="145039"><span class="nick" style="color:#80b1d3"><a href="#145039" label="[14:50:39]">&lt;rickmasters&gt;</a></span><span class="message">Its a long and tedious process so I'm afraid I may not have a lot of available time until that is done.</span></div><div class="line" id="145222"><span class="nick" style="color:#80b1d3"><a href="#145222" label="[14:52:22]">&lt;rickmasters&gt;</a></span><span class="message">I really want to support your work though.</span></div><div class="line" id="145339"><span class="nick" style="color:#80b1d3"><a href="#145339" label="[14:53:39]">&lt;rickmasters&gt;</a></span><span class="message">I admit I haven't been following your efforts in detail so I'm not up to speed with your changes/requirements.</span></div><div class="line" id="145518"><span class="nick" style="color:#80b1d3"><a href="#145518" label="[14:55:18]">&lt;rickmasters&gt;</a></span><span class="message">Why is a bigger initrd needed for Fiwix?</span></div><div class="line" id="160651"><span class="nick" style="color:#6d2462"><a href="#160651" label="[16:06:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; rickmasters: I guess to add more drivers to linux</span></div><div class="line" id="160702"><span class="nick" style="color:#6d2462"><a href="#160702" label="[16:07:02]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Like more Ethernet cards, etc...</span></div><div class="line" id="170212"><span class="nick" style="color:#8dd3c7"><a href="#170212" label="[17:02:12]">&lt;Googulator&gt;</a></span><span class="message">A bigger Fiwix initrd is needed because it constrains the size of the Linux kernel build tree, which increases quite a bit due to extra drivers needing to be enabled on baremetal</span></div><div class="line" id="170252"><span class="nick" style="color:#8dd3c7"><a href="#170252" label="[17:02:52]">&lt;Googulator&gt;</a></span><span class="message">With 1152MB, we run out of space when linking the kernel</span></div><div class="line" id="170349"><span class="nick" style="color:#8dd3c7"><a href="#170349" label="[17:03:49]">&lt;Googulator&gt;</a></span><span class="message">1280MB is sufficient, and it works with no apparent ill effects on my baremetal system - but due to different memory map in qemu, 1280MB already overflows into MMIO space there</span></div><div class="line" id="170422"><span class="nick" style="color:#8dd3c7"><a href="#170422" label="[17:04:22]">&lt;Googulator&gt;</a></span><span class="message">We could branch depending on baremetal vs qemu, with different kernel configs &amp; initrd sizes, but I'd rather not do that</span></div><div class="line" id="170442"><span class="nick" style="color:#8dd3c7"><a href="#170442" label="[17:04:42]">&lt;Googulator&gt;</a></span><span class="message">plus, 1280MB works *on my hardware* but it may not work on other boards or BIOSes</span></div><div class="line" id="170540"><span class="nick" style="color:#8dd3c7"><a href="#170540" label="[17:05:40]">&lt;Googulator&gt;</a></span><span class="message">An easy way out right now is to kill the 5.10 source tarball used for linux-headers, and instead generate headers from the 4.9.10 tarball too</span></div><div class="line" id="171132"><span class="nick" style="color:#8dd3c7"><a href="#171132" label="[17:11:32]">&lt;Googulator&gt;</a></span><span class="message">that frees up 170MB of space in srcfs, which should shift the initrd enough that it no longer overflows in qemu</span></div><div class="line" id="180536"><span class="nick" style="color:#8dd3c7"><a href="#180536" label="[18:05:36]">&lt;Googulator&gt;</a></span><span class="message">Of course, removing 5.10 is a one-time fix only - next time we hit the limit, a more permanent fix is needed</span></div><div class="line" id="180627"><span class="nick" style="color:#8dd3c7"><a href="#180627" label="[18:06:27]">&lt;Googulator&gt;</a></span><span class="message">IMO the best way to go is to allow Fiwix to receive a smaller initrd than what its ramdisk is configured to hold, and then expand it to the full size of the ramdisk upon boot</span></div><div class="line" id="180734"><span class="nick" style="color:#8dd3c7"><a href="#180734" label="[18:07:34]">&lt;Googulator&gt;</a></span><span class="message">This way, we can fit everything we need to pass to Fiwix in a 500MB initrd image, but pass ramdisksize=1280MB to fiwix itself</span></div><div class="line" id="181011"><span class="nick" style="color:#8dd3c7"><a href="#181011" label="[18:10:11]">&lt;Googulator&gt;</a></span><span class="message">Since the image, as stored within builder-hex0's RAM filesystem, is only 500MB, we don't run the risk of overflowing onto MMIO area</span></div><div class="line" id="181048"><span class="nick" style="color:#8dd3c7"><a href="#181048" label="[18:10:48]">&lt;Googulator&gt;</a></span><span class="message">Then kexec-fiwix's trampoline code relocates the image to a lower address, and passes that lower address to Fiwix</span></div><div class="line" id="181215"><span class="nick" style="color:#8dd3c7"><a href="#181215" label="[18:12:15]">&lt;Googulator&gt;</a></span><span class="message">Fiwix then sees that the FS is only 500MB even though it's on a 1280MB ramdisk, expands the FS to the full ramdisk size (starting at the lower address, so even after expansion, it should be nowhere near MMIO), and mounts it. Now we have all the free space we'll ever need inside the ramdisk to comfortably build our Linux kernel.</span></div><div class="line" id="181258"><span class="nick" style="color:#8dd3c7"><a href="#181258" label="[18:12:58]">&lt;Googulator&gt;</a></span><span class="message">That 500MB will be further reduced to 300-350MB if we drop the 2nd Linux tarball</span></div><div class="line" id="181557"><span class="nick" style="color:#8dd3c7"><a href="#181557" label="[18:15:57]">&lt;Googulator&gt;</a></span><span class="message">(currently testing a build in qemu with 4.9.10 used for headers too)</span></div><div class="line" id="182936"><span class="nick" style="color:#80b1d3"><a href="#182936" label="[18:29:36]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: Eliminating the second linux version and expanding the file systems would be great improvements.</span></div><div class="line" id="183007"><span class="nick" style="color:#80b1d3"><a href="#183007" label="[18:30:07]">&lt;rickmasters&gt;</a></span><span class="message">I've spent a bit of time in the past trying to change the headers but it wasn't easy and I moved on.</span></div><div class="line" id="183017"><span class="nick" style="color:#80b1d3"><a href="#183017" label="[18:30:17]">&lt;rickmasters&gt;</a></span><span class="message">If you can get it to work it would be huge.</span></div><div class="line" id="183202"><span class="nick" style="color:#80b1d3"><a href="#183202" label="[18:32:02]">&lt;rickmasters&gt;</a></span><span class="message">Another way to save a ton of memory in builder-hex0 is to move away from mes in the early bootstrap.</span></div><div class="line" id="183312"><span class="nick" style="color:#80b1d3"><a href="#183312" label="[18:33:12]">&lt;rickmasters&gt;</a></span><span class="message">mes uses over 600 megabytes of memory in some invocations if I recall correctly.</span></div><div class="line" id="183339"><span class="nick" style="color:#80b1d3"><a href="#183339" label="[18:33:39]">&lt;rickmasters&gt;</a></span><span class="message">That memory could be used for files instead.</span></div><div class="line" id="183440"><span class="nick" style="color:#80b1d3"><a href="#183440" label="[18:34:40]">&lt;rickmasters&gt;</a></span><span class="message">I think someone was working on another compiler but I'm not sure what the status is or how acceptable removing mes is with everyone.</span></div><div class="line" id="183502"><span class="nick" style="color:#8dd3c7"><a href="#183502" label="[18:35:02]">&lt;Googulator&gt;</a></span><span class="message">IIRC that's in the process space, not file space</span></div><div class="line" id="183518"><span class="nick" style="color:#8dd3c7"><a href="#183518" label="[18:35:18]">&lt;Googulator&gt;</a></span><span class="message">builder-hex0 uses discrete memory segments for different uses</span></div><div class="line" id="183606"><span class="nick" style="color:#80b1d3"><a href="#183606" label="[18:36:06]">&lt;rickmasters&gt;</a></span><span class="message">yes, but the only reason so much memory was reserved for processes was to support mes.</span></div><div class="line" id="183634"><span class="nick" style="color:#80b1d3"><a href="#183634" label="[18:36:34]">&lt;rickmasters&gt;</a></span><span class="message">it's pretty easy to resize the segments</span></div><div class="line" id="183644"><span class="nick" style="color:#8dd3c7"><a href="#183644" label="[18:36:44]">&lt;Googulator&gt;</a></span><span class="message">&amp; of course one improvement we absolutely *must* have for any serious baremetal support is proper e820 passthrough</span></div><div class="line" id="183719"><span class="nick" style="color:#8dd3c7"><a href="#183719" label="[18:37:19]">&lt;Googulator&gt;</a></span><span class="message">I got lucky that my motherboard's reserved memory ranges are _almost_ a subset of qemu's</span></div><div class="line" id="183824"><span class="nick" style="color:#8dd3c7"><a href="#183824" label="[18:38:24]">&lt;Googulator&gt;</a></span><span class="message">there's one small range that's available in qemu, but reserved on my board, but it sits below where the fiwix kernel is loaded to</span></div><div class="line" id="183832"><span class="nick" style="color:#8dd3c7"><a href="#183832" label="[18:38:32]">&lt;Googulator&gt;</a></span><span class="message">and seemingly it remains unused</span></div><div class="line" id="183931"><span class="nick" style="color:#8dd3c7"><a href="#183931" label="[18:39:31]">&lt;Googulator&gt;</a></span><span class="message">A few days ago someone did post a direct M2-Planet -&gt; tcc bootstrap path (WIP - it depends on some JavaScript code in that prototype code)</span></div><div class="line" id="184048"><span class="nick" style="color:#80b1d3"><a href="#184048" label="[18:40:48]">&lt;rickmasters&gt;</a></span><span class="message">i agree that the memory map support is poor right now and needs improvement</span></div><div class="line" id="184232"><span class="nick" style="color:#8dd3c7"><a href="#184232" label="[18:42:32]">&lt;Googulator&gt;</a></span><span class="message">If e820 passthrough is too hard to do, at the very least we need to provide a place to insert e.g. the e820 log from a Linux boot session during image generation, and inject it into kexec-fiwix.c</span></div><div class="line" id="184256"><span class="nick" style="color:#8dd3c7"><a href="#184256" label="[18:42:56]">&lt;Googulator&gt;</a></span><span class="message">that way we can generate board/BIOS-specific images for any board that can boot mainstream Linux</span></div><div class="line" id="184405"><span class="nick" style="color:#8dd3c7"><a href="#184405" label="[18:44:05]">&lt;Googulator&gt;</a></span><span class="message">of course, all of this is not great from a Trusting Trust resistance standpoint, since it requires running unbootstrapped code on the target board before bootstrapping, creating a path for a self-replicating parasite to inject itself into BIOS</span></div><div class="line" id="184425"><span class="nick" style="color:#8dd3c7"><a href="#184425" label="[18:44:25]">&lt;Googulator&gt;</a></span><span class="message">maybe write a small e820 dumping utility that can run under builder-hex0?</span></div><div class="line" id="184632"><span class="nick" style="color:#234e69"><a href="#184632" label="[18:46:32]">&lt;jcowan&gt;</a></span><span class="message">of course, when the Linux kernel grows to 1 GB (which is foreseeable) then more space will be needed for the bootstrap</span></div><div class="line" id="184818"><span class="nick" style="color:#80b1d3"><a href="#184818" label="[18:48:18]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: kexec-fiwix could probably be adapted to call the bios routines and create the multiboot memory map accordingly,</span></div><div class="line" id="184820"><span class="nick" style="color:#8dd3c7"><a href="#184820" label="[18:48:20]">&lt;Googulator&gt;</a></span><span class="message">The ones I built for baremetal already exceed that</span></div><div class="line" id="184852"><span class="nick" style="color:#8dd3c7"><a href="#184852" label="[18:48:52]">&lt;Googulator&gt;</a></span><span class="message">rickmasters: is it possible to make BIOS calls at that stage?</span></div><div class="line" id="184902"><span class="nick" style="color:#8dd3c7"><a href="#184902" label="[18:49:02]">&lt;Googulator&gt;</a></span><span class="message">without needing help from the builder-hex0 kernel</span></div><div class="line" id="184949"><span class="nick" style="color:#8dd3c7"><a href="#184949" label="[18:49:49]">&lt;Googulator&gt;</a></span><span class="message">If kexec-fiwix can drop back down to 16-bit and call BIOS directly, then it's fairly easy</span></div><div class="line" id="185017"><span class="nick" style="color:#8dd3c7"><a href="#185017" label="[18:50:17]">&lt;Googulator&gt;</a></span><span class="message">But I'm afraid it will have to be added into builder-hex0</span></div><div class="line" id="185119"><span class="nick" style="color:#80b1d3"><a href="#185119" label="[18:51:19]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: yeah it makes more sense to make the bios call from builder-hex0 kernel but perhaps the map can be converted to multiboot in kexec-fiwix</span></div><div class="line" id="185146"><span class="nick" style="color:#8dd3c7"><a href="#185146" label="[18:51:46]">&lt;Googulator&gt;</a></span><span class="message">If it's possible to do the call in kexec-fiwix, it would be preferable</span></div><div class="line" id="185155"><span class="nick" style="color:#8dd3c7"><a href="#185155" label="[18:51:55]">&lt;Googulator&gt;</a></span><span class="message">writing it in C or assembly, vs in hex0</span></div><div class="line" id="185252"><span class="nick" style="color:#8dd3c7"><a href="#185252" label="[18:52:52]">&lt;Googulator&gt;</a></span><span class="message">uhh... #    40200 -    9FBFF scratch buffer</span></div><div class="line" id="185318"><span class="nick" style="color:#8dd3c7"><a href="#185318" label="[18:53:18]">&lt;Googulator&gt;</a></span><span class="message">now I see why I sometimes get random failures in the builder-hex0 stage</span></div><div class="line" id="185334"><span class="nick" style="color:#8dd3c7"><a href="#185334" label="[18:53:34]">&lt;Googulator&gt;</a></span><span class="message">BIOS reserved area starts at 9EC00 on this board</span></div><div class="line" id="185339"><span class="nick" style="color:#8dd3c7"><a href="#185339" label="[18:53:39]">&lt;Googulator&gt;</a></span><span class="message">this is that small overlap area</span></div><div class="line" id="185402"><span class="nick" style="color:#80b1d3"><a href="#185402" label="[18:54:02]">&lt;rickmasters&gt;</a></span><span class="message">The bios call requires 16bit mode, and reverting to 16 bit is non-trivial: <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/3f20b992161a1e1976549d5a74db617164b0a1ac/builder-hex0.hex2#L531">https://github.com/ironmeld/builder-hex0/blob/3f20b992161a1e1976549d5a74db617164b0a1ac/builder-hex0.hex2#L531</a> </span></div><div class="line" id="185423"><span class="nick" style="color:#8dd3c7"><a href="#185423" label="[18:54:23]">&lt;Googulator&gt;</a></span><span class="message">then no other way than writing it in hex0</span></div><div class="line" id="185431"><span class="nick" style="color:#8dd3c7"><a href="#185431" label="[18:54:31]">&lt;Googulator&gt;</a></span><span class="message">maybe present it as a file /dev/e820</span></div><div class="line" id="185542"><span class="nick" style="color:#80b1d3"><a href="#185542" label="[18:55:42]">&lt;rickmasters&gt;</a></span><span class="message">If I recall, only a small part of the scratch buffer area is used, I'd be surprised if it used above 9ec00</span></div><div class="line" id="185836"><span class="nick" style="color:#80b1d3"><a href="#185836" label="[18:58:36]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: the bios map could just be placed in a well-known memory location that kexec-fiwix could read. there is no memory protection :)</span></div><div class="line" id="190542"><span class="nick" style="color:#6d2462"><a href="#190542" label="[19:05:42]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Googulator: ideally we should do early kernels multi staged too, not just written in hex0</span></div><div class="line" id="190621"><span class="nick" style="color:#6d2462"><a href="#190621" label="[19:06:21]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; E.g. early loader written in hex0 then it loads kernel that can do hex1...</span></div><div class="line" id="190638"><span class="nick" style="color:#6d2462"><a href="#190638" label="[19:06:38]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Or at least written in hex1</span></div><div class="line" id="190651"><span class="nick" style="color:#6d2462"><a href="#190651" label="[19:06:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Then hex2 and M1</span></div><div class="line" id="190712"><span class="nick" style="color:#6d2462"><a href="#190712" label="[19:07:12]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And only the last one would need to support full syscall list</span></div><div class="line" id="190759"><span class="nick" style="color:#6d2462"><a href="#190759" label="[19:07:59]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Otherwise builder-hex0 will grow too big and will be hard to manually edit/inspect</span></div><div class="line" id="235314"><span class="nick" style="color:#6c3d55"><a href="#235314" label="[23:53:14]">&lt;vagrantc&gt;</a></span><span class="message">does mes need tinycc patches? I tried building mes 0.25 on riscv64 with tcc, although I had to enable build of riscv64 on debian's tcc package ...</span></div><div class="line" id="235336"><span class="nick" style="color:#6c3d55"><a href="#235336" label="[23:53:36]">&lt;vagrantc&gt;</a></span><span class="message">which was based on tcc 0.9.27+git20200814.62c30a4a</span></div><div class="line" id="235353"><span class="nick" style="color:#6c3d55"><a href="#235353" label="[23:53:53]">&lt;vagrantc&gt;</a></span><span class="message">so presumably from git commit 62c30a4a from tcc git</span></div><div class="line" id="235601"><span class="nick" style="color:#6c3d55"><a href="#235601" label="[23:56:01]">&lt;vagrantc&gt;</a></span><span class="message">++ /usr/bin/tcc -nostdlib -g lib/linux/riscv64-mes-gcc/exit-42.S -o exit-42</span></div><div class="line" id="235603"><span class="nick" style="color:#d9d9d9"><a href="#235603" label="[23:56:03]">&lt;stikonas_&gt;</a></span><span class="message">vagrantc: I don't think we tested building mes with tinycc</span></div><div class="line" id="235604"><span class="nick" style="color:#6c3d55"><a href="#235604" label="[23:56:04]">&lt;vagrantc&gt;</a></span><span class="message">lib/linux/riscv64-mes-gcc/exit-42.S:28: error: RISCV64 asm not implemented.</span></div><div class="line" id="235614"><span class="nick" style="color:#d9d9d9"><a href="#235614" label="[23:56:14]">&lt;stikonas_&gt;</a></span><span class="message">yeah, that too</span></div><div class="line" id="235628"><span class="nick" style="color:#6c3d55"><a href="#235628" label="[23:56:28]">&lt;vagrantc&gt;</a></span><span class="message">stikonas_: what is mes tested building with?</span></div><div class="line" id="235636"><span class="nick" style="color:#6c3d55"><a href="#235636" label="[23:56:36]">&lt;vagrantc&gt;</a></span><span class="message">as the same question came up with gcc?</span></div><div class="line" id="235720"><span class="nick" style="color:#6c3d55"><a href="#235720" label="[23:57:20]">&lt;vagrantc&gt;</a></span><span class="message">slightly confused by: tcc ... lib/linux-riscv64-mes-gcc ... shouldn't it be lib/linux-riscv64-mes-tcc ?</span></div><div class="line" id="235754"><span class="nick" style="color:#6c3d55"><a href="#235754" label="[23:57:54]">&lt;vagrantc&gt;</a></span><span class="message">well, not the same build failure, but ... gcc was not considered tested either?</span></div><div class="line" id="235830"><span class="nick" style="color:#6c3d55"><a href="#235830" label="[23:58:30]">&lt;vagrantc&gt;</a></span><span class="message">just tested by the bootstrap from hex0?</span></div><div class="line" id="235839"><span class="nick" style="color:#6c3d55"><a href="#235839" label="[23:58:39]">&lt;vagrantc&gt;</a></span><span class="message">somewhere in there is some compiler :)</span></div><div class="line" id="235848"><span class="nick" style="color:#d9d9d9"><a href="#235848" label="[23:58:48]">&lt;stikonas_&gt;</a></span><span class="message">vagrantc: mescc and m2-planet</span></div><div class="line" id="235855"><span class="nick" style="color:#d9d9d9"><a href="#235855" label="[23:58:55]">&lt;stikonas_&gt;</a></span><span class="message">and gcc</span></div><br /></div></body></html>