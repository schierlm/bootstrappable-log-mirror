<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002822"><span class="nick" style="color:#8dd3c7"><a href="#002822" label="[00:28:22]">&lt;OriansJ&gt;</a></span><span class="message">pder: it is the .answers file at the root directory which validates that every final binary was made correctly. you can update with  Generate-${arch}-answers after a successful build. The SHA256SUMS files are for trying to figure out which step in the bootstrap is wrong (because its checksum is wrong) [Which also needs to be updated but it isn't as noticable as the default build reporting failure]</span></div><div class="line" id="002916"><span class="nick" style="color:#8dd3c7"><a href="#002916" label="[00:29:16]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: if we finish blynn-compiler's steps by the new year; we will have a core haskell fully bootstrapped.</span></div><div class="line" id="002921"><span class="nick" style="color:#8dd3c7"><a href="#002921" label="[00:29:21]">&lt;OriansJ&gt;</a></span><span class="message">yt_: thank you</span></div><div class="line" id="002935"><span class="nick" style="color:#2e2a4a"><a href="#002935" label="[00:29:35]">&lt;yt_&gt;</a></span><span class="message">uh oh. I've got a failing bootstrap on AArch64. looks like it is down to a63b883 in M2-Planet :(</span></div><div class="line" id="003045"><span class="nick" style="color:#2e2a4a"><a href="#003045" label="[00:30:45]">&lt;yt_&gt;</a></span><span class="message">got the unsigned comparisons done, though, so I'll get those up.</span></div><div class="line" id="003216"><span class="nick" style="color:#8dd3c7"><a href="#003216" label="[00:32:16]">&lt;OriansJ&gt;</a></span><span class="message">yt_: if you mean in mescc-tools-seed it is because I didn't have time to update the AArch64 checksums yet</span></div><div class="line" id="003253"><span class="nick" style="color:#2e2a4a"><a href="#003253" label="[00:32:53]">&lt;yt_&gt;</a></span><span class="message">it's not just the checksums though. M2-Planet compiled hex2 fails with a SIGBUS</span></div><div class="line" id="003539"><span class="nick" style="color:#8dd3c7"><a href="#003539" label="[00:35:39]">&lt;OriansJ&gt;</a></span><span class="message">yt_: that doesn't make any sense</span></div><div class="line" id="003609"><span class="nick" style="color:#8dd3c7"><a href="#003609" label="[00:36:09]">&lt;OriansJ&gt;</a></span><span class="message">if you checkout a63b883 in M2-Planet; do a make clean M2-Planet then ./test/test0104/hello-aarch64.sh</span></div><div class="line" id="003630"><span class="nick" style="color:#8dd3c7"><a href="#003630" label="[00:36:30]">&lt;OriansJ&gt;</a></span><span class="message">cp test/test0104/kaem.M1 foo</span></div><div class="line" id="003702"><span class="nick" style="color:#8dd3c7"><a href="#003702" label="[00:37:02]">&lt;OriansJ&gt;</a></span><span class="message">git checkout e5befc4feed411f55303c1fa014226b9d6017e29 &amp;&amp; make clean M2-Planet then ./test/test0104/hello-aarch64.sh</span></div><div class="line" id="003716"><span class="nick" style="color:#8dd3c7"><a href="#003716" label="[00:37:16]">&lt;OriansJ&gt;</a></span><span class="message">then sha256sum test/test0104/kaem.M1 foo</span></div><div class="line" id="003723"><span class="nick" style="color:#8dd3c7"><a href="#003723" label="[00:37:23]">&lt;OriansJ&gt;</a></span><span class="message">the files are identical</span></div><div class="line" id="003927"><span class="nick" style="color:#8dd3c7"><a href="#003927" label="[00:39:27]">&lt;OriansJ&gt;</a></span><span class="message">so if test0104 (kaem.c) passes on AArch64 at commit a63b883; there is no way for it to fail on commit e5befc4feed411f55303c1fa014226b9d6017e29 as the output is bit for bit identical</span></div><div class="line" id="004025"><span class="nick" style="color:#2e2a4a"><a href="#004025" label="[00:40:25]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I have this diff when compiling hex2 with M2-Planet <a rel="nofollow" href="https://paste.debian.net/1177197/">https://paste.debian.net/1177197/</a> </span></div><div class="line" id="004140"><span class="nick" style="color:#2e2a4a"><a href="#004140" label="[00:41:40]">&lt;yt_&gt;</a></span><span class="message">hex2 with the arithmetic/logical shift right sees a bus error when trying to compile M1</span></div><div class="line" id="004349"><span class="nick" style="color:#8dd3c7"><a href="#004349" label="[00:43:49]">&lt;OriansJ&gt;</a></span><span class="message">yt_: did you mean prior to a63b883 ?</span></div><div class="line" id="004521"><span class="nick" style="color:#8dd3c7"><a href="#004521" label="[00:45:21]">&lt;OriansJ&gt;</a></span><span class="message">because at that commit the diff is - DEFINE RSHIFT_X0_X1_X0 2028c09a and + DEFINE LOGICAL_RSHIFT_X0_X1_X0 2024c09a +DEFINE ARITH_RSHIFT_X0_X1_X0 2028c09a</span></div><div class="line" id="004614"><span class="nick" style="color:#2e2a4a"><a href="#004614" label="[00:46:14]">&lt;yt_&gt;</a></span><span class="message">Sigh. Looks like I forgot to add LOGICAL_RSHIFT and ARITH_RSHIFT to aarch64_defs.M1 in mescc-tools-seed!</span></div><div class="line" id="004638"><span class="nick" style="color:#8dd3c7"><a href="#004638" label="[00:46:38]">&lt;OriansJ&gt;</a></span><span class="message">yt_: that would do it</span></div><div class="line" id="004641"><span class="nick" style="color:#2e2a4a"><a href="#004641" label="[00:46:41]">&lt;yt_&gt;</a></span><span class="message">So those don't get translated by M1, and chaos ensues</span></div><div class="line" id="004653"><span class="nick" style="color:#8dd3c7"><a href="#004653" label="[00:46:53]">&lt;OriansJ&gt;</a></span><span class="message">and M0 doesn't take it well</span></div><div class="line" id="004721"><span class="nick" style="color:#8dd3c7"><a href="#004721" label="[00:47:21]">&lt;OriansJ&gt;</a></span><span class="message">but using M2-Planet built M1 should give a user friendly error</span></div><div class="line" id="004754"><span class="nick" style="color:#8dd3c7"><a href="#004754" label="[00:47:54]">&lt;OriansJ&gt;</a></span><span class="message">(or even gcc built M1)</span></div><div class="line" id="005131"><span class="nick" style="color:#6b8072"><a href="#005131" label="[00:51:31]">&lt;fossy&gt;</a></span><span class="message">OriansJ: i have found a segfault in cc_x86</span></div><div class="line" id="005141"><span class="nick" style="color:#6b8072"><a href="#005141" label="[00:51:41]">&lt;fossy&gt;</a></span><span class="message">if you run cc_x86 on an empty file, it segfaults</span></div><div class="line" id="005149"><span class="nick" style="color:#6b8072"><a href="#005149" label="[00:51:49]">&lt;fossy&gt;</a></span><span class="message">likely for other architectures too</span></div><div class="line" id="005234"><span class="nick" style="color:#8dd3c7"><a href="#005234" label="[00:52:34]">&lt;OriansJ&gt;</a></span><span class="message">fossy: probably, it wasn't something I thought of when building cc_x86.M1</span></div><div class="line" id="005329"><span class="nick" style="color:#8dd3c7"><a href="#005329" label="[00:53:29]">&lt;OriansJ&gt;</a></span><span class="message">but it should be realitvely easy to add a catch to make a user friendly warning</span></div><div class="line" id="005347"><span class="nick" style="color:#6b8072"><a href="#005347" label="[00:53:47]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="005411"><span class="nick" style="color:#8dd3c7"><a href="#005411" label="[00:54:11]">&lt;OriansJ&gt;</a></span><span class="message">probably a 4-6line diff total per architecture</span></div><div class="line" id="005543"><span class="nick" style="color:#8dd3c7"><a href="#005543" label="[00:55:43]">&lt;OriansJ&gt;</a></span><span class="message">fossy: could you help me out and make a patch for me?</span></div><div class="line" id="005757"><span class="nick" style="color:#8dd3c7"><a href="#005757" label="[00:57:57]">&lt;OriansJ&gt;</a></span><span class="message">it probably would be somewhere either after CALL32 %read_all_tokens</span></div><div class="line" id="010105"><span class="nick" style="color:#8dd3c7"><a href="#010105" label="[01:01:05]">&lt;OriansJ&gt;</a></span><span class="message">yeah it would be a simple check for NULL in eax after CALL32 %read_all_tokens</span></div><div class="line" id="010145"><span class="nick" style="color:#8dd3c7"><a href="#010145" label="[01:01:45]">&lt;OriansJ&gt;</a></span><span class="message">and then simply display an error and jump to exit_failure</span></div><div class="line" id="010741"><span class="nick" style="color:#2e2a4a"><a href="#010741" label="[01:07:41]">&lt;yt_&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/pull/21">https://github.com/oriansj/mescc-tools-seed/pull/21</a>  and <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/8">https://github.com/oriansj/M2-Planet/pull/8</a> </span></div><div class="line" id="010826"><span class="nick" style="color:#8dd3c7"><a href="#010826" label="[01:08:26]">&lt;OriansJ&gt;</a></span><span class="message">yt_: thank you</span></div><div class="line" id="010920"><span class="nick" style="color:#2e2a4a"><a href="#010920" label="[01:09:20]">&lt;yt_&gt;</a></span><span class="message">OriansJ: no problem. the hashes are with M2-Planet HEAD, so they might need regenerating</span></div><div class="line" id="011121"><span class="nick" style="color:#8dd3c7"><a href="#011121" label="[01:11:21]">&lt;OriansJ&gt;</a></span><span class="message">yt_: probably</span></div><div class="line" id="011226"><span class="nick" style="color:#8dd3c7"><a href="#011226" label="[01:12:26]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet pull request merged</span></div><div class="line" id="011533"><span class="nick" style="color:#6b8072"><a href="#011533" label="[01:15:33]">&lt;fossy&gt;</a></span><span class="message">OriansJ: um i can try</span></div><div class="line" id="011549"><span class="nick" style="color:#6b8072"><a href="#011549" label="[01:15:49]">&lt;fossy&gt;</a></span><span class="message">i am really inexperienced with M0/M1 as a language</span></div><div class="line" id="011627"><span class="nick" style="color:#6b8072"><a href="#011627" label="[01:16:27]">&lt;fossy&gt;</a></span><span class="message">shouldnt be too hard</span></div><div class="line" id="011744"><span class="nick" style="color:#2e2a4a"><a href="#011744" label="[01:17:44]">&lt;yt_&gt;</a></span><span class="message">fossy: you get used to it :D</span></div><div class="line" id="012342"><span class="nick" style="color:#8dd3c7"><a href="#012342" label="[01:23:42]">&lt;OriansJ&gt;</a></span><span class="message">well if it makes it easier for you a patch for the NASM version would also be helpful</span></div><div class="line" id="012500"><span class="nick" style="color:#8dd3c7"><a href="#012500" label="[01:25:00]">&lt;OriansJ&gt;</a></span><span class="message">debug_list will give you everything you need assembly wise to do it</span></div><div class="line" id="013011"><span class="nick" style="color:#8dd3c7"><a href="#013011" label="[01:30:11]">&lt;OriansJ&gt;</a></span><span class="message">yt_: your mescc-tools-seed work has been merged and I have updated M2-Planet to the latest commit in mescc-tools-seed; could you please regenerate checksums</span></div><div class="line" id="013150"><span class="nick" style="color:#2e2a4a"><a href="#013150" label="[01:31:50]">&lt;yt_&gt;</a></span><span class="message">OriansJ: on it</span></div><div class="line" id="013205"><span class="nick" style="color:#8dd3c7"><a href="#013205" label="[01:32:05]">&lt;OriansJ&gt;</a></span><span class="message">thank you yt_ ^_^</span></div><div class="line" id="013423"><span class="nick" style="color:#2e2a4a"><a href="#013423" label="[01:34:23]">&lt;yt_&gt;</a></span><span class="message">all hashes are what they should be :D</span></div><div class="line" id="013608"><span class="nick" style="color:#2e2a4a"><a href="#013608" label="[01:36:08]">&lt;yt_&gt;</a></span><span class="message">OriansJ: ^^</span></div><div class="line" id="013808"><span class="nick" style="color:#80b1d3"><a href="#013808" label="[01:38:08]">&lt;siraben&gt;</a></span><span class="message">OriansJ: oh wow, we got rid of the filter_haskell_output script entirely?</span></div><div class="line" id="013840"><span class="nick" style="color:#80b1d3"><a href="#013840" label="[01:38:40]">&lt;siraben&gt;</a></span><span class="message">I was still working on that, heh, glad to see it resolved.</span></div><div class="line" id="015720"><span class="nick" style="color:#8dd3c7"><a href="#015720" label="[01:57:20]">&lt;OriansJ&gt;</a></span><span class="message">yt: nice thank you for all your hard work</span></div><div class="line" id="015833"><span class="nick" style="color:#8dd3c7"><a href="#015833" label="[01:58:33]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well we do wish to get everything working in a fashion where we can just plop blynn-compiler into mescc-tools-seed and every architecture gets a working Haskell compiler</span></div><div class="line" id="015934"><span class="nick" style="color:#80b1d3"><a href="#015934" label="[01:59:34]">&lt;siraben&gt;</a></span><span class="message">OriansJ: right, let me know when you update mescc-tools-seed with the unsigned fix so I can revert blynn-compiler's build to be based off of it</span></div><div class="line" id="020018"><span class="nick" style="color:#8dd3c7"><a href="#020018" label="[02:00:18]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yt just helped me do that</span></div><div class="line" id="020026"><span class="nick" style="color:#8dd3c7"><a href="#020026" label="[02:00:26]">&lt;OriansJ&gt;</a></span><span class="message">So that is operational</span></div><div class="line" id="021522"><span class="nick" style="color:#6d2462"><a href="#021522" label="[02:15:22]">&lt;pder&gt;</a></span><span class="message">siraben: now that marginally.c can be built, I am starting to modify virtually.hs to generate M2 Planet compatible code.  If you want, I can try to make the output M2-Planet compatible, then based on the diffs, you could update the Haskell.</span></div><div class="line" id="021558"><span class="nick" style="color:#6d2462"><a href="#021558" label="[02:15:58]">&lt;pder&gt;</a></span><span class="message">I'm making slow progress, but I'm still pretty new to Haskell</span></div><div class="line" id="021642"><span class="nick" style="color:#8dd3c7"><a href="#021642" label="[02:16:42]">&lt;OriansJ&gt;</a></span><span class="message">pder: don't you mean the generated/marginally.c made by marginally.hs ?</span></div><div class="line" id="021643"><span class="nick" style="color:#6d2462"><a href="#021643" label="[02:16:43]">&lt;pder&gt;</a></span><span class="message">I'm having fun learning it though</span></div><div class="line" id="021721"><span class="nick" style="color:#6d2462"><a href="#021721" label="[02:17:21]">&lt;pder&gt;</a></span><span class="message">its actually the compiled virtually.hs code that prints the output that goes in marginally.c</span></div><div class="line" id="021825"><span class="nick" style="color:#8dd3c7"><a href="#021825" label="[02:18:25]">&lt;OriansJ&gt;</a></span><span class="message">ok</span></div><div class="line" id="022102"><span class="nick" style="color:#6d2462"><a href="#022102" label="[02:21:02]">&lt;pder&gt;</a></span><span class="message">if I were to modify virtually.hs and type Make marginally.c, it would first build virtually_raw.txt then marginally.c</span></div><div class="line" id="022147"><span class="nick" style="color:#6d2462"><a href="#022147" label="[02:21:47]">&lt;pder&gt;</a></span><span class="message">*make</span></div><div class="line" id="022204"><span class="nick" style="color:#8dd3c7"><a href="#022204" label="[02:22:04]">&lt;OriansJ&gt;</a></span><span class="message">pder: well yes, it was a build dependency of marginally.c that updated</span></div><div class="line" id="022250"><span class="nick" style="color:#6d2462"><a href="#022250" label="[02:22:50]">&lt;pder&gt;</a></span><span class="message">Ive sometimes found it confusing which stage is affecting the output of other stages because there is no reason to the naming</span></div><div class="line" id="022325"><span class="nick" style="color:#80b1d3"><a href="#022325" label="[02:23:25]">&lt;siraben&gt;</a></span><span class="message">pder: ok, let me know if you have questions etc and decoding GHC's type error messages can be tricky at first</span></div><div class="line" id="022328"><span class="nick" style="color:#8dd3c7"><a href="#022328" label="[02:23:28]">&lt;OriansJ&gt;</a></span><span class="message">pder: well we can rename *EVERYTHING*</span></div><div class="line" id="022343"><span class="nick" style="color:#80b1d3"><a href="#022343" label="[02:23:43]">&lt;siraben&gt;</a></span><span class="message">pder: I agree, I'll take a look at your changes because I tried and failed to change things past efffectively.hs</span></div><div class="line" id="022453"><span class="nick" style="color:#8dd3c7"><a href="#022453" label="[02:24:53]">&lt;OriansJ&gt;</a></span><span class="message">also is it just me or are the contents of generated/marginally.c similiar to rts.c?</span></div><div class="line" id="022542"><span class="nick" style="color:#6d2462"><a href="#022542" label="[02:25:42]">&lt;pder&gt;</a></span><span class="message">Its quite similar.  the run() is different and uses enums instead of characters.  The list of enums is generated in the Haskell code</span></div><div class="line" id="022622"><span class="nick" style="color:#8dd3c7"><a href="#022622" label="[02:26:22]">&lt;OriansJ&gt;</a></span><span class="message">pder: enums are just numbers; so we could just use CONSTANTs/#defines</span></div><div class="line" id="022702"><span class="nick" style="color:#6d2462"><a href="#022702" label="[02:27:02]">&lt;pder&gt;</a></span><span class="message">Yeah, that is my plan.  I just need help modifying the Haskell to generate these strings.</span></div><div class="line" id="022721"><span class="nick" style="color:#8dd3c7"><a href="#022721" label="[02:27:21]">&lt;OriansJ&gt;</a></span><span class="message">heck I could even define THING 67; instead of doing 'C'</span></div><div class="line" id="022808"><span class="nick" style="color:#8dd3c7"><a href="#022808" label="[02:28:08]">&lt;OriansJ&gt;</a></span><span class="message">So it would be a change in vm.c and just strip the C code generation out of the haskell</span></div><div class="line" id="022816"><span class="nick" style="color:#8dd3c7"><a href="#022816" label="[02:28:16]">&lt;OriansJ&gt;</a></span><span class="message">(again)</span></div><div class="line" id="022830"><span class="nick" style="color:#6d2462"><a href="#022830" label="[02:28:30]">&lt;pder&gt;</a></span><span class="message">Here is an example line: foldr (.) id (map (\(s, _) -&gt; (&quot;// CONSTANT _&quot;++) . (s++) . ('\n':)) comdefs)</span></div><div class="line" id="022929"><span class="nick" style="color:#8dd3c7"><a href="#022929" label="[02:29:29]">&lt;OriansJ&gt;</a></span><span class="message">pder: you probably want to also include a #define too if you want GCC to also be able to compile the output</span></div><div class="line" id="022956"><span class="nick" style="color:#6d2462"><a href="#022956" label="[02:29:56]">&lt;pder&gt;</a></span><span class="message">The run() function is also created dynamically</span></div><div class="line" id="023111"><span class="nick" style="color:#80b1d3"><a href="#023111" label="[02:31:11]">&lt;siraben&gt;</a></span><span class="message">pder: yeah, seems like what that line is doing is making [a,b,c,d] into // CONSTANT $a\n// CONSTANT $b\n...</span></div><div class="line" id="023217"><span class="nick" style="color:#8dd3c7"><a href="#023217" label="[02:32:17]">&lt;OriansJ&gt;</a></span><span class="message">siraben: // CONSTANT foo 10 is the M2-Planet way of doing constants instead of the #define foo 10 version done in standard C</span></div><div class="line" id="023228"><span class="nick" style="color:#6d2462"><a href="#023228" label="[02:32:28]">&lt;pder&gt;</a></span><span class="message">But I would want &quot;// CONSTANT _A 1\n#define _A 1\n// CONSTANT _B 2\n#define _B 2</span></div><div class="line" id="023325"><span class="nick" style="color:#8dd3c7"><a href="#023325" label="[02:33:25]">&lt;OriansJ&gt;</a></span><span class="message">as #thing in M2-Planet is a line comment and //thing in C is a line comment. So that what pder wants will work in both M2-Planet and GCC</span></div><div class="line" id="023329"><span class="nick" style="color:#6d2462"><a href="#023329" label="[02:33:29]">&lt;pder&gt;</a></span><span class="message">so some mixture of zip and map I imagine</span></div><div class="line" id="023455"><span class="nick" style="color:#80b1d3"><a href="#023455" label="[02:34:55]">&lt;siraben&gt;</a></span><span class="message">pder: I've closed that redundant PR adjusting effectively.hs and pruned my branches related to it</span></div><div class="line" id="023545"><span class="nick" style="color:#80b1d3"><a href="#023545" label="[02:35:45]">&lt;siraben&gt;</a></span><span class="message">pder: well not even zip is needed, I think just this part: (map (\(s, _) -&gt; (&quot;// CONSTANT _&quot;++) . (s++) . ('\n':))</span></div><div class="line" id="023545"><span class="nick" style="color:#8dd3c7"><a href="#023545" label="[02:35:45]">&lt;OriansJ&gt;</a></span><span class="message">now; we might not need that in virtually.hs if we tease out the actual unique pieces and put them into vm.c with a flag to enable them.</span></div><div class="line" id="023554"><span class="nick" style="color:#6d2462"><a href="#023554" label="[02:35:54]">&lt;pder&gt;</a></span><span class="message">Did you check out the modifications to the other .hs files? commit 8b2c4f5eb6bb1e7d9d7acf2649</span></div><div class="line" id="023629"><span class="nick" style="color:#80b1d3"><a href="#023629" label="[02:36:29]">&lt;siraben&gt;</a></span><span class="message">pder: yeah looks good to me, I wonder why it didn't work when I tried similar changes</span></div><div class="line" id="023704"><span class="nick" style="color:#80b1d3"><a href="#023704" label="[02:37:04]">&lt;siraben&gt;</a></span><span class="message">change into, (map (\(s, _) -&gt; (&quot;// CONSTANT _&quot;++) . (s++) . ('\n':) . (&quot;#define &quot; ++) . (s ++) . ('\n':))</span></div><div class="line" id="023705"><span class="nick" style="color:#6d2462"><a href="#023705" label="[02:37:05]">&lt;pder&gt;</a></span><span class="message">siraben: how to add a counter to the enums?  So it is // CONSTANT _E 5</span></div><div class="line" id="023720"><span class="nick" style="color:#80b1d3"><a href="#023720" label="[02:37:20]">&lt;siraben&gt;</a></span><span class="message">ah counter as well? definitely need to zip with upFrom 1</span></div><div class="line" id="023805"><span class="nick" style="color:#80b1d3"><a href="#023805" label="[02:38:05]">&lt;siraben&gt;</a></span><span class="message">i should note that the reason why lynn is using . (function composition) to concat strings is because of the encoding of strings as [Char] -&gt; [Char]</span></div><div class="line" id="023807"><span class="nick" style="color:#6d2462"><a href="#023807" label="[02:38:07]">&lt;pder&gt;</a></span><span class="message">I dont understand the colon after '\n'</span></div><div class="line" id="023813"><span class="nick" style="color:#80b1d3"><a href="#023813" label="[02:38:13]">&lt;siraben&gt;</a></span><span class="message">that's cons</span></div><div class="line" id="023820"><span class="nick" style="color:#80b1d3"><a href="#023820" label="[02:38:20]">&lt;siraben&gt;</a></span><span class="message">(:) :: a -&gt; [a] -&gt; [a]</span></div><div class="line" id="023830"><span class="nick" style="color:#80b1d3"><a href="#023830" label="[02:38:30]">&lt;siraben&gt;</a></span><span class="message">1:[2,3,4] == [1,2,3,4]</span></div><div class="line" id="023851"><span class="nick" style="color:#80b1d3"><a href="#023851" label="[02:38:51]">&lt;siraben&gt;</a></span><span class="message">cons but partially applied by filing the left arg, so (x:) is like (lambda (y) (cons x y)) in lisp</span></div><div class="line" id="023931"><span class="nick" style="color:#80b1d3"><a href="#023931" label="[02:39:31]">&lt;siraben&gt;</a></span><span class="message">to see why it typechecks,  ('\n':) has type String -&gt; String which composes of course with (s ++) of type String -&gt; String</span></div><div class="line" id="024012"><span class="nick" style="color:#6d2462"><a href="#024012" label="[02:40:12]">&lt;pder&gt;</a></span><span class="message">I havent had much luck running it in ghc.  Ive been doing a lot of trial and error just in the blynn-compiler</span></div><div class="line" id="024132"><span class="nick" style="color:#6d2462"><a href="#024132" label="[02:41:32]">&lt;pder&gt;</a></span><span class="message">OriansJ: I did something similar where I added a --foreign flag to vm to specify which version of foreign() to use</span></div><div class="line" id="024133"><span class="nick" style="color:#80b1d3"><a href="#024133" label="[02:41:33]">&lt;siraben&gt;</a></span><span class="message">yeah it's probably best to iterate in GHC since the type checker will tell you exactly where things are inconsistent</span></div><div class="line" id="024244"><span class="nick" style="color:#80b1d3"><a href="#024244" label="[02:42:44]">&lt;siraben&gt;</a></span><span class="message">pder: i'll make a branch that fixes the wrappers</span></div><div class="line" id="024431"><span class="nick" style="color:#6d2462"><a href="#024431" label="[02:44:31]">&lt;pder&gt;</a></span><span class="message">thank you, that will be very helpful</span></div><div class="line" id="034209"><span class="nick" style="color:#8dd3c7"><a href="#034209" label="[03:42:09]">&lt;OriansJ&gt;</a></span><span class="message">pder: if we consider the large blobby bits as bytecode and the haskell programs as bytecode compilers that just happen to include bytecode interpreters in their output; we could unify all of the steps and remove the need for flags for everything except bootstrap.</span></div><div class="line" id="034317"><span class="nick" style="color:#234e69"><a href="#034317" label="[03:43:17]">&lt;xentrac&gt;</a></span><span class="message">that's an interesting idea</span></div><div class="line" id="034400"><span class="nick" style="color:#234e69"><a href="#034400" label="[03:44:00]">&lt;xentrac&gt;</a></span><span class="message">as long as we can derive the bytecode from some non-bytecode input, right?</span></div><div class="line" id="034454"><span class="nick" style="color:#8dd3c7"><a href="#034454" label="[03:44:54]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well right now bytecode is used in the initial bootstrapping step</span></div><div class="line" id="034515"><span class="nick" style="color:#8dd3c7"><a href="#034515" label="[03:45:15]">&lt;OriansJ&gt;</a></span><span class="message">(which I plan on exploading anyway)</span></div><div class="line" id="034705"><span class="nick" style="color:#8dd3c7"><a href="#034705" label="[03:47:05]">&lt;OriansJ&gt;</a></span><span class="message">if I make matching changes in the Haskell and the VM run/foreign functions; then it all just becomes one big stupid bytecode vm; using bytecode to convert haskell into more bytecode</span></div><div class="line" id="042654"><span class="nick" style="color:#6b8072"><a href="#042654" label="[04:26:54]">&lt;fossy&gt;</a></span><span class="message">siraben: how much work do you think it will be in comparison to the haskell work to get scheme (yours or otherwise) running on blynn-compiler?</span></div><div class="line" id="045209"><span class="nick" style="color:#80b1d3"><a href="#045209" label="[04:52:09]">&lt;siraben&gt;</a></span><span class="message">fossy: not too hard, the evaluator doesn't use any fancy haskell features <a rel="nofollow" href="https://github.com/siraben/r5rs-denot/blob/master/src/SchemeEval.hs">https://github.com/siraben/r5rs-denot/blob/master/src/SchemeEval.hs</a>  (unlike the monad-transformer branch which is more idiomatic Haskell)</span></div><div class="line" id="045230"><span class="nick" style="color:#80b1d3"><a href="#045230" label="[04:52:30]">&lt;siraben&gt;</a></span><span class="message">I'll probably spend more time building up the required libraries for the heap and so on</span></div><div class="line" id="045245"><span class="nick" style="color:#80b1d3"><a href="#045245" label="[04:52:45]">&lt;siraben&gt;</a></span><span class="message">If that is too difficult, using the FFI will help relieve this</span></div><div class="line" id="045329"><span class="nick" style="color:#80b1d3"><a href="#045329" label="[04:53:29]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I will also look into removing need for the initial blobs</span></div><div class="line" id="045357"><span class="nick" style="color:#80b1d3"><a href="#045357" label="[04:53:57]">&lt;siraben&gt;</a></span><span class="message">maybe after the entirety of blynn-compiler (up to the precisely stage) is bootstrapped</span></div><div class="line" id="045446"><span class="nick" style="color:#80b1d3"><a href="#045446" label="[04:54:46]">&lt;siraben&gt;</a></span><span class="message">fossy: the haskell work has been relatively simple so far, pder and OriansJ are doing the work on the C side</span></div><div class="line" id="050743"><span class="nick" style="color:#80b1d3"><a href="#050743" label="[05:07:43]">&lt;siraben&gt;</a></span><span class="message">i chose this style also because it's in the R5RS spec so it's readily verifiable</span></div><div class="line" id="084353"><span class="nick" style="color:#234e69"><a href="#084353" label="[08:43:53]">&lt;xentrac&gt;</a></span><span class="message">R5RS &lt;3</span></div><div class="line" id="110004"><span class="nick" style="color:#80b1d3"><a href="#110004" label="[11:00:04]">&lt;siraben&gt;</a></span><span class="message">pder: <a rel="nofollow" href="https://github.com/pder/blynn-compiler/pull/3">https://github.com/pder/blynn-compiler/pull/3</a>  , you'll want to rebase after merging on OriansJ's master and open a PR for that</span></div><div class="line" id="110008"><span class="nick" style="color:#80b1d3"><a href="#110008" label="[11:00:08]">&lt;siraben&gt;</a></span><span class="message">xentrac: indeed!</span></div><div class="line" id="113016"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="134720"><span class="nick" style="color:#8dd3c7"><a href="#134720" label="[13:47:20]">&lt;OriansJ&gt;</a></span><span class="message">pder: will have a minor vm user interface change up shortly; I'll probably tweak it more later today</span></div><div class="line" id="215823"><span class="nick" style="color:#6c3d55"><a href="#215823" label="[21:58:23]">&lt;deesix&gt;</a></span><span class="message">yt, continuing my review of DEFINEs in mescc-tools-seed/AArch64...</span></div><div class="line" id="215828"><span class="nick" style="color:#6c3d55"><a href="#215828" label="[21:58:28]">&lt;deesix&gt;</a></span><span class="message">I think I caused some confusion by keeping the symbols SP-named when I started to use x18 as stack pointer in M2-Planet to fix (b2ece54864fc) the wasteful stack.</span></div><div class="line" id="215834"><span class="nick" style="color:#6c3d55"><a href="#215834" label="[21:58:34]">&lt;deesix&gt;</a></span><span class="message">For example, now SET_X1_FROM_SP is defined both as 'mov x1, sp' and 'mov x1, x18' in mescc-tools-seed.</span></div><div class="line" id="215839"><span class="nick" style="color:#6c3d55"><a href="#215839" label="[21:58:39]">&lt;deesix&gt;</a></span><span class="message">On the other hand, of course, there're the PUSH/POP definitions... some using x18 (with 64bits stack elements) and others with the same name using sp (and 128bits).</span></div><div class="line" id="215844"><span class="nick" style="color:#6c3d55"><a href="#215844" label="[21:58:44]">&lt;deesix&gt;</a></span><span class="message">I did not look which file is using them and I guess there's coherent usage in each working program.</span></div><div class="line" id="215852"><span class="nick" style="color:#6c3d55"><a href="#215852" label="[21:58:52]">&lt;deesix&gt;</a></span><span class="message">A quick look at some pre-M1 files shows that SP/128bits is used there, which explains definitions for the M1 implementations, I suppose.</span></div><div class="line" id="215859"><span class="nick" style="color:#6c3d55"><a href="#215859" label="[21:58:59]">&lt;deesix&gt;</a></span><span class="message">yt, OriansJ, any thoughts? Which variant do we want at mescc-tools-seed/AArch64/aarch64_defs.M1? Do we want the same one elsewhere?</span></div><div class="line" id="221202"><span class="nick" style="color:#6c3d55"><a href="#221202" label="[22:12:02]">&lt;deesix&gt;</a></span><span class="message">yt, I saw your note about LOAD_W0_AHEAD. I'll look how I came up with that encoding.</span></div><div class="line" id="230748"><span class="nick" style="color:#8dd3c7"><a href="#230748" label="[23:07:48]">&lt;OriansJ&gt;</a></span><span class="message">deesix: my thoughts: stack waste doesn't concern me but confusion and bugs do. so the question for you and yt is what will reduce the odds of future confusion and bugs when debugging and updating the files?</span></div><div class="line" id="230832"><span class="nick" style="color:#8dd3c7"><a href="#230832" label="[23:08:32]">&lt;OriansJ&gt;</a></span><span class="message">pder: I finally found a way to break up the pieces of raw into tiny chunks</span></div><div class="line" id="233417"><span class="nick" style="color:#6c3d55"><a href="#233417" label="[23:34:17]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I think having just one variant is safer, but it depends on how self-contained one thinks about the files are (and the projects copying files from each other). It easy to imagine adding definitions by copy and end up mixing variants. But I'm not sure if most files are not really expecting additions.</span></div><div class="line" id="233617"><span class="nick" style="color:#6c3d55"><a href="#233617" label="[23:36:17]">&lt;deesix&gt;</a></span><span class="message">I'd be fine with reverting the optimization in M2-Planet and using the new variant from the low level implementations if that's easier.</span></div><div class="line" id="234114"><span class="nick" style="color:#6c3d55"><a href="#234114" label="[23:41:14]">&lt;deesix&gt;</a></span><span class="message">*It's easy to imagine</span></div><div class="line" id="235158"><span class="nick" style="color:#6c3d55"><a href="#235158" label="[23:51:58]">&lt;deesix&gt;</a></span><span class="message">Well, not so &quot;new&quot; variant but the original one (before we decided to stop wasting in M2-Planet) that is also used in the new low level (hex and so) implementations.</span></div><br /></div></body></html>