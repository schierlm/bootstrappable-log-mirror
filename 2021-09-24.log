<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013531"><span class="nick" style="color:#8dd3c7"><a href="#013531" label="[01:35:31]">&lt;oriansj&gt;</a></span><span class="message">stikonas: do you mean cc_* crashes or the generated output?</span></div><div class="line" id="014502"><span class="nick" style="color:#2e2a4a"><a href="#014502" label="[01:45:02]">&lt;stikonas&gt;</a></span><span class="message">oriansj: generated output...</span></div><div class="line" id="014515"><span class="nick" style="color:#2e2a4a"><a href="#014515" label="[01:45:15]">&lt;stikonas&gt;</a></span><span class="message">cc_* never crashes at this point...</span></div><div class="line" id="014529"><span class="nick" style="color:#2e2a4a"><a href="#014529" label="[01:45:29]">&lt;stikonas&gt;</a></span><span class="message">it's probably some codegen bug...</span></div><div class="line" id="014545"><span class="nick" style="color:#2e2a4a"><a href="#014545" label="[01:45:45]">&lt;stikonas&gt;</a></span><span class="message">possibly my offsets are wrong in collect_argument</span></div><div class="line" id="014622"><span class="nick" style="color:#2e2a4a"><a href="#014622" label="[01:46:22]">&lt;stikonas&gt;</a></span><span class="message">so something went wrong in that second deep function...</span></div><div class="line" id="014848"><span class="nick" style="color:#2e2a4a"><a href="#014848" label="[01:48:48]">&lt;stikonas&gt;</a></span><span class="message">offsets in <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L2298">https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L2298</a> </span></div><div class="line" id="015220"><span class="nick" style="color:#2e2a4a"><a href="#015220" label="[01:52:20]">&lt;stikonas&gt;</a></span><span class="message">(and that's C file I'm compiling <a rel="nofollow" href="https://paste.debian.net/1213040/">https://paste.debian.net/1213040/</a>) </span></div><div class="line" id="021723"><span class="nick" style="color:#2e2a4a"><a href="#021723" label="[02:17:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think one of these offsets is off by 8</span></div><div class="line" id="021802"><span class="nick" style="color:#2e2a4a"><a href="#021802" label="[02:18:02]">&lt;stikonas&gt;</a></span><span class="message">hence inserting random char *c = ret &quot;fixes&quot; it</span></div><div class="line" id="022718"><span class="nick" style="color:#2e2a4a"><a href="#022718" label="[02:27:18]">&lt;stikonas&gt;</a></span><span class="message">ok, I think there is some mess up in collect_local_fresh</span></div><div class="line" id="024011"><span class="nick" style="color:#2e2a4a"><a href="#024011" label="[02:40:11]">&lt;stikonas&gt;</a></span><span class="message">yep, replacing <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L2315">https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L2315</a>  !8 with !32 fixes this problem</span></div><div class="line" id="024044"><span class="nick" style="color:#2e2a4a"><a href="#024044" label="[02:40:44]">&lt;stikonas&gt;</a></span><span class="message">at least M2-Planet now shows something proper when I type M2 --help</span></div><div class="line" id="024047"><span class="nick" style="color:#2e2a4a"><a href="#024047" label="[02:40:47]">&lt;stikonas&gt;</a></span><span class="message">and does not crash</span></div><div class="line" id="024103"><span class="nick" style="color:#2e2a4a"><a href="#024103" label="[02:41:03]">&lt;stikonas&gt;</a></span><span class="message">(M0 still crashes on cc_riscv64 output), so I build M2-Planet with M1</span></div><div class="line" id="024107"><span class="nick" style="color:#2e2a4a"><a href="#024107" label="[02:41:07]">&lt;stikonas&gt;</a></span><span class="message">but that's some unrelated issue</span></div><div class="line" id="024842"><span class="nick" style="color:#8dd3c7"><a href="#024842" label="[02:48:42]">&lt;oriansj&gt;</a></span><span class="message">it is easiest to debug cc_* by knowing what it is supposed to produce; So adding RISC-V support to M2-Planet is probably the best course of action.</span></div><div class="line" id="025011"><span class="nick" style="color:#6b8072"><a href="#025011" label="[02:50:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it seems to work much better now</span></div><div class="line" id="025021"><span class="nick" style="color:#6b8072"><a href="#025021" label="[02:50:21]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll see more tomorrow</span></div><div class="line" id="025037"><span class="nick" style="color:#6b8072"><a href="#025037" label="[02:50:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Also need to solve M0 issue</span></div><div class="line" id="025052"><span class="nick" style="color:#6b8072"><a href="#025052" label="[02:50:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Or maybe build M1 before M2</span></div><div class="line" id="025211"><span class="nick" style="color:#8dd3c7"><a href="#025211" label="[02:52:11]">&lt;oriansj&gt;</a></span><span class="message">M1 isn't expected to be buildable by cc_*; only M2-Planet</span></div><div class="line" id="025517"><span class="nick" style="color:#8dd3c7"><a href="#025517" label="[02:55:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: have you looked at <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/HACKING">https://github.com/oriansj/M2-Planet/blob/master/HACKING</a>  yet? specifically the magic section (in a text editor because github displays it entirely wrong)</span></div><div class="line" id="030334"><span class="nick" style="color:#8dd3c7"><a href="#030334" label="[03:03:34]">&lt;oriansj&gt;</a></span><span class="message">it looks like you mixed the AArch64 and AMD64 function argument offsets</span></div><div class="line" id="030837"><span class="nick" style="color:#8dd3c7"><a href="#030837" label="[03:08:37]">&lt;oriansj&gt;</a></span><span class="message">I think I find a bug in function_call. The push onto stack order is wrong. It needs to be temp, then the function return pointer, then base pointer, then and only then do you copy the stack pointer to the base pointer register.</span></div><div class="line" id="031118"><span class="nick" style="color:#8dd3c7"><a href="#031118" label="[03:11:18]">&lt;oriansj&gt;</a></span><span class="message">then collect_local_fresh isn't supposed to be 16 but rather 8</span></div><div class="line" id="031157"><span class="nick" style="color:#6b8072"><a href="#031157" label="[03:11:57]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, I'll double check these tomorrow...</span></div><div class="line" id="031234"><span class="nick" style="color:#8dd3c7"><a href="#031234" label="[03:12:34]">&lt;oriansj&gt;</a></span><span class="message">because that 16 is what is going to give you the absolute wrong value in that second function</span></div><div class="line" id="031509"><span class="nick" style="color:#8dd3c7"><a href="#031509" label="[03:15:09]">&lt;oriansj&gt;</a></span><span class="message">and because most architectures don't zero memory when they pop it, what is in that address is probably what last was in that stack position.</span></div><div class="line" id="031835"><span class="nick" style="color:#8dd3c7"><a href="#031835" label="[03:18:35]">&lt;oriansj&gt;</a></span><span class="message">The reason why AArch64 is only +1 register size in that case is because unlike all the other architectures it doesn't have an implicit push when it does a call</span></div><div class="line" id="031918"><span class="nick" style="color:#8dd3c7"><a href="#031918" label="[03:19:18]">&lt;oriansj&gt;</a></span><span class="message">which would have the +2 register size offset to compensate for that value.</span></div><div class="line" id="032004"><span class="nick" style="color:#8dd3c7"><a href="#032004" label="[03:20:04]">&lt;oriansj&gt;</a></span><span class="message">So AArch64 has to preserve the link register while setting up for a function call</span></div><div class="line" id="033054"><span class="nick" style="color:#8dd3c7"><a href="#033054" label="[03:30:54]">&lt;oriansj&gt;</a></span><span class="message">and submitted a lightning talk proposal. Hopefully they like that</span></div><div class="line" id="033132"><span class="nick" style="color:#8dd3c7"><a href="#033132" label="[03:31:32]">&lt;oriansj&gt;</a></span><span class="message">and I am open to suggestions for other conferences to try to give a stage0 talk provided they allow remote</span></div><div class="line" id="033641"><span class="nick" style="color:#80b1d3"><a href="#033641" label="[03:36:41]">&lt;xentrac&gt;</a></span><span class="message">usually the way lightning talks work at conferences I've been to is sort of barcampish</span></div><div class="line" id="033716"><span class="nick" style="color:#80b1d3"><a href="#033716" label="[03:37:16]">&lt;xentrac&gt;</a></span><span class="message">someone puts up a flipchart or outlines an area on the blackboard that says &quot;LIGHTNING TALKS SIGN UP HERE&quot; and people walk by and write stuff in it</span></div><div class="line" id="033758"><span class="nick" style="color:#80b1d3"><a href="#033758" label="[03:37:58]">&lt;xentrac&gt;</a></span><span class="message">and then when the time comes for the lightning talks the emcee goes down the list, calling on each person who signed up when the previous speaker finishes or runs out of their 5 minutes</span></div><div class="line" id="033801"><span class="nick" style="color:#6d2462"><a href="#033801" label="[03:38:01]">&lt;pabs3&gt;</a></span><span class="message">I'd definitely suggest LCA, fairly technical stuff gets presented there</span></div><div class="line" id="033833"><span class="nick" style="color:#6d2462"><a href="#033833" label="[03:38:33]">&lt;pabs3&gt;</a></span><span class="message">DebConf would be another option, but that is past already for this year</span></div><div class="line" id="033842"><span class="nick" style="color:#80b1d3"><a href="#033842" label="[03:38:42]">&lt;xentrac&gt;</a></span><span class="message">are there any architectures that do zero memory when they pop it?</span></div><div class="line" id="043747"><span class="nick" style="color:#8dd3c7"><a href="#043747" label="[04:37:47]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well every architecture which memory has destructive reads by default</span></div><div class="line" id="043841"><span class="nick" style="color:#8dd3c7"><a href="#043841" label="[04:38:41]">&lt;oriansj&gt;</a></span><span class="message">but more specifically knight zeros on pops unless you use the load auto increment/decrement instructions like pop</span></div><div class="line" id="044027"><span class="nick" style="color:#80b1d3"><a href="#044027" label="[04:40:27]">&lt;xentrac&gt;</a></span><span class="message">oh neat</span></div><div class="line" id="044045"><span class="nick" style="color:#80b1d3"><a href="#044045" label="[04:40:45]">&lt;xentrac&gt;</a></span><span class="message">I don't know of any memory which has destructive reads by default</span></div><div class="line" id="044152"><span class="nick" style="color:#80b1d3"><a href="#044152" label="[04:41:52]">&lt;xentrac&gt;</a></span><span class="message">I mean core reads are destructive at the level of the actual cores, but the hardware restores that for you, doesn't it?</span></div><div class="line" id="044426"><span class="nick" style="color:#8dd3c7"><a href="#044426" label="[04:44:26]">&lt;oriansj&gt;</a></span><span class="message">well no, you need to issue a write while you still have the value after the read.</span></div><div class="line" id="044508"><span class="nick" style="color:#8dd3c7"><a href="#044508" label="[04:45:08]">&lt;oriansj&gt;</a></span><span class="message">So either the architecture had an implicit write or an explicit one or the value went to default after read</span></div><div class="line" id="044832"><span class="nick" style="color:#8dd3c7"><a href="#044832" label="[04:48:32]">&lt;oriansj&gt;</a></span><span class="message">micorcode ensuring that the write is done, I also wouldn't consider hardware but rather software.</span></div><div class="line" id="045254"><span class="nick" style="color:#8dd3c7"><a href="#045254" label="[04:52:54]">&lt;oriansj&gt;</a></span><span class="message">and knight just skipped doing the write back in their microcode to save some space and it resulted in a clean stack with no previous values after they are popped as a nice side effect.</span></div><div class="line" id="045604"><span class="nick" style="color:#80b1d3"><a href="#045604" label="[04:56:04]">&lt;xentrac&gt;</a></span><span class="message">oh, really?  I thought it was the memory controller that did it</span></div><div class="line" id="045736"><span class="nick" style="color:#8dd3c7"><a href="#045736" label="[04:57:36]">&lt;oriansj&gt;</a></span><span class="message">knight didn't have a separate memory controller</span></div><div class="line" id="050154"><span class="nick" style="color:#80b1d3"><a href="#050154" label="[05:01:54]">&lt;xentrac&gt;</a></span><span class="message">surely it had the sense amplifiers as close as possible to the core planes, not socked away within the CPU</span></div><div class="line" id="050933"><span class="nick" style="color:#8dd3c7"><a href="#050933" label="[05:09:33]">&lt;oriansj&gt;</a></span><span class="message">for example by the AOS instruction on the PDP-6 the hardware simply incremented the value between the read phase and the write phase of a single memory cycle</span></div><div class="line" id="050949"><span class="nick" style="color:#80b1d3"><a href="#050949" label="[05:09:49]">&lt;xentrac&gt;</a></span><span class="message">oh wow, I had no idea</span></div><div class="line" id="051341"><span class="nick" style="color:#80b1d3"><a href="#051341" label="[05:13:41]">&lt;xentrac&gt;</a></span><span class="message">I just realized today that in general you can inline longjmp() as mov (%eax), %esp; ret</span></div><div class="line" id="051424"><span class="nick" style="color:#80b1d3"><a href="#051424" label="[05:14:24]">&lt;xentrac&gt;</a></span><span class="message">on i386</span></div><div class="line" id="051434"><span class="nick" style="color:#80b1d3"><a href="#051434" label="[05:14:34]">&lt;xentrac&gt;</a></span><span class="message">though setjmp() may or may not be a little hairier depending on your calling convention</span></div><div class="line" id="052652"><span class="nick" style="color:#8dd3c7"><a href="#052652" label="[05:26:52]">&lt;oriansj&gt;</a></span><span class="message">certainly simple to implement but honestly something one should avoid for ease of understanding of the code.</span></div><div class="line" id="052904"><span class="nick" style="color:#80b1d3"><a href="#052904" label="[05:29:04]">&lt;xentrac&gt;</a></span><span class="message">well, it definitely has its downsides, but sometimes people like exception handling :)</span></div><div class="line" id="053032"><span class="nick" style="color:#8dd3c7"><a href="#053032" label="[05:30:32]">&lt;oriansj&gt;</a></span><span class="message">I haven't seen a case yet in bootstrapping where it had to be used for exception handling. And M2-Planet + mescc-tools certainly handle a great many possible exceptions.</span></div><div class="line" id="053317"><span class="nick" style="color:#80b1d3"><a href="#053317" label="[05:33:17]">&lt;xentrac&gt;</a></span><span class="message">you never *have* to use setjmp/longjmp</span></div><div class="line" id="053333"><span class="nick" style="color:#80b1d3"><a href="#053333" label="[05:33:33]">&lt;xentrac&gt;</a></span><span class="message">at least if you can change all the code</span></div><div class="line" id="053401"><span class="nick" style="color:#8dd3c7"><a href="#053401" label="[05:34:01]">&lt;oriansj&gt;</a></span><span class="message">or are willing to abort fast and early</span></div><div class="line" id="053422"><span class="nick" style="color:#80b1d3"><a href="#053422" label="[05:34:22]">&lt;xentrac&gt;</a></span><span class="message">you can just set a flag in memory or in a register that everything checks</span></div><div class="line" id="053443"><span class="nick" style="color:#80b1d3"><a href="#053443" label="[05:34:43]">&lt;xentrac&gt;</a></span><span class="message">or do you mean that sometimes that's too slow?  slowness is not the complaint I have with it myself</span></div><div class="line" id="053714"><span class="nick" style="color:#8dd3c7"><a href="#053714" label="[05:37:14]">&lt;oriansj&gt;</a></span><span class="message">my only issue with it is that people tend to abuse it in ways that make code harder to reason about.</span></div><div class="line" id="053923"><span class="nick" style="color:#80b1d3"><a href="#053923" label="[05:39:23]">&lt;xentrac&gt;</a></span><span class="message">longjmp, or setting flags?</span></div><div class="line" id="053956"><span class="nick" style="color:#80b1d3"><a href="#053956" label="[05:39:56]">&lt;xentrac&gt;</a></span><span class="message">I think longjmp pretty much invariably makes code harder to reason about</span></div><div class="line" id="054031"><span class="nick" style="color:#8dd3c7"><a href="#054031" label="[05:40:31]">&lt;oriansj&gt;</a></span><span class="message">longjmp/setjmp</span></div><div class="line" id="054424"><span class="nick" style="color:#8dd3c7"><a href="#054424" label="[05:44:24]">&lt;oriansj&gt;</a></span><span class="message">hence why M2-Planet doesn't support it; despite how easy it would to do so. While goto does exist</span></div><div class="line" id="055142"><span class="nick" style="color:#80b1d3"><a href="#055142" label="[05:51:42]">&lt;xentrac&gt;</a></span><span class="message">it's a bit arcane and usually a big headache to implement</span></div><div class="line" id="065140"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="173114"><span class="nick" style="color:#234e69"><a href="#173114" label="[17:31:14]">&lt;theruran&gt;</a></span><span class="message">so is Chicken Scheme closer to being bootstrapped from stage0 since it can be built with tcc? trying to decide between Chicken and Guile to write that Ada compiler</span></div><div class="line" id="181507"><span class="nick" style="color:#2e2a4a"><a href="#181507" label="[18:15:07]">&lt;stikonas&gt;</a></span><span class="message">theruran: guile can also be bootstrapped from stage0</span></div><div class="line" id="181528"><span class="nick" style="color:#2e2a4a"><a href="#181528" label="[18:15:28]">&lt;stikonas&gt;</a></span><span class="message">at least Guile 3.0.7</span></div><div class="line" id="184719"><span class="nick" style="color:#234e69"><a href="#184719" label="[18:47:19]">&lt;theruran&gt;</a></span><span class="message">so no big binary blob needed? syntax-case is the last hold-out?</span></div><div class="line" id="185734"><span class="nick" style="color:#6b8072"><a href="#185734" label="[18:57:34]">&lt;stikonas[m]&gt;</a></span><span class="message">You mean psyntax-bootstrap?</span></div><div class="line" id="185802"><span class="nick" style="color:#6b8072"><a href="#185802" label="[18:58:02]">&lt;stikonas[m]&gt;</a></span><span class="message">That is done although not upstream</span></div><div class="line" id="185837"><span class="nick" style="color:#234e69"><a href="#185837" label="[18:58:37]">&lt;theruran&gt;</a></span><span class="message">wow done already?! how?</span></div><div class="line" id="190917"><span class="nick" style="color:#6b8072"><a href="#190917" label="[19:09:17]">&lt;stikonas[m]&gt;</a></span><span class="message">It's even integrated into live bootstrap</span></div><div class="line" id="191026"><span class="nick" style="color:#6b8072"><a href="#191026" label="[19:10:26]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/schierlm/guile-psyntax-bootstrapping">https://github.com/schierlm/guile-psyntax-bootstrapping</a> </span></div><div class="line" id="191117"><span class="nick" style="color:#6b8072"><a href="#191117" label="[19:11:17]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh</a> </span></div><div class="line" id="194630"><span class="nick" style="color:#234e69"><a href="#194630" label="[19:46:30]">&lt;theruran&gt;</a></span><span class="message">ok thank you. that is great! is it being reviewed or scheduled for upstream?</span></div><div class="line" id="195005"><span class="nick" style="color:#234e69"><a href="#195005" label="[19:50:05]">&lt;theruran&gt;</a></span><span class="message">o/ Irvise</span></div><div class="line" id="195047"><span class="nick" style="color:#6c3d55"><a href="#195047" label="[19:50:47]">&lt;Irvise&gt;</a></span><span class="message">o?</span></div><div class="line" id="195054"><span class="nick" style="color:#6c3d55"><a href="#195054" label="[19:50:54]">&lt;Irvise&gt;</a></span><span class="message">o/</span></div><div class="line" id="195111"><span class="nick" style="color:#234e69"><a href="#195111" label="[19:51:11]">&lt;theruran&gt;</a></span><span class="message">check out <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a>  that may answer your question</span></div><div class="line" id="195117"><span class="nick" style="color:#234e69"><a href="#195117" label="[19:51:17]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh</a> </span></div><div class="line" id="195215"><span class="nick" style="color:#6c3d55"><a href="#195215" label="[19:52:15]">&lt;Irvise&gt;</a></span><span class="message">Thank you :)</span></div><div class="line" id="200603"><span class="nick" style="color:#2e2a4a"><a href="#200603" label="[20:06:03]">&lt;stikonas&gt;</a></span><span class="message">theruran: no, I don't think so</span></div><div class="line" id="235927"><span class="nick" style="color:#2e2a4a"><a href="#235927" label="[23:59:27]">&lt;stikonas&gt;</a></span><span class="message">hmm, blood-elf might also need some changes for risc-v...</span></div><br /></div></body></html>