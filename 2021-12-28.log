<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="014912"><span class="nick" style="color:#8dd3c7"><a href="#014912" label="[01:49:12]">&lt;stikonas&gt;</a></span><span class="message">fossy, oriansj: so I'm proposing the following change to stage0-posix kaem scripts: <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/commit/7b2065326b1c8aba9cbfd954d02311132eb87fdd">https://github.com/stikonas/stage0-posix/commit/7b2065326b1c8aba9cbfd954d02311132eb87fdd</a> </span></div><div class="line" id="014923"><span class="nick" style="color:#8dd3c7"><a href="#014923" label="[01:49:23]">&lt;stikonas&gt;</a></span><span class="message">I need to do the other ARCHes too before I can push</span></div><div class="line" id="014951"><span class="nick" style="color:#8dd3c7"><a href="#014951" label="[01:49:51]">&lt;stikonas&gt;</a></span><span class="message">but this will allow environmental variables to propagate from stage0-posix into live-bootstrap (e.g. ARCH will be defined)</span></div><div class="line" id="015249"><span class="nick" style="color:#8dd3c7"><a href="#015249" label="[01:52:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've now added M2-Mesoplanet into stage0-posix but it's not used there yet (I got segfault when I tried to build blood-elf)</span></div><div class="line" id="021518"><span class="nick" style="color:#8dd3c7"><a href="#021518" label="[02:15:18]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed upstream <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/commit/649b6a555822d83a4cdc8a6d41dc8d9f34a0dec1">https://github.com/oriansj/stage0-posix/commit/649b6a555822d83a4cdc8a6d41dc8d9f34a0dec1</a> </span></div><div class="line" id="021523"><span class="nick" style="color:#8dd3c7"><a href="#021523" label="[02:15:23]">&lt;stikonas&gt;</a></span><span class="message">will do live-bootstrap tomorrow</span></div><div class="line" id="034306"><span class="nick" style="color:#2e2a4a"><a href="#034306" label="[03:43:06]">&lt;fossy&gt;</a></span><span class="message">looks reasonable</span></div><div class="line" id="034716"><span class="nick" style="color:#2e2a4a"><a href="#034716" label="[03:47:16]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: when updating stage0-posix, often find mes breaks, so just be careful w that</span></div><div class="line" id="040349"><span class="nick" style="color:#6b8072"><a href="#040349" label="[04:03:49]">&lt;oriansj&gt;</a></span><span class="message">stikonas: mescc-tools pull merged</span></div><div class="line" id="120533"><span class="nick" style="color:#80b1d3"><a href="#120533" label="[12:05:33]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas[m]: $TOOLS and $BINDIR are identical -- as intended?</span></div><div class="line" id="120544"><span class="nick" style="color:#80b1d3"><a href="#120544" label="[12:05:44]">&lt;gbrlwck&gt;</a></span><span class="message">(in AMD64/kaem.run)</span></div><div class="line" id="121728"><span class="nick" style="color:#6d2462"><a href="#121728" label="[12:17:28]">&lt;stikonas[m]&gt;</a></span><span class="message">gbrlwck: I'll check, it was just copied from other file</span></div><div class="line" id="123510"><span class="nick" style="color:#8dd3c7"><a href="#123510" label="[12:35:10]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: well, mescc-tools-extra kaem file makes distinction between TOOLS and BINDIR</span></div><div class="line" id="123538"><span class="nick" style="color:#8dd3c7"><a href="#123538" label="[12:35:38]">&lt;stikonas&gt;</a></span><span class="message">so I think yes, they are intentionally the same in AMD64/kaem.run</span></div><div class="line" id="124253"><span class="nick" style="color:#8dd3c7"><a href="#124253" label="[12:42:53]">&lt;stikonas&gt;</a></span><span class="message">fossy: after stage0-posix was refactored not to require that much tweaking on live-bootstrap side, I find that updating stage0-posix in live-bootstrap if fairly trivial</span></div><div class="line" id="124258"><span class="nick" style="color:#8dd3c7"><a href="#124258" label="[12:42:58]">&lt;stikonas&gt;</a></span><span class="message">before that yes, we often had issues</span></div><div class="line" id="125208"><span class="nick" style="color:#8dd3c7"><a href="#125208" label="[12:52:08]">&lt;stikonas&gt;</a></span><span class="message">doras: I've pushed an update to live-bootstrap now <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/620e10d4be33d7c7cde5bdbb4680885333da70e5">https://github.com/fosslinux/live-bootstrap/commit/620e10d4be33d7c7cde5bdbb4680885333da70e5</a> </span></div><div class="line" id="125253"><span class="nick" style="color:#8dd3c7"><a href="#125253" label="[12:52:53]">&lt;stikonas&gt;</a></span><span class="message">it gets rid of arch.kaem.x86 file and renames kaem.run into after.kaem (this is the script that replaces stage0-posix after.kaem hook)</span></div><div class="line" id="161549"><span class="nick" style="color:#8dd3c7"><a href="#161549" label="[16:15:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: btw, you mentioned that we need to build some older python first before we can get newer one</span></div><div class="line" id="161607"><span class="nick" style="color:#8dd3c7"><a href="#161607" label="[16:16:07]">&lt;stikonas&gt;</a></span><span class="message">have you looked at micropython instead?</span></div><div class="line" id="161651"><span class="nick" style="color:#8dd3c7"><a href="#161651" label="[16:16:51]">&lt;stikonas&gt;</a></span><span class="message">or is it not sufficient to bootstrap proper python3</span></div><div class="line" id="161834"><span class="nick" style="color:#8dd3c7"><a href="#161834" label="[16:18:34]">&lt;stikonas&gt;</a></span><span class="message">at least it seems to have a simple build system (just make) which generated headers on the fly</span></div><div class="line" id="173853"><span class="nick" style="color:#234e69"><a href="#173853" label="[17:38:53]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: nice!</span></div><div class="line" id="184308"><span class="nick" style="color:#6b8072"><a href="#184308" label="[18:43:08]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: they are identical simply because the TOOLS path (Where the tools we used to build are located) is the same as the BINDIR path (where we want the resulting binaries to be put). They are different variables to enable easier relocation.</span></div><div class="line" id="191704"><span class="nick" style="color:#234e69"><a href="#191704" label="[19:17:04]">&lt;doras&gt;</a></span><span class="message">stikonas: I'm getting the following error:</span></div><div class="line" id="191704"><span class="nick" style="color:#234e69"><a href="#191704" label="[19:17:04]">&lt;doras&gt;</a></span><span class="message">Unable to open for reading file: ../M2-Mesoplanet/cc.h</span></div><div class="line" id="191704"><span class="nick" style="color:#234e69"><a href="#191704" label="[19:17:04]">&lt;doras&gt;</a></span><span class="message"> Aborting to avoid problems</span></div><div class="line" id="191726"><span class="nick" style="color:#234e69"><a href="#191726" label="[19:17:26]">&lt;doras&gt;</a></span><span class="message">Perhaps I need to somehow trigger the download process again?</span></div><div class="line" id="191920"><span class="nick" style="color:#234e69"><a href="#191920" label="[19:19:20]">&lt;doras&gt;</a></span><span class="message">No, it comes from the submodule...</span></div><div class="line" id="191935"><span class="nick" style="color:#234e69"><a href="#191935" label="[19:19:35]">&lt;doras&gt;</a></span><span class="message">I did run &quot;git submodule update --recursive&quot; though. Is it not enough?</span></div><div class="line" id="192147"><span class="nick" style="color:#6d2462"><a href="#192147" label="[19:21:47]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: I ran got submodule init</span></div><div class="line" id="192153"><span class="nick" style="color:#234e69"><a href="#192153" label="[19:21:53]">&lt;doras&gt;</a></span><span class="message">Wait, I was missing &quot;--init&quot;</span></div><div class="line" id="192210"><span class="nick" style="color:#234e69"><a href="#192210" label="[19:22:10]">&lt;doras&gt;</a></span><span class="message">Yeah, it  works now. &quot;Hello,M2-mes!&quot;</span></div><div class="line" id="192221"><span class="nick" style="color:#234e69"><a href="#192221" label="[19:22:21]">&lt;doras&gt;</a></span><span class="message">Thanks :)</span></div><div class="line" id="192300"><span class="nick" style="color:#6d2462"><a href="#192300" label="[19:23:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Mesoplanet itself is probably not ready yet</span></div><div class="line" id="192315"><span class="nick" style="color:#6d2462"><a href="#192315" label="[19:23:15]">&lt;stikonas[m]&gt;</a></span><span class="message">I wasn't able to use it to build blood-elf</span></div><div class="line" id="200812"><span class="nick" style="color:#6c3d55"><a href="#200812" label="[20:08:12]">&lt;bauen1&gt;</a></span><span class="message">it sure took me a while to join here ...</span></div><div class="line" id="202044"><span class="nick" style="color:#8dd3c7"><a href="#202044" label="[20:20:44]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh you were on old freenode network?</span></div><div class="line" id="202128"><span class="nick" style="color:#6c3d55"><a href="#202128" label="[20:21:28]">&lt;bauen1&gt;</a></span><span class="message">stikonas: not in a long time</span></div><div class="line" id="202156"><span class="nick" style="color:#6c3d55"><a href="#202156" label="[20:21:56]">&lt;bauen1&gt;</a></span><span class="message">i just switched laptops, barely configured my irc client, and just never had too much free time (because studying, building a satellite and live does that to you)</span></div><div class="line" id="202607"><span class="nick" style="color:#6c3d55"><a href="#202607" label="[20:26:07]">&lt;bauen1&gt;</a></span><span class="message">anyway, i've had the following idea: i have a pine a64 lts lying around doing absolutely nothing, so i bought an external tpm module to have some fun with it, but then i also have a pine h64 that is also doing nothing, so i'm back to having a free pine a64 lts ; and i know it can boot from spi flash, and i have some laying around, and i want to program these by hand using dip-switches and get the</span></div><div class="line" id="202613"><span class="nick" style="color:#6c3d55"><a href="#202613" label="[20:26:13]">&lt;bauen1&gt;</a></span><span class="message">a64 to boot from this flash chip</span></div><div class="line" id="202623"><span class="nick" style="color:#d9d9d9"><a href="#202623" label="[20:26:23]">&lt;nanonyme&gt;</a></span><span class="message">stikonas, interesting. I wonder if that micropython is actually one of the missing pieces bootstrapping to modern glibc (which requires Python to build)</span></div><div class="line" id="202727"><span class="nick" style="color:#6c3d55"><a href="#202727" label="[20:27:27]">&lt;bauen1&gt;</a></span><span class="message">nanonyme: how does glibc depend on python ?</span></div><div class="line" id="202730"><span class="nick" style="color:#8dd3c7"><a href="#202730" label="[20:27:30]">&lt;stikonas&gt;</a></span><span class="message">nanonyme: normal python is also buildable, I was thinking of reducing number of steps</span></div><div class="line" id="202741"><span class="nick" style="color:#8dd3c7"><a href="#202741" label="[20:27:41]">&lt;stikonas&gt;</a></span><span class="message">bauen1: modern glibc indeed depedns on python</span></div><div class="line" id="202747"><span class="nick" style="color:#8dd3c7"><a href="#202747" label="[20:27:47]">&lt;stikonas&gt;</a></span><span class="message">probably some header generation</span></div><div class="line" id="202821"><span class="nick" style="color:#d9d9d9"><a href="#202821" label="[20:28:21]">&lt;nanonyme&gt;</a></span><span class="message">stikonas, when I built normal Python with live-bootstrap, math module failed to build and it was critical or being useful in glibc build process</span></div><div class="line" id="202837"><span class="nick" style="color:#d9d9d9"><a href="#202837" label="[20:28:37]">&lt;nanonyme&gt;</a></span><span class="message">Critical for being useful even</span></div><div class="line" id="202848"><span class="nick" style="color:#8dd3c7"><a href="#202848" label="[20:28:48]">&lt;stikonas&gt;</a></span><span class="message">nanonyme: well, possibly need to update something first before building python</span></div><div class="line" id="202852"><span class="nick" style="color:#8dd3c7"><a href="#202852" label="[20:28:52]">&lt;stikonas&gt;</a></span><span class="message">maybe binutils or gcc</span></div><div class="line" id="202912"><span class="nick" style="color:#8dd3c7"><a href="#202912" label="[20:29:12]">&lt;stikonas&gt;</a></span><span class="message">or maybe need some musl patch to python</span></div><div class="line" id="202922"><span class="nick" style="color:#8dd3c7"><a href="#202922" label="[20:29:22]">&lt;stikonas&gt;</a></span><span class="message">but it shouldn't be something too cyclic</span></div><div class="line" id="203008"><span class="nick" style="color:#d9d9d9"><a href="#203008" label="[20:30:08]">&lt;nanonyme&gt;</a></span><span class="message">Yeah. Maybe not. I was mostly trying to glue our current bootstrap into what live-bootstrap outputs directly and noticed there were these subtle things that didn't work as expected :)</span></div><div class="line" id="203011"><span class="nick" style="color:#8dd3c7"><a href="#203011" label="[20:30:11]">&lt;stikonas&gt;</a></span><span class="message">the problem with python3 was this file: <a rel="nofollow" href="https://github.com/python/cpython/blob/main/Parser/asdl.py">https://github.com/python/cpython/blob/main/Parser/asdl.py</a> </span></div><div class="line" id="203031"><span class="nick" style="color:#8dd3c7"><a href="#203031" label="[20:30:31]">&lt;stikonas&gt;</a></span><span class="message">but fossy said it's not there in python2, so one can build python2 and then run asdl.py with it</span></div><div class="line" id="203108"><span class="nick" style="color:#8dd3c7"><a href="#203108" label="[20:31:08]">&lt;stikonas&gt;</a></span><span class="message">nanonyme:  some thing not working as expected I guess are still expected</span></div><div class="line" id="203127"><span class="nick" style="color:#8dd3c7"><a href="#203127" label="[20:31:27]">&lt;stikonas&gt;</a></span><span class="message">in particular because toolchain in live-bootstrap is still quite old</span></div><div class="line" id="203134"><span class="nick" style="color:#d9d9d9"><a href="#203134" label="[20:31:34]">&lt;nanonyme&gt;</a></span><span class="message">Yeah. We weren't really prepared to bootstrap from so old seed image</span></div><div class="line" id="203155"><span class="nick" style="color:#8dd3c7"><a href="#203155" label="[20:31:55]">&lt;stikonas&gt;</a></span><span class="message">but i think it's only a few steps to build newer binutils and gcc</span></div><div class="line" id="203156"><span class="nick" style="color:#d9d9d9"><a href="#203156" label="[20:31:56]">&lt;nanonyme&gt;</a></span><span class="message">It's probably doable, just requires a bit more glue</span></div><div class="line" id="203201"><span class="nick" style="color:#8dd3c7"><a href="#203201" label="[20:32:01]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="203238"><span class="nick" style="color:#8dd3c7"><a href="#203238" label="[20:32:38]">&lt;stikonas&gt;</a></span><span class="message">but with binutils and gcc you either rely on pregenerated Makefile.in or use somewhat ugly hack where you don't use top-level configure file</span></div><div class="line" id="203255"><span class="nick" style="color:#8dd3c7"><a href="#203255" label="[20:32:55]">&lt;stikonas&gt;</a></span><span class="message">Makefile.in is generated with autogen and autogen is just hopeless</span></div><div class="line" id="203336"><span class="nick" style="color:#d9d9d9"><a href="#203336" label="[20:33:36]">&lt;nanonyme&gt;</a></span><span class="message">Ouch</span></div><div class="line" id="203429"><span class="nick" style="color:#8dd3c7"><a href="#203429" label="[20:34:29]">&lt;stikonas&gt;</a></span><span class="message">well, most distros are of course happy with pre-generated non-source files  (like configure script)</span></div><div class="line" id="203444"><span class="nick" style="color:#8dd3c7"><a href="#203444" label="[20:34:44]">&lt;stikonas&gt;</a></span><span class="message">but in live-bootstrap we tried to be more rigorous</span></div><div class="line" id="203540"><span class="nick" style="color:#8dd3c7"><a href="#203540" label="[20:35:40]">&lt;stikonas&gt;</a></span><span class="message">so build scripts for binutils look like <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/binutils-2.14/binutils-2.14.sh#L34">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/binutils-2.14/binutils-2.14.sh#L34</a>  and even worse for gcc</span></div><div class="line" id="203709"><span class="nick" style="color:#8dd3c7"><a href="#203709" label="[20:37:09]">&lt;stikonas&gt;</a></span><span class="message">bauen1: hmm, but what thing are you going to run from spi flash? stage0?</span></div><div class="line" id="203805"><span class="nick" style="color:#d9d9d9"><a href="#203805" label="[20:38:05]">&lt;nanonyme&gt;</a></span><span class="message">I see. I also got some comments about lack of __thread when building initial elfutils. Is that also because of the old GCC?</span></div><div class="line" id="203810"><span class="nick" style="color:#6c3d55"><a href="#203810" label="[20:38:10]">&lt;bauen1&gt;</a></span><span class="message">stikonas: seeing as i'll have to toggle it in by hand, probably a hex0 (iirc that what reads in hex from stdin, compiles it to binary and runs it) equivialent with a small driver for the UART</span></div><div class="line" id="203841"><span class="nick" style="color:#6c3d55"><a href="#203841" label="[20:38:41]">&lt;bauen1&gt;</a></span><span class="message">stikonas: after that, i'm not sure, i'll probably start writing some drivers / library for SPI so I can read/write the flash from the A64 itself</span></div><div class="line" id="203842"><span class="nick" style="color:#8dd3c7"><a href="#203842" label="[20:38:42]">&lt;stikonas&gt;</a></span><span class="message">nanonyme: I don't know but it could be</span></div><div class="line" id="203906"><span class="nick" style="color:#6c3d55"><a href="#203906" label="[20:39:06]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i'm probably not going to get very far but then you'd need some more compilers a small unix kernel to start the bootstrap</span></div><div class="line" id="204026"><span class="nick" style="color:#8dd3c7"><a href="#204026" label="[20:40:26]">&lt;stikonas&gt;</a></span><span class="message">well, it's a nice project. Although I guess it will take a long time</span></div><div class="line" id="204116"><span class="nick" style="color:#8dd3c7"><a href="#204116" label="[20:41:16]">&lt;stikonas&gt;</a></span><span class="message">inputing code using dip-switches will be even worse than writing .hex0 code (so hex0, kaem-minimal and hex1)</span></div><div class="line" id="204124"><span class="nick" style="color:#6c3d55"><a href="#204124" label="[20:41:24]">&lt;bauen1&gt;</a></span><span class="message">stikonas: yeah, i'll probably not get very far, but UART and then SPI driver is the goal</span></div><div class="line" id="204223"><span class="nick" style="color:#8dd3c7"><a href="#204223" label="[20:42:23]">&lt;stikonas&gt;</a></span><span class="message">well, input/output is the biggest problem on baremetal bootstrap</span></div><div class="line" id="204232"><span class="nick" style="color:#6c3d55"><a href="#204232" label="[20:42:32]">&lt;bauen1&gt;</a></span><span class="message">true, and using UART is kind of cheating</span></div><div class="line" id="204307"><span class="nick" style="color:#8dd3c7"><a href="#204307" label="[20:43:07]">&lt;stikonas&gt;</a></span><span class="message">yes, but still lower level than POSIX bootstrap</span></div><div class="line" id="204311"><span class="nick" style="color:#6c3d55"><a href="#204311" label="[20:43:11]">&lt;bauen1&gt;</a></span><span class="message">i suppose you could build a simple gpu (<a rel="nofollow" href="https://eater.net/vga">https://eater.net/vga</a>)  and a keyboard in a similiar way</span></div><div class="line" id="204315"><span class="nick" style="color:#8dd3c7"><a href="#204315" label="[20:43:15]">&lt;stikonas&gt;</a></span><span class="message">and that takes maybe 3 months of work</span></div><div class="line" id="204330"><span class="nick" style="color:#8dd3c7"><a href="#204330" label="[20:43:30]">&lt;stikonas&gt;</a></span><span class="message">yaeh, I saw eater's vga card video</span></div><div class="line" id="204406"><span class="nick" style="color:#8dd3c7"><a href="#204406" label="[20:44:06]">&lt;stikonas&gt;</a></span><span class="message">still, driving those using machine code or assembly is not easy</span></div><div class="line" id="204941"><span class="nick" style="color:#6c3d55"><a href="#204941" label="[20:49:41]">&lt;bauen1&gt;</a></span><span class="message">if i even get to the point where i need to worry about initialising the DRAM i'd be very surprised</span></div><div class="line" id="210655"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="210837"><span class="nick" style="color:#8dd3c7"><a href="#210837" label="[21:08:37]">&lt;stikonas&gt;</a></span><span class="message">how much of RAM do you have access to before initialising DRAM?</span></div><div class="line" id="210908"><span class="nick" style="color:#8dd3c7"><a href="#210908" label="[21:09:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, rk3399 has 200 KB</span></div><div class="line" id="210920"><span class="nick" style="color:#6c3d55"><a href="#210920" label="[21:09:20]">&lt;bauen1&gt;</a></span><span class="message">stikonas: with the a64 roughly in that ball park</span></div><div class="line" id="211015"><span class="nick" style="color:#8dd3c7"><a href="#211015" label="[21:10:15]">&lt;stikonas&gt;</a></span><span class="message">that might be enough to run cc_*</span></div><div class="line" id="211021"><span class="nick" style="color:#8dd3c7"><a href="#211021" label="[21:10:21]">&lt;stikonas&gt;</a></span><span class="message">but not M2-Planet</span></div><div class="line" id="211054"><span class="nick" style="color:#8dd3c7"><a href="#211054" label="[21:10:54]">&lt;stikonas&gt;</a></span><span class="message">although source of cc_* is bigger</span></div><div class="line" id="211113"><span class="nick" style="color:#6c3d55"><a href="#211113" label="[21:11:13]">&lt;bauen1&gt;</a></span><span class="message">i have at least 32kb, and that is afaik as big as i can go before the boot rom will break when trying to load my &quot;bootloader&quot; from flash</span></div><div class="line" id="211113"><span class="nick" style="color:#8dd3c7"><a href="#211113" label="[21:11:13]">&lt;stikonas&gt;</a></span><span class="message">so maybe you are limited to M0, so assembly</span></div><div class="line" id="211130"><span class="nick" style="color:#8dd3c7"><a href="#211130" label="[21:11:30]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, there is that limitation too</span></div><div class="line" id="211157"><span class="nick" style="color:#6c3d55"><a href="#211157" label="[21:11:57]">&lt;bauen1&gt;</a></span><span class="message">but i'm pretty sure i have at least another 108kb, and then there is supposedly another 64kb but iirc that memory area is quite special</span></div><div class="line" id="211223"><span class="nick" style="color:#6c3d55"><a href="#211223" label="[21:12:23]">&lt;bauen1&gt;</a></span><span class="message">the a64 (<a rel="nofollow" href="https://linux-sunxi.org/A64">https://linux-sunxi.org/A64</a>)  also has another OpenRISC core, so I could also play around with that if i get powerd with ARM</span></div><div class="line" id="211300"><span class="nick" style="color:#6c3d55"><a href="#211300" label="[21:13:00]">&lt;bauen1&gt;</a></span><span class="message">*bored</span></div><div class="line" id="235220"><span class="nick" style="color:#8dd3c7"><a href="#235220" label="[23:52:20]">&lt;stikonas&gt;</a></span><span class="message">nanonyme: oh, actually micropython is no go...</span></div><div class="line" id="235230"><span class="nick" style="color:#8dd3c7"><a href="#235230" label="[23:52:30]">&lt;stikonas&gt;</a></span><span class="message">just tried to test it and it actually needs python3</span></div><div class="line" id="235257"><span class="nick" style="color:#8dd3c7"><a href="#235257" label="[23:52:57]">&lt;stikonas&gt;</a></span><span class="message">so I think the way to go is to build old python2 first as fossy suggested</span></div><br /></div></body></html>