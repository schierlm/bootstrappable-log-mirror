<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-08-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="051455"><span class="nick" style="color:#8dd3c7"><a href="#051455" label="[05:14:55]">&lt;akkartik&gt;</a></span><span class="message">OriansJ: I see you brought up <a rel="nofollow" href="http://blog.cmpxchg8b.com/2020/07/you-dont-need-reproducible-builds.html">http://blog.cmpxchg8b.com/2020/07/you-dont-need-reproducible-builds.html</a>  but didn't get any bites. The author is missing the scenario where anybody in the world can validate a buikd at any point in the future. That possibility will force vendors to act more responsibly.</span></div><div class="line" id="051630"><span class="nick" style="color:#8dd3c7"><a href="#051630" label="[05:16:30]">&lt;akkartik&gt;</a></span><span class="message">Of course, the author also claims plausibly deniable 'bugdoors' are easier to write than binary edits. If you believe that I guess evrything else is moot.</span></div><div class="line" id="051703"><span class="nick" style="color:#8dd3c7"><a href="#051703" label="[05:17:03]">&lt;akkartik&gt;</a></span><span class="message">Anyways, I'm curious to hear your thoughts.</span></div><div class="line" id="063038"><span class="nick" style="color:#2e2a4a"><a href="#063038" label="[06:30:38]">&lt;markjenkinsznc&gt;</a></span><span class="message">akkartik, I weighed in with a bootstrapping angle on reddit, <a rel="nofollow" href="https://www.reddit.com/r/linux/comments/hzwdci/you_dont_need_reproducible_builds/g06e9wb/">https://www.reddit.com/r/linux/comments/hzwdci/you_dont_need_reproducible_builds/g06e9wb/</a> </span></div><div class="line" id="141027"><span class="nick" style="color:#6b8072"><a href="#141027" label="[14:10:27]">&lt;Profpatsch&gt;</a></span><span class="message">akkartik: Just tell them that they can’t use good build caching without reproducibilty</span></div><div class="line" id="141035"><span class="nick" style="color:#6b8072"><a href="#141035" label="[14:10:35]">&lt;Profpatsch&gt;</a></span><span class="message">If they don’t understand the trust angle</span></div><div class="line" id="141050"><span class="nick" style="color:#6b8072"><a href="#141050" label="[14:10:50]">&lt;Profpatsch&gt;</a></span><span class="message">Because that’s the part that capitalistic companies actually care about</span></div><div class="line" id="141206"><span class="nick" style="color:#6b8072"><a href="#141206" label="[14:12:06]">&lt;Profpatsch&gt;</a></span><span class="message">wow, I just realized we haven’t mentioned early cutoff once in our blog</span></div><div class="line" id="143129"><span class="nick" style="color:#80b1d3"><a href="#143129" label="[14:31:29]">&lt;rain1&gt;</a></span><span class="message">hey akkartik</span></div><div class="line" id="151637"><span class="nick" style="color:#6d2462"><a href="#151637" label="[15:16:37]">&lt;janneke&gt;</a></span><span class="message">markjenkinsznc: great comment</span></div><div class="line" id="191919"><span class="nick" style="color:#234e69"><a href="#191919" label="[19:19:19]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="http://blog.cmpxchg8b.com/2020/07/you-dont-need-reproducible-builds.html">http://blog.cmpxchg8b.com/2020/07/you-dont-need-reproducible-builds.html</a> </span></div><div class="line" id="191932"><span class="nick" style="color:#234e69"><a href="#191932" label="[19:19:32]">&lt;Hagfish&gt;</a></span><span class="message">ugh, Tavis, i expected more from you</span></div><div class="line" id="192155"><span class="nick" style="color:#234e69"><a href="#192155" label="[19:21:55]">&lt;Hagfish&gt;</a></span><span class="message">&quot;They can still provide malicious source code to the builders for them to build and sign.&quot;</span></div><div class="line" id="192228"><span class="nick" style="color:#234e69"><a href="#192228" label="[19:22:28]">&lt;Hagfish&gt;</a></span><span class="message">use, and reproducible builds doesn't stop the source code from having bugs either</span></div><div class="line" id="192233"><span class="nick" style="color:#234e69"><a href="#192233" label="[19:22:33]">&lt;Hagfish&gt;</a></span><span class="message">talk about out of scope</span></div><div class="line" id="235555"><span class="nick" style="color:#6c3d55"><a href="#235555" label="[23:55:55]">&lt;OriansJ`&gt;</a></span><span class="message">akkartik: well it is true. It is easier to write malicious code in high level languages than it is in binary (atleast manually) but it is also much harder to hide malicious code in the long term. Sure things like the International Obfuscated C Code Contest and Underhanded C Contest show the sort of ways of hiding malicious behavior. But complexity is key for hiding bad behavior; all long term code cleanups will inevitably eliminate any</span></div><div class="line" id="235555"><span class="nick" style="color:#6c3d55"><a href="#235555" label="[23:55:55]">&lt;OriansJ`&gt;</a></span><span class="message">underhanded code</span></div><div class="line" id="235926"><span class="nick" style="color:#6c3d55"><a href="#235926" label="[23:59:26]">&lt;OriansJ`&gt;</a></span><span class="message">personally I think the writer is thinking too much in the perspective of proprietary software distribution; where access to source code doesn't happen and blind trust is the default.</span></div><br /></div></body></html>