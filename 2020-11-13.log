<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004917"><span class="nick" style="color:#8dd3c7"><a href="#004917" label="[00:49:17]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: the email address bit doesn't work as one can buy a domain for $5/year and one can setup an infinite number of email addresses on a single domain that they own.</span></div><div class="line" id="005104"><span class="nick" style="color:#8dd3c7"><a href="#005104" label="[00:51:04]">&lt;OriansJ&gt;</a></span><span class="message">now adding a financial cost can reduce the number of people with x+ number of files but it doesn't stop people having more than one file.</span></div><div class="line" id="005218"><span class="nick" style="color:#2e2a4a"><a href="#005218" label="[00:52:18]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: very true</span></div><div class="line" id="005303"><span class="nick" style="color:#2e2a4a"><a href="#005303" label="[00:53:03]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure how websites deal with that issue, to stop someone registering millions of fake accounts</span></div><div class="line" id="005324"><span class="nick" style="color:#8dd3c7"><a href="#005324" label="[00:53:24]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: they don't</span></div><div class="line" id="005327"><span class="nick" style="color:#2e2a4a"><a href="#005327" label="[00:53:27]">&lt;Hagfish&gt;</a></span><span class="message">some probably block signups from Tor and VPNs, but most probably don't</span></div><div class="line" id="005410"><span class="nick" style="color:#8dd3c7"><a href="#005410" label="[00:54:10]">&lt;OriansJ&gt;</a></span><span class="message">also that wouldn't work as there are organizations that rent access to IP blocks</span></div><div class="line" id="005434"><span class="nick" style="color:#8dd3c7"><a href="#005434" label="[00:54:34]">&lt;OriansJ&gt;</a></span><span class="message">most of  it is black market but some is grey</span></div><div class="line" id="005440"><span class="nick" style="color:#2e2a4a"><a href="#005440" label="[00:54:40]">&lt;Hagfish&gt;</a></span><span class="message">that sounds like a VPN, but more work</span></div><div class="line" id="005444"><span class="nick" style="color:#2e2a4a"><a href="#005444" label="[00:54:44]">&lt;Hagfish&gt;</a></span><span class="message">for the user</span></div><div class="line" id="005519"><span class="nick" style="color:#8dd3c7"><a href="#005519" label="[00:55:19]">&lt;OriansJ&gt;</a></span><span class="message">well intelligence agencies need a way to hide but appear legit</span></div><div class="line" id="005556"><span class="nick" style="color:#8dd3c7"><a href="#005556" label="[00:55:56]">&lt;OriansJ&gt;</a></span><span class="message">so you tor into your provider, who hijacked a bunch of comcast routers and now you are effectively (your desired identity block)</span></div><div class="line" id="005724"><span class="nick" style="color:#8dd3c7"><a href="#005724" label="[00:57:24]">&lt;OriansJ&gt;</a></span><span class="message">China and Russia buy from the same providers as the US government; so IP doesn't mean shit to someone willing to spend money</span></div><div class="line" id="005913"><span class="nick" style="color:#8dd3c7"><a href="#005913" label="[00:59:13]">&lt;OriansJ&gt;</a></span><span class="message">Local browser fingerprints don't work as virtual machines are cheap to spin up</span></div><div class="line" id="010048"><span class="nick" style="color:#8dd3c7"><a href="#010048" label="[01:00:48]">&lt;OriansJ&gt;</a></span><span class="message">Basically anyone willing to spend money can game any metric of what you have or what you are.</span></div><div class="line" id="010148"><span class="nick" style="color:#8dd3c7"><a href="#010148" label="[01:01:48]">&lt;OriansJ&gt;</a></span><span class="message">Fake IDs can be ordered through black markets; governments forge IDs all the time.</span></div><div class="line" id="010204"><span class="nick" style="color:#8dd3c7"><a href="#010204" label="[01:02:04]">&lt;OriansJ&gt;</a></span><span class="message">Biometrics can be gamed/cheated</span></div><div class="line" id="010322"><span class="nick" style="color:#8dd3c7"><a href="#010322" label="[01:03:22]">&lt;OriansJ&gt;</a></span><span class="message">Blockchains based on proof of work are controlled by whoever is willing to spend enough money on crunching hardware.</span></div><div class="line" id="010350"><span class="nick" style="color:#8dd3c7"><a href="#010350" label="[01:03:50]">&lt;OriansJ&gt;</a></span><span class="message">Blockchains based on proof of ownership are rigged by default</span></div><div class="line" id="010454"><span class="nick" style="color:#8dd3c7"><a href="#010454" label="[01:04:54]">&lt;OriansJ&gt;</a></span><span class="message">chain of trust however has an interesting possiblity to work</span></div><div class="line" id="010545"><span class="nick" style="color:#8dd3c7"><a href="#010545" label="[01:05:45]">&lt;OriansJ&gt;</a></span><span class="message">but only so long as those signing keys of new members actually do checking that the person they are signing are not duplicates (which is a problem)</span></div><div class="line" id="010656"><span class="nick" style="color:#8dd3c7"><a href="#010656" label="[01:06:56]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: how about proof of storage?</span></div><div class="line" id="010734"><span class="nick" style="color:#8dd3c7"><a href="#010734" label="[01:07:34]">&lt;OriansJ&gt;</a></span><span class="message">as in you can store as many files as you want; provided you are storing a greater number of files for others.</span></div><div class="line" id="011116"><span class="nick" style="color:#6b8072"><a href="#011116" label="[01:11:16]">&lt;vagrantc&gt;</a></span><span class="message">duiniter attempts to implement a web-of-trust in that way</span></div><div class="line" id="011132"><span class="nick" style="color:#6b8072"><a href="#011132" label="[01:11:32]">&lt;vagrantc&gt;</a></span><span class="message">but ... slow to grow, if you have only one web of trust</span></div><div class="line" id="011231"><span class="nick" style="color:#8dd3c7"><a href="#011231" label="[01:12:31]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: not if government issued; like all ID cards having a private key and public key embedded (signed by that said government)</span></div><div class="line" id="011259"><span class="nick" style="color:#6b8072"><a href="#011259" label="[01:12:59]">&lt;vagrantc&gt;</a></span><span class="message">because you implicitly trust all goverments?</span></div><div class="line" id="011331"><span class="nick" style="color:#8dd3c7"><a href="#011331" label="[01:13:31]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: absolutely not, I only work for the State of Michigan. I don't trust them to do things right by default.</span></div><div class="line" id="011341"><span class="nick" style="color:#6b8072"><a href="#011341" label="[01:13:41]">&lt;vagrantc&gt;</a></span><span class="message">OriansJ: that's what i thought... :)</span></div><div class="line" id="011418"><span class="nick" style="color:#8dd3c7"><a href="#011418" label="[01:14:18]">&lt;OriansJ&gt;</a></span><span class="message">but governments are the most important invention for human survival in history.</span></div><div class="line" id="011520"><span class="nick" style="color:#8dd3c7"><a href="#011520" label="[01:15:20]">&lt;OriansJ&gt;</a></span><span class="message">They are responsible for more saved lives than any invention in history (and more dead bodies too)</span></div><div class="line" id="011740"><span class="nick" style="color:#8dd3c7"><a href="#011740" label="[01:17:40]">&lt;OriansJ&gt;</a></span><span class="message">(usually when people are declared non-citizens or enemies of the state)</span></div><div class="line" id="012027"><span class="nick">***</span><span class="message notice">dongcarl1 is now known as dongcarl</span></div><div class="line" id="012038"><span class="nick" style="color:#8dd3c7"><a href="#012038" label="[01:20:38]">&lt;OriansJ&gt;</a></span><span class="message">So we are struck trusting something we know will be abused or we are struck trusting something we know has a process for how it will be abused.</span></div><div class="line" id="012522"><span class="nick" style="color:#6b8072"><a href="#012522" label="[01:25:22]">&lt;vagrantc&gt;</a></span><span class="message">most government-issued IDs with cryptography i'm aware include backdoors for the secret keys</span></div><div class="line" id="012541"><span class="nick" style="color:#6b8072"><a href="#012541" label="[01:25:41]">&lt;vagrantc&gt;</a></span><span class="message">that's why i find such reliance dubious</span></div><div class="line" id="012703"><span class="nick" style="color:#8dd3c7"><a href="#012703" label="[01:27:03]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: well they generate the secret keys, so there is no need for backdoors</span></div><div class="line" id="012837"><span class="nick" style="color:#8dd3c7"><a href="#012837" label="[01:28:37]">&lt;OriansJ&gt;</a></span><span class="message">it is kinda like saying The Post office has a backdoor for knowing what your zipcode is. No they just assigned it to you and know what it is</span></div><div class="line" id="014537"><span class="nick" style="color:#6b8072"><a href="#014537" label="[01:45:37]">&lt;vagrantc&gt;</a></span><span class="message">well, sure, but that's not a property of a cryptographic system one might trust</span></div><div class="line" id="014545"><span class="nick" style="color:#6b8072"><a href="#014545" label="[01:45:45]">&lt;vagrantc&gt;</a></span><span class="message">or at least, you know the limits of trust</span></div><div class="line" id="022713"><span class="nick" style="color:#8dd3c7"><a href="#022713" label="[02:27:13]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: one must remember half of the NSA's mandate is secure communication technologies for use in the United States and the other half is to break the secure communication technologies of other countries.</span></div><div class="line" id="022815"><span class="nick" style="color:#8dd3c7"><a href="#022815" label="[02:28:15]">&lt;OriansJ&gt;</a></span><span class="message">So for a long time their efforts in the crypto space was largely helpful. S-boxes were not readily trusted but here we are.</span></div><div class="line" id="022951"><span class="nick" style="color:#8dd3c7"><a href="#022951" label="[02:29:51]">&lt;OriansJ&gt;</a></span><span class="message">also Government ID cryptography has nothing to do with you keeping secrets from the government but rather allow you to identify yourself for common business trust. (like open bank accounts, vote online, etc)</span></div><div class="line" id="023032"><span class="nick" style="color:#6b8072"><a href="#023032" label="[02:30:32]">&lt;vagrantc&gt;</a></span><span class="message">it sure beats non-cryptographic IDs for such things</span></div><div class="line" id="023057"><span class="nick" style="color:#6b8072"><a href="#023057" label="[02:30:57]">&lt;vagrantc&gt;</a></span><span class="message">as those have all the same problems, but are largely trivial to compromise</span></div><div class="line" id="023103"><span class="nick" style="color:#8dd3c7"><a href="#023103" label="[02:31:03]">&lt;OriansJ&gt;</a></span><span class="message">anyone who uses the State issued secret key to transmit data they want to keep secret from the government that issued them that key. clearly needs a class in basic common sense.</span></div><div class="line" id="023146"><span class="nick" style="color:#8dd3c7"><a href="#023146" label="[02:31:46]">&lt;OriansJ&gt;</a></span><span class="message">all systems can be compromised. Soviet rectal-thermal cryptography proved that.</span></div><div class="line" id="023224"><span class="nick" style="color:#8dd3c7"><a href="#023224" label="[02:32:24]">&lt;OriansJ&gt;</a></span><span class="message">(They basically shove a soldiering iron up the subject's but and turn it on; usually spilling the secrets before it gets hot enough to do serious damage)</span></div><div class="line" id="023257"><span class="nick" style="color:#80b1d3"><a href="#023257" label="[02:32:57]">&lt;V&gt;</a></span><span class="message">wew</span></div><div class="line" id="023314"><span class="nick" style="color:#80b1d3"><a href="#023314" label="[02:33:14]">&lt;V&gt;</a></span><span class="message">I randomly switch to this channel's buffer and that's the first thing I see being discussed</span></div><div class="line" id="023333"><span class="nick" style="color:#8dd3c7"><a href="#023333" label="[02:33:33]">&lt;OriansJ&gt;</a></span><span class="message">All security is a question of what is the weakest link in the chain and the answer is usualy the humans.</span></div><div class="line" id="023346"><span class="nick" style="color:#80b1d3"><a href="#023346" label="[02:33:46]">&lt;V&gt;</a></span><span class="message">okay, but also that doesn't work on masochists</span></div><div class="line" id="023444"><span class="nick" style="color:#8dd3c7"><a href="#023444" label="[02:34:44]">&lt;OriansJ&gt;</a></span><span class="message">V: fair but there are other ways on them. Like a &quot;coupon plugin&quot; for their browser. Or a &quot;Sales app&quot; for their phone.</span></div><div class="line" id="023508"><span class="nick" style="color:#80b1d3"><a href="#023508" label="[02:35:08]">&lt;V&gt;</a></span><span class="message">this is true</span></div><div class="line" id="023516"><span class="nick" style="color:#80b1d3"><a href="#023516" label="[02:35:16]">&lt;V&gt;</a></span><span class="message">the attacker is *always* at an advantage</span></div><div class="line" id="023525"><span class="nick" style="color:#8dd3c7"><a href="#023525" label="[02:35:25]">&lt;OriansJ&gt;</a></span><span class="message">It is amazing what people will do for $5 off a $20 item.</span></div><div class="line" id="023532"><span class="nick" style="color:#80b1d3"><a href="#023532" label="[02:35:32]">&lt;V&gt;</a></span><span class="message">they have infinite possibilities, the defender has to slip up only once</span></div><div class="line" id="023602"><span class="nick" style="color:#8dd3c7"><a href="#023602" label="[02:36:02]">&lt;OriansJ&gt;</a></span><span class="message">V: with the only exception being the trusting trust attack family of security.</span></div><div class="line" id="023637"><span class="nick" style="color:#8dd3c7"><a href="#023637" label="[02:36:37]">&lt;OriansJ&gt;</a></span><span class="message">where the attacker has to defend from all possible trusted bootstraps and the defender needs only create one that is uncompromised.</span></div><div class="line" id="023639"><span class="nick" style="color:#80b1d3"><a href="#023639" label="[02:36:39]">&lt;V&gt;</a></span><span class="message">well... in that situation, the attacker has to hide</span></div><div class="line" id="023641"><span class="nick" style="color:#80b1d3"><a href="#023641" label="[02:36:41]">&lt;V&gt;</a></span><span class="message">yes</span></div><div class="line" id="023714"><span class="nick" style="color:#80b1d3"><a href="#023714" label="[02:37:14]">&lt;V&gt;</a></span><span class="message">ultimately it's more pragmatic to just write a rootkit</span></div><div class="line" id="023734"><span class="nick" style="color:#8dd3c7"><a href="#023734" label="[02:37:34]">&lt;OriansJ&gt;</a></span><span class="message">hence why stage0 is throwing arbitrary hardware; arbitrary operating systems and universal perfect reproducibility at it.</span></div><div class="line" id="023758"><span class="nick" style="color:#8dd3c7"><a href="#023758" label="[02:37:58]">&lt;OriansJ&gt;</a></span><span class="message">You have to compromise ALL hardware (including that which hasn't even been dreamed of yet)</span></div><div class="line" id="023835"><span class="nick" style="color:#8dd3c7"><a href="#023835" label="[02:38:35]">&lt;OriansJ&gt;</a></span><span class="message">as every piece above cc_* is universally reproducible.</span></div><div class="line" id="023906"><span class="nick" style="color:#8dd3c7"><a href="#023906" label="[02:39:06]">&lt;OriansJ&gt;</a></span><span class="message">armv7l, x86, knight, etc all producing identicial binaries.</span></div><div class="line" id="024000"><span class="nick" style="color:#8dd3c7"><a href="#024000" label="[02:40:00]">&lt;OriansJ&gt;</a></span><span class="message">The steps below cc_* are all easy to do by anyone familiar with basic assembly programming.</span></div><div class="line" id="024016"><span class="nick" style="color:#8dd3c7"><a href="#024016" label="[02:40:16]">&lt;OriansJ&gt;</a></span><span class="message">and will work on arbitrary hardware.</span></div><div class="line" id="024044"><span class="nick" style="color:#8dd3c7"><a href="#024044" label="[02:40:44]">&lt;OriansJ&gt;</a></span><span class="message">(We can do z80, 6502, 6809, vax, etc bootstraps if we want)</span></div><div class="line" id="024659"><span class="nick" style="color:#6d2462"><a href="#024659" label="[02:46:59]">&lt;siraben&gt;</a></span><span class="message">rain1: at the moment it takes a detour to (a lazy) Lisp to continue the Haskell bootstrap, this was done as a sanity check on my end. I think the next step is to implement a strict Scheme on top, with FFI and I/O.</span></div><div class="line" id="024822"><span class="nick" style="color:#6d2462"><a href="#024822" label="[02:48:22]">&lt;siraben&gt;</a></span><span class="message">I'm not an expert on writing a hygienic macro expander so I'd like to avoid that, looks like Matt Might <a rel="nofollow" href="http://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/">http://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/</a>  has an interpreter that can be used for the next bootstrap</span></div><div class="line" id="025754"><span class="nick" style="color:#8dd3c7"><a href="#025754" label="[02:57:54]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well I look forward to that route taking shape. It would indeed be ironic for a minimal Haskell to bootstrapped before we bootstrap a proper scheme or GCC.</span></div><div class="line" id="082310"><span class="nick" style="color:#6d2462"><a href="#082310" label="[08:23:10]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.youtube.com/watch?v=Or_yKiI3Ha4">https://www.youtube.com/watch?v=Or_yKiI3Ha4</a>  , hm.</span></div><div class="line" id="101842"><span class="nick" style="color:#234e69"><a href="#101842" label="[10:18:42]">&lt;rain1&gt;</a></span><span class="message">and this is a tall tower of interpreters?</span></div><div class="line" id="101850"><span class="nick" style="color:#234e69"><a href="#101850" label="[10:18:50]">&lt;rain1&gt;</a></span><span class="message">so it would end up having a huge slowdown factor?</span></div><div class="line" id="102606"><span class="nick" style="color:#6d2462"><a href="#102606" label="[10:26:06]">&lt;siraben&gt;</a></span><span class="message">rain1:  not a tower of interpreters, just a chain of compilers.</span></div><div class="line" id="102711"><span class="nick" style="color:#6d2462"><a href="#102711" label="[10:27:11]">&lt;siraben&gt;</a></span><span class="message">Each compiler compiles to ION assembly which gets assembled and run by the C VM.</span></div><div class="line" id="102859"><span class="nick" style="color:#6d2462"><a href="#102859" label="[10:28:59]">&lt;siraben&gt;</a></span><span class="message">rain1: drafted a potential bootstrap plan to R5RS here: <a rel="nofollow" href="https://github.com/siraben/compiler/tree/lispy/descriptions">https://github.com/siraben/compiler/tree/lispy/descriptions</a> </span></div><div class="line" id="103139"><span class="nick" style="color:#6d2462"><a href="#103139" label="[10:31:39]">&lt;siraben&gt;</a></span><span class="message">I was concerned about implementing a call-by-value lambda calculus on top of the graph-based VM usually meant for call-by-need LC, but converting to CPS should allow me to emulate CBV in CBN.</span></div><div class="line" id="103944"><span class="nick" style="color:#234e69"><a href="#103944" label="[10:39:44]">&lt;rain1&gt;</a></span><span class="message">ok that's great!</span></div><div class="line" id="104948"><span class="nick" style="color:#6d2462"><a href="#104948" label="[10:49:48]">&lt;siraben&gt;</a></span><span class="message">lol why are there no good tutorial implementations of, say, `define-syntax`? At appears easier to implement type inference than macro expansion at this point.</span></div><div class="line" id="115257"><span class="nick" style="color:#6c3d55"><a href="#115257" label="[11:52:57]">&lt;fossy&gt;</a></span><span class="message">siraben I assume youre aware of mes-m2?</span></div><div class="line" id="115314"><span class="nick" style="color:#6d2462"><a href="#115314" label="[11:53:14]">&lt;siraben&gt;</a></span><span class="message">fossy: yes</span></div><div class="line" id="115322"><span class="nick" style="color:#6c3d55"><a href="#115322" label="[11:53:22]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="115351"><span class="nick" style="color:#6d2462"><a href="#115351" label="[11:53:51]">&lt;siraben&gt;</a></span><span class="message">i'm aiming to achieve what mes-m2 does but through a different approach</span></div><div class="line" id="115520"><span class="nick" style="color:#6c3d55"><a href="#115520" label="[11:55:20]">&lt;fossy&gt;</a></span><span class="message">so, where in your approach do you start?</span></div><div class="line" id="115643"><span class="nick" style="color:#6d2462"><a href="#115643" label="[11:56:43]">&lt;siraben&gt;</a></span><span class="message">fossy: did you see the logs from a few weeks ago when I described this? if not I can explain again</span></div><div class="line" id="115800"><span class="nick" style="color:#6d2462"><a href="#115800" label="[11:58:00]">&lt;siraben&gt;</a></span><span class="message">Ben Lynn has this amazing project where he bootstraps a compiler for a significant subset of Haskell from <a rel="nofollow" href="https://en.wikipedia.org/wiki/SKI_combinator_calculus">https://en.wikipedia.org/wiki/SKI_combinator_calculus</a> </span></div><div class="line" id="115830"><span class="nick" style="color:#6c3d55"><a href="#115830" label="[11:58:30]">&lt;fossy&gt;</a></span><span class="message">let me have a look</span></div><div class="line" id="115833"><span class="nick" style="color:#6c3d55"><a href="#115833" label="[11:58:33]">&lt;fossy&gt;</a></span><span class="message">in my logs</span></div><div class="line" id="115838"><span class="nick" style="color:#6d2462"><a href="#115838" label="[11:58:38]">&lt;siraben&gt;</a></span><span class="message">ok</span></div><div class="line" id="115918"><span class="nick" style="color:#6d2462"><a href="#115918" label="[11:59:18]">&lt;siraben&gt;</a></span><span class="message">fossy:  <a rel="nofollow" href="http://logs.guix.gnu.org/bootstrappable/2020-11-04.log">http://logs.guix.gnu.org/bootstrappable/2020-11-04.log</a> </span></div><div class="line" id="115923"><span class="nick" style="color:#d9d9d9"><a href="#115923" label="[11:59:23]">&lt;jelle&gt;</a></span><span class="message">hmm vagrant has no bouncer :(</span></div><div class="line" id="120355"><span class="nick" style="color:#6c3d55"><a href="#120355" label="[12:03:55]">&lt;fossy&gt;</a></span><span class="message">hMM</span></div><div class="line" id="120417"><span class="nick" style="color:#6c3d55"><a href="#120417" label="[12:04:17]">&lt;fossy&gt;</a></span><span class="message">if i understand this Ben Lynn thingo correctly. is it just one c file</span></div><div class="line" id="120422"><span class="nick" style="color:#6c3d55"><a href="#120422" label="[12:04:22]">&lt;fossy&gt;</a></span><span class="message">then everything comes from that??</span></div><div class="line" id="120433"><span class="nick" style="color:#6c3d55"><a href="#120433" label="[12:04:33]">&lt;fossy&gt;</a></span><span class="message">all the way to a hskell compiler?</span></div><div class="line" id="120442"><span class="nick" style="color:#6c3d55"><a href="#120442" label="[12:04:42]">&lt;fossy&gt;</a></span><span class="message">if so... that is super duper cool</span></div><div class="line" id="120525"><span class="nick" style="color:#6c3d55"><a href="#120525" label="[12:05:25]">&lt;fossy&gt;</a></span><span class="message">siraben: are you aware of any (reasonable) r5s5 scheme interpreters in Haskell?</span></div><div class="line" id="120601"><span class="nick" style="color:#6d2462"><a href="#120601" label="[12:06:01]">&lt;siraben&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/siraben/r5rs-denot">https://github.com/siraben/r5rs-denot</a> </span></div><div class="line" id="120624"><span class="nick" style="color:#6c3d55"><a href="#120624" label="[12:06:24]">&lt;fossy&gt;</a></span><span class="message">what the hell is this</span></div><div class="line" id="120626"><span class="nick" style="color:#6c3d55"><a href="#120626" label="[12:06:26]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/blynn/compiler/blob/master/vm.c#L333">https://github.com/blynn/compiler/blob/master/vm.c#L333</a> </span></div><div class="line" id="120628"><span class="nick" style="color:#6d2462"><a href="#120628" label="[12:06:28]">&lt;siraben&gt;</a></span><span class="message">Doesn't have I/O but correctly implements the semantics of R5RS according to the formal semantics in the report</span></div><div class="line" id="120644"><span class="nick" style="color:#6d2462"><a href="#120644" label="[12:06:44]">&lt;siraben&gt;</a></span><span class="message">That's the VM</span></div><div class="line" id="120656"><span class="nick" style="color:#6c3d55"><a href="#120656" label="[12:06:56]">&lt;fossy&gt;</a></span><span class="message">right. what am i looking at here</span></div><div class="line" id="120658"><span class="nick" style="color:#6c3d55"><a href="#120658" label="[12:06:58]">&lt;fossy&gt;</a></span><span class="message">is this the SKI thing</span></div><div class="line" id="120711"><span class="nick" style="color:#6c3d55"><a href="#120711" label="[12:07:11]">&lt;fossy&gt;</a></span><span class="message">(sorry if this is a silly question i am not familiar with haskell)</span></div><div class="line" id="120732"><span class="nick" style="color:#6d2462"><a href="#120732" label="[12:07:32]">&lt;siraben&gt;</a></span><span class="message">Ah, yes. See <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/quest.html">https://crypto.stanford.edu/~blynn/compiler/quest.html</a> </span></div><div class="line" id="120801"><span class="nick" style="color:#6d2462"><a href="#120801" label="[12:08:01]">&lt;siraben&gt;</a></span><span class="message">After a few compilers it becomes readable (basically lambda calculus)</span></div><div class="line" id="120849"><span class="nick" style="color:#6c3d55"><a href="#120849" label="[12:08:49]">&lt;fossy&gt;</a></span><span class="message">right, so with some level of mathematics education and knwoledge of this, it is reasonably unhard to reason about, i guess?</span></div><div class="line" id="120900"><span class="nick" style="color:#6d2462"><a href="#120900" label="[12:09:00]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/sing.html">https://crypto.stanford.edu/~blynn/compiler/sing.html</a> </span></div><div class="line" id="120909"><span class="nick" style="color:#6d2462"><a href="#120909" label="[12:09:09]">&lt;siraben&gt;</a></span><span class="message">&quot;Ideally, to avoid &quot;trusting trust&quot; issues, all this should have been done manually. Nonetheless, each of the our terms seem short enough that a sufficiently motivated human could verify them.&quot;</span></div><div class="line" id="120921"><span class="nick" style="color:#6d2462"><a href="#120921" label="[12:09:21]">&lt;siraben&gt;</a></span><span class="message">Yes, you don't need math knowledge per se but it helps.</span></div><div class="line" id="120923"><span class="nick" style="color:#6c3d55"><a href="#120923" label="[12:09:23]">&lt;fossy&gt;</a></span><span class="message">i will be looking through this webpage tomorrow</span></div><div class="line" id="120942"><span class="nick" style="color:#6c3d55"><a href="#120942" label="[12:09:42]">&lt;fossy&gt;</a></span><span class="message">how very interesting</span></div><div class="line" id="120942"><span class="nick" style="color:#6d2462"><a href="#120942" label="[12:09:42]">&lt;siraben&gt;</a></span><span class="message">You could just syntactically follow the rewrite rules to hand-assemble the first few compilers manually, for instance.</span></div><div class="line" id="120959"><span class="nick" style="color:#6d2462"><a href="#120959" label="[12:09:59]">&lt;siraben&gt;</a></span><span class="message">Yeah. Also Ben Lynn turned this into an IOCCC entry and won last year, heh.</span></div><div class="line" id="121006"><span class="nick" style="color:#6d2462"><a href="#121006" label="[12:10:06]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.ioccc.org/2019/lynn/hint.html">https://www.ioccc.org/2019/lynn/hint.html</a> </span></div><div class="line" id="122041"><span class="nick" style="color:#6d2462"><a href="#122041" label="[12:20:41]">&lt;siraben&gt;</a></span><span class="message">Oh my gosh, looking through my R5RS interpreter README I linked to a paper on how to implement macro expansion 🎉 <a rel="nofollow" href="https://legacy.cs.indiana.edu/~dyb/pubs/LaSC-5-4-pp295-326.pdf">https://legacy.cs.indiana.edu/~dyb/pubs/LaSC-5-4-pp295-326.pdf</a> </span></div><div class="line" id="130439"><span class="nick" style="color:#8dd3c7"><a href="#130439" label="[13:04:39]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well it wouldn't be the first time that something we thought was *impossible* or *extremely hard* ended up being easier to implement than the alternatives we try.</span></div><div class="line" id="130836"><span class="nick" style="color:#8dd3c7"><a href="#130836" label="[13:08:36]">&lt;OriansJ&gt;</a></span><span class="message">anyone know of a *GOOD* introduction to haskell?</span></div><div class="line" id="130937"><span class="nick" style="color:#6d2462"><a href="#130937" label="[13:09:37]">&lt;siraben&gt;</a></span><span class="message">OriansJ: what's your background?</span></div><div class="line" id="131045"><span class="nick" style="color:#6d2462"><a href="#131045" label="[13:10:45]">&lt;siraben&gt;</a></span><span class="message">I recommend &quot;Programming in Haskell&quot; by Graham Hutton. It's what I used when I first learned it.</span></div><div class="line" id="131047"><span class="nick" style="color:#6d2462"><a href="#131047" label="[13:10:47]">&lt;siraben&gt;</a></span><span class="message">Very readable.</span></div><div class="line" id="131358"><span class="nick" style="color:#80b1d3"><a href="#131358" label="[13:13:58]">&lt;V&gt;</a></span><span class="message">isn't the classic one &quot;learn you a haskell&quot;?</span></div><div class="line" id="131424"><span class="nick" style="color:#6d2462"><a href="#131424" label="[13:14:24]">&lt;siraben&gt;</a></span><span class="message">I've heard Learn You A Haskell is somewhat controversial in the way it presents some of the ideas, haha</span></div><div class="line" id="131529"><span class="nick" style="color:#6d2462"><a href="#131529" label="[13:15:29]">&lt;siraben&gt;</a></span><span class="message">from a quick search in Freenode #haskell, &quot;The problem with LYAH is: It's not greatly structured, glosses over some details, and has no exercises (and kinda dated)&quot;</span></div><div class="line" id="131615"><span class="nick" style="color:#80b1d3"><a href="#131615" label="[13:16:15]">&lt;V&gt;</a></span><span class="message">mmm</span></div><div class="line" id="131616"><span class="nick" style="color:#80b1d3"><a href="#131616" label="[13:16:16]">&lt;V&gt;</a></span><span class="message">good to know</span></div><div class="line" id="131640"><span class="nick" style="color:#6d2462"><a href="#131640" label="[13:16:40]">&lt;siraben&gt;</a></span><span class="message">Also, there's a gap between learning Haskell and using Haskell in a practical manner, similar to the situation in Scheme I suppose.</span></div><div class="line" id="131727"><span class="nick" style="color:#6d2462"><a href="#131727" label="[13:17:27]">&lt;siraben&gt;</a></span><span class="message">which <a rel="nofollow" href="https://www.manning.com/books/get-programming-with-haskell">https://www.manning.com/books/get-programming-with-haskell</a>  apparently helps with</span></div><div class="line" id="131843"><span class="nick" style="color:#8dd3c7"><a href="#131843" label="[13:18:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well if I know the syntax rules, the rest doesn't matter</span></div><div class="line" id="132113"><span class="nick" style="color:#6d2462"><a href="#132113" label="[13:21:13]">&lt;siraben&gt;</a></span><span class="message">OriansJ: then, <a rel="nofollow" href="https://www.haskell.org/onlinereport/haskell2010/haskellch10.html">https://www.haskell.org/onlinereport/haskell2010/haskellch10.html</a> </span></div><div class="line" id="132129"><span class="nick" style="color:#6d2462"><a href="#132129" label="[13:21:29]">&lt;siraben&gt;</a></span><span class="message">it's quite small</span></div><div class="line" id="132414"><span class="nick" style="color:#8dd3c7"><a href="#132414" label="[13:24:14]">&lt;OriansJ&gt;</a></span><span class="message">and whitespace sensitive</span></div><div class="line" id="132514"><span class="nick" style="color:#6d2462"><a href="#132514" label="[13:25:14]">&lt;siraben&gt;</a></span><span class="message">You can do without whitespace sensitivity, Ben Lynn does this for several stages until he implements whitespace sensitive parsing. It remains valid Haskell either way</span></div><div class="line" id="132758"><span class="nick" style="color:#8dd3c7"><a href="#132758" label="[13:27:58]">&lt;OriansJ&gt;</a></span><span class="message">a lexicial grammer and a seperate context free grammar and I am guessing some common patterns used by Haskell programmers to avoid mixing them in a way that gets you in trouble.</span></div><div class="line" id="133312"><span class="nick" style="color:#8dd3c7"><a href="#133312" label="[13:33:12]">&lt;OriansJ&gt;</a></span><span class="message">I guess I am going to allocate some time to reading and experiments</span></div><br /></div></body></html>