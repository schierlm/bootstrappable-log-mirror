<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002410"><span class="nick" style="color:#8dd3c7"><a href="#002410" label="[00:24:10]">&lt;theruran&gt;</a></span><span class="message">thanks xentrac! I read it all and I think it's an interesting idea for bootstrapping! same with CPLDs. there are free designs of CPLD somewhere? can they be scaled up easily?</span></div><div class="line" id="004913"><span class="nick" style="color:#2e2a4a"><a href="#004913" label="[00:49:13]">&lt;xentrac&gt;</a></span><span class="message">theruran: oh cool!  glad you liked it!  yes, all designs of CPLD are free, unless someone has designed new ones since 02011, which seems unlikely.  but in any case the first 23 years of CPLD designs are all free</span></div><div class="line" id="004957"><span class="nick" style="color:#2e2a4a"><a href="#004957" label="[00:49:57]">&lt;xentrac&gt;</a></span><span class="message">at least in the US, though possibly elsewhere 02006 is the cutoff date</span></div><div class="line" id="005322"><span class="nick" style="color:#2e2a4a"><a href="#005322" label="[00:53:22]">&lt;xentrac&gt;</a></span><span class="message">there are individual CPLDs that you could probably fit a 25MHz CPU into: <a rel="nofollow" href="https://www.digikey.com/en/products/filter/embedded-cplds-complex-programmable-logic-devices/695?s=N4IgjCBcpgrB0QAcAuUQEkB2KCmBzXAJxABoQBbASy3TAAZH6QBfcgWgCYpQBjKFEQCuucgHsoAbRCwQAXTYh2ATh4h%2BkQSPFTw8looBsaqgBN07BhHKp0ZEAEcUATzr2XSXOgCGAZ34GQA">https://www.digikey.com/en/products/filter/embedded-cplds-complex-programmable-logic-devices/695?s=N4IgjCBcpgrB0QAcAuUQEkB2KCmBzXAJxABoQBbASy3TAAZH6QBfcgWgCYpQBjKFEQCuucgHsoAbRCwQAXTYh2ATh4h%2BkQSPFTw8looBsaqgBN07BhHKp0ZEAEcUATzr2XSXOgCGAZ34GQA</a> </span></div><div class="line" id="005543"><span class="nick" style="color:#6b8072"><a href="#005543" label="[00:55:43]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I would be happy with a 100khz CPU</span></div><div class="line" id="005558"><span class="nick" style="color:#6b8072"><a href="#005558" label="[00:55:58]">&lt;oriansj&gt;</a></span><span class="message">if it was fully free</span></div><div class="line" id="005605"><span class="nick" style="color:#2e2a4a"><a href="#005605" label="[00:56:05]">&lt;xentrac&gt;</a></span><span class="message">for example the Xilinx XC2C512 CoolRunner-II, which looks like it was introduced in 02002 and costs US$85: <a rel="nofollow" href="https://www.digikey.com/en/products/detail/xilinx-inc/XC2C512-10FGG324C/966596">https://www.digikey.com/en/products/detail/xilinx-inc/XC2C512-10FGG324C/966596</a> </span></div><div class="line" id="010000"><span class="nick" style="color:#2e2a4a"><a href="#010000" label="[01:00:00]">&lt;xentrac&gt;</a></span><span class="message">the XC2C512 is fully free in the sense that there's nothing secret about it and there are no legal restrictions on copying it, but it's manufactured in 0.18Î¼m, which might make auditing it with die photos a little difficult</span></div><div class="line" id="010101"><span class="nick" style="color:#2e2a4a"><a href="#010101" label="[01:01:01]">&lt;xentrac&gt;</a></span><span class="message">and, being a CPLD, it's pretty low on memory.  if I'm reading the datasheet right it contains 512 bits of memory (not counting the configuration memory)</span></div><div class="line" id="010217"><span class="nick" style="color:#2e2a4a"><a href="#010217" label="[01:02:17]">&lt;xentrac&gt;</a></span><span class="message">oh, no, there are also 32 16-bit up/down counters</span></div><div class="line" id="010940"><span class="nick" style="color:#2e2a4a"><a href="#010940" label="[01:09:40]">&lt;xentrac&gt;</a></span><span class="message">&gt; .com.</span></div><div class="line" id="010940"><span class="nick" style="color:#2e2a4a"><a href="#010940" label="[01:09:40]">&lt;xentrac&gt;</a></span><span class="message">&gt; Third party development tools include synthesis tools from Cadence, Exemplar, Mentor Graphics, Synplicity, and Synopsys.</span></div><div class="line" id="010944"><span class="nick" style="color:#2e2a4a"><a href="#010944" label="[01:09:44]">&lt;xentrac&gt;</a></span><span class="message">oops</span></div><div class="line" id="010945"><span class="nick" style="color:#2e2a4a"><a href="#010945" label="[01:09:45]">&lt;xentrac&gt;</a></span><span class="message">.com.</span></div><div class="line" id="010945"><span class="nick" style="color:#2e2a4a"><a href="#010945" label="[01:09:45]">&lt;xentrac&gt;</a></span><span class="message">&gt; Third party development tools include synthesis tools from Cadence, Exemplar, Mentor Graphics, Synplicity, and Synopsys.</span></div><div class="line" id="010950"><span class="nick" style="color:#2e2a4a"><a href="#010950" label="[01:09:50]">&lt;xentrac&gt;</a></span><span class="message">ugh</span></div><div class="line" id="010957"><span class="nick" style="color:#2e2a4a"><a href="#010957" label="[01:09:57]">&lt;xentrac&gt;</a></span><span class="message">&gt; Xilinx CoolRunner-II CPLDs are supported by all configurations of Xilinx standard release development software as well as the freely available ISE WebPACK software available from www.xilinx.com.</span></div><div class="line" id="011001"><span class="nick" style="color:#2e2a4a"><a href="#011001" label="[01:10:01]">&lt;xentrac&gt;</a></span><span class="message">that was the missing line</span></div><div class="line" id="011028"><span class="nick" style="color:#2e2a4a"><a href="#011028" label="[01:10:28]">&lt;xentrac&gt;</a></span><span class="message">so, a world of difference from the FPGA &quot;you must use our software or else&quot; world</span></div><div class="line" id="011511"><span class="nick" style="color:#2e2a4a"><a href="#011511" label="[01:15:11]">&lt;xentrac&gt;</a></span><span class="message">still, I'm having a hard time finding the specs for the bitstream format... but I trust it's out there</span></div><div class="line" id="011654"><span class="nick" style="color:#2e2a4a"><a href="#011654" label="[01:16:54]">&lt;xentrac&gt;</a></span><span class="message">looks like azonenberg had to reverse-engineer it: <a rel="nofollow" href="https://recon.cx/2015/slides/recon2015-18-andrew-zonenberg-From-Silicon-to-Compiler.pdf">https://recon.cx/2015/slides/recon2015-18-andrew-zonenberg-From-Silicon-to-Compiler.pdf</a> </span></div><div class="line" id="011740"><span class="nick" style="color:#6b8072"><a href="#011740" label="[01:17:40]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I don't trust until I see a properly Free software licensed tool that provides the assumed functionality.</span></div><div class="line" id="011947"><span class="nick" style="color:#2e2a4a"><a href="#011947" label="[01:19:47]">&lt;xentrac&gt;</a></span><span class="message">that is as it should be!</span></div><div class="line" id="012052"><span class="nick" style="color:#6b8072"><a href="#012052" label="[01:20:52]">&lt;oriansj&gt;</a></span><span class="message">I know tedious boring shit is the bits that people never do without some serious reasons to do so.</span></div><div class="line" id="012204"><span class="nick" style="color:#6b8072"><a href="#012204" label="[01:22:04]">&lt;oriansj&gt;</a></span><span class="message">and that software sounds tedious to write, so it needs something like a paycheck or a person reason before someone would do that work.</span></div><div class="line" id="012353"><span class="nick" style="color:#2e2a4a"><a href="#012353" label="[01:23:53]">&lt;xentrac&gt;</a></span><span class="message">seems like it does exist: <a rel="nofollow" href="https://robertou.com/unofficial-open-source-place-and-route-for-xilinx-coolrunner-ii-cplds.html">https://robertou.com/unofficial-open-source-place-and-route-for-xilinx-coolrunner-ii-cplds.html</a> </span></div><div class="line" id="012400"><span class="nick" style="color:#2e2a4a"><a href="#012400" label="[01:24:00]">&lt;xentrac&gt;</a></span><span class="message">(expired SSL cert)</span></div><div class="line" id="012558"><span class="nick" style="color:#2e2a4a"><a href="#012558" label="[01:25:58]">&lt;xentrac&gt;</a></span><span class="message">azonenberg open-sourced his software as libcrowbar</span></div><div class="line" id="012835"><span class="nick" style="color:#2e2a4a"><a href="#012835" label="[01:28:35]">&lt;xentrac&gt;</a></span><span class="message">oh also it looks like Claire Wolf did use her yosys to map her PicoRV32 to TTL chips: <a rel="nofollow" href="https://old.reddit.com/r/FPGA/comments/3kn5qu/open_source_fpgacpldpla/">https://old.reddit.com/r/FPGA/comments/3kn5qu/open_source_fpgacpldpla/</a> </span></div><div class="line" id="012921"><span class="nick" style="color:#2e2a4a"><a href="#012921" label="[01:29:21]">&lt;xentrac&gt;</a></span><span class="message">but because she was using only the 7400, 7402, 7404, and 7474, the design requires 4846 chips, which would be half a square meter of PCB, which is actually pretty close to uh</span></div><div class="line" id="013006"><span class="nick" style="color:#2e2a4a"><a href="#013006" label="[01:30:06]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://hackaday.io/project/178826-pineapple-one">https://hackaday.io/project/178826-pineapple-one</a>  which was designed in a more sensible way</span></div><div class="line" id="013107"><span class="nick" style="color:#2e2a4a"><a href="#013107" label="[01:31:07]">&lt;xentrac&gt;</a></span><span class="message">(500 kHz, 512 KiB RAM, 200Ã150 monochrome VGA output, RV32 (I, I think))</span></div><div class="line" id="013157"><span class="nick" style="color:#2e2a4a"><a href="#013157" label="[01:31:57]">&lt;xentrac&gt;</a></span><span class="message">for example, not using TTL :)</span></div><div class="line" id="013438"><span class="nick" style="color:#2e2a4a"><a href="#013438" label="[01:34:38]">&lt;xentrac&gt;</a></span><span class="message">(using CMOS instead of TTL doesn't affect the chip count much; using higher levels of integration is what accounts for that.  CMOS just gives you better noise immunity, much lower power consumption, and higher speed)</span></div><div class="line" id="013528"><span class="nick" style="color:#80b1d3"><a href="#013528" label="[01:35:28]">&lt;stikonas&gt;</a></span><span class="message">yes, pineapple-one sounds quite good for bootstrapping, it was mentioned here before</span></div><div class="line" id="013617"><span class="nick" style="color:#2e2a4a"><a href="#013617" label="[01:36:17]">&lt;xentrac&gt;</a></span><span class="message">sorry, I didn't remember</span></div><div class="line" id="013810"><span class="nick" style="color:#80b1d3"><a href="#013810" label="[01:38:10]">&lt;stikonas&gt;</a></span><span class="message">well, maybe you were not online at those hours...</span></div><div class="line" id="013819"><span class="nick" style="color:#80b1d3"><a href="#013819" label="[01:38:19]">&lt;stikonas&gt;</a></span><span class="message">I'm just saying that somebody discussed it here</span></div><div class="line" id="013955"><span class="nick" style="color:#80b1d3"><a href="#013955" label="[01:39:55]">&lt;stikonas&gt;</a></span><span class="message">500 kHz should be enough for bootstrapping up to M2-Planet + tools</span></div><div class="line" id="015059"><span class="nick" style="color:#2e2a4a"><a href="#015059" label="[01:50:59]">&lt;xentrac&gt;</a></span><span class="message">well</span></div><div class="line" id="015106"><span class="nick" style="color:#2e2a4a"><a href="#015106" label="[01:51:06]">&lt;xentrac&gt;</a></span><span class="message">unless you need to debug something ;)</span></div><div class="line" id="025646"><span class="nick" style="color:#6b8072"><a href="#025646" label="[02:56:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: unfortunately the hex2_x86.hex1 change you suggested <a rel="nofollow" href="https://paste.debian.net/1211419/">https://paste.debian.net/1211419/</a>  did not have the improvement in performance hoped for.</span></div><div class="line" id="025854"><span class="nick" style="color:#6b8072"><a href="#025854" label="[02:58:54]">&lt;oriansj&gt;</a></span><span class="message">we have only sped up from 18:07.60 to 15:13.74 (a good improvement 16% speed improvement though)</span></div><div class="line" id="025918"><span class="nick" style="color:#6b8072"><a href="#025918" label="[02:59:18]">&lt;oriansj&gt;</a></span><span class="message">./hex2-0 hold M2</span></div><div class="line" id="025939"><span class="nick" style="color:#6b8072"><a href="#025939" label="[02:59:39]">&lt;oriansj&gt;</a></span><span class="message">went from 6:31.76 down to 5:30.73</span></div><div class="line" id="030220"><span class="nick" style="color:#6b8072"><a href="#030220" label="[03:02:20]">&lt;oriansj&gt;</a></span><span class="message">xentrac: we can develope on big powerful machines, a 500khz machine would only be used for running the bootstrap (or in the event we find a difference, isolating the difference for inspection)</span></div><div class="line" id="030438"><span class="nick" style="color:#6b8072"><a href="#030438" label="[03:04:38]">&lt;oriansj&gt;</a></span><span class="message">makes me wonder if I should malloc the table onto the HEAP</span></div><div class="line" id="031016"><span class="nick" style="color:#6b8072"><a href="#031016" label="[03:10:16]">&lt;oriansj&gt;</a></span><span class="message">probably making scratch part of the heap will probably help with performance too stikonas</span></div><div class="line" id="031147"><span class="nick" style="color:#2e2a4a"><a href="#031147" label="[03:11:47]">&lt;xentrac&gt;</a></span><span class="message">oriansj: the bootstrap machine has to be able to operate autonomously; it can't be slaved to an untrusted machine the way an Arduino is slaved to your laptop</span></div><div class="line" id="031229"><span class="nick" style="color:#2e2a4a"><a href="#031229" label="[03:12:29]">&lt;xentrac&gt;</a></span><span class="message">the flow of code updates needs to be *from* the bootstrap machine *to* the untrusted machines, not vice versa</span></div><div class="line" id="031243"><span class="nick" style="color:#6d2462"><a href="#031243" label="[03:12:43]">&lt;Hagfish&gt;</a></span><span class="message">great point</span></div><div class="line" id="031246"><span class="nick" style="color:#6b8072"><a href="#031246" label="[03:12:46]">&lt;oriansj&gt;</a></span><span class="message">xentrac: yes hence why SET exists and more is written in hex0</span></div><div class="line" id="031250"><span class="nick" style="color:#2e2a4a"><a href="#031250" label="[03:12:50]">&lt;xentrac&gt;</a></span><span class="message">so you have to be able to edit on it.  500kHz is barely usable</span></div><div class="line" id="031257"><span class="nick" style="color:#2e2a4a"><a href="#031257" label="[03:12:57]">&lt;xentrac&gt;</a></span><span class="message">SET?</span></div><div class="line" id="031328"><span class="nick" style="color:#6b8072"><a href="#031328" label="[03:13:28]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage1/SET.s">https://github.com/oriansj/stage0/blob/master/stage1/SET.s</a> </span></div><div class="line" id="031344"><span class="nick" style="color:#6b8072"><a href="#031344" label="[03:13:44]">&lt;oriansj&gt;</a></span><span class="message">shitty expensive typewriter</span></div><div class="line" id="031400"><span class="nick" style="color:#6b8072"><a href="#031400" label="[03:14:00]">&lt;oriansj&gt;</a></span><span class="message">it is a line editor</span></div><div class="line" id="031418"><span class="nick" style="color:#2e2a4a"><a href="#031418" label="[03:14:18]">&lt;xentrac&gt;</a></span><span class="message">aha, I see</span></div><div class="line" id="031425"><span class="nick" style="color:#6b8072"><a href="#031425" label="[03:14:25]">&lt;oriansj&gt;</a></span><span class="message">that can run at 5hz speeds and still be responsive</span></div><div class="line" id="031440"><span class="nick" style="color:#2e2a4a"><a href="#031440" label="[03:14:40]">&lt;xentrac&gt;</a></span><span class="message">nice!</span></div><div class="line" id="031523"><span class="nick" style="color:#2e2a4a"><a href="#031523" label="[03:15:23]">&lt;xentrac&gt;</a></span><span class="message">yeah, my experience is that 0.3 DMIPS is about the minimum for a responsive screen editor</span></div><div class="line" id="031547"><span class="nick" style="color:#6b8072"><a href="#031547" label="[03:15:47]">&lt;oriansj&gt;</a></span><span class="message">but editing a line however is quite a bad user experience because you have to type it correctly or do it all again.</span></div><div class="line" id="031609"><span class="nick" style="color:#2e2a4a"><a href="#031609" label="[03:16:09]">&lt;xentrac&gt;</a></span><span class="message">have you seen ae.c, Ant's Editor?</span></div><div class="line" id="031624"><span class="nick" style="color:#2e2a4a"><a href="#031624" label="[03:16:24]">&lt;xentrac&gt;</a></span><span class="message">Anthony Howe's editor</span></div><div class="line" id="031632"><span class="nick" style="color:#2e2a4a"><a href="#031632" label="[03:16:32]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://groups.google.com/forum/#!topic/comp.editors/SID2De137wY">https://groups.google.com/forum/#!topic/comp.editors/SID2De137wY</a> </span></div><div class="line" id="031637"><span class="nick" style="color:#2e2a4a"><a href="#031637" label="[03:16:37]">&lt;xentrac&gt;</a></span><span class="message">it's quite a bit bigger though, about 6K</span></div><div class="line" id="031705"><span class="nick" style="color:#2e2a4a"><a href="#031705" label="[03:17:05]">&lt;xentrac&gt;</a></span><span class="message">(compiled for amd64!)</span></div><div class="line" id="031723"><span class="nick" style="color:#2e2a4a"><a href="#031723" label="[03:17:23]">&lt;xentrac&gt;</a></span><span class="message">it's a reasonably usable implementation of vi</span></div><div class="line" id="031724"><span class="nick" style="color:#6b8072"><a href="#031724" label="[03:17:24]">&lt;oriansj&gt;</a></span><span class="message">no but SET is good enough for me and it is only 1072bytes</span></div><div class="line" id="031749"><span class="nick" style="color:#2e2a4a"><a href="#031749" label="[03:17:49]">&lt;xentrac&gt;</a></span><span class="message">well, as you point out, having to type an entire line correctly or do it all again is quite a bad user experience</span></div><div class="line" id="031757"><span class="nick" style="color:#2e2a4a"><a href="#031757" label="[03:17:57]">&lt;xentrac&gt;</a></span><span class="message">that will result in code updates flowing in the fatal direction</span></div><div class="line" id="031820"><span class="nick" style="color:#6b8072"><a href="#031820" label="[03:18:20]">&lt;oriansj&gt;</a></span><span class="message">better than having to rewrite the entire file like in the hex0-monitor</span></div><div class="line" id="031845"><span class="nick" style="color:#2e2a4a"><a href="#031845" label="[03:18:45]">&lt;xentrac&gt;</a></span><span class="message">true.  I have written programs with COPY CON OCTAL.COM</span></div><div class="line" id="031849"><span class="nick" style="color:#2e2a4a"><a href="#031849" label="[03:18:49]">&lt;xentrac&gt;</a></span><span class="message">it's a pain</span></div><div class="line" id="031911"><span class="nick" style="color:#6b8072"><a href="#031911" label="[03:19:11]">&lt;oriansj&gt;</a></span><span class="message">hex0-monitor (not for anything larger than what is needed for SET)</span></div><div class="line" id="031927"><span class="nick" style="color:#6b8072"><a href="#031927" label="[03:19:27]">&lt;oriansj&gt;</a></span><span class="message">and SET is good enough for cc_x86.M1</span></div><div class="line" id="032023"><span class="nick" style="color:#2e2a4a"><a href="#032023" label="[03:20:23]">&lt;xentrac&gt;</a></span><span class="message">it's not good enough for GCC</span></div><div class="line" id="032034"><span class="nick" style="color:#6b8072"><a href="#032034" label="[03:20:34]">&lt;oriansj&gt;</a></span><span class="message">it would be interesting to see someone do a vi for knight bare-metal</span></div><div class="line" id="032055"><span class="nick" style="color:#6b8072"><a href="#032055" label="[03:20:55]">&lt;oriansj&gt;</a></span><span class="message">as ltermcap and lcurses are certainly not available</span></div><div class="line" id="032203"><span class="nick" style="color:#6b8072"><a href="#032203" label="[03:22:03]">&lt;oriansj&gt;</a></span><span class="message">xentrac: 500hz isn't good enough for MesCC but at that point we probably need something with enough power for a real set of tools</span></div><div class="line" id="032210"><span class="nick" style="color:#2e2a4a"><a href="#032210" label="[03:22:10]">&lt;xentrac&gt;</a></span><span class="message">yeah, ae.c does depend on curses</span></div><div class="line" id="032224"><span class="nick" style="color:#6b8072"><a href="#032224" label="[03:22:24]">&lt;oriansj&gt;</a></span><span class="message">and TCC can certainly build quite a bit</span></div><div class="line" id="032341"><span class="nick" style="color:#6b8072"><a href="#032341" label="[03:23:41]">&lt;oriansj&gt;</a></span><span class="message">So honestly we only need good enough to inspect source code up to TCC max</span></div><div class="line" id="032347"><span class="nick" style="color:#2e2a4a"><a href="#032347" label="[03:23:47]">&lt;xentrac&gt;</a></span><span class="message">initscr, stdscr, addch, mvaddstr, clrtobot, move, refresh endwin</span></div><div class="line" id="032406"><span class="nick" style="color:#6b8072"><a href="#032406" label="[03:24:06]">&lt;oriansj&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage1/more.s">https://github.com/oriansj/stage0/blob/master/stage1/more.s</a>  is good enough for reading of code</span></div><div class="line" id="032421"><span class="nick" style="color:#2e2a4a"><a href="#032421" label="[03:24:21]">&lt;xentrac&gt;</a></span><span class="message">well, being able to inspect anything is good, and being able to inspect more things is better</span></div><div class="line" id="032423"><span class="nick" style="color:#2e2a4a"><a href="#032423" label="[03:24:23]">&lt;xentrac&gt;</a></span><span class="message">for reading code you really need ctags</span></div><div class="line" id="032514"><span class="nick" style="color:#6b8072"><a href="#032514" label="[03:25:14]">&lt;oriansj&gt;</a></span><span class="message">xentrac: ctags and vim will not work well at 500khz</span></div><div class="line" id="032532"><span class="nick" style="color:#6b8072"><a href="#032532" label="[03:25:32]">&lt;oriansj&gt;</a></span><span class="message">also this is still bare metal, so no operating system to run ctags or vim</span></div><div class="line" id="032550"><span class="nick" style="color:#2e2a4a"><a href="#032550" label="[03:25:50]">&lt;xentrac&gt;</a></span><span class="message">they'll be marginally usable.  they don't need an OS</span></div><div class="line" id="032631"><span class="nick" style="color:#2e2a4a"><a href="#032631" label="[03:26:31]">&lt;xentrac&gt;</a></span><span class="message">I mean Turbo Pascal ran acceptably fast without an OS on a 2MHz Z80, which is about 0.5 DMIPS, same as a 500kHz RISC-V</span></div><div class="line" id="032650"><span class="nick" style="color:#2e2a4a"><a href="#032650" label="[03:26:50]">&lt;xentrac&gt;</a></span><span class="message">the IDE</span></div><div class="line" id="032658"><span class="nick" style="color:#6b8072"><a href="#032658" label="[03:26:58]">&lt;oriansj&gt;</a></span><span class="message">in their current form, they absolutely do. given a sufficient large amount of changes, no it would be possible to make them run on bare metal and read/write the filesystem</span></div><div class="line" id="032704"><span class="nick" style="color:#2e2a4a"><a href="#032704" label="[03:27:04]">&lt;xentrac&gt;</a></span><span class="message">remember ctags dates from 01978</span></div><div class="line" id="032729"><span class="nick" style="color:#2e2a4a"><a href="#032729" label="[03:27:29]">&lt;xentrac&gt;</a></span><span class="message">the first version was a shell script that invoked ed</span></div><div class="line" id="032729"><span class="nick" style="color:#6b8072"><a href="#032729" label="[03:27:29]">&lt;oriansj&gt;</a></span><span class="message">xentrac: nope, don't use ctags personally</span></div><div class="line" id="032756"><span class="nick" style="color:#2e2a4a"><a href="#032756" label="[03:27:56]">&lt;xentrac&gt;</a></span><span class="message">do you mean you don't use anything that gives you the facility to jump to the definition of the function your cursor is on a call to?</span></div><div class="line" id="032807"><span class="nick" style="color:#2e2a4a"><a href="#032807" label="[03:28:07]">&lt;xentrac&gt;</a></span><span class="message">or that you do, but it's not called ctags?</span></div><div class="line" id="032830"><span class="nick" style="color:#6b8072"><a href="#032830" label="[03:28:30]">&lt;oriansj&gt;</a></span><span class="message">C-s works just fine</span></div><div class="line" id="032843"><span class="nick" style="color:#2e2a4a"><a href="#032843" label="[03:28:43]">&lt;xentrac&gt;</a></span><span class="message">yes, if it's in the same file</span></div><div class="line" id="032851"><span class="nick" style="color:#2e2a4a"><a href="#032851" label="[03:28:51]">&lt;xentrac&gt;</a></span><span class="message">and your machine is fast enough to not need an index</span></div><div class="line" id="032858"><span class="nick" style="color:#2e2a4a"><a href="#032858" label="[03:28:58]">&lt;xentrac&gt;</a></span><span class="message">I think it's somewhat dispensable for writing code, but not for understanding code written by somebody else</span></div><div class="line" id="032931"><span class="nick" style="color:#6b8072"><a href="#032931" label="[03:29:31]">&lt;oriansj&gt;</a></span><span class="message">I like to follow the flow to understand other people's code</span></div><div class="line" id="033002"><span class="nick" style="color:#2e2a4a"><a href="#033002" label="[03:30:02]">&lt;xentrac&gt;</a></span><span class="message">you mean, the control flow?  so what do you do when you reach a call to a function you're not familiar with?</span></div><div class="line" id="033010"><span class="nick" style="color:#6b8072"><a href="#033010" label="[03:30:10]">&lt;oriansj&gt;</a></span><span class="message">grep</span></div><div class="line" id="033027"><span class="nick" style="color:#2e2a4a"><a href="#033027" label="[03:30:27]">&lt;xentrac&gt;</a></span><span class="message">right :)</span></div><div class="line" id="033036"><span class="nick" style="color:#2e2a4a"><a href="#033036" label="[03:30:36]">&lt;xentrac&gt;</a></span><span class="message">ctags is like a precomputed grep</span></div><div class="line" id="033059"><span class="nick" style="color:#6b8072"><a href="#033059" label="[03:30:59]">&lt;oriansj&gt;</a></span><span class="message">and probably quite useful</span></div><div class="line" id="033123"><span class="nick" style="color:#2e2a4a"><a href="#033123" label="[03:31:23]">&lt;xentrac&gt;</a></span><span class="message">try it, etags $(find . -name '*.[ch]')</span></div><div class="line" id="033128"><span class="nick" style="color:#2e2a4a"><a href="#033128" label="[03:31:28]">&lt;xentrac&gt;</a></span><span class="message">then use M-. in Emacs</span></div><div class="line" id="033235"><span class="nick" style="color:#2e2a4a"><a href="#033235" label="[03:32:35]">&lt;xentrac&gt;</a></span><span class="message">most of the complexity of curses comes from the need to optimize updates over low-baud-rate terminal links.  repainting a 2-kilobyte terminal text buffer in RAM from scratch is fast enough that even at 0.3 DMIPS it's only slightly annoying, about 10-30 milliseconds</span></div><div class="line" id="033428"><span class="nick" style="color:#2e2a4a"><a href="#033428" label="[03:34:28]">&lt;xentrac&gt;</a></span><span class="message">doing it over a 2400-baud serial line, OTOH, takes 8000 milliseconds, which is about two orders of magnitude too high for the response to a keystroke</span></div><div class="line" id="033509"><span class="nick" style="color:#2e2a4a"><a href="#033509" label="[03:35:09]">&lt;xentrac&gt;</a></span><span class="message">the back button for tags in Emacs is M-*</span></div><div class="line" id="033602"><span class="nick" style="color:#2e2a4a"><a href="#033602" label="[03:36:02]">&lt;xentrac&gt;</a></span><span class="message">M-. to follow a link, M-* to go back.  vh works the same way, so does ctags (except in old vi you can only have one file open at a time, so you'd better save first)</span></div><div class="line" id="033605"><span class="nick" style="color:#6b8072"><a href="#033605" label="[03:36:05]">&lt;oriansj&gt;</a></span><span class="message">trial on M2-Planet: results ewwww</span></div><div class="line" id="033611"><span class="nick" style="color:#2e2a4a"><a href="#033611" label="[03:36:11]">&lt;xentrac&gt;</a></span><span class="message">haha, what happened?</span></div><div class="line" id="033626"><span class="nick" style="color:#6b8072"><a href="#033626" label="[03:36:26]">&lt;oriansj&gt;</a></span><span class="message">it seems to have confused tests with actual code</span></div><div class="line" id="033646"><span class="nick" style="color:#2e2a4a"><a href="#033646" label="[03:36:46]">&lt;xentrac&gt;</a></span><span class="message">oh, maybe you should rebuild the TAGS file excluding the tests directory</span></div><div class="line" id="033720"><span class="nick" style="color:#6b8072"><a href="#033720" label="[03:37:20]">&lt;oriansj&gt;</a></span><span class="message">I am quite certain if I take the time to learn the tool properly and use it properly it is lovely</span></div><div class="line" id="033730"><span class="nick" style="color:#2e2a4a"><a href="#033730" label="[03:37:30]">&lt;xentrac&gt;</a></span><span class="message">easiest way is to start typing `find *`, type C-x * to expand out the *, then delete the test directory from the list</span></div><div class="line" id="033806"><span class="nick" style="color:#2e2a4a"><a href="#033806" label="[03:38:06]">&lt;xentrac&gt;</a></span><span class="message">rather than find . -name t -type d -prune -o -name '*.[ch]'</span></div><div class="line" id="033846"><span class="nick" style="color:#6b8072"><a href="#033846" label="[03:38:46]">&lt;oriansj&gt;</a></span><span class="message">xentrac: like I said, if I take the time to learn and use it properly I am certain it is probably useful</span></div><div class="line" id="033920"><span class="nick" style="color:#6b8072"><a href="#033920" label="[03:39:20]">&lt;oriansj&gt;</a></span><span class="message">doesn't work at all in hex? or M? files though</span></div><div class="line" id="033934"><span class="nick" style="color:#2e2a4a"><a href="#033934" label="[03:39:34]">&lt;xentrac&gt;</a></span><span class="message">which is error-prone.  in fact I screwed it up: find . -name t -type d -prune -o -name '*.[ch]' -print</span></div><div class="line" id="033955"><span class="nick" style="color:#2e2a4a"><a href="#033955" label="[03:39:55]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's true!  if you write your own programming language ctags/etags won't work with it out of the box</span></div><div class="line" id="034010"><span class="nick" style="color:#6b8072"><a href="#034010" label="[03:40:10]">&lt;oriansj&gt;</a></span><span class="message">xentrac: perhaps a better idea is just use emacs to add to the etags as you hit files in a project</span></div><div class="line" id="034052"><span class="nick" style="color:#6b8072"><a href="#034052" label="[03:40:52]">&lt;oriansj&gt;</a></span><span class="message">also it would require a separate tag file for each test as well</span></div><div class="line" id="034057"><span class="nick" style="color:#2e2a4a"><a href="#034057" label="[03:40:57]">&lt;xentrac&gt;</a></span><span class="message">like, with imenu?</span></div><div class="line" id="034131"><span class="nick" style="color:#6b8072"><a href="#034131" label="[03:41:31]">&lt;oriansj&gt;</a></span><span class="message">well jumping out of the emacs flow is less than ideal</span></div><div class="line" id="034151"><span class="nick" style="color:#2e2a4a"><a href="#034151" label="[03:41:51]">&lt;xentrac&gt;</a></span><span class="message">right, normally I build the TAGS file once when I first start messing with a codebase</span></div><div class="line" id="034205"><span class="nick" style="color:#2e2a4a"><a href="#034205" label="[03:42:05]">&lt;xentrac&gt;</a></span><span class="message">thereafter M-. consults it and silently warps me to where I want to go</span></div><div class="line" id="034234"><span class="nick" style="color:#6b8072"><a href="#034234" label="[03:42:34]">&lt;oriansj&gt;</a></span><span class="message">fair and it certainly makes jumping around fast and easy</span></div><div class="line" id="034237"><span class="nick" style="color:#2e2a4a"><a href="#034237" label="[03:42:37]">&lt;xentrac&gt;</a></span><span class="message">I thought you meant something like &quot;use imenu's buffer-indexing code to figure out what definitions are in a file because imenu already has M3 support&quot;</span></div><div class="line" id="034332"><span class="nick" style="color:#6b8072"><a href="#034332" label="[03:43:32]">&lt;oriansj&gt;</a></span><span class="message">well M3 is just a standard gas assembler</span></div><div class="line" id="034341"><span class="nick" style="color:#2e2a4a"><a href="#034341" label="[03:43:41]">&lt;xentrac&gt;</a></span><span class="message">well, M1, then</span></div><div class="line" id="034415"><span class="nick" style="color:#2e2a4a"><a href="#034415" label="[03:44:15]">&lt;xentrac&gt;</a></span><span class="message">yeah, which is what you want when you're trying to audit a codebase: it's important to quickly be able to figure out what you can assume about the code that's being called from a callsite</span></div><div class="line" id="034503"><span class="nick" style="color:#2e2a4a"><a href="#034503" label="[03:45:03]">&lt;xentrac&gt;</a></span><span class="message">before ctags people would use xrefs generators for their printouts</span></div><div class="line" id="034531"><span class="nick" style="color:#2e2a4a"><a href="#034531" label="[03:45:31]">&lt;xentrac&gt;</a></span><span class="message">sometimes the compiler would automatically append xrefs by default to the listings it generated</span></div><div class="line" id="034710"><span class="nick" style="color:#6b8072"><a href="#034710" label="[03:47:10]">&lt;oriansj&gt;</a></span><span class="message">now an automatic xref generator for code might be nice to help me build notes when starting a new code base.</span></div><div class="line" id="034830"><span class="nick" style="color:#2e2a4a"><a href="#034830" label="[03:48:30]">&lt;xentrac&gt;</a></span><span class="message">that's what ctags is</span></div><div class="line" id="034846"><span class="nick" style="color:#2e2a4a"><a href="#034846" label="[03:48:46]">&lt;xentrac&gt;</a></span><span class="message">you can run ctags -x to get a more human-readable output format</span></div><div class="line" id="035052"><span class="nick" style="color:#6b8072"><a href="#035052" label="[03:50:52]">&lt;oriansj&gt;</a></span><span class="message">it truncates the input variables section (which would actually be useful)</span></div><div class="line" id="035243"><span class="nick" style="color:#2e2a4a"><a href="#035243" label="[03:52:43]">&lt;xentrac&gt;</a></span><span class="message">hmm, not for me; are you running Exuberant Ctags?</span></div><div class="line" id="035309"><span class="nick" style="color:#2e2a4a"><a href="#035309" label="[03:53:09]">&lt;xentrac&gt;</a></span><span class="message">or do you just mean that the text quoted from the declaration is cut off at the end of the line?</span></div><div class="line" id="035317"><span class="nick" style="color:#6b8072"><a href="#035317" label="[03:53:17]">&lt;oriansj&gt;</a></span><span class="message">ctags (GNU Emacs 27.2)</span></div><div class="line" id="035411"><span class="nick" style="color:#6b8072"><a href="#035411" label="[03:54:11]">&lt;oriansj&gt;</a></span><span class="message">it is cut off after the ( like: struct type* promote_type(</span></div><div class="line" id="035448"><span class="nick" style="color:#6b8072"><a href="#035448" label="[03:54:48]">&lt;oriansj&gt;</a></span><span class="message">even though the actual like of source code is: struct type* promote_type(struct type* a, struct type* b)</span></div><div class="line" id="035456"><span class="nick" style="color:#2e2a4a"><a href="#035456" label="[03:54:56]">&lt;xentrac&gt;</a></span><span class="message">yeah, Emacs ctags does that.  Exuberant Ctags doesn't, which has its pluses and minuses</span></div><div class="line" id="035539"><span class="nick" style="color:#2e2a4a"><a href="#035539" label="[03:55:39]">&lt;xentrac&gt;</a></span><span class="message">(but Exuberant Ctags is happy to generate Emacs TAGS files if invoked with -e or as the etags command)</span></div><div class="line" id="035556"><span class="nick" style="color:#6b8072"><a href="#035556" label="[03:55:56]">&lt;oriansj&gt;</a></span><span class="message">xentrac: is it in guix yet?</span></div><div class="line" id="035611"><span class="nick" style="color:#2e2a4a"><a href="#035611" label="[03:56:11]">&lt;xentrac&gt;</a></span><span class="message">probably?  I mean Vim ships wit hit</span></div><div class="line" id="035648"><span class="nick" style="color:#2e2a4a"><a href="#035648" label="[03:56:48]">&lt;xentrac&gt;</a></span><span class="message">or used to anyway</span></div><div class="line" id="035829"><span class="nick" style="color:#6b8072"><a href="#035829" label="[03:58:29]">&lt;oriansj&gt;</a></span><span class="message">I'm a vi (not vim, bare minimal vi) on server and emacs on local sort of guy.</span></div><div class="line" id="035846"><span class="nick" style="color:#2e2a4a"><a href="#035846" label="[03:58:46]">&lt;xentrac&gt;</a></span><span class="message">well, vi has shipped with ctags since 01978 ;)</span></div><div class="line" id="035934"><span class="nick" style="color:#2e2a4a"><a href="#035934" label="[03:59:34]">&lt;xentrac&gt;</a></span><span class="message">hmm, maybe not?  it's not on <a rel="nofollow" href="https://guix.gnu.org/packages/E/page/17/">https://guix.gnu.org/packages/E/page/17/</a>  or <a rel="nofollow" href="https://guix.gnu.org/packages/C/page/8/">https://guix.gnu.org/packages/C/page/8/</a> </span></div><div class="line" id="040018"><span class="nick" style="color:#2e2a4a"><a href="#040018" label="[04:00:18]">&lt;xentrac&gt;</a></span><span class="message">I think Roland McGrath added tags support to Emacs in 01985</span></div><div class="line" id="040122"><span class="nick" style="color:#2e2a4a"><a href="#040122" label="[04:01:22]">&lt;xentrac&gt;</a></span><span class="message">Â§32.3 of the Emacs user manual is about tag tables</span></div><div class="line" id="040143"><span class="nick" style="color:#2e2a4a"><a href="#040143" label="[04:01:43]">&lt;xentrac&gt;</a></span><span class="message">part of Â§32 on &quot;maintaining large programs&quot;, which nowadays are just called &quot;programs&quot; ;)</span></div><div class="line" id="040211"><span class="nick" style="color:#2e2a4a"><a href="#040211" label="[04:02:11]">&lt;xentrac&gt;</a></span><span class="message">I think diff is also an essential tool for inspecting software version histories, btw</span></div><div class="line" id="040310"><span class="nick" style="color:#6b8072"><a href="#040310" label="[04:03:10]">&lt;oriansj&gt;</a></span><span class="message">umm no. vi doesn't come with ctags</span></div><div class="line" id="040330"><span class="nick" style="color:#6b8072"><a href="#040330" label="[04:03:30]">&lt;oriansj&gt;</a></span><span class="message">it has view and ex but no ctags</span></div><div class="line" id="040353"><span class="nick" style="color:#6b8072"><a href="#040353" label="[04:03:53]">&lt;oriansj&gt;</a></span><span class="message">(and a man page)</span></div><div class="line" id="040422"><span class="nick" style="color:#6b8072"><a href="#040422" label="[04:04:22]">&lt;oriansj&gt;</a></span><span class="message">you can verify yourself: <a rel="nofollow" href="https://packages.debian.org/buster/amd64/nvi/download">https://packages.debian.org/buster/amd64/nvi/download</a> </span></div><div class="line" id="040612"><span class="nick" style="color:#2e2a4a"><a href="#040612" label="[04:06:12]">&lt;xentrac&gt;</a></span><span class="message">presumably in Debian it's been split into a separate package (several actually)</span></div><div class="line" id="040622"><span class="nick" style="color:#2e2a4a"><a href="#040622" label="[04:06:22]">&lt;xentrac&gt;</a></span><span class="message">but that was not the case in 01978</span></div><div class="line" id="040937"><span class="nick" style="color:#6b8072"><a href="#040937" label="[04:09:37]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I wasn't even alive in 01978 or for even years after it</span></div><div class="line" id="041418"><span class="nick" style="color:#6b8072"><a href="#041418" label="[04:14:18]">&lt;oriansj&gt;</a></span><span class="message">So I am using tools as they are available now. ctags never was part of the programming experience for me. I can see its attraction and ways that it could make a certain style of development much more productive.</span></div><div class="line" id="041659"><span class="nick" style="color:#2e2a4a"><a href="#041659" label="[04:16:59]">&lt;xentrac&gt;</a></span><span class="message">well, both exuberant ctags and Emacs ctags/etags are in Debian</span></div><div class="line" id="041729"><span class="nick" style="color:#6b8072"><a href="#041729" label="[04:17:29]">&lt;oriansj&gt;</a></span><span class="message">so thank you xentrac for introducing me to a new tool to add to my toolkit</span></div><div class="line" id="041738"><span class="nick" style="color:#2e2a4a"><a href="#041738" label="[04:17:38]">&lt;xentrac&gt;</a></span><span class="message">sure :)</span></div><div class="line" id="041751"><span class="nick" style="color:#6b8072"><a href="#041751" label="[04:17:51]">&lt;oriansj&gt;</a></span><span class="message">It certainly will improve my Java development in Emacs</span></div><div class="line" id="041807"><span class="nick" style="color:#2e2a4a"><a href="#041807" label="[04:18:07]">&lt;xentrac&gt;</a></span><span class="message">it's not that great at Java because so many methods have the same name</span></div><div class="line" id="041820"><span class="nick" style="color:#2e2a4a"><a href="#041820" label="[04:18:20]">&lt;xentrac&gt;</a></span><span class="message">I think Emacs JDE has a smarter version</span></div><div class="line" id="041933"><span class="nick" style="color:#2e2a4a"><a href="#041933" label="[04:19:33]">&lt;xentrac&gt;</a></span><span class="message">it comes with a program called jtags</span></div><div class="line" id="041940"><span class="nick" style="color:#2e2a4a"><a href="#041940" label="[04:19:40]">&lt;xentrac&gt;</a></span><span class="message">but for Java I just use Eclipse ;)</span></div><div class="line" id="042025"><span class="nick" style="color:#6b8072"><a href="#042025" label="[04:20:25]">&lt;oriansj&gt;</a></span><span class="message">but it is soooo slow</span></div><div class="line" id="042140"><span class="nick" style="color:#2e2a4a"><a href="#042140" label="[04:21:40]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="042200"><span class="nick" style="color:#2e2a4a"><a href="#042200" label="[04:22:00]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ignatyev-dev.blogspot.com/2012/10/java-development-with-emacs.html">https://ignatyev-dev.blogspot.com/2012/10/java-development-with-emacs.html</a>  recommends using GNU GLOBAL to generate tags files for Java</span></div><div class="line" id="042639"><span class="nick" style="color:#2e2a4a"><a href="#042639" label="[04:26:39]">&lt;xentrac&gt;</a></span><span class="message">which is in guix: <a rel="nofollow" href="https://guix.gnu.org/en/packages/global-6.6.7/">https://guix.gnu.org/en/packages/global-6.6.7/</a> </span></div><div class="line" id="042726"><span class="nick" style="color:#6b8072"><a href="#042726" label="[04:27:26]">&lt;oriansj&gt;</a></span><span class="message">well most emacs tools are in guix because guix is a very emacs heavy community</span></div><div class="line" id="042734"><span class="nick" style="color:#2e2a4a"><a href="#042734" label="[04:27:34]">&lt;xentrac&gt;</a></span><span class="message">it's not really an emacs tool</span></div><div class="line" id="042753"><span class="nick" style="color:#2e2a4a"><a href="#042753" label="[04:27:53]">&lt;xentrac&gt;</a></span><span class="message">I mean it does work with Emacs but it kind of works with anything</span></div><div class="line" id="043053"><span class="nick" style="color:#6b8072"><a href="#043053" label="[04:30:53]">&lt;oriansj&gt;</a></span><span class="message">xentrac: fair</span></div><div class="line" id="043158"><span class="nick" style="color:#6b8072"><a href="#043158" label="[04:31:58]">&lt;oriansj&gt;</a></span><span class="message">you also have to remember there is this weird generation gap in programming where once people started teaching with IDEs a great many useful tools and ways of working (like vim and emacs) were entirely dropped on the floor.</span></div><div class="line" id="043238"><span class="nick" style="color:#2e2a4a"><a href="#043238" label="[04:32:38]">&lt;xentrac&gt;</a></span><span class="message">I think of ctags as being the major feature of IDEs, really</span></div><div class="line" id="043251"><span class="nick" style="color:#2e2a4a"><a href="#043251" label="[04:32:51]">&lt;xentrac&gt;</a></span><span class="message">although jumping to compile errors (C-x `) is nice too</span></div><div class="line" id="044641"><span class="nick" style="color:#2e2a4a"><a href="#044641" label="[04:46:41]">&lt;xentrac&gt;</a></span><span class="message">haha, I just found out that the first Berkeley RISC also ran at 500kHz: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Berkeley_RISC#RISC_I">https://en.wikipedia.org/wiki/Berkeley_RISC#RISC_I</a> </span></div><div class="line" id="044736"><span class="nick" style="color:#6b8072"><a href="#044736" label="[04:47:36]">&lt;oriansj&gt;</a></span><span class="message">well one doesn't need much power to get very far when one uses simple tools</span></div><div class="line" id="044815"><span class="nick" style="color:#2e2a4a"><a href="#044815" label="[04:48:15]">&lt;xentrac&gt;</a></span><span class="message">oh actually maybe it was 1MHz, because it was a 2-stage pipeline</span></div><div class="line" id="045045"><span class="nick" style="color:#8dd3c7"><a href="#045045" label="[04:50:45]">&lt;theruran&gt;</a></span><span class="message">I want to write a bootstrapping compiler for Ada in Scheme. where should I start? &quot;Hello, World&quot;?</span></div><div class="line" id="045120"><span class="nick" style="color:#8dd3c7"><a href="#045120" label="[04:51:20]">&lt;theruran&gt;</a></span><span class="message">thinking of using Guile's PEG parser tools</span></div><div class="line" id="045249"><span class="nick" style="color:#8dd3c7"><a href="#045249" label="[04:52:49]">&lt;theruran&gt;</a></span><span class="message">just wondering if you all had any words of advice for someone who's never written a compiler before</span></div><div class="line" id="045446"><span class="nick" style="color:#6b8072"><a href="#045446" label="[04:54:46]">&lt;oriansj&gt;</a></span><span class="message">theruran: the first word of advice is no programming language is magic.</span></div><div class="line" id="045544"><span class="nick" style="color:#6b8072"><a href="#045544" label="[04:55:44]">&lt;oriansj&gt;</a></span><span class="message">second word of advice is try return 42 first</span></div><div class="line" id="045632"><span class="nick" style="color:#2e2a4a"><a href="#045632" label="[04:56:32]">&lt;xentrac&gt;</a></span><span class="message">hmm, does Ada have a built-in way to return exit codes?</span></div><div class="line" id="045637"><span class="nick" style="color:#6b8072"><a href="#045637" label="[04:56:37]">&lt;oriansj&gt;</a></span><span class="message">have tests for every primitive you support and slowly grow that list</span></div><div class="line" id="045723"><span class="nick" style="color:#2e2a4a"><a href="#045723" label="[04:57:23]">&lt;xentrac&gt;</a></span><span class="message">PEGs will make your life a lot easier than things like lex and yacc, which in turn are a little easier than writing a parser by hand</span></div><div class="line" id="045751"><span class="nick" style="color:#2e2a4a"><a href="#045751" label="[04:57:51]">&lt;xentrac&gt;</a></span><span class="message">not familiar with Guile's tools in particular</span></div><div class="line" id="045821"><span class="nick" style="color:#2e2a4a"><a href="#045821" label="[04:58:21]">&lt;xentrac&gt;</a></span><span class="message">oh, maybe start with the backend first</span></div><div class="line" id="045841"><span class="nick" style="color:#2e2a4a"><a href="#045841" label="[04:58:41]">&lt;xentrac&gt;</a></span><span class="message">that way you have a compiler from the beginning, instead of a parser that doesn't compile</span></div><div class="line" id="050140"><span class="nick" style="color:#2e2a4a"><a href="#050140" label="[05:01:40]">&lt;xentrac&gt;</a></span><span class="message">though oriansj may be a more trustworthy source of advice on this count</span></div><div class="line" id="051958"><span class="nick" style="color:#6b8072"><a href="#051958" label="[05:19:58]">&lt;oriansj&gt;</a></span><span class="message">I'd put janneke as the expert on writing compilers in scheme.</span></div><div class="line" id="052048"><span class="nick" style="color:#6b8072"><a href="#052048" label="[05:20:48]">&lt;oriansj&gt;</a></span><span class="message">but output assembly instead of trying to directly write bytes unless you like spending time figuring out that you made a mistake in outputing bytes again.</span></div><div class="line" id="052401"><span class="nick" style="color:#8dd3c7"><a href="#052401" label="[05:24:01]">&lt;theruran&gt;</a></span><span class="message">Mes outputs M1 assembly?</span></div><div class="line" id="052405"><span class="nick" style="color:#6b8072"><a href="#052405" label="[05:24:05]">&lt;oriansj&gt;</a></span><span class="message">non-optimized output is just a simple state machine, optimized output however is a great deal more complex</span></div><div class="line" id="052443"><span class="nick" style="color:#6b8072"><a href="#052443" label="[05:24:43]">&lt;oriansj&gt;</a></span><span class="message">theruran: correct MesCC produces a M1 assembly file then calls M1, bloodelf and hex2 to convert into a running binary</span></div><div class="line" id="052605"><span class="nick" style="color:#8dd3c7"><a href="#052605" label="[05:26:05]">&lt;theruran&gt;</a></span><span class="message">isn't outputting M1 better for our purposes than something else?</span></div><div class="line" id="052621"><span class="nick" style="color:#8dd3c7"><a href="#052621" label="[05:26:21]">&lt;theruran&gt;</a></span><span class="message">Guile exposes its compiler infrastructure, so you could output to that IR</span></div><div class="line" id="052742"><span class="nick" style="color:#6b8072"><a href="#052742" label="[05:27:42]">&lt;oriansj&gt;</a></span><span class="message">theruran: I strongly suggest standard GAS assembly output rather than M1 for multiple reasons.</span></div><div class="line" id="052802"><span class="nick" style="color:#6b8072"><a href="#052802" label="[05:28:02]">&lt;oriansj&gt;</a></span><span class="message">most of which about saving you considerable effort and time.</span></div><div class="line" id="052955"><span class="nick" style="color:#8dd3c7"><a href="#052955" label="[05:29:55]">&lt;theruran&gt;</a></span><span class="message">A.15 Package Ada.Command_Line</span></div><div class="line" id="052958"><span class="nick" style="color:#8dd3c7"><a href="#052958" label="[05:29:58]">&lt;theruran&gt;</a></span><span class="message">procedure Set_Exit_Status (Code : in Exit_Status);</span></div><div class="line" id="053021"><span class="nick" style="color:#8dd3c7"><a href="#053021" label="[05:30:21]">&lt;theruran&gt;</a></span><span class="message">oriansj, got it. thanks for the advice!</span></div><div class="line" id="053051"><span class="nick" style="color:#8dd3c7"><a href="#053051" label="[05:30:51]">&lt;theruran&gt;</a></span><span class="message">what does it mean to start with the backend first? the emit_* functions for each GAS assembly instruction?</span></div><div class="line" id="053101"><span class="nick" style="color:#8dd3c7"><a href="#053101" label="[05:31:01]">&lt;theruran&gt;</a></span><span class="message">or the most common ones, anyway</span></div><div class="line" id="053143"><span class="nick" style="color:#6b8072"><a href="#053143" label="[05:31:43]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="053247"><span class="nick" style="color:#8dd3c7"><a href="#053247" label="[05:32:47]">&lt;theruran&gt;</a></span><span class="message">Ada types?</span></div><div class="line" id="053303"><span class="nick" style="color:#6b8072"><a href="#053303" label="[05:33:03]">&lt;oriansj&gt;</a></span><span class="message">start with just int</span></div><div class="line" id="053347"><span class="nick" style="color:#6b8072"><a href="#053347" label="[05:33:47]">&lt;oriansj&gt;</a></span><span class="message">compile an Ada function that just returns 42 to whatever called it</span></div><div class="line" id="053417"><span class="nick" style="color:#8dd3c7"><a href="#053417" label="[05:34:17]">&lt;theruran&gt;</a></span><span class="message">starting with a handmade AST?</span></div><div class="line" id="053445"><span class="nick" style="color:#6b8072"><a href="#053445" label="[05:34:45]">&lt;oriansj&gt;</a></span><span class="message">whatever seems like more fun.</span></div><div class="line" id="053501"><span class="nick" style="color:#8dd3c7"><a href="#053501" label="[05:35:01]">&lt;theruran&gt;</a></span><span class="message">good advice</span></div><div class="line" id="053543"><span class="nick" style="color:#6b8072"><a href="#053543" label="[05:35:43]">&lt;oriansj&gt;</a></span><span class="message">if you want simple, you can always roll your own: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c">https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c</a> </span></div><div class="line" id="053604"><span class="nick" style="color:#6b8072"><a href="#053604" label="[05:36:04]">&lt;oriansj&gt;</a></span><span class="message">which is just a list of tokens made from the source file</span></div><div class="line" id="053659"><span class="nick" style="color:#6b8072"><a href="#053659" label="[05:36:59]">&lt;oriansj&gt;</a></span><span class="message">then slowly grow your state machine: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/High_level_prototypes/cc_x86/cc_core.c">https://github.com/oriansj/stage0/blob/master/stage2/High_level_prototypes/cc_x86/cc_core.c</a> </span></div><div class="line" id="053742"><span class="nick" style="color:#6b8072"><a href="#053742" label="[05:37:42]">&lt;oriansj&gt;</a></span><span class="message">or if you want do things the proper way with a proper grammer</span></div><div class="line" id="053751"><span class="nick" style="color:#6b8072"><a href="#053751" label="[05:37:51]">&lt;oriansj&gt;</a></span><span class="message">and a proper AST</span></div><div class="line" id="053818"><span class="nick" style="color:#6b8072"><a href="#053818" label="[05:38:18]">&lt;oriansj&gt;</a></span><span class="message">Just do what seems like something that better matches your development style</span></div><div class="line" id="054414"><span class="nick" style="color:#8dd3c7"><a href="#054414" label="[05:44:14]">&lt;theruran&gt;</a></span><span class="message">hoping to find programming fun again</span></div><div class="line" id="054629"><span class="nick" style="color:#8dd3c7"><a href="#054629" label="[05:46:29]">&lt;theruran&gt;</a></span><span class="message">what about studying GNAT's AST? would be nice to see some diagrams of that</span></div><div class="line" id="054911"><span class="nick" style="color:#6b8072"><a href="#054911" label="[05:49:11]">&lt;oriansj&gt;</a></span><span class="message">theruran: There are not more answers I can give you because compilers grow to reflect the people working on them.</span></div><div class="line" id="054942"><span class="nick" style="color:#8dd3c7"><a href="#054942" label="[05:49:42]">&lt;theruran&gt;</a></span><span class="message">:)</span></div><div class="line" id="055033"><span class="nick" style="color:#8dd3c7"><a href="#055033" label="[05:50:33]">&lt;theruran&gt;</a></span><span class="message">I found this anyway: <a rel="nofollow" href="https://en.m.wikibooks.org/wiki/X86_Assembly/GAS_Syntax">https://en.m.wikibooks.org/wiki/X86_Assembly/GAS_Syntax</a> </span></div><div class="line" id="055443"><span class="nick" style="color:#2e2a4a"><a href="#055443" label="[05:54:43]">&lt;xentrac&gt;</a></span><span class="message">I think Intel syntax is also reasonable, maybe slightly less annoying than gas syntax.  and gas supports it</span></div><div class="line" id="055544"><span class="nick" style="color:#2e2a4a"><a href="#055544" label="[05:55:44]">&lt;xentrac&gt;</a></span><span class="message">Guile's IR sounds like it might be an interesting target!  can you compile it to a standalone binary though?</span></div><div class="line" id="055634"><span class="nick" style="color:#2e2a4a"><a href="#055634" label="[05:56:34]">&lt;xentrac&gt;</a></span><span class="message">by &quot;start with the backend first&quot; I meant &quot;write some code that outputs a program in machine language or assembly before writing a parser&quot;</span></div><div class="line" id="055652"><span class="nick" style="color:#2e2a4a"><a href="#055652" label="[05:56:52]">&lt;xentrac&gt;</a></span><span class="message">I mean in Guile you can type in an abstract syntax tree as an S-expression if you want</span></div><div class="line" id="055711"><span class="nick" style="color:#2e2a4a"><a href="#055711" label="[05:57:11]">&lt;xentrac&gt;</a></span><span class="message">but &quot;whatever seems like more fun&quot; may be better advice :)</span></div><div class="line" id="060301"><span class="nick" style="color:#8dd3c7"><a href="#060301" label="[06:03:01]">&lt;theruran&gt;</a></span><span class="message">Guile's CPS language compiles to the VM bytecode</span></div><div class="line" id="060329"><span class="nick" style="color:#8dd3c7"><a href="#060329" label="[06:03:29]">&lt;theruran&gt;</a></span><span class="message">I think the Guile 3's JIT compiles to native code using Lightening</span></div><div class="line" id="060336"><span class="nick" style="color:#8dd3c7"><a href="#060336" label="[06:03:36]">&lt;theruran&gt;</a></span><span class="message">bytecode to native code</span></div><div class="line" id="061757"><span class="nick" style="color:#2e2a4a"><a href="#061757" label="[06:17:57]">&lt;xentrac&gt;</a></span><span class="message">awesome.  the VM bytecode might be a lot easier to generate than assembly code too, though I haven't looked at it</span></div><div class="line" id="062556"><span class="nick" style="color:#8dd3c7"><a href="#062556" label="[06:25:56]">&lt;theruran&gt;</a></span><span class="message">here's what &quot;return 42&quot; looks like using GNAT</span></div><div class="line" id="062605"><span class="nick" style="color:#8dd3c7"><a href="#062605" label="[06:26:05]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.irccloud.com/pastebin/Tp3YjShz/">https://www.irccloud.com/pastebin/Tp3YjShz/</a> </span></div><div class="line" id="062649"><span class="nick" style="color:#8dd3c7"><a href="#062649" label="[06:26:49]">&lt;theruran&gt;</a></span><span class="message">using -O2 -S -c. not sure if there are other flags I should use</span></div><div class="line" id="063422"><span class="nick" style="color:#8dd3c7"><a href="#063422" label="[06:34:22]">&lt;theruran&gt;</a></span><span class="message">I see. it JMPs to the standard Ada library instead of RETs</span></div><div class="line" id="063435"><span class="nick" style="color:#8dd3c7"><a href="#063435" label="[06:34:35]">&lt;theruran&gt;</a></span><span class="message">in Ada, you don't need to call the main function &quot;main&quot;</span></div><div class="line" id="064723"><span class="nick" style="color:#6b8072"><a href="#064723" label="[06:47:23]">&lt;oriansj&gt;</a></span><span class="message">theruran: neither do you in any real compiled language if you are willing to write a little assembly</span></div><div class="line" id="064800"><span class="nick" style="color:#6b8072"><a href="#064800" label="[06:48:00]">&lt;oriansj&gt;</a></span><span class="message">but yes loading a register with 42 and doing a syscall for exit is probably the correct way to do it</span></div><div class="line" id="071722"><span class="nick" style="color:#8dd3c7"><a href="#071722" label="[07:17:22]">&lt;theruran&gt;</a></span><span class="message">the GNAT manual is pretty good!</span></div><div class="line" id="083732"><span class="nick" style="color:#8dd3c7"><a href="#083732" label="[08:37:32]">&lt;theruran&gt;</a></span><span class="message">xentrac: AOT compilation to native code emission is not yet implemented in Guile's compiler</span></div><div class="line" id="083734"><span class="nick" style="color:#8dd3c7"><a href="#083734" label="[08:37:34]">&lt;theruran&gt;</a></span><span class="message">The next step is probably to add ahead-of-time native code emission to the back-end of the compiler written in Scheme, to take advantage of the opportunity to do global register allocation and instruction selection. Once this is working, it can allow Guile to experiment with speculative optimizations in Scheme as well. See Extending the Compiler, for more on future directions.</span></div><div class="line" id="083806"><span class="nick" style="color:#8dd3c7"><a href="#083806" label="[08:38:06]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.gnu.org/software/guile/manual/html_node/Just_002dIn_002dTime-Native-Code.html#Just_002dIn_002dTime-Native-Code">https://www.gnu.org/software/guile/manual/html_node/Just_002dIn_002dTime-Native-Code.html#Just_002dIn_002dTime-Native-Code</a> </span></div><div class="line" id="093456"><span class="nick" style="color:#2e2a4a"><a href="#093456" label="[09:34:56]">&lt;xentrac&gt;</a></span><span class="message">so if you go that route you probably don't want to do a syscall for exit; you probably want to return 42 to the Scheme interpreter that your compiled Ada code is being called from</span></div><div class="line" id="110906"><span class="nick" style="color:#80b1d3"><a href="#110906" label="[11:09:06]">&lt;stikonas&gt;</a></span><span class="message">oriansj: your x86 change gives me significantly better improvements</span></div><div class="line" id="110913"><span class="nick" style="color:#80b1d3"><a href="#110913" label="[11:09:13]">&lt;stikonas&gt;</a></span><span class="message">it's way more than 16%</span></div><div class="line" id="111015"><span class="nick" style="color:#80b1d3"><a href="#111015" label="[11:10:15]">&lt;stikonas&gt;</a></span><span class="message">building M0_x86.hex2 goes from  &quot;real    0m9,548s&quot; to &quot;real    0m1,853s&quot;</span></div><div class="line" id="111030"><span class="nick" style="color:#80b1d3"><a href="#111030" label="[11:10:30]">&lt;stikonas&gt;</a></span><span class="message">basically 4 times faster</span></div><div class="line" id="111111"><span class="nick" style="color:#80b1d3"><a href="#111111" label="[11:11:11]">&lt;stikonas&gt;</a></span><span class="message">maybe you started hitting some other bottleneck (sdcard?)</span></div><div class="line" id="111437"><span class="nick" style="color:#80b1d3"><a href="#111437" label="[11:14:37]">&lt;stikonas&gt;</a></span><span class="message">Risc-V gains are probably better because I (from the very beginning) kept file descriptors in registers rather than memory (both input/output file)</span></div><div class="line" id="111456"><span class="nick" style="color:#80b1d3"><a href="#111456" label="[11:14:56]">&lt;stikonas&gt;</a></span><span class="message">and also other things (like Flag)</span></div><div class="line" id="111537"><span class="nick" style="color:#80b1d3"><a href="#111537" label="[11:15:37]">&lt;stikonas&gt;</a></span><span class="message">only scratch (&amp;table) was kept in memory in risc-v</span></div><div class="line" id="111605"><span class="nick" style="color:#80b1d3"><a href="#111605" label="[11:16:05]">&lt;stikonas&gt;</a></span><span class="message">which I could easily do because risc-v has loads of registers</span></div><div class="line" id="111613"><span class="nick" style="color:#80b1d3"><a href="#111613" label="[11:16:13]">&lt;stikonas&gt;</a></span><span class="message">I guess it's not so easy on x86</span></div><div class="line" id="145513"><span class="nick" style="color:#234e69"><a href="#145513" label="[14:55:13]">&lt;fedorafan&gt;</a></span><span class="message">yo</span></div><div class="line" id="155950"><span class="nick" style="color:#6b8072"><a href="#155950" label="[15:59:50]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am glad you got a big benefit for qemu for x86 and yes the SDcard might be the new bottleneck but I'll have to do some testing with a RAMdisk to verify that</span></div><div class="line" id="160000"><span class="nick" style="color:#6b8072"><a href="#160000" label="[16:00:00]">&lt;oriansj&gt;</a></span><span class="message">fedorafan: greetings</span></div><div class="line" id="160203"><span class="nick" style="color:#234e69"><a href="#160203" label="[16:02:03]">&lt;fedorafan&gt;</a></span><span class="message">what is this bootstrak i often heard of</span></div><div class="line" id="160213"><span class="nick" style="color:#6c3d55"><a href="#160213" label="[16:02:13]">&lt;opal&gt;</a></span><span class="message">a typo of bootstrap</span></div><div class="line" id="160229"><span class="nick" style="color:#234e69"><a href="#160229" label="[16:02:29]">&lt;fedorafan&gt;</a></span><span class="message">and what is that language?</span></div><div class="line" id="160234"><span class="nick" style="color:#234e69"><a href="#160234" label="[16:02:34]">&lt;fedorafan&gt;</a></span><span class="message">framework</span></div><div class="line" id="160305"><span class="nick" style="color:#6c3d55"><a href="#160305" label="[16:03:05]">&lt;opal&gt;</a></span><span class="message">it's a project not a framework</span></div><div class="line" id="160308"><span class="nick" style="color:#6c3d55"><a href="#160308" label="[16:03:08]">&lt;opal&gt;</a></span><span class="message">read the site in /topic</span></div><div class="line" id="160321"><span class="nick" style="color:#234e69"><a href="#160321" label="[16:03:21]">&lt;fedorafan&gt;</a></span><span class="message">im here to ask not to google</span></div><div class="line" id="160330"><span class="nick" style="color:#6b8072"><a href="#160330" label="[16:03:30]">&lt;oriansj&gt;</a></span><span class="message">fedorafan: this is about software bootstrapping not the javascript framework called</span></div><div class="line" id="160334"><span class="nick" style="color:#6c3d55"><a href="#160334" label="[16:03:34]">&lt;opal&gt;</a></span><span class="message">everyone in here will tell you to read the topic</span></div><div class="line" id="160339"><span class="nick" style="color:#234e69"><a href="#160339" label="[16:03:39]">&lt;fedorafan&gt;</a></span><span class="message">ah its js framework thanks</span></div><div class="line" id="160359"><span class="nick" style="color:#6c3d55"><a href="#160359" label="[16:03:59]">&lt;opal&gt;</a></span><span class="message">there is no &quot;googling&quot; involved in the topic</span></div><div class="line" id="160404"><span class="nick" style="color:#234e69"><a href="#160404" label="[16:04:04]">&lt;fedorafan&gt;</a></span><span class="message">yeah if im further interested i will read the topic</span></div><div class="line" id="160406"><span class="nick" style="color:#234e69"><a href="#160406" label="[16:04:06]">&lt;fedorafan&gt;</a></span><span class="message">of course</span></div><div class="line" id="160407"><span class="nick" style="color:#6b8072"><a href="#160407" label="[16:04:07]">&lt;oriansj&gt;</a></span><span class="message">fedorafan: waste not time of real bootstrappers</span></div><div class="line" id="160415"><span class="nick" style="color:#234e69"><a href="#160415" label="[16:04:15]">&lt;fedorafan&gt;</a></span><span class="message">i ignore you</span></div><div class="line" id="160420"><span class="nick" style="color:#234e69"><a href="#160420" label="[16:04:20]">&lt;fedorafan&gt;</a></span><span class="message">fucker</span></div><div class="line" id="160449"><span class="nick" style="color:#6c3d55"><a href="#160449" label="[16:04:49]">&lt;opal&gt;</a></span><span class="message">what the fuck</span></div><div class="line" id="160553"><span class="nick" style="color:#6c3d55"><a href="#160553" label="[16:05:53]">&lt;opal&gt;</a></span><span class="message">im here to ask the same question everyone else asks, not to check the topic</span></div><div class="line" id="160614"><span class="nick" style="color:#6c3d55"><a href="#160614" label="[16:06:14]">&lt;opal&gt;</a></span><span class="message">not to check the public logs, because evidently this channel has those</span></div><div class="line" id="160621"><span class="nick" style="color:#6c3d55"><a href="#160621" label="[16:06:21]">&lt;opal&gt;</a></span><span class="message">just spoonfeed me</span></div><div class="line" id="160715"><span class="nick" style="color:#6b8072"><a href="#160715" label="[16:07:15]">&lt;oriansj&gt;</a></span><span class="message">it is very stupid to insult one with ops</span></div><div class="line" id="160947"><span class="nick" style="color:#6c3d55"><a href="#160947" label="[16:09:47]">&lt;opal&gt;</a></span><span class="message">sounded like they were more pissed at me</span></div><div class="line" id="161052"><span class="nick" style="color:#6b8072"><a href="#161052" label="[16:10:52]">&lt;oriansj&gt;</a></span><span class="message">doesn't matter who they said it to. That behavior is entirely unacceptable</span></div><div class="line" id="161635"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="162315"><span class="nick" style="color:#6b8072"><a href="#162315" label="[16:23:15]">&lt;oriansj&gt;</a></span><span class="message">everyone here is a person contributing to solving a problem that matters to all of us and thus deserves basic consideration and respect.</span></div><div class="line" id="170908"><span class="nick">***</span><span class="message notice">oriansj sets mode: +b fedorafan!*@*</span></div><div class="line" id="171413"><span class="nick" style="color:#6b8072"><a href="#171413" label="[17:14:13]">&lt;oriansj&gt;</a></span><span class="message">now we ignore them *FOREVER*</span></div><div class="line" id="171431"><span class="nick" style="color:#6b8072"><a href="#171431" label="[17:14:31]">&lt;oriansj&gt;</a></span><span class="message">or until they grow up, whichever comes first</span></div><div class="line" id="173924"><span class="nick" style="color:#80b1d3"><a href="#173924" label="[17:39:24]">&lt;stikonas&gt;</a></span><span class="message">argh, my riscv64 M0 has a small issue</span></div><div class="line" id="173927"><span class="nick" style="color:#80b1d3"><a href="#173927" label="[17:39:27]">&lt;stikonas&gt;</a></span><span class="message">strange...</span></div><div class="line" id="173946"><span class="nick" style="color:#80b1d3"><a href="#173946" label="[17:39:46]">&lt;stikonas&gt;</a></span><span class="message">fails to hexify strings with numbers</span></div><div class="line" id="173953"><span class="nick" style="color:#80b1d3"><a href="#173953" label="[17:39:53]">&lt;stikonas&gt;</a></span><span class="message">shouldn't be hard to fix...</span></div><div class="line" id="174356"><span class="nick" style="color:#6b8072"><a href="#174356" label="[17:43:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: are you talking about raw string support in M0?</span></div><div class="line" id="174525"><span class="nick" style="color:#d9d9d9"><a href="#174525" label="[17:45:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes</span></div><div class="line" id="174607"><span class="nick" style="color:#d9d9d9"><a href="#174607" label="[17:46:07]">&lt;stikonas[m]&gt;</a></span><span class="message">It bailed out on alphas string in cc_*</span></div><div class="line" id="174645"><span class="nick" style="color:#6b8072"><a href="#174645" label="[17:46:45]">&lt;oriansj&gt;</a></span><span class="message">well it shouldn't care about anything but if it is a close &quot; or just another unpack</span></div><div class="line" id="174736"><span class="nick" style="color:#6b8072"><a href="#174736" label="[17:47:36]">&lt;oriansj&gt;</a></span><span class="message">or if you null terminated, zero</span></div><div class="line" id="182803"><span class="nick" style="color:#6b8072"><a href="#182803" label="[18:28:03]">&lt;oriansj&gt;</a></span><span class="message">RS1_A2 RS2_A0 @24 SD ??</span></div><div class="line" id="183045"><span class="nick" style="color:#6b8072"><a href="#183045" label="[18:30:45]">&lt;oriansj&gt;</a></span><span class="message">oh yeah risc-v doesn't have actual proper stack ops</span></div><div class="line" id="183708"><span class="nick">***</span><span class="message notice">oriansj sets mode: +q fedorafan!*@*</span></div><div class="line" id="183827"><span class="nick">***</span><span class="message notice">oriansj sets mode: -b fedorafan!*@*</span></div><div class="line" id="184106"><span class="nick" style="color:#80b1d3"><a href="#184106" label="[18:41:06]">&lt;stikonas&gt;</a></span><span class="message">oriansj: after some debugging I think processing strings is fine</span></div><div class="line" id="184112"><span class="nick" style="color:#80b1d3"><a href="#184112" label="[18:41:12]">&lt;stikonas&gt;</a></span><span class="message">the crash is later in Eval Immediates</span></div><div class="line" id="184206"><span class="nick" style="color:#80b1d3"><a href="#184206" label="[18:42:06]">&lt;stikonas&gt;</a></span><span class="message">it's actually not a crash but I'm hitting Fail branch in express_number function</span></div><div class="line" id="184307"><span class="nick" style="color:#80b1d3"><a href="#184307" label="[18:43:07]">&lt;stikonas&gt;</a></span><span class="message">so the problem is more or less clear</span></div><div class="line" id="184326"><span class="nick" style="color:#80b1d3"><a href="#184326" label="[18:43:26]">&lt;stikonas&gt;</a></span><span class="message">now let's do the fix</span></div><div class="line" id="184416"><span class="nick" style="color:#6b8072"><a href="#184416" label="[18:44:16]">&lt;oriansj&gt;</a></span><span class="message">well that should only happen if the number isn't prefixed by one of &quot;~!@$&quot;</span></div><div class="line" id="184454"><span class="nick" style="color:#6b8072"><a href="#184454" label="[18:44:54]">&lt;oriansj&gt;</a></span><span class="message">are you still hitting that function with %-1  ??</span></div><div class="line" id="184536"><span class="nick" style="color:#80b1d3"><a href="#184536" label="[18:45:36]">&lt;stikonas&gt;</a></span><span class="message">I was hittign that function with &quot;9&quot; in test.M1 file</span></div><div class="line" id="184556"><span class="nick" style="color:#80b1d3"><a href="#184556" label="[18:45:56]">&lt;stikonas&gt;</a></span><span class="message">well, it's a bug in M0 only, M1 deals with it fine</span></div><div class="line" id="184608"><span class="nick" style="color:#80b1d3"><a href="#184608" label="[18:46:08]">&lt;stikonas&gt;</a></span><span class="message">I think oversight in Eval_Immediates</span></div><div class="line" id="184614"><span class="nick" style="color:#80b1d3"><a href="#184614" label="[18:46:14]">&lt;stikonas&gt;</a></span><span class="message">probably got rid of too many checks</span></div><div class="line" id="184618"><span class="nick" style="color:#6b8072"><a href="#184618" label="[18:46:18]">&lt;oriansj&gt;</a></span><span class="message">So the function prior is miss identifying</span></div><div class="line" id="184623"><span class="nick" style="color:#80b1d3"><a href="#184623" label="[18:46:23]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="184627"><span class="nick" style="color:#80b1d3"><a href="#184627" label="[18:46:27]">&lt;stikonas&gt;</a></span><span class="message">should be easy to fix</span></div><div class="line" id="184706"><span class="nick" style="color:#80b1d3"><a href="#184706" label="[18:47:06]">&lt;stikonas&gt;</a></span><span class="message">well, I did test M0 with all files in Development/*.M1 but none of those had this</span></div><div class="line" id="184803"><span class="nick" style="color:#6b8072"><a href="#184803" label="[18:48:03]">&lt;oriansj&gt;</a></span><span class="message">well a raw 9 shouldn't appear in M1 anyway</span></div><div class="line" id="184856"><span class="nick" style="color:#6b8072"><a href="#184856" label="[18:48:56]">&lt;oriansj&gt;</a></span><span class="message">it should either be '9' or &quot;9&quot; or DEFINE thing 9 or %9</span></div><div class="line" id="184913"><span class="nick" style="color:#6b8072"><a href="#184913" label="[18:49:13]">&lt;oriansj&gt;</a></span><span class="message">if it was in a define it shouldn't even be looked at</span></div><div class="line" id="185009"><span class="nick" style="color:#6b8072"><a href="#185009" label="[18:50:09]">&lt;oriansj&gt;</a></span><span class="message">only case would have been !9, ~9, @9 or %9 that should have hit that code</span></div><div class="line" id="185139"><span class="nick" style="color:#80b1d3"><a href="#185139" label="[18:51:39]">&lt;stikonas&gt;</a></span><span class="message">well, it's just &quot;9&quot; (3 bytes)</span></div><div class="line" id="185208"><span class="nick" style="color:#80b1d3"><a href="#185208" label="[18:52:08]">&lt;stikonas&gt;</a></span><span class="message">well, plus LF</span></div><div class="line" id="185208"><span class="nick" style="color:#80b1d3"><a href="#185208" label="[18:52:08]">&lt;stikonas&gt;</a></span><span class="message">anyway, I should have a fix soonish</span></div><div class="line" id="185307"><span class="nick" style="color:#6b8072"><a href="#185307" label="[18:53:07]">&lt;oriansj&gt;</a></span><span class="message">I-&gt;EXPRESSION should be NULL at that point only for immediates and invalids</span></div><div class="line" id="185334"><span class="nick" style="color:#6b8072"><a href="#185334" label="[18:53:34]">&lt;oriansj&gt;</a></span><span class="message">so if I-&gt;EXPRESSION isn't null you should be skipping to next as well</span></div><div class="line" id="185421"><span class="nick" style="color:#6b8072"><a href="#185421" label="[18:54:21]">&lt;oriansj&gt;</a></span><span class="message">and &quot;9&quot; should absolutely not have I-&gt;EXPRESSION at this step (as strings are processed before immediates)</span></div><div class="line" id="185903"><span class="nick" style="color:#80b1d3"><a href="#185903" label="[18:59:03]">&lt;stikonas&gt;</a></span><span class="message">oh, it's probably I-&gt;EXPRESSION==NULL check that is missing</span></div><div class="line" id="190025"><span class="nick" style="color:#80b1d3"><a href="#190025" label="[19:00:25]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="190056"><span class="nick" style="color:#80b1d3"><a href="#190056" label="[19:00:56]">&lt;stikonas&gt;</a></span><span class="message">that's 3 line fix...</span></div><div class="line" id="190107"><span class="nick" style="color:#6b8072"><a href="#190107" label="[19:01:07]">&lt;oriansj&gt;</a></span><span class="message">nicely done stikonas</span></div><div class="line" id="190153"><span class="nick" style="color:#80b1d3"><a href="#190153" label="[19:01:53]">&lt;stikonas&gt;</a></span><span class="message">or actually just 2 instructions in riscv</span></div><div class="line" id="190257"><span class="nick" style="color:#80b1d3"><a href="#190257" label="[19:02:57]">&lt;stikonas&gt;</a></span><span class="message">well, you last comment helped me quite a bit to find issue quicker</span></div><div class="line" id="190556"><span class="nick" style="color:#80b1d3"><a href="#190556" label="[19:05:56]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed</span></div><div class="line" id="190858"><span class="nick" style="color:#80b1d3"><a href="#190858" label="[19:08:58]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/44">https://github.com/oriansj/stage0-posix/pull/44</a> </span></div><div class="line" id="191304"><span class="nick" style="color:#6b8072"><a href="#191304" label="[19:13:04]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="202146"><span class="nick" style="color:#2e2a4a"><a href="#202146" label="[20:21:46]">&lt;xentrac&gt;</a></span><span class="message">stikonas: woohoo</span></div><br /></div></body></html>