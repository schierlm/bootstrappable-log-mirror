<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-02-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="031628"><span class="nick" style="color:#389600"><a href="#031628" label="[03:16:28]">&lt;oriansj&gt;</a></span><span class="message">plasma41: not a bad bootstrapping system.</span></div><div class="line" id="032327"><span class="nick" style="color:#389600"><a href="#032327" label="[03:23:27]">&lt;oriansj&gt;</a></span><span class="message">Honestly S-100 bus systems were a tragic loss in spirit. And if one made an S-100 system with a 386 and 4GB of RAM; they probably could run live-bootstrap with very few modifications</span></div><div class="line" id="032750"><span class="nick" style="color:#389600"><a href="#032750" label="[03:27:50]">&lt;oriansj&gt;</a></span><span class="message">but honestly any hardware we can eliminate firmware we didn't bootstrap would be a huge win (even if it requires me to do a bunch of porting work)</span></div><div class="line" id="094503"><span class="nick" style="color:#389600"><a href="#094503" label="[09:45:03]">&lt;oriansj&gt;</a></span><span class="message">and of course my jerk of a brain wakes me up at 3am with a massively overly ambitious idea; knowing I have work in 5 hours and definitely no where close to enough time or energy to work on said idea. Assuming one had a trusted fab able to produce arbitrary chips up to X transistors: design a full system, CPU and firmware capable of running a POSIX kernel. Thanks brain, that sounds like an even bigger problem than the last one that only</span></div><div class="line" id="094503"><span class="nick" style="color:#389600"><a href="#094503" label="[09:45:03]">&lt;oriansj&gt;</a></span><span class="message">took 5+ years and about a dozen brilliant and wonderful people (love all of you bootstrappers)</span></div><div class="line" id="100818"><span class="nick" style="color:#389600"><a href="#100818" label="[10:08:18]">&lt;oriansj&gt;</a></span><span class="message">heaven knows I need to actively follow more 0x10c style bootstrapping fantasies</span></div><div class="line" id="102715"><span class="nick" style="color:#389600"><a href="#102715" label="[10:27:15]">&lt;oriansj&gt;</a></span><span class="message">Well lets look at the basic requirements that I'll need to figure out how to do: Design a CPU and its pinout, along with how to wireup the most minimal system possible which would probably require RAM, ROM, a clock driver and a serial port (do I go insane and design that chip too or just assume an off the shelf design)</span></div><div class="line" id="102914"><span class="nick" style="color:#389600"><a href="#102914" label="[10:29:14]">&lt;oriansj&gt;</a></span><span class="message">figure out if I'm  going to do Memory mapped I/O, Port mapped I/O or channel I/O (and have to design that architecture too)</span></div><div class="line" id="103200"><span class="nick" style="color:#389600"><a href="#103200" label="[10:32:00]">&lt;oriansj&gt;</a></span><span class="message">or do I just punt hard and go make a 32bit unibus design and shove a bunch of complexity into a few chips and punt on those as long as possible</span></div><div class="line" id="104130"><span class="nick" style="color:#389600"><a href="#104130" label="[10:41:30]">&lt;oriansj&gt;</a></span><span class="message">as there are a great many hardware choices that make bootstrapping simpler and easier but add a good bit of complexity to the hardware itself</span></div><div class="line" id="104217"><span class="nick" style="color:#389600"><a href="#104217" label="[10:42:17]">&lt;oriansj&gt;</a></span><span class="message">such as an MMU and IOMMU</span></div><div class="line" id="104815"><span class="nick" style="color:#389600"><a href="#104815" label="[10:48:15]">&lt;oriansj&gt;</a></span><span class="message">supporting multiple instruction sizes; enable things such as 32bit immediates (which allow us to skip having do do immediate skips in our code) but is more complex than just a single instruction size and is it worth it wouldn't even be known until someone just builds up to that point and looks at the transistor count delta</span></div><div class="line" id="105455"><span class="nick" style="color:#389600"><a href="#105455" label="[10:54:55]">&lt;oriansj&gt;</a></span><span class="message">or do I reasonably assume that entire path is always doomed to waste infite time as why would anyone care about another hobby CPU architectures.</span></div><div class="line" id="105658"><span class="nick" style="color:#389600"><a href="#105658" label="[10:56:58]">&lt;oriansj&gt;</a></span><span class="message">specify a subset of an existing architecture (like 386) omit the bits that are not needed when bootstrapping and just embrace legacy support will always include mess and bad design decisions.</span></div><div class="line" id="113448"><span class="nick" style="color:#389600"><a href="#113448" label="[11:34:48]">&lt;oriansj&gt;</a></span><span class="message">or is the fact one can buy a CPU that implements an architecture the real dividing line?</span></div><div class="line" id="115627"><span class="nick" style="color:#8dd3c7"><a href="#115627" label="[11:56:27]">&lt;fossy&gt;</a></span><span class="message">i think riscv is probably the best we have right now, particularly because of its smaller instruction set &amp; open design</span></div><div class="line" id="115638"><span class="nick" style="color:#8dd3c7"><a href="#115638" label="[11:56:38]">&lt;fossy&gt;</a></span><span class="message">TBH, its pretty close to what your spec is there</span></div><div class="line" id="120949"><span class="nick" style="color:#389600"><a href="#120949" label="[12:09:49]">&lt;oriansj&gt;</a></span><span class="message">well every Microprocessor ever made is pretty close to the minimal spec</span></div><div class="line" id="121251"><span class="nick" style="color:#389600"><a href="#121251" label="[12:12:51]">&lt;oriansj&gt;</a></span><span class="message">The only deviation common is not needing an external clock</span></div><div class="line" id="121343"><span class="nick" style="color:#389600"><a href="#121343" label="[12:13:43]">&lt;oriansj&gt;</a></span><span class="message">as chips like the J-11 have clock output pin(s)</span></div><div class="line" id="125810"><span class="nick" style="color:#2e2a4a"><a href="#125810" label="[12:58:10]">&lt;muurkha&gt;</a></span><span class="message">I don't think a Xeon is &quot;pretty close to the minimal spec&quot;, but it's certainly still a microprocessor</span></div><div class="line" id="125943"><span class="nick" style="color:#2e2a4a"><a href="#125943" label="[12:59:43]">&lt;muurkha&gt;</a></span><span class="message">to run a POSIX kernel in a practical way you probably do need an MMU</span></div><div class="line" id="130104"><span class="nick" style="color:#2e2a4a"><a href="#130104" label="[13:01:04]">&lt;muurkha&gt;</a></span><span class="message">RISC-V's approach to instruction-sized immediates seems pretty reasonable to me</span></div><div class="line" id="130237"><span class="nick" style="color:#2e2a4a"><a href="#130237" label="[13:02:37]">&lt;muurkha&gt;</a></span><span class="message">the ADDI instruction has a 12-bit immediate, which is sign-extended (like all RISC-V immediates) and covers the most common cases of immediates directly: 0, 1, -1, 4, 8, 10, 255, things like that</span></div><div class="line" id="130348"><span class="nick" style="color:#2e2a4a"><a href="#130348" label="[13:03:48]">&lt;muurkha&gt;</a></span><span class="message">for a full 32-bit immediate you precede the ADDI with a LUI, load upper immediate, which has a 20-bit immediate which gets loaded into the high bits of the destination register</span></div><div class="line" id="130416"><span class="nick" style="color:#2e2a4a"><a href="#130416" label="[13:04:16]">&lt;muurkha&gt;</a></span><span class="message">(or AUIPC to get a PC-relative version, allowing you to relocate your code in memory)</span></div><div class="line" id="130526"><span class="nick" style="color:#2e2a4a"><a href="#130526" label="[13:05:26]">&lt;muurkha&gt;</a></span><span class="message">the SeRV implementation of RISC-V is about 200 4-LUTs, not counting memory (because it implements full RISC-V it has a bit over 1024 bits of registers; RV32E cuts that almost in half)</span></div><div class="line" id="130637"><span class="nick" style="color:#2e2a4a"><a href="#130637" label="[13:06:37]">&lt;muurkha&gt;</a></span><span class="message">but SeRV is designed to do unpredictable things in the case of illegal instructions, which doesn't seem like it would be ideal for a trustworthy unbootstrapping path</span></div><div class="line" id="130737"><span class="nick" style="color:#2e2a4a"><a href="#130737" label="[13:07:37]">&lt;muurkha&gt;</a></span><span class="message">an MMU also helps with the trustworthiness question, quite aside from making it practical to implement POSIX fork()</span></div><div class="line" id="130753"><span class="nick" style="color:#2e2a4a"><a href="#130753" label="[13:07:53]">&lt;muurkha&gt;</a></span><span class="message">because you can be reasonably sure that wild pointers in user code won't corrupt the kernel</span></div><div class="line" id="131540"><span class="nick" style="color:#389600"><a href="#131540" label="[13:15:40]">&lt;oriansj&gt;</a></span><span class="message">muurkha: fair enough</span></div><div class="line" id="131731"><span class="nick" style="color:#389600"><a href="#131731" label="[13:17:31]">&lt;oriansj&gt;</a></span><span class="message">well I disagree on the reasonableness of RISC-V's immediates (mostly on grounds of encoding complexity); we did already ultimately bootstrap it to the point where it could be used.</span></div><div class="line" id="131735"><span class="nick" style="color:#2e2a4a"><a href="#131735" label="[13:17:35]">&lt;muurkha&gt;</a></span><span class="message">I'm not sure how much that buys you in terms of trustworthiness when you're running the compiler that outputs the kernel</span></div><div class="line" id="131754"><span class="nick" style="color:#2e2a4a"><a href="#131754" label="[13:17:54]">&lt;muurkha&gt;</a></span><span class="message">but it surely cuts down debugging time at least</span></div><div class="line" id="131756"><span class="nick" style="color:#2e2a4a"><a href="#131756" label="[13:17:56]">&lt;muurkha&gt;</a></span><span class="message">yeah, the encoding of RISC-V's immediates is a pain</span></div><div class="line" id="131818"><span class="nick" style="color:#389600"><a href="#131818" label="[13:18:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well also doing a builder-hex0 in RISC-V is going to be a nightmare due to those immediates</span></div><div class="line" id="131846"><span class="nick" style="color:#389600"><a href="#131846" label="[13:18:46]">&lt;oriansj&gt;</a></span><span class="message">in M0/M1 it isn't so bad but in hex0; eek</span></div><div class="line" id="131929"><span class="nick" style="color:#2e2a4a"><a href="#131929" label="[13:19:29]">&lt;muurkha&gt;</a></span><span class="message">what if you have a fixed instruction length wider than the address bus?</span></div><div class="line" id="131949"><span class="nick" style="color:#2e2a4a"><a href="#131949" label="[13:19:49]">&lt;muurkha&gt;</a></span><span class="message">24-bit or 28-bit addresses, say, and 32-bit instructions</span></div><div class="line" id="132021"><span class="nick" style="color:#2e2a4a"><a href="#132021" label="[13:20:21]">&lt;muurkha&gt;</a></span><span class="message">then you could have a real load-immediate instruction with no hanky-panky</span></div><div class="line" id="132022"><span class="nick" style="color:#389600"><a href="#132022" label="[13:20:22]">&lt;oriansj&gt;</a></span><span class="message">why not 32bit addresses and 64bit instructions?</span></div><div class="line" id="132053"><span class="nick" style="color:#389600"><a href="#132053" label="[13:20:53]">&lt;oriansj&gt;</a></span><span class="message">it'll be wasteful of memory but now you have a boatload of bits for trivial decoding</span></div><div class="line" id="132114"><span class="nick" style="color:#2e2a4a"><a href="#132114" label="[13:21:14]">&lt;muurkha&gt;</a></span><span class="message">yeah, the only reason not to do that is that it's wasteful of memory I think</span></div><div class="line" id="132134"><span class="nick" style="color:#2e2a4a"><a href="#132134" label="[13:21:34]">&lt;muurkha&gt;</a></span><span class="message">you might remember Nguyen and Kay's Chifir has 128-bit instructions</span></div><div class="line" id="132152"><span class="nick" style="color:#2e2a4a"><a href="#132152" label="[13:21:52]">&lt;muurkha&gt;</a></span><span class="message">32 bits of opcode, 32 bits of destination address, and 32 bits of each source address</span></div><div class="line" id="132236"><span class="nick" style="color:#2e2a4a"><a href="#132236" label="[13:22:36]">&lt;muurkha&gt;</a></span><span class="message">unfortunately I think this relies on self-modifying code for array indexing</span></div><div class="line" id="132320"><span class="nick" style="color:#389600"><a href="#132320" label="[13:23:20]">&lt;oriansj&gt;</a></span><span class="message">well a clean bootstrap architecture doesn't need to be bad</span></div><div class="line" id="132354"><span class="nick" style="color:#389600"><a href="#132354" label="[13:23:54]">&lt;oriansj&gt;</a></span><span class="message">heck RISC-V with a few tweaks to encoding and reduced to 16 registers would work</span></div><div class="line" id="132417"><span class="nick" style="color:#2e2a4a"><a href="#132417" label="[13:24:17]">&lt;muurkha&gt;</a></span><span class="message">RV32E-unshuffled</span></div><div class="line" id="132426"><span class="nick" style="color:#2e2a4a"><a href="#132426" label="[13:24:26]">&lt;muurkha&gt;</a></span><span class="message">-E is &quot;reduced to 16 registers&quot;</span></div><div class="line" id="132436"><span class="nick" style="color:#389600"><a href="#132436" label="[13:24:36]">&lt;oriansj&gt;</a></span><span class="message">exactly</span></div><div class="line" id="132457"><span class="nick" style="color:#2e2a4a"><a href="#132457" label="[13:24:57]">&lt;muurkha&gt;</a></span><span class="message">Chifir has no general-purpose registers, just memory</span></div><div class="line" id="132528"><span class="nick" style="color:#389600"><a href="#132528" label="[13:25:28]">&lt;oriansj&gt;</a></span><span class="message">then AUIPC and LUI can just use 16 bit immediates</span></div><div class="line" id="132633"><span class="nick" style="color:#389600"><a href="#132633" label="[13:26:33]">&lt;oriansj&gt;</a></span><span class="message">so you could save an encoding and skip their &quot;compressed instruction</span></div><div class="line" id="132656"><span class="nick" style="color:#389600"><a href="#132656" label="[13:26:56]">&lt;oriansj&gt;</a></span><span class="message">&quot; garbage that wastes the majority of the instruction encoding space</span></div><div class="line" id="132718"><span class="nick" style="color:#2e2a4a"><a href="#132718" label="[13:27:18]">&lt;muurkha&gt;</a></span><span class="message">hmm, I guess you have to steal a couple of bits from the opcode fields to get ADDI up to 16 bits</span></div><div class="line" id="132721"><span class="nick" style="color:#2e2a4a"><a href="#132721" label="[13:27:21]">&lt;muurkha&gt;</a></span><span class="message">of immediate</span></div><div class="line" id="132809"><span class="nick" style="color:#389600"><a href="#132809" label="[13:28:09]">&lt;oriansj&gt;</a></span><span class="message">don't you mean add a few as [8bit opcode] [4bit register] [4bit register][16bit register]</span></div><div class="line" id="132831"><span class="nick" style="color:#389600"><a href="#132831" label="[13:28:31]">&lt;oriansj&gt;</a></span><span class="message">we would be expanding the opcode to 8 bits</span></div><div class="line" id="133147"><span class="nick" style="color:#389600"><a href="#133147" label="[13:31:47]">&lt;oriansj&gt;</a></span><span class="message">(and remove the need for funct3 xop) as there are not that many immediate instructions in RISC-V</span></div><div class="line" id="133204"><span class="nick" style="color:#2e2a4a"><a href="#133204" label="[13:32:04]">&lt;muurkha&gt;</a></span><span class="message">I was counting the funct3 field as one of the opcode fields</span></div><div class="line" id="133236"><span class="nick" style="color:#2e2a4a"><a href="#133236" label="[13:32:36]">&lt;muurkha&gt;</a></span><span class="message">even though it's not the field called &quot;opcode&quot;, it does encode which operation to perform :)</span></div><div class="line" id="133255"><span class="nick" style="color:#389600"><a href="#133255" label="[13:32:55]">&lt;oriansj&gt;</a></span><span class="message">fair enough, in which place we would be stealing exactly 1 bit</span></div><div class="line" id="133341"><span class="nick" style="color:#2e2a4a"><a href="#133341" label="[13:33:41]">&lt;muurkha&gt;</a></span><span class="message">two, I think, since funct3 is 3 bits and the field called &quot;opcode&quot; is 7</span></div><div class="line" id="133406"><span class="nick" style="color:#2e2a4a"><a href="#133406" label="[13:34:06]">&lt;muurkha&gt;</a></span><span class="message">the resulting instruction format would be very readable in hex</span></div><div class="line" id="133418"><span class="nick" style="color:#389600"><a href="#133418" label="[13:34:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: we get to steal 1 bit from each of the registers</span></div><div class="line" id="133422"><span class="nick" style="color:#2e2a4a"><a href="#133422" label="[13:34:22]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="133515"><span class="nick" style="color:#2e2a4a"><a href="#133515" label="[13:35:15]">&lt;muurkha&gt;</a></span><span class="message">so to get from 12 to 16 bits of immediate, we reduce opcode bits from 10 bits to 8, reduce rd from 5 bits to 4, reduce rs1 from 5 bits to 4, and reorder the fields to be in a readable order</span></div><div class="line" id="133516"><span class="nick" style="color:#389600"><a href="#133516" label="[13:35:16]">&lt;oriansj&gt;</a></span><span class="message">and we can even flip the bit order so that it becomes opcode register immediate register</span></div><div class="line" id="133525"><span class="nick" style="color:#389600"><a href="#133525" label="[13:35:25]">&lt;oriansj&gt;</a></span><span class="message">so it'll look like the assembly</span></div><div class="line" id="133617"><span class="nick" style="color:#2e2a4a"><a href="#133617" label="[13:36:17]">&lt;muurkha&gt;</a></span><span class="message">that would dealign the immediate field with byte boundaries, which might be a more important ergonomic consideration</span></div><div class="line" id="133625"><span class="nick" style="color:#389600"><a href="#133625" label="[13:36:25]">&lt;oriansj&gt;</a></span><span class="message">well we only have to do 40 instruction opcodes for RV32E</span></div><div class="line" id="133812"><span class="nick" style="color:#389600"><a href="#133812" label="[13:38:12]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well byte aligned immediates could enable simpler hex2</span></div><div class="line" id="133820"><span class="nick" style="color:#2e2a4a"><a href="#133820" label="[13:38:20]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="133838"><span class="nick" style="color:#2e2a4a"><a href="#133838" label="[13:38:38]">&lt;muurkha&gt;</a></span><span class="message">also it might make it easier to read hex dumps</span></div><div class="line" id="133902"><span class="nick" style="color:#389600"><a href="#133902" label="[13:39:02]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="134126"><span class="nick" style="color:#389600"><a href="#134126" label="[13:41:26]">&lt;oriansj&gt;</a></span><span class="message">toss in another 8 instructions to support the M extension and 4 more for S extension and that would do it right?</span></div><div class="line" id="134215"><span class="nick" style="color:#2e2a4a"><a href="#134215" label="[13:42:15]">&lt;muurkha&gt;</a></span><span class="message">I forget what S is</span></div><div class="line" id="134300"><span class="nick" style="color:#2e2a4a"><a href="#134300" label="[13:43:00]">&lt;muurkha&gt;</a></span><span class="message">I think M is probably not that important for compilers.  I mean you can just call a multiplication or division subroutine</span></div><div class="line" id="134303"><span class="nick" style="color:#389600"><a href="#134303" label="[13:43:03]">&lt;oriansj&gt;</a></span><span class="message">Standard Extension for Supervisor-level Instructions</span></div><div class="line" id="134334"><span class="nick" style="color:#2e2a4a"><a href="#134334" label="[13:43:34]">&lt;muurkha&gt;</a></span><span class="message">oh, sure</span></div><div class="line" id="134340"><span class="nick" style="color:#389600"><a href="#134340" label="[13:43:40]">&lt;oriansj&gt;</a></span><span class="message">which (correct me if I am wrong) should be for MMU support</span></div><div class="line" id="134414"><span class="nick" style="color:#2e2a4a"><a href="#134414" label="[13:44:14]">&lt;muurkha&gt;</a></span><span class="message">I think it interacts with it but I think the MMU support is not itself given a letter</span></div><div class="line" id="134419"><span class="nick" style="color:#2e2a4a"><a href="#134419" label="[13:44:19]">&lt;muurkha&gt;</a></span><span class="message">which is kind of goofy</span></div><div class="line" id="134447"><span class="nick" style="color:#389600"><a href="#134447" label="[13:44:47]">&lt;oriansj&gt;</a></span><span class="message">oh, that sucks</span></div><div class="line" id="134605"><span class="nick" style="color:#2e2a4a"><a href="#134605" label="[13:46:05]">&lt;muurkha&gt;</a></span><span class="message">I think the supervisor-level instructions are for things like reading and writing special registers</span></div><div class="line" id="134613"><span class="nick" style="color:#2e2a4a"><a href="#134613" label="[13:46:13]">&lt;muurkha&gt;</a></span><span class="message">some of which you use for setting up the page tables</span></div><div class="line" id="134637"><span class="nick" style="color:#2e2a4a"><a href="#134637" label="[13:46:37]">&lt;muurkha&gt;</a></span><span class="message">the page tables specified in the supervisor-level instruction set look very easy to use</span></div><div class="line" id="134722"><span class="nick" style="color:#389600"><a href="#134722" label="[13:47:22]">&lt;oriansj&gt;</a></span><span class="message">well then ideally those will map nicely as well</span></div><div class="line" id="173026"><span class="nick" style="color:#6b8072"><a href="#173026" label="[17:30:26]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've replied to your emails, it seems we still have no stage0-posix to mes path on 64 bits</span></div><div class="line" id="173052"><span class="nick" style="color:#6b8072"><a href="#173052" label="[17:30:52]">&lt;stikonas&gt;</a></span><span class="message">(so we don't need to worry about new amd64 defines yet)</span></div><div class="line" id="173105"><span class="nick" style="color:#80b1d3"><a href="#173105" label="[17:31:05]">&lt;janneke&gt;</a></span><span class="message">stikonas: ok</span></div><div class="line" id="173113"><span class="nick" style="color:#6b8072"><a href="#173113" label="[17:31:13]">&lt;stikonas&gt;</a></span><span class="message">and perhaps once we start working on it, we can just target new amd64 defines</span></div><div class="line" id="173131"><span class="nick" style="color:#6b8072"><a href="#173131" label="[17:31:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've suggested a quick fix that we'll definitely need for 64-bit</span></div><div class="line" id="173141"><span class="nick" style="color:#80b1d3"><a href="#173141" label="[17:31:41]">&lt;janneke&gt;</a></span><span class="message">x86_64 is still &quot;nice to have&quot;, as i386 works fine for a 64bit bootstrap</span></div><div class="line" id="173209"><span class="nick" style="color:#6b8072"><a href="#173209" label="[17:32:09]">&lt;stikonas&gt;</a></span><span class="message">you should replace #define M2_PTR_SIZE 4 with #define M2_PTR_SIZE (sizeof(void*))</span></div><div class="line" id="173218"><span class="nick" style="color:#6b8072"><a href="#173218" label="[17:32:18]">&lt;stikonas&gt;</a></span><span class="message">janneke: it works for now...</span></div><div class="line" id="173232"><span class="nick" style="color:#6b8072"><a href="#173232" label="[17:32:32]">&lt;stikonas&gt;</a></span><span class="message">we are likely to hit multiple bugs in 2037</span></div><div class="line" id="173300"><span class="nick" style="color:#6b8072"><a href="#173300" label="[17:33:00]">&lt;stikonas&gt;</a></span><span class="message">I once tried setting date in qemu beyond that and we have multiple issues</span></div><div class="line" id="173341"><span class="nick" style="color:#80b1d3"><a href="#173341" label="[17:33:41]">&lt;janneke&gt;</a></span><span class="message">stikonas: yeah, i think we do that now on the wip-x86_64 branch</span></div><div class="line" id="173353"><span class="nick" style="color:#80b1d3"><a href="#173353" label="[17:33:53]">&lt;janneke&gt;</a></span><span class="message">hehe, yeah</span></div><div class="line" id="173506"><span class="nick" style="color:#6b8072"><a href="#173506" label="[17:35:06]">&lt;stikonas&gt;</a></span><span class="message">oh yes, you already fixed it a few days ago</span></div><div class="line" id="173529"><span class="nick" style="color:#6b8072"><a href="#173529" label="[17:35:29]">&lt;stikonas&gt;</a></span><span class="message">I was getting lost in different branches</span></div><div class="line" id="173546"><span class="nick" style="color:#80b1d3"><a href="#173546" label="[17:35:46]">&lt;janneke&gt;</a></span><span class="message">ACTION wonders how to deop automagically</span></div><div class="line" id="173600"><span class="nick" style="color:#80b1d3"><a href="#173600" label="[17:36:00]">&lt;janneke&gt;</a></span><span class="message">stikonas: yeah, it's terrible</span></div><div class="line" id="173601"><span class="nick" style="color:#6b8072"><a href="#173601" label="[17:36:01]">&lt;stikonas&gt;</a></span><span class="message">ok, found it <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/x86_64/x86_64_defs.M1?h=wip-x86_64">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/x86_64/x86_64_defs.M1?h=wip-x86_64</a> </span></div><div class="line" id="173607"><span class="nick" style="color:#6b8072"><a href="#173607" label="[17:36:07]">&lt;stikonas&gt;</a></span><span class="message">so yes, we need to update this file too</span></div><div class="line" id="173640"><span class="nick" style="color:#80b1d3"><a href="#173640" label="[17:36:40]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="173708"><span class="nick" style="color:#6b8072"><a href="#173708" label="[17:37:08]">&lt;stikonas&gt;</a></span><span class="message">janneke: so you can add them from here <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/amd64/amd64_defs.M1">https://github.com/oriansj/M2libc/blob/main/amd64/amd64_defs.M1</a> </span></div><div class="line" id="173719"><span class="nick" style="color:#80b1d3"><a href="#173719" label="[17:37:19]">&lt;janneke&gt;</a></span><span class="message">stikonas: ah, great; thanks</span></div><div class="line" id="173735"><span class="nick" style="color:#6b8072"><a href="#173735" label="[17:37:35]">&lt;stikonas&gt;</a></span><span class="message">should be the same set just in different order</span></div><div class="line" id="173747"><span class="nick" style="color:#80b1d3"><a href="#173747" label="[17:37:47]">&lt;janneke&gt;</a></span><span class="message">ok</span></div><div class="line" id="173845"><span class="nick" style="color:#80b1d3"><a href="#173845" label="[17:38:45]">&lt;janneke&gt;</a></span><span class="message">in other news, the guix bootstrap fails with mes-0.24.2; binutils-2.20.1a's &quot;ar&quot; segfaults</span></div><div class="line" id="173912"><span class="nick" style="color:#6b8072"><a href="#173912" label="[17:39:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess libc problem...</span></div><div class="line" id="173926"><span class="nick" style="color:#6b8072"><a href="#173926" label="[17:39:26]">&lt;stikonas&gt;</a></span><span class="message">is binutils 2.20 still using mes libc rather than glibc?</span></div><div class="line" id="173938"><span class="nick" style="color:#80b1d3"><a href="#173938" label="[17:39:38]">&lt;janneke&gt;</a></span><span class="message">yes, it's the first binutils</span></div><div class="line" id="173949"><span class="nick" style="color:#6b8072"><a href="#173949" label="[17:39:49]">&lt;stikonas&gt;</a></span><span class="message">oh, at some point it was 2.14...</span></div><div class="line" id="173957"><span class="nick" style="color:#6b8072"><a href="#173957" label="[17:39:57]">&lt;stikonas&gt;</a></span><span class="message">I guess it got changed</span></div><div class="line" id="174001"><span class="nick" style="color:#80b1d3"><a href="#174001" label="[17:40:01]">&lt;janneke&gt;</a></span><span class="message">yeah, managed to upgrade</span></div><div class="line" id="174009"><span class="nick" style="color:#80b1d3"><a href="#174009" label="[17:40:09]">&lt;janneke&gt;</a></span><span class="message">*we managed</span></div><div class="line" id="174127"><span class="nick" style="color:#80b1d3"><a href="#174127" label="[17:41:27]">&lt;janneke&gt;</a></span><span class="message">mes-0.24.2 should fix a longstanding stat64 bug that apparently surfaces when using btrfs</span></div><div class="line" id="174220"><span class="nick" style="color:#80b1d3"><a href="#174220" label="[17:42:20]">&lt;janneke&gt;</a></span><span class="message">ACTION tries some bisecting, hoping it's not the stat64 patch that breaks things</span></div><div class="line" id="174248"><span class="nick" style="color:#80b1d3"><a href="#174248" label="[17:42:48]">&lt;janneke&gt;</a></span><span class="message">another possibility is rebuiling mes lib c when building the second tcc-boot</span></div><div class="line" id="174450"><span class="nick" style="color:#6b8072"><a href="#174450" label="[17:44:50]">&lt;stikonas&gt;</a></span><span class="message">fossy: potentially we could try upgrading binutils 2.14 to 2.20.1 in live-bootstrap too, but binutils 2.20.1 uses autoconf 2.64, so it would have to go just before GCC</span></div><div class="line" id="174605"><span class="nick" style="color:#6b8072"><a href="#174605" label="[17:46:05]">&lt;stikonas&gt;</a></span><span class="message">we have quite a few packages between binutils and gcc but it's mostly various versions of autotools</span></div><div class="line" id="174624"><span class="nick" style="color:#6b8072"><a href="#174624" label="[17:46:24]">&lt;stikonas&gt;</a></span><span class="message">which presumably will build just find without as</span></div><div class="line" id="183641"><span class="nick" style="color:#6d2462"><a href="#183641" label="[18:36:41]">&lt;efraim&gt;</a></span><span class="message">it might also be on tmpfs, that's where I do my guix building</span></div><div class="line" id="184917"><span class="nick" style="color:#80b1d3"><a href="#184917" label="[18:49:17]">&lt;janneke&gt;</a></span><span class="message">efraim: you mount tmpfs on /tmp ?</span></div><div class="line" id="184937"><span class="nick" style="color:#80b1d3"><a href="#184937" label="[18:49:37]">&lt;janneke&gt;</a></span><span class="message">and that breaks the bootstrap where?</span></div><div class="line" id="185030"><span class="nick" style="color:#6d2462"><a href="#185030" label="[18:50:30]">&lt;efraim&gt;</a></span><span class="message">same spot, with as where everyone else fails</span></div><div class="line" id="185101"><span class="nick" style="color:#80b1d3"><a href="#185101" label="[18:51:01]">&lt;janneke&gt;</a></span><span class="message">i've seen two reports, bash-mesboot0 (which has been removed) and glibc-2.2.5?</span></div><div class="line" id="192108"><span class="nick" style="color:#6d2462"><a href="#192108" label="[19:21:08]">&lt;efraim&gt;</a></span><span class="message">I'll check in a few minutes</span></div><div class="line" id="194254"><span class="nick" style="color:#6d2462"><a href="#194254" label="[19:42:54]">&lt;efraim&gt;</a></span><span class="message">gcc-core-mesboot0-2.95.3</span></div><div class="line" id="195951"><span class="nick" style="color:#80b1d3"><a href="#195951" label="[19:59:51]">&lt;janneke&gt;</a></span><span class="message">efraim: thanks!</span></div><div class="line" id="200030"><span class="nick" style="color:#80b1d3"><a href="#200030" label="[20:00:30]">&lt;janneke&gt;</a></span><span class="message">meanwhile, i got gcc-core-mesboot0 built with mes-0.24 + the stat64 patch</span></div><div class="line" id="200041"><span class="nick" style="color:#80b1d3"><a href="#200041" label="[20:00:41]">&lt;janneke&gt;</a></span><span class="message">it requires a rebuild of the Mes C Library in tcc-boot</span></div><div class="line" id="200109"><span class="nick" style="color:#80b1d3"><a href="#200109" label="[20:01:09]">&lt;janneke&gt;</a></span><span class="message">possibly we're going to get mes-0.24.2 in after all...</span></div><div class="line" id="223102"><span class="nick" style="color:#234e69"><a href="#223102" label="[22:31:02]">&lt;vagrantc&gt;</a></span><span class="message">janneke: for the most part, mes 0.24.2 is still pretty much x86_64, x86 and armv7 ?</span></div><div class="line" id="223134"><span class="nick" style="color:#234e69"><a href="#223134" label="[22:31:34]">&lt;vagrantc&gt;</a></span><span class="message">looking at updating in debian ... although even if it theoretically supports somehing else, i probably should no add it at this point</span></div><div class="line" id="223233"><span class="nick" style="color:#80b1d3"><a href="#223233" label="[22:32:33]">&lt;janneke&gt;</a></span><span class="message">vagrantc: yes, it's really a bug-fix release</span></div><div class="line" id="223313"><span class="nick" style="color:#234e69"><a href="#223313" label="[22:33:13]">&lt;vagrantc&gt;</a></span><span class="message">janneke: yeah, it looked like some simple bugfixes, so i thin is appropriate for debian even during this mid-freeze-cycle</span></div><div class="line" id="223316"><span class="nick" style="color:#80b1d3"><a href="#223316" label="[22:33:16]">&lt;janneke&gt;</a></span><span class="message">the most important thing fixed is the `stat64' and friends problem on 32bits</span></div><div class="line" id="223332"><span class="nick" style="color:#234e69"><a href="#223332" label="[22:33:32]">&lt;vagrantc&gt;</a></span><span class="message">that sounds worth fixing ... and would probably be uglier as patches against 0.24.1</span></div><div class="line" id="223404"><span class="nick" style="color:#80b1d3"><a href="#223404" label="[22:34:04]">&lt;janneke&gt;</a></span><span class="message">it seems that when building on tmpfs or btrfs, problems arise using the old `stat' kernel interface</span></div><div class="line" id="223523"><span class="nick" style="color:#234e69"><a href="#223523" label="[22:35:23]">&lt;vagrantc&gt;</a></span><span class="message">i often use tmpfs ... though i do not think i have tested on an actual x86 or armhf system ... usually an x86 chroot on an x86_64 system, or an arm chroot on an aarch64 system</span></div><div class="line" id="223554"><span class="nick" style="color:#80b1d3"><a href="#223554" label="[22:35:54]">&lt;janneke&gt;</a></span><span class="message">ok, good</span></div><div class="line" id="223612"><span class="nick" style="color:#80b1d3"><a href="#223612" label="[22:36:12]">&lt;janneke&gt;</a></span><span class="message">the problem only seems to arise in the guix bootstrap</span></div><div class="line" id="223618"><span class="nick" style="color:#80b1d3"><a href="#223618" label="[22:36:18]">&lt;janneke&gt;</a></span><span class="message">mes builds fine</span></div><div class="line" id="223919"><span class="nick" style="color:#80b1d3"><a href="#223919" label="[22:39:19]">&lt;janneke&gt;</a></span><span class="message">and tcc-boot0, gzip-mesboot, gnu-make-mesboot0, tcc-boot, patch-mesboot</span></div><div class="line" id="223926"><span class="nick" style="color:#234e69"><a href="#223926" label="[22:39:26]">&lt;vagrantc&gt;</a></span><span class="message">but i should be able to get 0.24.2 into the upcoming debian release, fwiw</span></div><div class="line" id="223929"><span class="nick" style="color:#80b1d3"><a href="#223929" label="[22:39:29]">&lt;janneke&gt;</a></span><span class="message">but then, gcc-core-mesboot0 fails to build</span></div><div class="line" id="223939"><span class="nick" style="color:#80b1d3"><a href="#223939" label="[22:39:39]">&lt;janneke&gt;</a></span><span class="message">i guess so</span></div><div class="line" id="224007"><span class="nick" style="color:#80b1d3"><a href="#224007" label="[22:40:07]">&lt;janneke&gt;</a></span><span class="message">it's (again) in core-updates atm</span></div><br /></div></body></html>