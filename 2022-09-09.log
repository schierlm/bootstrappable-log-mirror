<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002659"><span class="nick" style="color:#389600"><a href="#002659" label="[00:26:59]">&lt;stikonas[m]&gt;</a></span><span class="message">And some things are suitable for guix, e.g. builder-hex0 or stage0-uefi</span></div><div class="line" id="031237"><span class="nick" style="color:#2e2a4a"><a href="#031237" label="[03:12:37]">&lt;vancz&gt;</a></span><span class="message">I'm having an issue like <a rel="nofollow" href="http://logs.guix.gnu.org/bootstrappable/2021-10-20.log#181957">http://logs.guix.gnu.org/bootstrappable/2021-10-20.log#181957</a>  here <a rel="nofollow" href="https://bpa.st/Z23Q">https://bpa.st/Z23Q</a>  , but on x86 linux. How can I figure out what the problem is? - or how can I fix it?</span></div><div class="line" id="031300"><span class="nick" style="color:#2e2a4a"><a href="#031300" label="[03:13:00]">&lt;vancz&gt;</a></span><span class="message">that command line is generated by some nix scripts trying to build mes, or something, I'm not sure, I'm just helping</span></div><div class="line" id="031341"><span class="nick" style="color:#2e2a4a"><a href="#031341" label="[03:13:41]">&lt;vancz&gt;</a></span><span class="message">afaict the syscall.h headers that define that symbol are listed in the -f so I have no idea why its giving that error</span></div><div class="line" id="031519"><span class="nick" style="color:#2e2a4a"><a href="#031519" label="[03:15:19]">&lt;vancz&gt;</a></span><span class="message">mescc and stage0 are both set to master, I'm trying to update the scripts that generate that command. It started failing when I updated.</span></div><div class="line" id="031826"><span class="nick" style="color:#6b8072"><a href="#031826" label="[03:18:26]">&lt;oriansj&gt;</a></span><span class="message">vancz: well the error is rather straight forward SYS_brk is not defined in /nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/lib/linux/brk.c on line 29 which if I remember correctly was caused by people using meslibc instead of M2libc for the building of Gnu Mes with M2-Planet</span></div><div class="line" id="031913"><span class="nick" style="color:#2e2a4a"><a href="#031913" label="[03:19:13]">&lt;vancz&gt;</a></span><span class="message">yeah I can see the error but I have no idea why it's erroring, afaict from reading these source files the symbol is defined right there...</span></div><div class="line" id="031919"><span class="nick" style="color:#2e2a4a"><a href="#031919" label="[03:19:19]">&lt;vancz&gt;</a></span><span class="message">but I dont understand how these tools work</span></div><div class="line" id="031926"><span class="nick" style="color:#2e2a4a"><a href="#031926" label="[03:19:26]">&lt;vancz&gt;</a></span><span class="message">is there some behaviour I don't know?</span></div><div class="line" id="031957"><span class="nick" style="color:#2e2a4a"><a href="#031957" label="[03:19:57]">&lt;vancz&gt;</a></span><span class="message">specifically I would have expected this sequence to fulfill it:</span></div><div class="line" id="031959"><span class="nick" style="color:#2e2a4a"><a href="#031959" label="[03:19:59]">&lt;vancz&gt;</a></span><span class="message">-f /nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/lib/linux/x86-mes-m2/syscall.c -f /nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/include/linux/x86/syscall.h -f /nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/include/linux/syscall.h -f /nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/lib/linux/brk.c</span></div><div class="line" id="032056"><span class="nick" style="color:#2e2a4a"><a href="#032056" label="[03:20:56]">&lt;vancz&gt;</a></span><span class="message">/nix/store/0b9czimq3v8z55rl762b8zgl3s6ppla1-source/include/linux/x86/syscall.h exists and contains &quot;#define SYS_brk     0x2d&quot; along with include guards</span></div><div class="line" id="032109"><span class="nick" style="color:#2e2a4a"><a href="#032109" label="[03:21:09]">&lt;vancz&gt;</a></span><span class="message">so unless another file ends up defining __MES_LINUX_X86_SYSCALL_H ...</span></div><div class="line" id="032432"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="032540"><span class="nick" style="color:#6b8072"><a href="#032540" label="[03:25:40]">&lt;oriansj&gt;</a></span><span class="message">the normal command for using M2-Planet to build mes.c is: <a rel="nofollow" href="https://paste.debian.net/1253260/">https://paste.debian.net/1253260/</a> </span></div><div class="line" id="033159"><span class="nick" style="color:#6b8072"><a href="#033159" label="[03:31:59]">&lt;oriansj&gt;</a></span><span class="message">and you will need this: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/files/config.h">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/files/config.h</a> </span></div><div class="line" id="033218"><span class="nick" style="color:#6b8072"><a href="#033218" label="[03:32:18]">&lt;oriansj&gt;</a></span><span class="message">live-bootstrap provides an excellent example with: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/mes-0.24.kaem">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24/mes-0.24.kaem</a> </span></div><div class="line" id="033415"><span class="nick" style="color:#6b8072"><a href="#033415" label="[03:34:15]">&lt;oriansj&gt;</a></span><span class="message">see when one uses --bootstrap-mode with M2-Planet #define lines just become a comment and // CONSTANT SYS_read 0x03 lines actually become running code</span></div><div class="line" id="033433"><span class="nick" style="color:#6b8072"><a href="#033433" label="[03:34:33]">&lt;oriansj&gt;</a></span><span class="message">and several features of M2-Planet are turned off</span></div><div class="line" id="034837"><span class="nick" style="color:#6b8072"><a href="#034837" label="[03:48:37]">&lt;oriansj&gt;</a></span><span class="message">the order of the .c files can matter as M2-Planet treats multiple input files as a single concat'd file and if it hits something undefined it will throw an error.</span></div><div class="line" id="035446"><span class="nick" style="color:#2e2a4a"><a href="#035446" label="[03:54:46]">&lt;vancz&gt;</a></span><span class="message">Thanks for the pointers</span></div><div class="line" id="035539"><span class="nick" style="color:#6b8072"><a href="#035539" label="[03:55:39]">&lt;oriansj&gt;</a></span><span class="message">yeah, your build command is missing files like: -f lib/linux/${mes_cpu}-mes-m2/_exit.c, -f lib/linux/${mes_cpu}-mes-m2/_write.c, -f lib/stub/__raise.c, -f src/m2.c and seem to be using -f src/cc.c instead of src/m2.c and would have build issues because of it as well</span></div><div class="line" id="035627"><span class="nick" style="color:#6b8072"><a href="#035627" label="[03:56:27]">&lt;oriansj&gt;</a></span><span class="message">the kaem.run command is essential when bootstrapping</span></div><div class="line" id="035707"><span class="nick" style="color:#2e2a4a"><a href="#035707" label="[03:57:07]">&lt;vancz&gt;</a></span><span class="message">though, even with the CONSTANT thing, that file is still there in the list</span></div><div class="line" id="035839"><span class="nick" style="color:#6b8072"><a href="#035839" label="[03:58:39]">&lt;oriansj&gt;</a></span><span class="message">and the link between mes.c and M2-Planet is very touchy</span></div><div class="line" id="040111"><span class="nick" style="color:#2e2a4a"><a href="#040111" label="[04:01:11]">&lt;vancz&gt;</a></span><span class="message">Ok, I'm going to get some sleep now, thanks! I'll pass this on.</span></div><div class="line" id="040359"><span class="nick" style="color:#2e2a4a"><a href="#040359" label="[04:03:59]">&lt;vancz&gt;</a></span><span class="message">oriansj: Ok actually, one more thing. I have a case of m2-planet segfaulting in <a rel="nofollow" href="https://paste.debian.net/1253261/">https://paste.debian.net/1253261/</a>  (WHILE_handle_define_2), though its about a year old version of the upstream repos IIUC.</span></div><div class="line" id="040404"><span class="nick" style="color:#2e2a4a"><a href="#040404" label="[04:04:04]">&lt;vancz&gt;</a></span><span class="message">Do you know anything about this?</span></div><div class="line" id="040602"><span class="nick" style="color:#6b8072"><a href="#040602" label="[04:06:02]">&lt;oriansj&gt;</a></span><span class="message">well that would be a while loop in the function handle_define which is part of the C macro functionality</span></div><div class="line" id="040638"><span class="nick" style="color:#2e2a4a"><a href="#040638" label="[04:06:38]">&lt;vancz&gt;</a></span><span class="message">Yeah, that's about as far as I got.</span></div><div class="line" id="040714"><span class="nick" style="color:#6b8072"><a href="#040714" label="[04:07:14]">&lt;oriansj&gt;</a></span><span class="message">which means there was a #define macro that caused it to walk off the end of the input list</span></div><div class="line" id="040756"><span class="nick" style="color:#6b8072"><a href="#040756" label="[04:07:56]">&lt;oriansj&gt;</a></span><span class="message">and I did find a few of those while fuzzing and cleared those out but there may be more yet unfound</span></div><div class="line" id="040833"><span class="nick" style="color:#2e2a4a"><a href="#040833" label="[04:08:33]">&lt;vancz&gt;</a></span><span class="message">well, it's also not the latest code so it may be a crash that's solved in an existing patch</span></div><div class="line" id="040852"><span class="nick" style="color:#6b8072"><a href="#040852" label="[04:08:52]">&lt;oriansj&gt;</a></span><span class="message">well fortunately it would be trivial for you to test</span></div><div class="line" id="040918"><span class="nick" style="color:#2e2a4a"><a href="#040918" label="[04:09:18]">&lt;vancz&gt;</a></span><span class="message">I got into the whole mess above by trying to update...</span></div><div class="line" id="040945"><span class="nick" style="color:#2e2a4a"><a href="#040945" label="[04:09:45]">&lt;vancz&gt;</a></span><span class="message">unless you mean something  else</span></div><div class="line" id="040946"><span class="nick" style="color:#6b8072"><a href="#040946" label="[04:09:46]">&lt;oriansj&gt;</a></span><span class="message">as M2-Planet built locally via git clone can just be passed the same arguments and it should produce the exact same output (or in your case an error message)</span></div><div class="line" id="041004"><span class="nick" style="color:#2e2a4a"><a href="#041004" label="[04:10:04]">&lt;vancz&gt;</a></span><span class="message">aha</span></div><div class="line" id="041116"><span class="nick" style="color:#6b8072"><a href="#041116" label="[04:11:16]">&lt;oriansj&gt;</a></span><span class="message">just do a git clone --recursive '<a rel="nofollow" href="https://github.com/oriansj/M2-Planet">https://github.com/oriansj/M2-Planet</a>';  cd M2-Planet ; make and you should be able to have the answer in a few seconds</span></div><div class="line" id="041130"><span class="nick" style="color:#2e2a4a"><a href="#041130" label="[04:11:30]">&lt;vancz&gt;</a></span><span class="message">yup, workin on it</span></div><div class="line" id="041151"><span class="nick" style="color:#6b8072"><a href="#041151" label="[04:11:51]">&lt;oriansj&gt;</a></span><span class="message">and if it does segfault, I can use the file(s) to figure out the why of the segfault and fix it for you</span></div><div class="line" id="041229"><span class="nick" style="color:#6b8072"><a href="#041229" label="[04:12:29]">&lt;oriansj&gt;</a></span><span class="message">usually only takes me a couple of minutes with a segfaulting test</span></div><div class="line" id="041240"><span class="nick" style="color:#2e2a4a"><a href="#041240" label="[04:12:40]">&lt;vancz&gt;</a></span><span class="message">yep, well at least it's not crashing now</span></div><div class="line" id="041241"><span class="nick" style="color:#2e2a4a"><a href="#041241" label="[04:12:41]">&lt;vancz&gt;</a></span><span class="message">Unknown type FILE</span></div><div class="line" id="041241"><span class="nick" style="color:#2e2a4a"><a href="#041241" label="[04:12:41]">&lt;vancz&gt;</a></span><span class="message">//nix/store/ind2yfndjd5sffx9ndcb55f6f73pmrlv-source/POSIX/M2libc/amd64/Linux/bootstrap.c:29:</span></div><div class="line" id="041319"><span class="nick" style="color:#2e2a4a"><a href="#041319" label="[04:13:19]">&lt;vancz&gt;</a></span><span class="message">so probably some messup with the deps</span></div><div class="line" id="041644"><span class="nick" style="color:#6b8072"><a href="#041644" label="[04:16:44]">&lt;oriansj&gt;</a></span><span class="message">vancz: well when using --bootstrap-mode FILE is defined inside of M2-Planet but without it, you need to -f M2libc/stdio.c to include the definition of what FILE is</span></div><div class="line" id="041715"><span class="nick" style="color:#6b8072"><a href="#041715" label="[04:17:15]">&lt;oriansj&gt;</a></span><span class="message">before your use FILE in your code of course</span></div><div class="line" id="041724"><span class="nick" style="color:#2e2a4a"><a href="#041724" label="[04:17:24]">&lt;vancz&gt;</a></span><span class="message">aha.</span></div><div class="line" id="041725"><span class="nick" style="color:#6b8072"><a href="#041725" label="[04:17:25]">&lt;oriansj&gt;</a></span><span class="message">^your^you^</span></div><div class="line" id="041918"><span class="nick" style="color:#6b8072"><a href="#041918" label="[04:19:18]">&lt;oriansj&gt;</a></span><span class="message">the probably most annoying bit of M2-Planet is you have to define things (or prototype them) prior to use (which is just C being super strict)</span></div><div class="line" id="042040"><span class="nick" style="color:#2e2a4a"><a href="#042040" label="[04:20:40]">&lt;vancz&gt;</a></span><span class="message">luckily I'm not writing any of this</span></div><div class="line" id="042118"><span class="nick" style="color:#2e2a4a"><a href="#042118" label="[04:21:18]">&lt;vancz&gt;</a></span><span class="message">its very helpful that you were around</span></div><div class="line" id="042221"><span class="nick" style="color:#6b8072"><a href="#042221" label="[04:22:21]">&lt;oriansj&gt;</a></span><span class="message">well I'm usually on everyday, so even if I am not online, I am usually able to respond within 24 hours</span></div><div class="line" id="042302"><span class="nick" style="color:#6b8072"><a href="#042302" label="[04:23:02]">&lt;oriansj&gt;</a></span><span class="message">feel free to dump questions and people online will answer if they can and I'll certainly help how I can when I get online.</span></div><div class="line" id="043000"><span class="nick" style="color:#2e2a4a"><a href="#043000" label="[04:30:00]">&lt;vancz&gt;</a></span><span class="message">Ok this command just seems generally screwed</span></div><div class="line" id="043028"><span class="nick" style="color:#2e2a4a"><a href="#043028" label="[04:30:28]">&lt;vancz&gt;</a></span><span class="message">this whole thing probably needs to be rebuilt to the example</span></div><div class="line" id="043108"><span class="nick" style="color:#2e2a4a"><a href="#043108" label="[04:31:08]">&lt;vancz&gt;</a></span><span class="message">or I'm adding the wrong things in the wrong spot</span></div><div class="line" id="043144"><span class="nick" style="color:#6b8072"><a href="#043144" label="[04:31:44]">&lt;oriansj&gt;</a></span><span class="message">well the order of the -f files matter *alot*</span></div><div class="line" id="043155"><span class="nick" style="color:#2e2a4a"><a href="#043155" label="[04:31:55]">&lt;vancz&gt;</a></span><span class="message">yeah I figured</span></div><div class="line" id="043211"><span class="nick" style="color:#2e2a4a"><a href="#043211" label="[04:32:11]">&lt;vancz&gt;</a></span><span class="message">also stdio.c is -f-ed twice and I expect the first should be a .h?</span></div><div class="line" id="043231"><span class="nick" style="color:#2e2a4a"><a href="#043231" label="[04:32:31]">&lt;vancz&gt;</a></span><span class="message">but if I do that</span></div><div class="line" id="043231"><span class="nick" style="color:#2e2a4a"><a href="#043231" label="[04:32:31]">&lt;vancz&gt;</a></span><span class="message">//nix/store/ind2yfndjd5sffx9ndcb55f6f73pmrlv-source/POSIX/M2libc/stdio.c:37:Received int in program</span></div><div class="line" id="043231"><span class="nick" style="color:#2e2a4a"><a href="#043231" label="[04:32:31]">&lt;vancz&gt;</a></span><span class="message">happens</span></div><div class="line" id="043232"><span class="nick" style="color:#6b8072"><a href="#043232" label="[04:32:32]">&lt;oriansj&gt;</a></span><span class="message">probably</span></div><div class="line" id="043415"><span class="nick" style="color:#6b8072"><a href="#043415" label="[04:34:15]">&lt;oriansj&gt;</a></span><span class="message">vancz: you don't want to use --bootstrap-mode with M2libc/stdio.c</span></div><div class="line" id="043421"><span class="nick" style="color:#2e2a4a"><a href="#043421" label="[04:34:21]">&lt;vancz&gt;</a></span><span class="message">I'm not</span></div><div class="line" id="043426"><span class="nick" style="color:#2e2a4a"><a href="#043426" label="[04:34:26]">&lt;vancz&gt;</a></span><span class="message">one sec</span></div><div class="line" id="043517"><span class="nick" style="color:#2e2a4a"><a href="#043517" label="[04:35:17]">&lt;vancz&gt;</a></span><span class="message">oriansj: the current mess <a rel="nofollow" href="https://paste.debian.net/1253264/">https://paste.debian.net/1253264/</a> </span></div><div class="line" id="043614"><span class="nick" style="color:#2e2a4a"><a href="#043614" label="[04:36:14]">&lt;vancz&gt;</a></span><span class="message">sleep attempt #2, talk to yall later.</span></div><div class="line" id="043738"><span class="nick" style="color:#6b8072"><a href="#043738" label="[04:37:38]">&lt;oriansj&gt;</a></span><span class="message">you probably mean / when you put ///</span></div><div class="line" id="044008"><span class="nick" style="color:#6b8072"><a href="#044008" label="[04:40:08]">&lt;oriansj&gt;</a></span><span class="message">and I don't think mes.c is compatible with M2libc right now; so you'll have to leverage meslibc which only janneke is really familiar with.</span></div><div class="line" id="050934"><span class="nick" style="color:#80b1d3"><a href="#050934" label="[05:09:34]">&lt;markjenkinssksp&gt;</a></span><span class="message">a bunch of days ago I had a memory of coming across a hobby C++ compiler that claimed to compile newer GCC, but I know believe my memory was faulty</span></div><div class="line" id="051016"><span class="nick" style="color:#6d2462"><a href="#051016" label="[05:10:16]">&lt;sam_&gt;</a></span><span class="message">not thinking of cproc which is a C compiler?</span></div><div class="line" id="051026"><span class="nick" style="color:#80b1d3"><a href="#051026" label="[05:10:26]">&lt;markjenkinssksp&gt;</a></span><span class="message">I believe now that I was thinking of the C compiler <a rel="nofollow" href="https://github.com/michaelforney/cproc">https://github.com/michaelforney/cproc</a> </span></div><div class="line" id="051028"><span class="nick" style="color:#6d2462"><a href="#051028" label="[05:10:28]">&lt;sam_&gt;</a></span><span class="message">:)</span></div><div class="line" id="051057"><span class="nick" style="color:#80b1d3"><a href="#051057" label="[05:10:57]">&lt;markjenkinssksp&gt;</a></span><span class="message">which is said to compile one of the late GCC versions written in C before the C++ transition</span></div><div class="line" id="051350"><span class="nick" style="color:#80b1d3"><a href="#051350" label="[05:13:50]">&lt;markjenkinssksp&gt;</a></span><span class="message">taking cproc and its deps and doing a rewrite to a imparitive, memory safe, dynamic typed, byte code interpreted, early bootstraped lang is a long off fantasy project of mine</span></div><div class="line" id="051401"><span class="nick" style="color:#6b8072"><a href="#051401" label="[05:14:01]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: well one also has to bootstrap qbe as well to use cproc if I remember correctly</span></div><div class="line" id="051411"><span class="nick" style="color:#80b1d3"><a href="#051411" label="[05:14:11]">&lt;markjenkinssksp&gt;</a></span><span class="message">indeed</span></div><div class="line" id="051443"><span class="nick" style="color:#80b1d3"><a href="#051443" label="[05:14:43]">&lt;markjenkinssksp&gt;</a></span><span class="message">I would consider that a comforting abstraction, allows for breaking the problem down and starting low level and then building upon it</span></div><div class="line" id="051606"><span class="nick" style="color:#80b1d3"><a href="#051606" label="[05:16:06]">&lt;markjenkinssksp&gt;</a></span><span class="message">still making a little headway on the current hobby project way further down the stack, worked it over a bit today while waiting at a clinic</span></div><div class="line" id="051713"><span class="nick" style="color:#6b8072"><a href="#051713" label="[05:17:13]">&lt;oriansj&gt;</a></span><span class="message">honestly, I'm still working up the courage to restart M3. Because it is a very big thing and it is hard for me to find large blocks of time to work on it</span></div><div class="line" id="051721"><span class="nick" style="color:#80b1d3"><a href="#051721" label="[05:17:21]">&lt;markjenkinssksp&gt;</a></span><span class="message">I don't really expect to solve the yacc licensing problem with my odd approach before gash gets enough bash compat, but I'm scratching other itches while at it too</span></div><div class="line" id="051838"><span class="nick" style="color:#6b8072"><a href="#051838" label="[05:18:38]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: who cares if someone beats you to a solution if it is fun to work on?</span></div><div class="line" id="051850"><span class="nick" style="color:#80b1d3"><a href="#051850" label="[05:18:50]">&lt;markjenkinssksp&gt;</a></span><span class="message">because you are a mad god programmer in imperative style oriansj, I do hope to give you a better imperative lang to work with on my roadmap, but who knows how fast that will happen or if what I put out there turns out to be a lang you'd like to use</span></div><div class="line" id="051855"><span class="nick" style="color:#6b8072"><a href="#051855" label="[05:18:55]">&lt;oriansj&gt;</a></span><span class="message">besides the more possible bootstrapping paths the better.</span></div><div class="line" id="051912"><span class="nick" style="color:#80b1d3"><a href="#051912" label="[05:19:12]">&lt;markjenkinssksp&gt;</a></span><span class="message">indeed, and I like the idea of gash for other contexts</span></div><div class="line" id="051945"><span class="nick" style="color:#80b1d3"><a href="#051945" label="[05:19:45]">&lt;markjenkinssksp&gt;</a></span><span class="message">and so I don't really see it as a race or anything like that, somebody will get there first, but I'll be interested in what I'm working on either way</span></div><div class="line" id="052110"><span class="nick" style="color:#6b8072"><a href="#052110" label="[05:21:10]">&lt;oriansj&gt;</a></span><span class="message">and removing both mes.c/mescc and TCC from the bootstrapping path feels like unneeded overkill</span></div><div class="line" id="052117"><span class="nick" style="color:#80b1d3"><a href="#052117" label="[05:21:17]">&lt;markjenkinssksp&gt;</a></span><span class="message">If, and it's still a big if, but if I manage to write a parser generator that's bootstrappable, I do wonder if folks will think I'm on an interesting track or if folks will just see me as doing challanging work with a lang otherwise too challanging to use</span></div><div class="line" id="052255"><span class="nick" style="color:#6b8072"><a href="#052255" label="[05:22:55]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: well not everyone agrees on what is interesting or what is challanging and you'll likely find a few people who find it interesting and a few who just find it challanging.</span></div><div class="line" id="052312"><span class="nick" style="color:#80b1d3"><a href="#052312" label="[05:23:12]">&lt;markjenkinssksp&gt;</a></span><span class="message">I think you're right oriansj about the overkill, though part of me in the long run would like it if we had less performant bootstrap paths that minimized the amount of arch specific code, I do feel bad for folks having to do a lot of arch specific assembler, arch specific work in M2planet, arch specific work in mescc, arch specific work in tcc</span></div><div class="line" id="052343"><span class="nick" style="color:#80b1d3"><a href="#052343" label="[05:23:43]">&lt;markjenkinssksp&gt;</a></span><span class="message">all the work folks are doing though in assember will have nice performance for common archs</span></div><div class="line" id="052507"><span class="nick" style="color:#80b1d3"><a href="#052507" label="[05:25:07]">&lt;markjenkinssksp&gt;</a></span><span class="message">mescc is a super big win on both the inspiration front and diverse double compiling front</span></div><div class="line" id="052532"><span class="nick" style="color:#80b1d3"><a href="#052532" label="[05:25:32]">&lt;markjenkinssksp&gt;</a></span><span class="message">and perhaps even the audability front, if scheme folks feel like they understand it and can grok it quickly</span></div><div class="line" id="052614"><span class="nick" style="color:#80b1d3"><a href="#052614" label="[05:26:14]">&lt;markjenkinssksp&gt;</a></span><span class="message">anyway, that's all for now</span></div><div class="line" id="052713"><span class="nick" style="color:#6b8072"><a href="#052713" label="[05:27:13]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: indeed MesCC certainly gave us a rope bootstrapping path for x86 and hopefully when more architectures are supported that it'll provide a robust path for all Guix bootstrap architectures.</span></div><div class="line" id="091046"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="142152"><span class="nick">***</span><span class="message notice">blockhead_ is now known as blockhead</span></div><div class="line" id="224344"><span class="nick" style="color:#234e69"><a href="#224344" label="[22:43:44]">&lt;muurkha&gt;</a></span><span class="message">interesting discussion of compilers: <a rel="nofollow" href="http://lambda-the-ultimate.org/node/5648">http://lambda-the-ultimate.org/node/5648</a> </span></div><div class="line" id="230546"><span class="nick" style="color:#6c3d55"><a href="#230546" label="[23:05:46]">&lt;drakonis&gt;</a></span><span class="message">oh, its back up?</span></div><div class="line" id="231605"><span class="nick" style="color:#234e69"><a href="#231605" label="[23:16:05]">&lt;muurkha&gt;</a></span><span class="message">yup</span></div><div class="line" id="235047"><span class="nick" style="color:#6b8072"><a href="#235047" label="[23:50:47]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I guess cc_* would be #7 and and M2-Planet would be #2</span></div><div class="line" id="235205"><span class="nick" style="color:#234e69"><a href="#235205" label="[23:52:05]">&lt;muurkha&gt;</a></span><span class="message">cc_* would be Chez Scheme and M2-Planet would be the Swift compiler?</span></div><div class="line" id="235428"><span class="nick" style="color:#6b8072"><a href="#235428" label="[23:54:28]">&lt;oriansj&gt;</a></span><span class="message">muurkha: #7 Forget tradition and implement everything directly by hand and #2 Use compiler-friendly languages, by which he is really taking about languages that are good for implementing compilers</span></div><div class="line" id="235640"><span class="nick" style="color:#234e69"><a href="#235640" label="[23:56:40]">&lt;muurkha&gt;</a></span><span class="message">oh, not Specimen #2 and Specimen #7, but Variants #2 and #7</span></div><div class="line" id="235659"><span class="nick" style="color:#234e69"><a href="#235659" label="[23:56:59]">&lt;muurkha&gt;</a></span><span class="message">sure, Scheme is a Lisp, and it's easier to write compilers in Lisp than in C</span></div><div class="line" id="235703"><span class="nick" style="color:#234e69"><a href="#235703" label="[23:57:03]">&lt;muurkha&gt;</a></span><span class="message">but Scheme is no ML</span></div><div class="line" id="235755"><span class="nick" style="color:#6b8072"><a href="#235755" label="[23:57:55]">&lt;oriansj&gt;</a></span><span class="message">I wonder if anyone wrote an ML in C before</span></div><div class="line" id="235814"><span class="nick" style="color:#234e69"><a href="#235814" label="[23:58:14]">&lt;muurkha&gt;</a></span><span class="message">it's a good question</span></div><div class="line" id="235835"><span class="nick" style="color:#6c3d55"><a href="#235835" label="[23:58:35]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="http://lambda-the-ultimate.org/node/5640">http://lambda-the-ultimate.org/node/5640</a> </span></div><div class="line" id="235849"><span class="nick" style="color:#6c3d55"><a href="#235849" label="[23:58:49]">&lt;drakonis&gt;</a></span><span class="message">algebraic effects no longer fashionable</span></div><br /></div></body></html>