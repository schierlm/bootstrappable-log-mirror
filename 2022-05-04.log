<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000028"><span class="nick" style="color:#8dd3c7"><a href="#000028" label="[00:00:28]">&lt;stikonas&gt;</a></span><span class="message">but building mes-m2-&gt;tcc still ends up faster than mes-m2-&gt;mes-&gt;tcc</span></div><div class="line" id="000037"><span class="nick" style="color:#8dd3c7"><a href="#000037" label="[00:00:37]">&lt;stikonas&gt;</a></span><span class="message">doesn't matter too much...</span></div><div class="line" id="000117"><span class="nick" style="color:#2e2a4a"><a href="#000117" label="[00:01:17]">&lt;achaninja&gt;</a></span><span class="message">I see</span></div><div class="line" id="000130"><span class="nick" style="color:#8dd3c7"><a href="#000130" label="[00:01:30]">&lt;stikonas&gt;</a></span><span class="message">I guess the one built by gcc would be even faster</span></div><div class="line" id="000142"><span class="nick" style="color:#2e2a4a"><a href="#000142" label="[00:01:42]">&lt;achaninja&gt;</a></span><span class="message">for testing im just using guile because i presume its much faster than mes</span></div><div class="line" id="000142"><span class="nick" style="color:#8dd3c7"><a href="#000142" label="[00:01:42]">&lt;stikonas&gt;</a></span><span class="message">yes, it should be much faster</span></div><div class="line" id="000149"><span class="nick" style="color:#2e2a4a"><a href="#000149" label="[00:01:49]">&lt;achaninja&gt;</a></span><span class="message">maybe i should get guile 3</span></div><div class="line" id="000203"><span class="nick" style="color:#8dd3c7"><a href="#000203" label="[00:02:03]">&lt;stikonas&gt;</a></span><span class="message">though building guile 3 is much slower than building mes</span></div><div class="line" id="000213"><span class="nick" style="color:#8dd3c7"><a href="#000213" label="[00:02:13]">&lt;stikonas&gt;</a></span><span class="message">but I guess you don't count guile building time</span></div><div class="line" id="000242"><span class="nick" style="color:#2e2a4a"><a href="#000242" label="[00:02:42]">&lt;achaninja&gt;</a></span><span class="message">nah, not for this</span></div><div class="line" id="000300"><span class="nick" style="color:#2e2a4a"><a href="#000300" label="[00:03:00]">&lt;achaninja&gt;</a></span><span class="message">im really curious if i can build some c compilers other than tinycc with mes</span></div><div class="line" id="000306"><span class="nick" style="color:#2e2a4a"><a href="#000306" label="[00:03:06]">&lt;achaninja&gt;</a></span><span class="message">mescc</span></div><div class="line" id="000412"><span class="nick" style="color:#6b8072"><a href="#000412" label="[00:04:12]">&lt;rkeene&gt;</a></span><span class="message">Probably 8cc</span></div><div class="line" id="000418"><span class="nick" style="color:#2e2a4a"><a href="#000418" label="[00:04:18]">&lt;achaninja&gt;</a></span><span class="message">I guess it might not work, each new codebase probably uses different C features</span></div><div class="line" id="000502"><span class="nick" style="color:#6b8072"><a href="#000502" label="[00:05:02]">&lt;rkeene&gt;</a></span><span class="message">Maybe ELVM</span></div><div class="line" id="000502"><span class="nick" style="color:#2e2a4a"><a href="#000502" label="[00:05:02]">&lt;achaninja&gt;</a></span><span class="message">I know the author of cproc</span></div><div class="line" id="000502"><span class="nick" style="color:#2e2a4a"><a href="#000502" label="[00:05:02]">&lt;achaninja&gt;</a></span><span class="message">so i want to try that one for sure</span></div><div class="line" id="000502"><span class="nick" style="color:#2e2a4a"><a href="#000502" label="[00:05:02]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/michaelforney/cproc">https://github.com/michaelforney/cproc</a> </span></div><div class="line" id="000503"><span class="nick" style="color:#2e2a4a"><a href="#000503" label="[00:05:03]">&lt;achaninja&gt;</a></span><span class="message">it is able to compile gcc</span></div><div class="line" id="000535"><span class="nick" style="color:#6b8072"><a href="#000535" label="[00:05:35]">&lt;rkeene&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/shinh/elvm">https://github.com/shinh/elvm</a> </span></div><div class="line" id="000536"><span class="nick" style="color:#2e2a4a"><a href="#000536" label="[00:05:36]">&lt;achaninja&gt;</a></span><span class="message">interesting haha</span></div><div class="line" id="000544"><span class="nick" style="color:#2e2a4a"><a href="#000544" label="[00:05:44]">&lt;achaninja&gt;</a></span><span class="message">I contributed a small amount of code to 8cc</span></div><div class="line" id="000555"><span class="nick" style="color:#2e2a4a"><a href="#000555" label="[00:05:55]">&lt;achaninja&gt;</a></span><span class="message">had not heard of elvm</span></div><div class="line" id="000602"><span class="nick" style="color:#8dd3c7"><a href="#000602" label="[00:06:02]">&lt;stikonas&gt;</a></span><span class="message">achaninja: yes, that's an interesting question for which we don't know the answer</span></div><div class="line" id="000645"><span class="nick" style="color:#6b8072"><a href="#000645" label="[00:06:45]">&lt;rkeene&gt;</a></span><span class="message">It's great for compiling your C code to BF, which can then be run by a trival BF VM</span></div><div class="line" id="000700"><span class="nick" style="color:#2e2a4a"><a href="#000700" label="[00:07:00]">&lt;achaninja&gt;</a></span><span class="message">haha :P</span></div><div class="line" id="000702"><span class="nick" style="color:#6b8072"><a href="#000702" label="[00:07:02]">&lt;rkeene&gt;</a></span><span class="message">Or you can compile your C code to C, which you can then use a C compiler to compile.</span></div><div class="line" id="000713"><span class="nick" style="color:#8dd3c7"><a href="#000713" label="[00:07:13]">&lt;stikonas&gt;</a></span><span class="message">although I doubt that any other compiler would be as capable as tcc</span></div><div class="line" id="000733"><span class="nick" style="color:#8dd3c7"><a href="#000733" label="[00:07:33]">&lt;stikonas&gt;</a></span><span class="message">though maybe it can replace tcc 0.9.26 stage</span></div><div class="line" id="000811"><span class="nick" style="color:#6b8072"><a href="#000811" label="[00:08:11]">&lt;rkeene&gt;</a></span><span class="message">I wrote a more system-oriented BF called SF:  devel/sf/    with a simple VM: <a rel="nofollow" href="https://rkeene.org/viewer/projects/bf/sf/sf.c.htm">https://rkeene.org/viewer/projects/bf/sf/sf.c.htm</a> </span></div><div class="line" id="000821"><span class="nick" style="color:#6b8072"><a href="#000821" label="[00:08:21]">&lt;rkeene&gt;</a></span><span class="message">(Assembler: <a rel="nofollow" href="https://rkeene.org/viewer/projects/bf/sf/sfc.c.htm">https://rkeene.org/viewer/projects/bf/sf/sfc.c.htm</a>  )</span></div><div class="line" id="000822"><span class="nick" style="color:#80b1d3"><a href="#000822" label="[00:08:22]">&lt;muurkha&gt;</a></span><span class="message">rkeene: oh neat</span></div><div class="line" id="000901"><span class="nick" style="color:#2e2a4a"><a href="#000901" label="[00:09:01]">&lt;achaninja&gt;</a></span><span class="message">the main advantage of tcc is the embedded assembler</span></div><div class="line" id="000904"><span class="nick" style="color:#6b8072"><a href="#000904" label="[00:09:04]">&lt;rkeene&gt;</a></span><span class="message">RLE (run-length encoding) example program: <a rel="nofollow" href="https://rkeene.org/projects/bf/sf/rle.sfc">https://rkeene.org/projects/bf/sf/rle.sfc</a> </span></div><div class="line" id="000909"><span class="nick" style="color:#2e2a4a"><a href="#000909" label="[00:09:09]">&lt;achaninja&gt;</a></span><span class="message">and linker</span></div><div class="line" id="000931"><span class="nick" style="color:#2e2a4a"><a href="#000931" label="[00:09:31]">&lt;achaninja&gt;</a></span><span class="message">but luckily i already wrote an assembler</span></div><div class="line" id="000956"><span class="nick" style="color:#6b8072"><a href="#000956" label="[00:09:56]">&lt;rkeene&gt;</a></span><span class="message">Oops, the first URL was truncated:  <a rel="nofollow" href="https://rkeene.org/projects/bf/sf/">https://rkeene.org/projects/bf/sf/</a> </span></div><div class="line" id="001058"><span class="nick" style="color:#80b1d3"><a href="#001058" label="[00:10:58]">&lt;muurkha&gt;</a></span><span class="message">rkeene: when I wrote my first BF interpreter I immediately ran Linus Åkesson's game of life in it</span></div><div class="line" id="001138"><span class="nick" style="color:#2e2a4a"><a href="#001138" label="[00:11:38]">&lt;achaninja&gt;</a></span><span class="message">rkeene: what do you mean by system oriented?</span></div><div class="line" id="001153"><span class="nick" style="color:#80b1d3"><a href="#001153" label="[00:11:53]">&lt;muurkha&gt;</a></span><span class="message">I was impressed by how the BF spec was enough to go from zero to a virtual machine capable of running GoL in half an hour</span></div><div class="line" id="001254"><span class="nick" style="color:#6b8072"><a href="#001254" label="[00:12:54]">&lt;rkeene&gt;</a></span><span class="message">achaninja, It has an assembler which understands code/data split and instead of &quot;.&quot; and &quot;,&quot;, it has an interrupt vector (and the assembler knows how to register interupt handlers)</span></div><div class="line" id="001317"><span class="nick" style="color:#6d2462"><a href="#001317" label="[00:13:17]">&lt;fossy&gt;</a></span><span class="message">janneke: ah, ok, that is good! thank you for the update</span></div><div class="line" id="001355"><span class="nick" style="color:#6b8072"><a href="#001355" label="[00:13:55]">&lt;rkeene&gt;</a></span><span class="message">It has some default interrupt handlers -- Halt, Print String, Print Char, Get Char, but others could also be added (and the program being executed can supply its own)</span></div><div class="line" id="001427"><span class="nick" style="color:#6b8072"><a href="#001427" label="[00:14:27]">&lt;rkeene&gt;</a></span><span class="message"> <a rel="nofollow" href="https://rkeene.org/projects/bf/sf/test-2.sfc">https://rkeene.org/projects/bf/sf/test-2.sfc</a>     example assembly with an interrupt handler registered</span></div><div class="line" id="001433"><span class="nick" style="color:#80b1d3"><a href="#001433" label="[00:14:33]">&lt;muurkha&gt;</a></span><span class="message">and I wondered if it would be possible to do something similar that avoided BF's most egregious defects, like the lack of subroutines</span></div><div class="line" id="001506"><span class="nick" style="color:#80b1d3"><a href="#001506" label="[00:15:06]">&lt;muurkha&gt;</a></span><span class="message">it seems like your &quot;interrupts&quot; are really subroutines?</span></div><div class="line" id="001516"><span class="nick" style="color:#80b1d3"><a href="#001516" label="[00:15:16]">&lt;muurkha&gt;</a></span><span class="message">I mean they don't get invoked asynchronously, do they?</span></div><div class="line" id="001711"><span class="nick" style="color:#6b8072"><a href="#001711" label="[00:17:11]">&lt;rkeene&gt;</a></span><span class="message">I don't know what asynchronously means here, but the handler is invoked when the interrupt is triggered and there's no stack, so.. possibly ?</span></div><div class="line" id="001737"><span class="nick" style="color:#6b8072"><a href="#001737" label="[00:17:37]">&lt;rkeene&gt;</a></span><span class="message">There's kind of a stack, but only for the instruction pointer</span></div><div class="line" id="001842"><span class="nick" style="color:#80b1d3"><a href="#001842" label="[00:18:42]">&lt;muurkha&gt;</a></span><span class="message">well, I mean, in hardware, your keyboard interrupt might get invoked in the middle of some processing loop where the program is iterating over a lot of data</span></div><div class="line" id="001932"><span class="nick" style="color:#80b1d3"><a href="#001932" label="[00:19:32]">&lt;muurkha&gt;</a></span><span class="message">the loop gets paused, the keyboard interrupt handler runs to, say, read the keystroke into a buffer, and then it resumes the processing loop</span></div><div class="line" id="002009"><span class="nick" style="color:#80b1d3"><a href="#002009" label="[00:20:09]">&lt;muurkha&gt;</a></span><span class="message">by &quot;asynchronously&quot; I mean the interrupt handler runs independent of what the current instructions being run are</span></div><div class="line" id="002038"><span class="nick" style="color:#6b8072"><a href="#002038" label="[00:20:38]">&lt;rkeene&gt;</a></span><span class="message">That could occur here too, if we had hardware interrupts wired up to something;  You would have the IP saved, jump to the interrupt handler, and it could do something (hopefully saving the current DP -- that's not done automatically in what's implemented, but maybe it should be), and return (which resets IP)</span></div><div class="line" id="002107"><span class="nick" style="color:#80b1d3"><a href="#002107" label="[00:21:07]">&lt;muurkha&gt;</a></span><span class="message">right, but that isn't what you're using them for, is it?</span></div><div class="line" id="002206"><span class="nick" style="color:#6b8072"><a href="#002206" label="[00:22:06]">&lt;rkeene&gt;</a></span><span class="message">No, I only implemented the same interrupts as BF had -- I just also made it extensible and overridable</span></div><div class="line" id="002224"><span class="nick" style="color:#6b8072"><a href="#002224" label="[00:22:24]">&lt;rkeene&gt;</a></span><span class="message">I didn't have any reason to add hardware-style external interrupts</span></div><div class="line" id="002235"><span class="nick" style="color:#6b8072"><a href="#002235" label="[00:22:35]">&lt;rkeene&gt;</a></span><span class="message">But the code is really trivial :-D</span></div><div class="line" id="002516"><span class="nick" style="color:#80b1d3"><a href="#002516" label="[00:25:16]">&lt;muurkha&gt;</a></span><span class="message">async I/O is handy for interactive computations like compiling a program while your text editor remains responsive, and hardware interrupts can be useful there</span></div><div class="line" id="002641"><span class="nick" style="color:#80b1d3"><a href="#002641" label="[00:26:41]">&lt;muurkha&gt;</a></span><span class="message">the alternative in that case is to poll for keyboard I/O inside each of the compiler's inner loops or to have some kind of multithreading</span></div><div class="line" id="002742"><span class="nick" style="color:#6b8072"><a href="#002742" label="[00:27:42]">&lt;rkeene&gt;</a></span><span class="message">Sure, and a set of programmable timers and a clock would be useful for that</span></div><div class="line" id="002744"><span class="nick" style="color:#80b1d3"><a href="#002744" label="[00:27:44]">&lt;muurkha&gt;</a></span><span class="message">I think the register-interrupt-vector approach is a very nice way of adding a subroutine mechanism to BF</span></div><div class="line" id="002835"><span class="nick" style="color:#80b1d3"><a href="#002835" label="[00:28:35]">&lt;muurkha&gt;</a></span><span class="message">yeah, although you really only need a timer interrupt to support time-sharing between multiple background tasks, and you only need one</span></div><div class="line" id="002954"><span class="nick" style="color:#6b8072"><a href="#002954" label="[00:29:54]">&lt;rkeene&gt;</a></span><span class="message">Trivial to add, the goal here was to make programs not a whole system so I left out pretty much everything I've written in other VMs in the past</span></div><div class="line" id="003122"><span class="nick" style="color:#80b1d3"><a href="#003122" label="[00:31:22]">&lt;muurkha&gt;</a></span><span class="message">here's the most recent VM I wrote: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/trama">http://canonical.org/~kragen/sw/dev3/trama</a> </span></div><div class="line" id="003148"><span class="nick" style="color:#80b1d3"><a href="#003148" label="[00:31:48]">&lt;muurkha&gt;</a></span><span class="message">a week ago</span></div><div class="line" id="003156"><span class="nick" style="color:#6b8072"><a href="#003156" label="[00:31:56]">&lt;rkeene&gt;</a></span><span class="message">sf is from 2008 or earlier</span></div><div class="line" id="003223"><span class="nick" style="color:#80b1d3"><a href="#003223" label="[00:32:23]">&lt;muurkha&gt;</a></span><span class="message">it's not as intellectually interesting as sf</span></div><div class="line" id="003307"><span class="nick" style="color:#80b1d3"><a href="#003307" label="[00:33:07]">&lt;muurkha&gt;</a></span><span class="message">but it makes cool animations</span></div><div class="line" id="003331"><span class="nick" style="color:#6b8072"><a href="#003331" label="[00:33:31]">&lt;rkeene&gt;</a></span><span class="message">Next is to add SF support to ELVM, then compile TCC using ELVM ;-)</span></div><div class="line" id="003551"><span class="nick" style="color:#2e2a4a"><a href="#003551" label="[00:35:51]">&lt;achaninja&gt;</a></span><span class="message">does anyone know the status of mescc amd64 support?</span></div><div class="line" id="003557"><span class="nick" style="color:#2e2a4a"><a href="#003557" label="[00:35:57]">&lt;achaninja&gt;</a></span><span class="message">it says it cannoy build tcc?</span></div><div class="line" id="003602"><span class="nick" style="color:#2e2a4a"><a href="#003602" label="[00:36:02]">&lt;achaninja&gt;</a></span><span class="message">cannot*</span></div><div class="line" id="004047"><span class="nick" style="color:#8dd3c7"><a href="#004047" label="[00:40:47]">&lt;stikonas&gt;</a></span><span class="message">achaninja: it might be more of an issue of patching tcc and not mescc</span></div><div class="line" id="004116"><span class="nick" style="color:#2e2a4a"><a href="#004116" label="[00:41:16]">&lt;achaninja&gt;</a></span><span class="message">i am trying to compile a simple printf with mescc atm</span></div><div class="line" id="004119"><span class="nick" style="color:#2e2a4a"><a href="#004119" label="[00:41:19]">&lt;achaninja&gt;</a></span><span class="message">i get</span></div><div class="line" id="004140"><span class="nick" style="color:#2e2a4a"><a href="#004140" label="[00:41:40]">&lt;achaninja&gt;</a></span><span class="message">Target label printf is not valid</span></div><div class="line" id="004147"><span class="nick" style="color:#2e2a4a"><a href="#004147" label="[00:41:47]">&lt;achaninja&gt;</a></span><span class="message">however puts works fine</span></div><div class="line" id="004204"><span class="nick" style="color:#2e2a4a"><a href="#004204" label="[00:42:04]">&lt;achaninja&gt;</a></span><span class="message">I can see printf is not included in libc.a for some reason</span></div><div class="line" id="004301"><span class="nick" style="color:#2e2a4a"><a href="#004301" label="[00:43:01]">&lt;achaninja&gt;</a></span><span class="message">any idea why that might be the case?</span></div><div class="line" id="004423"><span class="nick" style="color:#8dd3c7"><a href="#004423" label="[00:44:23]">&lt;stikonas&gt;</a></span><span class="message">I think because it's not necessary</span></div><div class="line" id="004432"><span class="nick" style="color:#8dd3c7"><a href="#004432" label="[00:44:32]">&lt;stikonas&gt;</a></span><span class="message">if tcc does not use it...</span></div><div class="line" id="004445"><span class="nick" style="color:#8dd3c7"><a href="#004445" label="[00:44:45]">&lt;stikonas&gt;</a></span><span class="message">although strange, we do build quite a bit of stuff</span></div><div class="line" id="004451"><span class="nick" style="color:#8dd3c7"><a href="#004451" label="[00:44:51]">&lt;stikonas&gt;</a></span><span class="message">can't be that nothing uses pritnf</span></div><div class="line" id="004515"><span class="nick" style="color:#8dd3c7"><a href="#004515" label="[00:45:15]">&lt;stikonas&gt;</a></span><span class="message">printf is in include/stdio.h</span></div><div class="line" id="004537"><span class="nick" style="color:#8dd3c7"><a href="#004537" label="[00:45:37]">&lt;stikonas&gt;</a></span><span class="message">and in stdio/printf.c</span></div><div class="line" id="004544"><span class="nick" style="color:#8dd3c7"><a href="#004544" label="[00:45:44]">&lt;stikonas&gt;</a></span><span class="message">lib/stdio/printf.c</span></div><div class="line" id="004551"><span class="nick" style="color:#2e2a4a"><a href="#004551" label="[00:45:51]">&lt;achaninja&gt;</a></span><span class="message">maybe im using libcmini</span></div><div class="line" id="004554"><span class="nick" style="color:#8dd3c7"><a href="#004554" label="[00:45:54]">&lt;stikonas&gt;</a></span><span class="message">could be</span></div><div class="line" id="004608"><span class="nick" style="color:#2e2a4a"><a href="#004608" label="[00:46:08]">&lt;achaninja&gt;</a></span><span class="message">I don't know how to control that haha</span></div><div class="line" id="004612"><span class="nick" style="color:#2e2a4a"><a href="#004612" label="[00:46:12]">&lt;achaninja&gt;</a></span><span class="message">I just see it mentioned</span></div><div class="line" id="004618"><span class="nick" style="color:#8dd3c7"><a href="#004618" label="[00:46:18]">&lt;stikonas&gt;</a></span><span class="message">libcmini is probably enough for mes itself</span></div><div class="line" id="005108"><span class="nick" style="color:#2e2a4a"><a href="#005108" label="[00:51:08]">&lt;achaninja&gt;</a></span><span class="message">yeah</span></div><div class="line" id="005132"><span class="nick" style="color:#2e2a4a"><a href="#005132" label="[00:51:32]">&lt;achaninja&gt;</a></span><span class="message">that must be the case, trying to work out how to get the libc used to build tcc instead</span></div><div class="line" id="005857"><span class="nick" style="color:#6d2462"><a href="#005857" label="[00:58:57]">&lt;fossy&gt;</a></span><span class="message">yes, libcmini is not sufficient</span></div><div class="line" id="005909"><span class="nick" style="color:#6d2462"><a href="#005909" label="[00:59:09]">&lt;fossy&gt;</a></span><span class="message">you need to build libc+gnu version iirc</span></div><div class="line" id="005942"><span class="nick" style="color:#6d2462"><a href="#005942" label="[00:59:42]">&lt;fossy&gt;</a></span><span class="message">no, sorry libc+tcc version</span></div><div class="line" id="005950"><span class="nick" style="color:#2e2a4a"><a href="#005950" label="[00:59:50]">&lt;achaninja&gt;</a></span><span class="message">right, i found the file</span></div><div class="line" id="005957"><span class="nick" style="color:#2e2a4a"><a href="#005957" label="[00:59:57]">&lt;achaninja&gt;</a></span><span class="message">any idea how to tell mescc to use that file?</span></div><div class="line" id="005959"><span class="nick" style="color:#6d2462"><a href="#005959" label="[00:59:59]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L52">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L52</a>  all of these</span></div><div class="line" id="010007"><span class="nick" style="color:#6d2462"><a href="#010007" label="[01:00:07]">&lt;fossy&gt;</a></span><span class="message">-lc+tcc ?</span></div><div class="line" id="010049"><span class="nick" style="color:#2e2a4a"><a href="#010049" label="[01:00:49]">&lt;achaninja&gt;</a></span><span class="message">that was it!</span></div><div class="line" id="010050"><span class="nick" style="color:#2e2a4a"><a href="#010050" label="[01:00:50]">&lt;achaninja&gt;</a></span><span class="message">thank you</span></div><div class="line" id="010054"><span class="nick" style="color:#6d2462"><a href="#010054" label="[01:00:54]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="011108"><span class="nick" style="color:#8dd3c7"><a href="#011108" label="[01:11:08]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'm almost done with mes 0.24</span></div><div class="line" id="011142"><span class="nick" style="color:#8dd3c7"><a href="#011142" label="[01:11:42]">&lt;stikonas&gt;</a></span><span class="message">just updating checksums due to libc changes</span></div><div class="line" id="011155"><span class="nick" style="color:#6d2462"><a href="#011155" label="[01:11:55]">&lt;fossy&gt;</a></span><span class="message">sounds good</span></div><div class="line" id="011218"><span class="nick" style="color:#8dd3c7"><a href="#011218" label="[01:12:18]">&lt;stikonas&gt;</a></span><span class="message">and these early checksums are not automated</span></div><div class="line" id="011226"><span class="nick" style="color:#6d2462"><a href="#011226" label="[01:12:26]">&lt;fossy&gt;</a></span><span class="message">ah, yes, unfortunately</span></div><div class="line" id="011241"><span class="nick" style="color:#6d2462"><a href="#011241" label="[01:12:41]">&lt;fossy&gt;</a></span><span class="message">not tooo many of those though</span></div><div class="line" id="011306"><span class="nick" style="color:#8dd3c7"><a href="#011306" label="[01:13:06]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="011315"><span class="nick" style="color:#8dd3c7"><a href="#011315" label="[01:13:15]">&lt;stikonas&gt;</a></span><span class="message">well, until recently even later checksums were manual</span></div><div class="line" id="011745"><span class="nick" style="color:#2e2a4a"><a href="#011745" label="[01:17:45]">&lt;achaninja&gt;</a></span><span class="message">btw, was mes originally written in assembly?</span></div><div class="line" id="011809"><span class="nick" style="color:#2e2a4a"><a href="#011809" label="[01:18:09]">&lt;achaninja&gt;</a></span><span class="message">I wonder how it came to be that there are C compilers in assembly</span></div><div class="line" id="011812"><span class="nick" style="color:#2e2a4a"><a href="#011812" label="[01:18:12]">&lt;achaninja&gt;</a></span><span class="message">then to mes</span></div><div class="line" id="012103"><span class="nick" style="color:#2e2a4a"><a href="#012103" label="[01:21:03]">&lt;achaninja&gt;</a></span><span class="message">I am guessing that is what turned out to be the most practical for whatever reason</span></div><div class="line" id="013032"><span class="nick" style="color:#6d2462"><a href="#013032" label="[01:30:32]">&lt;fossy&gt;</a></span><span class="message">no, mes was not originally written in assembly</span></div><div class="line" id="013107"><span class="nick" style="color:#6d2462"><a href="#013107" label="[01:31:07]">&lt;fossy&gt;</a></span><span class="message">oriansj wrote cc_x86 in assembly, which is used for M2-Planet, which is used for mes</span></div><div class="line" id="013125"><span class="nick" style="color:#6d2462"><a href="#013125" label="[01:31:25]">&lt;fossy&gt;</a></span><span class="message">that is the path that happened to take shape, essentially</span></div><div class="line" id="013152"><span class="nick" style="color:#2e2a4a"><a href="#013152" label="[01:31:52]">&lt;achaninja&gt;</a></span><span class="message">I suppose its slightly unusual in that it goes c -&gt; lisp -&gt; c again</span></div><div class="line" id="013158"><span class="nick" style="color:#2e2a4a"><a href="#013158" label="[01:31:58]">&lt;achaninja&gt;</a></span><span class="message">but whatever works :P</span></div><div class="line" id="013208"><span class="nick" style="color:#2e2a4a"><a href="#013208" label="[01:32:08]">&lt;achaninja&gt;</a></span><span class="message">bootstrapping to mes is very fast</span></div><div class="line" id="020525"><span class="nick" style="color:#2e2a4a"><a href="#020525" label="[02:05:25]">&lt;achaninja&gt;</a></span><span class="message">oriansj: would it be possible to generate a tarball for stage0 releases instead of relying on github tarballs?</span></div><div class="line" id="020530"><span class="nick" style="color:#2e2a4a"><a href="#020530" label="[02:05:30]">&lt;achaninja&gt;</a></span><span class="message">afaik github tarballs are not reproducible</span></div><div class="line" id="020550"><span class="nick" style="color:#2e2a4a"><a href="#020550" label="[02:05:50]">&lt;achaninja&gt;</a></span><span class="message">unless they are published somewhere I haven't seen</span></div><div class="line" id="020637"><span class="nick" style="color:#2e2a4a"><a href="#020637" label="[02:06:37]">&lt;achaninja&gt;</a></span><span class="message">i think github just generates them with git archive | some-gzip-version-we-dont-know</span></div><div class="line" id="021006"><span class="nick" style="color:#2e2a4a"><a href="#021006" label="[02:10:06]">&lt;achaninja&gt;</a></span><span class="message">Also I suppose github does not include the submodules</span></div><div class="line" id="021305"><span class="nick" style="color:#80b1d3"><a href="#021305" label="[02:13:05]">&lt;muurkha&gt;</a></span><span class="message">github release tarballs are in many cases just random files you upload when you create the release</span></div><div class="line" id="021849"><span class="nick" style="color:#2e2a4a"><a href="#021849" label="[02:18:49]">&lt;achaninja&gt;</a></span><span class="message">muurkha: what do you mean?</span></div><div class="line" id="021924"><span class="nick" style="color:#2e2a4a"><a href="#021924" label="[02:19:24]">&lt;achaninja&gt;</a></span><span class="message">currently we have <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/releases/tag/Release_1.5.0">https://github.com/oriansj/stage0-posix/releases/tag/Release_1.5.0</a> </span></div><div class="line" id="021937"><span class="nick" style="color:#2e2a4a"><a href="#021937" label="[02:19:37]">&lt;achaninja&gt;</a></span><span class="message">these links are unreliable</span></div><div class="line" id="022015"><span class="nick" style="color:#2e2a4a"><a href="#022015" label="[02:20:15]">&lt;achaninja&gt;</a></span><span class="message">mes on the other hand has</span></div><div class="line" id="022016"><span class="nick" style="color:#2e2a4a"><a href="#022016" label="[02:20:16]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="http://ftp.gnu.org/gnu/mes/">http://ftp.gnu.org/gnu/mes/</a> </span></div><div class="line" id="022039"><span class="nick" style="color:#2e2a4a"><a href="#022039" label="[02:20:39]">&lt;achaninja&gt;</a></span><span class="message">I suppose one may want to cross reference them with git</span></div><div class="line" id="022053"><span class="nick" style="color:#2e2a4a"><a href="#022053" label="[02:20:53]">&lt;achaninja&gt;</a></span><span class="message">but the point is they have a fixed shasum</span></div><div class="line" id="022238"><span class="nick" style="color:#80b1d3"><a href="#022238" label="[02:22:38]">&lt;muurkha&gt;</a></span><span class="message">I mean that when I created <a rel="nofollow" href="https://github.com/kragen/dercuano/releases/tag/20191230">https://github.com/kragen/dercuano/releases/tag/20191230</a>  I built dercuano-20191230.tar.gz and dercuano.20191230.pdf on my laptop and then uploaded them to GitHub through my web browser</span></div><div class="line" id="022308"><span class="nick" style="color:#2e2a4a"><a href="#022308" label="[02:23:08]">&lt;achaninja&gt;</a></span><span class="message">sure</span></div><div class="line" id="022315"><span class="nick" style="color:#80b1d3"><a href="#022315" label="[02:23:15]">&lt;muurkha&gt;</a></span><span class="message">GitHub made no attempt to produce that these build artifacts themselves or to verify them against the corresponding source code</span></div><div class="line" id="022317"><span class="nick" style="color:#2e2a4a"><a href="#022317" label="[02:23:17]">&lt;achaninja&gt;</a></span><span class="message">so</span></div><div class="line" id="022341"><span class="nick" style="color:#2e2a4a"><a href="#022341" label="[02:23:41]">&lt;achaninja&gt;</a></span><span class="message">I trust that more than github tbh - for example if you signed it with gpg and put the signature on your own domain</span></div><div class="line" id="022343"><span class="nick" style="color:#80b1d3"><a href="#022343" label="[02:23:43]">&lt;muurkha&gt;</a></span><span class="message">*produce these</span></div><div class="line" id="022410"><span class="nick" style="color:#2e2a4a"><a href="#022410" label="[02:24:10]">&lt;achaninja&gt;</a></span><span class="message">hmm</span></div><div class="line" id="022413"><span class="nick" style="color:#80b1d3"><a href="#022413" label="[02:24:13]">&lt;muurkha&gt;</a></span><span class="message">sure, that's plausible, but it definitely doesn't give you reproducibility of the binary tarball</span></div><div class="line" id="022428"><span class="nick" style="color:#80b1d3"><a href="#022428" label="[02:24:28]">&lt;muurkha&gt;</a></span><span class="message">unless the individual author has made the effort to do it (I didn't)</span></div><div class="line" id="022437"><span class="nick" style="color:#2e2a4a"><a href="#022437" label="[02:24:37]">&lt;achaninja&gt;</a></span><span class="message">yeah I know what you mean</span></div><div class="line" id="022455"><span class="nick" style="color:#80b1d3"><a href="#022455" label="[02:24:55]">&lt;muurkha&gt;</a></span><span class="message">they *did* create the source tarball and zip file from the tag</span></div><div class="line" id="022523"><span class="nick" style="color:#2e2a4a"><a href="#022523" label="[02:25:23]">&lt;achaninja&gt;</a></span><span class="message">yes, however it doesn't include any of the submodules</span></div><div class="line" id="022523"><span class="nick" style="color:#2e2a4a"><a href="#022523" label="[02:25:23]">&lt;achaninja&gt;</a></span><span class="message">so is useless</span></div><div class="line" id="022523"><span class="nick" style="color:#2e2a4a"><a href="#022523" label="[02:25:23]">&lt;achaninja&gt;</a></span><span class="message">might as well not exist</span></div><div class="line" id="022523"><span class="nick" style="color:#80b1d3"><a href="#022523" label="[02:25:23]">&lt;muurkha&gt;</a></span><span class="message">right, though in this case I didn't have any</span></div><div class="line" id="022538"><span class="nick" style="color:#2e2a4a"><a href="#022538" label="[02:25:38]">&lt;achaninja&gt;</a></span><span class="message">I can create my own stage0 tarballs</span></div><div class="line" id="022547"><span class="nick" style="color:#2e2a4a"><a href="#022547" label="[02:25:47]">&lt;achaninja&gt;</a></span><span class="message">or add a gitsubmodule to my project</span></div><div class="line" id="022551"><span class="nick" style="color:#80b1d3"><a href="#022551" label="[02:25:51]">&lt;muurkha&gt;</a></span><span class="message">didn't occur to me that git archive strips out the submodule commit hashes but I guess it does</span></div><div class="line" id="022616"><span class="nick" style="color:#2e2a4a"><a href="#022616" label="[02:26:16]">&lt;achaninja&gt;</a></span><span class="message">when I downloaded the github tarball it didn't even have the files</span></div><div class="line" id="022617"><span class="nick" style="color:#2e2a4a"><a href="#022617" label="[02:26:17]">&lt;achaninja&gt;</a></span><span class="message">unless I made a mistake</span></div><div class="line" id="022628"><span class="nick" style="color:#2e2a4a"><a href="#022628" label="[02:26:28]">&lt;achaninja&gt;</a></span><span class="message">not just the hashes</span></div><div class="line" id="022637"><span class="nick" style="color:#80b1d3"><a href="#022637" label="[02:26:37]">&lt;muurkha&gt;</a></span><span class="message">it makes sense that git submodule information would be missing</span></div><div class="line" id="022701"><span class="nick" style="color:#2e2a4a"><a href="#022701" label="[02:27:01]">&lt;achaninja&gt;</a></span><span class="message">the problem is the package manager I am using currently prefers tarballs</span></div><div class="line" id="022810"><span class="nick" style="color:#2e2a4a"><a href="#022810" label="[02:28:10]">&lt;achaninja&gt;</a></span><span class="message">I had some thoughts about creating a 'canonical tar' format that is reproducible</span></div><div class="line" id="022823"><span class="nick" style="color:#2e2a4a"><a href="#022823" label="[02:28:23]">&lt;achaninja&gt;</a></span><span class="message">and being able to canonicalize input tarballs and then hash the result</span></div><div class="line" id="022846"><span class="nick" style="color:#2e2a4a"><a href="#022846" label="[02:28:46]">&lt;achaninja&gt;</a></span><span class="message">to filter out annoying minor deviations</span></div><div class="line" id="022853"><span class="nick" style="color:#2e2a4a"><a href="#022853" label="[02:28:53]">&lt;achaninja&gt;</a></span><span class="message">like timestamps and different compression algorithms</span></div><div class="line" id="022928"><span class="nick" style="color:#80b1d3"><a href="#022928" label="[02:29:28]">&lt;muurkha&gt;</a></span><span class="message">that's an interesting idea</span></div><div class="line" id="022933"><span class="nick" style="color:#80b1d3"><a href="#022933" label="[02:29:33]">&lt;muurkha&gt;</a></span><span class="message">a tarball minifier</span></div><div class="line" id="022949"><span class="nick" style="color:#2e2a4a"><a href="#022949" label="[02:29:49]">&lt;achaninja&gt;</a></span><span class="message">more like standardizer</span></div><div class="line" id="023008"><span class="nick" style="color:#2e2a4a"><a href="#023008" label="[02:30:08]">&lt;achaninja&gt;</a></span><span class="message">but yeah :P</span></div><div class="line" id="023045"><span class="nick" style="color:#80b1d3"><a href="#023045" label="[02:30:45]">&lt;muurkha&gt;</a></span><span class="message">canonicalizer</span></div><div class="line" id="023050"><span class="nick" style="color:#80b1d3"><a href="#023050" label="[02:30:50]">&lt;muurkha&gt;</a></span><span class="message">as you said</span></div><div class="line" id="023106"><span class="nick" style="color:#2e2a4a"><a href="#023106" label="[02:31:06]">&lt;achaninja&gt;</a></span><span class="message">yeah, my other idea was to provide a web url that goes</span></div><div class="line" id="023144"><span class="nick" style="color:#2e2a4a"><a href="#023144" label="[02:31:44]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mysite/tar-canonicalizer?url=foo.tar.gz">https://mysite/tar-canonicalizer?url=foo.tar.gz</a> </span></div><div class="line" id="023210"><span class="nick" style="color:#2e2a4a"><a href="#023210" label="[02:32:10]">&lt;achaninja&gt;</a></span><span class="message">so you can just download canonicalized tars that are ready to have their hashes checked</span></div><div class="line" id="023220"><span class="nick" style="color:#2e2a4a"><a href="#023220" label="[02:32:20]">&lt;achaninja&gt;</a></span><span class="message">nixos uses the NAR format for this purpose</span></div><div class="line" id="023227"><span class="nick" style="color:#2e2a4a"><a href="#023227" label="[02:32:27]">&lt;achaninja&gt;</a></span><span class="message">however I think a new format is largely unnecessary</span></div><div class="line" id="023347"><span class="nick" style="color:#2e2a4a"><a href="#023347" label="[02:33:47]">&lt;achaninja&gt;</a></span><span class="message">muurkha: as you say</span></div><div class="line" id="023351"><span class="nick" style="color:#2e2a4a"><a href="#023351" label="[02:33:51]">&lt;achaninja&gt;</a></span><span class="message">the current releases are just random files</span></div><div class="line" id="023353"><span class="nick" style="color:#6d2462"><a href="#023353" label="[02:33:53]">&lt;fossy&gt;</a></span><span class="message">i don't think a website that does that would be really acceptable in bootstrapping, but the idea is generally a good one</span></div><div class="line" id="023358"><span class="nick" style="color:#2e2a4a"><a href="#023358" label="[02:33:58]">&lt;achaninja&gt;</a></span><span class="message">but if they were instead canonical tars they can be verified</span></div><div class="line" id="023415"><span class="nick" style="color:#2e2a4a"><a href="#023415" label="[02:34:15]">&lt;achaninja&gt;</a></span><span class="message">fossy: the website is just convenience since if you already have the hash</span></div><div class="line" id="023420"><span class="nick" style="color:#2e2a4a"><a href="#023420" label="[02:34:20]">&lt;achaninja&gt;</a></span><span class="message">it is secure</span></div><div class="line" id="023429"><span class="nick" style="color:#2e2a4a"><a href="#023429" label="[02:34:29]">&lt;achaninja&gt;</a></span><span class="message">but yeah</span></div><div class="line" id="023453"><span class="nick" style="color:#2e2a4a"><a href="#023453" label="[02:34:53]">&lt;achaninja&gt;</a></span><span class="message">One problem is I didn't know how to choose a canonical gzip compressor</span></div><div class="line" id="023505"><span class="nick" style="color:#2e2a4a"><a href="#023505" label="[02:35:05]">&lt;achaninja&gt;</a></span><span class="message">I could just select an arbitrary release of gnu gzip for example</span></div><div class="line" id="023523"><span class="nick" style="color:#6d2462"><a href="#023523" label="[02:35:23]">&lt;fossy&gt;</a></span><span class="message">well, yes, but you're still trusting that someone has verified that the canonicalizer does not tamper with sources</span></div><div class="line" id="023533"><span class="nick" style="color:#6d2462"><a href="#023533" label="[02:35:33]">&lt;fossy&gt;</a></span><span class="message">if you canonicalise on the fly then you don't have to trust that</span></div><div class="line" id="023542"><span class="nick" style="color:#2e2a4a"><a href="#023542" label="[02:35:42]">&lt;achaninja&gt;</a></span><span class="message">yeah</span></div><div class="line" id="023548"><span class="nick" style="color:#2e2a4a"><a href="#023548" label="[02:35:48]">&lt;achaninja&gt;</a></span><span class="message">your build system cna do it too</span></div><div class="line" id="023612"><span class="nick" style="color:#6d2462"><a href="#023612" label="[02:36:12]">&lt;fossy&gt;</a></span><span class="message">do gzip outputs differ from version to version these days?</span></div><div class="line" id="023623"><span class="nick" style="color:#2e2a4a"><a href="#023623" label="[02:36:23]">&lt;achaninja&gt;</a></span><span class="message">no, but im not sure if that is a guarantee</span></div><div class="line" id="025326"><span class="nick" style="color:#2e2a4a"><a href="#025326" label="[02:53:26]">&lt;achaninja&gt;</a></span><span class="message">another thing I'm not sure about</span></div><div class="line" id="025329"><span class="nick" style="color:#2e2a4a"><a href="#025329" label="[02:53:29]">&lt;achaninja&gt;</a></span><span class="message">for canonical tar</span></div><div class="line" id="025337"><span class="nick" style="color:#2e2a4a"><a href="#025337" label="[02:53:37]">&lt;achaninja&gt;</a></span><span class="message">is if you need to preserve mtime</span></div><div class="line" id="025341"><span class="nick" style="color:#2e2a4a"><a href="#025341" label="[02:53:41]">&lt;achaninja&gt;</a></span><span class="message">or at least relative mtime</span></div><div class="line" id="025407"><span class="nick" style="color:#2e2a4a"><a href="#025407" label="[02:54:07]">&lt;achaninja&gt;</a></span><span class="message">since make uses mtimes sometimes to check if it must regenerate a file</span></div><div class="line" id="025416"><span class="nick" style="color:#2e2a4a"><a href="#025416" label="[02:54:16]">&lt;achaninja&gt;</a></span><span class="message">maybe same mtime is ok</span></div><div class="line" id="025555"><span class="nick" style="color:#2e2a4a"><a href="#025555" label="[02:55:55]">&lt;achaninja&gt;</a></span><span class="message">my design for canonical tar was posix tar format with guaranteed sorting, and a fixed uid and mtime</span></div><div class="line" id="025631"><span class="nick" style="color:#2e2a4a"><a href="#025631" label="[02:56:31]">&lt;achaninja&gt;</a></span><span class="message">and normalized directory entry names</span></div><div class="line" id="025645"><span class="nick" style="color:#2e2a4a"><a href="#025645" label="[02:56:45]">&lt;achaninja&gt;</a></span><span class="message">e.g. trailing / or not for directories</span></div><div class="line" id="025814"><span class="nick" style="color:#80b1d3"><a href="#025814" label="[02:58:14]">&lt;muurkha&gt;</a></span><span class="message">I think you'd want to set all the mtimes to 0, yeah</span></div><div class="line" id="025843"><span class="nick" style="color:#80b1d3"><a href="#025843" label="[02:58:43]">&lt;muurkha&gt;</a></span><span class="message">normally you don't want to include things in your tarball that make knows how to generate</span></div><div class="line" id="025922"><span class="nick" style="color:#2e2a4a"><a href="#025922" label="[02:59:22]">&lt;achaninja&gt;</a></span><span class="message">yeah, but sometimes you don't need stuff</span></div><div class="line" id="025930"><span class="nick" style="color:#2e2a4a"><a href="#025930" label="[02:59:30]">&lt;achaninja&gt;</a></span><span class="message">for example often perl is a dependency, but only for info files</span></div><div class="line" id="025948"><span class="nick" style="color:#2e2a4a"><a href="#025948" label="[02:59:48]">&lt;achaninja&gt;</a></span><span class="message">and make checks if the info files are out of date</span></div><div class="line" id="030016"><span class="nick" style="color:#2e2a4a"><a href="#030016" label="[03:00:16]">&lt;achaninja&gt;</a></span><span class="message">but yeah, maybe that can be solved other ways if you want to</span></div><div class="line" id="030016"><span class="nick" style="color:#80b1d3"><a href="#030016" label="[03:00:16]">&lt;muurkha&gt;</a></span><span class="message">I think you can pare away those epicycles</span></div><div class="line" id="030416"><span class="nick" style="color:#2e2a4a"><a href="#030416" label="[03:04:16]">&lt;achaninja&gt;</a></span><span class="message">I think overall it will be nice to not have to wrangle so many tar options</span></div><div class="line" id="030509"><span class="nick" style="color:#2e2a4a"><a href="#030509" label="[03:05:09]">&lt;achaninja&gt;</a></span><span class="message">e.g. most of this <a rel="nofollow" href="https://reproducible-builds.org/docs/archives/">https://reproducible-builds.org/docs/archives/</a>  would not be so necessary if you can just run a standard canonicalizer</span></div><div class="line" id="033900"><span class="nick" style="color:#234e69"><a href="#033900" label="[03:39:00]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well the problem with secure and reliable source distribution is that is a much bigger problem than just a single tarball. So I left it a something for someone else to solve</span></div><div class="line" id="033925"><span class="nick" style="color:#2e2a4a"><a href="#033925" label="[03:39:25]">&lt;achaninja&gt;</a></span><span class="message">thats ok, for now I'm checking in a copy os stage0-posix into my package tree</span></div><div class="line" id="033945"><span class="nick" style="color:#2e2a4a"><a href="#033945" label="[03:39:45]">&lt;achaninja&gt;</a></span><span class="message">of*</span></div><div class="line" id="034124"><span class="nick" style="color:#2e2a4a"><a href="#034124" label="[03:41:24]">&lt;achaninja&gt;</a></span><span class="message">my package tree I'm working on is attempting to distribute source over bittorrent and ipfs</span></div><div class="line" id="034129"><span class="nick" style="color:#2e2a4a"><a href="#034129" label="[03:41:29]">&lt;achaninja&gt;</a></span><span class="message">with primary sources too</span></div><div class="line" id="034146"><span class="nick" style="color:#2e2a4a"><a href="#034146" label="[03:41:46]">&lt;achaninja&gt;</a></span><span class="message">which is why its harder to use git</span></div><div class="line" id="034211"><span class="nick" style="color:#2e2a4a"><a href="#034211" label="[03:42:11]">&lt;achaninja&gt;</a></span><span class="message">however I can just make my own trusted tarball releases</span></div><div class="line" id="034645"><span class="nick" style="color:#2e2a4a"><a href="#034645" label="[03:46:45]">&lt;achaninja&gt;</a></span><span class="message">might not work out, but will see</span></div><div class="line" id="044244"><span class="nick" style="color:#2e2a4a"><a href="#044244" label="[04:42:44]">&lt;achaninja&gt;</a></span><span class="message">oriansj: I just built the master mes-m2</span></div><div class="line" id="044246"><span class="nick" style="color:#2e2a4a"><a href="#044246" label="[04:42:46]">&lt;achaninja&gt;</a></span><span class="message">and get</span></div><div class="line" id="044257"><span class="nick" style="color:#2e2a4a"><a href="#044257" label="[04:42:57]">&lt;achaninja&gt;</a></span><span class="message">assert fail: eval/apply unknown continuation Segmentation fault (core dumped)</span></div><div class="line" id="044340"><span class="nick" style="color:#2e2a4a"><a href="#044340" label="[04:43:40]">&lt;achaninja&gt;</a></span><span class="message">when running</span></div><div class="line" id="044402"><span class="nick" style="color:#2e2a4a"><a href="#044402" label="[04:44:02]">&lt;achaninja&gt;</a></span><span class="message">./bin/mes --no-auto-compile -L module -e main scripts/mescc.scm -I include -v -S scaffold/exit-42.c</span></div><div class="line" id="044622"><span class="nick" style="color:#2e2a4a"><a href="#044622" label="[04:46:22]">&lt;achaninja&gt;</a></span><span class="message">ah wait, my PATH might not be right</span></div><div class="line" id="045422"><span class="nick" style="color:#2e2a4a"><a href="#045422" label="[04:54:22]">&lt;achaninja&gt;</a></span><span class="message">hmm no, I wonder if the example in the readme is out of date</span></div><div class="line" id="045428"><span class="nick" style="color:#2e2a4a"><a href="#045428" label="[04:54:28]">&lt;achaninja&gt;</a></span><span class="message">it points to -L module</span></div><div class="line" id="045435"><span class="nick" style="color:#2e2a4a"><a href="#045435" label="[04:54:35]">&lt;achaninja&gt;</a></span><span class="message">but nyacc is in mes/module</span></div><div class="line" id="051913"><span class="nick" style="color:#6c3d55"><a href="#051913" label="[05:19:13]">&lt;Hagfish&gt;</a></span><span class="message">achaninja: great idea to use bittorrent and ipfs.  anything that removes SPOFs and makes bootstrapping resilient is good to see</span></div><div class="line" id="051933"><span class="nick" style="color:#6c3d55"><a href="#051933" label="[05:19:33]">&lt;Hagfish&gt;</a></span><span class="message">and apparently there is a standard for cryptographic signatures in torrents: <a rel="nofollow" href="http://www.bittorrent.org/beps/bep_0035.html">http://www.bittorrent.org/beps/bep_0035.html</a> </span></div><div class="line" id="052656"><span class="nick" style="color:#80b1d3"><a href="#052656" label="[05:26:56]">&lt;muurkha&gt;</a></span><span class="message">Hagfish: is ipfs free from SPOFs?  I thought there was like a centralized blacklist of badthink files or something</span></div><div class="line" id="053738"><span class="nick" style="color:#6d2462"><a href="#053738" label="[05:37:38]">&lt;fossy&gt;</a></span><span class="message">badthink?</span></div><div class="line" id="054034"><span class="nick" style="color:#80b1d3"><a href="#054034" label="[05:40:34]">&lt;muurkha&gt;</a></span><span class="message">thoughtcrime</span></div><div class="line" id="054252"><span class="nick" style="color:#80b1d3"><a href="#054252" label="[05:42:52]">&lt;muurkha&gt;</a></span><span class="message">different regimes use different terms for it: &quot;subversive literature&quot;, &quot;fake news&quot;, &quot;rumors that undermine social stability&quot;, &quot;copyright infringement&quot;, &quot;degenerate literature&quot;</span></div><div class="line" id="055046"><span class="nick" style="color:#d9d9d9"><a href="#055046" label="[05:50:46]">&lt;pabs3&gt;</a></span><span class="message">muurkha: ah, yesterday I *didn't* actually paste the rude version to HN! what you saw was the less-rude version</span></div><div class="line" id="060924"><span class="nick" style="color:#2e2a4a"><a href="#060924" label="[06:09:24]">&lt;achaninja&gt;</a></span><span class="message">muurkha: I am trying to avoid ipfs mainly because</span></div><div class="line" id="060930"><span class="nick" style="color:#2e2a4a"><a href="#060930" label="[06:09:30]">&lt;achaninja&gt;</a></span><span class="message">i don't like how it only has a single implementation</span></div><div class="line" id="060941"><span class="nick" style="color:#2e2a4a"><a href="#060941" label="[06:09:41]">&lt;achaninja&gt;</a></span><span class="message">but it does have some useful properties that bittorrent doesn't</span></div><div class="line" id="061114"><span class="nick" style="color:#2e2a4a"><a href="#061114" label="[06:11:14]">&lt;achaninja&gt;</a></span><span class="message">I mainly want to let people keep hosting their own code if they want</span></div><div class="line" id="061150"><span class="nick" style="color:#2e2a4a"><a href="#061150" label="[06:11:50]">&lt;achaninja&gt;</a></span><span class="message">it is super annoying when a build gets interupted by a missing server, its happened to me before</span></div><div class="line" id="065852"><span class="nick" style="color:#6d2462"><a href="#065852" label="[06:58:52]">&lt;fossy&gt;</a></span><span class="message">agree</span></div><div class="line" id="071218"><span class="nick" style="color:#80b1d3"><a href="#071218" label="[07:12:18]">&lt;muurkha&gt;</a></span><span class="message">pabs3: yes, I suppose it wasn't the most inflammatory version ;)</span></div><div class="line" id="071228"><span class="nick" style="color:#80b1d3"><a href="#071228" label="[07:12:28]">&lt;muurkha&gt;</a></span><span class="message">achaninja: very</span></div><div class="line" id="081909"><span class="nick" style="color:#2e2a4a"><a href="#081909" label="[08:19:09]">&lt;achaninja&gt;</a></span><span class="message">I am struggling with m2-mes</span></div><div class="line" id="081920"><span class="nick" style="color:#2e2a4a"><a href="#081920" label="[08:19:20]">&lt;achaninja&gt;</a></span><span class="message">the master release does not seem to be running for me</span></div><div class="line" id="082123"><span class="nick" style="color:#2e2a4a"><a href="#082123" label="[08:21:23]">&lt;achaninja&gt;</a></span><span class="message">I will test the tag from live bootstrap</span></div><div class="line" id="083433"><span class="nick" style="color:#2e2a4a"><a href="#083433" label="[08:34:33]">&lt;achaninja&gt;</a></span><span class="message">ah ok found the problem</span></div><div class="line" id="083442"><span class="nick" style="color:#2e2a4a"><a href="#083442" label="[08:34:42]">&lt;achaninja&gt;</a></span><span class="message">i though nyacc was dungled in m2-mes again</span></div><div class="line" id="083455"><span class="nick" style="color:#2e2a4a"><a href="#083455" label="[08:34:55]">&lt;achaninja&gt;</a></span><span class="message">I did an ls mes/modules and saw nyacc and assumed it was there</span></div><div class="line" id="083650"><span class="nick" style="color:#2e2a4a"><a href="#083650" label="[08:36:50]">&lt;achaninja&gt;</a></span><span class="message">success</span></div><div class="line" id="084150"><span class="nick" style="color:#bc80bd"><a href="#084150" label="[08:41:50]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="084239"><span class="nick" style="color:#2e2a4a"><a href="#084239" label="[08:42:39]">&lt;achaninja&gt;</a></span><span class="message">janus: I spoke too soon, it now works fine with guile</span></div><div class="line" id="084245"><span class="nick" style="color:#2e2a4a"><a href="#084245" label="[08:42:45]">&lt;achaninja&gt;</a></span><span class="message">but segfaults with m2-mes</span></div><div class="line" id="084256"><span class="nick" style="color:#2e2a4a"><a href="#084256" label="[08:42:56]">&lt;achaninja&gt;</a></span><span class="message">debugging :P</span></div><div class="line" id="084303"><span class="nick" style="color:#2e2a4a"><a href="#084303" label="[08:43:03]">&lt;achaninja&gt;</a></span><span class="message">sorry</span></div><div class="line" id="084307"><span class="nick" style="color:#2e2a4a"><a href="#084307" label="[08:43:07]">&lt;achaninja&gt;</a></span><span class="message">janneke:</span></div><div class="line" id="084309"><span class="nick" style="color:#bc80bd"><a href="#084309" label="[08:43:09]">&lt;janneke&gt;</a></span><span class="message">well, celebrate each (little) success!</span></div><div class="line" id="084313"><span class="nick" style="color:#2e2a4a"><a href="#084313" label="[08:43:13]">&lt;achaninja&gt;</a></span><span class="message">haha</span></div><div class="line" id="084323"><span class="nick" style="color:#bc80bd"><a href="#084323" label="[08:43:23]">&lt;janneke&gt;</a></span><span class="message">it's more fun that way</span></div><div class="line" id="084333"><span class="nick" style="color:#2e2a4a"><a href="#084333" label="[08:43:33]">&lt;achaninja&gt;</a></span><span class="message">its fun, im gonna attempt to compile (parts of) another C compiler</span></div><div class="line" id="084342"><span class="nick" style="color:#2e2a4a"><a href="#084342" label="[08:43:42]">&lt;achaninja&gt;</a></span><span class="message">see what works</span></div><div class="line" id="084643"><span class="nick" style="color:#2e2a4a"><a href="#084643" label="[08:46:43]">&lt;achaninja&gt;</a></span><span class="message">guile only is at least enough to test</span></div><div class="line" id="084840"><span class="nick" style="color:#2e2a4a"><a href="#084840" label="[08:48:40]">&lt;achaninja&gt;</a></span><span class="message">I can't help but get the feeling the invocation in the mes-m2 repository is not right</span></div><div class="line" id="084844"><span class="nick" style="color:#2e2a4a"><a href="#084844" label="[08:48:44]">&lt;achaninja&gt;</a></span><span class="message">the readme</span></div><div class="line" id="084854"><span class="nick" style="color:#2e2a4a"><a href="#084854" label="[08:48:54]">&lt;achaninja&gt;</a></span><span class="message">but its also highly likely I did something else wrong</span></div><div class="line" id="085055"><span class="nick" style="color:#2e2a4a"><a href="#085055" label="[08:50:55]">&lt;achaninja&gt;</a></span><span class="message">more progress...</span></div><div class="line" id="085100"><span class="nick" style="color:#2e2a4a"><a href="#085100" label="[08:51:00]">&lt;achaninja&gt;</a></span><span class="message">the readme didn't say to set</span></div><div class="line" id="085158"><span class="nick" style="color:#2e2a4a"><a href="#085158" label="[08:51:58]">&lt;achaninja&gt;</a></span><span class="message">MES_ARENA and friends</span></div><div class="line" id="085254"><span class="nick" style="color:#2e2a4a"><a href="#085254" label="[08:52:54]">&lt;achaninja&gt;</a></span><span class="message">now I am getting....</span></div><div class="line" id="085308"><span class="nick" style="color:#2e2a4a"><a href="#085308" label="[08:53:08]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://pastebin.com/raw/jvC6dxae">https://pastebin.com/raw/jvC6dxae</a> </span></div><div class="line" id="085312"><span class="nick" style="color:#2e2a4a"><a href="#085312" label="[08:53:12]">&lt;achaninja&gt;</a></span><span class="message">spammed in my terminal</span></div><div class="line" id="085347"><span class="nick" style="color:#2e2a4a"><a href="#085347" label="[08:53:47]">&lt;achaninja&gt;</a></span><span class="message">ok success</span></div><div class="line" id="085351"><span class="nick" style="color:#2e2a4a"><a href="#085351" label="[08:53:51]">&lt;achaninja&gt;</a></span><span class="message">the readme seems incorrect</span></div><div class="line" id="085405"><span class="nick" style="color:#2e2a4a"><a href="#085405" label="[08:54:05]">&lt;achaninja&gt;</a></span><span class="message">ping oriansj</span></div><div class="line" id="085417"><span class="nick" style="color:#2e2a4a"><a href="#085417" label="[08:54:17]">&lt;achaninja&gt;</a></span><span class="message">I think theres a mistake in the readme for m2-mes</span></div><div class="line" id="085421"><span class="nick" style="color:#2e2a4a"><a href="#085421" label="[08:54:21]">&lt;achaninja&gt;</a></span><span class="message">mes-m2</span></div><div class="line" id="085437"><span class="nick" style="color:#2e2a4a"><a href="#085437" label="[08:54:37]">&lt;achaninja&gt;</a></span><span class="message">it worked when I did not specify -L module</span></div><div class="line" id="085443"><span class="nick" style="color:#2e2a4a"><a href="#085443" label="[08:54:43]">&lt;achaninja&gt;</a></span><span class="message">but the readme told me to do that</span></div><div class="line" id="085458"><span class="nick" style="color:#2e2a4a"><a href="#085458" label="[08:54:58]">&lt;achaninja&gt;</a></span><span class="message">i also had to do</span></div><div class="line" id="085505"><span class="nick" style="color:#2e2a4a"><a href="#085505" label="[08:55:05]">&lt;achaninja&gt;</a></span><span class="message">-L ../nyacc/</span></div><div class="line" id="085514"><span class="nick" style="color:#2e2a4a"><a href="#085514" label="[08:55:14]">&lt;achaninja&gt;</a></span><span class="message">../nyacc/module</span></div><div class="line" id="085518"><span class="nick" style="color:#2e2a4a"><a href="#085518" label="[08:55:18]">&lt;achaninja&gt;</a></span><span class="message">I can do a PR</span></div><div class="line" id="085526"><span class="nick" style="color:#2e2a4a"><a href="#085526" label="[08:55:26]">&lt;achaninja&gt;</a></span><span class="message">unless Im mistaken</span></div><div class="line" id="090119"><span class="nick" style="color:#2e2a4a"><a href="#090119" label="[09:01:19]">&lt;achaninja&gt;</a></span><span class="message">ok first obstacle - uint64_t</span></div><div class="line" id="090146"><span class="nick" style="color:#2e2a4a"><a href="#090146" label="[09:01:46]">&lt;achaninja&gt;</a></span><span class="message">janneke: I guess that is normal for the 32bit compiler</span></div><div class="line" id="090155"><span class="nick" style="color:#2e2a4a"><a href="#090155" label="[09:01:55]">&lt;achaninja&gt;</a></span><span class="message">or is it all? :P</span></div><div class="line" id="091217"><span class="nick" style="color:#bc80bd"><a href="#091217" label="[09:12:17]">&lt;janneke&gt;</a></span><span class="message">achaninja: dunno, not sure what you're doing</span></div><div class="line" id="091242"><span class="nick" style="color:#2e2a4a"><a href="#091242" label="[09:12:42]">&lt;achaninja&gt;</a></span><span class="message">I will make a reproduction, but basically</span></div><div class="line" id="091249"><span class="nick" style="color:#2e2a4a"><a href="#091249" label="[09:12:49]">&lt;achaninja&gt;</a></span><span class="message">compiled a C file that had int64_t</span></div><div class="line" id="091257"><span class="nick" style="color:#2e2a4a"><a href="#091257" label="[09:12:57]">&lt;achaninja&gt;</a></span><span class="message">and I didn't have -m 64</span></div><div class="line" id="091315"><span class="nick" style="color:#2e2a4a"><a href="#091315" label="[09:13:15]">&lt;achaninja&gt;</a></span><span class="message">adding -m 64 allowed me to handle int64_t but I got a different error</span></div><div class="line" id="091327"><span class="nick" style="color:#2e2a4a"><a href="#091327" label="[09:13:27]">&lt;achaninja&gt;</a></span><span class="message">I'm attempting to compile:</span></div><div class="line" id="091346"><span class="nick" style="color:#2e2a4a"><a href="#091346" label="[09:13:46]">&lt;achaninja&gt;</a></span><span class="message">this file</span></div><div class="line" id="091346"><span class="nick" style="color:#2e2a4a"><a href="#091346" label="[09:13:46]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/michaelforney/cproc/blob/master/util.c">https://github.com/michaelforney/cproc/blob/master/util.c</a> </span></div><div class="line" id="091606"><span class="nick" style="color:#2e2a4a"><a href="#091606" label="[09:16:06]">&lt;achaninja&gt;</a></span><span class="message">I'm gonna try to use creduce to find a minimal C file that produces the error but still works under gcc</span></div><div class="line" id="092319"><span class="nick" style="color:#bc80bd"><a href="#092319" label="[09:23:19]">&lt;janneke&gt;</a></span><span class="message">note that x86_64 support is still experimental in mes, iow, it cannot build tinycc correctly</span></div><div class="line" id="092846"><span class="nick" style="color:#2e2a4a"><a href="#092846" label="[09:28:46]">&lt;achaninja&gt;</a></span><span class="message">thats ok</span></div><div class="line" id="092917"><span class="nick" style="color:#2e2a4a"><a href="#092917" label="[09:29:17]">&lt;achaninja&gt;</a></span><span class="message">I can also try to patch cproc to avoid 64 bit variables</span></div><div class="line" id="093013"><span class="nick" style="color:#2e2a4a"><a href="#093013" label="[09:30:13]">&lt;achaninja&gt;</a></span><span class="message">cd qorg11</span></div><div class="line" id="093019"><span class="nick" style="color:#2e2a4a"><a href="#093019" label="[09:30:19]">&lt;achaninja&gt;</a></span><span class="message">oops sorry</span></div><div class="line" id="093155"><span class="nick" style="color:#2e2a4a"><a href="#093155" label="[09:31:55]">&lt;achaninja&gt;</a></span><span class="message">hmm though actually, tcc seems to use them</span></div><div class="line" id="103811"><span class="nick" style="color:#3c5b35"><a href="#103811" label="[10:38:11]">&lt;littlebobeep&gt;</a></span><span class="message">Do these changes not require a Guile binary to make use of?  <a rel="nofollow" href="https://issues.guix.gnu.org/55227">https://issues.guix.gnu.org/55227</a> </span></div><div class="line" id="104609"><span class="nick" style="color:#bc80bd"><a href="#104609" label="[10:46:09]">&lt;janneke&gt;</a></span><span class="message">a guile binary is needed for the guix driver, and it's also used to run gash and gash-utils</span></div><div class="line" id="111546"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="111913"><span class="nick" style="color:#2e2a4a"><a href="#111913" label="[11:19:13]">&lt;achaninja&gt;</a></span><span class="message">is there a configure flag for mescc that tells it what arch it should be building?</span></div><div class="line" id="111921"><span class="nick" style="color:#2e2a4a"><a href="#111921" label="[11:19:21]">&lt;achaninja&gt;</a></span><span class="message">especially by default</span></div><div class="line" id="111942"><span class="nick" style="color:#2e2a4a"><a href="#111942" label="[11:19:42]">&lt;achaninja&gt;</a></span><span class="message">I'm on an x86-64 platform but want it to build a 32 bit libc+tcc</span></div><div class="line" id="112002"><span class="nick" style="color:#2e2a4a"><a href="#112002" label="[11:20:02]">&lt;achaninja&gt;</a></span><span class="message">it seems to be just building the 64 bit version</span></div><div class="line" id="112121"><span class="nick" style="color:#6d2462"><a href="#112121" label="[11:21:21]">&lt;fossy&gt;</a></span><span class="message">hm, can't you have uint64s on 32-bit?</span></div><div class="line" id="112138"><span class="nick" style="color:#6d2462"><a href="#112138" label="[11:21:38]">&lt;fossy&gt;</a></span><span class="message">maybe mes doesn't support</span></div><div class="line" id="112211"><span class="nick" style="color:#6d2462"><a href="#112211" label="[11:22:11]">&lt;fossy&gt;</a></span><span class="message">mes def has long long support which is standardised as &gt;=64 bits</span></div><div class="line" id="112326"><span class="nick" style="color:#2e2a4a"><a href="#112326" label="[11:23:26]">&lt;achaninja&gt;</a></span><span class="message">fossy: it doesn't seem to support it</span></div><div class="line" id="112348"><span class="nick" style="color:#2e2a4a"><a href="#112348" label="[11:23:48]">&lt;achaninja&gt;</a></span><span class="message">strange</span></div><div class="line" id="112353"><span class="nick" style="color:#2e2a4a"><a href="#112353" label="[11:23:53]">&lt;achaninja&gt;</a></span><span class="message">because when I tried to compile it</span></div><div class="line" id="112405"><span class="nick" style="color:#2e2a4a"><a href="#112405" label="[11:24:05]">&lt;achaninja&gt;</a></span><span class="message">it generated the same assembly for long long as it did for int</span></div><div class="line" id="112411"><span class="nick" style="color:#2e2a4a"><a href="#112411" label="[11:24:11]">&lt;achaninja&gt;</a></span><span class="message">in 32 bit mode</span></div><div class="line" id="112441"><span class="nick" style="color:#2e2a4a"><a href="#112441" label="[11:24:41]">&lt;achaninja&gt;</a></span><span class="message">I may have made an error</span></div><div class="line" id="112741"><span class="nick" style="color:#6d2462"><a href="#112741" label="[11:27:41]">&lt;fossy&gt;</a></span><span class="message">hmm</span></div><div class="line" id="113024"><span class="nick" style="color:#2e2a4a"><a href="#113024" label="[11:30:24]">&lt;achaninja&gt;</a></span><span class="message">the tcc codebase does mention int64 but maybe not in a code path the bootstrap uses, not really sure tbh</span></div><div class="line" id="113108"><span class="nick" style="color:#8dd3c7"><a href="#113108" label="[11:31:08]">&lt;stikonas&gt;</a></span><span class="message">are you looking at tc 0.9.26 with janneke's patches?</span></div><div class="line" id="113122"><span class="nick" style="color:#8dd3c7"><a href="#113122" label="[11:31:22]">&lt;stikonas&gt;</a></span><span class="message">s/tc/tcc/</span></div><div class="line" id="113516"><span class="nick" style="color:#2e2a4a"><a href="#113516" label="[11:35:16]">&lt;achaninja&gt;</a></span><span class="message">stikonas: yeah</span></div><div class="line" id="113840"><span class="nick" style="color:#2e2a4a"><a href="#113840" label="[11:38:40]">&lt;achaninja&gt;</a></span><span class="message">fossy: the code is identical</span></div><div class="line" id="113925"><span class="nick" style="color:#2e2a4a"><a href="#113925" label="[11:39:25]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://pastebin.com/raw/H1ZvhN8p">https://pastebin.com/raw/H1ZvhN8p</a> </span></div><div class="line" id="113928"><span class="nick" style="color:#2e2a4a"><a href="#113928" label="[11:39:28]">&lt;achaninja&gt;</a></span><span class="message">heres an example</span></div><div class="line" id="124002"><span class="nick">***</span><span class="message notice">malvo_ is now known as malvo</span></div><div class="line" id="205712"><span class="nick" style="color:#af8d2f"><a href="#205712" label="[20:57:12]">&lt;vagrantc&gt;</a></span><span class="message">is mescc-tools M2libc unchanged from mescc-tools 1.3 to 1.4.0 ?</span></div><div class="line" id="205745"><span class="nick" style="color:#af8d2f"><a href="#205745" label="[20:57:45]">&lt;vagrantc&gt;</a></span><span class="message">never managed to wrap my head around git submodules</span></div><div class="line" id="210406"><span class="nick" style="color:#bc80bd"><a href="#210406" label="[21:04:06]">&lt;janneke&gt;</a></span><span class="message">i believe there were no changes</span></div><div class="line" id="210409"><span class="nick" style="color:#389600"><a href="#210409" label="[21:04:09]">*</a></span><span class="message">janneke set: git config diff.submodule diff</span></div><div class="line" id="210432"><span class="nick" style="color:#bc80bd"><a href="#210432" label="[21:04:32]">&lt;janneke&gt;</a></span><span class="message">and then: git diff Release_1.3  Release_1.4.0  -- M2libc</span></div><div class="line" id="210455"><span class="nick" style="color:#bc80bd"><a href="#210455" label="[21:04:55]">&lt;janneke&gt;</a></span><span class="message">while this gives a diff: git diff Release_1.2.0~10  Release_1.2.0  -- M2libc</span></div><div class="line" id="211517"><span class="nick" style="color:#8dd3c7"><a href="#211517" label="[21:15:17]">&lt;stikonas[m]&gt;</a></span><span class="message">stage0-posix doesn't use submodule from mescc-tools/M2libc anyway</span></div><div class="line" id="211534"><span class="nick" style="color:#8dd3c7"><a href="#211534" label="[21:15:34]">&lt;stikonas[m]&gt;</a></span><span class="message">It uses it's own M2libc submodule</span></div><div class="line" id="211607"><span class="nick" style="color:#af8d2f"><a href="#211607" label="[21:16:07]">&lt;vagrantc&gt;</a></span><span class="message">does mescc-tools build without the submodule?</span></div><div class="line" id="211734"><span class="nick" style="color:#389600"><a href="#211734" label="[21:17:34]">*</a></span><span class="message">vagrantc still uses antiquated technology that builds from tarballs :)</span></div><div class="line" id="211924"><span class="nick" style="color:#af8d2f"><a href="#211924" label="[21:19:24]">&lt;vagrantc&gt;</a></span><span class="message">answered own question... nope, doesn';t build :)</span></div><div class="line" id="212132"><span class="nick" style="color:#389600"><a href="#212132" label="[21:21:32]">*</a></span><span class="message">janneke has been creating tarballs for all those</span></div><div class="line" id="212144"><span class="nick" style="color:#bc80bd"><a href="#212144" label="[21:21:44]">&lt;janneke&gt;</a></span><span class="message">the guix bootstrap needs tarballs too, of course</span></div><div class="line" id="213513"><span class="nick" style="color:#af8d2f"><a href="#213513" label="[21:35:13]">&lt;vagrantc&gt;</a></span><span class="message">yeah, bootstrapping git seems a bit of a dangerous idea</span></div><div class="line" id="213538"><span class="nick" style="color:#af8d2f"><a href="#213538" label="[21:35:38]">&lt;vagrantc&gt;</a></span><span class="message">first, we port git to assembly...</span></div><div class="line" id="213641"><span class="nick" style="color:#2e2a4a"><a href="#213641" label="[21:36:41]">&lt;bauen1&gt;</a></span><span class="message">there's this tutorial on implementing git from scratch in python, so not that far fetched</span></div><div class="line" id="213923"><span class="nick" style="color:#af8d2f"><a href="#213923" label="[21:39:23]">&lt;vagrantc&gt;</a></span><span class="message">that seems to have an even larger bootstrapping chain...</span></div><div class="line" id="214101"><span class="nick" style="color:#6c3d55"><a href="#214101" label="[21:41:01]">&lt;Hagfish&gt;</a></span><span class="message">lol, don't worry, there's a way of bootstrapping Python from Rust... ;-)</span></div><div class="line" id="214314"><span class="nick" style="color:#2e2a4a"><a href="#214314" label="[21:43:14]">&lt;bauen1&gt;</a></span><span class="message">not saying we should use that tutorial, but that it can be done without major issues</span></div><div class="line" id="214407"><span class="nick" style="color:#6c3d55"><a href="#214407" label="[21:44:07]">&lt;Hagfish&gt;</a></span><span class="message">yeah, true</span></div><div class="line" id="214418"><span class="nick" style="color:#6c3d55"><a href="#214418" label="[21:44:18]">&lt;Hagfish&gt;</a></span><span class="message">i'm just worried that bootstrapping might become like <a rel="nofollow" href="https://xkcd.com/349/">https://xkcd.com/349/</a> </span></div><div class="line" id="215022"><span class="nick" style="color:#bc80bd"><a href="#215022" label="[21:50:22]">&lt;janneke&gt;</a></span><span class="message">ow, how cruel!</span></div><div class="line" id="215050"><span class="nick" style="color:#389600"><a href="#215050" label="[21:50:50]">*</a></span><span class="message">janneke thinks we're making amazing progres</span></div><div class="line" id="215058"><span class="nick" style="color:#bc80bd"><a href="#215058" label="[21:50:58]">&lt;janneke&gt;</a></span><span class="message">*progress</span></div><div class="line" id="215557"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="215650"><span class="nick" style="color:#8dd3c7"><a href="#215650" label="[21:56:50]">&lt;stikonas&gt;</a></span><span class="message">well, if you don't want to bootstrap git, you'll still have to bootstrap tar and gz</span></div><div class="line" id="215753"><span class="nick" style="color:#8dd3c7"><a href="#215753" label="[21:57:53]">&lt;stikonas&gt;</a></span><span class="message">you actually need to start with some unpacked files</span></div><div class="line" id="215848"><span class="nick" style="color:#8dd3c7"><a href="#215848" label="[21:58:48]">&lt;stikonas&gt;</a></span><span class="message">though having to get it with git is not ideal</span></div><div class="line" id="215908"><span class="nick" style="color:#8dd3c7"><a href="#215908" label="[21:59:08]">&lt;stikonas&gt;</a></span><span class="message">but tar.gz in some sense is not ideal either</span></div><div class="line" id="220009"><span class="nick" style="color:#8dd3c7"><a href="#220009" label="[22:00:09]">&lt;stikonas&gt;</a></span><span class="message">but at least this is only a problem for stage0-posix and anything else can be built from tarballs as stage0-posix contains untar and ungz</span></div><div class="line" id="220410"><span class="nick" style="color:#bc80bd"><a href="#220410" label="[22:04:10]">&lt;janneke&gt;</a></span><span class="message">yeah, anyway it's not a problem worth focussing on right now, i think</span></div><div class="line" id="220450"><span class="nick" style="color:#8dd3c7"><a href="#220450" label="[22:04:50]">&lt;stikonas&gt;</a></span><span class="message">yeah, just pick what is more convenient</span></div><div class="line" id="221212"><span class="nick" style="color:#6c3d55"><a href="#221212" label="[22:12:12]">&lt;Hagfish&gt;</a></span><span class="message">janneke: i'm sorry if my paranoid worry sounded cruel.  when i think rationally about it, i too am in awe at how much progress has been made</span></div><div class="line" id="221314"><span class="nick" style="color:#6c3d55"><a href="#221314" label="[22:13:14]">&lt;Hagfish&gt;</a></span><span class="message">i think i just hadn't thought about the issue of bootstrapping version control before, and for a moment the whole problem looked fractal, but that just shows my lack of perspective</span></div><div class="line" id="221435"><span class="nick" style="color:#80b1d3"><a href="#221435" label="[22:14:35]">&lt;muurkha&gt;</a></span><span class="message">yeah, agreed, janneke</span></div><div class="line" id="221534"><span class="nick" style="color:#8dd3c7"><a href="#221534" label="[22:15:34]">&lt;stikonas&gt;</a></span><span class="message">well, stage0-posix would always be somewhat cyclic, you can't completely bootstrap it and there will always be issues like that. You can only avoid them in baremetal bootstrap.</span></div><div class="line" id="221535"><span class="nick" style="color:#bc80bd"><a href="#221535" label="[22:15:35]">&lt;janneke&gt;</a></span><span class="message">Hagfish: no worries</span></div><div class="line" id="221601"><span class="nick" style="color:#8dd3c7"><a href="#221601" label="[22:16:01]">&lt;stikonas&gt;</a></span><span class="message">but obviously baremetal bootstrap is less portable and harder</span></div><div class="line" id="221622"><span class="nick" style="color:#8dd3c7"><a href="#221622" label="[22:16:22]">&lt;stikonas&gt;</a></span><span class="message">but if you do baremetal bootstrap, bootstrapping version control is non-issue</span></div><div class="line" id="221631"><span class="nick" style="color:#8dd3c7"><a href="#221631" label="[22:16:31]">&lt;stikonas&gt;</a></span><span class="message">you can start with some sources printed on paper</span></div><div class="line" id="222810"><span class="nick" style="color:#2e2a4a"><a href="#222810" label="[22:28:10]">&lt;bauen1&gt;</a></span><span class="message">i'd argue that how the sources are obtained isn't all that interesting as long as you can audit / view / edit / hash them</span></div><div class="line" id="225457"><span class="nick" style="color:#8dd3c7"><a href="#225457" label="[22:54:57]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/154">https://github.com/fosslinux/live-bootstrap/pull/154</a> </span></div><br /></div></body></html>